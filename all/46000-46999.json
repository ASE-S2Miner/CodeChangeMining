[{"original_method":"/**\n   * Register the cluster internally.\n   * \n   * @param iCluster\n   *          OCluster implementation\n   * @return The id (physical position into the array) of the new cluster just created. First is 0.\n   * @throws IOException\n   */\n  private int registerCluster(final OCluster iCluster) throws IOException {\n    final int id;\n\n    if (iCluster != null) {\n      // CHECK FOR DUPLICATION OF NAMES\n      if (clusterMap.containsKey(iCluster.getName()))\n        throw new OConfigurationException(\"Cannot add segment '\" + iCluster.getName()\n            + \"' because it is already registered in database '\" + name + \"'\");\n      // CREATE AND ADD THE NEW REF SEGMENT\n      clusterMap.put(iCluster.getName(), iCluster);\n      id = iCluster.getId();\n    } else {\n      id = clusters.length;\n    }\n      \n    if (id >= clusters.length) {\n        clusters = OArrays.copyOf(clusters, id + 1);\n    }\n    clusters[id] = iCluster;\n\n    return id;\n  }","id":46000,"modified_method":"/**\n   * Register the cluster internally.\n   * \n   * @param iCluster\n   *          OCluster implementation\n   * @return The id (physical position into the array) of the new cluster just created. First is 0.\n   * @throws IOException\n   */\n  private int registerCluster(final OLocalPaginatedCluster iCluster) throws IOException {\n    final int id;\n\n    if (iCluster != null) {\n      // CHECK FOR DUPLICATION OF NAMES\n      if (clusterMap.containsKey(iCluster.getName()))\n        throw new OConfigurationException(\"Cannot add segment '\" + iCluster.getName()\n            + \"' because it is already registered in database '\" + name + \"'\");\n      // CREATE AND ADD THE NEW REF SEGMENT\n      clusterMap.put(iCluster.getName(), iCluster);\n      id = iCluster.getId();\n    } else {\n      id = clusters.length;\n    }\n\n    if (id >= clusters.length) {\n      clusters = OArrays.copyOf(clusters, id + 1);\n    }\n    clusters[id] = iCluster;\n\n    return id;\n  }","commit_id":"75585374a245a55aaf7a923c9ea4092f695db9b1","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public OCluster getClusterById(int iClusterId) {\n    lock.acquireSharedLock();\n    try {\n\n      if (iClusterId == ORID.CLUSTER_ID_INVALID)\n        // GET THE DEFAULT CLUSTER\n        iClusterId = defaultClusterId;\n\n      checkClusterSegmentIndexRange(iClusterId);\n\n      final OCluster cluster = clusters[iClusterId];\n      if (cluster == null)\n        throw new IllegalArgumentException(\"Cluster \" + iClusterId + \" is null\");\n\n      return cluster;\n    } finally {\n      lock.releaseSharedLock();\n    }\n  }","id":46001,"modified_method":"public OLocalPaginatedCluster getClusterById(int iClusterId) {\n    lock.acquireSharedLock();\n    try {\n\n      if (iClusterId == ORID.CLUSTER_ID_INVALID)\n        // GET THE DEFAULT CLUSTER\n        iClusterId = defaultClusterId;\n\n      checkClusterSegmentIndexRange(iClusterId);\n\n      final OLocalPaginatedCluster cluster = clusters[iClusterId];\n      if (cluster == null)\n        throw new IllegalArgumentException(\"Cluster \" + iClusterId + \" is null\");\n\n      return cluster;\n    } finally {\n      lock.releaseSharedLock();\n    }\n  }","commit_id":"75585374a245a55aaf7a923c9ea4092f695db9b1","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Override\n  public void close(final boolean iForce) {\n    final long timer = Orient.instance().getProfiler().startChrono();\n\n    lock.acquireExclusiveLock();\n    try {\n\n      if (!checkForClose(iForce))\n        return;\n\n      status = STATUS.CLOSING;\n\n      for (OCluster cluster : clusters)\n        if (cluster != null)\n          cluster.close();\n      clusters = new OCluster[0];\n      clusterMap.clear();\n\n      if (configuration != null)\n        configuration.close();\n\n      level2Cache.shutdown();\n\n      super.close(iForce);\n\n      diskCache.close();\n\n      Orient.instance().unregisterStorage(this);\n      status = STATUS.CLOSED;\n    } catch (IOException e) {\n      OLogManager.instance().error(this, \"Error on closing of storage '\" + name, e, OStorageException.class);\n\n    } finally {\n      lock.releaseExclusiveLock();\n\n      Orient.instance().getProfiler().stopChrono(\"db.\" + name + \".close\", \"Close a local database\", timer, \"db.*.close\");\n    }\n  }","id":46002,"modified_method":"@Override\n  public void close(final boolean iForce) {\n    final long timer = Orient.instance().getProfiler().startChrono();\n\n    lock.acquireExclusiveLock();\n    try {\n\n      if (!checkForClose(iForce))\n        return;\n\n      status = STATUS.CLOSING;\n\n      for (OCluster cluster : clusters)\n        if (cluster != null)\n          cluster.close();\n      clusters = new OLocalPaginatedCluster[0];\n      clusterMap.clear();\n\n      if (configuration != null)\n        configuration.close();\n\n      level2Cache.shutdown();\n\n      super.close(iForce);\n\n      diskCache.close();\n\n      Orient.instance().unregisterStorage(this);\n      status = STATUS.CLOSED;\n    } catch (IOException e) {\n      OLogManager.instance().error(this, \"Error on closing of storage '\" + name, e, OStorageException.class);\n\n    } finally {\n      lock.releaseExclusiveLock();\n\n      Orient.instance().getProfiler().stopChrono(\"db.\" + name + \".close\", \"Close a local database\", timer, \"db.*.close\");\n    }\n  }","commit_id":"75585374a245a55aaf7a923c9ea4092f695db9b1","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"private int createClusterFromConfig(final OStorageClusterConfiguration iConfig) throws IOException {\n    OCluster cluster = clusterMap.get(iConfig.getName());\n\n    if (cluster != null) {\n      cluster.configure(this, iConfig);\n      return -1;\n    }\n\n    cluster = new OLocalPaginatedCluster();\n    cluster.configure(this, iConfig);\n\n    return registerCluster(cluster);\n  }","id":46003,"modified_method":"private int createClusterFromConfig(final OStorageClusterConfiguration iConfig) throws IOException {\n    OLocalPaginatedCluster cluster = clusterMap.get(iConfig.getName());\n\n    if (cluster != null) {\n      cluster.configure(this, iConfig);\n      return -1;\n    }\n\n    cluster = new OLocalPaginatedCluster();\n    cluster.configure(this, iConfig);\n\n    return registerCluster(cluster);\n  }","commit_id":"75585374a245a55aaf7a923c9ea4092f695db9b1","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Override\n  public <V> V callInRecordLock(Callable<V> callable, ORID rid, boolean exclusiveLock) {\n    if (exclusiveLock) {\n      modificationLock.requestModificationLock();\n      lock.acquireExclusiveLock();\n    } else\n      lock.acquireSharedLock();\n    try {\n      lockManager.acquireLock(Thread.currentThread(), rid, exclusiveLock ? OLockManager.LOCK.EXCLUSIVE : OLockManager.LOCK.SHARED);\n      try {\n        return callable.call();\n      } finally {\n        lockManager\n            .releaseLock(Thread.currentThread(), rid, exclusiveLock ? OLockManager.LOCK.EXCLUSIVE : OLockManager.LOCK.SHARED);\n      }\n    } catch (RuntimeException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new OException(\"Error on nested call in lock\", e);\n    } finally {\n      if (exclusiveLock) {\n        modificationLock.releaseModificationLock();\n        lock.releaseExclusiveLock();\n      } else\n        lock.releaseSharedLock();\n    }\n  }","id":46004,"modified_method":"@Override\n  public <V> V callInRecordLock(Callable<V> callable, ORID rid, boolean exclusiveLock) {\n    if (exclusiveLock)\n      modificationLock.requestModificationLock();\n\n    try {\n      if (exclusiveLock) {\n        lock.acquireExclusiveLock();\n      } else\n        lock.acquireSharedLock();\n      try {\n        lockManager\n            .acquireLock(Thread.currentThread(), rid, exclusiveLock ? OLockManager.LOCK.EXCLUSIVE : OLockManager.LOCK.SHARED);\n        try {\n          return callable.call();\n        } finally {\n          lockManager.releaseLock(Thread.currentThread(), rid, exclusiveLock ? OLockManager.LOCK.EXCLUSIVE\n              : OLockManager.LOCK.SHARED);\n        }\n      } catch (RuntimeException e) {\n        throw e;\n      } catch (Exception e) {\n        throw new OException(\"Error on nested call in lock\", e);\n      } finally {\n        if (exclusiveLock) {\n          lock.releaseExclusiveLock();\n        } else\n          lock.releaseSharedLock();\n      }\n    } finally {\n      if (exclusiveLock)\n        modificationLock.releaseModificationLock();\n    }\n  }","commit_id":"75585374a245a55aaf7a923c9ea4092f695db9b1","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Override\n  public OStorageOperationResult<Boolean> deleteRecord(final ORecordId rid, final ORecordVersion version, final int mode,\n      ORecordCallback<Boolean> callback) {\n    checkOpeness();\n\n    final OCluster cluster = getClusterById(rid.clusterId);\n    final OLocalPaginatedCluster paginatedCluster = (OLocalPaginatedCluster) cluster;\n\n    paginatedCluster.getExternalModificationLock().requestModificationLock();\n    try {\n      modificationLock.requestModificationLock();\n      try {\n        lock.acquireSharedLock();\n        try {\n          lockManager.acquireLock(Thread.currentThread(), rid, OLockManager.LOCK.EXCLUSIVE);\n          try {\n            final OPhysicalPosition ppos = cluster.getPhysicalPosition(new OPhysicalPosition(rid.clusterPosition));\n\n            if (ppos == null)\n              // ALREADY DELETED\n              return new OStorageOperationResult<Boolean>(false);\n\n            // MVCC TRANSACTION: CHECK IF VERSION IS THE SAME\n            if (version.getCounter() > -1 && !ppos.recordVersion.equals(version))\n              if (OFastConcurrentModificationException.enabled())\n                throw OFastConcurrentModificationException.instance();\n              else\n                throw new OConcurrentModificationException(rid, ppos.recordVersion, version, ORecordOperation.DELETED);\n\n            paginatedCluster.deleteRecord(ppos.clusterPosition);\n\n            return new OStorageOperationResult<Boolean>(true);\n          } finally {\n            lockManager.releaseLock(Thread.currentThread(), rid, OLockManager.LOCK.EXCLUSIVE);\n          }\n        } finally {\n          lock.releaseSharedLock();\n        }\n      } catch (IOException e) {\n        OLogManager.instance().error(this, \"Error on deleting record \" + rid + \"( cluster: \" + cluster + \")\", e);\n      } finally {\n        modificationLock.releaseModificationLock();\n      }\n    } finally {\n      paginatedCluster.getExternalModificationLock().releaseModificationLock();\n    }\n\n    return new OStorageOperationResult<Boolean>(false);\n  }","id":46005,"modified_method":"@Override\n  public OStorageOperationResult<Boolean> deleteRecord(final ORecordId rid, final ORecordVersion version, final int mode,\n      ORecordCallback<Boolean> callback) {\n    checkOpeness();\n\n    final OLocalPaginatedCluster cluster = getClusterById(rid.clusterId);\n\n    cluster.getExternalModificationLock().requestModificationLock();\n    try {\n      modificationLock.requestModificationLock();\n      try {\n        lock.acquireSharedLock();\n        try {\n          lockManager.acquireLock(Thread.currentThread(), rid, OLockManager.LOCK.EXCLUSIVE);\n          try {\n            final OPhysicalPosition ppos = cluster.getPhysicalPosition(new OPhysicalPosition(rid.clusterPosition));\n\n            if (ppos == null)\n              // ALREADY DELETED\n              return new OStorageOperationResult<Boolean>(false);\n\n            // MVCC TRANSACTION: CHECK IF VERSION IS THE SAME\n            if (version.getCounter() > -1 && !ppos.recordVersion.equals(version))\n              if (OFastConcurrentModificationException.enabled())\n                throw OFastConcurrentModificationException.instance();\n              else\n                throw new OConcurrentModificationException(rid, ppos.recordVersion, version, ORecordOperation.DELETED);\n\n            cluster.deleteRecord(ppos.clusterPosition);\n\n            return new OStorageOperationResult<Boolean>(true);\n          } finally {\n            lockManager.releaseLock(Thread.currentThread(), rid, OLockManager.LOCK.EXCLUSIVE);\n          }\n        } finally {\n          lock.releaseSharedLock();\n        }\n      } catch (IOException e) {\n        OLogManager.instance().error(this, \"Error on deleting record \" + rid + \"( cluster: \" + cluster + \")\", e);\n      } finally {\n        modificationLock.releaseModificationLock();\n      }\n    } finally {\n      cluster.getExternalModificationLock().releaseModificationLock();\n    }\n\n    return new OStorageOperationResult<Boolean>(false);\n  }","commit_id":"75585374a245a55aaf7a923c9ea4092f695db9b1","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public Future<IResult> make(MakeSession session, Iterable<? extends IResource> resources, IScript script) {\n    return new FutureValue(doMake(session, resources, script, null));\n  }","id":46006,"modified_method":"public Future<IResult> make(MakeSession session, Iterable<? extends IResource> resources, IScript script) {\n    return doMake(session, resources, script, null);\n  }","commit_id":"880c738f52a9c1e76bb5b95b1fa8cd9f34f48778","url":"https://github.com/JetBrains/MPS"},{"original_method":"public Future<IResult> make(MakeSession session, Iterable<? extends IResource> resources) {\n    return new FutureValue(doMake(session, resources, defaultMakeScript(), null));\n  }","id":46007,"modified_method":"public Future<IResult> make(MakeSession session, Iterable<? extends IResource> resources) {\n    return doMake(session, resources, defaultMakeScript(), null);\n  }","commit_id":"880c738f52a9c1e76bb5b95b1fa8cd9f34f48778","url":"https://github.com/JetBrains/MPS"},{"original_method":"public Future<IResult> make(MakeSession session, Iterable<? extends IResource> resources, IScript script, IScriptController controller) {\n    return new FutureValue(doMake(session, resources, script, controller));\n  }","id":46008,"modified_method":"public Future<IResult> make(MakeSession session, Iterable<? extends IResource> resources, IScript script, IScriptController controller) {\n    return doMake(session, resources, script, controller);\n  }","commit_id":"880c738f52a9c1e76bb5b95b1fa8cd9f34f48778","url":"https://github.com/JetBrains/MPS"},{"original_method":"private Iterable<IMResource> collectResources(IOperationContext context, final MpsWorker.ObjectsToProcess go) {\n    final Wrappers._T<Iterable<SModelDescriptor>> models = new Wrappers._T<Iterable<SModelDescriptor>>(null);\n    ModelAccess.instance().runReadAction(new Runnable() {\n      public void run() {\n        for (Project p : go.getProjects()) {\n          for (IModule mod : withGenerators(p.getModules())) {\n            models.value = Sequence.fromIterable(models.value).concat(Sequence.fromIterable((getModelsToGenerate(mod))));\n\n          }\n        }\n        for (IModule mod : withGenerators(go.getModules())) {\n          models.value = Sequence.fromIterable(models.value).concat(Sequence.fromIterable(getModelsToGenerate(mod)));\n        }\n        if (go.getModels() != null) {\n          models.value = Sequence.fromIterable(models.value).concat(SetSequence.fromSet(go.getModels()));\n        }\n      }\n    });\n    return Sequence.fromIterable(new ModelsToResources(context, Sequence.fromIterable(models.value).where(new IWhereFilter<SModelDescriptor>() {\n      public boolean accept(SModelDescriptor smd) {\n        return GenerationFacade.canGenerate(smd);\n      }\n    })).resources(false)).select(new ISelector<IResource, IMResource>() {\n      public IMResource select(IResource r) {\n        return (IMResource) r;\n      }\n    });\n  }","id":46009,"modified_method":"protected Iterable<IMResource> collectResources(IOperationContext context, final MpsWorker.ObjectsToProcess go) {\n    final Wrappers._T<Iterable<SModelDescriptor>> models = new Wrappers._T<Iterable<SModelDescriptor>>(null);\n    ModelAccess.instance().runReadAction(new Runnable() {\n      public void run() {\n        for (Project p : go.getProjects()) {\n          for (IModule mod : withGenerators(p.getModules())) {\n            models.value = Sequence.fromIterable(models.value).concat(Sequence.fromIterable((getModelsToGenerate(mod))));\n\n          }\n        }\n        for (IModule mod : withGenerators(go.getModules())) {\n          models.value = Sequence.fromIterable(models.value).concat(Sequence.fromIterable(getModelsToGenerate(mod)));\n        }\n        if (go.getModels() != null) {\n          models.value = Sequence.fromIterable(models.value).concat(SetSequence.fromSet(go.getModels()));\n        }\n      }\n    });\n    return Sequence.fromIterable(new ModelsToResources(context, Sequence.fromIterable(models.value).where(new IWhereFilter<SModelDescriptor>() {\n      public boolean accept(SModelDescriptor smd) {\n        return GenerationFacade.canGenerate(smd);\n      }\n    })).resources(false)).select(new ISelector<IResource, IMResource>() {\n      public IMResource select(IResource r) {\n        return (IMResource) r;\n      }\n    });\n  }","commit_id":"880c738f52a9c1e76bb5b95b1fa8cd9f34f48778","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void generate(Project project, MpsWorker.ObjectsToProcess go) {\n    StringBuffer s = new StringBuffer(\"Generating:\");\n    for (Project p : go.getProjects()) {\n      s.append(\"\\n    \");\n      s.append(p);\n    }\n    for (IModule m : go.getModules()) {\n      s.append(\"\\n    \");\n      s.append(m);\n    }\n    for (SModelDescriptor m : go.getModels()) {\n      s.append(\"\\n    \");\n      s.append(m);\n    }\n    info(s.toString());\n    final ProjectOperationContext ctx = new ProjectOperationContext(project);\n\n    final Iterable<IMResource> resources = Sequence.fromIterable(collectResources(ctx, go)).toListSequence();\n    ModelAccess.instance().flushEventQueue();\n    final Wrappers._T<Future<IResult>> res = new Wrappers._T<Future<IResult>>();\n    ThreadUtils.runInUIThreadAndWait(new Runnable() {\n      public void run() {\n        res.value = new BuildMakeService(ctx, myMessageHandler).make(resources);\n      }\n    });\n    try {\n      if (!(res.value.get().isSucessful())) {\n        myErrors.add(\"Make was not successful\");\n      }\n    } catch (InterruptedException e) {\n      myErrors.add(e.toString());\n    } catch (ExecutionException e) {\n      myErrors.add(e.toString());\n    }\n    ModelAccess.instance().flushEventQueue();\n  }","id":46010,"modified_method":"protected void generate(Project project, MpsWorker.ObjectsToProcess go) {\n    StringBuffer s = new StringBuffer(\"Generating:\");\n    for (Project p : go.getProjects()) {\n      s.append(\"\\n    \");\n      s.append(p);\n    }\n    for (IModule m : go.getModules()) {\n      s.append(\"\\n    \");\n      s.append(m);\n    }\n    for (SModelDescriptor m : go.getModels()) {\n      s.append(\"\\n    \");\n      s.append(m);\n    }\n    info(s.toString());\n    final ProjectOperationContext ctx = new ProjectOperationContext(project);\n\n    final Iterable<IMResource> resources = Sequence.fromIterable(collectResources(ctx, go)).toListSequence();\n    ModelAccess.instance().flushEventQueue();\n    final Wrappers._T<Future<IResult>> res = new Wrappers._T<Future<IResult>>();\n    ThreadUtils.runInUIThreadAndWait(new Runnable() {\n      public void run() {\n        res.value = new BuildMakeService(ctx, myMessageHandler).make(resources);\n      }\n    });\n\n    try {\n      if (!(res.value.get().isSucessful())) {\n        myErrors.add(\"Make was not successful\");\n      }\n    } catch (InterruptedException e) {\n      myErrors.add(e.toString());\n    } catch (ExecutionException e) {\n      myErrors.add(e.toString());\n    }\n    ModelAccess.instance().flushEventQueue();\n  }","commit_id":"880c738f52a9c1e76bb5b95b1fa8cd9f34f48778","url":"https://github.com/JetBrains/MPS"},{"original_method":"public Future<IResult> make(Iterable<? extends IResource> resources) {\n    return new FutureValue(doMake(resources, defaultMakeScript(), null));\n  }","id":46011,"modified_method":"public Future<IResult> make(Iterable<? extends IResource> resources) {\n    return doMake(resources, defaultMakeScript(), null);\n  }","commit_id":"0155c613f941b4f14dafae5f58a1680201623ea0","url":"https://github.com/JetBrains/MPS"},{"original_method":"private IResult doMake(Iterable<? extends IResource> inputRes, IScript script, IScriptController controller) {\n    String scrName = \"Build\";\n\n    if (Sequence.fromIterable(inputRes).isEmpty()) {\n      String msg = scrName + \" aborted: nothing to do\";\n      this.showError(msg);\n      return new IResult.FAILURE(null);\n    }\n\n\n    if (!(script.isValid())) {\n      String msg = scrName + \" failed\";\n      showError(msg + \". Invalid script.\");\n      return new IResult.FAILURE(null);\n    }\n\n    IScriptController ctl = this.completeController(controller);\n    IResult res;\n    res = script.execute(ctl, inputRes);\n\n    if (res == null) {\n      String msg = scrName + \" aborted\";\n      showError(msg);\n    } else if (!(res.isSucessful())) {\n      String msg = scrName + \" failed\";\n      showError(msg + \". See previous messages for details.\");\n    }\n    return res;\n  }","id":46012,"modified_method":"private Future<IResult> doMake(final Iterable<? extends IResource> inputRes, final IScript script, IScriptController controller) {\n    String scrName = \"Build\";\n\n    if (Sequence.fromIterable(inputRes).isEmpty()) {\n      String msg = scrName + \" aborted: nothing to do\";\n      this.showError(msg);\n      return new FutureValue(new IResult.FAILURE(null));\n    }\n\n    if (!(script.isValid())) {\n      String msg = scrName + \" failed\";\n      showError(msg + \". Invalid script.\");\n      return new FutureValue(new IResult.FAILURE(null));\n    }\n\n    final Wrappers._T<Iterable<? extends Iterable<IResource>>> clInput = new Wrappers._T<Iterable<? extends Iterable<IResource>>>();\n    final Wrappers._T<Iterable<Iterable<String>>> usedLangs = new Wrappers._T<Iterable<Iterable<String>>>();\n    ModelAccess.instance().runReadAction(new Runnable() {\n      public void run() {\n        final ModulesClusterizer mcr = new ModulesClusterizer();\n        clInput.value = mcr.clusterize(Sequence.fromIterable(inputRes).<IResource>select(new ISelector<IResource, IResource>() {\n          public IResource select(IResource r) {\n            return (IResource) r;\n          }\n        }));\n        usedLangs.value = Sequence.fromIterable(clInput.value).<Iterable<String>>select(new ISelector<Iterable<IResource>, Iterable<String>>() {\n          public Iterable<String> select(Iterable<IResource> it) {\n            return mcr.allUsedLangNamespaces(it);\n          }\n        }).toListSequence();\n      }\n    });\n\n    IScriptController ctl = this.completeController(controller);\n    IResult res;\n\n    MakeTask task = new MakeTask(context.getProject(), scrName, Sequence.fromIterable(clInput.value).<IScript>select(new ISelector<Iterable<IResource>, IScript>() {\n      public IScript select(Iterable<IResource> it) {\n        return script;\n      }\n    }), scrName, clInput.value, ctl, messageHandler, PerformInBackgroundOption.DEAF);\n    ProgressManager.getInstance().run(task);\n\n    // <node> \n\n    return task;\n  }","commit_id":"0155c613f941b4f14dafae5f58a1680201623ea0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public Future<IResult> make(Iterable<? extends IResource> resources, IScript script) {\n    return new FutureValue(doMake(resources, script, null));\n  }","id":46013,"modified_method":"public Future<IResult> make(Iterable<? extends IResource> resources, IScript script) {\n    return doMake(resources, script, null);\n  }","commit_id":"0155c613f941b4f14dafae5f58a1680201623ea0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public Controller(IScriptController delegate, IMessageHandler mh) {\n      this.delegateScrCtr = delegate;\n      this.mh = mh;\n      init();\n    }","id":46014,"modified_method":"public Controller(IScriptController delegate, IMessageHandler mh, ProgressIndicatorProgressStrategy pips) {\n      this.delegateScrCtr = delegate;\n      this.mh = mh;\n      this.pips = pips;\n      init();\n    }","commit_id":"0155c613f941b4f14dafae5f58a1680201623ea0","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void init() {\n      this.confMon = new IConfigMonitor.Stub() {\n        @Override\n        public <T extends IOption> T relayQuery(IQuery<T> query) {\n          T opt = null;\n          if (delegateConfMon != null) {\n            opt = delegateConfMon.relayQuery(query);\n          }\n          return (opt != null ?\n            opt :\n            new UIQueryRelayStrategy().relayQuery(query, getSession().getContext())\n          );\n        }\n      };\n      this.jobMon = new IJobMonitor.Stub() {\n        @Override\n        public boolean stopRequested() {\n          return (progStrat.getProgressIndicator() != null ?\n            progStrat.getProgressIndicator().isCanceled() :\n            false\n          );\n        }\n\n        @Override\n        public void reportFeedback(IFeedback fdbk) {\n          new UIFeedbackStrategy(mh).reportFeedback(fdbk);\n        }\n\n        @Override\n        public IProgress currentProgress() {\n          return progStrat.currentProgress();\n        }\n      };\n    }","id":46015,"modified_method":"private void init() {\n      this.confMon = new IConfigMonitor.Stub() {\n        @Override\n        public <T extends IOption> T relayQuery(IQuery<T> query) {\n          T opt = null;\n          if (delegateConfMon != null) {\n            opt = delegateConfMon.relayQuery(query);\n          }\n          return (opt != null ?\n            opt :\n            new UIQueryRelayStrategy().relayQuery(query, getSession().getContext())\n          );\n        }\n      };\n      this.jobMon = new IJobMonitor.Stub() {\n        @Override\n        public boolean stopRequested() {\n          return (pips.getProgressIndicator() != null ?\n            pips.getProgressIndicator().isCanceled() :\n            false\n          );\n        }\n\n        @Override\n        public void reportFeedback(IFeedback fdbk) {\n          new UIFeedbackStrategy(mh).reportFeedback(fdbk);\n        }\n\n        @Override\n        public IProgress currentProgress() {\n          return pips.currentProgress();\n        }\n      };\n    }","commit_id":"0155c613f941b4f14dafae5f58a1680201623ea0","url":"https://github.com/JetBrains/MPS"},{"original_method":"private Future<IResult> _doMake(final Iterable<? extends IResource> inputRes, final IScript script, IScriptController controller) {\n\n    String scrName = ((this.getSession().isCleanMake() ?\n      \"Rebuild\" :\n      \"Make\"\n    ));\n    IMessageHandler mh = this.getSession().getMessageHandler();\n    if (mh == null) {\n      mh = new WorkbenchMakeService.MessageHandler(\"Make\", this.getSession().getContext());\n    }\n    mh.clear();\n\n    if (Sequence.fromIterable(inputRes).isEmpty()) {\n      if (this.getSession().isCleanMake()) {\n        String msg = scrName + \" aborted: nothing to do\";\n        this.showError(mh, msg);\n        this.displayInfo(msg);\n        return new FutureValue(new IResult.FAILURE(null));\n      } else {\n        this.displayInfo(\"Everything up to date\");\n        return new FutureValue(new IResult.SUCCESS(null));\n      }\n    }\n\n    final Wrappers._T<Iterable<? extends Iterable<IResource>>> clInput = new Wrappers._T<Iterable<? extends Iterable<IResource>>>();\n    final Wrappers._T<Iterable<Iterable<String>>> usedLangs = new Wrappers._T<Iterable<Iterable<String>>>();\n    ModelAccess.instance().runReadAction(new Runnable() {\n      public void run() {\n        final ModulesClusterizer mcr = new ModulesClusterizer();\n        clInput.value = mcr.clusterize(Sequence.fromIterable(inputRes).<IResource>select(new ISelector<IResource, IResource>() {\n          public IResource select(IResource r) {\n            return (IResource) r;\n          }\n        }));\n        usedLangs.value = Sequence.fromIterable(clInput.value).<Iterable<String>>select(new ISelector<Iterable<IResource>, Iterable<String>>() {\n          public Iterable<String> select(Iterable<IResource> it) {\n            return mcr.allUsedLangNamespaces(it);\n          }\n        }).toListSequence();\n      }\n    });\n    IScriptController ctl = this.completeController(mh, controller);\n\n    Iterable<ScriptBuilder> scriptBuilders = Sequence.fromIterable(usedLangs.value).<ScriptBuilder>select(new ISelector<Iterable<String>, ScriptBuilder>() {\n      public ScriptBuilder select(Iterable<String> langs) {\n        final ScriptBuilder scb = new ScriptBuilder();\n        Sequence.fromIterable(langs).visitAll(new IVisitor<String>() {\n          public void visit(String ns) {\n            LanguageRuntime lr = LanguageRegistry.getInstance().getLanguage(ns);\n            Iterable<IFacet> fcts = lr.getFacetProvider().getDescriptor(null).getManifest().facets();\n            scb.withFacetNames(Sequence.fromIterable(fcts).<IFacet.Name>select(new ISelector<IFacet, IFacet.Name>() {\n              public IFacet.Name select(IFacet fct) {\n                return fct.getName();\n              }\n            }));\n          }\n        });\n        return scb.withFinalTarget(new ITarget.Name(\"make\"));\n      }\n    }).toListSequence();\n\n    Iterable<IScript> scripts = ((script != null ?\n      Sequence.fromIterable(scriptBuilders).<IScript>select(new ISelector<ScriptBuilder, IScript>() {\n        public IScript select(ScriptBuilder it) {\n          return script;\n        }\n      }) :\n      Sequence.fromIterable(scriptBuilders).<IScript>select(new ISelector<ScriptBuilder, IScript>() {\n        public IScript select(ScriptBuilder scb) {\n          return scb.toScript();\n        }\n      })\n    ));\n\n    final WorkbenchMakeService.MakeTask task = new WorkbenchMakeService.MakeTask(this.getSession().getContext().getProject(), scrName, scripts, scrName, clInput.value, ctl, mh, PerformInBackgroundOption.DEAF) {\n      @Override\n      protected void done() {\n        attemptCloseSession();\n      }\n    };\n    this.getSession().doExecute(new Runnable() {\n      public void run() {\n        SwingUtilities.invokeLater(new Runnable() {\n          public void run() {\n            IdeEventQueue.getInstance().flushQueue();\n            ProgressManager.getInstance().run(task);\n            IdeEventQueue.getInstance().flushQueue();\n          }\n        });\n      }\n    });\n\n    this.currentProcess = task;\n    return task;\n  }","id":46016,"modified_method":"private Future<IResult> _doMake(final Iterable<? extends IResource> inputRes, final IScript script, IScriptController controller) {\n\n    String scrName = ((this.getSession().isCleanMake() ?\n      \"Rebuild\" :\n      \"Make\"\n    ));\n    IMessageHandler mh = this.getSession().getMessageHandler();\n    if (mh == null) {\n      mh = new WorkbenchMakeService.MessageHandler(\"Make\", this.getSession().getContext());\n    }\n    mh.clear();\n\n    if (Sequence.fromIterable(inputRes).isEmpty()) {\n      if (this.getSession().isCleanMake()) {\n        String msg = scrName + \" aborted: nothing to do\";\n        mh.handle(new Message(MessageKind.ERROR, msg));\n        this.displayInfo(msg);\n        return new FutureValue(new IResult.FAILURE(null));\n      } else {\n        this.displayInfo(\"Everything up to date\");\n        return new FutureValue(new IResult.SUCCESS(null));\n      }\n    }\n\n    final Wrappers._T<Iterable<? extends Iterable<IResource>>> clInput = new Wrappers._T<Iterable<? extends Iterable<IResource>>>();\n    final Wrappers._T<Iterable<Iterable<String>>> usedLangs = new Wrappers._T<Iterable<Iterable<String>>>();\n    ModelAccess.instance().runReadAction(new Runnable() {\n      public void run() {\n        final ModulesClusterizer mcr = new ModulesClusterizer();\n        clInput.value = mcr.clusterize(Sequence.fromIterable(inputRes).<IResource>select(new ISelector<IResource, IResource>() {\n          public IResource select(IResource r) {\n            return (IResource) r;\n          }\n        }));\n        usedLangs.value = Sequence.fromIterable(clInput.value).<Iterable<String>>select(new ISelector<Iterable<IResource>, Iterable<String>>() {\n          public Iterable<String> select(Iterable<IResource> it) {\n            return mcr.allUsedLangNamespaces(it);\n          }\n        }).toListSequence();\n      }\n    });\n    final ProgressIndicatorProgressStrategy pips = new ProgressIndicatorProgressStrategy();\n    IScriptController ctl = new WorkbenchMakeService.Controller(controller, mh, pips);\n\n    Iterable<ScriptBuilder> scriptBuilders = Sequence.fromIterable(usedLangs.value).<ScriptBuilder>select(new ISelector<Iterable<String>, ScriptBuilder>() {\n      public ScriptBuilder select(Iterable<String> langs) {\n        final ScriptBuilder scb = new ScriptBuilder();\n        Sequence.fromIterable(langs).visitAll(new IVisitor<String>() {\n          public void visit(String ns) {\n            LanguageRuntime lr = LanguageRegistry.getInstance().getLanguage(ns);\n            Iterable<IFacet> fcts = lr.getFacetProvider().getDescriptor(null).getManifest().facets();\n            scb.withFacetNames(Sequence.fromIterable(fcts).<IFacet.Name>select(new ISelector<IFacet, IFacet.Name>() {\n              public IFacet.Name select(IFacet fct) {\n                return fct.getName();\n              }\n            }));\n          }\n        });\n        return scb.withFinalTarget(new ITarget.Name(\"make\"));\n      }\n    }).toListSequence();\n\n    Iterable<IScript> scripts = ((script != null ?\n      Sequence.fromIterable(scriptBuilders).<IScript>select(new ISelector<ScriptBuilder, IScript>() {\n        public IScript select(ScriptBuilder it) {\n          return script;\n        }\n      }) :\n      Sequence.fromIterable(scriptBuilders).<IScript>select(new ISelector<ScriptBuilder, IScript>() {\n        public IScript select(ScriptBuilder scb) {\n          return scb.toScript();\n        }\n      })\n    ));\n\n    final MakeTask task = new MakeTask(this.getSession().getContext().getProject(), scrName, scripts, scrName, clInput.value, ctl, mh, PerformInBackgroundOption.DEAF) {\n      @Override\n      protected void aboutToStart() {\n        notifyListeners(new MakeNotification(WorkbenchMakeService.this, MakeNotification.Kind.SCRIPT_ABOUT_TO_START));\n      }\n\n      @Override\n      protected void done() {\n        attemptCloseSession();\n        notifyListeners(new MakeNotification(WorkbenchMakeService.this, MakeNotification.Kind.SCRIPT_FINISHED));\n      }\n\n      @Override\n      protected void displayInfo(String info) {\n        WorkbenchMakeService.this.displayInfo(info);\n      }\n\n      @Override\n      protected void useProgressIndicator(ProgressIndicator pi) {\n        pips.setProgressIndicator(pi);\n      }\n    };\n    this.getSession().doExecute(new Runnable() {\n      public void run() {\n        SwingUtilities.invokeLater(new Runnable() {\n          public void run() {\n            IdeEventQueue.getInstance().flushQueue();\n            ProgressManager.getInstance().run(task);\n            IdeEventQueue.getInstance().flushQueue();\n          }\n        });\n      }\n    });\n\n    this.currentProcess = task;\n    return task;\n  }","commit_id":"0155c613f941b4f14dafae5f58a1680201623ea0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void runJobWithMonitor(_FunctionTypes._void_P1_E0<? super IJobMonitor> code) {\n      final boolean oldFlag = ApplicationImpl.setExceptionalThreadWithReadAccessFlag(true);\n      try {\n        progStrat.setProgressIndicator(progInd);\n        code.invoke(jobMon);\n      } catch (Throwable e) {\n        WorkbenchMakeService.LOG.debug(\"Error running job\", e);\n        jobMon.reportFeedback(new IFeedback.ERROR(\"Error running job\", e));\n      } finally {\n        ApplicationImpl.setExceptionalThreadWithReadAccessFlag(oldFlag);\n      }\n    }","id":46017,"modified_method":"public void runJobWithMonitor(_FunctionTypes._void_P1_E0<? super IJobMonitor> code) {\n      final boolean oldFlag = ApplicationImpl.setExceptionalThreadWithReadAccessFlag(true);\n      try {\n        code.invoke(jobMon);\n      } catch (Throwable e) {\n        WorkbenchMakeService.LOG.debug(\"Error running job\", e);\n        jobMon.reportFeedback(new IFeedback.ERROR(\"Error running job\", e));\n      } finally {\n        ApplicationImpl.setExceptionalThreadWithReadAccessFlag(oldFlag);\n      }\n    }","commit_id":"0155c613f941b4f14dafae5f58a1680201623ea0","url":"https://github.com/JetBrains/MPS"},{"original_method":"private Future<IResult> doMake(final Iterable<? extends IResource> inputRes, final IScript script, IScriptController controller) {\n    String scrName = \"Build\";\n\n    if (Sequence.fromIterable(inputRes).isEmpty()) {\n      String msg = scrName + \" aborted: nothing to do\";\n      this.showError(msg);\n      return new FutureValue(new IResult.FAILURE(null));\n    }\n\n    if (!(script.isValid())) {\n      String msg = scrName + \" failed\";\n      showError(msg + \". Invalid script.\");\n      return new FutureValue(new IResult.FAILURE(null));\n    }\n\n    final Wrappers._T<Iterable<? extends Iterable<IResource>>> clInput = new Wrappers._T<Iterable<? extends Iterable<IResource>>>();\n    final Wrappers._T<Iterable<Iterable<String>>> usedLangs = new Wrappers._T<Iterable<Iterable<String>>>();\n    ModelAccess.instance().runReadAction(new Runnable() {\n      public void run() {\n        final ModulesClusterizer mcr = new ModulesClusterizer();\n        clInput.value = mcr.clusterize(Sequence.fromIterable(inputRes).<IResource>select(new ISelector<IResource, IResource>() {\n          public IResource select(IResource r) {\n            return (IResource) r;\n          }\n        }));\n        usedLangs.value = Sequence.fromIterable(clInput.value).<Iterable<String>>select(new ISelector<Iterable<IResource>, Iterable<String>>() {\n          public Iterable<String> select(Iterable<IResource> it) {\n            return mcr.allUsedLangNamespaces(it);\n          }\n        }).toListSequence();\n      }\n    });\n\n    IScriptController ctl = this.completeController(controller);\n    IResult res;\n\n    MakeTask task = new MakeTask(context.getProject(), scrName, Sequence.fromIterable(clInput.value).<IScript>select(new ISelector<Iterable<IResource>, IScript>() {\n      public IScript select(Iterable<IResource> it) {\n        return script;\n      }\n    }), scrName, clInput.value, ctl, messageHandler, PerformInBackgroundOption.DEAF);\n    ProgressManager.getInstance().run(task);\n\n    // <node> \n\n    return task;\n  }","id":46018,"modified_method":"private Future<IResult> doMake(Iterable<? extends IResource> inputRes, IScript defaultScript, IScriptController controller) {\n    String scrName = \"Build\";\n\n    if (Sequence.fromIterable(inputRes).isEmpty()) {\n      String msg = scrName + \" aborted: nothing to do\";\n      this.showError(msg);\n      return new FutureValue(new IResult.FAILURE(null));\n    }\n\n    return new BuildMakeService.TaskRunner(scrName, messageHandler).runTask(inputRes, defaultScript, controller);\n  }","commit_id":"c1d849fe20397d6d0054000a4ff1c35610885ed7","url":"https://github.com/JetBrains/MPS"},{"original_method":"public Future<IResult> make(Iterable<? extends IResource> resources, IScript script, IScriptController controller) {\n    return new FutureValue(doMake(resources, script, controller));\n  }","id":46019,"modified_method":"public Future<IResult> make(Iterable<? extends IResource> resources, IScript script, IScriptController controller) {\n    return doMake(resources, script, controller);\n  }","commit_id":"c1d849fe20397d6d0054000a4ff1c35610885ed7","url":"https://github.com/JetBrains/MPS"},{"original_method":"private IResult doMake(final Iterable<? extends IResource> inputRes, final IScript script, IScriptController controller) {\n    final String scrName = \"Build\";\n\n    if (Sequence.fromIterable(inputRes).isEmpty()) {\n      String msg = scrName + \" aborted: nothing to do\";\n      this.showError(msg);\n      return new IResult.FAILURE(null);\n    }\n\n\n    if (!(script.isValid())) {\n      String msg = scrName + \" failed\";\n      showError(msg + \". Invalid script.\");\n      return new IResult.FAILURE(null);\n    }\n    final Wrappers._T<Iterable<? extends Iterable<IResource>>> clInput = new Wrappers._T<Iterable<? extends Iterable<IResource>>>();\n    ModelAccess.instance().runReadAction(new Runnable() {\n      public void run() {\n        clInput.value = new ModulesClusterizer().clusterize(Sequence.fromIterable(inputRes).<IResource>select(new ISelector<IResource, IResource>() {\n          public IResource select(IResource r) {\n            return (IResource) r;\n          }\n        }));\n      }\n    });\n    final Wrappers._T<IResult> res = new Wrappers._T<IResult>();\n    final IScriptController ctl = this.completeController(controller);\n\n    ThreadUtils.runInUIThreadAndWait(new Runnable() {\n      public void run() {\n        IdeEventQueue.getInstance().flushQueue();\n        ProgressManager.getInstance().run(new Task.Backgroundable(context.getProject(), scrName, true) {\n          public void run(@NotNull ProgressIndicator pi) {\n            for (Iterable<IResource> cl : clInput.value) {\n              res.value = script.execute(ctl, cl);\n              if (!(res.value.isSucessful()) || pi.isCanceled()) {\n                break;\n              }\n            }\n          }\n\n          @Override\n          public void onSuccess() {\n            reconcile();\n          }\n\n          @Override\n          public void onCancel() {\n            reconcile();\n          }\n\n          private void reconcile() {\n            if (res.value == null) {\n              String msg = scrName + \" aborted\";\n              showError(msg);\n            } else if (!(res.value.isSucessful())) {\n              String msg = scrName + \" failed\";\n              showError(msg + \". See previous messages for details.\");\n            }\n          }\n        });\n      }\n    });\n    return res.value;\n  }","id":46020,"modified_method":"private Future<IResult> doMake(Iterable<? extends IResource> inputRes, IScript defaultScript, IScriptController controller) {\n    String scrName = \"Build\";\n\n    if (Sequence.fromIterable(inputRes).isEmpty()) {\n      String msg = scrName + \" aborted: nothing to do\";\n      this.showError(msg);\n      return new FutureValue(new IResult.FAILURE(null));\n    }\n\n    return new TestMakeService.TaskRunner(scrName, messageHandler).runTask(inputRes, defaultScript, controller);\n  }","commit_id":"c1d849fe20397d6d0054000a4ff1c35610885ed7","url":"https://github.com/JetBrains/MPS"},{"original_method":"public Future<IResult> make(Iterable<? extends IResource> resources, IScript script) {\n    return new FutureValue(doMake(resources, script, null));\n  }","id":46021,"modified_method":"public Future<IResult> make(Iterable<? extends IResource> resources, IScript script) {\n    return doMake(resources, script, null);\n  }","commit_id":"c1d849fe20397d6d0054000a4ff1c35610885ed7","url":"https://github.com/JetBrains/MPS"},{"original_method":"public Future<IResult> make(Iterable<? extends IResource> resources) {\n    return new FutureValue(doMake(resources, null, null));\n  }","id":46022,"modified_method":"public Future<IResult> make(Iterable<? extends IResource> resources) {\n    return doMake(resources, null, null);\n  }","commit_id":"c1d849fe20397d6d0054000a4ff1c35610885ed7","url":"https://github.com/JetBrains/MPS"},{"original_method":"private Future<IResult> _doMake(Iterable<? extends IResource> inputRes, final IScript script, IScriptController controller) {\n\n    String scrName = ((this.getSession().isCleanMake() ?\n      \"Rebuild\" :\n      \"Make\"\n    ));\n    IMessageHandler mh = this.getSession().getMessageHandler();\n    if (mh == null) {\n      mh = new WorkbenchMakeService.MessageHandler(\"Make\", this.getSession().getContext());\n    }\n    mh.clear();\n\n    if (Sequence.fromIterable(inputRes).isEmpty()) {\n      if (this.getSession().isCleanMake()) {\n        String msg = scrName + \" aborted: nothing to do\";\n        mh.handle(new Message(MessageKind.ERROR, msg));\n        this.displayInfo(msg);\n        return new FutureValue(new IResult.FAILURE(null));\n      } else {\n        this.displayInfo(\"Everything up to date\");\n        return new FutureValue(new IResult.SUCCESS(null));\n      }\n    }\n\n    return new WorkbenchMakeService.TaskRunner(scrName, mh).runTask(inputRes, script, controller);\n  }","id":46023,"modified_method":"private Future<IResult> _doMake(Iterable<? extends IResource> inputRes, final IScript defaultScript, IScriptController controller) {\n\n    String scrName = ((this.getSession().isCleanMake() ?\n      \"Rebuild\" :\n      \"Make\"\n    ));\n    IMessageHandler mh = this.getSession().getMessageHandler();\n    if (mh == null) {\n      mh = new WorkbenchMakeService.MessageHandler(\"Make\", this.getSession().getContext());\n    }\n    mh.clear();\n\n    if (Sequence.fromIterable(inputRes).isEmpty()) {\n      if (this.getSession().isCleanMake()) {\n        String msg = scrName + \" aborted: nothing to do\";\n        mh.handle(new Message(MessageKind.ERROR, msg));\n        this.displayInfo(msg);\n        return new FutureValue(new IResult.FAILURE(null));\n      } else {\n        this.displayInfo(\"Everything up to date\");\n        return new FutureValue(new IResult.SUCCESS(null));\n      }\n    }\n\n    return new WorkbenchMakeService.TaskRunner(scrName, mh).runTask(inputRes, defaultScript, controller);\n  }","commit_id":"c1d849fe20397d6d0054000a4ff1c35610885ed7","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void doPut(File source, String destination) throws IOException {\n        PutMethod method = new PutMethod(destination);\n        configureMethod(method);\n        method.setRequestEntity(new FileRequestEntity(source));\n        int result = client.executeMethod(method);\n        if (!wasSuccessful(result)) {\n            throw new IOException(String.format(\"Could not PUT '%s'. Received status code %s from server: %s\", destination, result, method.getStatusText()));\n        }\n    }","id":46024,"modified_method":"private void doPut(File source, String destination) throws IOException {\n        PutMethod method = new PutMethod(destination);\n        configureMethod(method);\n        method.setRequestEntity(new FileRequestEntity(source));\n        int result = executeMethod(method);\n        if (!wasSuccessful(result)) {\n            throw new IOException(String.format(\"Could not PUT '%s'. Received status code %s from server: %s\", destination, result, method.getStatusText()));\n        }\n    }","commit_id":"36f408e848c048145a278e109ec8ecefeaf0cdbb","url":"https://github.com/gradle/gradle"},{"original_method":"private Resource init() throws IOException {\n            LOGGER.info(\"Attempting to GET resource {}.\", source);\n            int result = client.executeMethod(method);\n            if (result == 404) {\n                LOGGER.debug(\"Resource missing: {}.\", source);\n                return new MissingResource(source);\n            }\n            if (!wasSuccessful(result)) {\n                throw new UncheckedIOException(String.format(\"Could not GET '%s'. Received status code %s from server: %s\", source, result, method.getStatusText()));\n            }\n            return new HttpResource(source, method);\n        }","id":46025,"modified_method":"private Resource init() throws IOException {\n            LOGGER.info(\"Attempting to GET resource {}.\", source);\n            int result = executeMethod(method);\n            if (result == 404) {\n                LOGGER.debug(\"Resource missing: {}.\", source);\n                return new MissingResource(source);\n            }\n            if (!wasSuccessful(result)) {\n                throw new UncheckedIOException(String.format(\"Could not GET '%s'. Received status code %s from server: %s\", source, result, method.getStatusText()));\n            }\n            return new HttpResource(source, method);\n        }","commit_id":"36f408e848c048145a278e109ec8ecefeaf0cdbb","url":"https://github.com/gradle/gradle"},{"original_method":"public CommonsHttpClientBackedRepository(String username, String password) {\n        if (GUtil.isTrue(username)) {\n            client.getParams().setAuthenticationPreemptive(true);\n            client.getState().setCredentials(new AuthScope(null, -1, null), new UsernamePasswordCredentials(username, password));\n        }\n    }","id":46026,"modified_method":"public CommonsHttpClientBackedRepository(HttpSettings httpSettings) {\n        PasswordCredentials credentials = httpSettings.getCredentials();\n        if (GUtil.isTrue(credentials.getUsername())) {\n            client.getParams().setAuthenticationPreemptive(true);\n            client.getState().setCredentials(new AuthScope(null, -1, null), new UsernamePasswordCredentials(credentials.getUsername(), credentials.getPassword()));\n        }\n        this.proxySettings = httpSettings.getProxySettings();\n    }","commit_id":"36f408e848c048145a278e109ec8ecefeaf0cdbb","url":"https://github.com/gradle/gradle"},{"original_method":"public CommonsHttpClientResolver(String username, String password) {\n        setRepository(new CommonsHttpClientBackedRepository(username, password));\n    }","id":46027,"modified_method":"public CommonsHttpClientResolver(HttpSettings httpSettings) {\n        setRepository(new CommonsHttpClientBackedRepository(httpSettings));\n    }","commit_id":"36f408e848c048145a278e109ec8ecefeaf0cdbb","url":"https://github.com/gradle/gradle"},{"original_method":"private RepositoryResolver http() {\n        PasswordCredentials credentials = getCredentials();\n        return new CommonsHttpClientResolver(credentials.getUsername(), credentials.getPassword());\n    }","id":46028,"modified_method":"private RepositoryResolver http() {\n        HttpSettings httpSettings = new DefaultHttpSettings(getCredentials());\n        return new CommonsHttpClientResolver(httpSettings);\n    }","commit_id":"36f408e848c048145a278e109ec8ecefeaf0cdbb","url":"https://github.com/gradle/gradle"},{"original_method":"public void createResolvers(Collection<DependencyResolver> resolvers) {\n        URI rootUri = getUrl();\n        if (rootUri == null) {\n            throw new InvalidUserDataException(\"You must specify a URL for a Maven repository.\");\n        }\n\n        MavenResolver resolver = new MavenResolver();\n        resolver.setName(name);\n\n        if (rootUri.getScheme().equalsIgnoreCase(\"file\")) {\n            resolver.setRepository(new FileRepository());\n            resolver.setRepositoryCacheManager(new LocalFileRepositoryCacheManager(name));\n\n            resolver.setRoot(getFilePath(rootUri));\n            \n            Collection<URI> artifactUrls = getArtifactUrls();\n            for (URI repoUrl : artifactUrls) {\n                resolver.addArtifactUrl(getFilePath(repoUrl));\n            }\n        } else {\n            PasswordCredentials credentials = getCredentials();\n            resolver.setRepository(new CommonsHttpClientBackedRepository(credentials.getUsername(), credentials.getPassword()));\n            resolver.setRoot(getUriPath(rootUri));\n\n            Collection<URI> artifactUrls = getArtifactUrls();\n            for (URI repoUrl : artifactUrls) {\n                resolver.addArtifactUrl(getUriPath(repoUrl));\n            }\n        }\n        resolvers.add(resolver);\n    }","id":46029,"modified_method":"public void createResolvers(Collection<DependencyResolver> resolvers) {\n        URI rootUri = getUrl();\n        if (rootUri == null) {\n            throw new InvalidUserDataException(\"You must specify a URL for a Maven repository.\");\n        }\n\n        MavenResolver resolver = new MavenResolver();\n        resolver.setName(name);\n\n        if (rootUri.getScheme().equalsIgnoreCase(\"file\")) {\n            resolver.setRepository(new FileRepository());\n            resolver.setRepositoryCacheManager(new LocalFileRepositoryCacheManager(name));\n\n            resolver.setRoot(getFilePath(rootUri));\n            \n            Collection<URI> artifactUrls = getArtifactUrls();\n            for (URI repoUrl : artifactUrls) {\n                resolver.addArtifactUrl(getFilePath(repoUrl));\n            }\n        } else {\n            HttpSettings httpSettings = new DefaultHttpSettings(getCredentials());\n            resolver.setRepository(new CommonsHttpClientBackedRepository(httpSettings));\n            resolver.setRoot(getUriPath(rootUri));\n\n            Collection<URI> artifactUrls = getArtifactUrls();\n            for (URI repoUrl : artifactUrls) {\n                resolver.addArtifactUrl(getUriPath(repoUrl));\n            }\n        }\n        resolvers.add(resolver);\n    }","commit_id":"36f408e848c048145a278e109ec8ecefeaf0cdbb","url":"https://github.com/gradle/gradle"},{"original_method":"private HttpResponse executeMethod(HttpUriRequest method) throws IOException {\n        LOGGER.debug(\"Performing HTTP GET: {}\", method.getURI());\n        HttpResponse httpResponse = client.execute(method);\n        // Consume content for non-successful, responses. This avoids the connection being left open.\n        if (!wasSuccessful(httpResponse)) {\n            EntityUtils.consume(httpResponse.getEntity());\n            return httpResponse;\n        }\n        return httpResponse;\n    }","id":46030,"modified_method":"private HttpResponse executeMethod(HttpUriRequest method) throws IOException {\n        LOGGER.debug(\"Performing HTTP GET: {}\", method.getURI());\n        HttpResponse httpResponse = client.execute(method, httpContext);\n        // Consume content for non-successful, responses. This avoids the connection being left open.\n        if (!wasSuccessful(httpResponse)) {\n            EntityUtils.consume(httpResponse.getEntity());\n            return httpResponse;\n        }\n        return httpResponse;\n    }","commit_id":"7740b71ae6da5757aa99868a5e15e114d4445347","url":"https://github.com/gradle/gradle"},{"original_method":"public HttpResourceCollection(HttpSettings httpSettings, ExternalArtifactCache externalArtifactCache) {\n        PasswordCredentials credentials = httpSettings.getCredentials();\n        if (GUtil.isTrue(credentials.getUsername())) {\n            httpClientCredentials = new UsernamePasswordCredentials(credentials.getUsername(), credentials.getPassword());\n        } else {\n            httpClientCredentials = null;\n        }\n        this.externalArtifactCache = externalArtifactCache;\n\n        // Use standard JVM proxy settings\n        ProxySelectorRoutePlanner routePlanner = new ProxySelectorRoutePlanner(client.getConnectionManager().getSchemeRegistry(), ProxySelector.getDefault());\n        client.setRoutePlanner(routePlanner);\n\n        client.setHttpRequestRetryHandler(new HttpRequestRetryHandler() {\n            public boolean retryRequest(IOException exception, int executionCount, HttpContext context) {\n                return false;\n            }\n        });\n    }","id":46031,"modified_method":"public HttpResourceCollection(HttpSettings httpSettings, ExternalArtifactCache externalArtifactCache) {\n        this.externalArtifactCache = externalArtifactCache;\n\n        repositoryCredentials = configureCredentials(httpSettings.getCredentials());\n        configureProxy(httpSettings.getProxySettings());\n\n        client.setHttpRequestRetryHandler(new HttpRequestRetryHandler() {\n            public boolean retryRequest(IOException exception, int executionCount, HttpContext context) {\n                return false;\n            }\n        });\n    }","commit_id":"7740b71ae6da5757aa99868a5e15e114d4445347","url":"https://github.com/gradle/gradle"},{"original_method":"private void doPut(File source, String destination) throws IOException {\n        HttpPut method = new HttpPut(destination);\n        configureMethod(method);\n        method.setEntity(new FileEntity(source, \"application/octet-stream\"));\n        LOGGER.debug(\"Performing HTTP PUT: {}\", method.getURI());\n        HttpResponse response = client.execute(method);\n        EntityUtils.consume(response.getEntity());\n        if (!wasSuccessful(response)) {\n            throw new IOException(String.format(\"Could not PUT '%s'. Received status code %s from server: %s\",\n                                                destination, response.getStatusLine().getStatusCode(), response.getStatusLine().getReasonPhrase()));\n        }\n    }","id":46032,"modified_method":"private void doPut(File source, String destination) throws IOException {\n        HttpPut method = new HttpPut(destination);\n        configureMethod(method);\n        method.setEntity(new FileEntity(source, \"application/octet-stream\"));\n        LOGGER.debug(\"Performing HTTP PUT: {}\", method.getURI());\n        HttpResponse response = client.execute(method, httpContext);\n        EntityUtils.consume(response.getEntity());\n        if (!wasSuccessful(response)) {\n            throw new IOException(String.format(\"Could not PUT '%s'. Received status code %s from server: %s\",\n                                                destination, response.getStatusLine().getStatusCode(), response.getStatusLine().getReasonPhrase()));\n        }\n    }","commit_id":"7740b71ae6da5757aa99868a5e15e114d4445347","url":"https://github.com/gradle/gradle"},{"original_method":"private void configureMethod(HttpRequest method) {\n        method.addHeader(\"User-Agent\", \"Gradle/\" + GradleVersion.current().getVersion());\n        method.addHeader(\"Accept-Encoding\", \"identity\");\n\n        // Do preemptive authentication\n        if (httpClientCredentials != null) {\n            try {\n                method.addHeader(new BasicScheme().authenticate(httpClientCredentials, method));\n            } catch (AuthenticationException e) {\n                throw UncheckedException.asUncheckedException(e);\n            }\n        }\n    }","id":46033,"modified_method":"private void configureMethod(HttpRequest method) {\n        method.addHeader(\"User-Agent\", \"Gradle/\" + GradleVersion.current().getVersion());\n        method.addHeader(\"Accept-Encoding\", \"identity\");\n\n        // Do preemptive authentication for basic auth\n        if (repositoryCredentials != null) {\n            try {\n                method.addHeader(new BasicScheme().authenticate(repositoryCredentials, method));\n            } catch (AuthenticationException e) {\n                throw UncheckedException.asUncheckedException(e);\n            }\n        }\n    }","commit_id":"7740b71ae6da5757aa99868a5e15e114d4445347","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n\tprotected ImportPackage createImportPackage(String line) {\n\t\tString importString = StringUtil.trim(line);\n\n\t\tif (importString.equals(StringPool.BACK_SLASH)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tint pos = importString.indexOf(StringPool.SEMICOLON);\n\n\t\tif (pos != -1) {\n\t\t\timportString = importString.substring(0, pos);\n\t\t}\n\t\telse if (importString.endsWith(\",\\\\\")) {\n\t\t\timportString = importString.substring(0, importString.length() - 2);\n\t\t}\n\n\t\treturn new ImportPackage(importString, false, line);\n\t}","id":46034,"modified_method":"@Override\n\tprotected ImportPackage createImportPackage(String line) {\n\t\tif (line.endsWith(StringPool.BACK_SLASH)) {\n\t\t\tline = line.substring(0, line.length() - 1);\n\t\t}\n\n\t\tif (line.endsWith(StringPool.COMMA)) {\n\t\t\tline = line.substring(0, line.length() - 1);\n\t\t}\n\n\t\tString importString = StringUtil.trim(line);\n\n\t\tif (Validator.isNull(importString)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tint pos = importString.indexOf(StringPool.SEMICOLON);\n\n\t\tif (pos != -1) {\n\t\t\timportString = importString.substring(0, pos);\n\t\t}\n\n\t\treturn new ImportPackage(importString, false, line);\n\t}","commit_id":"4b7991b0e7c1005df8e693186fc232ec24e7b3a3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static String formatBNDImports(String content, Pattern pattern)\n\t\tthrows IOException {\n\n\t\tString imports = getImports(content, pattern);\n\n\t\tif (Validator.isNull(imports)) {\n\t\t\treturn content;\n\t\t}\n\n\t\tImportsFormatter importsFormatter = new BNDImportsFormatter();\n\n\t\tString newImports = importsFormatter.format(imports);\n\n\t\tnewImports = StringUtil.replace(newImports, \"\\n\\n\", \"\\n\\t\\\\\\n\");\n\n\t\tif (!imports.equals(newImports)) {\n\t\t\tcontent = StringUtil.replaceFirst(content, imports, newImports);\n\t\t}\n\n\t\treturn content;\n\t}","id":46035,"modified_method":"public static String formatBNDImports(String content, Pattern pattern)\n\t\tthrows IOException {\n\n\t\tString imports = getImports(content, pattern);\n\n\t\tif (Validator.isNull(imports)) {\n\t\t\treturn content;\n\t\t}\n\n\t\tImportsFormatter importsFormatter = new BNDImportsFormatter();\n\n\t\tString newImports = importsFormatter.format(imports);\n\n\t\tnewImports = StringUtil.replace(\n\t\t\tnewImports, new String[] {\"\\n\", \"\\n,\\\\\"},\n\t\t\tnew String[] {\",\\\\\\n\", \"\\n\\t\\\\\"});\n\n\t\tnewImports = StringUtil.replaceLast(\n\t\t\tnewImports, \",\\\\\", StringPool.BLANK);\n\n\t\tif (!imports.equals(newImports)) {\n\t\t\tcontent = StringUtil.replaceFirst(content, imports, newImports);\n\t\t}\n\n\t\treturn content;\n\t}","commit_id":"4b7991b0e7c1005df8e693186fc232ec24e7b3a3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected String doFormat(\n\t\t\tFile file, String fileName, String absolutePath, String content)\n\t\tthrows Exception {\n\n\t\t// LPS-61288\n\n\t\tif (fileName.endsWith(\"-web/bnd.bnd\") &&\n\t\t\tcontent.contains(\"Liferay-Require-SchemaVersion: 1.0.0\")) {\n\n\t\t\tprocessErrorMessage(\n\t\t\t\tfileName,\n\t\t\t\t\"Do not include the header Liferay-Require-SchemaVersion in web \" +\n\t\t\t\t\t\"modules: \" + fileName);\n\t\t}\n\n\t\tMatcher matcher = _incorrectTabPattern.matcher(content);\n\n\t\twhile (matcher.find()) {\n\t\t\tcontent = StringUtil.replaceFirst(\n\t\t\t\tcontent, matcher.group(1), StringPool.TAB, matcher.start());\n\t\t}\n\n\t\tmatcher = _singleValueOnMultipleLinesPattern.matcher(content);\n\n\t\twhile (matcher.find()) {\n\t\t\tcontent = StringUtil.replaceFirst(\n\t\t\t\tcontent, matcher.group(1), StringPool.SPACE, matcher.start());\n\t\t}\n\n\t\tcontent = sortDefinitions(content);\n\n\t\tcontent = BNDImportsFormatter.formatBNDImports(\n\t\t\tcontent, _exportsPattern);\n\t\tcontent = BNDImportsFormatter.formatBNDImports(\n\t\t\tcontent, _importsPattern);\n\n\t\treturn trimContent(content, false);\n\t}","id":46036,"modified_method":"@Override\n\tprotected String doFormat(\n\t\t\tFile file, String fileName, String absolutePath, String content)\n\t\tthrows Exception {\n\n\t\tcontent = trimContent(content, false);\n\n\t\t// LPS-61288\n\n\t\tif (fileName.endsWith(\"-web/bnd.bnd\") &&\n\t\t\tcontent.contains(\"Liferay-Require-SchemaVersion: 1.0.0\")) {\n\n\t\t\tprocessErrorMessage(\n\t\t\t\tfileName,\n\t\t\t\t\"Do not include the header Liferay-Require-SchemaVersion in web \" +\n\t\t\t\t\t\"modules: \" + fileName);\n\t\t}\n\n\t\tMatcher matcher = _incorrectTabPattern.matcher(content);\n\n\t\twhile (matcher.find()) {\n\t\t\tcontent = StringUtil.replaceFirst(\n\t\t\t\tcontent, matcher.group(1), StringPool.TAB, matcher.start());\n\t\t}\n\n\t\tmatcher = _singleValueOnMultipleLinesPattern.matcher(content);\n\n\t\twhile (matcher.find()) {\n\t\t\tcontent = StringUtil.replaceFirst(\n\t\t\t\tcontent, matcher.group(1), StringPool.SPACE, matcher.start());\n\t\t}\n\n\t\tcontent = BNDImportsFormatter.formatBNDImports(\n\t\t\tcontent, _exportsPattern);\n\t\tcontent = BNDImportsFormatter.formatBNDImports(\n\t\t\tcontent, _importsPattern);\n\n\t\treturn sortDefinitions(content);\n\t}","commit_id":"4b7991b0e7c1005df8e693186fc232ec24e7b3a3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private boolean coveredByBlock(final FormattingDocumentModel model) {\n    if (myInitial == null) return true;\n    final String s = myInitial.toString().trim();\n    if (s.length() == 0) return true;\n    if (!(model instanceof FormattingDocumentModelImpl)) return false;\n    PsiFile psiFile = ((FormattingDocumentModelImpl)model).getFile();\n    if (psiFile == null) return false;\n    PsiElement start = psiFile.findElementAt(myStart);\n    PsiElement end = psiFile.findElementAt(myEnd-1);\n    if (CDATA_START.equals(s) || CDATA_END.equals(s)) return true;\n    return start == end && start instanceof PsiWhiteSpace; // there maybe non-white text inside CDATA-encoded injected elements\n  }","id":46037,"modified_method":"private boolean coveredByBlock(final FormattingDocumentModel model) {\n    if (myInitial == null) return true;\n    String s = myInitial.toString().trim();\n    if (s.length() == 0) return true;\n    if (!(model instanceof FormattingDocumentModelImpl)) return false;\n    PsiFile psiFile = ((FormattingDocumentModelImpl)model).getFile();\n    if (psiFile == null) return false;\n    PsiElement start = psiFile.findElementAt(myStart);\n    PsiElement end = psiFile.findElementAt(myEnd-1);\n    if (s.startsWith(CDATA_START)) s = s.substring(CDATA_START.length());\n    if (s.endsWith(CDATA_END)) s = s.substring(0, s.length() - CDATA_END.length());\n    s = s.trim();\n    if (s.length() == 0) return true;\n    return start == end && start instanceof PsiWhiteSpace; // there maybe non-white text inside CDATA-encoded injected elements\n  }","commit_id":"218c7e777e01a2f6a55a86b9c9e854c1128fe177","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n     * Normalize a relative URI path that may have relative values (\"/./\",\n     * \"/../\", and so on ) it it.  <strong>WARNING<\/strong> - This method is\n     * useful only for normalizing application-generated paths.  It does not\n     * try to perform security checks for malicious input.\n     *\n     * @param path Relative path to be normalized\n     * @param replaceBackSlash Should '\\\\' be replaced with '/'\n     *\n     * @return The normalized path or <code>null<\/code> if the path cannot be\n     *         normalized\n     */\n    public static String normalize(String path, boolean replaceBackSlash) {\n\n        if (path == null) {\n            return null;\n        }\n\n        // Create a place for the normalized path\n        String normalized = path;\n\n        if (replaceBackSlash && normalized.indexOf('\\\\') >= 0)\n            normalized = normalized.replace('\\\\', '/');\n\n        // Add a leading \"/\" if necessary\n        if (!normalized.startsWith(\"/\"))\n            normalized = \"/\" + normalized;\n\n        // Resolve occurrences of \"//\" in the normalized path\n        while (true) {\n            int index = normalized.indexOf(\"//\");\n            if (index < 0) {\n                break;\n            }\n            normalized = normalized.substring(0, index) + normalized.substring(index + 1);\n        }\n\n        // Resolve occurrences of \"/./\" in the normalized path\n        while (true) {\n            int index = normalized.indexOf(\"/./\");\n            if (index < 0) {\n                break;\n            }\n            normalized = normalized.substring(0, index) + normalized.substring(index + 2);\n        }\n\n        // Resolve occurrences of \"/../\" in the normalized path\n        while (true) {\n            int index = normalized.indexOf(\"/../\");\n            if (index < 0) {\n                break;\n            }\n            if (index == 0) {\n                return null;  // Trying to go outside our context\n            }\n            int index2 = normalized.lastIndexOf('/', index - 1);\n            normalized = normalized.substring(0, index2) + normalized.substring(index + 3);\n        }\n\n        if (normalized.equals(\"/.\")) {\n            return \"/\";\n        }\n\n        if (normalized.equals(\"/..\")) {\n            return null;  // Trying to go outside our context\n        }\n\n        // Return the normalized path that we have completed\n        return normalized;\n    }","id":46038,"modified_method":"/**\n     * Normalize a relative URI path that may have relative values (\"/./\",\n     * \"/../\", and so on ) it it.  <strong>WARNING<\/strong> - This method is\n     * useful only for normalizing application-generated paths.  It does not\n     * try to perform security checks for malicious input.\n     *\n     * @param path Relative path to be normalized\n     * @param replaceBackSlash Should '\\\\' be replaced with '/'\n     *\n     * @return The normalized path or <code>null<\/code> if the path cannot be\n     *         normalized\n     */\n    public static String normalize(String path, boolean replaceBackSlash) {\n\n        if (path == null) {\n            return null;\n        }\n\n        // Create a place for the normalized path\n        String normalized = path;\n\n        if (replaceBackSlash && normalized.indexOf('\\\\') >= 0)\n            normalized = normalized.replace('\\\\', '/');\n\n        // Add a leading \"/\" if necessary\n        if (!normalized.startsWith(\"/\"))\n            normalized = \"/\" + normalized;\n\n        boolean addedTrailingSlash = false;\n        if (normalized.endsWith(\"/.\") || normalized.endsWith(\"/..\")) {\n            normalized = normalized + \"/\";\n            addedTrailingSlash = true;\n        }\n\n        // Resolve occurrences of \"//\" in the normalized path\n        while (true) {\n            int index = normalized.indexOf(\"//\");\n            if (index < 0) {\n                break;\n            }\n            normalized = normalized.substring(0, index) + normalized.substring(index + 1);\n        }\n\n        // Resolve occurrences of \"/./\" in the normalized path\n        while (true) {\n            int index = normalized.indexOf(\"/./\");\n            if (index < 0) {\n                break;\n            }\n            normalized = normalized.substring(0, index) + normalized.substring(index + 2);\n        }\n\n        // Resolve occurrences of \"/../\" in the normalized path\n        while (true) {\n            int index = normalized.indexOf(\"/../\");\n            if (index < 0) {\n                break;\n            }\n            if (index == 0) {\n                return null;  // Trying to go outside our context\n            }\n            int index2 = normalized.lastIndexOf('/', index - 1);\n            normalized = normalized.substring(0, index2) + normalized.substring(index + 3);\n        }\n\n        if (normalized.length() > 1 && addedTrailingSlash) {\n            // Remove the trailing '/' we added to that input and output are\n            // consistent w.r.t. to the presence of the trailing '/'.\n            normalized = normalized.substring(0, normalized.length() - 1);\n        }\n\n        // Return the normalized path that we have completed\n        return normalized;\n    }","commit_id":"47ecd0d0f9bf47352b9674f50487732d13f9d6d7","url":"https://github.com/apache/tomcat"},{"original_method":"@Override\n\tpublic String getException(String response) {\n\t\tString exception = null;\n\n\t\tJsonNode responseJsonNode = null;\n\n\t\ttry {\n\t\t\tresponse = StringEscapeUtils.unescapeJava(response);\n\n\t\t\tresponseJsonNode = JSONUtil.readTree(response);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tJsonNode errorJsonNode = responseJsonNode.get(\"error\");\n\n\t\tif (errorJsonNode == null) {\n\t\t\tJsonNode exceptionJsonNode = responseJsonNode.get(\"exception\");\n\n\t\t\tif (exceptionJsonNode == null) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\n\t\t\texception = exceptionJsonNode.asText();\n\n\t\t\tif (exception.startsWith(\"No JSON web service action\")) {\n\t\t\t\treturn\n\t\t\t\t\t\"com.liferay.portal.kernel.jsonwebservice.\" +\n\t\t\t\t\t\t\"NoSuchJSONWebServiceException\";\n\t\t\t}\n\t\t}\n\n\t\tif (exception == null) {\n\t\t\tJsonNode typeJsonNode = null;\n\n\t\t\tJsonNode rootCauseJsonNode = responseJsonNode.get(\"rootCause\");\n\n\t\t\tif (rootCauseJsonNode != null) {\n\t\t\t\ttypeJsonNode = rootCauseJsonNode.get(\"type\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttypeJsonNode = errorJsonNode.get(\"type\");\n\t\t\t}\n\n\t\t\texception = typeJsonNode.asText();\n\t\t}\n\n\t\tif (exception.equals(\"java.lang.RuntimeException\")) {\n\t\t\tJsonNode messageJsonNode = null;\n\n\t\t\tif (errorJsonNode != null) {\n\t\t\t\tmessageJsonNode = errorJsonNode.get(\"message\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmessageJsonNode = responseJsonNode.get(\"message\");\n\t\t\t}\n\n\t\t\tString message = messageJsonNode.asText();\n\n\t\t\tif (message.startsWith(\"No JSON web service action\")) {\n\t\t\t\treturn\n\t\t\t\t\t\"com.liferay.portal.kernel.jsonwebservice.\" +\n\t\t\t\t\t\t\"NoSuchJSONWebServiceException\";\n\t\t\t}\n\t\t}\n\n\t\treturn exception;\n\t}","id":46039,"modified_method":"@Override\n\tpublic String getException(String response) {\n\t\tString exception = null;\n\n\t\tJsonNode responseJsonNode = null;\n\n\t\ttry {\n\t\t\tresponse = StringEscapeUtils.unescapeJava(response);\n\n\t\t\tresponseJsonNode = JSONUtil.readTree(response);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tJsonNode errorJsonNode = responseJsonNode.get(\"error\");\n\n\t\tif (errorJsonNode == null) {\n\t\t\tJsonNode exceptionJsonNode = responseJsonNode.get(\"exception\");\n\n\t\t\tif (exceptionJsonNode == null) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\n\t\t\texception = exceptionJsonNode.asText();\n\n\t\t\tif (exception.startsWith(\"No JSON web service action\")) {\n\t\t\t\treturn \"NoSuchJSONWebServiceException\";\n\t\t\t}\n\t\t}\n\n\t\tif (exception == null) {\n\t\t\tJsonNode typeJsonNode = null;\n\n\t\t\tJsonNode rootCauseJsonNode = responseJsonNode.get(\"rootCause\");\n\n\t\t\tif (rootCauseJsonNode != null) {\n\t\t\t\ttypeJsonNode = rootCauseJsonNode.get(\"type\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttypeJsonNode = errorJsonNode.get(\"type\");\n\t\t\t}\n\n\t\t\texception = typeJsonNode.asText();\n\t\t}\n\n\t\tif (exception.endsWith(\"RuntimeException\")) {\n\t\t\tJsonNode messageJsonNode = null;\n\n\t\t\tif (errorJsonNode != null) {\n\t\t\t\tmessageJsonNode = errorJsonNode.get(\"message\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmessageJsonNode = responseJsonNode.get(\"message\");\n\t\t\t}\n\n\t\t\tString message = messageJsonNode.asText();\n\n\t\t\tif (message.startsWith(\"No JSON web service action\")) {\n\t\t\t\treturn \"NoSuchJSONWebServiceException\";\n\t\t\t}\n\t\t}\n\n\t\treturn exception;\n\t}","commit_id":"d20416efd5e91af37ad5d4af313521d972b47ecd","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic boolean handlePortalException(String exception) throws Exception {\n\t\tif (exception.isEmpty()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tint pos = exception.indexOf(\"$\");\n\n\t\tif (pos > 0) {\n\t\t\texception = exception.substring(0, pos);\n\t\t}\n\n\t\tboolean retryInProgress = ConnectionRetryUtil.retryInProgress(\n\t\t\tgetSyncAccountId());\n\n\t\tif (!retryInProgress && _logger.isDebugEnabled()) {\n\t\t\t_logger.debug(\"Handling exception {}\", exception);\n\t\t}\n\n\t\tif (exception.equals(\n\t\t\t\t\"com.liferay.portal.lock.exception.DuplicateLockException\")) {\n\n\t\t\tSyncFile syncFile = getLocalSyncFile();\n\n\t\t\tsyncFile.setState(SyncFile.STATE_ERROR);\n\t\t\tsyncFile.setUiEvent(SyncFile.UI_EVENT_DUPLICATE_LOCK);\n\n\t\t\tSyncFileService.update(syncFile);\n\t\t}\n\t\telse if (exception.equals(\n\t\t\t\t\t\"com.liferay.portal.kernel.upload.UploadException\") ||\n\t\t\t\t exception.contains(\"SizeLimitExceededException\")) {\n\n\t\t\tSyncFile syncFile = getLocalSyncFile();\n\n\t\t\tsyncFile.setState(SyncFile.STATE_ERROR);\n\t\t\tsyncFile.setUiEvent(SyncFile.UI_EVENT_EXCEEDED_SIZE_LIMIT);\n\n\t\t\tSyncFileService.update(syncFile);\n\t\t}\n\t\telse if (exception.equals(\n\t\t\t\t\t\"com.liferay.portal.kernel.security.auth.\" +\n\t\t\t\t\t\t\"PrincipalException\")) {\n\n\t\t\tSyncFileService.setStatuses(\n\t\t\t\tgetLocalSyncFile(), SyncFile.STATE_ERROR,\n\t\t\t\tSyncFile.UI_EVENT_INVALID_PERMISSIONS);\n\t\t}\n\t\telse if (exception.equals(\n\t\t\t\t\t\"com.liferay.portlet.documentlibrary.exception.\" +\n\t\t\t\t\t\t\"FileExtensionException\")) {\n\n\t\t\tSyncFile syncFile = getLocalSyncFile();\n\n\t\t\tsyncFile.setState(SyncFile.STATE_ERROR);\n\t\t\tsyncFile.setUiEvent(SyncFile.UI_EVENT_INVALID_FILE_EXTENSION);\n\n\t\t\tSyncFileService.update(syncFile);\n\t\t}\n\t\telse if (exception.equals(\n\t\t\t\t\t\"com.liferay.portlet.documentlibrary.exception.\" +\n\t\t\t\t\t\t\"FileNameException\") ||\n\t\t\t\t exception.equals(\n\t\t\t\t\t \"com.liferay.portlet.documentlibrary.exception.\" +\n\t\t\t\t\t\t \"FolderNameException\")) {\n\n\t\t\tSyncFile syncFile = getLocalSyncFile();\n\n\t\t\tsyncFile.setState(SyncFile.STATE_ERROR);\n\t\t\tsyncFile.setUiEvent(SyncFile.UI_EVENT_INVALID_FILE_NAME);\n\n\t\t\tSyncFileService.update(syncFile);\n\t\t}\n\t\telse if (exception.equals(\n\t\t\t\t\t\"com.liferay.portlet.documentlibrary.exception.\" +\n\t\t\t\t\t\t\"NoSuchFileEntryException\") ||\n\t\t\t\t exception.equals(\n\t\t\t\t\t\"com.liferay.portlet.documentlibrary.exception.\" +\n\t\t\t\t\t\t\"NoSuchFolderException\")) {\n\n\t\t\tSyncFile syncFile = getLocalSyncFile();\n\n\t\t\tPath filePath = Paths.get(syncFile.getFilePathName());\n\n\t\t\tif (Files.exists(filePath)) {\n\t\t\t\tWatcher watcher = WatcherRegistry.getWatcher(\n\t\t\t\t\tgetSyncAccountId());\n\n\t\t\t\tList<String> deletedFilePathNames =\n\t\t\t\t\twatcher.getDeletedFilePathNames();\n\n\t\t\t\tdeletedFilePathNames.add(syncFile.getFilePathName());\n\n\t\t\t\tFileUtil.deleteFile(filePath);\n\t\t\t}\n\n\t\t\tSyncFileService.deleteSyncFile(syncFile, false);\n\t\t}\n\t\telse if (exception.equals(\n\t\t\t\t\t\"com.liferay.sync.SyncClientMinBuildException\")) {\n\n\t\t\tretryServerConnection(\n\t\t\t\tSyncAccount.UI_EVENT_MIN_BUILD_REQUIREMENT_FAILED);\n\t\t}\n\t\telse if (exception.equals(\n\t\t\t\t\t\"com.liferay.sync.SyncServicesUnavailableException\")) {\n\n\t\t\tretryServerConnection(\n\t\t\t\tSyncAccount.UI_EVENT_SYNC_SERVICES_NOT_ACTIVE);\n\t\t}\n\t\telse if (exception.equals(\n\t\t\t\t\t\"com.liferay.sync.SyncSiteUnavailableException\")) {\n\n\t\t\thandleSiteDeactivatedException();\n\t\t}\n\t\telse if (exception.equals(\n\t\t\t\t\t\"com.liferay.portal.kernel.jsonwebservice.\" +\n\t\t\t\t\t\t\"NoSuchJSONWebServiceException\")) {\n\n\t\t\tretryServerConnection(SyncAccount.UI_EVENT_SYNC_WEB_MISSING);\n\t\t}\n\t\telse if (exception.equals(\"Authenticated access required\") ||\n\t\t\t\t exception.equals(\"java.lang.SecurityException\")) {\n\n\t\t\tretryServerConnection(\n\t\t\t\tSyncAccount.UI_EVENT_AUTHENTICATION_EXCEPTION);\n\t\t}\n\t\telse {\n\t\t\tif (retryInProgress && _logger.isDebugEnabled()) {\n\t\t\t\t_logger.debug(\"Handling exception {}\", exception);\n\t\t\t}\n\n\t\t\tSyncFile syncFile = getLocalSyncFile();\n\n\t\t\tsyncFile.setState(SyncFile.STATE_ERROR);\n\t\t\tsyncFile.setUiEvent(SyncFile.UI_EVENT_NONE);\n\n\t\t\tSyncFileService.update(syncFile);\n\t\t}\n\n\t\treturn true;\n\t}","id":46040,"modified_method":"@Override\n\tpublic boolean handlePortalException(String exception) throws Exception {\n\t\tif (exception.isEmpty()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tString innerException = \"\";\n\n\t\tif (exception.contains(\"$\")) {\n\t\t\tString[] exceptionParts = exception.split(\"$\");\n\n\t\t\texception = exceptionParts[0];\n\t\t\tinnerException = exceptionParts[1];\n\t\t}\n\n\t\tboolean retryInProgress = ConnectionRetryUtil.retryInProgress(\n\t\t\tgetSyncAccountId());\n\n\t\tif (!retryInProgress && _logger.isDebugEnabled()) {\n\t\t\t_logger.debug(\"Handling exception {}\", exception);\n\t\t}\n\n\t\tif (exception.endsWith(\"DuplicateLockException\")) {\n\t\t\tSyncFile syncFile = getLocalSyncFile();\n\n\t\t\tsyncFile.setState(SyncFile.STATE_ERROR);\n\t\t\tsyncFile.setUiEvent(SyncFile.UI_EVENT_DUPLICATE_LOCK);\n\n\t\t\tSyncFileService.update(syncFile);\n\t\t}\n\t\telse if (exception.endsWith(\"UploadException\") ||\n\t\t\t\t innerException.equals(\"SizeLimitExceededException\")) {\n\n\t\t\tSyncFile syncFile = getLocalSyncFile();\n\n\t\t\tsyncFile.setState(SyncFile.STATE_ERROR);\n\t\t\tsyncFile.setUiEvent(SyncFile.UI_EVENT_EXCEEDED_SIZE_LIMIT);\n\n\t\t\tSyncFileService.update(syncFile);\n\t\t}\n\t\telse if (exception.endsWith(\"PrincipalException\")) {\n\t\t\tSyncFileService.setStatuses(\n\t\t\t\tgetLocalSyncFile(), SyncFile.STATE_ERROR,\n\t\t\t\tSyncFile.UI_EVENT_INVALID_PERMISSIONS);\n\t\t}\n\t\telse if (exception.endsWith(\"FileExtensionException\")) {\n\t\t\tSyncFile syncFile = getLocalSyncFile();\n\n\t\t\tsyncFile.setState(SyncFile.STATE_ERROR);\n\t\t\tsyncFile.setUiEvent(SyncFile.UI_EVENT_INVALID_FILE_EXTENSION);\n\n\t\t\tSyncFileService.update(syncFile);\n\t\t}\n\t\telse if (exception.endsWith(\"FileNameException\") ||\n\t\t\t\t exception.endsWith(\"FolderNameException\")) {\n\n\t\t\tSyncFile syncFile = getLocalSyncFile();\n\n\t\t\tsyncFile.setState(SyncFile.STATE_ERROR);\n\t\t\tsyncFile.setUiEvent(SyncFile.UI_EVENT_INVALID_FILE_NAME);\n\n\t\t\tSyncFileService.update(syncFile);\n\t\t}\n\t\telse if (exception.endsWith(\"NoSuchFileEntryException\") ||\n\t\t\t\t exception.endsWith(\"NoSuchFolderException\")) {\n\n\t\t\tSyncFile syncFile = getLocalSyncFile();\n\n\t\t\tPath filePath = Paths.get(syncFile.getFilePathName());\n\n\t\t\tif (Files.exists(filePath)) {\n\t\t\t\tWatcher watcher = WatcherRegistry.getWatcher(\n\t\t\t\t\tgetSyncAccountId());\n\n\t\t\t\tList<String> deletedFilePathNames =\n\t\t\t\t\twatcher.getDeletedFilePathNames();\n\n\t\t\t\tdeletedFilePathNames.add(syncFile.getFilePathName());\n\n\t\t\t\tFileUtil.deleteFile(filePath);\n\t\t\t}\n\n\t\t\tSyncFileService.deleteSyncFile(syncFile, false);\n\t\t}\n\t\telse if (exception.endsWith(\"SyncClientMinBuildException\")) {\n\t\t\tretryServerConnection(\n\t\t\t\tSyncAccount.UI_EVENT_MIN_BUILD_REQUIREMENT_FAILED);\n\t\t}\n\t\telse if (exception.endsWith(\"SyncServicesUnavailableException\")) {\n\t\t\tretryServerConnection(\n\t\t\t\tSyncAccount.UI_EVENT_SYNC_SERVICES_NOT_ACTIVE);\n\t\t}\n\t\telse if (exception.endsWith(\"SyncSiteUnavailableException\")) {\n\t\t\thandleSiteDeactivatedException();\n\t\t}\n\t\telse if (exception.endsWith(\"NoSuchJSONWebServiceException\")) {\n\t\t\tretryServerConnection(SyncAccount.UI_EVENT_SYNC_WEB_MISSING);\n\t\t}\n\t\telse if (exception.equals(\"Authenticated access required\") ||\n\t\t\t\t exception.equals(\"java.lang.SecurityException\")) {\n\n\t\t\tretryServerConnection(\n\t\t\t\tSyncAccount.UI_EVENT_AUTHENTICATION_EXCEPTION);\n\t\t}\n\t\telse {\n\t\t\tif (retryInProgress && _logger.isDebugEnabled()) {\n\t\t\t\t_logger.debug(\"Handling exception {}\", exception);\n\t\t\t}\n\n\t\t\tSyncFile syncFile = getLocalSyncFile();\n\n\t\t\tsyncFile.setState(SyncFile.STATE_ERROR);\n\t\t\tsyncFile.setUiEvent(SyncFile.UI_EVENT_NONE);\n\n\t\t\tSyncFileService.update(syncFile);\n\t\t}\n\n\t\treturn true;\n\t}","commit_id":"d20416efd5e91af37ad5d4af313521d972b47ecd","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testGetException() {\n\t\tHandler handler = new BaseJSONHandler(\n\t\t\tnew GetSyncContextEvent(0, Collections.<String, Object>emptyMap()));\n\n\t\tString expectedException =\n\t\t\t\"com.liferay.portal.kernel.jsonwebservice.\" +\n\t\t\t\t\"NoSuchJSONWebServiceException\";\n\n\t\tString response1 =\n\t\t\t\"{\\\"error\\\":{\\\"message\\\":\\\"No JSON web service action with path\" +\n\t\t\t\t\"/sync-web.syncdlobject/get-sync-context and method POST\" +\n\t\t\t\t\t\"for sync-web\\\",\\\"type\\\":\\\"java.lang.RuntimeException\\\"}}\";\n\n\t\tAssert.assertEquals(expectedException, handler.getException(response1));\n\n\t\tString response2 =\n\t\t\t\"{\\\"message\\\":\\\"No JSON web service action associated with path\" +\n\t\t\t\t\"/sync-web.syncdlobject/get-sync-context and method POST for\" +\n\t\t\t\t\t\"sync-web\\\",\\\"exception\\\":\\\"java.lang.RuntimeException\\\"}\";\n\n\t\tAssert.assertEquals(expectedException, handler.getException(response2));\n\n\t\tString response3 =\n\t\t\t\"{\\\"exception\\\":\\\"No JSON web service action associated with path\" +\n\t\t\t\t\"/sync-web.syncdlobject/get-sync-context and method POST for\" +\n\t\t\t\t\t\"sync-web\\\"}\";\n\n\t\tAssert.assertEquals(expectedException, handler.getException(response3));\n\n\t\tString response4 =\n\t\t\t\"{\\\"message\\\":\\\"Foo\\\",\\\"exception\\\":\" +\n\t\t\t\t\"\\\"java.lang.RuntimeException\\\"}\";\n\n\t\tAssert.assertNotEquals(\n\t\t\texpectedException, handler.getException(response4));\n\t}","id":46041,"modified_method":"@Test\n\tpublic void testGetException() {\n\t\tHandler handler = new BaseJSONHandler(\n\t\t\tnew GetSyncContextEvent(0, Collections.<String, Object>emptyMap()));\n\n\t\tString expectedException = \"NoSuchJSONWebServiceException\";\n\n\t\tString response1 =\n\t\t\t\"{\\\"error\\\":{\\\"message\\\":\\\"No JSON web service action with path\" +\n\t\t\t\t\"/sync-web.syncdlobject/get-sync-context and method POST\" +\n\t\t\t\t\t\"for sync-web\\\",\\\"type\\\":\\\"java.lang.RuntimeException\\\"}}\";\n\n\t\tAssert.assertEquals(expectedException, handler.getException(response1));\n\n\t\tString response2 =\n\t\t\t\"{\\\"message\\\":\\\"No JSON web service action associated with path\" +\n\t\t\t\t\"/sync-web.syncdlobject/get-sync-context and method POST for\" +\n\t\t\t\t\t\"sync-web\\\",\\\"exception\\\":\\\"java.lang.RuntimeException\\\"}\";\n\n\t\tAssert.assertEquals(expectedException, handler.getException(response2));\n\n\t\tString response3 =\n\t\t\t\"{\\\"exception\\\":\\\"No JSON web service action associated with path\" +\n\t\t\t\t\"/sync-web.syncdlobject/get-sync-context and method POST for\" +\n\t\t\t\t\t\"sync-web\\\"}\";\n\n\t\tAssert.assertEquals(expectedException, handler.getException(response3));\n\n\t\tString response4 =\n\t\t\t\"{\\\"message\\\":\\\"Foo\\\",\\\"exception\\\":\" +\n\t\t\t\t\"\\\"java.lang.RuntimeException\\\"}\";\n\n\t\tAssert.assertNotEquals(\n\t\t\texpectedException, handler.getException(response4));\n\t}","commit_id":"d20416efd5e91af37ad5d4af313521d972b47ecd","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic boolean handlePortalException(String exception) throws Exception {\n\t\tSyncFile syncFile = getLocalSyncFile();\n\n\t\tif (_logger.isDebugEnabled()) {\n\t\t\t_logger.debug(\n\t\t\t\t\"Handling exception {} file path {}\", exception,\n\t\t\t\tsyncFile.getFilePathName());\n\t\t}\n\n\t\tif (exception.equals(\n\t\t\t\t\"com.liferay.portal.kernel.security.auth.PrincipalException\")) {\n\n\t\t\tsyncFile.setState(SyncFile.STATE_ERROR);\n\t\t\tsyncFile.setUiEvent(SyncFile.UI_EVENT_INVALID_PERMISSIONS);\n\n\t\t\tSyncFileService.update(syncFile);\n\n\t\t\treturn true;\n\t\t}\n\t\telse if (exception.equals(\n\t\t\t\t\t\"com.liferay.portlet.documentlibrary.\" +\n\t\t\t\t\t\t\"NoSuchFileVersionException\") &&\n\t\t\t\t (boolean)getParameterValue(\"patch\")) {\n\n\t\t\tremoveEvent();\n\n\t\t\tFileEventUtil.downloadFile(getSyncAccountId(), syncFile, false);\n\n\t\t\treturn true;\n\t\t}\n\t\telse if (exception.equals(\n\t\t\t\t\t\"com.liferay.portlet.documentlibrary.\" +\n\t\t\t\t\t\t\"NoSuchFileEntryException\") ||\n\t\t\t\t exception.equals(\n\t\t\t\t\t \"com.liferay.portlet.documentlibrary.\" +\n\t\t\t\t\t\t \"NoSuchFileException\")) {\n\n\t\t\tSyncFileService.deleteSyncFile(syncFile);\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn super.handlePortalException(exception);\n\t}","id":46042,"modified_method":"@Override\n\tpublic boolean handlePortalException(String exception) throws Exception {\n\t\tSyncFile syncFile = getLocalSyncFile();\n\n\t\tif (_logger.isDebugEnabled()) {\n\t\t\t_logger.debug(\n\t\t\t\t\"Handling exception {} file path {}\", exception,\n\t\t\t\tsyncFile.getFilePathName());\n\t\t}\n\n\t\tif (exception.endsWith(\"PrincipalException\")) {\n\t\t\tsyncFile.setState(SyncFile.STATE_ERROR);\n\t\t\tsyncFile.setUiEvent(SyncFile.UI_EVENT_INVALID_PERMISSIONS);\n\n\t\t\tSyncFileService.update(syncFile);\n\n\t\t\treturn true;\n\t\t}\n\t\telse if (exception.endsWith(\"NoSuchFileVersionException\") &&\n\t\t\t\t (boolean)getParameterValue(\"patch\")) {\n\n\t\t\tremoveEvent();\n\n\t\t\tFileEventUtil.downloadFile(getSyncAccountId(), syncFile, false);\n\n\t\t\treturn true;\n\t\t}\n\t\telse if (exception.endsWith(\"NoSuchFileEntryException\") ||\n\t\t\t\t exception.endsWith(\"NoSuchFileException\")) {\n\n\t\t\tSyncFileService.deleteSyncFile(syncFile);\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn super.handlePortalException(exception);\n\t}","commit_id":"d20416efd5e91af37ad5d4af313521d972b47ecd","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic boolean handlePortalException(String exception) throws Exception {\n\t\tif (exception.equals(\n\t\t\t\t\"com.liferay.portal.kernel.upload.UploadException\")) {\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn super.handlePortalException(exception);\n\t}","id":46043,"modified_method":"@Override\n\tpublic boolean handlePortalException(String exception) throws Exception {\n\t\tif (exception.endsWith(\"UploadException\")) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn super.handlePortalException(exception);\n\t}","commit_id":"d20416efd5e91af37ad5d4af313521d972b47ecd","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\n     * Bind this GenericFile to an Exchange\n     */\n    public void bindToExchange(Exchange exchange) {\n        exchange.setProperty(FileComponent.FILE_EXCHANGE_FILE, this);\n        GenericFileMessage<T> in = new GenericFileMessage<T>(this);\n        exchange.setIn(in);\n        populateHeaders(in);\n    }","id":46044,"modified_method":"/**\n     * Bind this GenericFile to an Exchange\n     */\n    public void bindToExchange(Exchange exchange) {\n        Map<String, Object> headers;\n\n        exchange.setProperty(FileComponent.FILE_EXCHANGE_FILE, this);\n        GenericFileMessage<T> msg = new GenericFileMessage<T>(this);\n        if (exchange.hasOut()) {\n            headers = exchange.getOut().hasHeaders() ? exchange.getOut().getHeaders() : null;\n            exchange.setOut(msg);\n        } else {\n            headers = exchange.getIn().hasHeaders() ? exchange.getIn().getHeaders() : null;\n            exchange.setIn(msg);\n        }\n\n        // preserve any existing (non file) headers, before we re-populate headers\n        if (headers != null) {\n            msg.setHeaders(headers);\n            // remove any file related headers, as we will re-populate file headers\n            msg.removeHeaders(\"CamelFile*\");\n        }\n        populateHeaders(msg);\n    }","commit_id":"7345fefc01a2121abd2332c24edd20b306b45da6","url":"https://github.com/apache/camel"},{"original_method":"public static void main(String[] args) throws Exception {\n        String host = \"localhost\";\n        int port = 8101;\n        String user = \"smx\";\n        String password = \"smx\";\n        StringBuilder sb = new StringBuilder();\n\n        for (int i = 0; i < args.length; i++) {\n            if (args[i].charAt(0) == '-') {\n                if (args[i].equals(\"-a\")) {\n                    port = Integer.parseInt(args[++i]);\n                } else if (args[i].equals(\"-h\")) {\n                    host = args[++i];\n                } else if (args[i].equals(\"-u\")) {\n                    user = args[++i];\n                } else if (args[i].equals(\"-p\")) {\n                    password = args[++i];\n                } else if (args[i].equals(\"--help\")) {\n                    System.out.println(\"Apache Felix Karaf client\");\n                    System.out.println(\"  -a [port]     specify the port to connect to\");\n                    System.out.println(\"  -h [host]     specify the host to connect to\");\n                    System.out.println(\"  -u [user]     specify the user name\");\n                    System.out.println(\"  -p [password] specify the password\");\n                    System.out.println(\"  --help        shows this help message\");\n                    System.out.println(\"  [commands]    commands to run\");\n                    System.out.println(\"If no commands are specified, the client will be put in an interactive mode\");\n                    System.exit(0);\n                } else {\n                    System.err.println(\"Unknown option: \" + args[i]);\n                    System.err.println(\"Run with --help for usage\");\n                    System.exit(1);\n                }\n            } else {\n                sb.append(args[i]);\n                sb.append(' ');\n            }\n        }\n\n        // TODO: implement sending a direct command\n\n        SshClient client = null;\n        try {\n            client = SshClient.setUpDefaultClient();\n            client.start();\n            ConnectFuture future = client.connect(host, port);\n            future.await();\n            ClientSession session = future.getSession();\n            session.authPassword(user, password);\n            ClientChannel channel = session.createChannel(\"shell\");\n            channel.setIn(new ConsoleReader().getInput());\n            channel.setOut(System.out);\n            channel.setErr(System.err);\n            channel.open();\n            channel.waitFor(ClientChannel.CLOSED, 0);\n        } catch (Throwable t) {\n            t.printStackTrace();\n            System.exit(1);\n        } finally {\n            try {\n                client.stop();\n            } catch (Throwable t) { }\n        }\n        System.exit(0);\n    }","id":46045,"modified_method":"public static void main(String[] args) throws Exception {\n        String host = \"localhost\";\n        int port = 8101;\n        String user = \"karaf\";\n        String password = \"karaf\";\n        StringBuilder sb = new StringBuilder();\n\n        for (int i = 0; i < args.length; i++) {\n            if (args[i].charAt(0) == '-') {\n                if (args[i].equals(\"-a\")) {\n                    port = Integer.parseInt(args[++i]);\n                } else if (args[i].equals(\"-h\")) {\n                    host = args[++i];\n                } else if (args[i].equals(\"-u\")) {\n                    user = args[++i];\n                } else if (args[i].equals(\"-p\")) {\n                    password = args[++i];\n                } else if (args[i].equals(\"--help\")) {\n                    System.out.println(\"Apache Felix Karaf client\");\n                    System.out.println(\"  -a [port]     specify the port to connect to\");\n                    System.out.println(\"  -h [host]     specify the host to connect to\");\n                    System.out.println(\"  -u [user]     specify the user name\");\n                    System.out.println(\"  -p [password] specify the password\");\n                    System.out.println(\"  --help        shows this help message\");\n                    System.out.println(\"  [commands]    commands to run\");\n                    System.out.println(\"If no commands are specified, the client will be put in an interactive mode\");\n                    System.exit(0);\n                } else {\n                    System.err.println(\"Unknown option: \" + args[i]);\n                    System.err.println(\"Run with --help for usage\");\n                    System.exit(1);\n                }\n            } else {\n                sb.append(args[i]);\n                sb.append(' ');\n            }\n        }\n\n        // TODO: implement sending a direct command\n\n        SshClient client = null;\n        try {\n            client = SshClient.setUpDefaultClient();\n            client.start();\n            ConnectFuture future = client.connect(host, port);\n            future.await();\n            ClientSession session = future.getSession();\n            session.authPassword(user, password);\n            ClientChannel channel;\n\t\t\tif (sb.length() > 0) {\n \t\t\t\tchannel = session.createChannel(\"exec\");\n\t            channel.setIn(new ByteArrayInputStream(sb.append(\"\\n\").toString().getBytes()));\n\t\t\t} else {\n \t\t\t\tchannel = session.createChannel(\"shell\");\n\t            channel.setIn(new ConsoleReader().getInput());\n\t\t\t}\n            channel.setOut(System.out);\n            channel.setErr(System.err);\n            channel.open();\n            channel.waitFor(ClientChannel.CLOSED, 0);\n        } catch (Throwable t) {\n            t.printStackTrace();\n            System.exit(1);\n        } finally {\n            try {\n                client.stop();\n            } catch (Throwable t) { }\n        }\n        System.exit(0);\n    }","commit_id":"65b51e9292ef69c7827fa60b28ae4f6178f7e7c4","url":"https://github.com/apache/felix"},{"original_method":"public void copyFrom(Message that) {\n        if (that == this) {\n            // the same instance so do not need to copy\n            return;\n        }\n\n        setMessageId(that.getMessageId());\n        setBody(that.getBody());\n        setFault(that.isFault());\n\n        if (hasHeaders()) {\n            getHeaders().clear();\n        }\n        if (that.hasHeaders()) {\n            getHeaders().putAll(that.getHeaders());\n        }\n        \n        if (hasAttachments()) {\n            getAttachments().clear();\n        }\n        if (that.hasAttachments()) {\n            getAttachments().putAll(that.getAttachments());\n        }\n    }","id":46046,"modified_method":"public void copyFrom(Message that) {\n        if (that == this) {\n            // the same instance so do not need to copy\n            return;\n        }\n\n        setMessageId(that.getMessageId());\n        setBody(that.getBody());\n        setFault(that.isFault());\n\n        // the headers may be the same instance if the end user has made some mistake\n        // and set the OUT message with the same header instance of the IN message etc\n        boolean sameHeadersInstance = false;\n        if (hasHeaders() && that.hasHeaders() && getHeaders() == that.getHeaders()) {\n            sameHeadersInstance = true;\n        }\n\n        if (!sameHeadersInstance) {\n            if (hasHeaders()) {\n                // okay its safe to clear the headers\n                getHeaders().clear();\n            }\n            if (that.hasHeaders()) {\n                getHeaders().putAll(that.getHeaders());\n            }\n        }\n        \n        if (hasAttachments()) {\n            getAttachments().clear();\n        }\n        if (that.hasAttachments()) {\n            getAttachments().putAll(that.getAttachments());\n        }\n    }","commit_id":"4c9943510a46b3a8a372155680eefe6929fc3e67","url":"https://github.com/apache/camel"},{"original_method":"public void process(Exchange exchange) throws Exception {\n        Object newBody = expression.evaluate(exchange, Object.class);\n\n        Message old = exchange.getIn();\n\n        // create a new message container so we do not drag specialized message objects along\n        Message msg = new DefaultMessage();\n        msg.copyFrom(old);\n        msg.setBody(newBody);\n        exchange.setIn(msg);\n    }","id":46047,"modified_method":"public void process(Exchange exchange) throws Exception {\n        Object newBody = expression.evaluate(exchange, Object.class);\n\n        boolean out = exchange.hasOut();\n        Message old = out ? exchange.getOut() : exchange.getIn();\n\n        // create a new message container so we do not drag specialized message objects along\n        Message msg = new DefaultMessage();\n        msg.copyFrom(old);\n        msg.setBody(newBody);\n\n        if (out) {\n            exchange.setOut(msg);\n        } else {\n            exchange.setIn(msg);\n        }\n    }","commit_id":"4c9943510a46b3a8a372155680eefe6929fc3e67","url":"https://github.com/apache/camel"},{"original_method":"private static void writeFile(String path,\n                                final String text,\n                                Project project, VirtualFile dir, ZipOutputStream stream, boolean overwrite) throws IOException {\n    final VirtualFile descriptionFile = getDescriptionFile(project, path);\n    if (descriptionFile == null) {\n      stream.putNextEntry(new ZipEntry(dir.getName() + \"/\" + path));\n      stream.write(text.getBytes());\n      stream.closeEntry();\n    }\n    else if (overwrite) {\n      UIUtil.invokeAndWaitIfNeeded(new Runnable() {\n        public void run() {\n          try {\n            VfsUtil.saveText(descriptionFile, text);\n          }\n          catch (IOException e) {\n            LOG.error(e);\n          }\n        }\n      });\n    }\n  }","id":46048,"modified_method":"private static void writeFile(String path,\n                                final String text,\n                                Project project, VirtualFile dir, ZipOutputStream stream, boolean overwrite) throws IOException {\n    final VirtualFile descriptionFile = getDescriptionFile(project, path);\n    if (descriptionFile == null) {\n      stream.putNextEntry(new ZipEntry(dir.getName() + \"/\" + path));\n      stream.write(text.getBytes());\n      stream.closeEntry();\n    }\n    else if (overwrite) {\n      UIUtil.invokeAndWaitIfNeeded(new Runnable() {\n        public void run() {\n          ApplicationManager.getApplication().runWriteAction(new Runnable() {\n            @Override\n            public void run() {\n              try {\n                VfsUtil.saveText(descriptionFile, text);\n              }\n              catch (IOException e) {\n                LOG.error(e);\n              }\n            }\n          });\n        }\n      });\n    }\n  }","commit_id":"060e8a49b35781e735847dc68892911fc898b69f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void addHighlToView(final Editor view, EditorColorsScheme scheme, final Map<TextAttributesKey,String> displayText) {\n\n    // XXX: Hack\n    if (HighlighterColors.BAD_CHARACTER.equals(myHighlightType)) {\n      return;\n    }\n\n    final TextAttributes attr = scheme.getAttributes(myHighlightType);\n    if (attr != null) {\n      UIUtil.invokeAndWaitIfNeeded(new Runnable() {\n        @Override\n        public void run() {\n          try {\n            // IDEA-53203: add ERASE_MARKER for manually defined attributes\n            view.getMarkupModel().addRangeHighlighter(myStartOffset, myEndOffset, HighlighterLayer.ADDITIONAL_SYNTAX,\n                                                      TextAttributes.ERASE_MARKER, HighlighterTargetArea.EXACT_RANGE);\n            RangeHighlighter highlighter = view.getMarkupModel()\n              .addRangeHighlighter(myStartOffset, myEndOffset, HighlighterLayer.ADDITIONAL_SYNTAX, attr,\n                                   HighlighterTargetArea.EXACT_RANGE);\n            final Color errorStripeColor = attr.getErrorStripeColor();\n            highlighter.setErrorStripeMarkColor(errorStripeColor);\n            final String tooltip = displayText.get(myHighlightType);\n            highlighter.setErrorStripeTooltip(tooltip);\n          }\n          catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      });\n    }\n  }","id":46049,"modified_method":"public void addHighlToView(final Editor view, EditorColorsScheme scheme, final Map<TextAttributesKey,String> displayText) {\n\n    // XXX: Hack\n    if (HighlighterColors.BAD_CHARACTER.equals(myHighlightType)) {\n      return;\n    }\n\n    final TextAttributes attr = scheme.getAttributes(myHighlightType);\n    if (attr != null) {\n      UIUtil.invokeAndWaitIfNeeded((Runnable)() -> {\n        try {\n          // IDEA-53203: add ERASE_MARKER for manually defined attributes\n          view.getMarkupModel().addRangeHighlighter(myStartOffset, myEndOffset, HighlighterLayer.ADDITIONAL_SYNTAX,\n                                                    TextAttributes.ERASE_MARKER, HighlighterTargetArea.EXACT_RANGE);\n          RangeHighlighter highlighter = view.getMarkupModel()\n            .addRangeHighlighter(myStartOffset, myEndOffset, HighlighterLayer.ADDITIONAL_SYNTAX, attr,\n                                 HighlighterTargetArea.EXACT_RANGE);\n          final Color errorStripeColor = attr.getErrorStripeColor();\n          highlighter.setErrorStripeMarkColor(errorStripeColor);\n          final String tooltip = displayText.get(myHighlightType);\n          highlighter.setErrorStripeTooltip(tooltip);\n        }\n        catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      });\n    }\n  }","commit_id":"819f2dbba2bfabbf0eeb7ad5b7aeb9fc0ab3c8be","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private List<HighlightData> startBlinkingHighlights(final EditorEx editor,\n                                                      final String attrKey,\n                                                      final SyntaxHighlighter highlighter,\n                                                      final boolean show,\n                                                      final Alarm alarm,\n                                                      final int count,\n                                                      final ColorSettingsPage page) {\n    if (show && count <= 0) return Collections.emptyList();\n    removeDecorations(editor);\n    boolean found = false;\n    List<HighlightData> highlights = new ArrayList<>();\n    List<HighlightData> matchingHighlights = new ArrayList<>();\n    for (HighlightData highlightData : myHighlightData) {\n      boolean highlight = show && highlightData.getHighlightType().equals(attrKey);\n      highlightData.addToCollection(highlights, highlight);\n      if (highlight) {\n        matchingHighlights.add(highlightData);\n        found = true;\n      }\n    }\n    if (!found && highlighter != null) {\n      HighlighterIterator iterator = editor.getHighlighter().createIterator(0);\n      do {\n        IElementType tokenType = iterator.getTokenType();\n        TextAttributesKey[] tokenHighlights = highlighter.getTokenHighlights(tokenType);\n        for (final TextAttributesKey tokenHighlight : tokenHighlights) {\n          String type = tokenHighlight.getExternalName();\n          if (show && type != null && type.equals(attrKey)) {\n            HighlightData highlightData = new HighlightData(iterator.getStart(), iterator.getEnd(), BLINKING_HIGHLIGHTS_ATTRIBUTES);\n            highlights.add(highlightData);\n            matchingHighlights.add(highlightData);\n          }\n        }\n        iterator.advance();\n      }\n      while (!iterator.atEnd());\n    }\n\n    final Map<TextAttributesKey, String> displayText = ColorSettingsUtil.keyToDisplayTextMap(page);\n\n    // sort highlights to avoid overlappings\n    Collections.sort(highlights, (highlightData1, highlightData2) -> highlightData1.getStartOffset() - highlightData2.getStartOffset());\n    for (int i = highlights.size() - 1; i >= 0; i--) {\n      HighlightData highlightData = highlights.get(i);\n      int startOffset = highlightData.getStartOffset();\n      HighlightData prevHighlightData = i == 0 ? null : highlights.get(i - 1);\n      if (prevHighlightData != null\n          && startOffset <= prevHighlightData.getEndOffset()\n          && highlightData.getHighlightType().equals(prevHighlightData.getHighlightType())) {\n        prevHighlightData.setEndOffset(highlightData.getEndOffset());\n      }\n      else {\n        highlightData.addHighlToView(editor, myOptions.getSelectedScheme(), displayText);\n      }\n    }\n    alarm.cancelAllRequests();\n    alarm.addComponentRequest(() -> startBlinkingHighlights(editor, attrKey, highlighter, !show, alarm, count - 1, page), 400);\n    return matchingHighlights;\n  }","id":46050,"modified_method":"private List<HighlightData> startBlinkingHighlights(final EditorEx editor,\n                                                      final String attrKey,\n                                                      final SyntaxHighlighter highlighter,\n                                                      final boolean show,\n                                                      final Alarm alarm,\n                                                      final int count,\n                                                      final ColorSettingsPage page) {\n    if (show && count <= 0) return Collections.emptyList();\n    removeDecorations(editor);\n    boolean found = false;\n    List<HighlightData> highlights = new ArrayList<>();\n    List<HighlightData> matchingHighlights = new ArrayList<>();\n    for (HighlightData highlightData : myHighlightData) {\n      boolean highlight = show && highlightData.getHighlightType().equals(attrKey);\n      highlightData.addToCollection(highlights, highlight);\n      if (highlight) {\n        matchingHighlights.add(highlightData);\n        found = true;\n      }\n    }\n    if (!found && highlighter != null) {\n      HighlighterIterator iterator = editor.getHighlighter().createIterator(0);\n      do {\n        IElementType tokenType = iterator.getTokenType();\n        TextAttributesKey[] tokenHighlights = highlighter.getTokenHighlights(tokenType);\n        for (final TextAttributesKey tokenHighlight : tokenHighlights) {\n          String type = tokenHighlight.getExternalName();\n          if (show && type != null && type.equals(attrKey)) {\n            HighlightData highlightData = new HighlightData(iterator.getStart(), iterator.getEnd(), BLINKING_HIGHLIGHTS_ATTRIBUTES);\n            highlights.add(highlightData);\n            matchingHighlights.add(highlightData);\n          }\n        }\n        iterator.advance();\n      }\n      while (!iterator.atEnd());\n    }\n\n    final Map<TextAttributesKey, String> displayText = ColorSettingsUtil.keyToDisplayTextMap(page);\n\n    // sort highlights to avoid overlappings\n    Collections.sort(highlights, Comparator.comparingInt(HighlightData::getStartOffset));\n    for (int i = highlights.size() - 1; i >= 0; i--) {\n      HighlightData highlightData = highlights.get(i);\n      int startOffset = highlightData.getStartOffset();\n      HighlightData prevHighlightData = i == 0 ? null : highlights.get(i - 1);\n      if (prevHighlightData != null\n          && startOffset <= prevHighlightData.getEndOffset()\n          && highlightData.getHighlightType().equals(prevHighlightData.getHighlightType())) {\n        prevHighlightData.setEndOffset(highlightData.getEndOffset());\n      }\n      else {\n        highlightData.addHighlToView(editor, myOptions.getSelectedScheme(), displayText);\n      }\n    }\n    alarm.cancelAllRequests();\n    alarm.addComponentRequest(() -> startBlinkingHighlights(editor, attrKey, highlighter, !show, alarm, count - 1, page), 400);\n    return matchingHighlights;\n  }","commit_id":"819f2dbba2bfabbf0eeb7ad5b7aeb9fc0ab3c8be","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void navigate(boolean select, @NotNull final LogicalPosition pos) {\n    int offset = myEditor.logicalPositionToOffset(pos);\n    final SyntaxHighlighter highlighter = myPage.getHighlighter();\n\n    String type = null;\n    HighlightData highlightData = getDataFromOffset(offset);\n    if (highlightData != null) {\n      // tag-based navigation first\n      type = RainbowHighlighter.isRainbowTempKey(highlightData.getHighlightKey())\n             ? RainbowHighlighter.RAINBOW_TYPE\n             : highlightData.getHighlightType();\n    }\n    else {\n      // if failed, try the highlighter-based navigation\n      type = selectItem(((EditorEx)myEditor).getHighlighter().createIterator(offset), highlighter);\n    }\n\n    setCursor(type == null ? Cursor.TEXT_CURSOR : Cursor.HAND_CURSOR);\n\n    if (select && type != null) {\n      myDispatcher.getMulticaster().selectionInPreviewChanged(type);\n    }\n  }","id":46051,"modified_method":"private void navigate(boolean select, @NotNull final LogicalPosition pos) {\n    int offset = myEditor.logicalPositionToOffset(pos);\n    final SyntaxHighlighter highlighter = myPage.getHighlighter();\n\n    String type;\n    HighlightData highlightData = getDataFromOffset(offset);\n    if (highlightData != null) {\n      // tag-based navigation first\n      type = RainbowHighlighter.isRainbowTempKey(highlightData.getHighlightKey())\n             ? RainbowHighlighter.RAINBOW_TYPE\n             : highlightData.getHighlightType();\n    }\n    else {\n      // if failed, try the highlighter-based navigation\n      type = selectItem(myEditor.getHighlighter().createIterator(offset), highlighter);\n    }\n\n    setCursor(type == null ? Cursor.TEXT_CURSOR : Cursor.HAND_CURSOR);\n\n    if (select && type != null) {\n      myDispatcher.getMulticaster().selectionInPreviewChanged(type);\n    }\n  }","commit_id":"819f2dbba2bfabbf0eeb7ad5b7aeb9fc0ab3c8be","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void setPromptInner(@Nullable final String prompt) {\n    UIUtil.invokeAndWaitIfNeeded(new Runnable() {\n      @Override\n      public void run() {\n        if (!myConsoleEditor.isDisposed()) {\n          myConsoleEditor.setPrefixTextAndAttributes(prompt, myPromptAttributes.getAttributes());\n        }\n      }\n    });\n  }","id":46052,"modified_method":"private void setPromptInner(@Nullable final String prompt) {\n    UIUtil.invokeAndWaitIfNeeded((Runnable)() -> {\n      if (!myConsoleEditor.isDisposed()) {\n        myConsoleEditor.setPrefixTextAndAttributes(prompt, myPromptAttributes.getAttributes());\n      }\n    });\n  }","commit_id":"aa251132860ff81f5519352ec06589fdf2022b37","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  @Override\n  public Object getData(@NonNls String dataId) {\n    Object data = super.getData(dataId);\n    if (data != null) {\n      return data;\n    }\n    else if (OpenFileDescriptor.NAVIGATE_IN_EDITOR.is(dataId)) {\n      return myConsoleEditor;\n    }\n    else if (getProject().isInitialized()) {\n      Caret caret = myConsoleEditor.getCaretModel().getCurrentCaret();\n      return FileEditorManagerEx.getInstanceEx(getProject()).getData(dataId, myConsoleEditor, caret);\n    }\n    return null;\n  }","id":46053,"modified_method":"@Nullable\n  @Override\n  public Object getData(@NonNls String dataId) {\n    return super.getData(dataId);\n  }","commit_id":"aa251132860ff81f5519352ec06589fdf2022b37","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void setupEditor(@NotNull EditorEx editor) {\n      ConsoleViewUtil.setupConsoleEditor(editor, false, false);\n      editor.getContentComponent().setFocusCycleRoot(false);\n      editor.setHorizontalScrollbarVisible(true);\n      editor.setVerticalScrollbarVisible(true);\n      editor.setBorder(null);\n\n      EditorSettings editorSettings = editor.getSettings();\n      editorSettings.setAdditionalLinesCount(1);\n      editorSettings.setAdditionalColumnsCount(1);\n    }","id":46054,"modified_method":"public void setupEditor(@NotNull EditorEx editor) {\n      ConsoleViewUtil.setupConsoleEditor(editor, false, false);\n      editor.getContentComponent().setFocusCycleRoot(false);\n      editor.setHorizontalScrollbarVisible(true);\n      editor.setVerticalScrollbarVisible(true);\n      editor.setBorder(null);\n\n      EditorSettings editorSettings = editor.getSettings();\n      editorSettings.setAdditionalLinesCount(1);\n      editorSettings.setAdditionalColumnsCount(1);\n\n      DataManager.registerDataProvider(editor.getComponent(), (dataId) -> getEditorData(editor, dataId));\n    }","commit_id":"aa251132860ff81f5519352ec06589fdf2022b37","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n    public PsiFile getFile() {\n      return ApplicationManager.getApplication().runReadAction(new Computable<PsiFile>() {\n        @Override\n        public PsiFile compute() {\n          return PsiUtilCore.getPsiFile(project, virtualFile);\n        }\n      });\n    }","id":46055,"modified_method":"@NotNull\n    public PsiFile getFile() {\n      return ReadAction.compute(() -> PsiUtilCore.getPsiFile(project, virtualFile));\n    }","commit_id":"aa251132860ff81f5519352ec06589fdf2022b37","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public void sync(Collection<String> names) throws IOException {\n        // no need to sync this operation it could be long running too\n        for (Directory dir : distributor.all()) {\n            dir.sync(names);\n        }\n    }","id":46056,"modified_method":"@Override\n    public void sync(Collection<String> names) throws IOException {\n        // no need to sync this operation it could be long running too\n        final Map<Directory, Collection<String>> perDirectory = new IdentityHashMap<>();\n        for (String name : names) {\n            final Directory dir = getDirectory(name);\n            Collection<String> dirNames = perDirectory.get(dir);\n            if (dirNames == null) {\n                dirNames = new ArrayList<>();\n                perDirectory.put(dir, dirNames);\n            }\n            dirNames.add(name);\n        }\n        for (Map.Entry<Directory, Collection<String>> entry : perDirectory.entrySet()) {\n            final Directory dir = entry.getKey();\n            final Collection<String> dirNames = entry.getValue();\n            dir.sync(dirNames);\n        }\n    }","commit_id":"999bec12431a51de67edc7745d8e0ce7d4cdaf79","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n  public void close() throws IOException {\n    if (this.closed) {\n      return;\n    }\n    try {\n      logSyncerThread.close();\n      // Make sure we synced everything\n      logSyncerThread.join(this.optionalFlushInterval*2);\n    } catch (InterruptedException e) {\n      LOG.error(\"Exception while waiting for syncer thread to die\", e);\n      Thread.currentThread().interrupt();\n    }\n    try {\n      // Prevent all further flushing and rolling.\n      closeBarrier.stopAndDrainOps();\n    } catch (InterruptedException e) {\n      LOG.error(\"Exception while waiting for cache flushes and log rolls\", e);\n      Thread.currentThread().interrupt();\n    }\n\n    // Tell our listeners that the log is closing\n    if (!this.listeners.isEmpty()) {\n      for (WALActionsListener i : this.listeners) {\n        i.logCloseRequested();\n      }\n    }\n    synchronized (updateLock) {\n      this.closed = true;\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"closing hlog writer in \" + this.dir.toString());\n      }\n      if (this.writer != null) {\n        this.writer.close();\n      }\n    }\n  }","id":46057,"modified_method":"@Override\n  public void close() throws IOException {\n    if (this.closed) {\n      return;\n    }\n    try {\n      logSyncerThread.close();\n      // Make sure we synced everything\n      logSyncerThread.join(this.optionalFlushInterval*2);\n    } catch (InterruptedException e) {\n      LOG.error(\"Exception while waiting for syncer thread to die\", e);\n      Thread.currentThread().interrupt();\n    }\n    try {\n      // Prevent all further flushing and rolling.\n      closeBarrier.stopAndDrainOps();\n    } catch (InterruptedException e) {\n      LOG.error(\"Exception while waiting for cache flushes and log rolls\", e);\n      Thread.currentThread().interrupt();\n    }\n\n    // Tell our listeners that the log is closing\n    if (!this.listeners.isEmpty()) {\n      for (WALActionsListener i : this.listeners) {\n        i.logCloseRequested();\n      }\n    }\n    synchronized (updateLock) {\n      this.closed = true;\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"closing hlog writer in \" + this.dir.toString());\n      }\n      if (this.writer != null) {\n        this.writer.close();\n        this.writer = null;\n      }\n    }\n  }","commit_id":"003a05896e9dcf2a5f863acb14c7b33933b35589","url":"https://github.com/apache/hbase"},{"original_method":"private void syncer(long txid) throws IOException {\n    Writer tempWriter;\n    synchronized (this.updateLock) {\n      if (this.closed) return;\n      // Guaranteed non-null.\n      // Note that parallel sync can close tempWriter.\n      // The current method of dealing with this is to catch exceptions.\n      // See HBASE-4387, HBASE-5623, HBASE-7329.\n      tempWriter = this.writer;\n    }\n    // if the transaction that we are interested in is already \n    // synced, then return immediately.\n    if (txid <= this.syncedTillHere) {\n      return;\n    }\n    try {\n      long doneUpto;\n      long now = EnvironmentEdgeManager.currentTimeMillis();\n      // First flush all the pending writes to HDFS. Then \n      // issue the sync to HDFS. If sync is successful, then update\n      // syncedTillHere to indicate that transactions till this\n      // number has been successfully synced.\n      synchronized (flushLock) {\n        if (txid <= this.syncedTillHere) {\n          return;\n        }\n        doneUpto = this.unflushedEntries.get();\n        List<Entry> pending = logSyncerThread.getPendingWrites();\n        try {\n          logSyncerThread.hlogFlush(tempWriter, pending);\n        } catch(IOException io) {\n          synchronized (this.updateLock) {\n            // HBASE-4387, HBASE-5623, retry with updateLock held\n            tempWriter = this.writer;\n            logSyncerThread.hlogFlush(tempWriter, pending);\n          }\n        }\n      }\n      // another thread might have sync'ed avoid double-sync'ing\n      if (txid <= this.syncedTillHere) {\n        return;\n      }\n      try {\n        tempWriter.sync();\n      } catch(IOException ex) {\n        synchronized (this.updateLock) {\n          // HBASE-4387, HBASE-5623, retry with updateLock held\n          // TODO: we don't actually need to do it for concurrent close - what is the point\n          //       of syncing new unrelated writer? Keep behavior for now.\n          tempWriter = this.writer;\n          tempWriter.sync();\n        }\n      }\n      this.syncedTillHere = Math.max(this.syncedTillHere, doneUpto);\n\n      this.metrics.finishSync(EnvironmentEdgeManager.currentTimeMillis() - now);\n      // TODO: preserving the old behavior for now, but this check is strange. It's not\n      //       protected by any locks here, so for all we know rolling locks might start\n      //       as soon as we enter the \"if\". Is this best-effort optimization check?\n      if (!this.logRollRunning) {\n        checkLowReplication();\n        try {\n          if (tempWriter.getLength() > this.logrollsize) {\n            requestLogRoll();\n          }\n        } catch (IOException x) {\n          LOG.debug(\"Log roll failed and will be retried. (This is not an error)\");\n        }\n      }\n    } catch (IOException e) {\n      LOG.fatal(\"Could not sync. Requesting close of hlog\", e);\n      requestLogRoll();\n      throw e;\n    }\n  }","id":46058,"modified_method":"private void syncer(long txid) throws IOException {\n    Writer tempWriter;\n    synchronized (this.updateLock) {\n      if (this.closed) return;\n      // Guaranteed non-null.\n      // Note that parallel sync can close tempWriter.\n      // The current method of dealing with this is to catch exceptions.\n      // See HBASE-4387, HBASE-5623, HBASE-7329.\n      tempWriter = this.writer;\n    }\n    // if the transaction that we are interested in is already \n    // synced, then return immediately.\n    if (txid <= this.syncedTillHere) {\n      return;\n    }\n    try {\n      long doneUpto;\n      long now = EnvironmentEdgeManager.currentTimeMillis();\n      // First flush all the pending writes to HDFS. Then \n      // issue the sync to HDFS. If sync is successful, then update\n      // syncedTillHere to indicate that transactions till this\n      // number has been successfully synced.\n      IOException ioe = null;\n      List<Entry> pending = null;\n      synchronized (flushLock) {\n        if (txid <= this.syncedTillHere) {\n          return;\n        }\n        doneUpto = this.unflushedEntries.get();\n        pending = logSyncerThread.getPendingWrites();\n        try {\n          logSyncerThread.hlogFlush(tempWriter, pending);\n        } catch(IOException io) {\n          ioe = io;\n          LOG.error(\"syncer encountered error, will retry. txid=\" + txid, ioe);\n        }\n      }\n      if (ioe != null && pending != null) {\n        synchronized (this.updateLock) {\n          synchronized (flushLock) {\n            // HBASE-4387, HBASE-5623, retry with updateLock held\n            tempWriter = this.writer;\n            logSyncerThread.hlogFlush(tempWriter, pending);\n          }\n        }          \n      }\n      // another thread might have sync'ed avoid double-sync'ing\n      if (txid <= this.syncedTillHere) {\n        return;\n      }\n      try {\n        if (tempWriter != null) tempWriter.sync();\n      } catch(IOException ex) {\n        synchronized (this.updateLock) {\n          // HBASE-4387, HBASE-5623, retry with updateLock held\n          // TODO: we don't actually need to do it for concurrent close - what is the point\n          //       of syncing new unrelated writer? Keep behavior for now.\n          tempWriter = this.writer;\n          if (tempWriter != null) tempWriter.sync();\n        }\n      }\n      this.syncedTillHere = Math.max(this.syncedTillHere, doneUpto);\n\n      this.metrics.finishSync(EnvironmentEdgeManager.currentTimeMillis() - now);\n      // TODO: preserving the old behavior for now, but this check is strange. It's not\n      //       protected by any locks here, so for all we know rolling locks might start\n      //       as soon as we enter the \"if\". Is this best-effort optimization check?\n      if (!this.logRollRunning) {\n        checkLowReplication();\n        try {\n          if (tempWriter.getLength() > this.logrollsize) {\n            requestLogRoll();\n          }\n        } catch (IOException x) {\n          LOG.debug(\"Log roll failed and will be retried. (This is not an error)\");\n        }\n      }\n    } catch (IOException e) {\n      LOG.fatal(\"Could not sync. Requesting close of hlog\", e);\n      requestLogRoll();\n      throw e;\n    }\n  }","commit_id":"003a05896e9dcf2a5f863acb14c7b33933b35589","url":"https://github.com/apache/hbase"},{"original_method":"private AvroFile rotateFile(AvroFile avroFile, LoggingContext loggingContext, long timestamp) throws Exception {\n    if (avroFile.getPos() > maxFileSize) {\n      LOG.info(\"Rotating file {}\", avroFile.getLocation());\n      avroFile.close();\n      return createAvroFile(loggingContext, timestamp);\n    }\n    return avroFile;\n  }","id":46059,"modified_method":"private AvroFile rotateFile(AvroFile avroFile, LoggingContext loggingContext, long timestamp) throws Exception {\n    if (!avroFile.isOpen()) {\n      LOG.info(\"Rotating a closed file {}\", avroFile.getLocation());\n      return createAvroFile(loggingContext, timestamp);\n    }\n    if (avroFile.getPos() > maxFileSize) {\n      LOG.info(\"Rotating file {}\", avroFile.getLocation());\n      avroFile.close();\n      return createAvroFile(loggingContext, timestamp);\n    }\n    return avroFile;\n  }","commit_id":"41d9e8208d5f84e72a7e740411268ad7ffab7513","url":"https://github.com/caskdata/cdap"},{"original_method":"public void flush() throws IOException {\n      try {\n        dataFileWriter.flush();\n        outputStream.hflush();\n      } catch (Exception e) {\n        close();\n        throw e;\n      }\n    }","id":46060,"modified_method":"public void flush() throws IOException {\n      try {\n        dataFileWriter.flush();\n        outputStream.hflush();\n      } catch (Exception e) {\n        close();\n        throw new IOException(\"Exception while flushing file \" + location, e);\n      }\n    }","commit_id":"41d9e8208d5f84e72a7e740411268ad7ffab7513","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void flush() throws IOException {\n    long currentTs = System.currentTimeMillis();\n\n    for (Iterator<Map.Entry<String, AvroFile>> it = fileMap.entrySet().iterator(); it.hasNext();) {\n      AvroFile avroFile = it.next().getValue();\n      avroFile.sync();\n\n      // Close inactive files\n      if (currentTs - avroFile.getLastModifiedTs() > inactiveIntervalMs) {\n        avroFile.close();\n        it.remove();\n      }\n    }\n  }","id":46061,"modified_method":"@Override\n  public void flush() throws IOException {\n    long currentTs = System.currentTimeMillis();\n\n    for (Iterator<Map.Entry<String, AvroFile>> it = fileMap.entrySet().iterator(); it.hasNext();) {\n      AvroFile avroFile = it.next().getValue();\n      // TODO: refactor fileMap into a class so that all these checks (and creation of files) can move there CDAP-6475\n      if (!avroFile.isOpen()) {\n        // If the file is already closed (due to an exception),\n        // then remove it from the map so that a new one gets created later\n        it.remove();\n      } else {\n        avroFile.sync();\n\n        // Close inactive files\n        if (currentTs - avroFile.getLastModifiedTs() > inactiveIntervalMs) {\n          avroFile.close();\n          it.remove();\n        }\n      }\n    }\n  }","commit_id":"41d9e8208d5f84e72a7e740411268ad7ffab7513","url":"https://github.com/caskdata/cdap"},{"original_method":"public long getPos() throws IOException {\n      try {\n        return outputStream.getPos();\n      } catch (Exception e) {\n        close();\n        throw e;\n      }\n    }","id":46062,"modified_method":"public long getPos() throws IOException {\n      try {\n        return outputStream.getPos();\n      } catch (Exception e) {\n        close();\n        throw new IOException(\"Exception while getting position of file \" + location, e);\n      }\n    }","commit_id":"41d9e8208d5f84e72a7e740411268ad7ffab7513","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n     * Opens the underlying file for writing.\n     * If open throws an exception then underlying file may still need to be deleted.\n     *\n     * @throws IOException\n     */\n    void open() throws IOException {\n      try {\n        this.outputStream = new FSDataOutputStream(location.getOutputStream(), null);\n        this.dataFileWriter = new DataFileWriter<>(new GenericDatumWriter<GenericRecord>(schema));\n        this.dataFileWriter.create(schema, this.outputStream);\n        this.dataFileWriter.setSyncInterval(syncIntervalBytes);\n        this.lastModifiedTs = System.currentTimeMillis();\n      } catch (Exception e) {\n        close();\n        throw e;\n      }\n      this.isOpen = true;\n    }","id":46063,"modified_method":"/**\n     * Opens the underlying file for writing.\n     * If open throws an exception then underlying file may still need to be deleted.\n     *\n     * @throws IOException\n     */\n    void open() throws IOException {\n      try {\n        this.outputStream = new FSDataOutputStream(location.getOutputStream(), null);\n        this.dataFileWriter = new DataFileWriter<>(new GenericDatumWriter<GenericRecord>(schema));\n        this.dataFileWriter.create(schema, this.outputStream);\n        this.dataFileWriter.setSyncInterval(syncIntervalBytes);\n        this.lastModifiedTs = System.currentTimeMillis();\n      } catch (Exception e) {\n        close();\n        throw new IOException(\"Exception while creating file \" + location, e);\n      }\n      this.isOpen = true;\n    }","commit_id":"41d9e8208d5f84e72a7e740411268ad7ffab7513","url":"https://github.com/caskdata/cdap"},{"original_method":"public void sync() throws IOException {\n      try {\n        dataFileWriter.flush();\n        outputStream.hsync();\n      } catch (Exception e) {\n        close();\n        throw e;\n      }\n    }","id":46064,"modified_method":"public void sync() throws IOException {\n      try {\n        dataFileWriter.flush();\n        outputStream.hsync();\n      } catch (Exception e) {\n        close();\n        throw new IOException(\"Exception while syncing file \" + location, e);\n      }\n    }","commit_id":"41d9e8208d5f84e72a7e740411268ad7ffab7513","url":"https://github.com/caskdata/cdap"},{"original_method":"public void append(LogWriteEvent event) throws IOException {\n      try {\n        dataFileWriter.append(event.getGenericRecord());\n        lastModifiedTs = System.currentTimeMillis();\n      } catch (Exception e) {\n        close();\n        throw e;\n      }\n    }","id":46065,"modified_method":"public void append(LogWriteEvent event) throws IOException {\n      try {\n        dataFileWriter.append(event.getGenericRecord());\n        lastModifiedTs = System.currentTimeMillis();\n      } catch (Exception e) {\n        close();\n        throw new IOException(\"Exception while appending to file \" + location, e);\n      }\n    }","commit_id":"41d9e8208d5f84e72a7e740411268ad7ffab7513","url":"https://github.com/caskdata/cdap"},{"original_method":"public static void copyToDirectory(File copyFrom, Directory dir, String fileName) throws IOException {\n        if (dir instanceof FSDirectory) {\n            File destinationFile = new File(((FSDirectory) dir).getFile(), fileName);\n            if (!destinationFile.exists()) {\n                destinationFile.createNewFile();\n            }\n            FileChannel source = null;\n            FileChannel destination = null;\n            try {\n                source = new FileInputStream(copyFrom).getChannel();\n                destination = new FileOutputStream(destinationFile).getChannel();\n                destination.transferFrom(source, 0, source.size());\n            } finally {\n                if (source != null) {\n                    source.close();\n                }\n                if (destination != null) {\n                    destination.close();\n                }\n            }\n        } else {\n            copyToDirectory(new FileInputStream(copyFrom), dir.createOutput(fileName));\n        }\n        dir.sync(fileName);\n    }","id":46066,"modified_method":"public static void copyToDirectory(File copyFrom, Directory dir, String fileName) throws IOException {\n        if (dir instanceof FSDirectory) {\n            File destinationFile = new File(((FSDirectory) dir).getFile(), fileName);\n            if (!destinationFile.exists()) {\n                destinationFile.createNewFile();\n            }\n            FileChannel source = null;\n            FileChannel destination = null;\n            try {\n                source = new FileInputStream(copyFrom).getChannel();\n                destination = new FileOutputStream(destinationFile).getChannel();\n                destination.transferFrom(source, 0, source.size());\n            } finally {\n                if (source != null) {\n                    source.close();\n                }\n                if (destination != null) {\n                    destination.close();\n                }\n            }\n        } else {\n            copyToDirectory(new FileInputStream(copyFrom), dir.createOutput(fileName));\n        }\n        if (dir instanceof ForceSyncDirectory) {\n            ((ForceSyncDirectory) dir).forceSync(fileName);\n        } else {\n            dir.sync(fileName);\n        }\n    }","commit_id":"38d8fad8d0721ab46b3b9d18527e7adeb28557a2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private RecoveryStatus.Index recoverIndex() throws IndexShardGatewayRecoveryException {\n        File[] files = locationIndex.listFiles();\n        final CountDownLatch latch = new CountDownLatch(files.length);\n        final AtomicReference<Exception> lastException = new AtomicReference<Exception>();\n        for (final File file : files) {\n            threadPool.execute(new Runnable() {\n                @Override public void run() {\n                    try {\n                        copyToDirectory(file, store.directory(), file.getName());\n                    } catch (Exception e) {\n                        logger.debug(\"Failed to read [\" + file + \"] into [\" + store + \"]\", e);\n                        lastException.set(e);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n            });\n        }\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            lastException.set(e);\n        }\n        if (lastException.get() != null) {\n            throw new IndexShardGatewayRecoveryException(shardId(), \"Failed to recover index files\", lastException.get());\n        }\n        long totalSize = 0;\n        for (File file : files) {\n            totalSize += file.length();\n        }\n        return new RecoveryStatus.Index(files.length, new SizeValue(totalSize, SizeUnit.BYTES));\n    }","id":46067,"modified_method":"private RecoveryStatus.Index recoverIndex() throws IndexShardGatewayRecoveryException {\n        File[] files = locationIndex.listFiles();\n        final CountDownLatch latch = new CountDownLatch(files.length);\n        final AtomicReference<Exception> lastException = new AtomicReference<Exception>();\n        for (final File file : files) {\n            threadPool.execute(new Runnable() {\n                @Override public void run() {\n                    try {\n                        copyToDirectory(file, store.directory(), file.getName());\n                    } catch (Exception e) {\n                        logger.debug(\"Failed to read [\" + file + \"] into [\" + store + \"]\", e);\n                        lastException.set(e);\n                    } finally {\n                        latch.countDown();\n                    }\n                }\n            });\n        }\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            lastException.set(e);\n        }\n        if (lastException.get() != null) {\n            throw new IndexShardGatewayRecoveryException(shardId(), \"Failed to recover index files\", lastException.get());\n        }\n        long totalSize = 0;\n        for (File file : files) {\n            totalSize += file.length();\n        }\n\n        long version = -1;\n        try {\n            if (IndexReader.indexExists(store.directory())) {\n                version = IndexReader.getCurrentVersion(store.directory());\n            }\n        } catch (IOException e) {\n            throw new IndexShardGatewayRecoveryException(shardId(), \"Failed to fetch index version after copying it over\", e);\n        }\n\n        return new RecoveryStatus.Index(version, files.length, new SizeValue(totalSize, SizeUnit.BYTES));\n    }","commit_id":"38d8fad8d0721ab46b3b9d18527e7adeb28557a2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override public RecoveryStatus recover() throws IndexShardGatewayRecoveryException {\n        RecoveryStatus.Index recoveryStatusIndex = recoverIndex();\n        RecoveryStatus.Translog recoveryStatusTranslog = recoverTranslog();\n        // update the last up to date values\n        indexShard.snapshot(new Engine.SnapshotHandler() {\n            @Override public void snapshot(SnapshotIndexCommit snapshotIndexCommit, Translog.Snapshot translogSnapshot) throws EngineException {\n                lastIndexVersion = snapshotIndexCommit.getVersion();\n                lastTranslogId = translogSnapshot.translogId();\n                lastTranslogSize = translogSnapshot.size();\n            }\n        });\n        return new RecoveryStatus(recoveryStatusIndex, recoveryStatusTranslog);\n    }","id":46068,"modified_method":"@Override public RecoveryStatus recover() throws IndexShardGatewayRecoveryException {\n        RecoveryStatus.Index recoveryStatusIndex = recoverIndex();\n        RecoveryStatus.Translog recoveryStatusTranslog = recoverTranslog();\n        return new RecoveryStatus(recoveryStatusIndex, recoveryStatusTranslog);\n    }","commit_id":"38d8fad8d0721ab46b3b9d18527e7adeb28557a2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private RecoveryStatus.Translog recoverTranslog() throws IndexShardGatewayRecoveryException {\n        RandomAccessFile raf = null;\n        try {\n            long recoveryTranslogId = findLatestTranslogId(locationTranslog);\n            if (recoveryTranslogId == -1) {\n                // no recovery file found, start the shard and bail\n                indexShard.start();\n                return new RecoveryStatus.Translog(0, new SizeValue(0, SizeUnit.BYTES));\n            }\n            File recoveryTranslogFile = new File(locationTranslog, \"translog-\" + recoveryTranslogId);\n            raf = new RandomAccessFile(recoveryTranslogFile, \"r\");\n            int numberOfOperations = raf.readInt();\n            ArrayList<Translog.Operation> operations = newArrayListWithExpectedSize(numberOfOperations);\n            for (int i = 0; i < numberOfOperations; i++) {\n                operations.add(readTranslogOperation(new DataInputStreamInput(raf)));\n            }\n            indexShard.performRecovery(operations);\n            return new RecoveryStatus.Translog(operations.size(), new SizeValue(recoveryTranslogFile.length(), SizeUnit.BYTES));\n        } catch (Exception e) {\n            throw new IndexShardGatewayRecoveryException(shardId(), \"Failed to perform recovery of translog\", e);\n        } finally {\n            if (raf != null) {\n                try {\n                    raf.close();\n                } catch (IOException e) {\n                    // ignore\n                }\n            }\n        }\n    }","id":46069,"modified_method":"private RecoveryStatus.Translog recoverTranslog() throws IndexShardGatewayRecoveryException {\n        RandomAccessFile raf = null;\n        try {\n            long recoveryTranslogId = findLatestTranslogId(locationTranslog);\n            if (recoveryTranslogId == -1) {\n                // no recovery file found, start the shard and bail\n                indexShard.start();\n                return new RecoveryStatus.Translog(-1, 0, new SizeValue(0, SizeUnit.BYTES));\n            }\n            File recoveryTranslogFile = new File(locationTranslog, \"translog-\" + recoveryTranslogId);\n            raf = new RandomAccessFile(recoveryTranslogFile, \"r\");\n            int numberOfOperations = raf.readInt();\n            ArrayList<Translog.Operation> operations = newArrayListWithExpectedSize(numberOfOperations);\n            for (int i = 0; i < numberOfOperations; i++) {\n                operations.add(readTranslogOperation(new DataInputStreamInput(raf)));\n            }\n            indexShard.performRecovery(operations);\n            return new RecoveryStatus.Translog(recoveryTranslogId, operations.size(), new SizeValue(recoveryTranslogFile.length(), SizeUnit.BYTES));\n        } catch (Exception e) {\n            throw new IndexShardGatewayRecoveryException(shardId(), \"Failed to perform recovery of translog\", e);\n        } finally {\n            if (raf != null) {\n                try {\n                    raf.close();\n                } catch (IOException e) {\n                    // ignore\n                }\n            }\n        }\n    }","commit_id":"38d8fad8d0721ab46b3b9d18527e7adeb28557a2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test public void testIndexActions() throws Exception {\n\n        buildServer(\"server1\");\n        ((InternalServer) server(\"server1\")).injector().getInstance(Gateway.class).reset();\n        server(\"server1\").start();\n\n        client(\"server1\").admin().indices().create(createIndexRequest(\"test\")).actionGet();\n\n        closeServer(\"server1\");\n\n        Thread.sleep(1000);\n\n        startServer(\"server1\");\n        Thread.sleep(3000);\n        try {\n            client(\"server1\").admin().indices().create(createIndexRequest(\"test\")).actionGet();\n            assert false : \"index should exists\";\n        } catch (IndexAlreadyExistsException e) {\n            // all is well\n        }\n\n        ((InternalServer) server(\"server1\")).injector().getInstance(Gateway.class).reset();\n    }","id":46070,"modified_method":"@Test public void testIndexActions() throws Exception {\n        buildServer(\"server1\");\n        ((InternalServer) server(\"server1\")).injector().getInstance(Gateway.class).reset();\n        server(\"server1\").start();\n\n        client(\"server1\").admin().indices().create(createIndexRequest(\"test\")).actionGet();\n\n        closeServer(\"server1\");\n\n        Thread.sleep(1000);\n\n        startServer(\"server1\");\n        Thread.sleep(3000);\n        try {\n            client(\"server1\").admin().indices().create(createIndexRequest(\"test\")).actionGet();\n            assert false : \"index should exists\";\n        } catch (IndexAlreadyExistsException e) {\n            // all is well\n        }\n    }","commit_id":"38d8fad8d0721ab46b3b9d18527e7adeb28557a2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * Recovers the state of the shard from the gateway.\n     */\n    public synchronized void recover() throws IndexShardGatewayRecoveryException, IgnoreGatewayRecoveryException {\n        if (recovered.compareAndSet(false, true)) {\n            if (!indexShard.routingEntry().primary()) {\n                throw new ElasticSearchIllegalStateException(\"Trying to recover when the shard is in backup state\");\n            }\n            // clear the store, we are going to recover into it\n            try {\n                store.deleteContent();\n            } catch (IOException e) {\n                logger.debug(\"Failed to delete store before recovery from gateway\", e);\n            }\n            indexShard.recovering();\n            logger.debug(\"Starting recovery from {}\", shardGateway);\n            StopWatch stopWatch = new StopWatch().start();\n            RecoveryStatus recoveryStatus = shardGateway.recover();\n\n            // update the last up to date values\n            indexShard.snapshot(new Engine.SnapshotHandler() {\n                @Override public void snapshot(SnapshotIndexCommit snapshotIndexCommit, Translog.Snapshot translogSnapshot) throws EngineException {\n                    lastIndexVersion = snapshotIndexCommit.getVersion();\n                    lastTranslogId = translogSnapshot.translogId();\n                    lastTranslogSize = translogSnapshot.size();\n                }\n            });\n\n            // start the shard if the gateway has not started it already\n            if (indexShard.state() != IndexShardState.STARTED) {\n                indexShard.start();\n            }\n            stopWatch.stop();\n            if (logger.isDebugEnabled()) {\n                StringBuilder sb = new StringBuilder();\n                sb.append(\"Recovery completed from \").append(shardGateway).append(\", took [\").append(stopWatch.totalTime()).append(\"]\\n\");\n                sb.append(\"    Index    : numberOfFiles      [\").append(recoveryStatus.index().numberOfFiles()).append(\"] with totalSize [\").append(recoveryStatus.index().totalSize()).append(\"]\\n\");\n                sb.append(\"    Translog : numberOfOperations [\").append(recoveryStatus.translog().numberOfOperations()).append(\"] with totalSize [\").append(recoveryStatus.translog().totalSize()).append(\"]\");\n                logger.debug(sb.toString());\n            }\n            // refresh the shard\n            indexShard.refresh(new Engine.Refresh(false));\n            scheduleSnapshotIfNeeded();\n        } else {\n            throw new IgnoreGatewayRecoveryException(shardId, \"Already recovered\");\n        }\n    }","id":46071,"modified_method":"/**\n     * Recovers the state of the shard from the gateway.\n     */\n    public synchronized void recover() throws IndexShardGatewayRecoveryException, IgnoreGatewayRecoveryException {\n        if (recovered.compareAndSet(false, true)) {\n            if (!indexShard.routingEntry().primary()) {\n                throw new ElasticSearchIllegalStateException(\"Trying to recover when the shard is in backup state\");\n            }\n            // clear the store, we are going to recover into it\n            try {\n                store.deleteContent();\n            } catch (IOException e) {\n                logger.debug(\"Failed to delete store before recovery from gateway\", e);\n            }\n            indexShard.recovering();\n            logger.debug(\"Starting recovery from {}\", shardGateway);\n            StopWatch stopWatch = new StopWatch().start();\n            RecoveryStatus recoveryStatus = shardGateway.recover();\n\n            lastIndexVersion = recoveryStatus.index().version();\n            lastTranslogId = recoveryStatus.translog().translogId();\n            lastTranslogSize = recoveryStatus.translog().numberOfOperations();\n\n            // start the shard if the gateway has not started it already\n            if (indexShard.state() != IndexShardState.STARTED) {\n                indexShard.start();\n            }\n            stopWatch.stop();\n            if (logger.isDebugEnabled()) {\n                StringBuilder sb = new StringBuilder();\n                sb.append(\"Recovery completed from \").append(shardGateway).append(\", took [\").append(stopWatch.totalTime()).append(\"]\\n\");\n                sb.append(\"    Index    : numberOfFiles [\").append(recoveryStatus.index().numberOfFiles()).append(\"] with totalSize [\").append(recoveryStatus.index().totalSize()).append(\"]\\n\");\n                sb.append(\"    Translog : translogId [\").append(recoveryStatus.translog().translogId()).append(\", numberOfOperations [\").append(recoveryStatus.translog().numberOfOperations()).append(\"] with totalSize [\").append(recoveryStatus.translog().totalSize()).append(\"]\");\n                logger.debug(sb.toString());\n            }\n            // refresh the shard\n            indexShard.refresh(new Engine.Refresh(false));\n            scheduleSnapshotIfNeeded();\n        } else {\n            throw new IgnoreGatewayRecoveryException(shardId, \"Already recovered\");\n        }\n    }","commit_id":"38d8fad8d0721ab46b3b9d18527e7adeb28557a2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * Snapshots the given shard into the gateway.\n     */\n    public synchronized void snapshot() throws IndexShardGatewaySnapshotFailedException {\n        if (!indexShard.routingEntry().primary()) {\n            return;\n//            throw new IndexShardGatewaySnapshotNotAllowedException(shardId, \"Snapshot not allowed on non primary shard\");\n        }\n        if (indexShard.routingEntry().relocating()) {\n            // do not snapshot when in the process of relocation of primaries so we won't get conflicts\n            return;\n        }\n        try {\n            indexShard.snapshot(new Engine.SnapshotHandler() {\n                @Override public void snapshot(SnapshotIndexCommit snapshotIndexCommit, Translog.Snapshot translogSnapshot) throws EngineException {\n                    if (lastIndexVersion != snapshotIndexCommit.getVersion() || lastTranslogId != translogSnapshot.translogId() || lastTranslogSize != translogSnapshot.size()) {\n\n                        shardGateway.snapshot(snapshotIndexCommit, translogSnapshot);\n\n                        lastIndexVersion = snapshotIndexCommit.getVersion();\n                        lastTranslogId = translogSnapshot.translogId();\n                        lastTranslogSize = translogSnapshot.size();\n                    }\n                }\n            });\n        } catch (IllegalIndexShardStateException e) {\n            // ignore, that's fine\n        } catch (Exception e) {\n            logger.warn(\"Failed to snapshot on close\", e);\n        }\n    }","id":46072,"modified_method":"/**\n     * Snapshots the given shard into the gateway.\n     */\n    public synchronized void snapshot() throws IndexShardGatewaySnapshotFailedException {\n        if (!indexShard.routingEntry().primary()) {\n            return;\n//            throw new IndexShardGatewaySnapshotNotAllowedException(shardId, \"Snapshot not allowed on non primary shard\");\n        }\n        if (indexShard.routingEntry().relocating()) {\n            // do not snapshot when in the process of relocation of primaries so we won't get conflicts\n            return;\n        }\n        try {\n            indexShard.snapshot(new Engine.SnapshotHandler() {\n                @Override public void snapshot(SnapshotIndexCommit snapshotIndexCommit, Translog.Snapshot translogSnapshot) throws EngineException {\n                    if (lastIndexVersion != snapshotIndexCommit.getVersion() || lastTranslogId != translogSnapshot.translogId() || lastTranslogSize != translogSnapshot.size()) {\n\n                        shardGateway.snapshot(new IndexShardGateway.Snapshot(snapshotIndexCommit, translogSnapshot, lastIndexVersion, lastTranslogId, lastTranslogSize));\n\n                        lastIndexVersion = snapshotIndexCommit.getVersion();\n                        lastTranslogId = translogSnapshot.translogId();\n                        lastTranslogSize = translogSnapshot.size();\n                    }\n                }\n            });\n        } catch (IllegalIndexShardStateException e) {\n            // ignore, that's fine\n        } catch (Exception e) {\n            logger.warn(\"Failed to snapshot on close\", e);\n        }\n    }","commit_id":"38d8fad8d0721ab46b3b9d18527e7adeb28557a2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override public RecoveryStatus recover() throws IndexShardGatewayRecoveryException {\n        // in the none case, we simply start the shard\n        indexShard.start();\n        return new RecoveryStatus(new RecoveryStatus.Index(0, new SizeValue(0, SizeUnit.BYTES)), new RecoveryStatus.Translog(0, new SizeValue(0, SizeUnit.BYTES)));\n    }","id":46073,"modified_method":"@Override public RecoveryStatus recover() throws IndexShardGatewayRecoveryException {\n        // in the none case, we simply start the shard\n        indexShard.start();\n        return new RecoveryStatus(new RecoveryStatus.Index(-1, 0, new SizeValue(0, SizeUnit.BYTES)), new RecoveryStatus.Translog(-1, 0, new SizeValue(0, SizeUnit.BYTES)));\n    }","commit_id":"38d8fad8d0721ab46b3b9d18527e7adeb28557a2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public Index(int numberOfFiles, SizeValue totalSize) {\n            this.numberOfFiles = numberOfFiles;\n            this.totalSize = totalSize;\n        }","id":46074,"modified_method":"public Index(long version, int numberOfFiles, SizeValue totalSize) {\n            this.numberOfFiles = numberOfFiles;\n            this.totalSize = totalSize;\n        }","commit_id":"38d8fad8d0721ab46b3b9d18527e7adeb28557a2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public Translog(int numberOfOperations, SizeValue totalSize) {\n            this.numberOfOperations = numberOfOperations;\n            this.totalSize = totalSize;\n        }","id":46075,"modified_method":"public Translog(long translogId, int numberOfOperations, SizeValue totalSize) {\n            this.translogId = translogId;\n            this.numberOfOperations = numberOfOperations;\n            this.totalSize = totalSize;\n        }","commit_id":"38d8fad8d0721ab46b3b9d18527e7adeb28557a2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public boolean commit() throws LoginException {\n        if (externalUser == null) {\n            return false;\n        }\n\n        try {\n            SyncHandler handler = getSyncHandler();\n            Root root = getRoot();\n            UserManager userManager = getUserManager();\n            if (root == null || userManager == null) {\n                throw new LoginException(\"Cannot synchronize user.\");\n            }\n            Object smValue = options.getConfigValue(PARAM_SYNC_MODE, null, null);\n            SyncMode syncMode;\n            if (smValue == null) {\n                syncMode = DEFAULT_SYNC_MODE;\n            } else {\n                syncMode = SyncMode.fromObject(smValue);\n            }\n            if (externalUser != null && handler.initialize(userManager, root, syncMode, options)) {\n                handler.sync(externalUser);\n                root.commit();\n                return true;\n            } else {\n                log.warn(\"Failed to initialize sync handler.\");\n                return false;\n            }\n        } catch (SyncException e) {\n            throw new LoginException(\"User synchronization failed: \" + e);\n        } catch (CommitFailedException e) {\n            throw new LoginException(\"User synchronization failed: \" + e);\n        }\n    }","id":46076,"modified_method":"@Override\n    public boolean commit() throws LoginException {\n        if (externalUser == null || syncHandler == null) {\n            return false;\n        }\n\n        SyncContext context = null;\n        try {\n            Root root = getRoot();\n            UserManager userManager = getUserManager();\n            if (root == null || userManager == null) {\n                throw new LoginException(\"Cannot synchronize user.\");\n            }\n            context = syncHandler.createContext(idp, userManager, root);\n            context.sync(externalUser);\n            root.commit();\n            return true;\n        } catch (SyncException e) {\n            throw new LoginException(\"User synchronization failed: \" + e);\n        } catch (CommitFailedException e) {\n            throw new LoginException(\"User synchronization failed: \" + e);\n        } finally {\n            if (context != null) {\n                context.close();\n            }\n        }\n    }","commit_id":"30a996484f03adf4f721d4ef63b095343756fa63","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public boolean login() throws LoginException {\n        if (idp == null) {\n            return false;\n        }\n\n        Credentials credentials = getCredentials();\n        if (credentials == null) {\n            log.info(\"No credentials found for external login module. ignoring.\");\n            return false;\n        }\n\n        try {\n            externalUser = idp.authenticate(credentials);\n            if (externalUser != null) {\n                //noinspection unchecked\n                sharedState.put(SHARED_KEY_CREDENTIALS, credentials);\n\n                //noinspection unchecked\n                sharedState.put(SHARED_KEY_LOGIN_NAME, externalUser.getId());\n\n                return true;\n            }\n        } catch (ExternalIdentityException e) {\n            log.error(\"Error while authenticating credentials {} with {}: {}\", new Object[]{\n                    credentials, idp.getName(), e.toString()});\n            return false;\n        }\n        return false;\n    }","id":46077,"modified_method":"@Override\n    public boolean login() throws LoginException {\n        if (idp == null || syncHandler == null) {\n            return false;\n        }\n\n        Credentials credentials = getCredentials();\n        if (credentials == null) {\n            log.debug(\"No credentials found for external login module. ignoring.\");\n            return false;\n        }\n\n        try {\n            externalUser = idp.authenticate(credentials);\n            if (externalUser != null) {\n                if (log.isDebugEnabled()) {\n                    log.debug(\"IDP {} returned valid user {}\", idp.getName(), externalUser);\n                }\n\n                //noinspection unchecked\n                sharedState.put(SHARED_KEY_CREDENTIALS, credentials);\n\n                //noinspection unchecked\n                sharedState.put(SHARED_KEY_LOGIN_NAME, externalUser.getId());\n\n                return true;\n            } else {\n                if (log.isDebugEnabled()) {\n                    if (credentials instanceof SimpleCredentials) {\n                        log.debug(\"IDP {} returned null for simple creds of {}\", idp.getName(), ((SimpleCredentials) credentials).getUserID());\n                    } else {\n                        log.debug(\"IDP {} returned null for {}\", idp.getName(), credentials);\n                    }\n                }\n            }\n        } catch (ExternalIdentityException e) {\n            log.error(\"Error while authenticating credentials {} with {}: {}\", new Object[]{\n                    credentials, idp.getName(), e.toString()});\n            return false;\n        } catch (LoginException e) {\n            if (log.isDebugEnabled()) {\n                log.debug(\"IDP {} throws login exception for {}\", idp.getName(), credentials);\n            }\n            throw e;\n        }\n        return false;\n    }","commit_id":"30a996484f03adf4f721d4ef63b095343756fa63","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public void initialize(Subject subject, CallbackHandler callbackHandler, Map<String, ?> ss, Map<String, ?> opts) {\n        super.initialize(subject, callbackHandler, ss, opts);\n\n        // merge options with osgi options if needed\n        if (osgiConfig != null) {\n            options = ConfigurationParameters.of(osgiConfig, options);\n        }\n\n        String idpName = options.getConfigValue(PARAM_IDP_NAME, \"\");\n        if (idpName.length() == 0) {\n            log.error(\"External login module needs IPD name. Will not be used for login.\");\n        } else {\n            ExternalIdentityProviderManager idpMgr = getSecurityProvider().getConfiguration(ExternalIdentityProviderManager.class);\n            idp = idpMgr.getProvider(idpName);\n            if (idp == null) {\n                log.error(\"No IDP found with name {}. Will not be used for login.\", idpName);\n            }\n        }\n    }","id":46078,"modified_method":"@Override\n    public void initialize(Subject subject, CallbackHandler callbackHandler, Map<String, ?> ss, Map<String, ?> opts) {\n        super.initialize(subject, callbackHandler, ss, opts);\n\n        // merge options with osgi options if needed\n        if (osgiConfig != null) {\n            options = ConfigurationParameters.of(osgiConfig, options);\n        }\n\n        String idpName = options.getConfigValue(PARAM_IDP_NAME, \"\");\n        if (idpName.length() == 0) {\n            log.error(\"External login module needs IPD name. Will not be used for login.\");\n        } else {\n            ExternalIdentityProviderManager idpMgr = getSecurityProvider().getConfiguration(ExternalIdentityProviderManager.class);\n            idp = idpMgr.getProvider(idpName);\n            if (idp == null) {\n                log.error(\"No IDP found with name {}. Will not be used for login.\", idpName);\n            }\n        }\n\n        String syncHandlerName = options.getConfigValue(PARAM_SYNC_HANDLER_NAME, \"\");\n        if (syncHandlerName.length() == 0) {\n            log.error(\"External login module needs SyncHandler name. Will not be used for login.\");\n        } else {\n            SyncManager syncMgr = getSecurityProvider().getConfiguration(SyncManager.class);\n            syncHandler = syncMgr.getSyncHandler(syncHandlerName);\n            if (syncHandler == null) {\n                log.error(\"No SyncHandler found with name {}. Will not be used for login.\", idpName);\n            }\n        }\n    }","commit_id":"30a996484f03adf4f721d4ef63b095343756fa63","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * {@inheritDoc}\n     */\n    @Nonnull\n    @Override\n    public Iterable<? extends ExternalGroup> getGroups() {\n        return null;\n    }","id":46079,"modified_method":"/**\n     * {@inheritDoc}\n     */\n    @Nonnull\n    @Override\n    public Iterable<? extends ExternalGroup> getGroups() {\n        return Collections.emptyList();\n    }","commit_id":"30a996484f03adf4f721d4ef63b095343756fa63","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public Principal getPrincipal() {\n        if (principal == null) {\n            principal = new PrincipalImpl(getId());\n        }\n        return principal;\n    }","id":46080,"modified_method":"/**\n     * Returns the DN as principal name.\n     * @return the DN\n     */\n    @Nonnull\n    @Override\n    public String getPrincipalName() {\n        return ref.getId();\n    }","commit_id":"30a996484f03adf4f721d4ef63b095343756fa63","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private void disconnect(LdapConnection connection) throws ExternalIdentityException {\n        try {\n            connection.unBind();\n        } catch (LdapException e) {\n            log.error(\"Error while unbinding from the ldap server.\", e);\n        }\n        try {\n            connection.close();\n        } catch (IOException e) {\n            log.error(\"Error while disconnecting from the ldap server.\", e);\n        }\n    }","id":46081,"modified_method":"private void disconnect(LdapConnection connection) throws ExternalIdentityException {\n        try {\n            adminPool.releaseConnection(connection);\n        } catch (Exception e) {\n            log.warn(\"Error while disconnecting from the ldap server.\", e);\n        }\n    }","commit_id":"30a996484f03adf4f721d4ef63b095343756fa63","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public ExternalUser authenticate(@Nonnull Credentials credentials) throws ExternalIdentityException, LoginException {\n        return null;\n    }","id":46082,"modified_method":"@Override\n    public ExternalUser authenticate(@Nonnull Credentials credentials) throws ExternalIdentityException, LoginException {\n        if (!(credentials instanceof SimpleCredentials)) {\n            log.debug(\"LDAP IDP can only authenticate SimpleCredentials.\");\n            return null;\n        }\n        final SimpleCredentials creds = (SimpleCredentials) credentials;\n        final ExternalUser user = getUser(creds.getUserID());\n        if (user != null) {\n            // authenticate\n            LdapConnection connection = null;\n            try {\n                long t0 = System.nanoTime();\n                connection = userPool.getConnection();\n                long t1 = System.nanoTime();\n                connection.bind(user.getExternalId().getId(), new String(creds.getPassword()));\n                long t2 = System.nanoTime();\n                if (log.isDebugEnabled()) {\n                    log.debug(\"authenticate({}) connect: {}us, bind: {}us\", new Object[]{user.getId(), (t1-t0)/1000, (t2-t1)/1000});\n                }\n            } catch (LdapAuthenticationException e) {\n                throw new LoginException(\"Unable to authenticate against LDAP server: \" + e.getMessage());\n            } catch (Exception e) {\n                throw new ExternalIdentityException(\"Error while binding user credentials\", e);\n            } finally {\n                if (connection != null) {\n                    try {\n                        userPool.releaseConnection(connection);\n                    } catch (Exception e) {\n                        // ignore\n                    }\n                }\n            }\n        }\n        return user;\n    }","commit_id":"30a996484f03adf4f721d4ef63b095343756fa63","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private LdapConnection connect() throws ExternalIdentityException {\n        try {\n            LdapConnection connection = new LdapNetworkConnection(config.getHostname(), config.getPort(), config.useSSL());\n            if (config.getBindDN().length() > 0) {\n                connection.bind(config.getBindDN(), config.getBindPassword());\n            } else {\n                connection.bind();\n            }\n            return connection;\n        } catch (LdapException e) {\n            log.error(\"Error while connecting to the ldap server.\", e);\n            throw new ExternalIdentityException(\"Error while connecting and binding to the ldap server\", e);\n        }\n    }","id":46083,"modified_method":"private LdapConnection connect() throws ExternalIdentityException {\n        try {\n            return adminPool.getConnection();\n        } catch (Throwable e) {\n            log.error(\"Error while connecting to the ldap server.\", e);\n            throw new ExternalIdentityException(\"Error while connecting and binding to the ldap server\", e);\n        }\n    }","commit_id":"30a996484f03adf4f721d4ef63b095343756fa63","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private Entry getEntry(LdapConnection connection, LdapProviderConfig.Identity idConfig, String id)\n            throws CursorException, LdapException {\n        String searchFilter = idConfig.getSearchFilter(id);\n\n        // Create the SearchRequest object\n        SearchRequest req = new SearchRequestImpl();\n        req.setScope(SearchScope.SUBTREE);\n        req.addAttributes(\"*\");\n        req.setTimeLimit(config.getSearchTimeout());\n        req.setBase(new Dn(idConfig.getBaseDN()));\n        req.setFilter(searchFilter);\n\n        log.debug(\"Searching entries below {} with {}\", idConfig.getBaseDN(), searchFilter);\n\n        // Process the request\n        SearchCursor searchCursor = connection.search(req);\n        while (searchCursor.next()) {\n            Response response = searchCursor.get();\n\n            // process the SearchResultEntry\n            if (response instanceof SearchResultEntry) {\n                Entry resultEntry = ((SearchResultEntry) response).getEntry();\n                if (searchCursor.next()) {\n                    log.warn(\"search for {} returned more than one entry. discarding additional ones.\", searchFilter);\n                }\n                return resultEntry;\n            }\n        }\n        return null;\n    }","id":46084,"modified_method":"private Entry getEntry(LdapConnection connection, LdapProviderConfig.Identity idConfig, String id)\n            throws CursorException, LdapException {\n        String searchFilter = idConfig.getSearchFilter(id);\n\n        // Create the SearchRequest object\n        SearchRequest req = new SearchRequestImpl();\n        req.setScope(SearchScope.SUBTREE);\n        req.addAttributes(SchemaConstants.ALL_USER_ATTRIBUTES);\n        req.setTimeLimit(config.getSearchTimeout());\n        req.setBase(new Dn(idConfig.getBaseDN()));\n        req.setFilter(searchFilter);\n\n        // Process the request\n        SearchCursor searchCursor = connection.search(req);\n        while (searchCursor.next()) {\n            Response response = searchCursor.get();\n\n            // process the SearchResultEntry\n            if (response instanceof SearchResultEntry) {\n                Entry resultEntry = ((SearchResultEntry) response).getEntry();\n                if (searchCursor.next()) {\n                    log.warn(\"search for {} returned more than one entry. discarding additional ones.\", searchFilter);\n                }\n                if (log.isDebugEnabled()) {\n                    log.debug(\"search below {} with {} found {}\",\n                            new Object[]{idConfig.getBaseDN(), searchFilter, resultEntry.getDn()});\n                }\n                return resultEntry;\n            }\n        }\n        if (log.isDebugEnabled()) {\n            log.debug(\"search below {} with {} found 0 entries.\", idConfig.getBaseDN(), searchFilter);\n        }\n        return null;\n    }","commit_id":"30a996484f03adf4f721d4ef63b095343756fa63","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public ExternalUser getUser(@Nonnull String userId) throws ExternalIdentityException {\n        LdapConnection connection = connect();\n        try {\n            Entry entry = getEntry(connection, config.getUserConfig(), userId);\n            if (entry != null) {\n                return createUser(entry, userId);\n            } else {\n                return null;\n            }\n        } catch (LdapException e) {\n            log.error(\"Error during ldap lookup\", e);\n            throw new ExternalIdentityException(\"Error during ldap lookup.\", e);\n        } catch (CursorException e) {\n            log.error(\"Error during ldap lookup\", e);\n            throw new ExternalIdentityException(\"Error during ldap lookup.\", e);\n        } finally {\n            disconnect(connection);\n        }\n    }","id":46085,"modified_method":"@Override\n    public ExternalUser getUser(@Nonnull String userId) throws ExternalIdentityException {\n        long t0 = System.nanoTime();\n        LdapConnection connection = connect();\n        long t1 = System.nanoTime();\n        try {\n            Entry entry = getEntry(connection, config.getUserConfig(), userId);\n            long t2 = System.nanoTime();\n            if (log.isDebugEnabled()) {\n                log.debug(\"getUser({}) connect: {}us, lookup: {}us\", new Object[]{userId, (t1-t0)/1000, (t2-t1)/1000});\n            }\n            if (entry != null) {\n                return createUser(entry, userId);\n            } else {\n                return null;\n            }\n        } catch (LdapException e) {\n            log.error(\"Error during ldap lookup\", e);\n            throw new ExternalIdentityException(\"Error during ldap lookup.\", e);\n        } catch (CursorException e) {\n            log.error(\"Error during ldap lookup\", e);\n            throw new ExternalIdentityException(\"Error during ldap lookup.\", e);\n        } finally {\n            disconnect(connection);\n        }\n    }","commit_id":"30a996484f03adf4f721d4ef63b095343756fa63","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * Constructor for non-OSGi cases.\n     * @param config the configuration\n     */\n    public LdapIdentityProvider(LdapProviderConfig config) {\n        this.config = config;\n    }","id":46086,"modified_method":"/**\n     * Constructor for non-OSGi cases.\n     * @param config the configuration\n     */\n    public LdapIdentityProvider(LdapProviderConfig config) {\n        this.config = config;\n        init();\n    }","commit_id":"30a996484f03adf4f721d4ef63b095343756fa63","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Activate\n    private void activate(Map<String, Object> properties) {\n        ConfigurationParameters cfg = ConfigurationParameters.of(properties);\n        config = LdapProviderConfig.of(cfg);\n    }","id":46087,"modified_method":"@Activate\n    private void activate(Map<String, Object> properties) {\n        ConfigurationParameters cfg = ConfigurationParameters.of(properties);\n        config = LdapProviderConfig.of(cfg);\n        init();\n    }","commit_id":"30a996484f03adf4f721d4ef63b095343756fa63","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * Creates a new LDAP provider configuration based on the properties store in the given parameters.\n     * @param params the configuration parameters.\n     * @return the config\n     */\n    public static LdapProviderConfig of(ConfigurationParameters params) {\n        LdapProviderConfig cfg = new LdapProviderConfig()\n                .setName(params.getConfigValue(PARAM_NAME, PARAM_NAME_DEFAULT))\n                .setHostname(params.getConfigValue(PARAM_LDAP_HOST, PARAM_LDAP_HOST_DEFAULT))\n                .setPort(params.getConfigValue(PARAM_LDAP_PORT, PARAM_LDAP_PORT_DEFAULT))\n                .setUseSSL(params.getConfigValue(PARAM_USE_SSL, PARAM_USE_SSL_DEFAULT))\n                .setBindDN(params.getConfigValue(PARAM_BIND_DN, PARAM_BIND_DN_DEFAULT))\n                .setBindPassword(params.getConfigValue(PARAM_BIND_PASSWORD, PARAM_BIND_PASSWORD_DEFAULT))\n                .setSearchTimeout(params.getConfigValue(PARAM_SEARCH_TIMEOUT, PARAM_SEARCH_TIMEOUT_DEFAULT))\n                .setGroupMemberAttribute(params.getConfigValue(PARAM_GROUP_MEMBER_ATTRIBUTE, PARAM_GROUP_MEMBER_ATTRIBUTE_DEFAULT));\n\n        cfg.getUserConfig()\n                .setBaseDN(params.getConfigValue(PARAM_USER_BASE_DN, PARAM_USER_BASE_DN))\n                .setIdAttribute(params.getConfigValue(PARAM_USER_ID_ATTRIBUTE, PARAM_USER_ID_ATTRIBUTE_DEFAULT))\n                .setExtraFilter(params.getConfigValue(PARAM_USER_EXTRA_FILTER, PARAM_USER_EXTRA_FILTER_DEFAULT))\n                .setObjectClasses(params.getConfigValue(PARAM_USER_OBJECTCLASS, PARAM_USER_OBJECTCLASS_DEFAULT));\n\n        cfg.getGroupConfig()\n                .setBaseDN(params.getConfigValue(PARAM_GROUP_BASE_DN, PARAM_GROUP_BASE_DN))\n                .setIdAttribute(params.getConfigValue(PARAM_GROUP_NAME_ATTRIBUTE, PARAM_GROUP_NAME_ATTRIBUTE_DEFAULT))\n                .setExtraFilter(params.getConfigValue(PARAM_GROUP_EXTRA_FILTER, PARAM_GROUP_EXTRA_FILTER_DEFAULT))\n                .setObjectClasses(params.getConfigValue(PARAM_GROUP_OBJECTCLASS, PARAM_GROUP_OBJECTCLASS_DEFAULT));\n\n        return cfg;\n    }","id":46088,"modified_method":"/**\n     * Creates a new LDAP provider configuration based on the properties store in the given parameters.\n     * @param params the configuration parameters.\n     * @return the config\n     */\n    public static LdapProviderConfig of(ConfigurationParameters params) {\n        LdapProviderConfig cfg = new LdapProviderConfig()\n                .setName(params.getConfigValue(PARAM_NAME, PARAM_NAME_DEFAULT))\n                .setHostname(params.getConfigValue(PARAM_LDAP_HOST, PARAM_LDAP_HOST_DEFAULT))\n                .setPort(params.getConfigValue(PARAM_LDAP_PORT, PARAM_LDAP_PORT_DEFAULT))\n                .setUseSSL(params.getConfigValue(PARAM_USE_SSL, PARAM_USE_SSL_DEFAULT))\n                .setBindDN(params.getConfigValue(PARAM_BIND_DN, PARAM_BIND_DN_DEFAULT))\n                .setBindPassword(params.getConfigValue(PARAM_BIND_PASSWORD, PARAM_BIND_PASSWORD_DEFAULT))\n                .setSearchTimeout(params.getConfigValue(PARAM_SEARCH_TIMEOUT, PARAM_SEARCH_TIMEOUT_DEFAULT))\n                .setGroupMemberAttribute(params.getConfigValue(PARAM_GROUP_MEMBER_ATTRIBUTE, PARAM_GROUP_MEMBER_ATTRIBUTE_DEFAULT));\n\n        cfg.getUserConfig()\n                .setBaseDN(params.getConfigValue(PARAM_USER_BASE_DN, PARAM_USER_BASE_DN))\n                .setIdAttribute(params.getConfigValue(PARAM_USER_ID_ATTRIBUTE, PARAM_USER_ID_ATTRIBUTE_DEFAULT))\n                .setExtraFilter(params.getConfigValue(PARAM_USER_EXTRA_FILTER, PARAM_USER_EXTRA_FILTER_DEFAULT))\n                .setObjectClasses(params.getConfigValue(PARAM_USER_OBJECTCLASS, PARAM_USER_OBJECTCLASS_DEFAULT))\n                .setMakeDnPath(params.getConfigValue(PARAM_USER_MAKE_DN_PATH, PARAM_USER_MAKE_DN_PATH_DEFAULT));\n\n        cfg.getGroupConfig()\n                .setBaseDN(params.getConfigValue(PARAM_GROUP_BASE_DN, PARAM_GROUP_BASE_DN))\n                .setIdAttribute(params.getConfigValue(PARAM_GROUP_NAME_ATTRIBUTE, PARAM_GROUP_NAME_ATTRIBUTE_DEFAULT))\n                .setExtraFilter(params.getConfigValue(PARAM_GROUP_EXTRA_FILTER, PARAM_GROUP_EXTRA_FILTER_DEFAULT))\n                .setObjectClasses(params.getConfigValue(PARAM_GROUP_OBJECTCLASS, PARAM_GROUP_OBJECTCLASS_DEFAULT))\n                .setMakeDnPath(params.getConfigValue(PARAM_GROUP_MAKE_DN_PATH, PARAM_GROUP_MAKE_DN_PATH_DEFAULT));\n\n        return cfg;\n    }","commit_id":"30a996484f03adf4f721d4ef63b095343756fa63","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * Constructor used for non OSGi environments.\n     * @param configuration security configuration\n     */\n    public SecurityProviderImpl(ConfigurationParameters configuration) {\n        this.configuration = configuration;\n\n        authenticationConfiguration = new AuthenticationConfigurationImpl(this);\n        authorizationConfiguration = new AuthorizationConfigurationImpl(this);\n        userConfiguration = new UserConfigurationImpl(this);\n        principalConfiguration = new PrincipalConfigurationImpl(this);\n        privilegeConfiguration = new PrivilegeConfigurationImpl();\n        tokenConfiguration = new TokenConfigurationImpl(this);\n        identityProviderManager = new ExternalIDPManagerImpl();\n    }","id":46089,"modified_method":"/**\n     * Constructor used for non OSGi environments.\n     * @param configuration security configuration\n     */\n    public SecurityProviderImpl(ConfigurationParameters configuration) {\n        this.configuration = configuration;\n\n        authenticationConfiguration = new AuthenticationConfigurationImpl(this);\n        authorizationConfiguration = new AuthorizationConfigurationImpl(this);\n        userConfiguration = new UserConfigurationImpl(this);\n        principalConfiguration = new PrincipalConfigurationImpl(this);\n        privilegeConfiguration = new PrivilegeConfigurationImpl();\n        tokenConfiguration = new TokenConfigurationImpl(this);\n        identityProviderManager = new ExternalIDPManagerImpl();\n        syncManager = new SyncManagerImpl();\n    }","commit_id":"30a996484f03adf4f721d4ef63b095343756fa63","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    @Nonnull\n    @Override\n    public <T> T getConfiguration(@Nonnull Class<T> configClass) {\n        if (AuthenticationConfiguration.class == configClass) {\n            return (T) authenticationConfiguration;\n        } else if (AuthorizationConfiguration.class == configClass) {\n            return (T) authorizationConfiguration;\n        } else if (UserConfiguration.class == configClass) {\n            return (T) userConfiguration;\n        } else if (PrincipalConfiguration.class == configClass) {\n            return (T) principalConfiguration;\n        } else if (PrivilegeConfiguration.class == configClass) {\n            return (T) privilegeConfiguration;\n        } else if (TokenConfiguration.class == configClass) {\n            return (T) tokenConfiguration;\n        } else if (ExternalIdentityProviderManager.class == configClass) {\n            return (T) identityProviderManager;\n        } else {\n            throw new IllegalArgumentException(\"Unsupported security configuration class \" + configClass);\n        }\n    }","id":46090,"modified_method":"@SuppressWarnings(\"unchecked\")\n    @Nonnull\n    @Override\n    public <T> T getConfiguration(@Nonnull Class<T> configClass) {\n        if (AuthenticationConfiguration.class == configClass) {\n            return (T) authenticationConfiguration;\n        } else if (AuthorizationConfiguration.class == configClass) {\n            return (T) authorizationConfiguration;\n        } else if (UserConfiguration.class == configClass) {\n            return (T) userConfiguration;\n        } else if (PrincipalConfiguration.class == configClass) {\n            return (T) principalConfiguration;\n        } else if (PrivilegeConfiguration.class == configClass) {\n            return (T) privilegeConfiguration;\n        } else if (TokenConfiguration.class == configClass) {\n            return (T) tokenConfiguration;\n        } else if (ExternalIdentityProviderManager.class == configClass) {\n            return (T) identityProviderManager;\n        } else if (SyncManager.class == configClass) {\n            return (T) syncManager;\n        } else {\n            throw new IllegalArgumentException(\"Unsupported security configuration class \" + configClass);\n        }\n    }","commit_id":"30a996484f03adf4f721d4ef63b095343756fa63","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n        public Principal getPrincipal() {\n            return new PrincipalImpl(userId);\n        }","id":46091,"modified_method":"@Override\n        public Principal getPrincipalName() {\n            return new PrincipalImpl(userId);\n        }","commit_id":"30a996484f03adf4f721d4ef63b095343756fa63","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n   * Test a query that is aggregating metrics across multiple flowlets in a\n   * flow. It also aggregates over multiple instances within a flowlet.\n   *\n   * @throws Exception\n   */\n  @Test\n  public void testQueryAcrossAllFlowletsInAFlow() throws Exception {\n    Query query = new Query.Select(\"tuple.read\")\n      .From(timestamp)\n      .To(timestamp + DATAPOINTS)\n      .containTag(\"acct\", \"demo\")\n      .containTag(\"app\", \"abc\")\n      .containTag(\"flow\", \"flow\")\n      .containTag(\"runid\", \"AJKHDKJHDKJAHJS\")\n      .create();\n    ImmutableList<DataPoint> points = temporalDB.execute(query);\n\n    Assert.assertNotNull(points);\n    double count = 0;\n    for(DataPoint point : points) {\n      Assert.assertTrue(count*4 == point.getValue());\n      count++;\n    }\n  }","id":46092,"modified_method":"/**\n   * Test a query that is aggregating metrics across multiple flowlets in a\n   * flow. It also aggregates over multiple instances within a flowlet.\n   *\n   * @throws Exception\n   */\n  @Test\n  public void testQueryAcrossAllFlowletsInAFlow() throws Exception {\n    Query query =\n    new Query.select(\"tuple.read\")\n      .from(timestamp)\n      .to(timestamp + DATAPOINTS)\n      .and()\n      .has(\"acct\", \"demo\")\n      .has(\"app\", \"abc\")\n      .has(\"flow\", \"flow\")\n      .has(\"runid\", \"AJKHDKJHDKJAHJS\")\n      .create();\n    ImmutableList<DataPoint> points = temporalDB.execute(query);\n\n    Assert.assertNotNull(points);\n    double count = 0;\n    for(DataPoint point : points) {\n      Assert.assertTrue(count*4 == point.getValue());\n      count++;\n    }\n  }","commit_id":"6f6b342204b2c6e154e9c9f77fbe22ee9e53d29f","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testComputingBusynessMetricForAFlowAtFlowletLevel() throws Exception {\n    Query queryA = new Query.Select(\"tuple.read\")\n      .From(timestamp)\n      .To(timestamp + DATAPOINTS)\n      .containTag(\"acct\", \"demo\")\n      .containTag(\"app\", \"abc\")\n      .containTag(\"flow\", \"flow\")\n      .containTag(\"runid\", \"AJKHDKJHDKJAHJS\")\n      .containTag(\"flowlet\", \"flowlet1\")\n      .create();\n\n    ImmutableList<DataPoint> pointA = temporalDB.execute(queryA);\n\n    Query queryB = new Query.Select(\"tuple.proc\")\n      .From(timestamp)\n      .To(timestamp + DATAPOINTS)\n      .containTag(\"acct\", \"demo\")\n      .containTag(\"app\", \"abc\")\n      .containTag(\"flow\", \"flow\")\n      .containTag(\"runid\", \"AJKHDKJHDKJAHJS\")\n      .containTag(\"flowlet\", \"flowlet1\")\n      .create();\n\n    ImmutableList<DataPoint> pointB = temporalDB.execute(queryB);\n    final List<DataPoint> result = Lists.newArrayList();\n    boolean status =\n      zip(pointA,  pointB, new ZipIterator<DataPoint, DataPoint>() {\n      @Override\n      public boolean each(DataPoint dataPointA, DataPoint dataPointB) {\n        if(dataPointA.getTimestamp() == dataPointB.getTimestamp()) {\n          DataPoint dp = new DataPoint.Builder(dataPointA.getMetric())\n            .addTimestamp(dataPointA.getTimestamp())\n            .addValue(dataPointB.getValue()/dataPointA.getValue())\n            .addTags(dataPointA.getTags())\n            .create();\n          result.add(dp);\n        } else if(dataPointA.getTimestamp() > dataPointB.getTimestamp()) {\n          result.add(dataPointB);\n        } else {\n          result.add(dataPointA);\n        }\n        return true;\n      }\n    });\n\n    Assert.assertTrue(status);\n\n\n\n  }","id":46093,"modified_method":"@Test\n  public void testComputingBusynessMetricForAFlowAtFlowletLevel()\n      throws Exception {\n    Query queryA = new Query.select(\"tuple.read\")\n      .from(timestamp)\n      .to(timestamp + DATAPOINTS)\n      .and()\n      .has(\"acct\", \"demo\")\n      .has(\"app\", \"abc\")\n      .has(\"flow\", \"flow\")\n      .has(\"runid\", \"AJKHDKJHDKJAHJS\")\n      .has(\"flowlet\", \"flowlet1\")\n      .create();\n\n    ImmutableList<DataPoint> a = temporalDB.execute(queryA);\n\n    Query queryB = new Query.select(\"tuple.proc\")\n      .from(timestamp)\n      .to(timestamp + DATAPOINTS)\n      .and()\n      .has(\"acct\", \"demo\")\n      .has(\"app\", \"abc\")\n      .has(\"flow\", \"flow\")\n      .has(\"runid\", \"AJKHDKJHDKJAHJS\")\n      .has(\"flowlet\", \"flowlet1\")\n      .create();\n\n    ImmutableList<DataPoint> b = temporalDB.execute(queryB);\n\n    ImmutableList<DataPoint> busyness =\n      new Timeseries().div(a, b);\n    int idx = 0;\n    for(DataPoint p : busyness) {\n      if(idx == 0) {\n        Assert.assertTrue(p.getValue() == 0);\n        idx = 1;\n      } else {\n        Assert.assertTrue(p.getValue() == 1);\n      }\n    }\n  }","commit_id":"6f6b342204b2c6e154e9c9f77fbe22ee9e53d29f","url":"https://github.com/caskdata/cdap"},{"original_method":"@BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = LevelDBDataStoreTest.createTempDirectory();\n    temporalDB = new LevelDBTemporalDataStore(dir);\n    temporalDB.setDbFactory(Iq80DBFactory.factory);\n    temporalDB.open();\n    createFakeFlowDataPoints();\n  }","id":46094,"modified_method":"@BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = LevelDBDataStoreTest.createTempDirectory();\n    temporalDB = new LevelDBTemporalDataStore(dir);\n    temporalDB.open(CConfiguration.create());\n    createFakeFlowDataPoints();\n  }","commit_id":"6f6b342204b2c6e154e9c9f77fbe22ee9e53d29f","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Reads a single flowlet metric for a given instance.\n   *\n   * @throws Exception\n   */\n  @Test\n  public void testReadSingleFlowletMetricForAFlow() throws Exception {\n    Query query = new Query.Select(\"tuple.read\")\n      .From(timestamp)\n      .To(timestamp + DATAPOINTS)\n      .containTag(\"acct\", \"demo\")\n      .containTag(\"app\", \"abc\")\n      .containTag(\"flow\", \"flow\")\n      .containTag(\"runid\", \"AJKHDKJHDKJAHJS\")\n      .containTag(\"flowlet\", \"flowlet1\")\n      .containTag(\"instance\", \"1\")\n      .create();\n    ImmutableList<DataPoint> points = temporalDB.execute(query);\n    Assert.assertNotNull(points);\n    double count = 0;\n    for(DataPoint point : points) {\n      Assert.assertTrue(count == point.getValue());\n      count++;\n    }\n  }","id":46095,"modified_method":"/**\n   * Reads a single flowlet metric for a given instance.\n   *\n   * @throws Exception\n   */\n  @Test\n  public void testReadSingleFlowletMetricForAFlow() throws Exception {\n    Query query = new Query.select(\"tuple.read\")\n      .from(timestamp)\n      .to(timestamp + DATAPOINTS)\n      .and()\n      .has(\"acct\", \"demo\")\n      .has(\"app\", \"abc\")\n      .has(\"flow\", \"flow\")\n      .has(\"runid\", \"AJKHDKJHDKJAHJS\")\n      .has(\"flowlet\", \"flowlet1\")\n      .has(\"instance\", \"1\")\n      .create();\n    ImmutableList<DataPoint> points = temporalDB.execute(query);\n    Assert.assertNotNull(points);\n    double count = 0;\n    for(DataPoint point : points) {\n      Assert.assertTrue(count == point.getValue());\n      count++;\n    }\n  }","commit_id":"6f6b342204b2c6e154e9c9f77fbe22ee9e53d29f","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Reads timeseries across multiple flowlet instances. attr10, attr12.\n   * Tests Aggregate across multiple instance under a account, app, flow,\n   * runid, flowlet.\n   *\n   * @throws Exception\n   */\n  @Test\n  public void testReadMultipleFlowletMetricForAFlow() throws Exception {\n    Query query = new Query.Select(\"tuple.read\")\n      .From(timestamp)\n      .To(timestamp + DATAPOINTS)\n      .containTag(\"acct\", \"demo\")\n      .containTag(\"app\", \"abc\")\n      .containTag(\"flow\", \"flow\")\n      .containTag(\"runid\", \"AJKHDKJHDKJAHJS\")\n      .containTag(\"flowlet\", \"flowlet1\")\n      .create();\n    ImmutableList<DataPoint> points = temporalDB.execute(query);\n    Assert.assertNotNull(points);\n    double count = 0;\n    for(DataPoint point : points) {\n      Assert.assertTrue(count*2 == point.getValue());\n      count++;\n    }\n  }","id":46096,"modified_method":"/**\n   * Reads timeseries across multiple flowlet instances. attr10, attr12.\n   * Tests Aggregate across multiple instance under a account, app, flow,\n   * runid, flowlet.\n   *\n   * @throws Exception\n   */\n  @Test\n  public void testReadMultipleFlowletMetricForAFlow() throws Exception {\n    Query query = new Query.select(\"tuple.read\")\n      .from(timestamp)\n      .to(timestamp + DATAPOINTS)\n      .and()\n      .has(\"acct\", \"demo\")\n      .has(\"app\", \"abc\")\n      .has(\"flow\", \"flow\")\n      .has(\"runid\", \"AJKHDKJHDKJAHJS\")\n      .has(\"flowlet\", \"flowlet1\")\n      .create();\n    ImmutableList<DataPoint> points = temporalDB.execute(query);\n    Assert.assertNotNull(points);\n    double count = 0;\n    for(DataPoint point : points) {\n      Assert.assertTrue(count*2 == point.getValue());\n      count++;\n    }\n  }","commit_id":"6f6b342204b2c6e154e9c9f77fbe22ee9e53d29f","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * @return Gets a instance of levelDB database.\n   * @throws Exception throws a checked exception during setup.\n   */\n  private DB getDatabase() throws Exception {\n    if (database == null) {\n      initEnv();\n    }\n    if (database == null) {\n      throw new IllegalStateException();\n    }\n    return database;\n  }","id":46097,"modified_method":"/**\n   * @return Gets a instance of levelDB database.\n   * @throws Exception throws a checked exception during setup.\n   */\n  private DB getDatabase() throws Exception {\n    if (database == null) {\n      throw new IllegalStateException();\n    }\n    return database;\n  }","commit_id":"6f6b342204b2c6e154e9c9f77fbe22ee9e53d29f","url":"https://github.com/caskdata/cdap"},{"original_method":"public static <T,U> boolean zip(Collection<T> ct, Collection<U> cu,\n                                  ZipIterator<T,U> each) {\n    Iterator<T> it = ct.iterator();\n    Iterator<U> iu = cu.iterator();\n    while (it.hasNext() && iu.hasNext()) {\n      if (!each.each(it.next(), iu.next())) {\n        return false;\n      }\n    }\n    return !it.hasNext() && !iu.hasNext();\n  }","id":46098,"modified_method":"/**\n   * Smart zip that iterates through the two list of timeseries using\n   * {@link ZipIterator.Advance}. For each iteration it passed the objects\n   * to {@link ZipIterator#each(Object, Object,\n   *  com.continuuity.metrics2.common.ZipIterator.Advance)}\n   *\n   * @param a Collection of objects for list A\n   * @param b Collection of objects for list B\n   * @param each functor to advance and process objects.\n   */\n  public static <T, U> void zip(Collection<T> a, Collection<U> b,\n                                     ZipIterator<T, U> each) {\n    // Initialize iterator to begin.\n    Iterator<T> itA = a.iterator();\n    Iterator<U> itB = b.iterator();\n\n    T aData = null;\n    U bData = null;\n\n    // Set advance to move both.\n    ZipIterator.Advance advance = ZipIterator.Advance.BOTH;\n    while(itA.hasNext() && itB.hasNext()) {\n\n      // Depending on what gets returned from the advance,\n      // move the iterators accordingly.\n      if(advance == ZipIterator.Advance.BOTH) {\n        aData = itA.next();\n        bData = itB.next();\n      } else if(advance == ZipIterator.Advance.ITER_A) {\n        aData = itA.next();\n      } else if(advance == ZipIterator.Advance.ITER_B) {\n        bData = itB.next();\n      }\n\n      // Pass along each object pair for processing.\n      each.each(aData, bData, advance);\n\n      // Figure out how to advance next.\n      advance = each.advance(aData, bData);\n    }\n\n    // After we are here, one of the list has completed. check which\n    // one it is and based on that use the prev value.\n    if(itB.hasNext()) {\n      while(itB.hasNext()) {\n        bData = itB.next();\n        each.each(aData, bData, ZipIterator.Advance.ITER_B);\n      }\n    } else if(itA.hasNext()) {\n      while(itA.hasNext()) {\n        aData = itA.next();\n        each.each(aData, bData, ZipIterator.Advance.ITER_A);\n      }\n    }\n  }","commit_id":"6f6b342204b2c6e154e9c9f77fbe22ee9e53d29f","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n     * Writes the given record to the history service\n     * @param callRecord CallRecord\n     * @param source Contact\n     * @param destination Contact\n     */\n    private void writeCall( CallRecordImpl callRecord,\n                            Contact source,\n                            Contact destination)\n    {\n        try\n        {\n            History history = this.getHistory(source, destination);\n            HistoryWriter historyWriter = history.getWriter();\n\n            StringBuffer callPeerIDs = new StringBuffer();\n            StringBuffer callPeerStartTime = new StringBuffer();\n            StringBuffer callPeerEndTime = new StringBuffer();\n            StringBuffer callPeerStates = new StringBuffer();\n\n            for (CallPeerRecord item : callRecord\n                .getPeerRecords())\n            {\n                if (callPeerIDs.length() > 0)\n                {\n                    callPeerIDs.append(DELIM);\n                    callPeerStartTime.append(DELIM);\n                    callPeerEndTime.append(DELIM);\n                    callPeerStates.append(DELIM);\n                }\n\n                callPeerIDs.append(item.getPeerAddress());\n                callPeerStartTime.append(String.valueOf(item\n                    .getStartTime().getTime()));\n                callPeerEndTime.append(String.valueOf(item.getEndTime()\n                    .getTime()));\n                callPeerStates.append(item.getState().getStateString());\n            }\n\n            historyWriter.addRecord(new String[] {\n                    callRecord.getSourceCall().getProtocolProvider()\n                        .getAccountID().getAccountUniqueID(),\n                    String.valueOf(callRecord.getStartTime().getTime()),\n                    String.valueOf(callRecord.getEndTime().getTime()),\n                    callRecord.getDirection(),\n                    callPeerIDs.toString(),\n                    callPeerStartTime.toString(),\n                    callPeerEndTime.toString(),\n                    callPeerStates.toString()},\n                    new Date());    // this date is when the history\n                                    // record is written\n        }\n        catch (IOException e)\n        {\n            logger.error(\"Could not add call to history\", e);\n        }\n    }","id":46099,"modified_method":"/**\n     * Writes the given record to the history service\n     * @param callRecord CallRecord\n     * @param source Contact\n     * @param destination Contact\n     */\n    private void writeCall( CallRecordImpl callRecord,\n                            Contact source,\n                            Contact destination)\n    {\n        try\n        {\n            History history = this.getHistory(source, destination);\n            HistoryWriter historyWriter = history.getWriter();\n\n            StringBuffer callPeerIDs = new StringBuffer();\n            StringBuffer callPeerStartTime = new StringBuffer();\n            StringBuffer callPeerEndTime = new StringBuffer();\n            StringBuffer callPeerStates = new StringBuffer();\n\n            for (CallPeerRecord item : callRecord\n                .getPeerRecords())\n            {\n                if (callPeerIDs.length() > 0)\n                {\n                    callPeerIDs.append(DELIM);\n                    callPeerStartTime.append(DELIM);\n                    callPeerEndTime.append(DELIM);\n                    callPeerStates.append(DELIM);\n                }\n\n                callPeerIDs.append(item.getPeerAddress());\n                callPeerStartTime.append(String.valueOf(item\n                    .getStartTime().getTime()));\n                callPeerEndTime.append(String.valueOf(item.getEndTime()\n                    .getTime()));\n                callPeerStates.append(item.getState().getStateString());\n            }\n\n            historyWriter.addRecord(new String[] {\n                    callRecord.getSourceCall().getProtocolProvider()\n                        .getAccountID().getAccountUniqueID(),\n                    String.valueOf(callRecord.getStartTime().getTime()),\n                    String.valueOf(callRecord.getEndTime().getTime()),\n                    callRecord.getDirection(),\n                    callPeerIDs.toString(),\n                    callPeerStartTime.toString(),\n                    callPeerEndTime.toString(),\n                    callPeerStates.toString(),\n                    String.valueOf(callRecord.getEndReason())},\n                    new Date());    // this date is when the history\n                                    // record is written\n        }\n        catch (IOException e)\n        {\n            logger.error(\"Could not add call to history\", e);\n        }\n    }","commit_id":"92a82069beb70e34de0d1cc6f72aac57c4a9a229","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n         * A dummy implementation of this listener's callStateChanged() method.\n         *\n         * @param evt the <tt>CallChangeEvent<\/tt> instance containing the source\n         * calls and its old and new state.\n         */\n        public void callStateChanged(CallChangeEvent evt)\n        {\n            CallRecordImpl callRecord = findCallRecord(evt.getSourceCall());\n\n            // no such call\n            if (callRecord == null)\n                return;\n\n            if (evt.getNewValue().equals(CallState.CALL_ENDED))\n            {\n                if(evt.getOldValue().equals(CallState.CALL_INITIALIZATION))\n                    callRecord.setEndTime(callRecord.getStartTime());\n                else\n                    callRecord.setEndTime(new Date());\n\n                writeCall(callRecord, null, null);\n\n                currentCallRecords.remove(callRecord);\n            }\n        }","id":46100,"modified_method":"/**\n         * A dummy implementation of this listener's callStateChanged() method.\n         *\n         * @param evt the <tt>CallChangeEvent<\/tt> instance containing the source\n         * calls and its old and new state.\n         */\n        public void callStateChanged(CallChangeEvent evt)\n        {\n            CallRecordImpl callRecord = findCallRecord(evt.getSourceCall());\n\n            // no such call\n            if (callRecord == null)\n                return;\n\n            if (evt.getNewValue().equals(CallState.CALL_ENDED))\n            {\n                if(evt.getOldValue().equals(CallState.CALL_INITIALIZATION))\n                {\n                    callRecord.setEndTime(callRecord.getStartTime());\n\n                    // if call was answered elsewhere, add its reason\n                    // so we can distinguish it from missed\n                    if(evt.getCause() != null\n                           && evt.getCause().getReasonCode() ==\n                                CallPeerChangeEvent.NORMAL_CALL_CLEARING)\n                    {\n                        callRecord.setEndReason(evt.getCause().getReasonCode());\n                    }\n                }\n                else\n                    callRecord.setEndTime(new Date());\n\n                writeCall(callRecord, null, null);\n\n                currentCallRecords.remove(callRecord);\n            }\n        }","commit_id":"92a82069beb70e34de0d1cc6f72aac57c4a9a229","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Used to convert HistoryRecord in CallReord and CallPeerRecord\n     * which are returned by the finder methods\n     *\n     * @param hr HistoryRecord\n     * @return Object CallRecord\n     */\n    static CallRecord convertHistoryRecordToCallRecord(HistoryRecord hr)\n    {\n        CallRecordImpl result = new CallRecordImpl();\n\n        List<String> callPeerIDs = null;\n        List<String> callPeerStart = null;\n        List<String> callPeerEnd = null;\n        List<CallPeerState> callPeerStates = null;\n\n        // History structure\n        // 0 - callStart\n        // 1 - callEnd\n        // 2 - dir\n        // 3 - callParticipantIDs\n        // 4 - callParticipantStart\n        // 5 - callParticipantEnd\n\n        for (int i = 0; i < hr.getPropertyNames().length; i++)\n        {\n            String propName = hr.getPropertyNames()[i];\n            String value = hr.getPropertyValues()[i];\n\n            if (propName.equals(STRUCTURE_NAMES[0]))\n                result.setProtocolProvider(getProtocolProvider(value));\n            else if(propName.equals(STRUCTURE_NAMES[1]))\n                result.setStartTime(new Date(Long.parseLong(value)));\n            else if(propName.equals(STRUCTURE_NAMES[2]))\n                result.setEndTime(new Date(Long.parseLong(value)));\n            else if(propName.equals(STRUCTURE_NAMES[3]))\n                result.setDirection(value);\n            else if(propName.equals(STRUCTURE_NAMES[4]))\n                callPeerIDs = getCSVs(value);\n            else if(propName.equals(STRUCTURE_NAMES[5]))\n                callPeerStart = getCSVs(value);\n            else if(propName.equals(STRUCTURE_NAMES[6]))\n                callPeerEnd = getCSVs(value);\n            else if(propName.equals(STRUCTURE_NAMES[7]))\n                callPeerStates = getStates(value);\n        }\n\n        final int callPeerCount = callPeerIDs == null ? 0 : callPeerIDs.size();\n        for (int i = 0; i < callPeerCount; i++)\n        {\n            CallPeerRecordImpl cpr =\n                new CallPeerRecordImpl(callPeerIDs.get(i),\n                    new Date(Long.parseLong(callPeerStart.get(i))),\n                    new Date(Long.parseLong(callPeerEnd.get(i))));\n\n            // if there is no record about the states (backward compability)\n            if (callPeerStates != null)\n                cpr.setState(callPeerStates.get(i));\n\n            result.getPeerRecords().add(cpr);\n        }\n\n        return result;\n    }","id":46101,"modified_method":"/**\n     * Used to convert HistoryRecord in CallReord and CallPeerRecord\n     * which are returned by the finder methods\n     *\n     * @param hr HistoryRecord\n     * @return Object CallRecord\n     */\n    static CallRecord convertHistoryRecordToCallRecord(HistoryRecord hr)\n    {\n        CallRecordImpl result = new CallRecordImpl();\n\n        List<String> callPeerIDs = null;\n        List<String> callPeerStart = null;\n        List<String> callPeerEnd = null;\n        List<CallPeerState> callPeerStates = null;\n\n        // History structure\n        // 0 - callStart\n        // 1 - callEnd\n        // 2 - dir\n        // 3 - callParticipantIDs\n        // 4 - callParticipantStart\n        // 5 - callParticipantEnd\n\n        for (int i = 0; i < hr.getPropertyNames().length; i++)\n        {\n            String propName = hr.getPropertyNames()[i];\n            String value = hr.getPropertyValues()[i];\n\n            if (propName.equals(STRUCTURE_NAMES[0]))\n                result.setProtocolProvider(getProtocolProvider(value));\n            else if(propName.equals(STRUCTURE_NAMES[1]))\n                result.setStartTime(new Date(Long.parseLong(value)));\n            else if(propName.equals(STRUCTURE_NAMES[2]))\n                result.setEndTime(new Date(Long.parseLong(value)));\n            else if(propName.equals(STRUCTURE_NAMES[3]))\n                result.setDirection(value);\n            else if(propName.equals(STRUCTURE_NAMES[4]))\n                callPeerIDs = getCSVs(value);\n            else if(propName.equals(STRUCTURE_NAMES[5]))\n                callPeerStart = getCSVs(value);\n            else if(propName.equals(STRUCTURE_NAMES[6]))\n                callPeerEnd = getCSVs(value);\n            else if(propName.equals(STRUCTURE_NAMES[7]))\n                callPeerStates = getStates(value);\n            else if(propName.equals(STRUCTURE_NAMES[8]))\n                result.setEndReason(Integer.parseInt(value));\n        }\n\n        final int callPeerCount = callPeerIDs == null ? 0 : callPeerIDs.size();\n        for (int i = 0; i < callPeerCount; i++)\n        {\n            CallPeerRecordImpl cpr =\n                new CallPeerRecordImpl(callPeerIDs.get(i),\n                    new Date(Long.parseLong(callPeerStart.get(i))),\n                    new Date(Long.parseLong(callPeerEnd.get(i))));\n\n            // if there is no record about the states (backward compability)\n            if (callPeerStates != null)\n                cpr.setState(callPeerStates.get(i));\n\n            result.getPeerRecords().add(cpr);\n        }\n\n        return result;\n    }","commit_id":"92a82069beb70e34de0d1cc6f72aac57c4a9a229","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * An image (or avatar) corresponding to this search contact. If such is\n     * not available this method will return null.\n     *\n     * @return the byte array of the image or null if no image is available\n     */\n    public byte[] getImage()\n    {\n        if (callRecord.getDirection().equals(CallRecord.IN))\n        {\n            if (callRecord.getStartTime().equals(callRecord.getEndTime()))\n                return missedCallIcon;\n            else\n                return incomingIcon;\n        }\n        else if (callRecord.getDirection().equals(CallRecord.OUT))\n            return outgoingIcon;\n\n        return null;\n    }","id":46102,"modified_method":"/**\n     * An image (or avatar) corresponding to this search contact. If such is\n     * not available this method will return null.\n     *\n     * @return the byte array of the image or null if no image is available\n     */\n    public byte[] getImage()\n    {\n        if (callRecord.getDirection().equals(CallRecord.IN))\n        {\n            // if the call record has reason for normal call clearing\n            // means it was answered somewhere else and we don't\n            // mark it as missed\n            if (callRecord.getStartTime().equals(callRecord.getEndTime())\n                && (callRecord.getEndReason()\n                        != CallPeerChangeEvent.NORMAL_CALL_CLEARING))\n                return missedCallIcon;\n            else\n                return incomingIcon;\n        }\n        else if (callRecord.getDirection().equals(CallRecord.OUT))\n            return outgoingIcon;\n\n        return null;\n    }","commit_id":"92a82069beb70e34de0d1cc6f72aac57c4a9a229","url":"https://github.com/jitsi/jitsi"},{"original_method":"@Override\n\tpublic CalendarBooking updateCalendarBooking(\n\t\t\tlong userId, long calendarBookingId, long calendarId,\n\t\t\tlong[] childCalendarIds, Map<Locale, String> titleMap,\n\t\t\tMap<Locale, String> descriptionMap, String location, long startTime,\n\t\t\tlong endTime, boolean allDay, String recurrence, long firstReminder,\n\t\t\tString firstReminderType, long secondReminder,\n\t\t\tString secondReminderType, ServiceContext serviceContext)\n\t\tthrows PortalException {\n\n\t\t// Calendar booking\n\n\t\tCalendar calendar = calendarPersistence.findByPrimaryKey(calendarId);\n\t\tCalendarBooking calendarBooking =\n\t\t\tcalendarBookingPersistence.findByPrimaryKey(calendarBookingId);\n\n\t\tfor (Locale locale : descriptionMap.keySet()) {\n\t\t\tString sanitizedDescription = SanitizerUtil.sanitize(\n\t\t\t\tcalendar.getCompanyId(), calendar.getGroupId(), userId,\n\t\t\t\tCalendarBooking.class.getName(), calendarBookingId,\n\t\t\t\tContentTypes.TEXT_HTML, Sanitizer.MODE_ALL,\n\t\t\t\tdescriptionMap.get(locale), null);\n\n\t\t\tdescriptionMap.put(locale, sanitizedDescription);\n\t\t}\n\n\t\tjava.util.Calendar startTimeJCalendar = JCalendarUtil.getJCalendar(\n\t\t\tstartTime);\n\t\tjava.util.Calendar endTimeJCalendar = JCalendarUtil.getJCalendar(\n\t\t\tendTime);\n\n\t\tif (allDay) {\n\t\t\tstartTimeJCalendar = JCalendarUtil.toMidnightJCalendar(\n\t\t\t\tstartTimeJCalendar);\n\t\t\tendTimeJCalendar = JCalendarUtil.toLastHourJCalendar(\n\t\t\t\tendTimeJCalendar);\n\t\t}\n\n\t\tif (firstReminder < secondReminder) {\n\t\t\tlong originalSecondReminder = secondReminder;\n\n\t\t\tsecondReminder = firstReminder;\n\t\t\tfirstReminder = originalSecondReminder;\n\t\t}\n\n\t\tvalidate(titleMap, startTimeJCalendar, endTimeJCalendar, recurrence);\n\n\t\tcalendarBooking.setGroupId(calendar.getGroupId());\n\t\tcalendarBooking.setModifiedDate(serviceContext.getModifiedDate(null));\n\t\tcalendarBooking.setCalendarId(calendarId);\n\n\t\tMap<Locale, String> updatedTitleMap = calendarBooking.getTitleMap();\n\n\t\tupdatedTitleMap.putAll(titleMap);\n\n\t\tcalendarBooking.setTitleMap(\n\t\t\tupdatedTitleMap, serviceContext.getLocale());\n\n\t\tMap<Locale, String> updatedDescriptionMap =\n\t\t\tcalendarBooking.getDescriptionMap();\n\n\t\tupdatedDescriptionMap.putAll(descriptionMap);\n\n\t\tcalendarBooking.setDescriptionMap(updatedDescriptionMap);\n\n\t\tcalendarBooking.setLocation(location);\n\t\tcalendarBooking.setStartTime(startTimeJCalendar.getTimeInMillis());\n\t\tcalendarBooking.setEndTime(endTimeJCalendar.getTimeInMillis());\n\t\tcalendarBooking.setAllDay(allDay);\n\t\tcalendarBooking.setRecurrence(recurrence);\n\t\tcalendarBooking.setFirstReminder(firstReminder);\n\t\tcalendarBooking.setFirstReminderType(firstReminderType);\n\t\tcalendarBooking.setSecondReminder(secondReminder);\n\t\tcalendarBooking.setSecondReminderType(secondReminderType);\n\n\t\tif (!calendarBooking.isPending() || !calendarBooking.isDraft()) {\n\t\t\tcalendarBooking.setStatus(WorkflowConstants.STATUS_DRAFT);\n\t\t}\n\n\t\tcalendarBooking.setExpandoBridgeAttributes(serviceContext);\n\n\t\tcalendarBookingPersistence.update(calendarBooking);\n\n\t\taddChildCalendarBookings(\n\t\t\tcalendarBooking, childCalendarIds, serviceContext);\n\n\t\t// Asset\n\n\t\tupdateAsset(\n\t\t\tuserId, calendarBooking, serviceContext.getAssetCategoryIds(),\n\t\t\tserviceContext.getAssetTagNames(),\n\t\t\tserviceContext.getAssetLinkEntryIds());\n\n\t\t// Social\n\n\t\tsocialActivityLocalService.addActivity(\n\t\t\tuserId, calendarBooking.getGroupId(),\n\t\t\tCalendarBooking.class.getName(), calendarBookingId,\n\t\t\tCalendarActivityKeys.UPDATE_CALENDAR_BOOKING,\n\t\t\tgetExtraDataJSON(calendarBooking), 0);\n\n\t\t// Notifications\n\n\t\tsendNotification(\n\t\t\tcalendarBooking, NotificationTemplateType.UPDATE, serviceContext);\n\n\t\t// Workflow\n\n\t\tif (calendarBooking.isMasterBooking()) {\n\t\t\tWorkflowHandlerRegistryUtil.startWorkflowInstance(\n\t\t\t\tcalendarBooking.getCompanyId(), calendarBooking.getGroupId(),\n\t\t\t\tuserId, CalendarBooking.class.getName(),\n\t\t\t\tcalendarBooking.getCalendarBookingId(), calendarBooking,\n\t\t\t\tserviceContext);\n\t\t}\n\n\t\treturn calendarBooking;\n\t}","id":46103,"modified_method":"@Override\n\tpublic CalendarBooking updateCalendarBooking(\n\t\t\tlong userId, long calendarBookingId, long calendarId,\n\t\t\tlong[] childCalendarIds, Map<Locale, String> titleMap,\n\t\t\tMap<Locale, String> descriptionMap, String location, long startTime,\n\t\t\tlong endTime, boolean allDay, String recurrence, long firstReminder,\n\t\t\tString firstReminderType, long secondReminder,\n\t\t\tString secondReminderType, ServiceContext serviceContext)\n\t\tthrows PortalException {\n\n\t\t// Calendar booking\n\n\t\tCalendar calendar = calendarPersistence.findByPrimaryKey(calendarId);\n\t\tCalendarBooking calendarBooking =\n\t\t\tcalendarBookingPersistence.findByPrimaryKey(calendarBookingId);\n\n\t\tHashMap<Long, CalendarBooking> childCalendarBookingMap =\n\t\t\tnew HashMap<>();\n\t\tList<CalendarBooking> childCalendarBookingList =\n\t\t\t\tcalendarBookingPersistence.findByParentCalendarBookingId(\n\t\t\t\t\tcalendarBookingId);\n\n\t\tfor (CalendarBooking childCalendarBooking : childCalendarBookingList) {\n\t\t\tchildCalendarBookingMap.put(\n\t\t\t\tchildCalendarBooking.getCalendarId(), childCalendarBooking);\n\t\t}\n\n\t\tfor (Locale locale : descriptionMap.keySet()) {\n\t\t\tString sanitizedDescription = SanitizerUtil.sanitize(\n\t\t\t\tcalendar.getCompanyId(), calendar.getGroupId(), userId,\n\t\t\t\tCalendarBooking.class.getName(), calendarBookingId,\n\t\t\t\tContentTypes.TEXT_HTML, Sanitizer.MODE_ALL,\n\t\t\t\tdescriptionMap.get(locale), null);\n\n\t\t\tdescriptionMap.put(locale, sanitizedDescription);\n\t\t}\n\n\t\tjava.util.Calendar startTimeJCalendar = JCalendarUtil.getJCalendar(\n\t\t\tstartTime);\n\t\tjava.util.Calendar endTimeJCalendar = JCalendarUtil.getJCalendar(\n\t\t\tendTime);\n\n\t\tif (allDay) {\n\t\t\tstartTimeJCalendar = JCalendarUtil.toMidnightJCalendar(\n\t\t\t\tstartTimeJCalendar);\n\t\t\tendTimeJCalendar = JCalendarUtil.toLastHourJCalendar(\n\t\t\t\tendTimeJCalendar);\n\t\t}\n\n\t\tif (firstReminder < secondReminder) {\n\t\t\tlong originalSecondReminder = secondReminder;\n\n\t\t\tsecondReminder = firstReminder;\n\t\t\tfirstReminder = originalSecondReminder;\n\t\t}\n\n\t\tvalidate(titleMap, startTimeJCalendar, endTimeJCalendar, recurrence);\n\n\t\tcalendarBooking.setGroupId(calendar.getGroupId());\n\t\tcalendarBooking.setModifiedDate(serviceContext.getModifiedDate(null));\n\t\tcalendarBooking.setCalendarId(calendarId);\n\n\t\tMap<Locale, String> updatedTitleMap = calendarBooking.getTitleMap();\n\n\t\tupdatedTitleMap.putAll(titleMap);\n\n\t\tcalendarBooking.setTitleMap(\n\t\t\tupdatedTitleMap, serviceContext.getLocale());\n\n\t\tMap<Locale, String> updatedDescriptionMap =\n\t\t\tcalendarBooking.getDescriptionMap();\n\n\t\tupdatedDescriptionMap.putAll(descriptionMap);\n\n\t\tcalendarBooking.setDescriptionMap(updatedDescriptionMap);\n\n\t\tcalendarBooking.setLocation(location);\n\t\tcalendarBooking.setAllDay(allDay);\n\t\tcalendarBooking.setRecurrence(recurrence);\n\t\tcalendarBooking.setFirstReminder(firstReminder);\n\t\tcalendarBooking.setFirstReminderType(firstReminderType);\n\t\tcalendarBooking.setSecondReminder(secondReminder);\n\t\tcalendarBooking.setSecondReminderType(secondReminderType);\n\n\t\tlong startTimeInMilis = startTimeJCalendar.getTimeInMillis();\n\t\tlong endTimeInMilis = endTimeJCalendar.getTimeInMillis();\n\n\t\tboolean timeChanged = !Validator.equals(\n\t\t\tcalendarBooking.getStartTime(), startTimeInMilis) ||\n\t\t\t!Validator.equals(calendarBooking.getEndTime(), endTimeInMilis);\n\n\t\tcalendarBooking.setStartTime(startTimeInMilis);\n\t\tcalendarBooking.setEndTime(endTimeJCalendar.getTimeInMillis());\n\n\t\tif (!calendarBooking.isPending() || !calendarBooking.isDraft()) {\n\t\t\tcalendarBooking.setStatus(WorkflowConstants.STATUS_DRAFT);\n\t\t}\n\n\t\tcalendarBooking.setExpandoBridgeAttributes(serviceContext);\n\n\t\tcalendarBookingPersistence.update(calendarBooking);\n\n\t\taddChildCalendarBookings(\n\t\t\tcalendarBooking, childCalendarIds, serviceContext);\n\n\t\t// Asset\n\n\t\tupdateAsset(\n\t\t\tuserId, calendarBooking, serviceContext.getAssetCategoryIds(),\n\t\t\tserviceContext.getAssetTagNames(),\n\t\t\tserviceContext.getAssetLinkEntryIds());\n\n\t\t// Social\n\n\t\tsocialActivityLocalService.addActivity(\n\t\t\tuserId, calendarBooking.getGroupId(),\n\t\t\tCalendarBooking.class.getName(), calendarBookingId,\n\t\t\tCalendarActivityKeys.UPDATE_CALENDAR_BOOKING,\n\t\t\tgetExtraDataJSON(calendarBooking), 0);\n\n\t\t// Notifications\n\n\t\tsendNotification(\n\t\t\tcalendarBooking, NotificationTemplateType.UPDATE, serviceContext);\n\n\t\t// Workflow\n\n\t\tif (calendarBooking.isMasterBooking()) {\n\t\t\tWorkflowHandlerRegistryUtil.startWorkflowInstance(\n\t\t\t\tcalendarBooking.getCompanyId(), calendarBooking.getGroupId(),\n\t\t\t\tuserId, CalendarBooking.class.getName(),\n\t\t\t\tcalendarBooking.getCalendarBookingId(), calendarBooking,\n\t\t\t\tserviceContext);\n\t\t}\n\n\t\tint workflowAction = GetterUtil.getInteger(\n\t\t\t\t\tserviceContext.getAttribute(\"workflowAction\"));\n\n\t\tif (!timeChanged &&\n\t\t\t!Validator.equals(\n\t\t\t\tworkflowAction, WorkflowConstants.ACTION_SAVE_DRAFT)) {\n\n\t\t\tfor (CalendarBooking childCalendarBooking :\n\t\t\t\t\tcalendarBooking.getChildCalendarBookings()) {\n\n\t\t\t\tCalendarBooking oldChildCalendarBooking =\n\t\t\t\t\t\tchildCalendarBookingMap.get(\n\t\t\t\t\t\t\tchildCalendarBooking.getCalendarId());\n\n\t\t\t\tif (!childCalendarBooking.isMasterBooking() &&\n\t\t\t\t\t(oldChildCalendarBooking.getStatusByUserId() > 0)) {\n\n\t\t\t\t\tchildCalendarBooking = updateStatus(\n\t\t\t\t\t\t\toldChildCalendarBooking.getStatusByUserId(),\n\t\t\t\t\t\t\tchildCalendarBooking,\n\t\t\t\t\t\t\toldChildCalendarBooking.getStatus(),\n\t\t\t\t\t\t\tserviceContext);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn calendarBooking;\n\t}","commit_id":"cd6ceec478757602d7058176663600fba0dd433d","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private void meetingEnded(MeetingEnded message) {\r\n\t\tlog.debug(\"Meeting [{}] has ended.\", message.meetingId);\r\n\t\tMeeting m = getMeeting(message.meetingId);\r\n\t\tif (m != null) {\r\n\t\t\tlong now = System.currentTimeMillis();\r\n\t\t\tlog.debug(\"Meeting [{}] end time [{}].\", message.meetingId, now);\r\n\t\t\tm.setEndTime(now);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlog.warn(\"The meeting \" + message.meetingId + \" doesn't exist\");\r\n\t}","id":46104,"modified_method":"private void meetingEnded(MeetingEnded message) {\r\n\t\tlog.debug(\"Meeting [{}] has ended.\", message.meetingId);\r\n\t\tMeeting m = getMeeting(message.meetingId);\r\n\t\tif (m != null) {\r\n\t\t\tlong now = System.currentTimeMillis();\r\n\t\t\tlog.debug(\"Meeting [{}] end time [{}].\", message.meetingId, now);\r\n\t\t\tm.setEndTime(now);\r\n\t\t\t\r\n\t\t\tMap<String, Object> logData = new HashMap<String, Object>();\r\n\t\t\tlogData.put(\"meetingId\", m.getInternalId());\r\n\t\t\tlogData.put(\"externalMeetingId\", m.getExternalId());\r\n\t\t\tlogData.put(\"name\", m.getName());\r\n\t\t\tlogData.put(\"duration\", m.getDuration());\r\n\t\t\tlogData.put(\"record\", m.isRecord());\r\n\t\t\tlogData.put(\"event\", \"meeting_ended\");\r\n\t\t\tlogData.put(\"description\", \"Meeting has ended.\");\r\n\t\t\t\r\n\t\t\tGson gson = new Gson();\r\n\t    String logStr =  gson.toJson(logData);\r\n\t\t\t\r\n\t\t\tlog.info(\"Meeting ended: data={}\", logStr);\r\n\t\t\t\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlog.warn(\"The meeting \" + message.meetingId + \" doesn't exist\");\r\n\t}","commit_id":"9599d65ad1430fb1b579f4b5cb40e69f87db82dc","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"private void userLeft(UserLeft message) {\r\n\t\tlog.debug(\"User left from meeting[{}]\", message.meetingId);\r\n\t\tMeeting m = getMeeting(message.meetingId);\r\n\t\tif (m != null) {\r\n\t\t\tUser user = m.userLeft(message.userId);\r\n\t\t\tif(user != null){\r\n\t\t\t\tlog.info(\"User removed from meeting [\" + message.meetingId + \"] user [\" + user.getFullname() + \"]\");\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tlog.warn(\"The participant \" + message.userId + \" doesn't exist in the meeting \" + message.meetingId);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlog.warn(\"The meeting \" + message.meetingId + \" doesn't exist\");\r\n\t}","id":46105,"modified_method":"private void userLeft(UserLeft message) {\r\n\t\tlog.debug(\"User left from meeting[{}]\", message.meetingId);\r\n\t\tMeeting m = getMeeting(message.meetingId);\r\n\t\tif (m != null) {\r\n\t\t\tUser user = m.userLeft(message.userId);\r\n\t\t\tif(user != null){\r\n\t\t\t\tlog.info(\"User removed from meeting [\" + message.meetingId + \"] user [\" + user.getFullname() + \"]\");\r\n\t\t\t\t\r\n\t\t\t\tMap<String, Object> logData = new HashMap<String, Object>();\r\n\t\t\t\tlogData.put(\"meetingId\", m.getInternalId());\r\n\t\t\t\tlogData.put(\"externalMeetingId\", m.getExternalId());\r\n\t\t\t\tlogData.put(\"name\", m.getName());\r\n\t\t\t\tlogData.put(\"userId\", message.userId);\r\n\t\t\t\tlogData.put(\"externalUserId\", user.getExternalUserId());\r\n\t\t\t\tlogData.put(\"username\", user.getFullname());\r\n\t\t\t\tlogData.put(\"role\", user.getRole());\t\t\t\r\n\t\t\t\tlogData.put(\"event\", \"user_joined_meeting\");\r\n\t\t\t\tlogData.put(\"description\", \"User had joined the meeting.\");\r\n\t\t\t\t\r\n\t\t\t\tGson gson = new Gson();\r\n\t\t    String logStr =  gson.toJson(logData);\r\n\t\t\t\t\r\n\t\t\t\tlog.info(\"User left meeting: data={}\", logStr);\r\n\t\t\t\t\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tlog.warn(\"The participant \" + message.userId + \" doesn't exist in the meeting \" + message.meetingId);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlog.warn(\"The meeting \" + message.meetingId + \" doesn't exist\");\r\n\t}","commit_id":"9599d65ad1430fb1b579f4b5cb40e69f87db82dc","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"private void userJoined(UserJoined message) {\r\n\t\tlog.debug(\"User joined in meeting[{}]\", message.meetingId);\r\n\t\tMeeting m = getMeeting(message.meetingId);\r\n\t\tif (m != null) {\r\n\t\t\tUser user = new User(message.userId, message.externalUserId, message.name, message.role);\r\n\t\t\tm.userJoined(user);\r\n\t\t\tlog.info(\"New user in meeting [\" + message.meetingId + \"] user [\" + user.getFullname() + \"]\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlog.warn(\"The meeting \" + message.meetingId + \" doesn't exist\");\r\n\t}","id":46106,"modified_method":"private void userJoined(UserJoined message) {\r\n\t\tlog.debug(\"User joined in meeting[{}]\", message.meetingId);\r\n\t\tMeeting m = getMeeting(message.meetingId);\r\n\t\tif (m != null) {\r\n\t\t\tUser user = new User(message.userId, message.externalUserId, message.name, message.role);\r\n\t\t\tm.userJoined(user);\r\n\t\t\tlog.info(\"New user in meeting [\" + message.meetingId + \"] user [\" + user.getFullname() + \"]\");\r\n\t\t\t\r\n\t\t\tMap<String, Object> logData = new HashMap<String, Object>();\r\n\t\t\tlogData.put(\"meetingId\", m.getInternalId());\r\n\t\t\tlogData.put(\"externalMeetingId\", m.getExternalId());\r\n\t\t\tlogData.put(\"name\", m.getName());\r\n\t\t\tlogData.put(\"userId\", message.userId);\r\n\t\t\tlogData.put(\"externalUserId\", user.getExternalUserId());\r\n\t\t\tlogData.put(\"username\", user.getFullname());\r\n\t\t\tlogData.put(\"role\", user.getRole());\t\t\t\r\n\t\t\tlogData.put(\"event\", \"user_joined_meeting\");\r\n\t\t\tlogData.put(\"description\", \"User had joined the meeting.\");\r\n\t\t\t\r\n\t\t\tGson gson = new Gson();\r\n\t    String logStr =  gson.toJson(logData);\r\n\t\t\t\r\n\t\t\tlog.info(\"User joined meeting: data={}\", logStr);\r\n\t\t\t\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlog.warn(\"The meeting \" + message.meetingId + \" doesn't exist\");\r\n\t}","commit_id":"9599d65ad1430fb1b579f4b5cb40e69f87db82dc","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"private void checkAndRemoveExpiredMeetings() {\r\n\t\tlog.debug(\"Cleaning up expired meetings\");\r\n\t\tfor (Meeting m : meetings.values()) {\r\n\t\t\tif (m.hasExpired(defaultMeetingExpireDuration) ) {\r\n\t\t\t\tlog.info(\"Meeting [id={} , name={}] has expired.\", m.getInternalId(), m.getName());\r\n\t\t\t\tprocessMeetingForRemoval(m);\r\n\t\t\t\tcontinue;\r\n\t\t\t} else {\r\n\t\t\t\tlog.debug(\"Meeting [id={} , name={}] has not expired yet.\", m.getInternalId(), m.getName());\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (m.isForciblyEnded()) {\r\n\t\t\t\tlog.info(\"Meeting [id={} , name={}] has been forcefully ended.\", m.getInternalId(), m.getName());\r\n\t\t\t\tprocessMeetingForRemoval(m);\t\t\t\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (m.wasNeverJoined(defaultMeetingCreateJoinDuration)) {\r\n\t\t\t\tlog.info(\"No user has joined the meeting [id={} , name={}]. Removing it.\", m.getInternalId(), m.getName());\r\n\t\t\t\tdestroyMeeting(m.getInternalId());\t\t\t\r\n\t\t\t\tmeetings.remove(m.getInternalId());\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (m.hasExceededDuration()) {\r\n\t\t\t\tlog.info(\"Meeting [id={} , name={}] has ran past duration. Ending it.\", m.getInternalId(), m.getName());\r\n\t\t\t\tendMeeting(m.getInternalId());\r\n\t\t\t}\t\t\t\r\n\t\t}\t\t\r\n\t}","id":46107,"modified_method":"private void checkAndRemoveExpiredMeetings() {\r\n\t\tlog.debug(\"Cleaning up expired meetings\");\r\n\t\tfor (Meeting m : meetings.values()) {\r\n\t\t\tif (m.hasExpired(defaultMeetingExpireDuration) ) {\r\n\t\t\t\tlog.info(\"Meeting [id={} , name={}] has expired.\", m.getInternalId(), m.getName());\r\n\t\t\t\t\r\n\t  \t\tMap<String, Object> logData = new HashMap<String, Object>();\r\n\t  \t\tlogData.put(\"meetingId\", m.getInternalId());\r\n\t  \t\tlogData.put(\"externalMeetingId\", m.getExternalId());\r\n\t  \t\tlogData.put(\"name\", m.getName());\r\n\t  \t\tlogData.put(\"event\", \"removing_meeting\");\r\n\t  \t\tlogData.put(\"description\", \"Meeting has expired.\");\r\n\t  \t\t\r\n\t  \t\tGson gson = new Gson();\r\n\t      String logStr =  gson.toJson(logData);\r\n\t  \t\t\r\n\t  \t\tlog.info(\"Removing meeting: data={}\", logStr);\r\n\t  \t\t\r\n\t\t\t\tprocessMeetingForRemoval(m);\r\n\t\t\t\tcontinue;\r\n\t\t\t} else {\r\n\t\t\t\tlog.debug(\"Meeting [id={} , name={}] has not expired yet.\", m.getInternalId(), m.getName());\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (m.isForciblyEnded()) {\r\n\t\t\t\tlog.info(\"Meeting [id={} , name={}] has been forcefully ended.\", m.getInternalId(), m.getName());\r\n\t\t\t\t\r\n\t  \t\tMap<String, Object> logData = new HashMap<String, Object>();\r\n\t  \t\tlogData.put(\"meetingId\", m.getInternalId());\r\n\t  \t\tlogData.put(\"externalMeetingId\", m.getExternalId());\r\n\t  \t\tlogData.put(\"name\", m.getName());\r\n\t  \t\tlogData.put(\"event\", \"removing_meeting\");\r\n\t  \t\tlogData.put(\"description\", \"Meeting forcefully ended.\");\r\n\t  \t\t\r\n\t  \t\tGson gson = new Gson();\r\n\t      String logStr =  gson.toJson(logData);\r\n\t  \t\t\r\n\t  \t\tlog.info(\"Removing meeting: data={}\", logStr);\r\n\t\t\t\tprocessMeetingForRemoval(m);\t\t\t\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (m.wasNeverJoined(defaultMeetingCreateJoinDuration)) {\r\n\t\t\t\tlog.info(\"No user has joined the meeting [id={} , name={}]. Removing it.\", m.getInternalId(), m.getName());\r\n\t\t\t\t\r\n\t  \t\tMap<String, Object> logData = new HashMap<String, Object>();\r\n\t  \t\tlogData.put(\"meetingId\", m.getInternalId());\r\n\t  \t\tlogData.put(\"externalMeetingId\", m.getExternalId());\r\n\t  \t\tlogData.put(\"name\", m.getName());\r\n\t  \t\tlogData.put(\"event\", \"removing_meeting\");\r\n\t  \t\tlogData.put(\"description\", \"Meeting has not been joined.\");\r\n\t  \t\t\r\n\t  \t\tGson gson = new Gson();\r\n\t      String logStr =  gson.toJson(logData);\r\n\t  \t\t\r\n\t  \t\tlog.info(\"Removing meeting: data={}\", logStr);\r\n\t  \t\t\r\n\t\t\t\tdestroyMeeting(m.getInternalId());\t\t\t\r\n\t\t\t\tmeetings.remove(m.getInternalId());\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (m.hasExceededDuration()) {\r\n\t\t\t\tlog.info(\"Meeting [id={} , name={}] has ran past duration. Ending it.\", m.getInternalId(), m.getName());\r\n\t\t\t\t\r\n\t  \t\tMap<String, Object> logData = new HashMap<String, Object>();\r\n\t  \t\tlogData.put(\"meetingId\", m.getInternalId());\r\n\t  \t\tlogData.put(\"externalMeetingId\", m.getExternalId());\r\n\t  \t\tlogData.put(\"name\", m.getName());\r\n\t  \t\tlogData.put(\"event\", \"removing_meeting\");\r\n\t  \t\tlogData.put(\"description\", \"Meeting exceeded duration.\");\r\n\t  \t\t\r\n\t  \t\tGson gson = new Gson();\r\n\t      String logStr =  gson.toJson(logData);\r\n\t  \t\t\r\n\t  \t\tlog.info(\"Removing meeting: data={}\", logStr);\r\n\t  \t\t\r\n\t\t\t\tendMeeting(m.getInternalId());\r\n\t\t\t}\t\t\t\r\n\t\t}\t\t\r\n\t}","commit_id":"9599d65ad1430fb1b579f4b5cb40e69f87db82dc","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"private void kickOffProcessingOfRecording(Meeting m) {\r\n  \tif (m.isRecord() && m.getNumUsers() == 0) {\r\n  \t\tlog.info(\"Kick-off processing of recording for meeting [id={} , name={}]\", m.getInternalId(), m.getName());\t\t  \t\t\t\r\n  \t\tprocessRecording(m.getInternalId());\r\n  \t}\t\t \t\t\r\n\t}","id":46108,"modified_method":"private void kickOffProcessingOfRecording(Meeting m) {\r\n  \tif (m.isRecord() && m.getNumUsers() == 0) {\r\n  \t\tlog.info(\"Kick-off processing of recording for meeting [id={} , name={}]\", m.getInternalId(), m.getName());\t\t\r\n  \t\t\r\n  \t\tMap<String, Object> logData = new HashMap<String, Object>();\r\n  \t\tlogData.put(\"meetingId\", m.getInternalId());\r\n  \t\tlogData.put(\"externalMeetingId\", m.getExternalId());\r\n  \t\tlogData.put(\"name\", m.getName());\r\n  \t\tlogData.put(\"event\", \"kick_off_ingest_and_processing\");\r\n  \t\tlogData.put(\"description\", \"Start processing of recording.\");\r\n  \t\t\r\n  \t\tGson gson = new Gson();\r\n      String logStr =  gson.toJson(logData);\r\n  \t\t\r\n  \t\tlog.info(\"Initiate recording processing: data={}\", logStr);\r\n  \t\t\r\n  \t\tprocessRecording(m.getInternalId());\r\n  \t}\t\t \t\t\r\n\t}","commit_id":"9599d65ad1430fb1b579f4b5cb40e69f87db82dc","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"private void meetingStarted(MeetingStarted message) {\r\n\t\tlog.debug(\"Meeting [{}] has started.\", message.meetingId);\r\n\t\tMeeting m = getMeeting(message.meetingId);\r\n\t\tif (m != null) {\r\n\t\t\tif (m.getStartTime() == 0) {\r\n\t\t\t\tlong now = System.currentTimeMillis();\r\n\t\t\t\tlog.info(\"Meeting [{}] has started on [{}]\", message.meetingId, now);\r\n\t\t\t\tm.setStartTime(now);\r\n\t\t\t} else {\r\n\t\t\t\tlog.debug(\"The meeting [{}] has been started again...\", message.meetingId);\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlog.warn(\"The meeting [{}] doesn't exist\", message.meetingId);\r\n\t}","id":46109,"modified_method":"private void meetingStarted(MeetingStarted message) {\r\n\t\tlog.debug(\"Meeting [{}] has started.\", message.meetingId);\r\n\t\tMeeting m = getMeeting(message.meetingId);\r\n\t\tif (m != null) {\r\n\t\t\tif (m.getStartTime() == 0) {\r\n\t\t\t\tlong now = System.currentTimeMillis();\r\n\t\t\t\tlog.info(\"Meeting [{}] has started on [{}]\", message.meetingId, now);\r\n\t\t\t\tm.setStartTime(now);\r\n\t\t\t\t\r\n\t\t\t\tMap<String, Object> logData = new HashMap<String, Object>();\r\n\t\t\t\tlogData.put(\"meetingId\", m.getInternalId());\r\n\t\t\t\tlogData.put(\"externalMeetingId\", m.getExternalId());\r\n\t\t\t\tlogData.put(\"name\", m.getName());\r\n\t\t\t\tlogData.put(\"duration\", m.getDuration());\r\n\t\t\t\tlogData.put(\"record\", m.isRecord());\r\n\t\t\t\tlogData.put(\"event\", \"meeting_started\");\r\n\t\t\t\tlogData.put(\"description\", \"Meeting has started.\");\r\n\t\t\t\t\r\n\t\t\t\tGson gson = new Gson();\r\n\t\t    String logStr =  gson.toJson(logData);\r\n\t\t\t\t\r\n\t\t\t\tlog.info(\"Meeting started: data={}\", logStr);\r\n\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\tlog.debug(\"The meeting [{}] has been started again...\", message.meetingId);\r\n\t\t\t\t\r\n\t\t\t\tMap<String, Object> logData = new HashMap<String, Object>();\r\n\t\t\t\tlogData.put(\"meetingId\", m.getInternalId());\r\n\t\t\t\tlogData.put(\"externalMeetingId\", m.getExternalId());\r\n\t\t\t\tlogData.put(\"name\", m.getName());\r\n\t\t\t\tlogData.put(\"duration\", m.getDuration());\r\n\t\t\t\tlogData.put(\"record\", m.isRecord());\r\n\t\t\t\tlogData.put(\"event\", \"meeting_restarted\");\r\n\t\t\t\tlogData.put(\"description\", \"Meeting has restarted.\");\r\n\t\t\t\t\r\n\t\t\t\tGson gson = new Gson();\r\n\t\t    String logStr =  gson.toJson(logData);\r\n\t\t\t\t\r\n\t\t\t\tlog.info(\"Meeting restarted: data={}\", logStr);\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlog.warn(\"The meeting [{}] doesn't exist\", message.meetingId);\r\n\t}","commit_id":"9599d65ad1430fb1b579f4b5cb40e69f87db82dc","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"private void handleCreateMeeting(Meeting m) {\r\n\t\tlog.info(\"Storing Meeting with internalId=[\" + m.getInternalId() + \"], externalId=[\" + m.getExternalId() + \"], name=[\" + m.getName() + \"], duration=[\" + m.getDuration() + \"], record=[\" + m.isRecord() + \"]\");\r\n\t\tmeetings.put(m.getInternalId(), m);\r\n\t\tif (m.isRecord()) {\r\n\t\t\tMap<String,String> metadata = new LinkedHashMap<String,String>();\r\n\t\t\tmetadata.putAll(m.getMetadata());\r\n\t\t\t//TODO: Need a better way to store these values for recordings\r\n\t\t\tmetadata.put(\"meetingId\", m.getExternalId());\r\n\t\t\tmetadata.put(\"meetingName\", m.getName());\r\n\t\t\t\r\n\t\t\tmessagingService.recordMeetingInfo(m.getInternalId(), metadata);\r\n\t\t}\r\n\t\t\r\n\t\tmessagingService.createMeeting(m.getInternalId(), m.getName(), m.isRecord(), \r\n\t\t\t\t m.getTelVoice(), m.getDuration(), m.getAutoStartRecording(), m.getAllowStartStopRecording());\t\t\t\r\n\t}","id":46110,"modified_method":"private void handleCreateMeeting(Meeting m) {\r\n\t\tlog.info(\"Storing Meeting with internalId=[\" + m.getInternalId() + \"], externalId=[\" \r\n\t            + m.getExternalId() + \"], name=[\" + m.getName() + \"], duration=[\" \r\n\t\t\t\t      + m.getDuration() + \"], record=[\" + m.isRecord() + \"]\");\r\n\r\n\t\tmeetings.put(m.getInternalId(), m);\r\n\t\tif (m.isRecord()) {\r\n\t\t\tMap<String,String> metadata = new LinkedHashMap<String,String>();\r\n\t\t\tmetadata.putAll(m.getMetadata());\r\n\t\t\t//TODO: Need a better way to store these values for recordings\r\n\t\t\tmetadata.put(\"meetingId\", m.getExternalId());\r\n\t\t\tmetadata.put(\"meetingName\", m.getName());\r\n\t\t\t\r\n\t\t\tmessagingService.recordMeetingInfo(m.getInternalId(), metadata);\r\n\t\t}\r\n\r\n\t\tMap<String, Object> logData = new HashMap<String, Object>();\r\n\t\tlogData.put(\"meetingId\", m.getInternalId());\r\n\t\tlogData.put(\"externalMeetingId\", m.getExternalId());\r\n\t\tlogData.put(\"name\", m.getName());\r\n\t\tlogData.put(\"duration\", m.getDuration());\r\n\t\tlogData.put(\"record\", m.isRecord());\r\n\t\tlogData.put(\"event\", \"create_meeting\");\r\n\t\tlogData.put(\"description\", \"Create meeting.\");\r\n\t\t\r\n\t\tGson gson = new Gson();\r\n    String logStr =  gson.toJson(logData);\r\n\t\t\r\n\t\tlog.info(\"Create meeting: data={}\", logStr);\r\n\t\t\r\n\t\tmessagingService.createMeeting(m.getInternalId(), m.getName(), m.isRecord(), \r\n\t\t\t\t m.getTelVoice(), m.getDuration(), m.getAutoStartRecording(), m.getAllowStartStopRecording());\t\t\t\r\n\t}","commit_id":"9599d65ad1430fb1b579f4b5cb40e69f87db82dc","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"/**\n     * CallListener implementation for call endings\n     * @param event CallEvent\n     */\n    public void callEnded(CallEvent event)\n    {\n        Date endTime = new Date();\n\n        CallRecordImpl callRecord = findCallRecord(event.getSourceCall());\n\n        // no such call\n        if (callRecord == null)\n            return;\n\n        callRecord.setEndTime(endTime);\n\n        writeCall(callRecord, null, null);\n\n        currentCallRecords.remove(callRecord);\n    }","id":46111,"modified_method":"/**\n     * CallListener implementation for call endings\n     * @param event CallEvent\n     */\n    public void callEnded(CallEvent event)\n    {\n        CallRecordImpl callRecord = findCallRecord(event.getSourceCall());\n\n        // no such call\n        if (callRecord == null)\n            return;\n\n        callRecord.setEndTime(new Date());\n\n        writeCall(callRecord, null, null);\n\n        currentCallRecords.remove(callRecord);\n    }","commit_id":"1def5b563621176939c05c0e32e9f162d087c050","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Adding a record for removing participant from call\n     * @param callParticipant CallParticipant\n     * @param srcCall Call\n     */\n    private void handleParticipantRemoved(CallParticipant callParticipant,\n        Call srcCall)\n    {\n        CallRecord callRecord = findCallRecord(srcCall);\n        String pAddress = callParticipant.getAddress();\n\n        CallParticipantRecordImpl cpRecord =\n            (CallParticipantRecordImpl)callRecord.findParticipantRecord(pAddress);\n\n        // no such participant\n        if(cpRecord == null)\n            return;\n\n        if(!callParticipant.getState().equals(CallParticipantState.DISCONNECTED))\n            cpRecord.setState(callParticipant.getState());\n        cpRecord.setEndTime(new Date());\n    }","id":46112,"modified_method":"/**\n     * Adding a record for removing participant from call\n     * @param callParticipant CallParticipant\n     * @param srcCall Call\n     */\n    private void handleParticipantRemoved(CallParticipant callParticipant,\n        Call srcCall)\n    {\n        CallRecord callRecord = findCallRecord(srcCall);\n        String pAddress = callParticipant.getAddress();\n\n        CallParticipantRecordImpl cpRecord =\n            (CallParticipantRecordImpl)callRecord.findParticipantRecord(pAddress);\n\n        // no such participant\n        if(cpRecord == null)\n            return;\n\n        if(!callParticipant.getState().equals(CallParticipantState.DISCONNECTED))\n            cpRecord.setState(callParticipant.getState());\n\n        if(cpRecord.getState().equals(CallParticipantState.CONNECTED))\n        {\n            cpRecord.setEndTime(new Date());\n        }\n    }","commit_id":"1def5b563621176939c05c0e32e9f162d087c050","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Adding a record for joining participant\n     * @param callParticipant CallParticipant\n     */\n    private void handleParticipantAdded(CallParticipant callParticipant)\n    {\n        CallRecord callRecord = findCallRecord(callParticipant.getCall());\n\n        // no such call\n        if(callRecord == null)\n            return;\n\n        callParticipant.addCallParticipantListener(new CallParticipantListener()\n        {\n            public void participantStateChanged(CallParticipantChangeEvent evt)\n            {\n                if(evt.getNewValue().equals(CallParticipantState.DISCONNECTED))\n                    return;\n                else\n                {\n                    CallParticipantRecordImpl participantRecord =\n                        findParticipantRecord(evt.getSourceCallParticipant());\n\n                    if(participantRecord == null)\n                        return;\n\n                    participantRecord.\n                        setState((CallParticipantState)evt.getNewValue());\n\n                    //Disconnected / Busy\n                    //Disconnected / Connecting - fail\n                    //Disconnected / Connected\n                }\n            }\n\n            public void participantDisplayNameChanged(\n                CallParticipantChangeEvent evt){}\n            public void participantAddressChanged(\n                CallParticipantChangeEvent evt){}\n            public void participantImageChanged(\n                CallParticipantChangeEvent evt){}\n\n            public void participantTransportAddressChanged(\n                CallParticipantChangeEvent evt){}\n        });\n\n        CallParticipantRecordImpl newRec = new CallParticipantRecordImpl(\n            callParticipant.getAddress(),\n            new Date(),\n            null);\n\n        callRecord.getParticipantRecords().add(newRec);\n    }","id":46113,"modified_method":"/**\n     * Adding a record for joining participant\n     * @param callParticipant CallParticipant\n     */\n    private void handleParticipantAdded(CallParticipant callParticipant)\n    {\n        CallRecord callRecord = findCallRecord(callParticipant.getCall());\n\n        // no such call\n        if(callRecord == null)\n            return;\n\n        callParticipant.addCallParticipantListener(new CallParticipantListener()\n        {\n            public void participantStateChanged(CallParticipantChangeEvent evt)\n            {\n                if(evt.getNewValue().equals(CallParticipantState.DISCONNECTED))\n                    return;\n                else\n                {\n                    CallParticipantRecordImpl participantRecord =\n                        findParticipantRecord(evt.getSourceCallParticipant());\n\n                    if(participantRecord == null)\n                        return;\n\n                    if(evt.getNewValue().equals(CallParticipantState.CONNECTED))\n                        participantRecord.setStartTime(new Date());\n\n                    participantRecord.\n                        setState((CallParticipantState)evt.getNewValue());\n\n                    //Disconnected / Busy\n                    //Disconnected / Connecting - fail\n                    //Disconnected / Connected\n                }\n            }\n\n            public void participantDisplayNameChanged(\n                CallParticipantChangeEvent evt){}\n            public void participantAddressChanged(\n                CallParticipantChangeEvent evt){}\n            public void participantImageChanged(\n                CallParticipantChangeEvent evt){}\n\n            public void participantTransportAddressChanged(\n                CallParticipantChangeEvent evt){}\n        });\n\n        Date startDate = new Date();\n        CallParticipantRecordImpl newRec = new CallParticipantRecordImpl(\n            callParticipant.getAddress(),\n            startDate,\n            startDate);\n\n        callRecord.getParticipantRecords().add(newRec);\n    }","commit_id":"1def5b563621176939c05c0e32e9f162d087c050","url":"https://github.com/jitsi/jitsi"},{"original_method":"public void checkRecordCompleteness()\n    {\n        Vector participantAddresses = new Vector();\n        participantAddresses.add(\"some_address\");\n        participantAddresses.add(\"some_new_address\");\n\n        try\n        {\n            Call newCall =\n                mockBTelphonyOpSet.placeCall((String)participantAddresses.get(0));\n\n            Vector v = new Vector();\n\n            Iterator iter = newCall.getCallParticipants();\n            while (iter.hasNext())\n            {\n                CallParticipant item = (CallParticipant) iter.next();\n                v.add(item);\n            }\n\n            waitSeconds(2000);\n\n            CallParticipant newParticipant =\n                mockBTelphonyOpSet.addNewCallParticipant(newCall,\n                (String)participantAddresses.get(1));\n\n            mockBTelphonyOpSet.hangupCallParticipant(newParticipant);\n\n            waitSeconds(2000);\n\n            iter = v.iterator();\n            while (iter.hasNext())\n            {\n                CallParticipant item = (CallParticipant) iter.next();\n                mockBTelphonyOpSet.hangupCallParticipant(item);\n            }\n        }\n        catch (Exception ex1)\n        {\n            logger.error(\"Cannot place mock call\", ex1);\n            fail(\"Cannot place mock call\");\n        }\n\n\n        Collection lastCall = callHistoryService.findLast(1);\n\n        assertEquals(\"There must be 1 Call\", lastCall.size(), 1);\n\n        CallRecord callRecord = (CallRecord)lastCall.iterator().next();\n\n        assertEquals(\"There must be 2 participants in the call\",\n                     callRecord.getParticipantRecords().size(), 2);\n\n        CallParticipantRecord callP1 =\n            callRecord.findParticipantRecord((String)participantAddresses.get(0));\n        CallParticipantRecord callP2 =\n            callRecord.findParticipantRecord((String)participantAddresses.get(1));\n\n        assertTrue(\"Second participant added after first one\",\n                   callP2.getStartTime().after(callP1.getStartTime()));\n\n        assertTrue(\"Second participant hanguped before first one\",\n                   callP2.getEndTime().before(callP1.getEndTime()));\n    }","id":46114,"modified_method":"public void checkRecordCompleteness()\n    {\n        logger.info(\"---=== checkRecordCompleteness ===---\");\n        String[] partAddresses =\n            new String[]{\"some_address\", \"some_new_address\"};\n\n        try\n        {\n            Call newCall =\n                mockBTelphonyOpSet.placeCall(partAddresses[0]);\n\n            Vector v = new Vector();\n\n            Iterator iter = newCall.getCallParticipants();\n            while (iter.hasNext())\n            {\n                CallParticipant item = (CallParticipant) iter.next();\n                v.add(item);\n            }\n\n            waitSeconds(2000);\n\n            CallParticipant newParticipant =\n                mockBTelphonyOpSet.addNewCallParticipant(newCall,\n                partAddresses[1]);\n\n            mockBTelphonyOpSet.hangupCallParticipant(newParticipant);\n\n            waitSeconds(2000);\n\n            iter = v.iterator();\n            while (iter.hasNext())\n            {\n                CallParticipant item = (CallParticipant) iter.next();\n                mockBTelphonyOpSet.hangupCallParticipant(item);\n            }\n        }\n        catch (Exception ex1)\n        {\n            logger.error(\"Cannot place mock call\", ex1);\n            fail(\"Cannot place mock call\");\n        }\n\n\n        Collection lastCall = callHistoryService.findLast(1);\n\n        assertEquals(\"There must be 1 Call\", lastCall.size(), 1);\n\n        CallRecord callRecord = (CallRecord)lastCall.iterator().next();\n\n        assertEquals(\"There must be 2 participants in the call\",\n                     callRecord.getParticipantRecords().size(), 2);\n\n        CallParticipantRecord callP1 =\n            callRecord.findParticipantRecord(partAddresses[0]);\n        CallParticipantRecord callP2 =\n            callRecord.findParticipantRecord(partAddresses[1]);\n\n        assertTrue(\"Second participant added after first one\",\n                   callP2.getStartTime().after(callP1.getStartTime()));\n\n        assertTrue(\"Second participant hanguped before first one\",\n                   callP2.getEndTime().before(callP1.getEndTime()));\n    }","commit_id":"1def5b563621176939c05c0e32e9f162d087c050","url":"https://github.com/jitsi/jitsi"},{"original_method":"public static Test suite() throws Exception {\n    TestSuite suite = new TestSuite( \"Run regression tests\" );\n\n    // The testcases should be executed from easy to hard. It\n    // actually defines the debugging sequence if ever required.\n    // If some of the suites fail you should start checking/debugging\n    // the suites from the first that failed onwards.\n    //\n    // So adding testcases in the right order is important.\n    //\n\n    suite.addTestSuite( StringEvaluatorTest.class );\n    suite.addTestSuite( ParameterSimpleTransTest.class );\n    suite.addTestSuite( ValueDataUtilTest.class );\n    suite.addTest( new JUnit4TestAdapter( DatabaseTest.class ) );\n    suite.addTest( new JUnit4TestAdapter( ConnectionPoolUtilIntegrationTest.class ) );\n    suite.addTestSuite( HopTest.class );\n    suite.addTestSuite( InjectorTest.class );\n    suite.addTestSuite( RowGeneratorTest.class );\n    suite.addTestSuite( ConstantTest.class );\n    suite.addTestSuite( AppendTest.class );\n    suite.addTestSuite( DetectLastRowStepTest.class );\n    suite.addTestSuite( BlockingStepTest.class );\n    suite.addTest( new JUnit4TestAdapter( SortRowsTest.class ) );\n    suite.addTest( new JUnit4TestAdapter( FilterRowsTest.class ) );\n    suite.addTestSuite( ValueMapperTest.class );\n    suite.addTestSuite( NullIfTest.class );\n    suite.addTestSuite( RegexEvalTest.class );\n    suite.addTestSuite( AddSequenceTest.class );\n    suite.addTestSuite( TableInputTest.class );\n    suite.addTestSuite( TableOutputTest.class );\n    //        suite.addTestSuite(DatabaseLookupTest.class);    Now a JUnit 4 testcase\n    suite.addTestSuite( CombinationLookupTest.class );\n    suite.addTestSuite( JavaScriptStringTest.class );\n    suite.addTestSuite( JavaScriptSpecialTest.class );\n    suite.addTestSuite( GetXMLDataTest.class );\n    suite.addTestSuite( CsvInput1Test.class );\n    suite.addTestSuite( CsvInput2Test.class );\n    suite.addTestSuite( WebServiceTest.class );\n    suite.addTest( new JUnit4TestAdapter( GPLoadTest.class ) );\n    suite.addTest( new JUnit4TestAdapter( TransExecutorTest.class ) );\n\n    // Temporarily disable this test, it never worked on Windows or Unix so\n    // it doesn't make sense executing it for the moment.\n    // suite.addTestSuite( BlackBoxTests.class );\n\n    return suite;\n  }","id":46115,"modified_method":"public static Test suite() throws Exception {\n    TestSuite suite = new TestSuite( \"Run regression tests\" );\n\n    // The testcases should be executed from easy to hard. It\n    // actually defines the debugging sequence if ever required.\n    // If some of the suites fail you should start checking/debugging\n    // the suites from the first that failed onwards.\n    //\n    // So adding testcases in the right order is important.\n    //\n\n    suite.addTest( new JUnit4TestAdapter( StringEvaluatorTest.class ) );\n    suite.addTestSuite( ParameterSimpleTransTest.class );\n    suite.addTestSuite( ValueDataUtilTest.class );\n    suite.addTest( new JUnit4TestAdapter( DatabaseTest.class ) );\n    suite.addTest( new JUnit4TestAdapter( ConnectionPoolUtilIntegrationTest.class ) );\n    suite.addTestSuite( HopTest.class );\n    suite.addTestSuite( InjectorTest.class );\n    suite.addTestSuite( RowGeneratorTest.class );\n    suite.addTestSuite( ConstantTest.class );\n    suite.addTestSuite( AppendTest.class );\n    suite.addTestSuite( DetectLastRowStepTest.class );\n    suite.addTestSuite( BlockingStepTest.class );\n    suite.addTest( new JUnit4TestAdapter( SortRowsTest.class ) );\n    suite.addTest( new JUnit4TestAdapter( FilterRowsTest.class ) );\n    suite.addTestSuite( ValueMapperTest.class );\n    suite.addTestSuite( NullIfTest.class );\n    suite.addTestSuite( RegexEvalTest.class );\n    suite.addTestSuite( AddSequenceTest.class );\n    suite.addTestSuite( TableInputTest.class );\n    suite.addTestSuite( TableOutputTest.class );\n    //        suite.addTestSuite(DatabaseLookupTest.class);    Now a JUnit 4 testcase\n    suite.addTestSuite( CombinationLookupTest.class );\n    suite.addTestSuite( JavaScriptStringTest.class );\n    suite.addTestSuite( JavaScriptSpecialTest.class );\n    suite.addTestSuite( GetXMLDataTest.class );\n    suite.addTestSuite( CsvInput1Test.class );\n    suite.addTestSuite( CsvInput2Test.class );\n    suite.addTestSuite( WebServiceTest.class );\n    suite.addTest( new JUnit4TestAdapter( GPLoadTest.class ) );\n    suite.addTest( new JUnit4TestAdapter( TransExecutorTest.class ) );\n\n    // Temporarily disable this test, it never worked on Windows or Unix so\n    // it doesn't make sense executing it for the moment.\n    // suite.addTestSuite( BlackBoxTests.class );\n\n    return suite;\n  }","commit_id":"edc039b8f38c731c63d4c1605421ee95ca2154b1","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"protected static int determinePrecision( String numericFormat ) {\n    char decimalSymbol =\n      ( (DecimalFormat) NumberFormat.getInstance() ).getDecimalFormatSymbols().getDecimalSeparator();\n    Pattern p = Pattern.compile( \"[^0-9#]\" );\n    Matcher m = null;\n    if ( numericFormat != null ) {\n      int loc = numericFormat.lastIndexOf( decimalSymbol );\n      if ( loc >= 0 && loc < numericFormat.length() ) {\n        m = p.matcher( numericFormat.substring( loc + 1 ) );\n        int nonDigitLoc = numericFormat.length();\n        if ( m.find() ) {\n          nonDigitLoc = loc + 1 + m.start();\n        }\n        return numericFormat.substring( loc + 1, nonDigitLoc ).length();\n      } else {\n        return 0;\n      }\n    } else {\n      return 0;\n    }\n  }","id":46116,"modified_method":"protected static int determinePrecision( String numericFormat ) {\n    if ( numericFormat != null ) {\n      char decimalSymbol =\n        ( (DecimalFormat) NumberFormat.getInstance() ).getDecimalFormatSymbols().getDecimalSeparator();\n      int loc = numericFormat.lastIndexOf( decimalSymbol );\n      if ( loc >= 0 && loc < numericFormat.length() ) {\n        Matcher m = PRECISION_PATTERN.matcher( numericFormat.substring( loc + 1 ) );\n        int nonDigitLoc = numericFormat.length();\n        if ( m.find() ) {\n          nonDigitLoc = loc + 1 + m.start();\n        }\n        return numericFormat.substring( loc + 1, nonDigitLoc ).length();\n      } else {\n        return 0;\n      }\n    } else {\n      return 0;\n    }\n  }","commit_id":"edc039b8f38c731c63d4c1605421ee95ca2154b1","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private void challengeConversions( String value ) {\n    List<StringEvaluationResult> all = new ArrayList<StringEvaluationResult>( evaluationResults );\n    for ( StringEvaluationResult cmm : all ) {\n      if ( cmm.getConversionMeta().isBoolean() ) {\n        // Boolean conversion never fails.\n        // If it's a Y, N, true, false it's a boolean otherwise it ain't.\n        //\n        String string;\n        if ( tryTrimming ) {\n          string = Const.trim( value );\n        } else {\n          string = value;\n        }\n        if ( !( \"Y\".equalsIgnoreCase( string )\n          || \"N\".equalsIgnoreCase( string ) || \"TRUE\".equalsIgnoreCase( string ) || \"FALSE\"\n            .equalsIgnoreCase( string ) ) ) {\n          evaluationResults.remove( cmm );\n        }\n      } else {\n        try {\n          if ( cmm.getConversionMeta().isNumeric() ) {\n            boolean stop = false;\n            int nrDots = 0;\n            int nrCommas = 0;\n            int pos = 0;\n            for ( char c : value.toCharArray() ) {\n\n              boolean currencySymbolMatch = !String.valueOf( c ).equals( cmm.getConversionMeta().getCurrencySymbol() )\n                && c != '('\n                && c != ')';\n\n              if ( !Character.isDigit( c )\n                && c != '.'\n                && c != ','\n                && !Character.isSpaceChar( c )\n                && currencySymbolMatch\n                && ( pos > 0 && ( c == '+' || c == '-' ) ) // allow + & - at the 1st position\n              ) {\n                evaluationResults.remove( cmm );\n                stop = true;\n                break;\n              }\n\n              // If the value contains a decimal or grouping symbol or some sort, it's not an integer\n              //\n              if ( ( c == '.' && cmm.getConversionMeta().isInteger() )\n                || ( c == ',' && cmm.getConversionMeta().isInteger() ) ) {\n                evaluationResults.remove( cmm );\n                stop = true;\n                break;\n              }\n              if ( c == '.' ) {\n                nrDots++;\n              }\n              if ( c == ',' ) {\n                nrCommas++;\n              }\n              pos++;\n            }\n\n            if ( nrDots > 1 && nrCommas > 1 ) {\n              evaluationResults.remove( cmm );\n              stop = true;\n            }\n\n            if ( stop ) {\n              continue;\n            }\n\n          }\n          ValueMetaInterface meta = stringMeta.clone();\n          meta.setConversionMetadata( cmm.getConversionMeta() );\n          meta.setTrimType( cmm.getConversionMeta().getTrimType() );\n          Object object = meta.convertDataUsingConversionMetaData( value );\n\n          // Still here? Evaluate the data...\n          // Keep track of null values, min, max, etc.\n          //\n          if ( cmm.getConversionMeta().isNull( object ) ) {\n            cmm.incrementNrNull();\n          }\n\n          if ( cmm.getMin() == null || cmm.getConversionMeta().compare( cmm.getMin(), object ) > 0 ) {\n            cmm.setMin( object );\n          }\n          if ( cmm.getMax() == null || cmm.getConversionMeta().compare( cmm.getMax(), object ) < 0 ) {\n            cmm.setMax( object );\n          }\n\n        } catch ( KettleValueException e ) {\n          // This one doesn't work, remove it from the list!\n          //\n          evaluationResults.remove( cmm );\n        }\n      }\n    }\n  }","id":46117,"modified_method":"private void challengeConversions( String value ) {\n    List<StringEvaluationResult> all = new ArrayList<StringEvaluationResult>( evaluationResults );\n    ValueMetaInterface stringMetaClone = null;\n    for ( StringEvaluationResult cmm : all ) {\n      if ( cmm.getConversionMeta().isBoolean() ) {\n        // Boolean conversion never fails.\n        // If it's a Y, N, true, false it's a boolean otherwise it ain't.\n        //\n        String string;\n        if ( tryTrimming ) {\n          string = Const.trim( value );\n        } else {\n          string = value;\n        }\n        if ( !( \"Y\".equalsIgnoreCase( string )\n          || \"N\".equalsIgnoreCase( string ) || \"TRUE\".equalsIgnoreCase( string ) || \"FALSE\"\n          .equalsIgnoreCase( string ) ) ) {\n          evaluationResults.remove( cmm );\n        }\n      } else {\n        try {\n          if ( cmm.getConversionMeta().isNumeric() ) {\n            boolean stop = false;\n            int nrDots = 0;\n            int nrCommas = 0;\n            int pos = 0;\n            for ( char c : value.toCharArray() ) {\n\n              boolean currencySymbolMatch = !String.valueOf( c ).equals( cmm.getConversionMeta().getCurrencySymbol() )\n                && c != '('\n                && c != ')';\n\n              if ( !Character.isDigit( c )\n                && c != '.'\n                && c != ','\n                && !Character.isSpaceChar( c )\n                && currencySymbolMatch\n                && ( pos > 0 && ( c == '+' || c == '-' ) ) // allow + & - at the 1st position\n              ) {\n                evaluationResults.remove( cmm );\n                stop = true;\n                break;\n              }\n\n              // If the value contains a decimal or grouping symbol or some sort, it's not an integer\n              //\n              if ( ( c == '.' && cmm.getConversionMeta().isInteger() )\n                || ( c == ',' && cmm.getConversionMeta().isInteger() ) ) {\n                evaluationResults.remove( cmm );\n                stop = true;\n                break;\n              }\n              if ( c == '.' ) {\n                nrDots++;\n              }\n              if ( c == ',' ) {\n                nrCommas++;\n              }\n              pos++;\n            }\n\n            if ( nrDots > 1 && nrCommas > 1 ) {\n              evaluationResults.remove( cmm );\n              stop = true;\n            }\n\n            if ( stop ) {\n              continue;\n            }\n\n          }\n\n          if ( stringMetaClone == null ) {\n            // avoid cloning each time\n            stringMetaClone = stringMeta.clone();\n          }\n          stringMetaClone.setConversionMetadata( cmm.getConversionMeta() );\n          stringMetaClone.setTrimType( cmm.getConversionMeta().getTrimType() );\n          Object object = stringMetaClone.convertDataUsingConversionMetaData( value );\n\n          // Still here? Evaluate the data...\n          // Keep track of null values, min, max, etc.\n          //\n          if ( cmm.getConversionMeta().isNull( object ) ) {\n            cmm.incrementNrNull();\n          }\n\n          if ( cmm.getMin() == null || cmm.getConversionMeta().compare( cmm.getMin(), object ) > 0 ) {\n            cmm.setMin( object );\n          }\n          if ( cmm.getMax() == null || cmm.getConversionMeta().compare( cmm.getMax(), object ) < 0 ) {\n            cmm.setMax( object );\n          }\n\n        } catch ( KettleValueException e ) {\n          // This one doesn't work, remove it from the list!\n          //\n          evaluationResults.remove( cmm );\n        }\n      }\n    }\n  }","commit_id":"edc039b8f38c731c63d4c1605421ee95ca2154b1","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private void populateConversionMetaList() {\n\n    int[] trimTypes;\n    if ( tryTrimming ) {\n      trimTypes = new int[] { ValueMetaInterface.TRIM_TYPE_NONE, ValueMetaInterface.TRIM_TYPE_BOTH, };\n    } else {\n      trimTypes = new int[] { ValueMetaInterface.TRIM_TYPE_NONE, };\n    }\n\n    for ( int trimType : trimTypes ) {\n      for ( String format : getDateFormats() ) {\n        ValueMetaInterface conversionMeta = new ValueMeta( \"date\", ValueMetaInterface.TYPE_DATE );\n        conversionMeta.setConversionMask( format );\n        conversionMeta.setTrimType( trimType );\n        conversionMeta.setDateFormatLenient( false );\n        evaluationResults.add( new StringEvaluationResult( conversionMeta ) );\n      }\n\n      for ( String format : getNumberFormats() ) {\n\n        if ( format.equals( \"#\" ) || format.equals( \"0\" ) ) {\n          // skip the integer ones. we'll get those later\n          continue;\n        }\n\n        ValueMetaInterface conversionMeta = new ValueMeta( \"number-us\", ValueMetaInterface.TYPE_NUMBER );\n\n        int precision = determinePrecision( format );\n        conversionMeta.setConversionMask( format );\n        conversionMeta.setTrimType( trimType );\n        conversionMeta.setDecimalSymbol( \".\" );\n        conversionMeta.setGroupingSymbol( \",\" );\n        conversionMeta.setLength( 15 );\n        conversionMeta.setPrecision( precision );\n        evaluationResults.add( new StringEvaluationResult( conversionMeta ) );\n\n        conversionMeta = new ValueMeta( \"number-eu\", ValueMetaInterface.TYPE_NUMBER );\n        conversionMeta.setConversionMask( format );\n        conversionMeta.setTrimType( trimType );\n        conversionMeta.setDecimalSymbol( \",\" );\n        conversionMeta.setGroupingSymbol( \".\" );\n        conversionMeta.setLength( 15 );\n        conversionMeta.setPrecision( precision );\n        evaluationResults.add( new StringEvaluationResult( conversionMeta ) );\n      }\n\n      // Try the locale's Currency\n      DecimalFormat currencyFormat = ( (DecimalFormat) NumberFormat.getCurrencyInstance() );\n\n      ValueMetaInterface conversionMeta = new ValueMeta( \"number-currency\", ValueMetaInterface.TYPE_NUMBER );\n      // replace the universal currency symbol with the locale's currency symbol for user recognition\n      String currencyMask =\n        currencyFormat.toLocalizedPattern().replace( \"\\u00A4\", currencyFormat.getCurrency().getSymbol() );\n      conversionMeta.setConversionMask( currencyMask );\n      conversionMeta.setTrimType( trimType );\n      conversionMeta.setDecimalSymbol( String.valueOf( currencyFormat\n        .getDecimalFormatSymbols().getDecimalSeparator() ) );\n      conversionMeta.setGroupingSymbol( String.valueOf( currencyFormat\n        .getDecimalFormatSymbols().getGroupingSeparator() ) );\n      conversionMeta.setCurrencySymbol( currencyFormat.getCurrency().getSymbol() );\n      conversionMeta.setLength( 15 );\n      conversionMeta.setPrecision( currencyFormat.getCurrency().getDefaultFractionDigits() );\n\n      evaluationResults.add( new StringEvaluationResult( conversionMeta ) );\n\n      // Integer\n      //\n      conversionMeta = new ValueMeta( \"integer\", ValueMetaInterface.TYPE_INTEGER );\n      conversionMeta.setConversionMask( \"#\" );\n      conversionMeta.setLength( 15 );\n      evaluationResults.add( new StringEvaluationResult( conversionMeta ) );\n\n      conversionMeta = new ValueMeta( \"integer\", ValueMetaInterface.TYPE_INTEGER );\n      conversionMeta.setConversionMask( \" #\" );\n      conversionMeta.setLength( 15 );\n      evaluationResults.add( new StringEvaluationResult( conversionMeta ) );\n\n      // Add support for left zero padded integers\n      //\n      for ( int i = 1; i <= 15; i++ ) {\n\n        String mask = \" \";\n        for ( int x = 0; x < i; x++ ) {\n          mask += \"0\";\n        }\n        mask += \";-\";\n        for ( int x = 0; x < i; x++ ) {\n          mask += \"0\";\n        }\n\n        conversionMeta = new ValueMeta( \"integer-zero-padded-\" + i, ValueMetaInterface.TYPE_INTEGER );\n        conversionMeta.setConversionMask( mask );\n        conversionMeta.setLength( i );\n        evaluationResults.add( new StringEvaluationResult( conversionMeta ) );\n      }\n\n      // Boolean\n      //\n      conversionMeta = new ValueMeta( \"boolean\", ValueMetaInterface.TYPE_BOOLEAN );\n      evaluationResults.add( new StringEvaluationResult( conversionMeta ) );\n    }\n  }","id":46118,"modified_method":"private void populateConversionMetaList() {\n\n    int[] trimTypes;\n    if ( tryTrimming ) {\n      trimTypes = new int[] { ValueMetaInterface.TRIM_TYPE_NONE, ValueMetaInterface.TRIM_TYPE_BOTH, };\n    } else {\n      trimTypes = new int[] { ValueMetaInterface.TRIM_TYPE_NONE, };\n    }\n\n    for ( int trimType : trimTypes ) {\n      for ( String format : getDateFormats() ) {\n        ValueMetaInterface conversionMeta = new ValueMeta( \"date\", ValueMetaInterface.TYPE_DATE );\n        conversionMeta.setConversionMask( format );\n        conversionMeta.setTrimType( trimType );\n        conversionMeta.setDateFormatLenient( false );\n        evaluationResults.add( new StringEvaluationResult( conversionMeta ) );\n      }\n\n      EvalResultBuilder numberUsBuilder =\n        new EvalResultBuilder( \"number-us\", ValueMetaInterface.TYPE_NUMBER, 15, trimType, \".\", \",\" );\n      EvalResultBuilder numberEuBuilder =\n        new EvalResultBuilder( \"number-eu\", ValueMetaInterface.TYPE_NUMBER, 15, trimType, \",\", \".\" );\n\n      for ( String format : getNumberFormats() ) {\n\n        if ( format.equals( \"#\" ) || format.equals( \"0\" ) ) {\n          // skip the integer ones. we'll get those later\n          continue;\n        }\n\n        int precision = determinePrecision( format );\n        evaluationResults.add( numberUsBuilder.format( format, precision ).build() );\n        evaluationResults.add( numberEuBuilder.format( format, precision ).build() );\n      }\n\n      // Try the locale's Currency\n      DecimalFormat currencyFormat = ( (DecimalFormat) NumberFormat.getCurrencyInstance() );\n\n      ValueMetaInterface conversionMeta = new ValueMeta( \"number-currency\", ValueMetaInterface.TYPE_NUMBER );\n      // replace the universal currency symbol with the locale's currency symbol for user recognition\n      String currencyMask =\n        currencyFormat.toLocalizedPattern().replace( \"\\u00A4\", currencyFormat.getCurrency().getSymbol() );\n      conversionMeta.setConversionMask( currencyMask );\n      conversionMeta.setTrimType( trimType );\n      conversionMeta.setDecimalSymbol( String.valueOf( currencyFormat\n        .getDecimalFormatSymbols().getDecimalSeparator() ) );\n      conversionMeta.setGroupingSymbol( String.valueOf( currencyFormat\n        .getDecimalFormatSymbols().getGroupingSeparator() ) );\n      conversionMeta.setCurrencySymbol( currencyFormat.getCurrency().getSymbol() );\n      conversionMeta.setLength( 15 );\n      int currencyPrecision = currencyFormat.getCurrency().getDefaultFractionDigits();\n      conversionMeta.setPrecision( currencyPrecision );\n\n      evaluationResults.add( new StringEvaluationResult( conversionMeta ) );\n\n      // add same mask w/o currency symbol\n      String currencyMaskAsNumeric =\n        currencyMask.replaceAll( Pattern.quote( currencyFormat.getCurrency().getSymbol() ), \"\" );\n      evaluationResults.add( numberUsBuilder.format( currencyMaskAsNumeric, currencyPrecision ).build() );\n      evaluationResults.add( numberEuBuilder.format( currencyMaskAsNumeric, currencyPrecision ).build() );\n\n      // Integer\n      //\n      conversionMeta = new ValueMeta( \"integer\", ValueMetaInterface.TYPE_INTEGER );\n      conversionMeta.setConversionMask( \"#\" );\n      conversionMeta.setLength( 15 );\n      evaluationResults.add( new StringEvaluationResult( conversionMeta ) );\n\n      conversionMeta = new ValueMeta( \"integer\", ValueMetaInterface.TYPE_INTEGER );\n      conversionMeta.setConversionMask( \" #\" );\n      conversionMeta.setLength( 15 );\n      evaluationResults.add( new StringEvaluationResult( conversionMeta ) );\n\n      // Add support for left zero padded integers\n      //\n      for ( int i = 1; i <= 15; i++ ) {\n\n        String mask = \" \";\n        for ( int x = 0; x < i; x++ ) {\n          mask += \"0\";\n        }\n        mask += \";-\";\n        for ( int x = 0; x < i; x++ ) {\n          mask += \"0\";\n        }\n\n        conversionMeta = new ValueMeta( \"integer-zero-padded-\" + i, ValueMetaInterface.TYPE_INTEGER );\n        conversionMeta.setConversionMask( mask );\n        conversionMeta.setLength( i );\n        evaluationResults.add( new StringEvaluationResult( conversionMeta ) );\n      }\n\n      // Boolean\n      //\n      conversionMeta = new ValueMeta( \"boolean\", ValueMetaInterface.TYPE_BOOLEAN );\n      evaluationResults.add( new StringEvaluationResult( conversionMeta ) );\n    }\n  }","commit_id":"edc039b8f38c731c63d4c1605421ee95ca2154b1","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void testSeries2() throws Exception {\n    StringEvaluator evaluator = new StringEvaluator( false );\n    for ( String string : series2 ) {\n      evaluator.evaluateString( string );\n    }\n\n    assertEquals( evaluator.getCount(), series2.length );\n    assertEquals( evaluator.getMaxLength(), 19 );\n    StringEvaluationResult result = evaluator.getStringEvaluationResults().get( 0 );\n\n    assertEquals( \"Not a date detected\", result.getConversionMeta().getType(), ValueMetaInterface.TYPE_DATE );\n    Date minDate = result.getConversionMeta().getDate( result.getMin() );\n    Date expectedMinDate = new SimpleDateFormat( \"yyyy/MM/dd HH:mm:ss\" ).parse( \"2009/12/31 12:34:56\" );\n    assertEquals( minDate.getTime(), expectedMinDate.getTime() );\n\n    int nrEmpty = result.getNrNull();\n    assertEquals( nrEmpty, 0 );\n    assertEquals( evaluator.getValues().size(), series2.length );\n  }","id":46119,"modified_method":"@Test\n  public void testSeries2() throws Exception {\n    String[] series2 = new String[] { \"2009/12/31 12:34:56\", \"2010/02/14 23:22:01\", };\n    StringEvaluator evaluator = new StringEvaluator( false );\n    for ( String string : series2 ) {\n      evaluator.evaluateString( string );\n    }\n\n    assertEquals( evaluator.getCount(), series2.length );\n    assertEquals( evaluator.getMaxLength(), 19 );\n    StringEvaluationResult result = evaluator.getStringEvaluationResults().get( 0 );\n\n    assertEquals( \"Not a date detected\", result.getConversionMeta().getType(), ValueMetaInterface.TYPE_DATE );\n    Date minDate = result.getConversionMeta().getDate( result.getMin() );\n    Date expectedMinDate = new SimpleDateFormat( \"yyyy/MM/dd HH:mm:ss\" ).parse( \"2009/12/31 12:34:56\" );\n    assertEquals( minDate.getTime(), expectedMinDate.getTime() );\n\n    int nrEmpty = result.getNrNull();\n    assertEquals( nrEmpty, 0 );\n    assertEquals( evaluator.getValues().size(), series2.length );\n  }","commit_id":"edc039b8f38c731c63d4c1605421ee95ca2154b1","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void testCurrencyData_UK() {\n    Locale orig = Locale.getDefault();\n    Locale.setDefault( Locale.UK );\n    StringEvaluator eval = new StringEvaluator( true );\n\n    DecimalFormat currencyFormat = ( (DecimalFormat) NumberFormat.getCurrencyInstance() );\n    try {\n      currencyFormat.parse( \"-£400.059\" );\n    } catch ( ParseException e ) {\n      fail();\n    }\n    String[] values = new String[] { \"£400.019\", \"£3,400.029\", \"£23.00\", \"-£400.059\" };\n    for ( String value : values ) {\n      eval.evaluateString( value );\n    }\n    assertEquals( values.length, eval.getCount() );\n    StringEvaluationResult result = eval.getAdvicedResult();\n\n    Locale.setDefault( orig );\n\n    assertEquals( \"Not a number detected\", ValueMetaInterface.TYPE_NUMBER, result.getConversionMeta().getType() );\n    assertEquals( \"Precision not correct\", 2, result.getConversionMeta().getPrecision() );\n    assertEquals( \"Currency format mask is incorrect\", \"£#,##0.00\", result.getConversionMeta().getConversionMask() );\n  }","id":46120,"modified_method":"@Test\n  public void testCurrencyData_UK() {\n    Locale orig = Locale.getDefault();\n    try {\n      Locale.setDefault( Locale.UK );\n      StringEvaluator eval = new StringEvaluator( true );\n\n      DecimalFormat currencyFormat = ( (DecimalFormat) NumberFormat.getCurrencyInstance() );\n      try {\n        currencyFormat.parse( \"-£400.059\" );\n      } catch ( ParseException e ) {\n        fail();\n      }\n      String[] values = new String[] { \"£400.019\", \"£3,400.029\", \"£23.00\", \"-£400.059\" };\n      for ( String value : values ) {\n        eval.evaluateString( value );\n      }\n      assertEquals( values.length, eval.getCount() );\n      StringEvaluationResult result = eval.getAdvicedResult();\n      assertEquals( \"Not a number detected\", ValueMetaInterface.TYPE_NUMBER, result.getConversionMeta().getType() );\n      assertEquals( \"Precision not correct\", 2, result.getConversionMeta().getPrecision() );\n      assertEquals( \"Currency format mask is incorrect\", \"£#,##0.00\", result.getConversionMeta().getConversionMask() );\n    } finally {\n      Locale.setDefault( orig );\n    }\n  }","commit_id":"edc039b8f38c731c63d4c1605421ee95ca2154b1","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void testSeries1() throws Exception {\n    StringEvaluator evaluator = new StringEvaluator( false );\n    for ( String string : series1 ) {\n      evaluator.evaluateString( string );\n    }\n\n    assertEquals( evaluator.getCount(), series1.length );\n    assertEquals( evaluator.getMaxLength(), 5 );\n\n    // We expect to find nothing. This means that we have to revert to a String data type.\n    //\n    assertEquals( evaluator.getStringEvaluationResults().size(), 0 );\n  }","id":46121,"modified_method":"@Test\n  public void testSeries1() throws Exception {\n    String[] series1 = new String[] { \"Foo\", \"Bar\", \"One\", \"\", \"Two\", \"Three\", };\n    StringEvaluator evaluator = new StringEvaluator( false );\n    for ( String string : series1 ) {\n      evaluator.evaluateString( string );\n    }\n\n    assertEquals( evaluator.getCount(), series1.length );\n    assertEquals( evaluator.getMaxLength(), 5 );\n\n    // We expect to find nothing. This means that we have to revert to a String data type.\n    //\n    assertEquals( evaluator.getStringEvaluationResults().size(), 0 );\n  }","commit_id":"edc039b8f38c731c63d4c1605421ee95ca2154b1","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void testCustomNumberFormats() {\n    loadValueMetaPlugins();\n\n    // Now get to the real testing\n    Locale orig = Locale.getDefault();\n    Locale.setDefault( Locale.US );\n\n    StringEvaluator eval = new StringEvaluator();\n    String[] goodValues = new String[] { \"200.00\", \"999.99\", \"4,309.88\" };\n    String[] badValues = new String[] { \"9 00\", \"$30.00\", \"3.999,00\" };\n\n    for ( String value : goodValues ) {\n      eval.evaluateString( value );\n    }\n    assertEquals( goodValues.length, eval.getCount() );\n    StringEvaluationResult result = eval.getAdvicedResult();\n    assertEquals( \"Not a number detected\", result.getConversionMeta().getTypeDesc(), \"Number\" );\n\n    eval = new StringEvaluator();\n    for ( String value : badValues ) {\n      eval.evaluateString( value );\n    }\n    assertEquals( badValues.length, eval.getCount() );\n    result = eval.getAdvicedResult();\n    assertFalse( \"Number detected\", result.getConversionMeta().getType() == ValueMetaInterface.TYPE_NUMBER );\n\n    Locale.setDefault( orig );\n  }","id":46122,"modified_method":"@Test\n  public void testCustomNumberFormats() {\n    loadValueMetaPlugins();\n\n    // Now get to the real testing\n    Locale orig = Locale.getDefault();\n    try {\n      Locale.setDefault( Locale.US );\n\n      StringEvaluator eval = new StringEvaluator();\n      String[] goodValues = new String[] { \"200.00\", \"999.99\", \"4,309.88\" };\n      String[] badValues = new String[] { \"9 00\", \"$30.00\", \"3.999,00\" };\n\n      for ( String value : goodValues ) {\n        eval.evaluateString( value );\n      }\n      assertEquals( goodValues.length, eval.getCount() );\n      StringEvaluationResult result = eval.getAdvicedResult();\n      assertEquals( \"Not a number detected\", result.getConversionMeta().getTypeDesc(), \"Number\" );\n\n      eval = new StringEvaluator();\n      for ( String value : badValues ) {\n        eval.evaluateString( value );\n      }\n      assertEquals( badValues.length, eval.getCount() );\n      result = eval.getAdvicedResult();\n      assertFalse( \"Number detected\", result.getConversionMeta().getType() == ValueMetaInterface.TYPE_NUMBER );\n    } finally {\n      Locale.setDefault( orig );\n    }\n  }","commit_id":"edc039b8f38c731c63d4c1605421ee95ca2154b1","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void testCustomDateFormats() {\n    List<String> dates = Arrays.asList( \"MM/dd/yyyy\" );\n    List<String> numbers = Arrays.asList( \"#,##0.###\" );\n\n    StringEvaluator eval = new StringEvaluator( true, numbers, dates );\n    String[] goodDateValues = new String[] { \"01/01/2000\", \"02/02/2000\", \"03/03/2000\" };\n    String[] badDateValues = new String[] { \"01-01-2000\", \"02-02-2000\", \"03-03-2000\" };\n\n    for ( String value : goodDateValues ) {\n      eval.evaluateString( value );\n    }\n    assertEquals( goodDateValues.length, eval.getCount() );\n    StringEvaluationResult result = eval.getAdvicedResult();\n    assertEquals( \"Not a date detected\", result.getConversionMeta().getType(), ValueMetaInterface.TYPE_DATE );\n\n    eval = new StringEvaluator( true, numbers, dates );\n    for ( String value : badDateValues ) {\n      eval.evaluateString( value );\n    }\n    assertEquals( badDateValues.length, eval.getCount() );\n    result = eval.getAdvicedResult();\n    assertFalse( \"Date detected\", result.getConversionMeta().getType() == ValueMetaInterface.TYPE_DATE );\n  }","id":46123,"modified_method":"@Test\n  public void testCustomDateFormats() {\n    List<String> dates = Collections.singletonList( \"MM/dd/yyyy\" );\n    List<String> numbers = Collections.singletonList( \"#,##0.###\" );\n\n    StringEvaluator eval = new StringEvaluator( true, numbers, dates );\n    String[] goodDateValues = new String[] { \"01/01/2000\", \"02/02/2000\", \"03/03/2000\" };\n    String[] badDateValues = new String[] { \"01-01-2000\", \"02-02-2000\", \"03-03-2000\" };\n\n    for ( String value : goodDateValues ) {\n      eval.evaluateString( value );\n    }\n    assertEquals( goodDateValues.length, eval.getCount() );\n    StringEvaluationResult result = eval.getAdvicedResult();\n    assertEquals( \"Not a date detected\", result.getConversionMeta().getType(), ValueMetaInterface.TYPE_DATE );\n\n    eval = new StringEvaluator( true, numbers, dates );\n    for ( String value : badDateValues ) {\n      eval.evaluateString( value );\n    }\n    assertEquals( badDateValues.length, eval.getCount() );\n    result = eval.getAdvicedResult();\n    assertFalse( \"Date detected\", result.getConversionMeta().getType() == ValueMetaInterface.TYPE_DATE );\n  }","commit_id":"edc039b8f38c731c63d4c1605421ee95ca2154b1","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void testSeries4() throws Exception {\n    StringEvaluator evaluator = new StringEvaluator( true );\n    for ( String string : series4 ) {\n      evaluator.evaluateString( string );\n    }\n\n    assertEquals( evaluator.getCount(), series4.length );\n    assertEquals( evaluator.getMaxLength(), 13 );\n    StringEvaluationResult result = evaluator.getStringEvaluationResults().get( 0 );\n    assertEquals( \"Not a number detected\", result.getConversionMeta().getType(), ValueMetaInterface.TYPE_NUMBER );\n\n    int nrEmpty = result.getNrNull();\n    assertEquals( nrEmpty, 1 );\n    assertEquals( evaluator.getValues().size(), series4.length );\n  }","id":46124,"modified_method":"@Test\n  public void testSeries4() throws Exception {\n    String[] series4 = new String[] {\n      \"01234,56     \", \"             \", \"98765,43     \", \"12394,26     \", \"01934,34     \", \"19245,23     \",\n      \"00045,67     \", };\n    StringEvaluator evaluator = new StringEvaluator( true );\n    for ( String string : series4 ) {\n      evaluator.evaluateString( string );\n    }\n\n    assertEquals( evaluator.getCount(), series4.length );\n    assertEquals( evaluator.getMaxLength(), 13 );\n    StringEvaluationResult result = evaluator.getStringEvaluationResults().get( 0 );\n    assertEquals( \"Not a number detected\", result.getConversionMeta().getType(), ValueMetaInterface.TYPE_NUMBER );\n\n    int nrEmpty = result.getNrNull();\n    assertEquals( nrEmpty, 1 );\n    assertEquals( evaluator.getValues().size(), series4.length );\n  }","commit_id":"edc039b8f38c731c63d4c1605421ee95ca2154b1","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void testSeries3() throws Exception {\n    StringEvaluator evaluator = new StringEvaluator( false );\n    for ( String string : series3 ) {\n      evaluator.evaluateString( string );\n    }\n\n    assertEquals( evaluator.getCount(), series3.length );\n    assertEquals( evaluator.getMaxLength(), 8 );\n    StringEvaluationResult result = evaluator.getStringEvaluationResults().get( 0 );\n    assertEquals( \"Not a number detected\", result.getConversionMeta().getType(), ValueMetaInterface.TYPE_NUMBER );\n\n    int nrEmpty = result.getNrNull();\n    assertEquals( nrEmpty, 1 );\n    assertEquals( evaluator.getValues().size(), series3.length );\n  }","id":46125,"modified_method":"@Test\n  public void testSeries3() throws Exception {\n    String[] series3 = new String[] { \"1234,56\", \"12394,26\", \"1934,34\", \"19245,23\", \"\" };\n    StringEvaluator evaluator = new StringEvaluator( false );\n    for ( String string : series3 ) {\n      evaluator.evaluateString( string );\n    }\n\n    assertEquals( evaluator.getCount(), series3.length );\n    assertEquals( evaluator.getMaxLength(), 8 );\n    StringEvaluationResult result = evaluator.getStringEvaluationResults().get( 0 );\n    assertEquals( \"Not a number detected\", result.getConversionMeta().getType(), ValueMetaInterface.TYPE_NUMBER );\n\n    int nrEmpty = result.getNrNull();\n    assertEquals( nrEmpty, 1 );\n    assertEquals( evaluator.getValues().size(), series3.length );\n  }","commit_id":"edc039b8f38c731c63d4c1605421ee95ca2154b1","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public StringEvaluationResult getAdvicedResult() {\n\t\tif (evaluationResults.isEmpty()) {\n\t\t\tValueMetaInterface adviced = new ValueMeta(\"adviced\", ValueMetaInterface.TYPE_STRING);\n\t\t\tadviced.setLength(maxLength);\n\t\t\tint nrNulls = 0;\n\t\t\tString min=null;\n\t\t\tString max=null;\n\t\t\tfor (String string : values) {\n\t\t\t  if(string != null) {\n    \t\t\tif (min==null || min.compareTo(string)>0) min=string;\n    \t\t\tif (max==null || max.compareTo(string)<0) max=string;\n\t\t\t  } else {\n\t\t\t    nrNulls++;\n\t\t\t  }\n\t\t\t}\n\t\t\t\n\t\t\tStringEvaluationResult result = new StringEvaluationResult(adviced);\n\t\t\tresult.setNrNull(nrNulls);\n\t\t\tresult.setMin(min);\n\t\t\tresult.setMax(max);\n\t\t\treturn result;\n\t\t\t\n\t\t} else {\n\t\t\t// If there are Numbers and Integers, pick the integers...\n\t\t\t//\n\t\t\tif (containsInteger() && containsNumber()) {\n\t\t\t\tfor (Iterator<StringEvaluationResult> iterator = evaluationResults.iterator(); iterator.hasNext();) {\n\t\t\t\t\tStringEvaluationResult result = iterator.next();\n\t\t\t\t\tif (result.getConversionMeta().isNumber()) {\n\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If there are Dates and Integers, pick the dates...\n\t\t\t//\n\t\t\tif (containsInteger() && containsDate()) {\n\t\t\t\tfor (Iterator<StringEvaluationResult> iterator = evaluationResults.iterator(); iterator.hasNext();) {\n\t\t\t\t\tStringEvaluationResult result = iterator.next();\n\t\t\t\t\tif (result.getConversionMeta().isInteger()) {\n\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// Select the one with the shortest format mask.\n\t\t\t//\n\t\t\tint minIndex=0;\n\t\t\tint minLength=Integer.MAX_VALUE;\n\t\t\tfor (int i=0;i<evaluationResults.size();i++) {\n\t\t\t\tStringEvaluationResult result = evaluationResults.get(i);\n\t\t\t\tValueMetaInterface conversionMeta = result.getConversionMeta();\n\t\t\t\tif (!Const.isEmpty(conversionMeta.getConversionMask()) && !conversionMeta.isBoolean()) {\n\t\t\t\t\tint maskLength = conversionMeta.getConversionMask().length();\n\t\t\t\t\tif (minLength>maskLength) {\n\t\t\t\t\t\tminLength=maskLength;\n\t\t\t\t\t\tminIndex=i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn evaluationResults.get(minIndex);\n\t\t}\n\t\t\n\t}","id":46126,"modified_method":"public StringEvaluationResult getAdvicedResult() {\n\t\tif (evaluationResults.isEmpty()) {\n\t\t\tValueMetaInterface adviced = new ValueMeta(\"adviced\", ValueMetaInterface.TYPE_STRING);\n\t\t\tadviced.setLength(maxLength);\n\t\t\tint nrNulls = 0;\n\t\t\tString min=null;\n\t\t\tString max=null;\n\t\t\tfor (String string : values) {\n\t\t\t  if(string != null) {\n    \t\t\tif (min==null || min.compareTo(string)>0) min=string;\n    \t\t\tif (max==null || max.compareTo(string)<0) max=string;\n\t\t\t  } else {\n\t\t\t    nrNulls++;\n\t\t\t  }\n\t\t\t}\n\t\t\t\n\t\t\tStringEvaluationResult result = new StringEvaluationResult(adviced);\n\t\t\tresult.setNrNull(nrNulls);\n\t\t\tresult.setMin(min);\n\t\t\tresult.setMax(max);\n\t\t\treturn result;\n\t\t\t\n\t\t} else {\n      // If there are Numbers and Integers, pick the integers...\n\t\t\t//\n\t\t\tif (containsInteger() && containsNumber()) {\n        for (Iterator<StringEvaluationResult> iterator = evaluationResults.iterator(); iterator.hasNext();) {\n\t\t\t\t\tStringEvaluationResult result = iterator.next();\n\t\t\t\t\tif (maxPrecision == 0 && result.getConversionMeta().isNumber()) {\n\t\t\t\t\t\t// no precision, don't bother with a number\n            iterator.remove();\n\t\t\t\t\t} else if (maxPrecision > 0 && result.getConversionMeta().isInteger()){\n            // precision is needed, can't use integer\n            iterator.remove();\n          }\n\t\t\t\t}\n      }\n\t\t\t// If there are Dates and Integers, pick the dates...\n\t\t\t//\n\t\t\tif (containsInteger() && containsDate()) {\n\t\t\t\tfor (Iterator<StringEvaluationResult> iterator = evaluationResults.iterator(); iterator.hasNext();) {\n\t\t\t\t\tStringEvaluationResult result = iterator.next();\n\t\t\t\t\tif (result.getConversionMeta().isInteger()) {\n\t\t\t\t\t\titerator.remove();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n      Comparator<StringEvaluationResult> compare = null;\n      if (containsDate()) {\n        // want the longest format for dates\n        compare = new Comparator<StringEvaluationResult>() {\n          @Override\n          public int compare(StringEvaluationResult r1, StringEvaluationResult r2) {\n            Integer length1 = r1.getConversionMeta().getConversionMask() == null ? 0 : r1.getConversionMeta().getConversionMask().length();\n            Integer length2 = r2.getConversionMeta().getConversionMask() == null ? 0 : r2.getConversionMeta().getConversionMask().length();\n            return length2.compareTo(length1);\n          }\n        };\n      } else {\n        // want the shortest format mask for numerics & integers\n        compare = new Comparator<StringEvaluationResult>() {\n          @Override\n          public int compare(StringEvaluationResult r1, StringEvaluationResult r2) {\n            Integer length1 = r1.getConversionMeta().getConversionMask() == null ? 0 : r1.getConversionMeta().getConversionMask().length();\n            Integer length2 = r2.getConversionMeta().getConversionMask() == null ? 0 : r2.getConversionMeta().getConversionMask().length();\n            return length1.compareTo(length2);\n          }\n        };\n      }\n\n      Collections.sort(evaluationResults, compare);\n\n      StringEvaluationResult result = evaluationResults.get(0);\n      ValueMetaInterface conversionMeta = result.getConversionMeta();\n      if (conversionMeta.isNumber() && conversionMeta.getCurrencySymbol() == null) {\n        conversionMeta.setPrecision(maxPrecision);\n      }\n            \n\t\t\treturn result;\n\t\t}\n\t\t\n\t}","commit_id":"1ca99b8737e506587def12828cb78c45970dfd35","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public StringEvaluator(boolean tryTrimming) {\n\t\tthis.tryTrimming = tryTrimming;\n\t\t\n\t\tvalues = new HashSet<String>();\n\t\tevaluationResults = new ArrayList<StringEvaluationResult>();\n\t\tcount=0;\n\t\t\n\t\tstringMeta = new ValueMeta(\"string\", ValueMetaInterface.TYPE_STRING);\n\t\tpopulateConversionMetaList();\n\t}","id":46127,"modified_method":"public StringEvaluator(boolean tryTrimming) {\n    this(tryTrimming, DEFAULT_NUMBER_FORMATS, Arrays.asList(Const.getDateFormats()));\n\t}","commit_id":"1ca99b8737e506587def12828cb78c45970dfd35","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private void populateConversionMetaList() {\n\t\t\n\t\tint[] trimTypes;\n\t\tif (tryTrimming) {\n\t\t\ttrimTypes=new int[] { ValueMetaInterface.TRIM_TYPE_NONE, ValueMetaInterface.TRIM_TYPE_BOTH, };  \n\t\t} else {\n\t\t\ttrimTypes=new int[] { ValueMetaInterface.TRIM_TYPE_NONE, };\n\t\t}\n\t\t\n\t\tfor (int trimType : trimTypes) {\n\t\t\tfor (String format : Const.getDateFormats()) {\n\t\t\t\tValueMetaInterface conversionMeta = new ValueMeta(\"date\", ValueMetaInterface.TYPE_DATE);\n\t\t\t\tconversionMeta.setConversionMask(format);\n\t\t\t\tconversionMeta.setTrimType(trimType);\n\t\t\t\tconversionMeta.setDateFormatLenient(false);\n\t\t\t\tevaluationResults.add(new StringEvaluationResult(conversionMeta));\n\t\t\t}\n\t\n\t\t\tfinal String[] numberFormats = new String[] {\n\t\t\t\t\"#,###,###.#\",\n\t\t\t\t\"#.#\",\n\t\t\t\t\" #.#\",\n\t\t\t\t\"#\",\n\t\t\t\t\"#.0\",\n\t\t\t\t\"#.00\",\n\t\t\t\t\"#.000\",\n\t\t\t\t\"#.0000\",\n\t\t\t\t\"#.00000\",\n\t\t\t\t\"#.000000\",\n\t\t\t\t\" #.0#\",\n\t\t\t};\n\t\t\t\n\t\t\tfor (String format : numberFormats) {\n\t\t\t\tValueMetaInterface conversionMeta = new ValueMeta(\"number-us\", ValueMetaInterface.TYPE_NUMBER);\n\t\t\t\tconversionMeta.setConversionMask(format);\n\t\t\t\tconversionMeta.setTrimType(trimType);\n\t\t\t\tconversionMeta.setDecimalSymbol(\".\");\n\t\t\t\tconversionMeta.setGroupingSymbol(\",\");\n\t\t\t\tconversionMeta.setLength(-1);\n\t\t\t\tconversionMeta.setPrecision(-1);\n\t\t\t\tevaluationResults.add(new StringEvaluationResult(conversionMeta));\n\t\t\t\t\n\t\t\t\tconversionMeta = new ValueMeta(\"number-eu\", ValueMetaInterface.TYPE_NUMBER);\n\t\t\t\tconversionMeta.setConversionMask(format);\n\t\t\t\tconversionMeta.setTrimType(trimType);\n\t\t\t\tconversionMeta.setDecimalSymbol(\",\");\n\t\t\t\tconversionMeta.setGroupingSymbol(\".\");\n\t\t\t\tconversionMeta.setLength(-1);\n\t\t\t\tconversionMeta.setPrecision(-1);\n\t\t\t\tevaluationResults.add(new StringEvaluationResult(conversionMeta));\n\t\t\t}\n\t\t\t\t\n\t\t\t// Integer\n\t\t\t//\n\t\t\tValueMetaInterface conversionMeta = new ValueMeta(\"integer\", ValueMetaInterface.TYPE_INTEGER);\n\t\t\tconversionMeta.setConversionMask(\"#\");\n\t\t\tconversionMeta.setLength(15);\n\t\t\tevaluationResults.add(new StringEvaluationResult(conversionMeta));\n\n\t\t\tconversionMeta = new ValueMeta(\"integer\", ValueMetaInterface.TYPE_INTEGER);\n\t\t\tconversionMeta.setConversionMask(\" #\");\n\t\t\tconversionMeta.setLength(15);\n\t\t\tevaluationResults.add(new StringEvaluationResult(conversionMeta));\n\t\t\t\n\t\t\t// Add support for left zero padded integers\n\t\t\t//\n\t\t\tfor (int i=1;i<=15;i++) {\n\n\t\t\t  String mask = \" \";\n\t\t\t  for (int x=0;x<i;x++) mask+=\"0\";\n\t\t\t  mask+=\";-\";\n              for (int x=0;x<i;x++) mask+=\"0\";\n\t\t\t  \n\t          conversionMeta = new ValueMeta(\"integer-zero-padded-\"+i, ValueMetaInterface.TYPE_INTEGER);\n\t          conversionMeta.setConversionMask(mask);\n\t          conversionMeta.setLength(i);\n\t          evaluationResults.add(new StringEvaluationResult(conversionMeta));\n\t\t\t}\n\n\n\t\t\t// Boolean\n\t\t\t//\n\t\t\tconversionMeta = new ValueMeta(\"boolean\", ValueMetaInterface.TYPE_BOOLEAN);\n\t\t\tevaluationResults.add(new StringEvaluationResult(conversionMeta));\t\t\n\t\t}\n\t}","id":46128,"modified_method":"private void populateConversionMetaList() {\n\t\t\n\t\tint[] trimTypes;\n\t\tif (tryTrimming) {\n\t\t\ttrimTypes=new int[] { ValueMetaInterface.TRIM_TYPE_NONE, ValueMetaInterface.TRIM_TYPE_BOTH, };  \n\t\t} else {\n\t\t\ttrimTypes=new int[] { ValueMetaInterface.TRIM_TYPE_NONE, };\n\t\t}\n\t\t\n\t\tfor (int trimType : trimTypes) {\n\t\t\tfor (String format : getDateFormats()) {\n\t\t\t\tValueMetaInterface conversionMeta = new ValueMeta(\"date\", ValueMetaInterface.TYPE_DATE);\n\t\t\t\tconversionMeta.setConversionMask(format);\n\t\t\t\tconversionMeta.setTrimType(trimType);\n\t\t\t\tconversionMeta.setDateFormatLenient(false);\n\t\t\t\tevaluationResults.add(new StringEvaluationResult(conversionMeta));\n\t\t\t}\n\t\n\n\t\t\t\n\t\t\tfor (String format : getNumberFormats()) {\n\n        if (format.equals(\"#\") || format.equals(\"0\")) {\n          // skip the integer ones.  we'll get those later\n          continue;\n        }\n\n        ValueMetaInterface conversionMeta = new ValueMeta(\"number-us\", ValueMetaInterface.TYPE_NUMBER);\n\n        int precision = determinePrecision(format);\n        conversionMeta.setConversionMask(format);\n\t\t\t\tconversionMeta.setTrimType(trimType);\n\t\t\t\tconversionMeta.setDecimalSymbol(\".\");\n\t\t\t\tconversionMeta.setGroupingSymbol(\",\");\n\t\t\t\tconversionMeta.setLength(15);\n\t\t\t\tconversionMeta.setPrecision(precision);\n\t\t\t\tevaluationResults.add(new StringEvaluationResult(conversionMeta));\n\t\t\t\t\n\t\t\t\tconversionMeta = new ValueMeta(\"number-eu\", ValueMetaInterface.TYPE_NUMBER);\n\t\t\t\tconversionMeta.setConversionMask(format);\n\t\t\t\tconversionMeta.setTrimType(trimType);\n\t\t\t\tconversionMeta.setDecimalSymbol(\",\");\n\t\t\t\tconversionMeta.setGroupingSymbol(\".\");\n\t\t\t\tconversionMeta.setLength(15);\n\t\t\t\tconversionMeta.setPrecision(precision);\n\t\t\t\tevaluationResults.add(new StringEvaluationResult(conversionMeta));\n\t\t\t}\n\n      // Try the locale's Currency\n      DecimalFormat currencyFormat = ((DecimalFormat) NumberFormat.getCurrencyInstance());\n\n      ValueMetaInterface conversionMeta = new ValueMeta(\"number-currency\", ValueMetaInterface.TYPE_NUMBER);\n      // replace the universal currency symbol with the locale's currency symbol for user recognition\n      String currencyMask = currencyFormat.toLocalizedPattern().replace(\"\\u00A4\", currencyFormat.getCurrency().getSymbol());\n      conversionMeta.setConversionMask(currencyMask);\n      conversionMeta.setTrimType(trimType);\n      conversionMeta.setDecimalSymbol(String.valueOf(currencyFormat.getDecimalFormatSymbols().getDecimalSeparator()));\n      conversionMeta.setGroupingSymbol(String.valueOf(currencyFormat.getDecimalFormatSymbols().getGroupingSeparator()));\n      conversionMeta.setCurrencySymbol(currencyFormat.getCurrency().getSymbol());\n      conversionMeta.setLength(15);\n      conversionMeta.setPrecision(currencyFormat.getCurrency().getDefaultFractionDigits());\n\n      evaluationResults.add(new StringEvaluationResult(conversionMeta));\n\n\n\t\t\t// Integer\n\t\t\t//\n\t\t\tconversionMeta = new ValueMeta(\"integer\", ValueMetaInterface.TYPE_INTEGER);\n\t\t\tconversionMeta.setConversionMask(\"#\");\n\t\t\tconversionMeta.setLength(15);\n\t\t\tevaluationResults.add(new StringEvaluationResult(conversionMeta));\n\n\t\t\tconversionMeta = new ValueMeta(\"integer\", ValueMetaInterface.TYPE_INTEGER);\n\t\t\tconversionMeta.setConversionMask(\" #\");\n\t\t\tconversionMeta.setLength(15);\n\t\t\tevaluationResults.add(new StringEvaluationResult(conversionMeta));\n\t\t\t\n\t\t\t// Add support for left zero padded integers\n\t\t\t//\n\t\t\tfor (int i=1;i<=15;i++) {\n\n\t\t\t  String mask = \" \";\n\t\t\t  for (int x=0;x<i;x++) mask+=\"0\";\n\t\t\t  mask+=\";-\";\n              for (int x=0;x<i;x++) mask+=\"0\";\n\t\t\t  \n\t          conversionMeta = new ValueMeta(\"integer-zero-padded-\"+i, ValueMetaInterface.TYPE_INTEGER);\n\t          conversionMeta.setConversionMask(mask);\n\t          conversionMeta.setLength(i);\n\t          evaluationResults.add(new StringEvaluationResult(conversionMeta));\n\t\t\t}\n\n\n\t\t\t// Boolean\n\t\t\t//\n\t\t\tconversionMeta = new ValueMeta(\"boolean\", ValueMetaInterface.TYPE_BOOLEAN);\n\t\t\tevaluationResults.add(new StringEvaluationResult(conversionMeta));\t\t\n\t\t}\n\t}","commit_id":"1ca99b8737e506587def12828cb78c45970dfd35","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private void challengeConversions(String value) {\n\t\tList<StringEvaluationResult> all = new ArrayList<StringEvaluationResult>(evaluationResults);\n\t\tfor (StringEvaluationResult cmm : all) {\n\t\t\tif (cmm.getConversionMeta().isBoolean()) {\n\t\t\t\t// Boolean conversion never fails.\n\t\t\t\t// If it's a Y, N, true, false it's a boolean otherwise it ain't.\n\t\t\t\t//\n\t\t\t\tString string;\n\t\t\t\tif (tryTrimming) {\n\t\t\t\t\tstring=Const.trim(value);\n\t\t\t\t} else {\n\t\t\t\t\tstring=value;\n\t\t\t\t}\n\t\t\t\tif (!(\"Y\".equalsIgnoreCase(string) || \"N\".equalsIgnoreCase(string) || \"TRUE\".equalsIgnoreCase(string) || \"FALSE\".equalsIgnoreCase(string))) {\n\t\t\t\t\tevaluationResults.remove(cmm);\n\t\t\t\t}\t\t\t\t\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tif (cmm.getConversionMeta().isNumeric()) {\n\t\t\t\t\t\tboolean stop=false;\n\t\t\t\t\t\tint nrDots=0;\n\t\t\t\t\t\tint nrCommas=0;\n\t\t\t\t\t\tfor (char c : value.toCharArray()) {\n\t\t\t\t\t\t\tif (!Character.isDigit(c) && c!='.' && c!=',' && !Character.isSpaceChar(c)) {\n\t\t\t\t\t\t\t\tevaluationResults.remove(cmm);\n\t\t\t\t\t\t\t\tstop=true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// If the value contains a decimal or grouping symbol or some sort, it's not an integer\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\tif ((c=='.' && cmm.getConversionMeta().isInteger()) || \n\t\t\t\t\t\t\t    (c==',' && cmm.getConversionMeta().isInteger())) {\n\t\t\t\t\t\t\t\tevaluationResults.remove(cmm);\n\t\t\t\t\t\t\t\tstop=true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (c=='.') nrDots++;\n\t\t\t\t\t\t\tif (c==',') nrCommas++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (nrDots>1 && nrCommas>1) {\n\t\t\t\t\t\t\tevaluationResults.remove(cmm);\n\t\t\t\t\t\t\tstop=true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (stop) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tValueMetaInterface meta = stringMeta.clone();\n\t\t\t\t\tmeta.setConversionMetadata(cmm.getConversionMeta());\n\t\t\t\t\tmeta.setTrimType(cmm.getConversionMeta().getTrimType());\n\t\t\t\t\tObject object = meta.convertDataUsingConversionMetaData(value);\n\t\t\t\t\t\n\t\t\t\t\tif (cmm.getConversionMeta().isNumeric() || cmm.getConversionMeta().isDate()) {\n\t\t\t\t\t\t// Convert back to a string to see if we lost any precision!\n\t\t\t\t\t\t//\n\t\t\t\t\t\tif (!cmm.getConversionMeta().isNull(object)) {\n\t\t\t\t\t\t\tString compare = cmm.getConversionMeta().getString(object);\n\t\t\t\t\t\t\tswitch(cmm.getConversionMeta().getTrimType()) {\n\t\t\t\t\t\t\tcase ValueMetaInterface.TRIM_TYPE_NONE:\n\t\t\t\t\t\t\t\tif (!compare.equalsIgnoreCase(value)) {\n\t\t\t\t\t\t\t\t\tevaluationResults.remove(cmm);\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase ValueMetaInterface.TRIM_TYPE_LEFT:\n\t\t\t\t\t\t\t\tif (!compare.equalsIgnoreCase(Const.ltrim(value))) {\n\t\t\t\t\t\t\t\t\tevaluationResults.remove(cmm);\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase ValueMetaInterface.TRIM_TYPE_RIGHT:\n\t\t\t\t\t\t\t\tif (!compare.equalsIgnoreCase(Const.rtrim(value))) {\n\t\t\t\t\t\t\t\t\tevaluationResults.remove(cmm);\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase ValueMetaInterface.TRIM_TYPE_BOTH:\n\t\t\t\t\t\t\t\tif (!compare.equalsIgnoreCase(Const.trim(value))) {\n\t\t\t\t\t\t\t\t\tevaluationResults.remove(cmm);\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Still here?  Evaluate the data...\n\t\t\t\t\t// Keep track of null values, min, max, etc.\n\t\t\t\t\t//\n\t\t\t\t\tif (cmm.getConversionMeta().isNull(object)) {\n\t\t\t\t\t\tcmm.incrementNrNull();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (cmm.getMin()==null || cmm.getConversionMeta().compare(cmm.getMin(), object)>0) {\n\t\t\t\t\t\tcmm.setMin(object);\n\t\t\t\t\t}\n\t\t\t\t\tif (cmm.getMax()==null || cmm.getConversionMeta().compare(cmm.getMax(), object)<0) {\n\t\t\t\t\t\tcmm.setMax(object);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t} catch(KettleValueException e) {\n\t\t\t\t\t// This one doesn't work, remove it from the list!\n\t\t\t\t\t//\n\t\t\t\t\tevaluationResults.remove(cmm);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(\"Evaluated '\"+value+\"' and now there are \"+evaluationResults.size()+\" evaluation results left\");\n\t}","id":46129,"modified_method":"private void challengeConversions(String value) {\n\t\tList<StringEvaluationResult> all = new ArrayList<StringEvaluationResult>(evaluationResults);\n\t\tfor (StringEvaluationResult cmm : all) {\n\t\t\tif (cmm.getConversionMeta().isBoolean()) {\n\t\t\t\t// Boolean conversion never fails.\n\t\t\t\t// If it's a Y, N, true, false it's a boolean otherwise it ain't.\n\t\t\t\t//\n\t\t\t\tString string;\n\t\t\t\tif (tryTrimming) {\n\t\t\t\t\tstring=Const.trim(value);\n\t\t\t\t} else {\n\t\t\t\t\tstring=value;\n\t\t\t\t}\n\t\t\t\tif (!(\"Y\".equalsIgnoreCase(string) || \"N\".equalsIgnoreCase(string) || \"TRUE\".equalsIgnoreCase(string) || \"FALSE\".equalsIgnoreCase(string))) {\n\t\t\t\t\tevaluationResults.remove(cmm);\n\t\t\t\t}\t\t\t\t\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tif (cmm.getConversionMeta().isNumeric()) {\n\t\t\t\t\t\tboolean stop=false;\n\t\t\t\t\t\tint nrDots=0;\n\t\t\t\t\t\tint nrCommas=0;\n\t\t\t\t\t\tfor (char c : value.toCharArray()) {\n\t\t\t\t\t\t\tif (!Character.isDigit(c) && c!='.' && c!=',' && !Character.isSpaceChar(c) &&\n                  (\n                    !String.valueOf(c).equals(cmm.getConversionMeta().getCurrencySymbol())\n                    && c!= '(' && c!= ')')\n                  ) {\n\t\t\t\t\t\t\t\tevaluationResults.remove(cmm);\n\t\t\t\t\t\t\t\tstop=true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// If the value contains a decimal or grouping symbol or some sort, it's not an integer\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\tif ((c=='.' && cmm.getConversionMeta().isInteger()) || \n\t\t\t\t\t\t\t    (c==',' && cmm.getConversionMeta().isInteger())) {\n\t\t\t\t\t\t\t\tevaluationResults.remove(cmm);\n\t\t\t\t\t\t\t\tstop=true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (c=='.') nrDots++;\n\t\t\t\t\t\t\tif (c==',') nrCommas++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (nrDots>1 && nrCommas>1) {\n\t\t\t\t\t\t\tevaluationResults.remove(cmm);\n\t\t\t\t\t\t\tstop=true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (stop) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tValueMetaInterface meta = stringMeta.clone();\n\t\t\t\t\tmeta.setConversionMetadata(cmm.getConversionMeta());\n\t\t\t\t\tmeta.setTrimType(cmm.getConversionMeta().getTrimType());\n\t\t\t\t\tObject object = meta.convertDataUsingConversionMetaData(value);\n\n\t\t\t\t\t// Still here?  Evaluate the data...\n\t\t\t\t\t// Keep track of null values, min, max, etc.\n\t\t\t\t\t//\n\t\t\t\t\tif (cmm.getConversionMeta().isNull(object)) {\n\t\t\t\t\t\tcmm.incrementNrNull();\n\t\t\t\t\t}\n\n\t\t\t\t\tif (cmm.getMin()==null || cmm.getConversionMeta().compare(cmm.getMin(), object)>0) {\n\t\t\t\t\t\tcmm.setMin(object);\n\t\t\t\t\t}\n\t\t\t\t\tif (cmm.getMax()==null || cmm.getConversionMeta().compare(cmm.getMax(), object)<0) {\n\t\t\t\t\t\tcmm.setMax(object);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t} catch(KettleValueException e) {\n\t\t\t\t\t// This one doesn't work, remove it from the list!\n\t\t\t\t\t//\n\t\t\t\t\tevaluationResults.remove(cmm);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tSystem.out.println(\"Evaluated '\"+value+\"' and now there are \"+evaluationResults.size()+\" evaluation results left\");\n\t}","commit_id":"1ca99b8737e506587def12828cb78c45970dfd35","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void evaluateString(String value) {\n\t\tcount++;\n\n\t\tif (!values.contains(value)) {\n\t\t\tvalues.add(value);\n\t\t\t\n\t\t\tif(value != null) {\n  \t\t\tevaluateLength(value);\n  \t\t\t\n  \t\t\tchallengeConversions(value);\n\t\t\t}\n\t\t}\n\t}","id":46130,"modified_method":"public void evaluateString(String value) {\n\t\tcount++;\n\n\t\tif (!values.contains(value)) {\n\t\t\tvalues.add(value);\n\t\t\t\n\t\t\tif(value != null) {\n  \t\t\tevaluateLength(value);\n        evaluatePrecision(value);\n  \t\t\tchallengeConversions(value);\n\t\t\t}\n\t\t}\n\t}","commit_id":"1ca99b8737e506587def12828cb78c45970dfd35","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void testSeries2() throws Exception {\n\t\tStringEvaluator evaluator = new StringEvaluator(false);\n\t\tfor (String string : series2) {\n\t\t\tevaluator.evaluateString(string);\n\t\t}\n\t\t\n\t\tassertEquals(evaluator.getCount(), series2.length);\n\t\tassertEquals(evaluator.getMaxLength(), 19);\n\t\tassertEquals(evaluator.getStringEvaluationResults().size(), 1);\n\t\tStringEvaluationResult result = evaluator.getStringEvaluationResults().get(0);\n\t\t\n\t\tassertEquals(\"Not a date detetected\", result.getConversionMeta().getType(), ValueMetaInterface.TYPE_DATE);\n\t\tDate minDate = result.getConversionMeta().getDate(result.getMin());\n\t\tassertEquals(minDate.getTime(), 1262259296000L);\n\t\t\n\t\tint nrEmpty = result.getNrNull();\n\t\tassertEquals(nrEmpty, 0);\n\t\tassertEquals(evaluator.getValues().size(), series2.length);\n\t}","id":46131,"modified_method":"public void testSeries2() throws Exception {\n\t\tStringEvaluator evaluator = new StringEvaluator(false);\n\t\tfor (String string : series2) {\n\t\t\tevaluator.evaluateString(string);\n\t\t}\n\t\t\n\t\tassertEquals(evaluator.getCount(), series2.length);\n\t\tassertEquals(evaluator.getMaxLength(), 19);\n\t\tStringEvaluationResult result = evaluator.getStringEvaluationResults().get(0);\n\t\t\n\t\tassertEquals(\"Not a date detetected\", result.getConversionMeta().getType(), ValueMetaInterface.TYPE_DATE);\n\t\tDate minDate = result.getConversionMeta().getDate(result.getMin());\n\t\tassertEquals(minDate.getTime(), 1262280896000L);\n\t\t\n\t\tint nrEmpty = result.getNrNull();\n\t\tassertEquals(nrEmpty, 0);\n\t\tassertEquals(evaluator.getValues().size(), series2.length);\n\t}","commit_id":"1ca99b8737e506587def12828cb78c45970dfd35","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void testSeries3() throws Exception {\n\t\tStringEvaluator evaluator = new StringEvaluator(false);\n\t\tfor (String string : series3) {\n\t\t\tevaluator.evaluateString(string);\n\t\t}\n\t\t\n\t\tassertEquals(evaluator.getCount(), series3.length);\n\t\tassertEquals(evaluator.getMaxLength(), 8);\n\t\tassertEquals(evaluator.getStringEvaluationResults().size(), 5);\n\t\tStringEvaluationResult result = evaluator.getStringEvaluationResults().get(0);\n\t\tassertEquals(\"Not a number detetected\", result.getConversionMeta().getType(), ValueMetaInterface.TYPE_NUMBER);\n\t\t\n\t\tint nrEmpty = result.getNrNull();\n\t\tassertEquals(nrEmpty, 1);\n\t\tassertEquals(evaluator.getValues().size(), series3.length);\n\t}","id":46132,"modified_method":"public void testSeries3() throws Exception {\n\t\tStringEvaluator evaluator = new StringEvaluator(false);\n\t\tfor (String string : series3) {\n\t\t\tevaluator.evaluateString(string);\n\t\t}\n\t\t\n\t\tassertEquals(evaluator.getCount(), series3.length);\n\t\tassertEquals(evaluator.getMaxLength(), 8);\n\t\tStringEvaluationResult result = evaluator.getStringEvaluationResults().get(0);\n\t\tassertEquals(\"Not a number detetected\", result.getConversionMeta().getType(), ValueMetaInterface.TYPE_NUMBER);\n\t\t\n\t\tint nrEmpty = result.getNrNull();\n\t\tassertEquals(nrEmpty, 1);\n\t\tassertEquals(evaluator.getValues().size(), series3.length);\n\t}","commit_id":"1ca99b8737e506587def12828cb78c45970dfd35","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void testSeries4() throws Exception {\n\t\tStringEvaluator evaluator = new StringEvaluator(true);\n\t\tfor (String string : series4) {\n\t\t\tevaluator.evaluateString(string);\n\t\t}\n\t\t\n\t\tassertEquals(evaluator.getCount(), series4.length);\n\t\tassertEquals(evaluator.getMaxLength(), 13);\n\t\tassertEquals(evaluator.getStringEvaluationResults().size(), 1);\n\t\tStringEvaluationResult result = evaluator.getStringEvaluationResults().get(0);\n\t\tassertEquals(\"Not a number detetected\", result.getConversionMeta().getType(), ValueMetaInterface.TYPE_NUMBER);\n\t\t\n\t\tint nrEmpty = result.getNrNull();\n\t\tassertEquals(nrEmpty, 1);\n\t\tassertEquals(evaluator.getValues().size(), series4.length);\n\t}","id":46133,"modified_method":"public void testSeries4() throws Exception {\n\t\tStringEvaluator evaluator = new StringEvaluator(true);\n\t\tfor (String string : series4) {\n\t\t\tevaluator.evaluateString(string);\n\t\t}\n\t\t\n\t\tassertEquals(evaluator.getCount(), series4.length);\n\t\tassertEquals(evaluator.getMaxLength(), 13);\n\t\tStringEvaluationResult result = evaluator.getStringEvaluationResults().get(0);\n\t\tassertEquals(\"Not a number detetected\", result.getConversionMeta().getType(), ValueMetaInterface.TYPE_NUMBER);\n\t\t\n\t\tint nrEmpty = result.getNrNull();\n\t\tassertEquals(nrEmpty, 1);\n\t\tassertEquals(evaluator.getValues().size(), series4.length);\n\t}","commit_id":"1ca99b8737e506587def12828cb78c45970dfd35","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"@SuppressWarnings( \"unchecked\" )\n  private boolean openNextFolder() {\n    try {\n      if ( !meta.isDynamicFolder() ) {\n        // static folders list\n        // let's check if we fetched all values in list\n        if ( data.folderenr >= data.folders.length ) {\n          // We have fetched all folders\n          if ( isDetailed() ) {\n            logDetailed( BaseMessages.getString( PKG, \"MailInput.Log.FinishedProcessing\" ) );\n          }\n          return false;\n        }\n      } else {\n        // dynamic folders\n        if ( first ) {\n          first = false;\n\n          data.readrow = getRow(); // Get row from input rowset & set row busy!\n          if ( data.readrow == null ) {\n            if ( isDetailed() ) {\n              logDetailed( BaseMessages.getString( PKG, \"MailInput.Log.FinishedProcessing\" ) );\n            }\n            return false;\n          }\n\n          data.inputRowMeta = getInputRowMeta();\n          data.outputRowMeta = data.inputRowMeta.clone();\n          meta.getFields( data.outputRowMeta, getStepname(), null, null, this, repository, metaStore );\n\n          // Get total previous fields\n          data.totalpreviousfields = data.inputRowMeta.size();\n\n          if ( Const.isEmpty( meta.getFolderField() ) ) {\n            logError( BaseMessages.getString( PKG, \"MailInput.Error.DynamicFolderFieldMissing\" ) );\n            stopAll();\n            setErrors( 1 );\n            return false;\n          }\n\n          data.indexOfFolderField = data.inputRowMeta.indexOfValue( meta.getFolderField() );\n          if ( data.indexOfFolderField < 0 ) {\n            logError( BaseMessages.getString( PKG, \"MailInput.Error.DynamicFolderUnreachable\", meta\n              .getFolderField() ) );\n            stopAll();\n            setErrors( 1 );\n            return false;\n          }\n\n          // get folder\n          String foldername = data.inputRowMeta.getString( data.readrow, data.indexOfFolderField );\n          if ( isDebug() ) {\n            logDebug( BaseMessages.getString(\n              PKG, \"MailInput.Log.FoldernameInStream\", meta.getFolderField(), foldername ) );\n          }\n          data.folders = getFolders( foldername );\n        } // end if first\n\n        if ( data.folderenr >= data.folders.length ) {\n          // we have fetched all values for input row\n          // grab another row\n          data.readrow = getRow(); // Get row from input rowset & set row busy!\n          if ( data.readrow == null ) {\n            if ( isDetailed() ) {\n              logDetailed( BaseMessages.getString( PKG, \"MailInput.Log.FinishedProcessing\" ) );\n            }\n            return false;\n          }\n          // get folder\n          String foldername = data.inputRowMeta.getString( data.readrow, data.indexOfFolderField );\n          data.folders = getFolders( foldername );\n        }\n      }\n\n      data.start = parseIntWithSubstitute( meta.getStart() );\n      data.end = parseIntWithSubstitute( meta.getEnd() );\n      // Get the current folder\n      data.folder = data.folders[data.folderenr];\n\n      // Move folder pointer ahead!\n      data.folderenr++;\n\n      // open folder\n      if ( !data.usePOP && !Const.isEmpty( data.folder ) ) {\n        data.mailConn.openFolder( data.folder, false );\n      } else {\n        data.mailConn.openFolder( false );\n      }\n\n      if ( meta.useBatch() || ( !Const.isEmpty( meta.getFirstMails() )\n                                  && Integer.parseInt( meta.getFirstMails() ) > 0  ) ) {\n        // get data by pieces\n        Integer batchSize = meta.useBatch() ? meta.getBatchSize() : Integer.parseInt( meta.getFirstMails() );\n        Integer start = meta.useBatch() ? data.start : 1;\n        Integer end = meta.useBatch() ? data.end : batchSize;\n        data.folderIterator =\n          new BatchFolderIterator( data.mailConn.getFolder(), batchSize, start, end ); // TODO:args\n\n        if ( data.mailConn.getSearchTerm() != null ) { // add search filter\n          data.folderIterator =\n            new SearchEnabledFolderIterator( data.folderIterator, data.mailConn.getSearchTerm() );\n        }\n      } else { // fetch all\n        data.mailConn.retrieveMessages();\n        data.folderIterator = new ArrayIterator( data.mailConn.getMessages() );\n      }\n\n      if ( isDebug() ) {\n        logDebug( BaseMessages.getString( PKG, \"MailInput.Log.MessagesInFolder\", data.folder, data.messagesCount ) );\n      }\n\n    } catch ( Exception e ) {\n      logError( \"Error opening folder \" + data.folderenr + \" \" + data.folder + \": \" + e.toString() );\n      logError( Const.getStackTracker( e ) );\n      stopAll();\n      setErrors( 1 );\n      return false;\n    }\n    return true;\n  }","id":46134,"modified_method":"@SuppressWarnings( \"unchecked\" )\n  private boolean openNextFolder() {\n    try {\n      if ( !meta.isDynamicFolder() ) {\n        // static folders list\n        // let's check if we fetched all values in list\n        if ( data.folderenr >= data.folders.length ) {\n          // We have fetched all folders\n          if ( isDetailed() ) {\n            logDetailed( BaseMessages.getString( PKG, \"MailInput.Log.FinishedProcessing\" ) );\n          }\n          return false;\n        }\n      } else {\n        // dynamic folders\n        if ( first ) {\n          first = false;\n\n          data.readrow = getRow(); // Get row from input rowset & set row busy!\n          if ( data.readrow == null ) {\n            if ( isDetailed() ) {\n              logDetailed( BaseMessages.getString( PKG, \"MailInput.Log.FinishedProcessing\" ) );\n            }\n            return false;\n          }\n\n          data.inputRowMeta = getInputRowMeta();\n          data.outputRowMeta = data.inputRowMeta.clone();\n          meta.getFields( data.outputRowMeta, getStepname(), null, null, this, repository, metaStore );\n\n          // Get total previous fields\n          data.totalpreviousfields = data.inputRowMeta.size();\n\n          if ( Const.isEmpty( meta.getFolderField() ) ) {\n            logError( BaseMessages.getString( PKG, \"MailInput.Error.DynamicFolderFieldMissing\" ) );\n            stopAll();\n            setErrors( 1 );\n            return false;\n          }\n\n          data.indexOfFolderField = data.inputRowMeta.indexOfValue( meta.getFolderField() );\n          if ( data.indexOfFolderField < 0 ) {\n            logError( BaseMessages.getString( PKG, \"MailInput.Error.DynamicFolderUnreachable\", meta\n              .getFolderField() ) );\n            stopAll();\n            setErrors( 1 );\n            return false;\n          }\n\n          // get folder\n          String foldername = data.inputRowMeta.getString( data.readrow, data.indexOfFolderField );\n          if ( isDebug() ) {\n            logDebug( BaseMessages.getString(\n              PKG, \"MailInput.Log.FoldernameInStream\", meta.getFolderField(), foldername ) );\n          }\n          data.folders = getFolders( foldername );\n        } // end if first\n\n        if ( data.folderenr >= data.folders.length ) {\n          // we have fetched all values for input row\n          // grab another row\n          data.readrow = getRow(); // Get row from input rowset & set row busy!\n          if ( data.readrow == null ) {\n            if ( isDetailed() ) {\n              logDetailed( BaseMessages.getString( PKG, \"MailInput.Log.FinishedProcessing\" ) );\n            }\n            return false;\n          }\n          // get folder\n          String foldername = data.inputRowMeta.getString( data.readrow, data.indexOfFolderField );\n          data.folders = getFolders( foldername );\n        }\n      }\n\n      data.start = parseIntWithSubstitute( meta.getStart() );\n      data.end = parseIntWithSubstitute( meta.getEnd() );\n      // Get the current folder\n      data.folder = data.folders[data.folderenr];\n\n      // Move folder pointer ahead!\n      data.folderenr++;\n\n      // open folder\n      if ( !data.usePOP && !Const.isEmpty( data.folder ) ) {\n        data.mailConn.openFolder( data.folder, false );\n      } else {\n        data.mailConn.openFolder( false );\n      }\n\n      if ( meta.useBatch() || ( !Const.isEmpty( environmentSubstitute( meta.getFirstMails() ) )\n                                  && Integer.parseInt( environmentSubstitute( meta.getFirstMails() ) ) > 0  ) ) {\n        // get data by pieces\n        Integer batchSize = meta.useBatch() ? meta.getBatchSize()\n            : Integer.parseInt( environmentSubstitute( meta.getFirstMails() ) );\n        Integer start = meta.useBatch() ? data.start : 1;\n        Integer end = meta.useBatch() ? data.end : batchSize;\n        data.folderIterator =\n          new BatchFolderIterator( data.mailConn.getFolder(), batchSize, start, end ); // TODO:args\n\n        if ( data.mailConn.getSearchTerm() != null ) { // add search filter\n          data.folderIterator =\n            new SearchEnabledFolderIterator( data.folderIterator, data.mailConn.getSearchTerm() );\n        }\n      } else { // fetch all\n        data.mailConn.retrieveMessages();\n        data.folderIterator = new ArrayIterator( data.mailConn.getMessages() );\n      }\n\n      if ( isDebug() ) {\n        logDebug( BaseMessages.getString( PKG, \"MailInput.Log.MessagesInFolder\", data.folder, data.messagesCount ) );\n      }\n\n    } catch ( Exception e ) {\n      logError( \"Error opening folder \" + data.folderenr + \" \" + data.folder + \": \" + e.toString() );\n      logError( Const.getStackTracker( e ) );\n      stopAll();\n      setErrors( 1 );\n      return false;\n    }\n    return true;\n  }","commit_id":"dd5d782f73fd1732efb185d089d5a048365b5b6e","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"/**\n   * Copy information from the meta-data input to the dialog fields.\n   */\n  public void getData() {\n    if ( input.getServerName() != null ) {\n      wServerName.setText( input.getServerName() );\n    }\n    if ( input.getUserName() != null ) {\n      wUserName.setText( input.getUserName() );\n    }\n    if ( input.getPassword() != null ) {\n      wPassword.setText( input.getPassword() );\n    }\n\n    wUseSSL.setSelection( input.isUseSSL() );\n\n    if ( input.getPort() != null ) {\n      wPort.setText( input.getPort() );\n    }\n\n    String protocol = input.getProtocol();\n\n    boolean isPop3 = StringUtils.equals( protocol, MailConnectionMeta.PROTOCOL_STRING_POP3 );\n    wProtocol.setText( protocol );\n    int iRet = input.getRetrievemails();\n\n    // [PDI-7241] POP3 does not support retrieve email flags.\n    // if anyone already used 'unread' for POP3 in transformation or 'retrieve... first'\n    // now they realize that all this time it was 'retrieve all mails'.\n    if ( iRet > 0 ) {\n      if ( isPop3 ) {\n        wListmails.select( iRet - 1 );\n      } else {\n        wListmails.select( iRet );\n      }\n    } else {\n      wListmails.select( 0 ); // Retrieve All Mails\n    }\n\n    wIMAPListmails.setText( MailConnectionMeta.getValueImapListDesc( input.getValueImapList() ) );\n    if ( input.getFirstIMAPMails() != null ) {\n      wIMAPFirstmails.setText( input.getFirstIMAPMails() );\n    }\n    if ( input.getIMAPFolder() != null ) {\n      wIMAPFolder.setText( input.getIMAPFolder() );\n    }\n    // search term\n    if ( input.getSenderSearchTerm() != null ) {\n      wSender.setText( input.getSenderSearchTerm() );\n    }\n    wNegateSender.setSelection( input.isNotTermSenderSearch() );\n    if ( input.getRecipientSearch() != null ) {\n      wReceipient.setText( input.getRecipientSearch() );\n    }\n    wNegateReceipient.setSelection( input.isNotTermRecipientSearch() );\n    if ( input.getSubjectSearch() != null ) {\n      wSubject.setText( input.getSubjectSearch() );\n    }\n    wNegateSubject.setSelection( input.isNotTermSubjectSearch() );\n    wConditionOnReceivedDate\n      .setText( MailConnectionMeta.getConditionDateDesc( input.getConditionOnReceivedDate() ) );\n    wNegateReceivedDate.setSelection( input.isNotTermReceivedDateSearch() );\n    if ( input.getReceivedDate1() != null ) {\n      wReadFrom.setText( input.getReceivedDate1() );\n    }\n    if ( input.getReceivedDate2() != null ) {\n      wReadTo.setText( input.getReceivedDate2() );\n    }\n    wIncludeSubFolders.setSelection( input.isIncludeSubFolders() );\n    wUseProxy.setSelection( input.isUseProxy() );\n    if ( input.getProxyUsername() != null ) {\n      wProxyUsername.setText( input.getProxyUsername() );\n    }\n    wdynamicFolder.setSelection( input.isDynamicFolder() );\n    if ( input.getFolderField() != null ) {\n      wFolderField.setText( input.getFolderField() );\n    }\n    wLimit.setText( Const.NVL( input.getRowLimit(), \"0\" ) );\n    for ( int i = 0; i < input.getInputFields().length; i++ ) {\n      MailInputField field = input.getInputFields()[i];\n\n      if ( field != null ) {\n        TableItem item = wFields.table.getItem( i );\n        String name = field.getName();\n        String column = field.getColumnDesc();\n        if ( name != null ) {\n          item.setText( 1, name );\n        }\n        if ( column != null ) {\n          item.setText( 2, column );\n        }\n      }\n    }\n\n    wFields.removeEmptyRows();\n    wFields.setRowNums();\n    wFields.optWidth( true );\n\n    wUseBatch.setSelection( input.isUseBatch() );\n    wBatchSize.setText( input.getBatchSize() == null ? \"\" : input.getBatchSize().toString() );\n    wStartMessage.setText( input.getStart() == null ? \"\" : input.getStart().toString() );\n    wEndMessage.setText( input.getEnd() == null ? \"\" : input.getEnd().toString() );\n    wIgnoreFieldErrors.setSelection( input.isStopOnError() );\n    setBatchSettingsEnabled();\n\n    wStepname.selectAll();\n    wStepname.setFocus();\n  }","id":46135,"modified_method":"/**\n   * Copy information from the meta-data input to the dialog fields.\n   */\n  public void getData() {\n    if ( input.getServerName() != null ) {\n      wServerName.setText( input.getServerName() );\n    }\n    if ( input.getUserName() != null ) {\n      wUserName.setText( input.getUserName() );\n    }\n    if ( input.getPassword() != null ) {\n      wPassword.setText( input.getPassword() );\n    }\n\n    wUseSSL.setSelection( input.isUseSSL() );\n\n    if ( input.getPort() != null ) {\n      wPort.setText( input.getPort() );\n    }\n\n    String protocol = input.getProtocol();\n\n    boolean isPop3 = StringUtils.equals( protocol, MailConnectionMeta.PROTOCOL_STRING_POP3 );\n    wProtocol.setText( protocol );\n    int iRet = input.getRetrievemails();\n\n    // [PDI-7241] POP3 does not support retrieve email flags.\n    // if anyone already used 'unread' for POP3 in transformation or 'retrieve... first'\n    // now they realize that all this time it was 'retrieve all mails'.\n    if ( iRet > 0 ) {\n      if ( isPop3 ) {\n        wListmails.select( iRet - 1 );\n      } else {\n        wListmails.select( iRet );\n      }\n    } else {\n      wListmails.select( 0 ); // Retrieve All Mails\n    }\n\n    wFirstmails.setText( input.getFirstMails() );\n\n    wIMAPListmails.setText( MailConnectionMeta.getValueImapListDesc( input.getValueImapList() ) );\n    if ( input.getFirstIMAPMails() != null ) {\n      wIMAPFirstmails.setText( input.getFirstIMAPMails() );\n    }\n    if ( input.getIMAPFolder() != null ) {\n      wIMAPFolder.setText( input.getIMAPFolder() );\n    }\n    // search term\n    if ( input.getSenderSearchTerm() != null ) {\n      wSender.setText( input.getSenderSearchTerm() );\n    }\n    wNegateSender.setSelection( input.isNotTermSenderSearch() );\n    if ( input.getRecipientSearch() != null ) {\n      wReceipient.setText( input.getRecipientSearch() );\n    }\n    wNegateReceipient.setSelection( input.isNotTermRecipientSearch() );\n    if ( input.getSubjectSearch() != null ) {\n      wSubject.setText( input.getSubjectSearch() );\n    }\n    wNegateSubject.setSelection( input.isNotTermSubjectSearch() );\n    wConditionOnReceivedDate\n      .setText( MailConnectionMeta.getConditionDateDesc( input.getConditionOnReceivedDate() ) );\n    wNegateReceivedDate.setSelection( input.isNotTermReceivedDateSearch() );\n    if ( input.getReceivedDate1() != null ) {\n      wReadFrom.setText( input.getReceivedDate1() );\n    }\n    if ( input.getReceivedDate2() != null ) {\n      wReadTo.setText( input.getReceivedDate2() );\n    }\n    wIncludeSubFolders.setSelection( input.isIncludeSubFolders() );\n    wUseProxy.setSelection( input.isUseProxy() );\n    if ( input.getProxyUsername() != null ) {\n      wProxyUsername.setText( input.getProxyUsername() );\n    }\n    wdynamicFolder.setSelection( input.isDynamicFolder() );\n    if ( input.getFolderField() != null ) {\n      wFolderField.setText( input.getFolderField() );\n    }\n    wLimit.setText( Const.NVL( input.getRowLimit(), \"0\" ) );\n    for ( int i = 0; i < input.getInputFields().length; i++ ) {\n      MailInputField field = input.getInputFields()[i];\n\n      if ( field != null ) {\n        TableItem item = wFields.table.getItem( i );\n        String name = field.getName();\n        String column = field.getColumnDesc();\n        if ( name != null ) {\n          item.setText( 1, name );\n        }\n        if ( column != null ) {\n          item.setText( 2, column );\n        }\n      }\n    }\n\n    wFields.removeEmptyRows();\n    wFields.setRowNums();\n    wFields.optWidth( true );\n\n    wUseBatch.setSelection( input.isUseBatch() );\n    wBatchSize.setText( input.getBatchSize() == null ? \"\" : input.getBatchSize().toString() );\n    wStartMessage.setText( input.getStart() == null ? \"\" : input.getStart().toString() );\n    wEndMessage.setText( input.getEnd() == null ? \"\" : input.getEnd().toString() );\n    wIgnoreFieldErrors.setSelection( input.isStopOnError() );\n    setBatchSettingsEnabled();\n\n    wStepname.selectAll();\n    wStepname.setFocus();\n  }","commit_id":"dd5d782f73fd1732efb185d089d5a048365b5b6e","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void appendToResponse(WOResponse r, WOContext c){\n        if(chosenKeyPathes == null){\n            chosenKeyPathes = \"\";\n            entityForReportName = (String)valueForBinding(\"entityNameForReport\");\n            String keyPathesFromDatabase = (String)objectPropertyValue();\n            if(keyPathesFromDatabase!=null){\n                NSArray keyPathsArray = (NSArray)NSPropertyListSerialization.propertyListFromString(keyPathesFromDatabase);\n                if(cat.isDebugEnabled()) cat.debug(\"keyPathsArray = \"+keyPathsArray);\n                if(keyPathsArray!=null){\n                    chosenObjects = ERDirectToWeb.displayableArrayForKeyPathArray(keyPathsArray, entityForReportName, ERXLocalizer.localizerForSession(session()).language());\n                    if(((ERXSession)session()).browserIsNetscape()){\n                        NSMutableArray tmp = new NSMutableArray();\n                        ERXKeyValuePair defaultObject =\n                        new ERXKeyValuePair(new String(\"-\"),\n                                           new String(\"--------------------------------------------------------\"));\n                        tmp.addObject(defaultObject);\n                        tmp.addObjectsFromArray(chosenObjects);\n                        chosenObjects = (NSArray)tmp;\n                    }\n                    chosenKeyPathes = keyPathsArray.componentsJoinedByString ( \",\" );\n                }else{\n                    chosenObjects = new NSArray();\n                }\n                if(cat.isDebugEnabled()) cat.debug(\"chosenObjects = \"+chosenObjects);\n            }else if(((ERXSession)session()).browserIsNetscape()){\n                ERXKeyValuePair defaultObject =\n                new ERXKeyValuePair(new String(\"-\"),\n                                   new String(\"--------------------------------------------------------\"));\n                chosenObjects = new NSArray(defaultObject);\n            }\n        }\n        super.appendToResponse(r,c);\n    }","id":46136,"modified_method":"public void appendToResponse(WOResponse r, WOContext c){\n        if(chosenKeyPathes == null){\n            chosenKeyPathes = \"\";\n            entityForReportName = (String)valueForBinding(\"entityNameForReport\");\n            String keyPathesFromDatabase = (String)objectPropertyValue();\n            if(keyPathesFromDatabase!=null){\n                NSArray keyPathsArray = (NSArray)NSPropertyListSerialization.propertyListFromString(keyPathesFromDatabase);\n                if(cat.isDebugEnabled()) cat.debug(\"keyPathsArray = \"+keyPathsArray);\n                if(keyPathsArray!=null){\n                    chosenObjects = ERDirectToWeb.displayableArrayForKeyPathArray(keyPathsArray, entityForReportName, ERXLocalizer.localizerForSession(session()).language());\n                    if(((ERXSession)session()).browser().isNetscape()){\n                        NSMutableArray tmp = new NSMutableArray();\n                        ERXKeyValuePair defaultObject =\n                        new ERXKeyValuePair(new String(\"-\"),\n                                           new String(\"--------------------------------------------------------\"));\n                        tmp.addObject(defaultObject);\n                        tmp.addObjectsFromArray(chosenObjects);\n                        chosenObjects = (NSArray)tmp;\n                    }\n                    chosenKeyPathes = keyPathsArray.componentsJoinedByString ( \",\" );\n                }else{\n                    chosenObjects = new NSArray();\n                }\n                if(cat.isDebugEnabled()) cat.debug(\"chosenObjects = \"+chosenObjects);\n            }else if(((ERXSession)session()).browser().isNetscape()){\n                ERXKeyValuePair defaultObject =\n                new ERXKeyValuePair(new String(\"-\"),\n                                   new String(\"--------------------------------------------------------\"));\n                chosenObjects = new NSArray(defaultObject);\n            }\n        }\n        super.appendToResponse(r,c);\n    }","commit_id":"d963821b3abf5760054743d62846cc04eda42e23","url":"https://github.com/wocommunity/wonder"},{"original_method":"public boolean useForm() {\n        boolean result=hasBinding(\"doNotUseForm\") ? !ERXUtilities.booleanValue(valueForBinding(\"doNotUseForm\")) : true;\n        // however, if the form does not have to be submitted AND javascript is enabled, no need for a form\n        if (result && !shouldSubmitForm() &&\n            ((ERXSession)session()).javaScriptEnabled() &&\n            !((ERXSession)session()).browserIsNetscape() &&\n            !((ERXSession)session()).browserIsOmniweb())\n            result=false;\n        return result;\n    }","id":46137,"modified_method":"public boolean useForm() {\n        boolean result=hasBinding(\"doNotUseForm\") ? !ERXUtilities.booleanValue(valueForBinding(\"doNotUseForm\")) : true;\n        // however, if the form does not have to be submitted AND javascript is enabled, no need for a form\n        if (result && !shouldSubmitForm() &&\n            ((ERXSession)session()).javaScriptEnabled() &&\n            !((ERXSession)session()).browser().isNetscape() &&\n            !((ERXSession)session()).browser().isOmniweb())\n            result=false;\n        return result;\n    }","commit_id":"d963821b3abf5760054743d62846cc04eda42e23","url":"https://github.com/wocommunity/wonder"},{"original_method":"@Override\n  public IValueProxy invokeMethod(String name, String jniSignature, Object... args) throws EvaluationException {\n    // we can't use Evaluators similar method cause we find methods in Object, but invoke them for Array\n    ClassType objectType = Evaluator.findClassType(\"java.lang.Object\", myThreadReference.virtualMachine());\n    final Method method = Evaluator.findMethod(objectType, name, jniSignature);\n\n    final List<Value> argValues = MirrorUtil.getValues(myThreadReference, args);\n\n    return handleInvocationExceptions(new Invocatable<IValueProxy>() {\n      @Override\n      public IValueProxy invoke() throws InvocationException, InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException {\n        Value result = getArrayValue().invokeMethod(myThreadReference, method, argValues, 0);\n        return MirrorUtil.getValueProxy(result, myThreadReference);\n      }\n    });\n  }","id":46138,"modified_method":"@Override\n  public IValueProxy invokeMethod(String name, String jniSignature, Object... args) throws EvaluationException {\n    // we can't use Evaluators similar method cause we find methods in Object, but invoke them for Array\n    ClassType objectType = (ClassType)Evaluator.findClassType(\"java.lang.Object\", myThreadReference.virtualMachine());\n    final Method method = Evaluator.findMethod(objectType, name, jniSignature);\n\n    final List<Value> argValues = MirrorUtil.getValues(myThreadReference, args);\n\n    return handleInvocationExceptions(new Invocatable<IValueProxy>() {\n      @Override\n      public IValueProxy invoke() throws InvocationException, InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException {\n        Value result = getArrayValue().invokeMethod(myThreadReference, method, argValues, 0);\n        return MirrorUtil.getValueProxy(result, myThreadReference);\n      }\n    });\n  }","commit_id":"55ae9f3ef996befd19d8dc9834385aab2f605bff","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static ClassType findClassType(String className, VirtualMachine virtualMachine) throws InvalidEvaluatedExpressionException {\n    List<ReferenceType> classes = virtualMachine.classesByName(className);\n    if (classes.size() == 0) {\n      throw new InvalidEvaluatedExpressionException(\"Could not find class \" + className + \".\");\n    }\n    ClassType referenceType = (ClassType) classes.get(0);\n    return referenceType;\n  }","id":46139,"modified_method":"public static ReferenceType findClassType(String className, VirtualMachine virtualMachine) throws InvalidEvaluatedExpressionException {\n    List<ReferenceType> classes = virtualMachine.classesByName(className);\n    if (classes.size() == 0) {\n      throw new InvalidEvaluatedExpressionException(\"Could not find class \" + className + \".\");\n    }\n    return classes.get(0);\n  }","commit_id":"55ae9f3ef996befd19d8dc9834385aab2f605bff","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static boolean isInstanceOf(final Type what, final String ofWhat, final VirtualMachine machine) throws EvaluationException {\n    if (ofWhat.equals(\"Ljava/lang/Object;\")) return true;\n    return handleInvocationExceptions(new Invocatable<Boolean>() {\n      @Override\n      public Boolean invoke() throws InvocationException, InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException, EvaluationException {\n        if (ofWhat.startsWith(\"[\")) {\n          if (!(what instanceof ArrayType)) {\n            return false;\n          }\n          return isInstanceOf(((ArrayType) what).componentType(), ofWhat.substring(1), machine);\n        } else if (ofWhat.startsWith(\"L\")) {\n          if (!(what instanceof ClassType)) {\n            return false;\n          }\n          ClassType type = findClassType(ofWhat.substring(1, ofWhat.length() - 1), machine);\n\n          ClassType whatClassType = (ClassType) what;\n          do {\n            if (type.equals(whatClassType)) return true;\n            whatClassType = whatClassType.superclass();\n          } while (whatClassType != null);\n          return false;\n        }\n        return false; \n      }\n    });\n  }","id":46140,"modified_method":"public static boolean isInstanceOf(final Type what, final String ofWhat, final VirtualMachine machine) throws EvaluationException {\n    if (ofWhat.equals(\"Ljava/lang/Object;\")) return true;\n    return handleInvocationExceptions(new Invocatable<Boolean>() {\n      @Override\n      public Boolean invoke() throws InvocationException, InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException, EvaluationException {\n        if (ofWhat.startsWith(\"[\")) {\n          if (!(what instanceof ArrayType)) {\n            return false;\n          }\n          return isInstanceOf(((ArrayType) what).componentType(), ofWhat.substring(1), machine);\n        } else if (ofWhat.startsWith(\"L\")) {\n          if (!(what instanceof ClassType)) {\n            return false;\n          }\n          ReferenceType type = findClassType(ofWhat.substring(1, ofWhat.length() - 1), machine);\n\n          ClassType whatClassType = (ClassType) what;\n          if (type instanceof InterfaceType) {\n            return whatClassType.allInterfaces().contains((InterfaceType)type);\n          }\n\n          do {\n            if (type.equals(whatClassType)) return true;\n            whatClassType = whatClassType.superclass();\n          } while (whatClassType != null);\n          return false;\n        }\n        return false; \n      }\n    });\n  }","commit_id":"55ae9f3ef996befd19d8dc9834385aab2f605bff","url":"https://github.com/JetBrains/MPS"},{"original_method":"@NotNull\n  protected IValueProxy invokeStatic(String className, String name, String jniSignature, Object... args) throws EvaluationException {\n    final ClassType referenceType = findClassType(className, getVM());\n    final Method method = findMethod(referenceType, name, jniSignature);\n\n    final List<Value> argValues = MirrorUtil.getValues(getThreadReference(), args);\n\n    return handleInvocationExceptions(new Invocatable<IValueProxy>() {\n      @Override\n      public IValueProxy invoke() throws InvocationException, InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException {\n        Value result = referenceType.invokeMethod(getThreadReference(), method, argValues, 0);\n        return MirrorUtil.getValueProxy(result, getThreadReference());\n      }\n    });\n  }","id":46141,"modified_method":"@NotNull\n  protected IValueProxy invokeStatic(String className, String name, String jniSignature, Object... args) throws EvaluationException {\n    final ClassType referenceType = (ClassType) findClassType(className, getVM());\n    final Method method = findMethod(referenceType, name, jniSignature);\n\n    final List<Value> argValues = MirrorUtil.getValues(getThreadReference(), args);\n\n    return handleInvocationExceptions(new Invocatable<IValueProxy>() {\n      @Override\n      public IValueProxy invoke() throws InvocationException, InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException {\n        Value result = referenceType.invokeMethod(getThreadReference(), method, argValues, 0);\n        return MirrorUtil.getValueProxy(result, getThreadReference());\n      }\n    });\n  }","commit_id":"55ae9f3ef996befd19d8dc9834385aab2f605bff","url":"https://github.com/JetBrains/MPS"},{"original_method":"@NotNull\n  protected IValueProxy getStaticFieldValue(String className, String fieldName) throws InvalidEvaluatedExpressionException {\n    ClassType referenceType = findClassType(className, getVM());\n    Field field = findField(referenceType, fieldName);\n    assert field.isStatic();\n    Value result = referenceType.getValue(field);\n    return MirrorUtil.getValueProxy(result, getThreadReference());\n  }","id":46142,"modified_method":"@NotNull\n  protected IValueProxy getStaticFieldValue(String className, String fieldName) throws InvalidEvaluatedExpressionException {\n    ClassType referenceType = (ClassType)findClassType(className, getVM());\n    Field field = findField(referenceType, fieldName);\n    assert field.isStatic();\n    Value result = referenceType.getValue(field);\n    return MirrorUtil.getValueProxy(result, getThreadReference());\n  }","commit_id":"55ae9f3ef996befd19d8dc9834385aab2f605bff","url":"https://github.com/JetBrains/MPS"},{"original_method":"@NotNull\n  protected IObjectValueProxy invokeConstructor(String className, String jniSignature, Object... args) throws EvaluationException {\n    // TODO duplication in code\n    final ClassType referenceType = findClassType(className, getVM());\n    final Method constructor = findConstructor(referenceType, jniSignature);\n\n    final List<Value> argValues = MirrorUtil.getValues(getThreadReference(), args);\n\n    return handleInvocationExceptions(new Invocatable<IObjectValueProxy>() {\n      @Override\n      public IObjectValueProxy invoke() throws InvocationException, InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException {\n        Value result = referenceType.newInstance(getThreadReference(), constructor, argValues, 0);\n        return (IObjectValueProxy) MirrorUtil.getValueProxy(result, getThreadReference());\n      }\n    });\n  }","id":46143,"modified_method":"@NotNull\n  protected IObjectValueProxy invokeConstructor(String className, String jniSignature, Object... args) throws EvaluationException {\n    // TODO duplication in code\n    final ClassType referenceType = (ClassType)findClassType(className, getVM());\n    final Method constructor = findConstructor(referenceType, jniSignature);\n\n    final List<Value> argValues = MirrorUtil.getValues(getThreadReference(), args);\n\n    return handleInvocationExceptions(new Invocatable<IObjectValueProxy>() {\n      @Override\n      public IObjectValueProxy invoke() throws InvocationException, InvalidTypeException, ClassNotLoadedException, IncompatibleThreadStateException {\n        Value result = referenceType.newInstance(getThreadReference(), constructor, argValues, 0);\n        return (IObjectValueProxy) MirrorUtil.getValueProxy(result, getThreadReference());\n      }\n    });\n  }","commit_id":"55ae9f3ef996befd19d8dc9834385aab2f605bff","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean handleMessage(Message m) {\n\t\tPeerNode source = (PeerNode)m.getSource();\n\t\tif(source == null) {\n\t\t\t// Node has been disconnected and garbage collected already! Ouch.\n\t\t\treturn true;\n\t\t}\n\t\tif(logMINOR) Logger.minor(this, \"Dispatching \"+m+\" from \"+source);\n\t\tif(callback != null) {\n\t\t\ttry {\n\t\t\t\tcallback.snoop(m, node);\n\t\t\t} catch (Throwable t) {\n\t\t\t\tLogger.error(this, \"Callback threw \"+t, t);\n\t\t\t}\n\t\t}\n\t\tMessageType spec = m.getSpec();\n\t\tif(spec == DMT.FNPPing) {\n\t\t\t// Send an FNPPong\n\t\t\tMessage reply = DMT.createFNPPong(m.getInt(DMT.PING_SEQNO));\n\t\t\ttry {\n\t\t\t\tsource.sendAsync(reply, null, pingCounter); // nothing we can do if can't contact source\n\t\t\t} catch (NotConnectedException e) {\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Lost connection replying to \"+m);\n\t\t\t}\n\t\t\treturn true;\n\t\t} else if (spec == DMT.FNPStoreSecret) {\n\t\t\treturn node.netid.handleStoreSecret(m);\n\t\t} else if(spec == DMT.FNPSecretPing) {\n\t\t\treturn node.netid.handleSecretPing(m);\n\t\t} else if(spec == DMT.FNPDetectedIPAddress) {\n\t\t\tPeer p = (Peer) m.getObject(DMT.EXTERNAL_ADDRESS);\n\t\t\tsource.setRemoteDetectedPeer(p);\n\t\t\tnode.ipDetector.redetectAddress();\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPTime) {\n\t\t\treturn handleTime(m, source);\n\t\t} else if(spec == DMT.FNPUptime) {\n\t\t\treturn handleUptime(m, source);\n\t\t} else if(spec == DMT.FNPSentPackets) {\n\t\t\tsource.handleSentPackets(m);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPVoid) {\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPDisconnect) {\n\t\t\thandleDisconnect(m, source);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.nodeToNodeMessage) {\n\t\t\tnode.receivedNodeToNodeMessage(m, source);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.UOMAnnounce && node.nodeUpdater.isEnabled() && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleAnnounce(m, source);\n\t\t} else if(spec == DMT.UOMRequestRevocation && node.nodeUpdater.isEnabled() && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleRequestRevocation(m, source);\n\t\t} else if(spec == DMT.UOMSendingRevocation && node.nodeUpdater.isEnabled() && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleSendingRevocation(m, source);\n\t\t} else if(spec == DMT.UOMRequestMain && node.nodeUpdater.isEnabled() && source.isRealConnection()) {\n\t\t\tnode.nodeUpdater.uom.handleRequestJar(m, source, false);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.UOMRequestExtra && node.nodeUpdater.isEnabled() && source.isRealConnection()) {\n\t\t\tnode.nodeUpdater.uom.handleRequestJar(m, source, true);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.UOMSendingMain && node.nodeUpdater.isEnabled() && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleSendingMain(m, source);\n\t\t} else if(spec == DMT.UOMSendingExtra && node.nodeUpdater.isEnabled() && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleSendingExt(m, source);\n\t\t} else if(spec == DMT.FNPOpennetAnnounceRequest) {\n\t\t\treturn handleAnnounceRequest(m, source);\n\t\t} else if(spec == DMT.FNPRoutingStatus) {\n\t\t\tif(source instanceof DarknetPeerNode) {\n\t\t\t\tboolean value = m.getBoolean(DMT.ROUTING_ENABLED);\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"The peer (\"+source+\") asked us to set routing=\"+value);\n\t\t\t\t((DarknetPeerNode)source).setRoutingStatus(value, false);\n\t\t\t}\n\t\t\t// We claim it in any case\n\t\t\treturn true;\n\t\t} else if(source.isRealConnection() && spec == DMT.FNPLocChangeNotificationNew) {\n\t\t\tdouble newLoc = m.getDouble(DMT.LOCATION);\n\t\t\tShortBuffer buffer = ((ShortBuffer) m.getObject(DMT.PEER_LOCATIONS));\n\t\t\tdouble[] locs = Fields.bytesToDoubles(buffer.getData());\n\t\t\t\n\t\t\t/**\n\t\t\t * Do *NOT* remove the sanity check below! \n\t\t\t * @see http://archives.freenetproject.org/message/20080718.144240.359e16d3.en.html\n\t\t\t */\n\t\t\tif((OpennetManager.MAX_PEERS_FOR_SCALING < locs.length) && (source.isOpennet())) {\n\t\t\t\tif(locs.length > OpennetManager.PANIC_MAX_PEERS) {\n\t\t\t\t\t// This can't happen by accident\n\t\t\t\t\tLogger.error(this, \"We received \"+locs.length+ \" locations from \"+source.toString()+\"! That should *NOT* happen! Possible attack!\");\n\t\t\t\t\tsource.forceDisconnect(true);\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\t// A few extra can happen by accident. Just use the first 20.\n\t\t\t\t\tLogger.normal(this, \"Too many locations from \"+source.toString()+\" : \"+locs.length+\" could be an accident, using the first \"+OpennetManager.MAX_PEERS_FOR_SCALING);\n\t\t\t\t\tdouble[] firstLocs = new double[OpennetManager.MAX_PEERS_FOR_SCALING];\n\t\t\t\t\tSystem.arraycopy(locs, 0, firstLocs, 0, OpennetManager.MAX_PEERS_FOR_SCALING);\n\t\t\t\t\tlocs = firstLocs;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// We are on darknet and we trust our peers OR we are on opennet\n\t\t\t// and the amount of locations sent to us seems reasonable\n\t\t\tsource.updateLocation(newLoc, locs);\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif(!source.isRoutable()) {\n\t\t\tif(logDEBUG) Logger.debug(this, \"Not routable\");\n\n\t\t\tif(spec == DMT.FNPCHKDataRequest) {\n\t\t\t\trejectRequest(m, node.nodeStats.chkRequestCtr);\n\t\t\t} else if(spec == DMT.FNPSSKDataRequest) {\n\t\t\t\trejectRequest(m, node.nodeStats.sskRequestCtr);\n\t\t\t} else if(spec == DMT.FNPInsertRequest) {\n\t\t\t\trejectRequest(m, node.nodeStats.chkInsertCtr);\n\t\t\t} else if(spec == DMT.FNPSSKInsertRequest) {\n\t\t\t\trejectRequest(m, node.nodeStats.sskInsertCtr);\n\t\t\t} else if(spec == DMT.FNPSSKInsertRequestNew) {\n\t\t\t\trejectRequest(m, node.nodeStats.sskInsertCtr);\n\t\t\t} else if(spec == DMT.FNPGetOfferedKey) {\n\t\t\t\trejectRequest(m, node.failureTable.senderCounter);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tif(spec == DMT.FNPNetworkID) {\n\t\t\tsource.handleFNPNetworkID(m);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPSwapRequest) {\n\t\t\treturn node.lm.handleSwapRequest(m, source);\n\t\t} else if(spec == DMT.FNPSwapReply) {\n\t\t\treturn node.lm.handleSwapReply(m, source);\n\t\t} else if(spec == DMT.FNPSwapRejected) {\n\t\t\treturn node.lm.handleSwapRejected(m, source);\n\t\t} else if(spec == DMT.FNPSwapCommit) {\n\t\t\treturn node.lm.handleSwapCommit(m, source);\n\t\t} else if(spec == DMT.FNPSwapComplete) {\n\t\t\treturn node.lm.handleSwapComplete(m, source);\n\t\t} else if(spec == DMT.FNPCHKDataRequest) {\n\t\t\treturn handleDataRequest(m, source, false);\n\t\t} else if(spec == DMT.FNPSSKDataRequest) {\n\t\t\treturn handleDataRequest(m, source, true);\n\t\t} else if(spec == DMT.FNPInsertRequest) {\n\t\t\treturn handleInsertRequest(m, source, false);\n\t\t} else if(spec == DMT.FNPSSKInsertRequest) {\n\t\t\treturn handleInsertRequest(m, source, true);\n\t\t} else if(spec == DMT.FNPSSKInsertRequestNew) {\n\t\t\treturn handleInsertRequest(m, source, true);\n\t\t} else if(spec == DMT.FNPRHProbeRequest) {\n\t\t\treturn handleProbeRequest(m, source);\n\t\t} else if(spec == DMT.FNPRoutedPing) {\n\t\t\treturn handleRouted(m, source);\n\t\t} else if(spec == DMT.FNPRoutedPong) {\n\t\t\treturn handleRoutedReply(m);\n\t\t} else if(spec == DMT.FNPRoutedRejected) {\n\t\t\treturn handleRoutedRejected(m);\n\t\t\t// FIXME implement threaded probe requests of various kinds.\n\t\t\t// Old probe request code was a major pain, never really worked.\n\t\t\t// We should have threaded probe requests (for simple code),\n\t\t\t// and one for each routing strategy.\n//\t\t} else if(spec == DMT.FNPProbeRequest) {\n//\t\t\treturn handleProbeRequest(m, source);\n//\t\t} else if(spec == DMT.FNPProbeReply) {\n//\t\t\treturn handleProbeReply(m, source);\n//\t\t} else if(spec == DMT.FNPProbeRejected) {\n//\t\t\treturn handleProbeRejected(m, source);\n//\t\t} else if(spec == DMT.FNPProbeTrace) {\n//\t\t\treturn handleProbeTrace(m, source);\n\t\t} else if(spec == DMT.FNPOfferKey) {\n\t\t\treturn handleOfferKey(m, source);\n\t\t} else if(spec == DMT.FNPGetOfferedKey) {\n\t\t\treturn handleGetOfferedKey(m, source);\n\t\t} else if(spec == DMT.FNPPeerLoadStatusByte || spec == DMT.FNPPeerLoadStatusShort || spec == DMT.FNPPeerLoadStatusInt) {\n\t\t\treturn handlePeerLoadStatus(m, source);\n\t\t}\n\t\treturn false;\n\t}","id":46144,"modified_method":"public boolean handleMessage(Message m) {\n\t\tPeerNode source = (PeerNode)m.getSource();\n\t\tif(source == null) {\n\t\t\t// Node has been disconnected and garbage collected already! Ouch.\n\t\t\treturn true;\n\t\t}\n\t\tif(logMINOR) Logger.minor(this, \"Dispatching \"+m+\" from \"+source);\n\t\tif(callback != null) {\n\t\t\ttry {\n\t\t\t\tcallback.snoop(m, node);\n\t\t\t} catch (Throwable t) {\n\t\t\t\tLogger.error(this, \"Callback threw \"+t, t);\n\t\t\t}\n\t\t}\n\t\tMessageType spec = m.getSpec();\n\t\tif(spec == DMT.FNPPing) {\n\t\t\t// Send an FNPPong\n\t\t\tMessage reply = DMT.createFNPPong(m.getInt(DMT.PING_SEQNO));\n\t\t\ttry {\n\t\t\t\tsource.sendAsync(reply, null, pingCounter); // nothing we can do if can't contact source\n\t\t\t} catch (NotConnectedException e) {\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Lost connection replying to \"+m);\n\t\t\t}\n\t\t\treturn true;\n\t\t} else if (spec == DMT.FNPStoreSecret) {\n\t\t\treturn node.netid.handleStoreSecret(m);\n\t\t} else if(spec == DMT.FNPSecretPing) {\n\t\t\treturn node.netid.handleSecretPing(m);\n\t\t} else if(spec == DMT.FNPDetectedIPAddress) {\n\t\t\tPeer p = (Peer) m.getObject(DMT.EXTERNAL_ADDRESS);\n\t\t\tsource.setRemoteDetectedPeer(p);\n\t\t\tnode.ipDetector.redetectAddress();\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPTime) {\n\t\t\treturn handleTime(m, source);\n\t\t} else if(spec == DMT.FNPUptime) {\n\t\t\treturn handleUptime(m, source);\n\t\t} else if(spec == DMT.FNPSentPackets) {\n\t\t\tsource.handleSentPackets(m);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPVoid) {\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPDisconnect) {\n\t\t\thandleDisconnect(m, source);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.nodeToNodeMessage) {\n\t\t\tnode.receivedNodeToNodeMessage(m, source);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.UOMAnnounce && node.nodeUpdater.isEnabled() && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleAnnounce(m, source);\n\t\t} else if(spec == DMT.UOMRequestRevocation && node.nodeUpdater.isEnabled() && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleRequestRevocation(m, source);\n\t\t} else if(spec == DMT.UOMSendingRevocation && node.nodeUpdater.isEnabled() && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleSendingRevocation(m, source);\n\t\t} else if(spec == DMT.UOMRequestMain && node.nodeUpdater.isEnabled() && source.isRealConnection()) {\n\t\t\tnode.nodeUpdater.uom.handleRequestJar(m, source, false);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.UOMRequestExtra && node.nodeUpdater.isEnabled() && source.isRealConnection()) {\n\t\t\tnode.nodeUpdater.uom.handleRequestJar(m, source, true);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.UOMSendingMain && node.nodeUpdater.isEnabled() && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleSendingMain(m, source);\n\t\t} else if(spec == DMT.UOMSendingExtra && node.nodeUpdater.isEnabled() && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleSendingExt(m, source);\n\t\t} else if(spec == DMT.FNPOpennetAnnounceRequest) {\n\t\t\treturn handleAnnounceRequest(m, source);\n\t\t} else if(spec == DMT.FNPRoutingStatus) {\n\t\t\tif(source instanceof DarknetPeerNode) {\n\t\t\t\tboolean value = m.getBoolean(DMT.ROUTING_ENABLED);\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"The peer (\"+source+\") asked us to set routing=\"+value);\n\t\t\t\t((DarknetPeerNode)source).setRoutingStatus(value, false);\n\t\t\t}\n\t\t\t// We claim it in any case\n\t\t\treturn true;\n\t\t} else if(source.isRealConnection() && spec == DMT.FNPLocChangeNotificationNew) {\n\t\t\tdouble newLoc = m.getDouble(DMT.LOCATION);\n\t\t\tShortBuffer buffer = ((ShortBuffer) m.getObject(DMT.PEER_LOCATIONS));\n\t\t\tdouble[] locs = Fields.bytesToDoubles(buffer.getData());\n\t\t\t\n\t\t\t/**\n\t\t\t * Do *NOT* remove the sanity check below! \n\t\t\t * @see http://archives.freenetproject.org/message/20080718.144240.359e16d3.en.html\n\t\t\t */\n\t\t\tif((OpennetManager.MAX_PEERS_FOR_SCALING < locs.length) && (source.isOpennet())) {\n\t\t\t\tif(locs.length > OpennetManager.PANIC_MAX_PEERS) {\n\t\t\t\t\t// This can't happen by accident\n\t\t\t\t\tLogger.error(this, \"We received \"+locs.length+ \" locations from \"+source.toString()+\"! That should *NOT* happen! Possible attack!\");\n\t\t\t\t\tsource.forceDisconnect(true);\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\t// A few extra can happen by accident. Just use the first 20.\n\t\t\t\t\tLogger.normal(this, \"Too many locations from \"+source.toString()+\" : \"+locs.length+\" could be an accident, using the first \"+OpennetManager.MAX_PEERS_FOR_SCALING);\n\t\t\t\t\tdouble[] firstLocs = new double[OpennetManager.MAX_PEERS_FOR_SCALING];\n\t\t\t\t\tSystem.arraycopy(locs, 0, firstLocs, 0, OpennetManager.MAX_PEERS_FOR_SCALING);\n\t\t\t\t\tlocs = firstLocs;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// We are on darknet and we trust our peers OR we are on opennet\n\t\t\t// and the amount of locations sent to us seems reasonable\n\t\t\tsource.updateLocation(newLoc, locs);\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif(!source.isRoutable()) {\n\t\t\tif(logDEBUG) Logger.debug(this, \"Not routable\");\n\n\t\t\tif(spec == DMT.FNPCHKDataRequest) {\n\t\t\t\trejectRequest(m, node.nodeStats.chkRequestCtr);\n\t\t\t} else if(spec == DMT.FNPSSKDataRequest) {\n\t\t\t\trejectRequest(m, node.nodeStats.sskRequestCtr);\n\t\t\t} else if(spec == DMT.FNPInsertRequest) {\n\t\t\t\trejectRequest(m, node.nodeStats.chkInsertCtr);\n\t\t\t} else if(spec == DMT.FNPSSKInsertRequest) {\n\t\t\t\trejectRequest(m, node.nodeStats.sskInsertCtr);\n\t\t\t} else if(spec == DMT.FNPSSKInsertRequestNew) {\n\t\t\t\trejectRequest(m, node.nodeStats.sskInsertCtr);\n\t\t\t} else if(spec == DMT.FNPGetOfferedKey) {\n\t\t\t\trejectRequest(m, node.failureTable.senderCounter);\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tif(spec == DMT.FNPNetworkID) {\n\t\t\tsource.handleFNPNetworkID(m);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPSwapRequest) {\n\t\t\treturn node.lm.handleSwapRequest(m, source);\n\t\t} else if(spec == DMT.FNPSwapReply) {\n\t\t\treturn node.lm.handleSwapReply(m, source);\n\t\t} else if(spec == DMT.FNPSwapRejected) {\n\t\t\treturn node.lm.handleSwapRejected(m, source);\n\t\t} else if(spec == DMT.FNPSwapCommit) {\n\t\t\treturn node.lm.handleSwapCommit(m, source);\n\t\t} else if(spec == DMT.FNPSwapComplete) {\n\t\t\treturn node.lm.handleSwapComplete(m, source);\n\t\t} else if(spec == DMT.FNPCHKDataRequest) {\n\t\t\thandleDataRequest(m, source, false);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPSSKDataRequest) {\n\t\t\thandleDataRequest(m, source, true);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPInsertRequest) {\n\t\t\thandleInsertRequest(m, source, false);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPSSKInsertRequest) {\n\t\t\thandleInsertRequest(m, source, true);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPSSKInsertRequestNew) {\n\t\t\thandleInsertRequest(m, source, true);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPRHProbeRequest) {\n\t\t\treturn handleProbeRequest(m, source);\n\t\t} else if(spec == DMT.FNPRoutedPing) {\n\t\t\treturn handleRouted(m, source);\n\t\t} else if(spec == DMT.FNPRoutedPong) {\n\t\t\treturn handleRoutedReply(m);\n\t\t} else if(spec == DMT.FNPRoutedRejected) {\n\t\t\treturn handleRoutedRejected(m);\n\t\t\t// FIXME implement threaded probe requests of various kinds.\n\t\t\t// Old probe request code was a major pain, never really worked.\n\t\t\t// We should have threaded probe requests (for simple code),\n\t\t\t// and one for each routing strategy.\n//\t\t} else if(spec == DMT.FNPProbeRequest) {\n//\t\t\treturn handleProbeRequest(m, source);\n//\t\t} else if(spec == DMT.FNPProbeReply) {\n//\t\t\treturn handleProbeReply(m, source);\n//\t\t} else if(spec == DMT.FNPProbeRejected) {\n//\t\t\treturn handleProbeRejected(m, source);\n//\t\t} else if(spec == DMT.FNPProbeTrace) {\n//\t\t\treturn handleProbeTrace(m, source);\n\t\t} else if(spec == DMT.FNPOfferKey) {\n\t\t\treturn handleOfferKey(m, source);\n\t\t} else if(spec == DMT.FNPGetOfferedKey) {\n\t\t\treturn handleGetOfferedKey(m, source);\n\t\t} else if(spec == DMT.FNPPeerLoadStatusByte || spec == DMT.FNPPeerLoadStatusShort || spec == DMT.FNPPeerLoadStatusInt) {\n\t\t\treturn handlePeerLoadStatus(m, source);\n\t\t}\n\t\treturn false;\n\t}","commit_id":"a4bc3c4e56226a0f5ddc3091cbd8f109011ddadf","url":"https://github.com/freenet/fred"},{"original_method":"private boolean handleInsertRequest(Message m, PeerNode source, boolean isSSK) {\n\t\tByteCounter ctr = isSSK ? node.nodeStats.sskInsertCtr : node.nodeStats.chkInsertCtr;\n\t\tlong id = m.getLong(DMT.UID);\n\t\tif(node.recentlyCompleted(id)) {\n\t\t\tMessage rejected = DMT.createFNPRejectedLoop(id);\n\t\t\ttry {\n\t\t\t\tsource.sendAsync(rejected, null, ctr);\n\t\t\t} catch (NotConnectedException e) {\n\t\t\t\tLogger.normal(this, \"Rejecting insert request from \"+source.getPeer()+\": \"+e);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n        boolean realTimeFlag = DMT.getRealTimeFlag(m);\n\t\tInsertTag tag = new InsertTag(isSSK, InsertTag.START.REMOTE, source, realTimeFlag, id, node);\n\t\tif(!node.lockUID(id, isSSK, true, false, false, realTimeFlag, tag)) {\n\t\t\tif(logMINOR) Logger.minor(this, \"Could not lock ID \"+id+\" -> rejecting (already running)\");\n\t\t\tMessage rejected = DMT.createFNPRejectedLoop(id);\n\t\t\ttry {\n\t\t\t\tsource.sendAsync(rejected, null, ctr);\n\t\t\t} catch (NotConnectedException e) {\n\t\t\t\tLogger.normal(this, \"Rejecting insert request from \"+source.getPeer()+\": \"+e);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\tboolean preferInsert = Node.PREFER_INSERT_DEFAULT;\n\t\tboolean ignoreLowBackoff = Node.IGNORE_LOW_BACKOFF_DEFAULT;\n\t\tboolean forkOnCacheable = Node.FORK_ON_CACHEABLE_DEFAULT;\n\t\tMessage forkControl = m.getSubMessage(DMT.FNPSubInsertForkControl);\n\t\tif(forkControl != null)\n\t\t\tforkOnCacheable = forkControl.getBoolean(DMT.ENABLE_INSERT_FORK_WHEN_CACHEABLE);\n\t\tMessage lowBackoff = m.getSubMessage(DMT.FNPSubInsertIgnoreLowBackoff);\n\t\tif(lowBackoff != null)\n\t\t\tignoreLowBackoff = lowBackoff.getBoolean(DMT.IGNORE_LOW_BACKOFF);\n\t\tMessage preference = m.getSubMessage(DMT.FNPSubInsertPreferInsert);\n\t\tif(preference != null)\n\t\t\tpreferInsert = preference.getBoolean(DMT.PREFER_INSERT);\n\t\t// SSKs don't fix bwlimitDelayTime so shouldn't be accepted when overloaded.\n\t\tRejectReason rejectReason = nodeStats.shouldRejectRequest(!isSSK, true, isSSK, false, false, source, false, preferInsert, realTimeFlag);\n\t\tif(rejectReason != null) {\n\t\t\tLogger.normal(this, \"Rejecting insert from \"+source.getPeer()+\" preemptively because \"+rejectReason);\n\t\t\tMessage rejected = DMT.createFNPRejectedOverload(id, true, true, realTimeFlag);\n\t\t\tif(rejectReason.soft)\n\t\t\t\trejected.addSubMessage(DMT.createFNPRejectIsSoft());\n\t\t\ttry {\n\t\t\t\tsource.sendAsync(rejected, null, ctr);\n\t\t\t} catch (NotConnectedException e) {\n\t\t\t\tLogger.normal(this, \"Rejecting (overload) insert request from \"+source.getPeer()+\": \"+e);\n\t\t\t}\n\t\t\ttag.unlockHandler(rejectReason.soft);\n\t\t\treturn true;\n\t\t}\n\t\tlong now = System.currentTimeMillis();\n\t\tif(m.getSpec().equals(DMT.FNPSSKInsertRequest)) {\n\t\t\tNodeSSK key = (NodeSSK) m.getObject(DMT.FREENET_ROUTING_KEY);\n\t        byte[] data = ((ShortBuffer) m.getObject(DMT.DATA)).getData();\n\t        byte[] headers = ((ShortBuffer) m.getObject(DMT.BLOCK_HEADERS)).getData();\n\t        short htl = m.getShort(DMT.HTL);\n\t\t\tSSKInsertHandler rh = new SSKInsertHandler(key, data, headers, htl, source, id, node, now, tag, node.canWriteDatastoreInsert(htl), forkOnCacheable, preferInsert, ignoreLowBackoff, realTimeFlag);\n\t        rh.receivedBytes(m.receivedByteCount());\n\t\t\tnode.executor.execute(rh, \"SSKInsertHandler for \"+id+\" on \"+node.getDarknetPortNumber());\n\t\t} else if(m.getSpec().equals(DMT.FNPSSKInsertRequestNew)) {\n\t\t\tNodeSSK key = (NodeSSK) m.getObject(DMT.FREENET_ROUTING_KEY);\n\t\t\tshort htl = m.getShort(DMT.HTL);\n\t\t\tSSKInsertHandler rh = new SSKInsertHandler(key, null, null, htl, source, id, node, now, tag, node.canWriteDatastoreInsert(htl), forkOnCacheable, preferInsert, ignoreLowBackoff, realTimeFlag);\n\t        rh.receivedBytes(m.receivedByteCount());\n\t\t\tnode.executor.execute(rh, \"SSKInsertHandler for \"+id+\" on \"+node.getDarknetPortNumber());\n\t\t} else {\n\t\t\tCHKInsertHandler rh = new CHKInsertHandler(m, source, id, node, now, tag, forkOnCacheable, preferInsert, ignoreLowBackoff, realTimeFlag);\n\t\t\tnode.executor.execute(rh, \"CHKInsertHandler for \"+id+\" on \"+node.getDarknetPortNumber());\n\t\t}\n\t\tif(logMINOR) Logger.minor(this, \"Started InsertHandler for \"+id);\n\t\treturn true;\n\t}","id":46145,"modified_method":"private void handleInsertRequest(Message m, PeerNode source, boolean isSSK) {\n\t\tByteCounter ctr = isSSK ? node.nodeStats.sskInsertCtr : node.nodeStats.chkInsertCtr;\n\t\tlong id = m.getLong(DMT.UID);\n\t\tif(node.recentlyCompleted(id)) {\n\t\t\tMessage rejected = DMT.createFNPRejectedLoop(id);\n\t\t\ttry {\n\t\t\t\tsource.sendAsync(rejected, null, ctr);\n\t\t\t} catch (NotConnectedException e) {\n\t\t\t\tLogger.normal(this, \"Rejecting insert request from \"+source.getPeer()+\": \"+e);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n        boolean realTimeFlag = DMT.getRealTimeFlag(m);\n\t\tInsertTag tag = new InsertTag(isSSK, InsertTag.START.REMOTE, source, realTimeFlag, id, node);\n\t\tif(!node.lockUID(id, isSSK, true, false, false, realTimeFlag, tag)) {\n\t\t\tif(logMINOR) Logger.minor(this, \"Could not lock ID \"+id+\" -> rejecting (already running)\");\n\t\t\tMessage rejected = DMT.createFNPRejectedLoop(id);\n\t\t\ttry {\n\t\t\t\tsource.sendAsync(rejected, null, ctr);\n\t\t\t} catch (NotConnectedException e) {\n\t\t\t\tLogger.normal(this, \"Rejecting insert request from \"+source.getPeer()+\": \"+e);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tboolean preferInsert = Node.PREFER_INSERT_DEFAULT;\n\t\tboolean ignoreLowBackoff = Node.IGNORE_LOW_BACKOFF_DEFAULT;\n\t\tboolean forkOnCacheable = Node.FORK_ON_CACHEABLE_DEFAULT;\n\t\tMessage forkControl = m.getSubMessage(DMT.FNPSubInsertForkControl);\n\t\tif(forkControl != null)\n\t\t\tforkOnCacheable = forkControl.getBoolean(DMT.ENABLE_INSERT_FORK_WHEN_CACHEABLE);\n\t\tMessage lowBackoff = m.getSubMessage(DMT.FNPSubInsertIgnoreLowBackoff);\n\t\tif(lowBackoff != null)\n\t\t\tignoreLowBackoff = lowBackoff.getBoolean(DMT.IGNORE_LOW_BACKOFF);\n\t\tMessage preference = m.getSubMessage(DMT.FNPSubInsertPreferInsert);\n\t\tif(preference != null)\n\t\t\tpreferInsert = preference.getBoolean(DMT.PREFER_INSERT);\n\t\t// SSKs don't fix bwlimitDelayTime so shouldn't be accepted when overloaded.\n\t\tRejectReason rejectReason = nodeStats.shouldRejectRequest(!isSSK, true, isSSK, false, false, source, false, preferInsert, realTimeFlag);\n\t\tif(rejectReason != null) {\n\t\t\tLogger.normal(this, \"Rejecting insert from \"+source.getPeer()+\" preemptively because \"+rejectReason);\n\t\t\tMessage rejected = DMT.createFNPRejectedOverload(id, true, true, realTimeFlag);\n\t\t\tif(rejectReason.soft)\n\t\t\t\trejected.addSubMessage(DMT.createFNPRejectIsSoft());\n\t\t\ttry {\n\t\t\t\tsource.sendAsync(rejected, null, ctr);\n\t\t\t} catch (NotConnectedException e) {\n\t\t\t\tLogger.normal(this, \"Rejecting (overload) insert request from \"+source.getPeer()+\": \"+e);\n\t\t\t}\n\t\t\ttag.unlockHandler(rejectReason.soft);\n\t\t\treturn;\n\t\t}\n\t\tlong now = System.currentTimeMillis();\n\t\tif(m.getSpec().equals(DMT.FNPSSKInsertRequest)) {\n\t\t\tNodeSSK key = (NodeSSK) m.getObject(DMT.FREENET_ROUTING_KEY);\n\t        byte[] data = ((ShortBuffer) m.getObject(DMT.DATA)).getData();\n\t        byte[] headers = ((ShortBuffer) m.getObject(DMT.BLOCK_HEADERS)).getData();\n\t        short htl = m.getShort(DMT.HTL);\n\t\t\tSSKInsertHandler rh = new SSKInsertHandler(key, data, headers, htl, source, id, node, now, tag, node.canWriteDatastoreInsert(htl), forkOnCacheable, preferInsert, ignoreLowBackoff, realTimeFlag);\n\t        rh.receivedBytes(m.receivedByteCount());\n\t\t\tnode.executor.execute(rh, \"SSKInsertHandler for \"+id+\" on \"+node.getDarknetPortNumber());\n\t\t} else if(m.getSpec().equals(DMT.FNPSSKInsertRequestNew)) {\n\t\t\tNodeSSK key = (NodeSSK) m.getObject(DMT.FREENET_ROUTING_KEY);\n\t\t\tshort htl = m.getShort(DMT.HTL);\n\t\t\tSSKInsertHandler rh = new SSKInsertHandler(key, null, null, htl, source, id, node, now, tag, node.canWriteDatastoreInsert(htl), forkOnCacheable, preferInsert, ignoreLowBackoff, realTimeFlag);\n\t        rh.receivedBytes(m.receivedByteCount());\n\t\t\tnode.executor.execute(rh, \"SSKInsertHandler for \"+id+\" on \"+node.getDarknetPortNumber());\n\t\t} else {\n\t\t\tCHKInsertHandler rh = new CHKInsertHandler(m, source, id, node, now, tag, forkOnCacheable, preferInsert, ignoreLowBackoff, realTimeFlag);\n\t\t\tnode.executor.execute(rh, \"CHKInsertHandler for \"+id+\" on \"+node.getDarknetPortNumber());\n\t\t}\n\t\tif(logMINOR) Logger.minor(this, \"Started InsertHandler for \"+id);\n\t}","commit_id":"a4bc3c4e56226a0f5ddc3091cbd8f109011ddadf","url":"https://github.com/freenet/fred"},{"original_method":"/**\n\t * Handle an incoming FNPDataRequest.\n\t */\n\tprivate boolean handleDataRequest(Message m, PeerNode source, boolean isSSK) {\n\t\tlong id = m.getLong(DMT.UID);\n\t\tByteCounter ctr = isSSK ? node.nodeStats.sskRequestCtr : node.nodeStats.chkRequestCtr;\n\t\tif(node.recentlyCompleted(id)) {\n\t\t\tMessage rejected = DMT.createFNPRejectedLoop(id);\n\t\t\ttry {\n\t\t\t\tsource.sendAsync(rejected, null, ctr);\n\t\t\t} catch (NotConnectedException e) {\n\t\t\t\tLogger.normal(this, \"Rejecting data request (loop, finished): \"+e);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n        short htl = m.getShort(DMT.HTL);\n        Key key = (Key) m.getObject(DMT.FREENET_ROUTING_KEY);\n        boolean realTimeFlag = DMT.getRealTimeFlag(m);\n        final RequestTag tag = new RequestTag(isSSK, RequestTag.START.REMOTE, source, realTimeFlag, id, node);\n\t\tif(!node.lockUID(id, isSSK, false, false, false, realTimeFlag, tag)) {\n\t\t\tif(logMINOR) Logger.minor(this, \"Could not lock ID \"+id+\" -> rejecting (already running)\");\n\t\t\tMessage rejected = DMT.createFNPRejectedLoop(id);\n\t\t\ttry {\n\t\t\t\tsource.sendAsync(rejected, null, ctr);\n\t\t\t} catch (NotConnectedException e) {\n\t\t\t\tLogger.normal(this, \"Rejecting request from \"+source.getPeer()+\": \"+e);\n\t\t\t}\n\t\t\tnode.failureTable.onFinalFailure(key, null, htl, htl, -1, source);\n\t\t\treturn true;\n\t\t} else {\n\t\t\tif(logMINOR) Logger.minor(this, \"Locked \"+id);\n\t\t}\n\t\t\n\t\t// There are at least 2 threads that call this function.\n\t\t// DO NOT reuse the meta object, unless on a per-thread basis.\n\t\t// Object allocation is pretty cheap in modern Java anyway...\n\t\t// If we do reuse it, call reset().\n\t\tBlockMetadata meta = new BlockMetadata();\n\t\tKeyBlock block = node.fetch(key, false, false, false, false, meta);\n\t\tif(block != null)\n\t\t\ttag.setNotRoutedOnwards();\n\t\t\n\t\tRejectReason rejectReason = nodeStats.shouldRejectRequest(!isSSK, false, isSSK, false, false, source, block != null, false, realTimeFlag);\n\t\tif(rejectReason != null) {\n\t\t\t// can accept 1 CHK request every so often, but not with SSKs because they aren't throttled so won't sort out bwlimitDelayTime, which was the whole reason for accepting them when overloaded...\n\t\t\tLogger.normal(this, \"Rejecting \"+(isSSK ? \"SSK\" : \"CHK\")+\" request from \"+source.getPeer()+\" preemptively because \"+rejectReason);\n\t\t\tMessage rejected = DMT.createFNPRejectedOverload(id, true, true, realTimeFlag);\n\t\t\tif(rejectReason.soft)\n\t\t\t\trejected.addSubMessage(DMT.createFNPRejectIsSoft());\n\t\t\ttry {\n\t\t\t\tsource.sendAsync(rejected, null, ctr);\n\t\t\t} catch (NotConnectedException e) {\n\t\t\t\tLogger.normal(this, \"Rejecting (overload) data request from \"+source.getPeer()+\": \"+e);\n\t\t\t}\n\t\t\ttag.setRejected();\n\t\t\ttag.unlockHandler(rejectReason.soft);\n\t\t\t// Do not tell failure table.\n\t\t\t// Otherwise an attacker can flood us with requests very cheaply and purge our\n\t\t\t// failure table even though we didn't accept any of them.\n\t\t\treturn true;\n\t\t}\n\t\tnodeStats.reportIncomingRequestLocation(key.toNormalizedDouble());\n\t\t//if(!node.lockUID(id)) return false;\n\t\tRequestHandler rh = new RequestHandler(m, source, id, node, htl, key, tag, block, realTimeFlag);\n\t\tnode.executor.execute(rh, \"RequestHandler for UID \"+id+\" on \"+node.getDarknetPortNumber());\n\t\treturn true;\n\t}","id":46146,"modified_method":"/**\n\t * Handle an incoming FNPDataRequest.\n\t */\n\tprivate void handleDataRequest(Message m, PeerNode source, boolean isSSK) {\n\t\tlong id = m.getLong(DMT.UID);\n\t\tByteCounter ctr = isSSK ? node.nodeStats.sskRequestCtr : node.nodeStats.chkRequestCtr;\n\t\tif(node.recentlyCompleted(id)) {\n\t\t\tMessage rejected = DMT.createFNPRejectedLoop(id);\n\t\t\ttry {\n\t\t\t\tsource.sendAsync(rejected, null, ctr);\n\t\t\t} catch (NotConnectedException e) {\n\t\t\t\tLogger.normal(this, \"Rejecting data request (loop, finished): \"+e);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n        short htl = m.getShort(DMT.HTL);\n        Key key = (Key) m.getObject(DMT.FREENET_ROUTING_KEY);\n        boolean realTimeFlag = DMT.getRealTimeFlag(m);\n        final RequestTag tag = new RequestTag(isSSK, RequestTag.START.REMOTE, source, realTimeFlag, id, node);\n\t\tif(!node.lockUID(id, isSSK, false, false, false, realTimeFlag, tag)) {\n\t\t\tif(logMINOR) Logger.minor(this, \"Could not lock ID \"+id+\" -> rejecting (already running)\");\n\t\t\tMessage rejected = DMT.createFNPRejectedLoop(id);\n\t\t\ttry {\n\t\t\t\tsource.sendAsync(rejected, null, ctr);\n\t\t\t} catch (NotConnectedException e) {\n\t\t\t\tLogger.normal(this, \"Rejecting request from \"+source.getPeer()+\": \"+e);\n\t\t\t}\n\t\t\tnode.failureTable.onFinalFailure(key, null, htl, htl, -1, source);\n\t\t\treturn;\n\t\t} else {\n\t\t\tif(logMINOR) Logger.minor(this, \"Locked \"+id);\n\t\t}\n\t\t\n\t\t// There are at least 2 threads that call this function.\n\t\t// DO NOT reuse the meta object, unless on a per-thread basis.\n\t\t// Object allocation is pretty cheap in modern Java anyway...\n\t\t// If we do reuse it, call reset().\n\t\tBlockMetadata meta = new BlockMetadata();\n\t\tKeyBlock block = node.fetch(key, false, false, false, false, meta);\n\t\tif(block != null)\n\t\t\ttag.setNotRoutedOnwards();\n\t\t\n\t\tRejectReason rejectReason = nodeStats.shouldRejectRequest(!isSSK, false, isSSK, false, false, source, block != null, false, realTimeFlag);\n\t\tif(rejectReason != null) {\n\t\t\t// can accept 1 CHK request every so often, but not with SSKs because they aren't throttled so won't sort out bwlimitDelayTime, which was the whole reason for accepting them when overloaded...\n\t\t\tLogger.normal(this, \"Rejecting \"+(isSSK ? \"SSK\" : \"CHK\")+\" request from \"+source.getPeer()+\" preemptively because \"+rejectReason);\n\t\t\tMessage rejected = DMT.createFNPRejectedOverload(id, true, true, realTimeFlag);\n\t\t\tif(rejectReason.soft)\n\t\t\t\trejected.addSubMessage(DMT.createFNPRejectIsSoft());\n\t\t\ttry {\n\t\t\t\tsource.sendAsync(rejected, null, ctr);\n\t\t\t} catch (NotConnectedException e) {\n\t\t\t\tLogger.normal(this, \"Rejecting (overload) data request from \"+source.getPeer()+\": \"+e);\n\t\t\t}\n\t\t\ttag.setRejected();\n\t\t\ttag.unlockHandler(rejectReason.soft);\n\t\t\t// Do not tell failure table.\n\t\t\t// Otherwise an attacker can flood us with requests very cheaply and purge our\n\t\t\t// failure table even though we didn't accept any of them.\n\t\t\treturn;\n\t\t}\n\t\tnodeStats.reportIncomingRequestLocation(key.toNormalizedDouble());\n\t\t//if(!node.lockUID(id)) return false;\n\t\tRequestHandler rh = new RequestHandler(m, source, id, node, htl, key, tag, block, realTimeFlag);\n\t\tnode.executor.execute(rh, \"RequestHandler for UID \"+id+\" on \"+node.getDarknetPortNumber());\n\t}","commit_id":"a4bc3c4e56226a0f5ddc3091cbd8f109011ddadf","url":"https://github.com/freenet/fred"},{"original_method":"public static SortedMap<String, Properties> findComponents(CamelContext camelContext, Enumeration<URL> componentDescriptionIter)\n        throws LoadPropertiesException {\n\n        SortedMap<String, Properties> map = new TreeMap<String, Properties>();\n        while (componentDescriptionIter != null && componentDescriptionIter.hasMoreElements()) {\n            URL url = componentDescriptionIter.nextElement();\n            try {\n                Properties properties = new Properties();\n                properties.load(url.openStream());\n                String names = properties.getProperty(\"components\");\n                if (names != null) {\n                    StringTokenizer tok = new StringTokenizer(names);\n                    while (tok.hasMoreTokens()) {\n                        String name = tok.nextToken();\n                        map.put(name, properties);\n                    }\n                }\n            } catch (IOException e) {\n                throw new LoadPropertiesException(url, e);\n            }\n        }\n\n        // lets see what other components are in the registry\n        Map<String, Component> beanMap = camelContext.getRegistry().findByTypeWithName(Component.class);\n        Set<Map.Entry<String, Component>> entries = beanMap.entrySet();\n        for (Map.Entry<String, Component> entry : entries) {\n            String name = entry.getKey();\n            if (!map.containsKey(name)) {\n                Properties properties = new Properties();\n                Component component = entry.getValue();\n                if (component != null) {\n                    properties.put(\"component\", component);\n                    properties.put(\"class\", component.getClass().getName());\n                    map.put(name, properties);\n                }\n            }\n        }\n        return map;\n    }","id":46147,"modified_method":"public static SortedMap<String, Properties> findComponents(CamelContext camelContext, Enumeration<URL> componentDescriptionIter)\n        throws LoadPropertiesException {\n\n        SortedMap<String, Properties> map = new TreeMap<String, Properties>();\n        while (componentDescriptionIter != null && componentDescriptionIter.hasMoreElements()) {\n            URL url = componentDescriptionIter.nextElement();\n            try {\n                Properties properties = new Properties();\n                properties.load(url.openStream());\n                String names = properties.getProperty(\"components\");\n                if (names != null) {\n                    StringTokenizer tok = new StringTokenizer(names);\n                    while (tok.hasMoreTokens()) {\n                        String name = tok.nextToken();\n\n                        // try to find the class name for this component\n                        String className = null;\n                        InputStream is = null;\n                        try {\n                            is = camelContext.getClassResolver().loadResourceAsStream(COMPONENT_BASE + name);\n                            if (is != null) {\n                                Properties compProperties = new Properties();\n                                compProperties.load(is);\n                                if (!compProperties.isEmpty()) {\n                                    className = compProperties.getProperty(\"class\");\n                                }\n                            }\n                        } catch (Exception e) {\n                            // ignore\n                        } finally {\n                            IOHelper.close(is);\n                        }\n\n                        // inherit properties we loaded first, as it has maven details\n                        Properties prop = new Properties();\n                        prop.putAll(properties);\n                        if (camelContext.hasComponent(name) != null) {\n                            prop.put(\"component\", camelContext.getComponent(name));\n                        }\n                        if (className != null) {\n                            prop.put(\"class\", className);\n                        }\n                        prop.put(\"name\", name);\n                        map.put(name, prop);\n                    }\n                }\n            } catch (IOException e) {\n                throw new LoadPropertiesException(url, e);\n            }\n        }\n\n        // lets see what other components are registered on camel context\n        List<String> names = camelContext.getComponentNames();\n        for (String name : names) {\n            if (!map.containsKey(name)) {\n                Component component = camelContext.getComponent(name);\n                if (component != null) {\n                    Properties properties = new Properties();\n                    properties.put(\"component\", component);\n                    properties.put(\"class\", component.getClass().getName());\n                    properties.put(\"name\", name);\n                    map.put(name, properties);\n                }\n            }\n        }\n\n        // lets see what other components are in the registry\n        Map<String, Component> beanMap = camelContext.getRegistry().findByTypeWithName(Component.class);\n        Set<Map.Entry<String, Component>> entries = beanMap.entrySet();\n        for (Map.Entry<String, Component> entry : entries) {\n            String name = entry.getKey();\n            if (!map.containsKey(name)) {\n                Component component = entry.getValue();\n                if (component != null) {\n                    Properties properties = new Properties();\n                    properties.put(\"component\", name);\n                    properties.put(\"class\", component.getClass().getName());\n                    properties.put(\"name\", name);\n                    map.put(name, properties);\n                }\n            }\n        }\n        return map;\n    }","commit_id":"24f8cc4ced9748e075d7c1201b375e36cd54d755","url":"https://github.com/apache/camel"},{"original_method":"/**\n     * Finds all possible Components on the classpath and Registry\n     */\n    public static SortedMap<String, Properties> findComponents(CamelContext camelContext) throws LoadPropertiesException {\n        Enumeration<URL> iter = camelContext.getClassResolver().loadResourcesAsURL(COMPONENT_DESCRIPTOR);\n        return findComponents(camelContext, iter);\n    }","id":46148,"modified_method":"/**\n     * Finds all possible Components on the classpath, already registered in {@link org.apache.camel.CamelContext},\n     * and from the {@link org.apache.camel.spi.Registry}.\n     */\n    public static SortedMap<String, Properties> findComponents(CamelContext camelContext) throws LoadPropertiesException {\n        Enumeration<URL> iter = camelContext.getClassResolver().loadResourcesAsURL(COMPONENT_DESCRIPTOR);\n        return findComponents(camelContext, iter);\n    }","commit_id":"24f8cc4ced9748e075d7c1201b375e36cd54d755","url":"https://github.com/apache/camel"},{"original_method":"public Map<String, Properties> findComponents() throws Exception {\n        return context.findComponents();\n    }","id":46149,"modified_method":"public Map<String, Properties> findComponents() throws Exception {\n        Map<String, Properties> answer = context.findComponents();\n        for (Map.Entry<String, Properties> entry : answer.entrySet()) {\n            // remove component as its not serializable over JMX\n            if (entry.getValue() != null) {\n                entry.getValue().remove(\"component\");\n            }\n        }\n        return answer;\n    }","commit_id":"24f8cc4ced9748e075d7c1201b375e36cd54d755","url":"https://github.com/apache/camel"},{"original_method":"public void testFindComponentsInClasspath() throws Exception {\n        // JMX tests dont work well on AIX CI servers (hangs them)\n        if (isPlatform(\"aix\")) {\n            return;\n        }\n\n        MBeanServer mbeanServer = getMBeanServer();\n\n        ObjectName on = ObjectName.getInstance(\"org.apache.camel:context=19-camel-1,type=context,name=\\\"camel-1\\\"\");\n\n        assertTrue(\"Should be registered\", mbeanServer.isRegistered(on));\n\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Properties> info = (Map<String, Properties>) mbeanServer.invoke(on, \"findComponents\", null, null);\n        assertNotNull(info);\n\n        assertEquals(22, info.size());\n        Properties prop = info.get(\"seda\");\n        assertNotNull(prop);\n        assertEquals(\"org.apache.camel\", prop.get(\"groupId\"));\n        assertEquals(\"camel-core\", prop.get(\"artifactId\"));\n    }","id":46150,"modified_method":"public void testFindComponentsInClasspath() throws Exception {\n        // JMX tests dont work well on AIX CI servers (hangs them)\n        if (isPlatform(\"aix\")) {\n            return;\n        }\n\n        MBeanServer mbeanServer = getMBeanServer();\n\n        ObjectName on = ObjectName.getInstance(\"org.apache.camel:context=19-camel-1,type=context,name=\\\"camel-1\\\"\");\n\n        assertTrue(\"Should be registered\", mbeanServer.isRegistered(on));\n\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Properties> info = (Map<String, Properties>) mbeanServer.invoke(on, \"findComponents\", null, null);\n        assertNotNull(info);\n\n        assertEquals(22, info.size());\n        Properties prop = info.get(\"seda\");\n        assertNotNull(prop);\n        assertEquals(\"seda\", prop.get(\"name\"));\n        assertEquals(\"org.apache.camel\", prop.get(\"groupId\"));\n        assertEquals(\"camel-core\", prop.get(\"artifactId\"));\n    }","commit_id":"24f8cc4ced9748e075d7c1201b375e36cd54d755","url":"https://github.com/apache/camel"},{"original_method":"public IssueQueryResult find(IssueQuery query) {\n    LOG.debug(\"IssueQuery : {}\", query);\n    SqlSession sqlSession = myBatis.openSession();\n    try {\n      // 1. Select all authorized root project ids for the user\n      Collection<Integer> rootProjectIds = authorizationDao.selectAuthorizedRootProjectsIds(UserSession.get().userId(), query.requiredRole(), sqlSession);\n\n      // 2. Select the authorized ids of all the issues that match the query\n      List<IssueDto> authorizedIssues = issueDao.selectIssueAndProjectIds(query, rootProjectIds, sqlSession);\n\n      // 3. Sort all authorized issues\n      List<IssueDto> authorizedSortedIssues = sort(authorizedIssues, query, authorizedIssues.size());\n\n      // 4. Apply pagination\n      Paging paging = Paging.create(query.pageSize(), query.pageIndex(), authorizedSortedIssues.size());\n      Set<Long> pagedIssueIds = pagedIssueIds(authorizedSortedIssues, paging);\n\n      // 5. Load issues and their related data (rules, components, projects, comments, action plans, ...) and sort then again\n      List<IssueDto> pagedIssues = issueDao.selectByIds(pagedIssueIds, sqlSession);\n      List<IssueDto> pagedSortedIssues = sort(pagedIssues, query, authorizedIssues.size());\n\n      Map<String, DefaultIssue> issuesByKey = newHashMap();\n      List<Issue> issues = newArrayList();\n      Set<Integer> ruleIds = Sets.newHashSet();\n      Set<Integer> componentIds = Sets.newHashSet();\n      Set<Integer> projectIds = Sets.newHashSet();\n      Set<String> actionPlanKeys = Sets.newHashSet();\n      Set<String> users = Sets.newHashSet();\n      for (IssueDto dto : pagedSortedIssues) {\n        DefaultIssue defaultIssue = dto.toDefaultIssue();\n        issuesByKey.put(dto.getKee(), defaultIssue);\n        issues.add(defaultIssue);\n        ruleIds.add(dto.getRuleId());\n        componentIds.add(dto.getResourceId());\n        projectIds.add(dto.getProjectId());\n        actionPlanKeys.add(dto.getActionPlanKey());\n        if (dto.getReporter() != null) {\n          users.add(dto.getReporter());\n        }\n        if (dto.getAssignee() != null) {\n          users.add(dto.getAssignee());\n        }\n      }\n      List<DefaultIssueComment> comments = issueChangeDao.selectCommentsByIssues(sqlSession, issuesByKey.keySet());\n      for (DefaultIssueComment comment : comments) {\n        DefaultIssue issue = issuesByKey.get(comment.issueKey());\n        issue.addComment(comment);\n        if (comment.userLogin() != null) {\n          users.add(comment.userLogin());\n        }\n      }\n\n      return new DefaultResults(issues,\n                                 findRules(ruleIds),\n                                 findComponents(componentIds),\n                                 findProjects(projectIds),\n                                 findActionPlans(actionPlanKeys),\n                                 findUsers(users),\n                                 paging,\n                                 false,\n                                 authorizedIssues.size() >= query.maxResults()\n                                 // TODO\n//        authorizedIssues.size() != allIssues.size()\n      );\n    } finally {\n      MyBatis.closeQuietly(sqlSession);\n    }\n  }","id":46151,"modified_method":"public IssueQueryResult find(IssueQuery query) {\n    LOG.debug(\"IssueQuery : {}\", query);\n    SqlSession sqlSession = myBatis.openSession();\n    try {\n      DefaultIssueQueryResult defaultIssueQueryResult = new DefaultIssueQueryResult();\n\n      // 1. Select all authorized root project ids for the user\n      Collection<Integer> rootProjectIds = authorizationDao.selectAuthorizedRootProjectsIds(UserSession.get().userId(), query.requiredRole(), sqlSession);\n\n      // 2. Select the authorized ids of all the issues that match the query\n      List<IssueDto> authorizedIssues = issueDao.selectIssueAndProjectIds(query, defaultIssueQueryResult, rootProjectIds, sqlSession);\n\n      // 3. Sort all authorized issues\n      List<IssueDto> authorizedSortedIssues = sort(authorizedIssues, query, authorizedIssues.size());\n\n      // 4. Apply pagination\n      Paging paging = Paging.create(query.pageSize(), query.pageIndex(), authorizedSortedIssues.size());\n      Set<Long> pagedIssueIds = pagedIssueIds(authorizedSortedIssues, paging);\n\n      // 5. Load issues and their related data (rules, components, projects, comments, action plans, ...) and sort then again\n      List<IssueDto> pagedIssues = issueDao.selectByIds(pagedIssueIds, sqlSession);\n      List<IssueDto> pagedSortedIssues = sort(pagedIssues, query, authorizedIssues.size());\n\n      Map<String, DefaultIssue> issuesByKey = newHashMap();\n      List<Issue> issues = newArrayList();\n      Set<Integer> ruleIds = Sets.newHashSet();\n      Set<Integer> componentIds = Sets.newHashSet();\n      Set<Integer> projectIds = Sets.newHashSet();\n      Set<String> actionPlanKeys = Sets.newHashSet();\n      Set<String> users = Sets.newHashSet();\n      for (IssueDto dto : pagedSortedIssues) {\n        DefaultIssue defaultIssue = dto.toDefaultIssue();\n        issuesByKey.put(dto.getKee(), defaultIssue);\n        issues.add(defaultIssue);\n        ruleIds.add(dto.getRuleId());\n        componentIds.add(dto.getResourceId());\n        projectIds.add(dto.getProjectId());\n        actionPlanKeys.add(dto.getActionPlanKey());\n        if (dto.getReporter() != null) {\n          users.add(dto.getReporter());\n        }\n        if (dto.getAssignee() != null) {\n          users.add(dto.getAssignee());\n        }\n      }\n      List<DefaultIssueComment> comments = issueChangeDao.selectCommentsByIssues(sqlSession, issuesByKey.keySet());\n      for (DefaultIssueComment comment : comments) {\n        DefaultIssue issue = issuesByKey.get(comment.issueKey());\n        issue.addComment(comment);\n        if (comment.userLogin() != null) {\n          users.add(comment.userLogin());\n        }\n      }\n\n      defaultIssueQueryResult.setIssues(issues)\n        .addRules(findRules(ruleIds))\n        .addComponents(findComponents(componentIds))\n        .addProjects(findProjects(projectIds))\n        .addActionPlans(findActionPlans(actionPlanKeys))\n        .addUsers(findUsers(users))\n        .setPaging(paging);\n\n      return defaultIssueQueryResult;\n    } finally {\n      MyBatis.closeQuietly(sqlSession);\n    }\n  }","commit_id":"b4cb1af3222587a6c7ead2f473eb84e23c75c727","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_find_paginate_result() {\n    when(authorizationDao.selectAuthorizedRootProjectsIds(anyInt(), anyString(), any(SqlSession.class)))\n      .thenReturn(newHashSet(100));\n\n    IssueQuery query = IssueQuery.builder().pageSize(1).pageIndex(1).build();\n\n    IssueDto issue1 = new IssueDto().setId(1L).setRuleId(50).setResourceId(123).setProjectId(100)\n      .setComponentKey_unit_test_only(\"Action.java\")\n      .setProjectKey_unit_test_only(\"struts\")\n      .setRuleKey_unit_test_only(\"squid\", \"AvoidCycle\")\n      .setStatus(\"OPEN\").setResolution(\"OPEN\");\n    IssueDto issue2 = new IssueDto().setId(2L).setRuleId(50).setResourceId(135).setProjectId(100)\n      .setComponentKey_unit_test_only(\"Phases.java\")\n      .setProjectKey_unit_test_only(\"struts\")\n      .setRuleKey_unit_test_only(\"squid\", \"AvoidCycle\")\n      .setStatus(\"OPEN\").setResolution(\"OPEN\");\n    List<IssueDto> dtoList = newArrayList(issue1, issue2);\n    when(issueDao.selectIssueAndProjectIds(eq(query), eq(newHashSet(100)), any(SqlSession.class))).thenReturn(dtoList);\n    when(issueDao.selectByIds(anyCollection(), any(SqlSession.class))).thenReturn(dtoList);\n\n    IssueQueryResult results = finder.find(query);\n    assertThat(results.paging().offset()).isEqualTo(0);\n    assertThat(results.paging().total()).isEqualTo(2);\n    assertThat(results.paging().pages()).isEqualTo(2);\n\n    // Only one result is expected because the limit is 1\n    verify(issueDao).selectByIds(eq(newHashSet(1L)), any(SqlSession.class));\n  }","id":46152,"modified_method":"@Test\n  public void should_find_paginate_result() {\n    when(authorizationDao.selectAuthorizedRootProjectsIds(anyInt(), anyString(), any(SqlSession.class)))\n      .thenReturn(newHashSet(100));\n\n    IssueQuery query = IssueQuery.builder().pageSize(1).pageIndex(1).build();\n\n    IssueDto issue1 = new IssueDto().setId(1L).setRuleId(50).setResourceId(123).setProjectId(100)\n      .setComponentKey_unit_test_only(\"Action.java\")\n      .setProjectKey_unit_test_only(\"struts\")\n      .setRuleKey_unit_test_only(\"squid\", \"AvoidCycle\")\n      .setStatus(\"OPEN\").setResolution(\"OPEN\");\n    IssueDto issue2 = new IssueDto().setId(2L).setRuleId(50).setResourceId(135).setProjectId(100)\n      .setComponentKey_unit_test_only(\"Phases.java\")\n      .setProjectKey_unit_test_only(\"struts\")\n      .setRuleKey_unit_test_only(\"squid\", \"AvoidCycle\")\n      .setStatus(\"OPEN\").setResolution(\"OPEN\");\n    List<IssueDto> dtoList = newArrayList(issue1, issue2);\n    when(issueDao.selectIssueAndProjectIds(eq(query), any(DefaultIssueQueryResult.class), eq(newHashSet(100)), any(SqlSession.class))).thenReturn(dtoList);\n    when(issueDao.selectByIds(anyCollection(), any(SqlSession.class))).thenReturn(dtoList);\n\n    IssueQueryResult results = finder.find(query);\n    assertThat(results.paging().offset()).isEqualTo(0);\n    assertThat(results.paging().total()).isEqualTo(2);\n    assertThat(results.paging().pages()).isEqualTo(2);\n\n    // Only one result is expected because the limit is 1\n    verify(issueDao).selectByIds(eq(newHashSet(1L)), any(SqlSession.class));\n  }","commit_id":"b4cb1af3222587a6c7ead2f473eb84e23c75c727","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_find_issues() {\n    when(authorizationDao.selectAuthorizedRootProjectsIds(anyInt(), anyString(), any(SqlSession.class)))\n      .thenReturn(newHashSet(100));\n    IssueQuery query = IssueQuery.builder().build();\n\n    IssueDto issue1 = new IssueDto().setId(1L).setRuleId(50).setResourceId(123).setProjectId(100)\n      .setComponentKey_unit_test_only(\"Action.java\")\n      .setProjectKey_unit_test_only(\"struts\")\n      .setRuleKey_unit_test_only(\"squid\", \"AvoidCycle\")\n      .setStatus(\"OPEN\").setResolution(\"OPEN\");\n    IssueDto issue2 = new IssueDto().setId(2L).setRuleId(50).setResourceId(123).setProjectId(100)\n      .setComponentKey_unit_test_only(\"Action.java\")\n      .setProjectKey_unit_test_only(\"struts\")\n      .setRuleKey_unit_test_only(\"squid\", \"AvoidCycle\")\n      .setStatus(\"OPEN\").setResolution(\"OPEN\");\n    List<IssueDto> dtoList = newArrayList(issue1, issue2);\n    when(issueDao.selectByIds(anyCollection(), any(SqlSession.class))).thenReturn(dtoList);\n\n    IssueQueryResult results = finder.find(query);\n    verify(issueDao).selectIssueAndProjectIds(eq(query), eq(newHashSet(100)), any(SqlSession.class));\n\n    assertThat(results.issues()).hasSize(2);\n    Issue issue = results.issues().iterator().next();\n    assertThat(issue.componentKey()).isEqualTo(\"Action.java\");\n    assertThat(issue.projectKey()).isEqualTo(\"struts\");\n    assertThat(issue.ruleKey().toString()).isEqualTo(\"squid:AvoidCycle\");\n    assertThat(results.securityExclusions()).isFalse();\n  }","id":46153,"modified_method":"@Test\n  public void should_find_issues() {\n    when(authorizationDao.selectAuthorizedRootProjectsIds(anyInt(), anyString(), any(SqlSession.class)))\n      .thenReturn(newHashSet(100));\n    IssueQuery query = IssueQuery.builder().build();\n\n    IssueDto issue1 = new IssueDto().setId(1L).setRuleId(50).setResourceId(123).setProjectId(100)\n      .setComponentKey_unit_test_only(\"Action.java\")\n      .setProjectKey_unit_test_only(\"struts\")\n      .setRuleKey_unit_test_only(\"squid\", \"AvoidCycle\")\n      .setStatus(\"OPEN\").setResolution(\"OPEN\");\n    IssueDto issue2 = new IssueDto().setId(2L).setRuleId(50).setResourceId(123).setProjectId(100)\n      .setComponentKey_unit_test_only(\"Action.java\")\n      .setProjectKey_unit_test_only(\"struts\")\n      .setRuleKey_unit_test_only(\"squid\", \"AvoidCycle\")\n      .setStatus(\"OPEN\").setResolution(\"OPEN\");\n    List<IssueDto> dtoList = newArrayList(issue1, issue2);\n    when(issueDao.selectByIds(anyCollection(), any(SqlSession.class))).thenReturn(dtoList);\n\n    IssueQueryResult results = finder.find(query);\n    verify(issueDao).selectIssueAndProjectIds(eq(query), any(DefaultIssueQueryResult.class), eq(newHashSet(100)), any(SqlSession.class));\n\n    assertThat(results.issues()).hasSize(2);\n    Issue issue = results.issues().iterator().next();\n    assertThat(issue.componentKey()).isEqualTo(\"Action.java\");\n    assertThat(issue.projectKey()).isEqualTo(\"struts\");\n    assertThat(issue.ruleKey().toString()).isEqualTo(\"squid:AvoidCycle\");\n    assertThat(results.securityExclusions()).isFalse();\n  }","commit_id":"b4cb1af3222587a6c7ead2f473eb84e23c75c727","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_get_empty_result_when_no_issue() {\n    grantAccessRights();\n    IssueQuery query = IssueQuery.builder().build();\n    when(issueDao.selectIssueAndProjectIds(eq(query), anyCollection(), any(SqlSession.class))).thenReturn(Collections.<IssueDto>emptyList());\n    when(issueDao.selectByIds(anyCollection(), any(SqlSession.class))).thenReturn(Collections.<IssueDto>emptyList());\n\n    IssueQueryResult results = finder.find(query);\n    assertThat(results.issues()).isEmpty();\n    assertThat(results.rules()).isEmpty();\n    assertThat(results.components()).isEmpty();\n    assertThat(results.actionPlans()).isEmpty();\n  }","id":46154,"modified_method":"@Test\n  public void should_get_empty_result_when_no_issue() {\n    grantAccessRights();\n    IssueQuery query = IssueQuery.builder().build();\n    when(issueDao.selectIssueAndProjectIds(eq(query), any(DefaultIssueQueryResult.class), anyCollection(), any(SqlSession.class))).thenReturn(Collections.<IssueDto>emptyList());\n    when(issueDao.selectByIds(anyCollection(), any(SqlSession.class))).thenReturn(Collections.<IssueDto>emptyList());\n\n    IssueQueryResult results = finder.find(query);\n    assertThat(results.issues()).isEmpty();\n    assertThat(results.rules()).isEmpty();\n    assertThat(results.components()).isEmpty();\n    assertThat(results.actionPlans()).isEmpty();\n  }","commit_id":"b4cb1af3222587a6c7ead2f473eb84e23c75c727","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * The returned IssueDto list contains only the issue id, the project id and the sort column\n   */\n  public List<IssueDto> selectIssueAndProjectIds(final IssueQuery query, final Collection<Integer> authorizedRootProjectIds, SqlSession session) {\n    return selectIssueAndProjectIds(query, authorizedRootProjectIds, query.maxResults(), session);\n  }","id":46155,"modified_method":"/**\n   * The returned IssueDto list contains only the issue id, the project id and the sort column\n   */\n  public List<IssueDto> selectIssueAndProjectIds(final IssueQuery query, final DefaultIssueQueryResult defaultIssueQueryResult,\n                                                  final Collection<Integer> authorizedRootProjectIds, SqlSession sqlSession){\n    final List<IssueDto> authorizedIssues = newArrayList();\n    ResultHandler resultHandler = new ResultHandler(){\n      @Override\n      public void handleResult(ResultContext context) {\n        IssueDto issueDto = (IssueDto) context.getResultObject();\n        if (authorizedRootProjectIds.contains(issueDto.getProjectId())) {\n          authorizedIssues.add(issueDto);\n        } else {\n          defaultIssueQueryResult.setSecurityExclusions(true);\n        }\n        if (authorizedIssues.size() >= query.maxResults()) {\n          defaultIssueQueryResult.setMaxResultsReached(true);\n          context.stop();\n        }\n      }\n    };\n    sqlSession.select(\"selectIssueAndProjectIds\", query, resultHandler);\n    return authorizedIssues;\n  }","commit_id":"b4cb1af3222587a6c7ead2f473eb84e23c75c727","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@VisibleForTesting\n  List<IssueDto> selectIssueAndProjectIds(IssueQuery query, Collection<Integer> authorizedRootProjectIds, Integer maxResults) {\n    SqlSession session = mybatis.openSession();\n    try {\n      return selectIssueAndProjectIds(query, authorizedRootProjectIds, maxResults, session);\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","id":46156,"modified_method":"@VisibleForTesting\n  List<IssueDto> selectIssueAndProjectIds(final IssueQuery query, final DefaultIssueQueryResult defaultIssueQueryResult,\n                                          final Collection<Integer> authorizedRootProjectIds) {\n    SqlSession session = mybatis.openSession();\n    try {\n      return selectIssueAndProjectIds(query, defaultIssueQueryResult, authorizedRootProjectIds, session);\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }","commit_id":"b4cb1af3222587a6c7ead2f473eb84e23c75c727","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_select_issue_and_project_ids() {\n    setupData(\"shared\", \"should_select_issue_and_project_ids\");\n\n    IssueQuery query = IssueQuery.builder().build();\n    List<IssueDto> results = dao.selectIssueAndProjectIds(query, newArrayList(399), 1000);\n    assertThat(results).hasSize(3);\n\n    IssueDto issueDto = results.get(0);\n    assertThat(issueDto.getId()).isNotNull();\n    assertThat(issueDto.getProjectId()).isNotNull();\n\n    results = dao.selectIssueAndProjectIds(query, newArrayList(399), 2);\n    assertThat(results).hasSize(2);\n\n    results = dao.selectIssueAndProjectIds(query, Collections.<Integer>emptyList(), 1000);\n    assertThat(results).isEmpty();\n  }","id":46157,"modified_method":"@Test\n  public void should_select_issue_and_project_ids() {\n    setupData(\"shared\", \"should_select_issue_and_project_ids\");\n\n    DefaultIssueQueryResult defaultIssueQueryResult = new DefaultIssueQueryResult();\n    IssueQuery query = mock(IssueQuery.class);\n    when(query.maxResults()).thenReturn(1000);\n    List<IssueDto> results = dao.selectIssueAndProjectIds(query, defaultIssueQueryResult, newArrayList(399));\n    assertThat(results).hasSize(3);\n    assertThat(defaultIssueQueryResult.maxResultsReached()).isFalse();\n    assertThat(defaultIssueQueryResult.securityExclusions()).isFalse();\n\n    IssueDto issueDto = results.get(0);\n    assertThat(issueDto.getId()).isNotNull();\n    assertThat(issueDto.getProjectId()).isNotNull();\n\n    results = dao.selectIssueAndProjectIds(query, defaultIssueQueryResult, Collections.<Integer>emptyList());\n    assertThat(results).isEmpty();\n    assertThat(defaultIssueQueryResult.maxResultsReached()).isFalse();\n    assertThat(defaultIssueQueryResult.securityExclusions()).isTrue();\n\n    when(query.maxResults()).thenReturn(2);\n    results = dao.selectIssueAndProjectIds(query, defaultIssueQueryResult, newArrayList(399));\n    assertThat(results).hasSize(2);\n    assertThat(defaultIssueQueryResult.maxResultsReached()).isTrue();\n    assertThat(defaultIssueQueryResult.securityExclusions()).isTrue();\n  }","commit_id":"b4cb1af3222587a6c7ead2f473eb84e23c75c727","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_select_by_ids() {\n    setupData(\"shared\", \"should_select_by_ids\");\n\n    List<IssueDto> results = newArrayList(dao.selectByIds(newArrayList(100l, 101l, 102l)));\n    assertThat(results).hasSize(3);\n    assertThat(results.get(0).getId()).isEqualTo(100);\n    assertThat(results.get(1).getId()).isEqualTo(101);\n    assertThat(results.get(2).getId()).isEqualTo(102);\n  }","id":46158,"modified_method":"@Test\n  public void should_select_by_ids() {\n    setupData(\"shared\", \"should_select_by_ids\");\n\n    List<IssueDto> results = newArrayList(dao.selectByIds(newArrayList(100l, 101l, 102l)));\n    assertThat(results).hasSize(3);\n  }","commit_id":"b4cb1af3222587a6c7ead2f473eb84e23c75c727","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_select_issue_and_project_ids_with_sort_column() {\n    setupData(\"shared\", \"should_select_issue_and_project_ids\");\n\n    IssueQuery query = IssueQuery.builder().sort(IssueQuery.Sort.ASSIGNEE).build();\n    List<IssueDto> results = dao.selectIssueAndProjectIds(query, newArrayList(399), 1000);\n    assertThat(results.get(0).getAssignee()).isNotNull();\n\n    query = IssueQuery.builder().sort(IssueQuery.Sort.SEVERITY).build();\n    results = dao.selectIssueAndProjectIds(query, newArrayList(399), 1000);\n    assertThat(results.get(0).getSeverity()).isNotNull();\n\n    query = IssueQuery.builder().sort(IssueQuery.Sort.STATUS).build();\n    results = dao.selectIssueAndProjectIds(query, newArrayList(399), 1000);\n    assertThat(results.get(0).getStatus()).isNotNull();\n\n    query = IssueQuery.builder().sort(IssueQuery.Sort.CREATION_DATE).build();\n    results = dao.selectIssueAndProjectIds(query, newArrayList(399), 1000);\n    assertThat(results.get(0).getIssueCreationDate()).isNotNull();\n\n    query = IssueQuery.builder().sort(IssueQuery.Sort.UPDATE_DATE).build();\n    results = dao.selectIssueAndProjectIds(query, newArrayList(399), 1000);\n    assertThat(results.get(0).getIssueUpdateDate()).isNotNull();\n\n    query = IssueQuery.builder().sort(IssueQuery.Sort.CLOSE_DATE).build();\n    results = dao.selectIssueAndProjectIds(query, newArrayList(399), 1000);\n    assertThat(results.get(0).getIssueCloseDate()).isNotNull();\n  }","id":46159,"modified_method":"@Test\n  public void should_select_issue_and_project_ids_with_sort_column() {\n    setupData(\"shared\", \"should_select_issue_and_project_ids\");\n\n    DefaultIssueQueryResult defaultIssueQueryResult = new DefaultIssueQueryResult();\n\n    IssueQuery query = IssueQuery.builder().sort(IssueQuery.Sort.ASSIGNEE).build();\n    List<IssueDto> results = dao.selectIssueAndProjectIds(query, defaultIssueQueryResult, newArrayList(399));\n    assertThat(results.get(0).getAssignee()).isNotNull();\n\n    query = IssueQuery.builder().sort(IssueQuery.Sort.SEVERITY).build();\n    results = dao.selectIssueAndProjectIds(query, defaultIssueQueryResult, newArrayList(399));\n    assertThat(results.get(0).getSeverity()).isNotNull();\n\n    query = IssueQuery.builder().sort(IssueQuery.Sort.STATUS).build();\n    results = dao.selectIssueAndProjectIds(query, defaultIssueQueryResult, newArrayList(399));\n    assertThat(results.get(0).getStatus()).isNotNull();\n\n    query = IssueQuery.builder().sort(IssueQuery.Sort.CREATION_DATE).build();\n    results = dao.selectIssueAndProjectIds(query, defaultIssueQueryResult, newArrayList(399));\n    assertThat(results.get(0).getIssueCreationDate()).isNotNull();\n\n    query = IssueQuery.builder().sort(IssueQuery.Sort.UPDATE_DATE).build();\n    results = dao.selectIssueAndProjectIds(query, defaultIssueQueryResult, newArrayList(399));\n    assertThat(results.get(0).getIssueUpdateDate()).isNotNull();\n\n    query = IssueQuery.builder().sort(IssueQuery.Sort.CLOSE_DATE).build();\n    results = dao.selectIssueAndProjectIds(query, defaultIssueQueryResult, newArrayList(399));\n    assertThat(results.get(0).getIssueCloseDate()).isNotNull();\n  }","commit_id":"b4cb1af3222587a6c7ead2f473eb84e23c75c727","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_sort_by_close_date() {\n    Date date = new Date();\n    Date date1 = DateUtils.addDays(date, -3);\n    Date date2 = DateUtils.addDays(date, -2);\n    Date date3 = DateUtils.addDays(date, -1);\n    IssueDto issue1 = new IssueDto().setId(1L).setIssueCloseDate(date1);\n    IssueDto issue2 = new IssueDto().setId(2L).setIssueCloseDate(date3);\n    IssueDto issue3 = new IssueDto().setId(3L).setIssueCloseDate(date2);\n    List<IssueDto> dtoList = newArrayList(issue1, issue2, issue3);\n\n    IssueQuery query = IssueQuery.builder().sort(IssueQuery.Sort.CLOSE_DATE).asc(false).build();\n    IssuesFinderSort issuesFinderSort = new IssuesFinderSort(dtoList, query);\n\n    List<IssueDto> result = newArrayList(issuesFinderSort.sort());\n\n    assertThat(result).hasSize(3);\n    assertThat(result.get(0).getIssueCloseDate()).isEqualTo(date3);\n    assertThat(result.get(1).getIssueCloseDate()).isEqualTo(date2);\n    assertThat(result.get(2).getIssueCloseDate()).isEqualTo(date1);\n  }","id":46160,"modified_method":"@Test\n  public void should_sort_by_close_date() {\n    Date date = new Date();\n    Date date1 = DateUtils.addDays(date, -3);\n    Date date2 = DateUtils.addDays(date, -2);\n    Date date3 = DateUtils.addDays(date, -1);\n    IssueDto issue1 = new IssueDto().setId(1L).setIssueCloseDate(date1);\n    IssueDto issue2 = new IssueDto().setId(2L).setIssueCloseDate(date3);\n    IssueDto issue3 = new IssueDto().setId(3L).setIssueCloseDate(date2);\n    List<IssueDto> dtoList = newArrayList(issue1, issue2, issue3);\n\n    IssueQuery query = IssueQuery.builder().sort(IssueQuery.Sort.CLOSE_DATE).asc(false).build();\n    IssuesFinderSort issuesFinderSort = new IssuesFinderSort(dtoList, query);\n\n    List<IssueDto> result = newArrayList(issuesFinderSort.sort());\n\n    Assertions.assertThat(result).hasSize(3);\n    Assertions.assertThat(result.get(0).getIssueCloseDate()).isEqualTo(date3);\n    Assertions.assertThat(result.get(1).getIssueCloseDate()).isEqualTo(date2);\n    Assertions.assertThat(result.get(2).getIssueCloseDate()).isEqualTo(date1);\n  }","commit_id":"b4cb1af3222587a6c7ead2f473eb84e23c75c727","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_sort_by_creation_date() {\n    Date date = new Date();\n    Date date1 = DateUtils.addDays(date, -3);\n    Date date2 = DateUtils.addDays(date, -2);\n    Date date3 = DateUtils.addDays(date, -1);\n    IssueDto issue1 = new IssueDto().setId(1L).setIssueCreationDate(date1);\n    IssueDto issue2 = new IssueDto().setId(2L).setIssueCreationDate(date3);\n    IssueDto issue3 = new IssueDto().setId(3L).setIssueCreationDate(date2);\n    List<IssueDto> dtoList = newArrayList(issue1, issue2, issue3);\n\n    IssueQuery query = IssueQuery.builder().sort(IssueQuery.Sort.CREATION_DATE).asc(false).build();\n    IssuesFinderSort issuesFinderSort = new IssuesFinderSort(dtoList, query);\n\n    List<IssueDto> result = newArrayList(issuesFinderSort.sort());\n\n    assertThat(result).hasSize(3);\n    assertThat(result.get(0).getIssueCreationDate()).isEqualTo(date3);\n    assertThat(result.get(1).getIssueCreationDate()).isEqualTo(date2);\n    assertThat(result.get(2).getIssueCreationDate()).isEqualTo(date1);\n  }","id":46161,"modified_method":"@Test\n  public void should_sort_by_creation_date() {\n    Date date = new Date();\n    Date date1 = DateUtils.addDays(date, -3);\n    Date date2 = DateUtils.addDays(date, -2);\n    Date date3 = DateUtils.addDays(date, -1);\n    IssueDto issue1 = new IssueDto().setId(1L).setIssueCreationDate(date1);\n    IssueDto issue2 = new IssueDto().setId(2L).setIssueCreationDate(date3);\n    IssueDto issue3 = new IssueDto().setId(3L).setIssueCreationDate(date2);\n    List<IssueDto> dtoList = newArrayList(issue1, issue2, issue3);\n\n    IssueQuery query = IssueQuery.builder().sort(IssueQuery.Sort.CREATION_DATE).asc(false).build();\n    IssuesFinderSort issuesFinderSort = new IssuesFinderSort(dtoList, query);\n\n    List<IssueDto> result = newArrayList(issuesFinderSort.sort());\n\n    Assertions.assertThat(result).hasSize(3);\n    Assertions.assertThat(result.get(0).getIssueCreationDate()).isEqualTo(date3);\n    Assertions.assertThat(result.get(1).getIssueCreationDate()).isEqualTo(date2);\n    Assertions.assertThat(result.get(2).getIssueCreationDate()).isEqualTo(date1);\n  }","commit_id":"b4cb1af3222587a6c7ead2f473eb84e23c75c727","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_sort_by_update_date() {\n    Date date = new Date();\n    Date date1 = DateUtils.addDays(date, -3);\n    Date date2 = DateUtils.addDays(date, -2);\n    Date date3 = DateUtils.addDays(date, -1);\n    IssueDto issue1 = new IssueDto().setId(1L).setIssueUpdateDate(date1);\n    IssueDto issue2 = new IssueDto().setId(2L).setIssueUpdateDate(date3);\n    IssueDto issue3 = new IssueDto().setId(3L).setIssueUpdateDate(date2);\n    List<IssueDto> dtoList = newArrayList(issue1, issue2, issue3);\n\n    IssueQuery query = IssueQuery.builder().sort(IssueQuery.Sort.UPDATE_DATE).asc(false).build();\n    IssuesFinderSort issuesFinderSort = new IssuesFinderSort(dtoList, query);\n\n    List<IssueDto> result = newArrayList(issuesFinderSort.sort());\n\n    assertThat(result).hasSize(3);\n    assertThat(result.get(0).getIssueUpdateDate()).isEqualTo(date3);\n    assertThat(result.get(1).getIssueUpdateDate()).isEqualTo(date2);\n    assertThat(result.get(2).getIssueUpdateDate()).isEqualTo(date1);\n  }","id":46162,"modified_method":"@Test\n  public void should_sort_by_update_date() {\n    Date date = new Date();\n    Date date1 = DateUtils.addDays(date, -3);\n    Date date2 = DateUtils.addDays(date, -2);\n    Date date3 = DateUtils.addDays(date, -1);\n    IssueDto issue1 = new IssueDto().setId(1L).setIssueUpdateDate(date1);\n    IssueDto issue2 = new IssueDto().setId(2L).setIssueUpdateDate(date3);\n    IssueDto issue3 = new IssueDto().setId(3L).setIssueUpdateDate(date2);\n    List<IssueDto> dtoList = newArrayList(issue1, issue2, issue3);\n\n    IssueQuery query = IssueQuery.builder().sort(IssueQuery.Sort.UPDATE_DATE).asc(false).build();\n    IssuesFinderSort issuesFinderSort = new IssuesFinderSort(dtoList, query);\n\n    List<IssueDto> result = newArrayList(issuesFinderSort.sort());\n\n    Assertions.assertThat(result).hasSize(3);\n    Assertions.assertThat(result.get(0).getIssueUpdateDate()).isEqualTo(date3);\n    Assertions.assertThat(result.get(1).getIssueUpdateDate()).isEqualTo(date2);\n    Assertions.assertThat(result.get(2).getIssueUpdateDate()).isEqualTo(date1);\n  }","commit_id":"b4cb1af3222587a6c7ead2f473eb84e23c75c727","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_sort_by_severity() {\n    IssueDto issue1 = new IssueDto().setId(1L).setSeverity(\"INFO\");\n    IssueDto issue2 = new IssueDto().setId(2L).setSeverity(\"BLOCKER\");\n    IssueDto issue3 = new IssueDto().setId(3L).setSeverity(\"MAJOR\");\n    List<IssueDto> dtoList = newArrayList(issue1, issue2, issue3);\n\n    IssueQuery query = IssueQuery.builder().sort(IssueQuery.Sort.SEVERITY).asc(true).build();\n    IssuesFinderSort issuesFinderSort = new IssuesFinderSort(dtoList, query);\n\n    List<IssueDto> result = newArrayList(issuesFinderSort.sort());\n\n    assertThat(result).hasSize(3);\n    assertThat(result.get(0).getSeverity()).isEqualTo(\"INFO\");\n    assertThat(result.get(1).getSeverity()).isEqualTo(\"MAJOR\");\n    assertThat(result.get(2).getSeverity()).isEqualTo(\"BLOCKER\");\n  }","id":46163,"modified_method":"@Test\n  public void should_sort_by_severity() {\n    IssueDto issue1 = new IssueDto().setId(1L).setSeverity(\"INFO\");\n    IssueDto issue2 = new IssueDto().setId(2L).setSeverity(\"BLOCKER\");\n    IssueDto issue3 = new IssueDto().setId(3L).setSeverity(\"MAJOR\");\n    List<IssueDto> dtoList = newArrayList(issue1, issue2, issue3);\n\n    IssueQuery query = IssueQuery.builder().sort(IssueQuery.Sort.SEVERITY).asc(true).build();\n    IssuesFinderSort issuesFinderSort = new IssuesFinderSort(dtoList, query);\n\n    List<IssueDto> result = newArrayList(issuesFinderSort.sort());\n\n    Assertions.assertThat(result).hasSize(3);\n    Assertions.assertThat(result.get(0).getSeverity()).isEqualTo(\"INFO\");\n    Assertions.assertThat(result.get(1).getSeverity()).isEqualTo(\"MAJOR\");\n    Assertions.assertThat(result.get(2).getSeverity()).isEqualTo(\"BLOCKER\");\n  }","commit_id":"b4cb1af3222587a6c7ead2f473eb84e23c75c727","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_sort_by_status() {\n    IssueDto issue1 = new IssueDto().setId(1L).setStatus(\"CLOSED\");\n    IssueDto issue2 = new IssueDto().setId(2L).setStatus(\"REOPENED\");\n    IssueDto issue3 = new IssueDto().setId(3L).setStatus(\"OPEN\");\n    List<IssueDto> dtoList = newArrayList(issue1, issue2, issue3);\n\n    IssueQuery query = IssueQuery.builder().sort(IssueQuery.Sort.STATUS).asc(false).build();\n    IssuesFinderSort issuesFinderSort = new IssuesFinderSort(dtoList, query);\n\n    List<IssueDto> result = newArrayList(issuesFinderSort.sort());\n\n    assertThat(result).hasSize(3);\n    assertThat(result.get(0).getStatus()).isEqualTo(\"REOPENED\");\n    assertThat(result.get(1).getStatus()).isEqualTo(\"OPEN\");\n    assertThat(result.get(2).getStatus()).isEqualTo(\"CLOSED\");\n  }","id":46164,"modified_method":"@Test\n  public void should_sort_by_status() {\n    IssueDto issue1 = new IssueDto().setId(1L).setStatus(\"CLOSED\");\n    IssueDto issue2 = new IssueDto().setId(2L).setStatus(\"REOPENED\");\n    IssueDto issue3 = new IssueDto().setId(3L).setStatus(\"OPEN\");\n    List<IssueDto> dtoList = newArrayList(issue1, issue2, issue3);\n\n    IssueQuery query = IssueQuery.builder().sort(IssueQuery.Sort.STATUS).asc(false).build();\n    IssuesFinderSort issuesFinderSort = new IssuesFinderSort(dtoList, query);\n\n    List<IssueDto> result = newArrayList(issuesFinderSort.sort());\n\n    Assertions.assertThat(result).hasSize(3);\n    Assertions.assertThat(result.get(0).getStatus()).isEqualTo(\"REOPENED\");\n    Assertions.assertThat(result.get(1).getStatus()).isEqualTo(\"OPEN\");\n    Assertions.assertThat(result.get(2).getStatus()).isEqualTo(\"CLOSED\");\n  }","commit_id":"b4cb1af3222587a6c7ead2f473eb84e23c75c727","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public Map<String, Properties> findComponents() throws LoadPropertiesException, IOException {\n        Bundle bundle = bundleContext.getBundle();\n        Enumeration<URL> iter = bundle.getResources(CamelContextHelper.COMPONENT_DESCRIPTOR);\n        return CamelContextHelper.findComponents(this, iter);\n    }","id":46165,"modified_method":"public Map<String, Properties> findComponents() throws LoadPropertiesException, IOException {\n        SortedMap<String, Properties> answer = new TreeMap<String, Properties>();\n        Bundle[] bundles = bundleContext.getBundles();\n        for (Bundle bundle : bundles) {\n            Enumeration<URL> iter = bundle.getResources(CamelContextHelper.COMPONENT_DESCRIPTOR);\n            SortedMap<String,Properties> map = CamelContextHelper.findComponents(this, iter);\n            answer.putAll(map);\n        }\n        return answer;\n    }","commit_id":"3553b95ad66ff5240725de6479ff66292605ddcb","url":"https://github.com/apache/camel"},{"original_method":"@SuppressWarnings( \"unchecked\" )\n  private static PrivateNetworkIndex getNextIndex( ExtantNetwork exNet ) throws ResourceAllocationException {\n    EntityWrapper<PrivateNetworkIndex> db = Entities.get( PrivateNetworkIndex.class );\n    try {\n      Example ex = Example.create( PrivateNetworkIndex.free( exNet ) ).enableLike( MatchMode.EXACT );\n      List<PrivateNetworkIndex> ret = db.createCriteria( PrivateNetworkIndex.class ).setCacheable( true ).add( ex ).setMaxResults( 1 ).setFetchSize( 1 ).list( );\n      if ( ret.isEmpty( ) ) {\n        throw new NotEnoughResourcesAvailable( \"Failed to find a free network index: \" + ret );\n      } else {\n        PrivateNetworkIndex idx = ret.get( 0 );\n        db.commit( );\n        return idx;\n      }\n    } catch ( Exception ex ) {\n      db.rollback( );\n      Logs.extreme( ).error( ex, ex );\n      throw new ResourceAllocationException( \"Failed to allocate network index: \" + ex.getMessage( ), ex );\n    }\n  }","id":46166,"modified_method":"@SuppressWarnings( \"unchecked\" )\n  private static PrivateNetworkIndex getNextIndex( ExtantNetwork exNet ) throws ResourceAllocationException {\n    EntityWrapper<PrivateNetworkIndex> db = Entities.get( PrivateNetworkIndex.class );\n    try {\n      Example ex = Example.create( PrivateNetworkIndex.free( exNet ) ).enableLike( MatchMode.EXACT );\n      PrivateNetworkIndex ret = ( PrivateNetworkIndex ) db.createCriteria( PrivateNetworkIndex.class ).setCacheable( true ).add( ex ).setMaxResults( 1 ).setFetchSize( 1 ).uniqueResult( );\n      if ( ret == null ) {\n        throw new NotEnoughResourcesAvailable( \"Failed to find a free network index: \" + ret );\n      } else {\n        db.commit( );\n        return ret;\n      }\n    } catch ( Exception ex ) {\n      db.rollback( );\n      Logs.extreme( ).error( ex, ex );\n      throw new ResourceAllocationException( \"Failed to allocate network index: \" + ex.getMessage( ), ex );\n    }\n  }","commit_id":"9294b02794b5c31ad95defbe97f05091af3e0ff4","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@SuppressWarnings(\"unchecked\")\n   public List<HTextFlowTarget> findClosestEquivalentTranslation(HTextFlow textFlow, LocaleId locale)\n   {\n\t  return getSession().createQuery(\"select t from HTextFlowTarget t where \" + \"t.textFlow.resId =:resid and t.textFlow.document.docId =:document and t.locale.localeId =:locale \"+ \"and t.textFlow.document.projectIteration.project =:project and t.textFlow.document.projectIteration !=:iteration \"+\"order by t.lastChanged desc\").setParameter(\"document\", textFlow.getDocument().getDocId()).setParameter(\"locale\", locale).setParameter(\"project\", textFlow.getDocument().getProjectIteration().getProject()).setParameter(\"iteration\", textFlow.getDocument().getProjectIteration()).setParameter(\"resid\", textFlow.getResId()).setMaxResults(1).list();\n   }","id":46167,"modified_method":"public HTextFlowTarget findClosestEquivalentTranslation(HTextFlow textFlow, LocaleId locale)\n   {\n\t  return (HTextFlowTarget) getSession().createQuery(\"select t from HTextFlowTarget t where \" + \"t.textFlow.resId =:resid and t.textFlow.document.docId =:document and t.locale.localeId =:locale \"+ \"and t.textFlow.document.projectIteration.project =:project and t.textFlow.document.projectIteration !=:iteration \"+\"order by t.lastChanged desc\").setParameter(\"document\", textFlow.getDocument().getDocId()).setParameter(\"locale\", locale).setParameter(\"project\", textFlow.getDocument().getProjectIteration().getProject()).setParameter(\"iteration\", textFlow.getDocument().getProjectIteration()).setParameter(\"resid\", textFlow.getResId()).setMaxResults(1).uniqueResult();\n   }","commit_id":"4619ba68ae5cb303072f6ef0ef2cad614173cb78","url":"https://github.com/zanata/zanata-server"},{"original_method":"public void copyClosestEquivalentTranslation(HDocument document) \n   {\n\t  List<HTextFlowTarget> newTargets = new ArrayList<HTextFlowTarget>();\n\t  \n\t  for (HTextFlow textFlow : document.getTextFlows())\n\t  {\n\t\t // find closest equivalent textflowtarget\n\t\t List<HLocale> localelist = localeDAO.findDocumentLocale(document);\n\t\t for (HLocale locale : localelist)\n\t\t {\n\t\t\t// check whether the textFlow have textflowtarget\n\t\t\tHTextFlowTarget result = textFlow.getTargets().get(locale);\n\t\t\tif (result == null)\n\t\t\t{\n\t\t\t   HTextFlowTarget from = textFlowTargetDAO.findClosestEquivalentTranslation(textFlow, locale.getLocaleId()).get(0);\n\t\t\t   if (from != null)\n\t\t\t   {\n\t\t\t\t  HTextFlowTarget hTarget = new HTextFlowTarget(textFlow, from.getLocale());\n\t\t\t\t  hTarget.setVersionNum(from.getVersionNum());\n\t\t\t\t  hTarget.setContent(from.getContent());\n\t\t\t\t  hTarget.setState(from.getState());\n\t\t\t\t  HSimpleComment hcomment = createComment(from);\n\t\t\t\t  hTarget.setComment(hcomment);\n\t\t\t\t  textFlow.getTargets().put(from.getLocale(), hTarget);\n\t\t\t\t  newTargets.add(hTarget);\n\t\t\t   }\n\t\t\t}\n\t\t \n\t\t }\n\t      \n\t  }\n\n\t  if (!newTargets.isEmpty() )\n\t  {\n\t\t \n\t\t for (HTextFlowTarget target : newTargets)\n\t\t {\n\t\t\t textFlowTargetDAO.makePersistent(target);\n\t\t }\n\t    \t\n\t\t textFlowTargetDAO.flush();\n\t\t documentDAO.flush();\n\t  \n\t  }\n\t    \t \n   }","id":46168,"modified_method":"public void copyClosestEquivalentTranslation(HDocument document) \n   {\n\t  List<HTextFlowTarget> newTargets = new ArrayList<HTextFlowTarget>();\n\t  \n\t  for (HTextFlow textFlow : document.getTextFlows())\n\t  {\n\t\t // find closest equivalent textflowtarget\n\t\t List<HLocale> localelist = localeDAO.findAllActive();\n\t\t for (HLocale locale : localelist)\n\t\t {\n\t\t\t// check whether the textFlow have textflowtarget\n\t\t\tHTextFlowTarget result = textFlow.getTargets().get(locale);\n\t\t\tif (result == null)\n\t\t\t{\n\t\t\t   HTextFlowTarget from = textFlowTargetDAO.findClosestEquivalentTranslation(textFlow, locale.getLocaleId());\n\t\t\t   if (from != null)\n\t\t\t   {\n\t\t\t\t  HTextFlowTarget hTarget = new HTextFlowTarget(textFlow, from.getLocale());\n\t\t\t\t  hTarget.setVersionNum(from.getVersionNum());\n\t\t\t\t  hTarget.setContent(from.getContent());\n\t\t\t\t  hTarget.setState(from.getState());\n\t\t\t\t  HSimpleComment hcomment = createComment(from);\n\t\t\t\t  hTarget.setComment(hcomment);\n\t\t\t\t  textFlow.getTargets().put(from.getLocale(), hTarget);\n\t\t\t\t  newTargets.add(hTarget);\n\t\t\t   }\n\t\t\t}\n\t\t \n\t\t }\n\t      \n\t  }\n\n\t  if (!newTargets.isEmpty() )\n\t  {\n\t\t \n\t\t for (HTextFlowTarget target : newTargets)\n\t\t {\n\t\t\t textFlowTargetDAO.makePersistent(target);\n\t\t }\n\t    \t\n\t\t textFlowTargetDAO.flush();\n\t\t documentDAO.flush();\n\t  \n\t  }\n\t    \t \n   }","commit_id":"4619ba68ae5cb303072f6ef0ef2cad614173cb78","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Override\n    protected Tuples._3<SLanguageId, Integer, Boolean> createObject(Attributes attrs) throws SAXException {\n      return MultiTuple.<SLanguageId,Integer,Boolean>from(SLanguageId.deserialize(attrs.getValue(\"id\")), Integer.parseInt(attrs.getValue(\"version\")), Boolean.parseBoolean(attrs.getValue(\"implicit\")));\n    }","id":46169,"modified_method":"@Override\n    protected Tuples._4<SLanguageId, String, Integer, Boolean> createObject(Attributes attrs) throws SAXException {\n      return MultiTuple.<SLanguageId,String,Integer,Boolean>from(SLanguageId.deserialize(attrs.getValue(\"id\")), attrs.getValue(\"index\"), Integer.parseInt(attrs.getValue(\"version\")), Boolean.parseBoolean(attrs.getValue(\"implicit\")));\n    }","commit_id":"6d3b2e10ded450ab191f31d362eb253ccc58fad0","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {\n      Tuples._3<SLanguageId, Integer, Boolean> result = (Tuples._3<SLanguageId, Integer, Boolean>) resultObject;\n      if (\"id\".equals(name)) {\n        return;\n      }\n      if (\"version\".equals(name)) {\n        return;\n      }\n      if (\"implicit\".equals(name)) {\n        return;\n      }\n      super.handleAttribute(resultObject, name, value);\n    }","id":46170,"modified_method":"@Override\n    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {\n      Tuples._4<SLanguageId, String, Integer, Boolean> result = (Tuples._4<SLanguageId, String, Integer, Boolean>) resultObject;\n      if (\"id\".equals(name)) {\n        return;\n      }\n      if (\"index\".equals(name)) {\n        return;\n      }\n      if (\"version\".equals(name)) {\n        return;\n      }\n      if (\"implicit\".equals(name)) {\n        return;\n      }\n      super.handleAttribute(resultObject, name, value);\n    }","commit_id":"6d3b2e10ded450ab191f31d362eb253ccc58fad0","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void handleChild_7167172773708890285(Object resultObject, Object value) throws SAXException {\n      Tuples._3<SLanguageId, Integer, Boolean> child = (Tuples._3<SLanguageId, Integer, Boolean>) value;\n      if ((boolean) child._2()) {\n      } else {\n        fieldmodel.addLanguage(child._0(), (int) child._1());\n      }\n    }","id":46171,"modified_method":"private void handleChild_7167172773708890285(Object resultObject, Object value) throws SAXException {\n      Tuples._4<SLanguageId, String, Integer, Boolean> child = (Tuples._4<SLanguageId, String, Integer, Boolean>) value;\n      if ((boolean) child._3()) {\n      } else {\n        fieldhelper.addUsedLanguage(fieldmodel, child._1(), child._0(), (int) child._2());\n      }\n    }","commit_id":"6d3b2e10ded450ab191f31d362eb253ccc58fad0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static int mergeFiles(AbstractContentMerger contentMerger, File baseFile, File localFile, File latestFile, byte[] conflictStart, byte[] conflictEnd, byte[] separator, boolean overwrite) {\n    contentMerger.setConflictMarks(conflictStart, conflictEnd, separator);\n    FileInputStream baseIS = null;\n    FileInputStream localIS = null;\n    FileInputStream latestIS = null;\n    OutputStream out = null;\n    try {\n      baseIS = new FileInputStream(baseFile);\n      localIS = new FileInputStream(localFile);\n      latestIS = new FileInputStream(latestFile);\n\n      byte[] baseContent = ReadUtil.read(baseIS);\n      byte[] localContent = ReadUtil.read(localIS);\n      byte[] latestContent = ReadUtil.read(latestIS);\n      FileUtil.closeFileSafe(localIS);\n\n      out = (overwrite ?\n        new FileOutputStream(localFile) :\n        System.out\n      );\n\n      Tuples._2<Integer, byte[]> mergeResult = contentMerger.mergeContents(baseContent, localContent, latestContent);\n      if (mergeResult == null) {\n        mergeResult = MultiTuple.<Integer,byte[]>from(AbstractContentMerger.FATAL_ERROR, localContent);\n      }\n      out.write(mergeResult._1());\n      return (int) mergeResult._0();\n    } catch (IOException e) {\n      e.printStackTrace();\n      return AbstractContentMerger.FATAL_ERROR;\n    } finally {\n      FileUtil.closeFileSafe(baseIS);\n      FileUtil.closeFileSafe(localIS);\n      FileUtil.closeFileSafe(latestIS);\n      FileUtil.closeFileSafe(out);\n    }\n  }","id":46172,"modified_method":"public static int mergeFiles(AbstractContentMerger contentMerger, File baseFile, File localFile, File latestFile, byte[] conflictStart, byte[] conflictEnd, byte[] separator, boolean overwrite, boolean convertCRLF) {\n    contentMerger.setConflictMarks(conflictStart, conflictEnd, separator);\n    FileInputStream baseIS = null;\n    FileInputStream localIS = null;\n    FileInputStream latestIS = null;\n    OutputStream out = null;\n    try {\n      baseIS = new FileInputStream(baseFile);\n      localIS = new FileInputStream(localFile);\n      latestIS = new FileInputStream(latestFile);\n\n      byte[] baseContent = ReadUtil.read(baseIS);\n      byte[] localContent = ReadUtil.read(localIS);\n      byte[] latestContent = ReadUtil.read(latestIS);\n      FileUtil.closeFileSafe(localIS);\n\n      out = (overwrite ?\n        new FileOutputStream(localFile) :\n        System.out\n      );\n\n      Tuples._2<Integer, byte[]> mergeResult = contentMerger.mergeContents(baseContent, localContent, latestContent);\n      if (mergeResult == null) {\n        mergeResult = MultiTuple.<Integer,byte[]>from(AbstractContentMerger.FATAL_ERROR, localContent);\n      }\n      out.write((convertCRLF ?\n        convert(mergeResult._1()) :\n        mergeResult._1()\n      ));\n      return (int) mergeResult._0();\n    } catch (IOException e) {\n      e.printStackTrace();\n      return AbstractContentMerger.FATAL_ERROR;\n    } finally {\n      FileUtil.closeFileSafe(baseIS);\n      FileUtil.closeFileSafe(localIS);\n      FileUtil.closeFileSafe(latestIS);\n      FileUtil.closeFileSafe(out);\n    }\n  }","commit_id":"a82b0f487811a1ca03dc2c404caf21b07af907b4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static void main(String[] args) {\n    byte[] conflictStart = CONFLICT_START.getBytes();\n    byte[] conflictEnd = CONFLICT_END.getBytes();\n    byte[] conflictSeparator = CONFLICT_SEPARATOR.getBytes();\n    if (args.length < 4) {\n      System.err.println(\"Usage <merger> --<vcs> <base> <current> <other> \" + \"[<base name> <current name> <other name>]\");\n      System.exit(2);\n    }\n\n    File baseFile = new File(args[1]);\n    File currentFile = new File(args[2]);\n    File otherFile = new File(args[3]);\n    boolean overwrite = false;\n    if (SVN_OPTION.equals(args[0])) {\n      if (args.length >= 7) {\n        conflictStart = (CONFLICT_START + \" \" + args[5]).getBytes();\n        conflictEnd = (CONFLICT_END + \" \" + args[6]).getBytes();\n      }\n    } else if (GIT_OPTION.equals(args[0])) {\n      overwrite = true;\n    } else {\n      System.exit(2);\n      return;\n    }\n    configureLog4j();\n    String systemPath = new File(System.getProperty(LOG_PROPERTY)).getParentFile().getParentFile().getAbsolutePath();\n    MergeDriverBackupUtil.setMergeBackupDirPath(systemPath + File.separator + \"merge-backup\");\n    AbstractContentMerger merger = selectMerger(baseFile, currentFile, otherFile);\n    if (merger == null) {\n      merger = (SVN_OPTION.equals(args[0]) ?\n        new TextMerger() :\n        new SimpleMerger()\n      );\n    }\n    System.exit(FileMerger.mergeFiles(merger, baseFile, currentFile, otherFile, conflictStart, conflictEnd, conflictSeparator, overwrite));\n  }","id":46173,"modified_method":"public static void main(String[] args) {\n    byte[] conflictStart = CONFLICT_START.getBytes();\n    byte[] conflictEnd = CONFLICT_END.getBytes();\n    byte[] conflictSeparator = CONFLICT_SEPARATOR.getBytes();\n    if (args.length < 4) {\n      System.err.println(\"Usage <merger> --<vcs> <base> <current> <other> \" + \"[<base name> <current name> <other name>]\");\n      System.exit(2);\n    }\n\n    File baseFile = new File(args[1]);\n    File currentFile = new File(args[2]);\n    File otherFile = new File(args[3]);\n    boolean overwrite = false;\n    if (SVN_OPTION.equals(args[0])) {\n      if (args.length >= 7) {\n        conflictStart = (CONFLICT_START + \" \" + args[5]).getBytes();\n        conflictEnd = (CONFLICT_END + \" \" + args[6]).getBytes();\n      }\n    } else if (GIT_OPTION.equals(args[0])) {\n      overwrite = true;\n    } else {\n      System.exit(2);\n      return;\n    }\n    configureLog4j();\n    String systemPath = new File(System.getProperty(LOG_PROPERTY)).getParentFile().getParentFile().getAbsolutePath();\n    MergeDriverBackupUtil.setMergeBackupDirPath(systemPath + File.separator + \"merge-backup\");\n    AbstractContentMerger merger = selectMerger(baseFile, currentFile, otherFile);\n    if (merger == null) {\n      merger = (SVN_OPTION.equals(args[0]) ?\n        new TextMerger() :\n        new SimpleMerger()\n      );\n    }\n\n    boolean convertCRLF = GIT_OPTION.equals(args[0]) && false;\n    int status = FileMerger.mergeFiles(merger, baseFile, currentFile, otherFile, conflictStart, conflictEnd, conflictSeparator, overwrite, convertCRLF);\n    System.exit(status);\n  }","commit_id":"a82b0f487811a1ca03dc2c404caf21b07af907b4","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createPositionInfo(this, node);\n      TraceInfoGenerationUtil.createScopeInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))), this.getSNode());\n    }\n    this.appendNewLine();\n    this.indentBuffer();\n    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"returnType\", true), this.getSNode());\n    this.append(\" \");\n    this.append(SPropertyOperations.getString(node, \"name\"));\n    this.append(\"()\");\n    if ((SLinkOperations.getTarget(node, \"defaultValue\", true) != null)) {\n      this.append(\" default \");\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"defaultValue\", true), this.getSNode());\n    }\n    this.append(\";\");\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.fillPositionInfo(this, node, TraceableConcept_Behavior.call_getTraceableProperty_5067982036267369901(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.TraceableConcept\")));\n      TraceInfoGenerationUtil.fillScopeInfo(this, node, ScopeConcept_Behavior.call_getScopeVariables_5067982036267369894(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.ScopeConcept\")));\n    }\n  }","id":46174,"modified_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createPositionInfo(this, node);\n      TraceInfoGenerationUtil.createScopeInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))), this.getSNode());\n    }\n    this.appendNewLine();\n    this.indentBuffer();\n    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"returnType\", true), this.getSNode());\n    this.append(\" \");\n    this.append(SPropertyOperations.getString(node, \"name\"));\n    this.append(\"()\");\n    if ((SLinkOperations.getTarget(node, \"defaultValue\", true) != null)) {\n      this.append(\" default \");\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"defaultValue\", true), this.getSNode());\n    }\n    this.append(\";\");\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.fillPositionInfo(this, node, TraceableConcept_Behavior.call_getTraceableProperty_5067982036267369901(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.TraceableConcept\")));\n      TraceInfoGenerationUtil.fillScopeInfo(this, node, ScopeConcept_Behavior.call_getScopeVariables_5067982036267369894(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.ScopeConcept\")));\n    }\n  }","commit_id":"31ca9457328e7b62e86f336878403c20b5d8ab07","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createUnitInfo(this, node);\n    }\n    BaseLanguageTextGen.fileHeader(node, this);\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibility(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))), this.getSNode());\n    }\n    if (!(node.isRoot())) {\n      this.append(\"static \");\n    }\n    this.appendWithIndent(\"@interface \");\n    if (isEmpty_ydmu3t_a0f0a(SPropertyOperations.getString(node, \"name\"))) {\n      this.foundError(\"annotation name is empty\");\n      this.append(\"???\");\n    } else {\n      this.append(JavaNameUtil.shortName(SPropertyOperations.getString(node, \"name\")));\n    }\n    this.append(\" {\");\n    this.increaseDepth();\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"method\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"method\", true)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n      }\n    }\n    this.decreaseDepth();\n    this.decreaseDepth();\n    this.appendNewLine();\n    this.append(\"}\");\n    this.appendNewLine();\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.fillUnitInfo(this, node, UnitConcept_Behavior.call_getUnitName_5067982036267369911(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.UnitConcept\")));\n    }\n  }","id":46175,"modified_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createUnitInfo(this, node);\n    }\n    BaseLanguageTextGen.fileHeader(node, this);\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibility(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if ((AttributeOperations.getAttribute(node, new NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))), this.getSNode());\n    }\n    if (!(node.isRoot())) {\n      this.append(\"static \");\n    }\n    this.appendWithIndent(\"@interface \");\n    if (isEmpty_ydmu3t_a0f0a(SPropertyOperations.getString(node, \"name\"))) {\n      this.foundError(\"annotation name is empty\");\n      this.append(\"???\");\n    } else {\n      this.append(JavaNameUtil.shortName(SPropertyOperations.getString(node, \"name\")));\n    }\n    this.append(\" {\");\n    this.increaseDepth();\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"method\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"method\", true)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n      }\n    }\n    this.decreaseDepth();\n    this.decreaseDepth();\n    this.appendNewLine();\n    this.append(\"}\");\n    this.appendNewLine();\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.fillUnitInfo(this, node, UnitConcept_Behavior.call_getUnitName_5067982036267369911(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.UnitConcept\")));\n    }\n  }","commit_id":"31ca9457328e7b62e86f336878403c20b5d8ab07","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static void internalClassName(String pack, String className, final SNodeTextGen textGen) {\n    BaseLanguageTextGen.appendClsName(pack, className, true, textGen);\n  }","id":46176,"modified_method":"public static void internalClassName(String pack, String className, final SNodeTextGen textGen) {\n    String toAppend = BaseLanguageTextGen.appendClsName(pack, NameUtil.longNameFromNamespaceAndShortName(pack, className), textGen);\n    textGen.append(toAppend);\n  }","commit_id":"31ca9457328e7b62e86f336878403c20b5d8ab07","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static void importRefPart(SReference ref, final SNodeTextGen textGen) {\n    if (ref == null) {\n      return;\n    }\n    Tuples._2<String, String> packageAndShortName = BaseLanguageTextGen.getPackageAndShortName(ref, textGen);\n    if (packageAndShortName == null) {\n      LOG.warning(\"null package and short name\");\n      return;\n    }\n    BaseLanguageTextGen.appendClsName(packageAndShortName._0(), packageAndShortName._1(), false, textGen);\n  }","id":46177,"modified_method":"public static void importRefPart(SReference ref, final SNodeTextGen textGen) {\n    if (ref == null) {\n      return;\n    }\n    _2<String, String> packageAndShortName = BaseLanguageTextGen.getPackageAndShortName(ref, textGen);\n    if (packageAndShortName == null) {\n      LOG.warning(\"null package and short name\");\n      return;\n    }\n    BaseLanguageTextGen.appendClsName(packageAndShortName._0(), NameUtil.longNameFromNamespaceAndShortName(packageAndShortName._0(), packageAndShortName._1()), textGen);\n  }","commit_id":"31ca9457328e7b62e86f336878403c20b5d8ab07","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected static boolean isNeedLongName(String shortName, String packageName, final SNodeTextGen textGen) {\n    if (shortName == null || packageName == null || packageName.isEmpty()) {\n      return false;\n    }\n    Set<String> importedNames = BaseLanguageTextGen.getUserObjects(TextGenManager.IMPORT, textGen);\n    for (String importedName : importedNames) {\n      if (JavaNameUtil.shortName(importedName).equals(shortName) && !(JavaNameUtil.packageName(importedName).equals(packageName))) {\n        return true;\n      }\n    }\n    return false;\n  }","id":46178,"modified_method":"protected static boolean isNeedLongName(String fqName, final SNodeTextGen textGen) {\n    assert fqName != null && !((fqName == null || fqName.length() == 0));\n    Set<String> importedNames = BaseLanguageTextGen.getUserObjects(TextGenManager.IMPORT, textGen);\n    for (String importedName : importedNames) {\n      boolean shortEquals = JavaNameUtil.shortName(importedName).equals(JavaNameUtil.shortName(fqName));\n      boolean longEquals = importedName.equals(fqName);\n      if (shortEquals && !(longEquals)) {\n        return true;\n      }\n    }\n    return false;\n  }","commit_id":"31ca9457328e7b62e86f336878403c20b5d8ab07","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected static void appendClsName(String packageName, String className, boolean isInternal, final SNodeTextGen textGen) {\n    if (className == null) {\n      textGen.foundError(\"class name is NULL\");\n      textGen.append(\"???\");\n      return;\n    }\n    if (packageName.contains(\"@\") || className.contains(\"@\")) {\n      textGen.foundError(\"class name not contain '@'\");\n    }\n    String importedFqName;\n    String importedLongFqName;\n    String importedShortName = className.split(\"\\\\.\")[0];\n    if (packageName.length() > 0) {\n      importedFqName = packageName + \".\" + importedShortName;\n      importedLongFqName = packageName + \".\" + className;\n    } else {\n      importedFqName = importedShortName;\n      importedLongFqName = className;\n    }\n    Set<String> importedNames = BaseLanguageTextGen.getUserObjects(TextGenManager.IMPORT, textGen);\n    if (SetSequence.fromSet(importedNames).contains(importedLongFqName)) {\n      if (isInternal) {\n        textGen.append(className);\n      }\n      return;\n    }\n    for (String importedName : importedNames) {\n      if (className.equals(JavaNameUtil.shortName(importedName))) {\n        if (isInternal) {\n          String fqName;\n          if (packageName.length() > 0) {\n            fqName = packageName + \".\" + className;\n          } else {\n            fqName = className;\n          }\n          textGen.append(fqName);\n        }\n        return;\n      }\n    }\n    SetSequence.fromSet(importedNames).addElement(importedLongFqName);\n    BaseLanguageTextGen.addDependency(InternUtil.intern(importedFqName), textGen);\n    Set<String> addedImports = BaseLanguageTextGen.getUserObjects(TextGenManager.ADDED_IMPORT, textGen);\n    if (!(packageName.equals(\"java.lang\") || packageName.equals(textGen.getBuffer().getUserObject(TextGenManager.PACKAGE_NAME)) || SetSequence.fromSet(addedImports).contains(importedFqName))) {\n      int currPartId = textGen.getBuffer().selectPart(TextGenBuffer.TOP);\n      textGen.appendNewLine();\n      textGen.append(\"import \" + importedFqName + \";\");\n      textGen.getBuffer().selectPart(currPartId);\n      SetSequence.fromSet(addedImports).addElement(importedFqName);\n    }\n    if (isInternal) {\n      textGen.append(className);\n    }\n  }","id":46179,"modified_method":"protected static String appendClsName(String pack, String fqName, final SNodeTextGen textGen) {\n    if (fqName == null) {\n      textGen.foundError(\"class name is NULL\");\n      return \"???\";\n    }\n\n    ImportsContext context = ImportsContext.getInstance(textGen.getBuffer());\n    String simpleName = JavaNameUtil.shortName(fqName);\n    if (context.containsBinding(simpleName)) {\n      if (fqName.equals(context.getBinding(simpleName))) {\n        return simpleName;\n      } else {\n        return fqName;\n      }\n    } else {\n      if (context.addBinding(pack, fqName)) {\n        int currPartId = textGen.getBuffer().selectPart(TextGenBuffer.TOP);\n        textGen.appendNewLine();\n        textGen.append(\"import \" + fqName + \";\");\n        textGen.getBuffer().selectPart(currPartId);\n      }\n\n      // todo: ? \n      BaseLanguageTextGen.addDependency(InternUtil.intern(fqName), textGen);\n\n      return simpleName;\n    }\n  }","commit_id":"31ca9457328e7b62e86f336878403c20b5d8ab07","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static void internalClassifierName(SNode node, final SNodeTextGen textGen) {\n    if ((node == null)) {\n      textGen.append(\"???\");\n      textGen.foundError(\"classifier is null\");\n      return;\n    }\n    BaseLanguageTextGen.appendClsName(BaseLanguageTextGen.getPackageName(node, textGen), SPropertyOperations.getString(node, \"nestedName\"), true, textGen);\n  }","id":46180,"modified_method":"public static void internalClassifierName(SNode node, final SNodeTextGen textGen) {\n    if ((node == null)) {\n      textGen.append(\"???\");\n      textGen.foundError(\"classifier is null\");\n      return;\n    }\n    String toAppend = BaseLanguageTextGen.appendClsName(BaseLanguageTextGen.getPackageName(node, textGen), NameUtil.longNameFromNamespaceAndShortName(BaseLanguageTextGen.getPackageName(node, textGen), SPropertyOperations.getString(node, \"nestedName\")), textGen);\n    textGen.append(toAppend);\n  }","commit_id":"31ca9457328e7b62e86f336878403c20b5d8ab07","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static void blClassifierRef(SReference classifierRef, final SNodeTextGen textGen) {\n    if (classifierRef == null) {\n      textGen.foundError(\"null classifier ref\");\n      return;\n    }\n    Tuples._2<String, String> packageAndShortName = BaseLanguageTextGen.getPackageAndShortName(classifierRef, textGen);\n    if (packageAndShortName == null) {\n      LOG.warning(\"null package and short name\");\n      return;\n    }\n    String packageName = packageAndShortName._0();\n    String shortName = packageAndShortName._1();\n    BaseLanguageTextGen.appendClsName(packageAndShortName._0(), packageAndShortName._1(), false, textGen);\n    StringTextGen.compilableString((BaseLanguageTextGen.isNeedLongName(shortName, packageName, textGen) ?\n      (packageName + '.' + shortName) :\n      shortName\n    ), textGen);\n  }","id":46181,"modified_method":"public static void blClassifierRef(SReference classifierRef, final SNodeTextGen textGen) {\n    if (classifierRef == null) {\n      textGen.foundError(\"null classifier ref\");\n      return;\n    }\n    _2<String, String> packageAndShortName = BaseLanguageTextGen.getPackageAndShortName(classifierRef, textGen);\n    if (packageAndShortName == null) {\n      LOG.warning(\"null package and short name\");\n      return;\n    }\n    String packageName = packageAndShortName._0();\n    String shortName = packageAndShortName._1();\n    String longName = NameUtil.longNameFromNamespaceAndShortName(packageAndShortName._0(), packageAndShortName._1());\n    BaseLanguageTextGen.appendClsName(packageAndShortName._0(), longName, textGen);\n    StringTextGen.compilableString((BaseLanguageTextGen.isNeedLongName(longName, textGen) ?\n      longName :\n      JavaNameUtil.shortName(longName)\n    ), textGen);\n  }","commit_id":"31ca9457328e7b62e86f336878403c20b5d8ab07","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createUnitInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))), this.getSNode());\n    }\n    BaseLanguageTextGen.fileHeader(node, this);\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if (Classifier_Behavior.call_isInner_521412098689998677(node) && Classifier_Behavior.call_isStatic_521412098689998668(node)) {\n      this.append(\"static \");\n    }\n    if (SPropertyOperations.getBoolean(node, \"abstractClass\")) {\n      this.append(\"abstract \");\n    }\n    if (SPropertyOperations.getBoolean(node, \"isFinal\")) {\n      this.append(\"final \");\n    }\n    this.append(\"class \");\n    this.append(SPropertyOperations.getString(node, \"name\"));\n    GenericDeclarationTextGen2.typeDeclarations(node, this);\n    if ((SLinkOperations.getTarget(node, \"superclass\", true) != null)) {\n      this.append(\" extends \");\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"superclass\", true), this.getSNode());\n    }\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"implementedInterface\", true)).isNotEmpty()) {\n      this.append(\" implements \");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"implementedInterface\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"implementedInterface\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"implementedInterface\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n    }\n    this.append(\" {\");\n    this.increaseDepth();\n    BaseClassConceptTextGen.body(node, this);\n    this.decreaseDepth();\n    if ((SLinkOperations.getTarget(node, \"classInitializer\", true) == null) && ListSequence.fromList(SLinkOperations.getTargets(node, \"constructor\", true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(node, \"field\", true)).isEmpty() && (SLinkOperations.getTarget(node, \"instanceInitializer\", true) == null) && ListSequence.fromList(SLinkOperations.getTargets(node, \"method\", true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(node, \"staticField\", true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(node, \"property\", true)).isEmpty() && (SLinkOperations.getTarget(node, \"staticInitializer\", true) == null) && ListSequence.fromList(SLinkOperations.getTargets(node, \"staticInnerClassifiers\", true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(node, \"staticMethod\", true)).isEmpty()) {\n      this.appendNewLine();\n    }\n    if (!(node.isRoot())) {\n      this.appendWithIndent(\"}\");\n    } else {\n      this.append(\"}\");\n    }\n    this.appendNewLine();\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.fillUnitInfo(this, node, UnitConcept_Behavior.call_getUnitName_5067982036267369911(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.UnitConcept\")));\n    }\n  }","id":46182,"modified_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createUnitInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))), this.getSNode());\n    }\n    BaseLanguageTextGen.fileHeader(node, this);\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if (Classifier_Behavior.call_isInner_521412098689998677(node) && Classifier_Behavior.call_isStatic_521412098689998668(node)) {\n      this.append(\"static \");\n    }\n    if (SPropertyOperations.getBoolean(node, \"abstractClass\")) {\n      this.append(\"abstract \");\n    }\n    if (SPropertyOperations.getBoolean(node, \"isFinal\")) {\n      this.append(\"final \");\n    }\n    this.append(\"class \");\n    this.append(SPropertyOperations.getString(node, \"name\"));\n    GenericDeclarationTextGen2.typeDeclarations(node, this);\n    if ((SLinkOperations.getTarget(node, \"superclass\", true) != null)) {\n      this.append(\" extends \");\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"superclass\", true), this.getSNode());\n    }\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"implementedInterface\", true)).isNotEmpty()) {\n      this.append(\" implements \");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"implementedInterface\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"implementedInterface\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"implementedInterface\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n    }\n    this.append(\" {\");\n    this.increaseDepth();\n    BaseClassConceptTextGen.body(node, this);\n    this.decreaseDepth();\n    if ((SLinkOperations.getTarget(node, \"classInitializer\", true) == null) && ListSequence.fromList(SLinkOperations.getTargets(node, \"constructor\", true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(node, \"field\", true)).isEmpty() && (SLinkOperations.getTarget(node, \"instanceInitializer\", true) == null) && ListSequence.fromList(SLinkOperations.getTargets(node, \"method\", true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(node, \"staticField\", true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(node, \"property\", true)).isEmpty() && (SLinkOperations.getTarget(node, \"staticInitializer\", true) == null) && ListSequence.fromList(SLinkOperations.getTargets(node, \"staticInnerClassifiers\", true)).isEmpty() && ListSequence.fromList(SLinkOperations.getTargets(node, \"staticMethod\", true)).isEmpty()) {\n      this.appendNewLine();\n    }\n    if (!(node.isRoot())) {\n      this.appendWithIndent(\"}\");\n    } else {\n      this.append(\"}\");\n    }\n    this.appendNewLine();\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.fillUnitInfo(this, node, UnitConcept_Behavior.call_getUnitName_5067982036267369911(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.UnitConcept\")));\n    }\n  }","commit_id":"31ca9457328e7b62e86f336878403c20b5d8ab07","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doGenerateText(SNode node) {\n    BaseLanguageTextGen.importRefPart(SNodeOperations.getReference(node, SLinkOperations.findLinkDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", \"constructorDeclaration\")), this);\n    BaseLanguageTextGen.methodTypeArguments(node, this);\n    this.append(this.getReferentPresentation(SNodeOperations.getReference(node, SLinkOperations.findLinkDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", \"constructorDeclaration\")), true));\n    BaseLanguageTextGen.typeParameters(SLinkOperations.getTargets(node, \"typeParameter\", true), this);\n    BaseLanguageTextGen.arguments(node, this);\n  }","id":46183,"modified_method":"public void doGenerateText(SNode node) {\n    BaseLanguageTextGen.importRefPart(SNodeOperations.getReference(node, SLinkOperations.findLinkDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", \"constructorDeclaration\")), this);\n    BaseLanguageTextGen.methodTypeArguments(node, this);\n    BaseLanguageTextGen.blClassifierRef(SNodeOperations.getReference(node, SLinkOperations.findLinkDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", \"constructorDeclaration\")), this);\n    BaseLanguageTextGen.typeParameters(SLinkOperations.getTargets(node, \"typeParameter\", true), this);\n    BaseLanguageTextGen.arguments(node, this);\n  }","commit_id":"31ca9457328e7b62e86f336878403c20b5d8ab07","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createPositionInfo(this, node);\n      TraceInfoGenerationUtil.createScopeInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))), this.getSNode());\n    }\n    SNode declaringClass = SNodeOperations.cast(SNodeOperations.getParent(node), \"jetbrains.mps.baseLanguage.structure.ClassConcept\");\n    this.appendNewLine();\n    BaseLanguageTextGen.annotations(node, this);\n    if (!(SNodeOperations.isInstanceOf(declaringClass, \"jetbrains.mps.baseLanguage.structure.EnumClass\"))) {\n      BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    } else {\n      this.indentBuffer();\n    }\n    GenericDeclarationTextGen2.typeDeclarations(node, this);\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"typeVariableDeclaration\", true)).isNotEmpty()) {\n      this.append(\" \");\n    }\n    assert declaringClass != null;\n    this.append(SPropertyOperations.getString(declaringClass, \"name\"));\n    this.append(\"(\");\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"parameter\", true)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n        if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).last()) {\n          this.append(\", \");\n        }\n      }\n    }\n    this.append(\")\");\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).isNotEmpty()) {\n      this.append(\" throws \");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"throwsItem\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n    }\n    this.append(\" {\");\n    this.increaseDepth();\n    if ((SLinkOperations.getTarget(node, \"body\", true) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"body\", true), this.getSNode());\n    }\n    this.decreaseDepth();\n    this.appendNewLine();\n    this.appendWithIndent(\"}\");\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.fillPositionInfo(this, node, TraceableConcept_Behavior.call_getTraceableProperty_5067982036267369901(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.TraceableConcept\")));\n      TraceInfoGenerationUtil.fillScopeInfo(this, node, ScopeConcept_Behavior.call_getScopeVariables_5067982036267369894(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.ScopeConcept\")));\n    }\n  }","id":46184,"modified_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createPositionInfo(this, node);\n      TraceInfoGenerationUtil.createScopeInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))), this.getSNode());\n    }\n    SNode declaringClass = SNodeOperations.cast(SNodeOperations.getParent(node), \"jetbrains.mps.baseLanguage.structure.ClassConcept\");\n    this.appendNewLine();\n    BaseLanguageTextGen.annotations(node, this);\n    if (!(SNodeOperations.isInstanceOf(declaringClass, \"jetbrains.mps.baseLanguage.structure.EnumClass\"))) {\n      BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    } else {\n      this.indentBuffer();\n    }\n    GenericDeclarationTextGen2.typeDeclarations(node, this);\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"typeVariableDeclaration\", true)).isNotEmpty()) {\n      this.append(\" \");\n    }\n    assert declaringClass != null;\n    this.append(SPropertyOperations.getString(declaringClass, \"name\"));\n    this.append(\"(\");\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"parameter\", true)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n        if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).last()) {\n          this.append(\", \");\n        }\n      }\n    }\n    this.append(\")\");\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).isNotEmpty()) {\n      this.append(\" throws \");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"throwsItem\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n    }\n    this.append(\" {\");\n    this.increaseDepth();\n    if ((SLinkOperations.getTarget(node, \"body\", true) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"body\", true), this.getSNode());\n    }\n    this.decreaseDepth();\n    this.appendNewLine();\n    this.appendWithIndent(\"}\");\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.fillPositionInfo(this, node, TraceableConcept_Behavior.call_getTraceableProperty_5067982036267369901(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.TraceableConcept\")));\n      TraceInfoGenerationUtil.fillScopeInfo(this, node, ScopeConcept_Behavior.call_getScopeVariables_5067982036267369894(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.ScopeConcept\")));\n    }\n  }","commit_id":"31ca9457328e7b62e86f336878403c20b5d8ab07","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createUnitInfo(this, node);\n    }\n    BaseLanguageTextGen.fileHeader(node, this);\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))), this.getSNode());\n    }\n    if (!(node.isRoot())) {\n      this.append(\"static \");\n    }\n    this.appendWithIndent(\"enum \");\n    this.append(JavaNameUtil.shortName(SPropertyOperations.getString(node, \"name\")));\n    // new \n    if ((SLinkOperations.getTarget(node, \"superclass\", true) != null)) {\n      this.append(\" extends \");\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"superclass\", true), this.getSNode());\n    }\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"implementedInterface\", true)).isNotEmpty()) {\n      this.append(\" implements \");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"implementedInterface\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"implementedInterface\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"implementedInterface\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n    }\n    this.append(\" {\");\n    this.increaseDepth();\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"enumConstant\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"enumConstant\", true)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n        if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"enumConstant\", true)).last()) {\n          this.append(\",\");\n        }\n      }\n    }\n    this.append(\";\");\n    this.appendNewLine();\n    BaseClassConceptTextGen.body(node, this);\n    this.decreaseDepth();\n    if (!(node.isRoot())) {\n      this.appendWithIndent(\"}\");\n    } else {\n      this.append(\"}\");\n    }\n    this.appendNewLine();\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.fillUnitInfo(this, node, UnitConcept_Behavior.call_getUnitName_5067982036267369911(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.UnitConcept\")));\n    }\n  }","id":46185,"modified_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createUnitInfo(this, node);\n    }\n    BaseLanguageTextGen.fileHeader(node, this);\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if ((AttributeOperations.getAttribute(node, new NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))), this.getSNode());\n    }\n    if (!(node.isRoot())) {\n      this.append(\"static \");\n    }\n    this.appendWithIndent(\"enum \");\n    this.append(JavaNameUtil.shortName(SPropertyOperations.getString(node, \"name\")));\n    // new \n    if ((SLinkOperations.getTarget(node, \"superclass\", true) != null)) {\n      this.append(\" extends \");\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"superclass\", true), this.getSNode());\n    }\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"implementedInterface\", true)).isNotEmpty()) {\n      this.append(\" implements \");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"implementedInterface\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"implementedInterface\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"implementedInterface\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n    }\n    this.append(\" {\");\n    this.increaseDepth();\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"enumConstant\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"enumConstant\", true)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n        if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"enumConstant\", true)).last()) {\n          this.append(\",\");\n        }\n      }\n    }\n    this.append(\";\");\n    this.appendNewLine();\n    BaseClassConceptTextGen.body(node, this);\n    this.decreaseDepth();\n    if (!(node.isRoot())) {\n      this.appendWithIndent(\"}\");\n    } else {\n      this.append(\"}\");\n    }\n    this.appendNewLine();\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.fillUnitInfo(this, node, UnitConcept_Behavior.call_getUnitName_5067982036267369911(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.UnitConcept\")));\n    }\n  }","commit_id":"31ca9457328e7b62e86f336878403c20b5d8ab07","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createPositionInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment\"))), this.getSNode());\n    }\n    this.appendNewLine();\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if (SPropertyOperations.getBoolean(node, \"isVolatile\")) {\n      this.append(\"volatile \");\n    }\n    if (SPropertyOperations.getBoolean(node, \"isTransient\")) {\n      this.append(\"transient \");\n    }\n    BaseLanguageTextGen.variableDeclaration(node, this);\n    this.append(\";\");\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.fillPositionInfo(this, node, TraceableConcept_Behavior.call_getTraceableProperty_5067982036267369901(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.TraceableConcept\")));\n    }\n  }","id":46186,"modified_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createPositionInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment\"))), this.getSNode());\n    }\n    this.appendNewLine();\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if (SPropertyOperations.getBoolean(node, \"isVolatile\")) {\n      this.append(\"volatile \");\n    }\n    if (SPropertyOperations.getBoolean(node, \"isTransient\")) {\n      this.append(\"transient \");\n    }\n    BaseLanguageTextGen.variableDeclaration(node, this);\n    this.append(\";\");\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.fillPositionInfo(this, node, TraceableConcept_Behavior.call_getTraceableProperty_5067982036267369901(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.TraceableConcept\")));\n    }\n  }","commit_id":"31ca9457328e7b62e86f336878403c20b5d8ab07","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createPositionInfo(this, node);\n      TraceInfoGenerationUtil.createScopeInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))), this.getSNode());\n    }\n    this.appendNewLine();\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if (SPropertyOperations.getBoolean(node, \"isFinal\")) {\n      this.append(\"final \");\n    }\n    if (SPropertyOperations.getBoolean(node, \"isAbstract\") && !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), \"jetbrains.mps.baseLanguage.structure.Interface\"))) {\n      this.append(\"abstract \");\n    }\n    if (SPropertyOperations.getBoolean(node, \"isSynchronized\")) {\n      this.append(\"synchronized \");\n    }\n    GenericDeclarationTextGen2.typeDeclarations(node, this);\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"typeVariableDeclaration\", true)).isNotEmpty()) {\n      this.append(\" \");\n    }\n    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"returnType\", true), this.getSNode());\n    this.append(\" \");\n    this.append(SPropertyOperations.getString(node, \"name\"));\n    this.append(\"(\");\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"parameter\", true)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n        if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).last()) {\n          this.append(\", \");\n        }\n      }\n    }\n    this.append(\")\");\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).isNotEmpty()) {\n      this.append(\" throws \");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"throwsItem\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n    }\n    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), \"jetbrains.mps.baseLanguage.structure.Interface\") || SPropertyOperations.getBoolean(node, \"isAbstract\")) {\n      this.append(\";\");\n      if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), \"jetbrains.mps.baseLanguage.structure.Interface\"))) {\n        this.appendNewLine();\n      }\n    } else {\n      this.append(\" {\");\n      this.increaseDepth();\n      if ((SLinkOperations.getTarget(node, \"body\", true) != null)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"body\", true), this.getSNode());\n      } else {\n        this.appendNewLine();\n        this.appendWithIndent(\"throw new RuntimeException(\\\"NOT IMPLEMENTED\\\");\");\n      }\n      this.decreaseDepth();\n      this.appendNewLine();\n      this.appendWithIndent(\"}\");\n      this.appendNewLine();\n    }\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.fillPositionInfo(this, node, TraceableConcept_Behavior.call_getTraceableProperty_5067982036267369901(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.TraceableConcept\")));\n      TraceInfoGenerationUtil.fillScopeInfo(this, node, ScopeConcept_Behavior.call_getScopeVariables_5067982036267369894(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.ScopeConcept\")));\n    }\n  }","id":46187,"modified_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createPositionInfo(this, node);\n      TraceInfoGenerationUtil.createScopeInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))), this.getSNode());\n    }\n    this.appendNewLine();\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if (SPropertyOperations.getBoolean(node, \"isFinal\")) {\n      this.append(\"final \");\n    }\n    if (SPropertyOperations.getBoolean(node, \"isAbstract\") && !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), \"jetbrains.mps.baseLanguage.structure.Interface\"))) {\n      this.append(\"abstract \");\n    }\n    if (SPropertyOperations.getBoolean(node, \"isSynchronized\")) {\n      this.append(\"synchronized \");\n    }\n    GenericDeclarationTextGen2.typeDeclarations(node, this);\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"typeVariableDeclaration\", true)).isNotEmpty()) {\n      this.append(\" \");\n    }\n    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"returnType\", true), this.getSNode());\n    this.append(\" \");\n    this.append(SPropertyOperations.getString(node, \"name\"));\n    this.append(\"(\");\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"parameter\", true)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n        if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).last()) {\n          this.append(\", \");\n        }\n      }\n    }\n    this.append(\")\");\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).isNotEmpty()) {\n      this.append(\" throws \");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"throwsItem\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n    }\n    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), \"jetbrains.mps.baseLanguage.structure.Interface\") || SPropertyOperations.getBoolean(node, \"isAbstract\")) {\n      this.append(\";\");\n      if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), \"jetbrains.mps.baseLanguage.structure.Interface\"))) {\n        this.appendNewLine();\n      }\n    } else {\n      this.append(\" {\");\n      this.increaseDepth();\n      if ((SLinkOperations.getTarget(node, \"body\", true) != null)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"body\", true), this.getSNode());\n      } else {\n        this.appendNewLine();\n        this.appendWithIndent(\"throw new RuntimeException(\\\"NOT IMPLEMENTED\\\");\");\n      }\n      this.decreaseDepth();\n      this.appendNewLine();\n      this.appendWithIndent(\"}\");\n      this.appendNewLine();\n    }\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.fillPositionInfo(this, node, TraceableConcept_Behavior.call_getTraceableProperty_5067982036267369901(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.TraceableConcept\")));\n      TraceInfoGenerationUtil.fillScopeInfo(this, node, ScopeConcept_Behavior.call_getScopeVariables_5067982036267369894(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.ScopeConcept\")));\n    }\n  }","commit_id":"31ca9457328e7b62e86f336878403c20b5d8ab07","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createUnitInfo(this, node);\n    }\n    BaseLanguageTextGen.fileHeader(node, this);\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))), this.getSNode());\n    }\n    if (!(ListSequence.fromList(SModelOperations.getRoots(SNodeOperations.getModel(node), \"jetbrains.mps.baseLanguage.structure.Interface\")).contains(node))) {\n      this.append(\"static \");\n    }\n    this.append(\"interface \");\n    this.append(JavaNameUtil.shortName(SPropertyOperations.getString(node, \"name\")));\n    GenericDeclarationTextGen2.typeDeclarations(node, this);\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"extendedInterface\", true)).isNotEmpty()) {\n      this.append(\" extends \");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"extendedInterface\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"extendedInterface\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"extendedInterface\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n    }\n    this.append(\" {\");\n    this.increaseDepth();\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"staticField\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"staticField\", true)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n      }\n    }\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"method\", true)).isNotEmpty()) {\n      BaseLanguageTextGen.newLine(ListSequence.fromList(SLinkOperations.getTargets(node, \"staticField\", true)).isNotEmpty(), this);\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"method\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"method\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n        }\n      }\n    }\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"staticInnerClassifiers\", true)).isNotEmpty()) {\n      this.appendNewLine();\n      BaseClassConceptTextGen.innerClassifiers(node, this);\n    }\n    this.decreaseDepth();\n    this.appendNewLine();\n    if (node.isRoot()) {\n      this.append(\"}\");\n    } else {\n      this.appendWithIndent(\"}\");\n    }\n    this.appendNewLine();\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.fillUnitInfo(this, node, UnitConcept_Behavior.call_getUnitName_5067982036267369911(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.UnitConcept\")));\n    }\n  }","id":46188,"modified_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createUnitInfo(this, node);\n    }\n    BaseLanguageTextGen.fileHeader(node, this);\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if ((AttributeOperations.getAttribute(node, new NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment\"))), this.getSNode());\n    }\n    if (!(ListSequence.fromList(SModelOperations.getRoots(SNodeOperations.getModel(node), \"jetbrains.mps.baseLanguage.structure.Interface\")).contains(node))) {\n      this.append(\"static \");\n    }\n    this.append(\"interface \");\n    this.append(JavaNameUtil.shortName(SPropertyOperations.getString(node, \"name\")));\n    GenericDeclarationTextGen2.typeDeclarations(node, this);\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"extendedInterface\", true)).isNotEmpty()) {\n      this.append(\" extends \");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"extendedInterface\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"extendedInterface\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"extendedInterface\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n    }\n    this.append(\" {\");\n    this.increaseDepth();\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"staticField\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"staticField\", true)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n      }\n    }\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"method\", true)).isNotEmpty()) {\n      BaseLanguageTextGen.newLine(ListSequence.fromList(SLinkOperations.getTargets(node, \"staticField\", true)).isNotEmpty(), this);\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"method\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"method\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n        }\n      }\n    }\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"staticInnerClassifiers\", true)).isNotEmpty()) {\n      this.appendNewLine();\n      BaseClassConceptTextGen.innerClassifiers(node, this);\n    }\n    this.decreaseDepth();\n    this.appendNewLine();\n    if (node.isRoot()) {\n      this.append(\"}\");\n    } else {\n      this.appendWithIndent(\"}\");\n    }\n    this.appendNewLine();\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.fillUnitInfo(this, node, UnitConcept_Behavior.call_getUnitName_5067982036267369911(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.UnitConcept\")));\n    }\n  }","commit_id":"31ca9457328e7b62e86f336878403c20b5d8ab07","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createPositionInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment\"))), this.getSNode());\n    }\n    this.appendNewLine();\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    this.append(\"static \");\n    if (SPropertyOperations.getBoolean(node, \"isFinal\")) {\n      this.append(\"final \");\n    }\n    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"type\", true), this.getSNode());\n    this.append(\" \");\n    this.append(SPropertyOperations.getString(node, \"name\"));\n    if ((SLinkOperations.getTarget(node, \"initializer\", true) != null)) {\n      this.append(\" = \");\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"initializer\", true), this.getSNode());\n    }\n    this.append(\";\");\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.fillPositionInfo(this, node, TraceableConcept_Behavior.call_getTraceableProperty_5067982036267369901(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.TraceableConcept\")));\n    }\n  }","id":46189,"modified_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createPositionInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment\"))), this.getSNode());\n    }\n    this.appendNewLine();\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    this.append(\"static \");\n    if (SPropertyOperations.getBoolean(node, \"isFinal\")) {\n      this.append(\"final \");\n    }\n    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"type\", true), this.getSNode());\n    this.append(\" \");\n    this.append(SPropertyOperations.getString(node, \"name\"));\n    if ((SLinkOperations.getTarget(node, \"initializer\", true) != null)) {\n      this.append(\" = \");\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"initializer\", true), this.getSNode());\n    }\n    this.append(\";\");\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.fillPositionInfo(this, node, TraceableConcept_Behavior.call_getTraceableProperty_5067982036267369901(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.TraceableConcept\")));\n    }\n  }","commit_id":"31ca9457328e7b62e86f336878403c20b5d8ab07","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createPositionInfo(this, node);\n      TraceInfoGenerationUtil.createScopeInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))), this.getSNode());\n    }\n    this.appendNewLine();\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")) {\n      this.append(\"static \");\n    }\n    if (SPropertyOperations.getBoolean(node, \"isSynchronized\")) {\n      this.append(\"synchronized \");\n    }\n    GenericDeclarationTextGen2.typeDeclarations(node, this);\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"typeVariableDeclaration\", true)).isNotEmpty()) {\n      this.append(\" \");\n    }\n    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"returnType\", true), this.getSNode());\n    this.append(\" \");\n    this.append(SPropertyOperations.getString(node, \"name\"));\n    this.append(\"(\");\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"parameter\", true)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n        if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).last()) {\n          this.append(\", \");\n        }\n      }\n    }\n    this.append(\")\");\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).isNotEmpty()) {\n      this.append(\" throws \");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"throwsItem\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n    }\n    this.append(\" {\");\n    this.increaseDepth();\n    if ((SLinkOperations.getTarget(node, \"body\", true) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"body\", true), this.getSNode());\n    } else {\n      this.appendNewLine();\n      this.appendWithIndent(\"throw new RuntimeException(\\\"NOT IMPLEMENTED\\\");\");\n    }\n    this.decreaseDepth();\n    this.appendNewLine();\n    this.appendWithIndent(\"}\");\n    this.appendNewLine();\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.fillPositionInfo(this, node, TraceableConcept_Behavior.call_getTraceableProperty_5067982036267369901(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.TraceableConcept\")));\n      TraceInfoGenerationUtil.fillScopeInfo(this, node, ScopeConcept_Behavior.call_getScopeVariables_5067982036267369894(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.ScopeConcept\")));\n    }\n  }","id":46190,"modified_method":"public void doGenerateText(SNode node) {\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.createPositionInfo(this, node);\n      TraceInfoGenerationUtil.createScopeInfo(this, node);\n    }\n    if ((AttributeOperations.getAttribute(node, new NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), AttributeOperations.getAttribute(node, new NodeAttribute(SConceptOperations.findConceptDeclaration(\"jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment\"))), this.getSNode());\n    }\n    this.appendNewLine();\n    BaseLanguageTextGen.annotations(node, this);\n    BaseLanguageTextGen.visibilityWithIndent(SLinkOperations.getTarget(node, \"visibility\", true), this);\n    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")) {\n      this.append(\"static \");\n    }\n    if (SPropertyOperations.getBoolean(node, \"isSynchronized\")) {\n      this.append(\"synchronized \");\n    }\n    GenericDeclarationTextGen2.typeDeclarations(node, this);\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"typeVariableDeclaration\", true)).isNotEmpty()) {\n      this.append(\" \");\n    }\n    TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"returnType\", true), this.getSNode());\n    this.append(\" \");\n    this.append(SPropertyOperations.getString(node, \"name\"));\n    this.append(\"(\");\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).isNotEmpty()) {\n      for (SNode item : SLinkOperations.getTargets(node, \"parameter\", true)) {\n        TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n        if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"parameter\", true)).last()) {\n          this.append(\", \");\n        }\n      }\n    }\n    this.append(\")\");\n    if (ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).isNotEmpty()) {\n      this.append(\" throws \");\n      if (ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).isNotEmpty()) {\n        for (SNode item : SLinkOperations.getTargets(node, \"throwsItem\", true)) {\n          TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), item, this.getSNode());\n          if (item != ListSequence.fromList(SLinkOperations.getTargets(node, \"throwsItem\", true)).last()) {\n            this.append(\", \");\n          }\n        }\n      }\n    }\n    this.append(\" {\");\n    this.increaseDepth();\n    if ((SLinkOperations.getTarget(node, \"body\", true) != null)) {\n      TextGenManager.instance().appendNodeText(this.getContext(), this.getBuffer(), SLinkOperations.getTarget(node, \"body\", true), this.getSNode());\n    } else {\n      this.appendNewLine();\n      this.appendWithIndent(\"throw new RuntimeException(\\\"NOT IMPLEMENTED\\\");\");\n    }\n    this.decreaseDepth();\n    this.appendNewLine();\n    this.appendWithIndent(\"}\");\n    this.appendNewLine();\n    if (getBuffer().hasPositionsSupport()) {\n      TraceInfoGenerationUtil.fillPositionInfo(this, node, TraceableConcept_Behavior.call_getTraceableProperty_5067982036267369901(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.TraceableConcept\")));\n      TraceInfoGenerationUtil.fillScopeInfo(this, node, ScopeConcept_Behavior.call_getScopeVariables_5067982036267369894(SNodeOperations.cast(node, \"jetbrains.mps.lang.traceable.structure.ScopeConcept\")));\n    }\n  }","commit_id":"31ca9457328e7b62e86f336878403c20b5d8ab07","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean handleMessage(Message m) {\n\t\tlogMINOR = Logger.shouldLog(Logger.MINOR, this);\n\t\tPeerNode source = (PeerNode)m.getSource();\n\t\tif(source == null) {\n\t\t\t// Node has been disconnected and garbage collected already! Ouch.\n\t\t\treturn true;\n\t\t}\n\t\tif(logMINOR) Logger.minor(this, \"Dispatching \"+m+\" from \"+source);\n\t\tif(callback != null) {\n\t\t\ttry {\n\t\t\t\tcallback.snoop(m, node);\n\t\t\t} catch (Throwable t) {\n\t\t\t\tLogger.error(this, \"Callback threw \"+t, t);\n\t\t\t}\n\t\t}\n\t\tMessageType spec = m.getSpec();\n\t\tif(spec == DMT.FNPPing) {\n\t\t\t// Send an FNPPong\n\t\t\tMessage reply = DMT.createFNPPong(m.getInt(DMT.PING_SEQNO));\n\t\t\ttry {\n\t\t\t\tsource.sendAsync(reply, null, 0, pingCounter); // nothing we can do if can't contact source\n\t\t\t} catch (NotConnectedException e) {\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Lost connection replying to \"+m);\n\t\t\t}\n\t\t\treturn true;\n\t\t} else if (spec == DMT.FNPStoreSecret) {\n\t\t\treturn node.netid.handleStoreSecret(m);\n\t\t} else if(spec == DMT.FNPSecretPing) {\n\t\t\treturn node.netid.handleSecretPing(m);\n\t\t} else if(spec == DMT.FNPDetectedIPAddress) {\n\t\t\tPeer p = (Peer) m.getObject(DMT.EXTERNAL_ADDRESS);\n\t\t\tsource.setRemoteDetectedPeer(p);\n\t\t\tnode.ipDetector.redetectAddress();\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPTime) {\n\t\t\treturn handleTime(m, source);\n\t\t} else if(spec == DMT.FNPUptime) {\n\t\t\treturn handleUptime(m, source);\n\t\t} else if(spec == DMT.FNPSentPackets) {\n\t\t\tsource.handleSentPackets(m);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPVoid) {\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPDisconnect) {\n\t\t\thandleDisconnect(m, source);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.nodeToNodeMessage) {\n\t\t\tnode.receivedNodeToNodeMessage(m, source);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.UOMAnnounce && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleAnnounce(m, source);\n\t\t} else if(spec == DMT.UOMRequestRevocation && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleRequestRevocation(m, source);\n\t\t} else if(spec == DMT.UOMSendingRevocation && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleSendingRevocation(m, source);\n\t\t} else if(spec == DMT.UOMRequestMain && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleRequestMain(m, source);\n\t\t} else if(spec == DMT.UOMSendingMain && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleSendingMain(m, source);\n\t\t} else if(spec == DMT.FNPOpennetAnnounceRequest) {\n\t\t\treturn handleAnnounceRequest(m, source);\n\t\t} else if(spec == DMT.FNPRoutingStatus) {\n\t\t\tif(source instanceof DarknetPeerNode) {\n\t\t\t\tboolean value = m.getBoolean(DMT.ROUTING_ENABLED);\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"The peer (\"+source+\") asked us to set routing=\"+value);\n\t\t\t\t((DarknetPeerNode)source).setRoutingStatus(value, false);\n\t\t\t}\n\t\t\t// We claim it in any case\n\t\t\treturn true;\n\t\t} else if(source.isRealConnection() && spec == DMT.FNPLocChangeNotificationNew) {\n\t\t\tdouble newLoc = m.getDouble(DMT.LOCATION);\n\t\t\tShortBuffer buffer = ((ShortBuffer) m.getObject(DMT.PEER_LOCATIONS));\n\t\t\tdouble[] locs = Fields.bytesToDoubles(buffer.getData());\n\t\t\t\n\t\t\t/**\n\t\t\t * Do *NOT* remove the sanity check below! \n\t\t\t * @see http://archives.freenetproject.org/message/20080718.144240.359e16d3.en.html\n\t\t\t */\n\t\t\tif((OpennetManager.MAX_PEERS_FOR_SCALING < locs.length) && (source.isOpennet())) {\n\t\t\t\tLogger.error(this, \"We received \"+locs.length+ \" locations from \"+source.toString()+\"! That should *NOT* happen!\");\n\t\t\t\tsource.forceDisconnect(true);\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t// We are on darknet and we trust our peers OR we are on opennet\n\t\t\t\t// and the amount of locations sent to us seems reasonable\n\t\t\t\tsource.updateLocation(newLoc, locs);\n\t\t\t}\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif(!source.isRoutable()) return false;\n\t\tif(Logger.shouldLog(Logger.DEBUG, this)) Logger.debug(this, \"Not routable\");\n\n\t\tif(spec == DMT.FNPNetworkID) {\n\t\t\tsource.handleFNPNetworkID(m);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPSwapRequest) {\n\t\t\treturn node.lm.handleSwapRequest(m, source);\n\t\t} else if(spec == DMT.FNPSwapReply) {\n\t\t\treturn node.lm.handleSwapReply(m, source);\n\t\t} else if(spec == DMT.FNPSwapRejected) {\n\t\t\treturn node.lm.handleSwapRejected(m, source);\n\t\t} else if(spec == DMT.FNPSwapCommit) {\n\t\t\treturn node.lm.handleSwapCommit(m, source);\n\t\t} else if(spec == DMT.FNPSwapComplete) {\n\t\t\treturn node.lm.handleSwapComplete(m, source);\n\t\t} else if(spec == DMT.FNPCHKDataRequest) {\n\t\t\treturn handleDataRequest(m, source, false);\n\t\t} else if(spec == DMT.FNPSSKDataRequest) {\n\t\t\treturn handleDataRequest(m, source, true);\n\t\t} else if(spec == DMT.FNPInsertRequest) {\n\t\t\treturn handleInsertRequest(m, source, false);\n\t\t} else if(spec == DMT.FNPSSKInsertRequest) {\n\t\t\treturn handleInsertRequest(m, source, true);\n\t\t} else if(spec == DMT.FNPSSKInsertRequestNew) {\n\t\t\treturn handleInsertRequest(m, source, true);\n\t\t} else if(spec == DMT.FNPRHProbeRequest) {\n\t\t\treturn handleProbeRequest(m, source);\n\t\t} else if(spec == DMT.FNPRoutedPing) {\n\t\t\treturn handleRouted(m, source);\n\t\t} else if(spec == DMT.FNPRoutedPong) {\n\t\t\treturn handleRoutedReply(m);\n\t\t} else if(spec == DMT.FNPRoutedRejected) {\n\t\t\treturn handleRoutedRejected(m);\n\t\t\t// FIXME implement threaded probe requests of various kinds.\n\t\t\t// Old probe request code was a major pain, never really worked.\n\t\t\t// We should have threaded probe requests (for simple code),\n\t\t\t// and one for each routing strategy.\n//\t\t} else if(spec == DMT.FNPProbeRequest) {\n//\t\t\treturn handleProbeRequest(m, source);\n//\t\t} else if(spec == DMT.FNPProbeReply) {\n//\t\t\treturn handleProbeReply(m, source);\n//\t\t} else if(spec == DMT.FNPProbeRejected) {\n//\t\t\treturn handleProbeRejected(m, source);\n//\t\t} else if(spec == DMT.FNPProbeTrace) {\n//\t\t\treturn handleProbeTrace(m, source);\n\t\t} else if(spec == DMT.FNPOfferKey) {\n\t\t\treturn handleOfferKey(m, source);\n\t\t} else if(spec == DMT.FNPGetOfferedKey) {\n\t\t\treturn handleGetOfferedKey(m, source);\n\t\t}\n\t\treturn false;\n\t}","id":46191,"modified_method":"public boolean handleMessage(Message m) {\n\t\tlogMINOR = Logger.shouldLog(Logger.MINOR, this);\n\t\tPeerNode source = (PeerNode)m.getSource();\n\t\tif(source == null) {\n\t\t\t// Node has been disconnected and garbage collected already! Ouch.\n\t\t\treturn true;\n\t\t}\n\t\tif(logMINOR) Logger.minor(this, \"Dispatching \"+m+\" from \"+source);\n\t\tif(callback != null) {\n\t\t\ttry {\n\t\t\t\tcallback.snoop(m, node);\n\t\t\t} catch (Throwable t) {\n\t\t\t\tLogger.error(this, \"Callback threw \"+t, t);\n\t\t\t}\n\t\t}\n\t\tMessageType spec = m.getSpec();\n\t\tif(spec == DMT.FNPPing) {\n\t\t\t// Send an FNPPong\n\t\t\tMessage reply = DMT.createFNPPong(m.getInt(DMT.PING_SEQNO));\n\t\t\ttry {\n\t\t\t\tsource.sendAsync(reply, null, 0, pingCounter); // nothing we can do if can't contact source\n\t\t\t} catch (NotConnectedException e) {\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Lost connection replying to \"+m);\n\t\t\t}\n\t\t\treturn true;\n\t\t} else if (spec == DMT.FNPStoreSecret) {\n\t\t\treturn node.netid.handleStoreSecret(m);\n\t\t} else if(spec == DMT.FNPSecretPing) {\n\t\t\treturn node.netid.handleSecretPing(m);\n\t\t} else if(spec == DMT.FNPDetectedIPAddress) {\n\t\t\tPeer p = (Peer) m.getObject(DMT.EXTERNAL_ADDRESS);\n\t\t\tsource.setRemoteDetectedPeer(p);\n\t\t\tnode.ipDetector.redetectAddress();\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPTime) {\n\t\t\treturn handleTime(m, source);\n\t\t} else if(spec == DMT.FNPUptime) {\n\t\t\treturn handleUptime(m, source);\n\t\t} else if(spec == DMT.FNPSentPackets) {\n\t\t\tsource.handleSentPackets(m);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPVoid) {\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPDisconnect) {\n\t\t\thandleDisconnect(m, source);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.nodeToNodeMessage) {\n\t\t\tnode.receivedNodeToNodeMessage(m, source);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.UOMAnnounce && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleAnnounce(m, source);\n\t\t} else if(spec == DMT.UOMRequestRevocation && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleRequestRevocation(m, source);\n\t\t} else if(spec == DMT.UOMSendingRevocation && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleSendingRevocation(m, source);\n\t\t} else if(spec == DMT.UOMRequestMain && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleRequestMain(m, source);\n\t\t} else if(spec == DMT.UOMSendingMain && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleSendingMain(m, source);\n\t\t} else if(spec == DMT.FNPOpennetAnnounceRequest) {\n\t\t\treturn handleAnnounceRequest(m, source);\n\t\t} else if(spec == DMT.FNPRoutingStatus) {\n\t\t\tif(source instanceof DarknetPeerNode) {\n\t\t\t\tboolean value = m.getBoolean(DMT.ROUTING_ENABLED);\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"The peer (\"+source+\") asked us to set routing=\"+value);\n\t\t\t\t((DarknetPeerNode)source).setRoutingStatus(value, false);\n\t\t\t}\n\t\t\t// We claim it in any case\n\t\t\treturn true;\n\t\t} else if(source.isRealConnection() && spec == DMT.FNPLocChangeNotificationNew) {\n\t\t\tdouble newLoc = m.getDouble(DMT.LOCATION);\n\t\t\tShortBuffer buffer = ((ShortBuffer) m.getObject(DMT.PEER_LOCATIONS));\n\t\t\tdouble[] locs = Fields.bytesToDoubles(buffer.getData());\n\t\t\t\n\t\t\t/**\n\t\t\t * Do *NOT* remove the sanity check below! \n\t\t\t * @see http://archives.freenetproject.org/message/20080718.144240.359e16d3.en.html\n\t\t\t */\n\t\t\tif((OpennetManager.MAX_PEERS_FOR_SCALING < locs.length) && (source.isOpennet())) {\n\t\t\t\tif(locs.length > OpennetManager.MAX_PEERS_FOR_SCALING * 2) {\n\t\t\t\t\t// This can't happen by accident\n\t\t\t\t\tLogger.error(this, \"We received \"+locs.length+ \" locations from \"+source.toString()+\"! That should *NOT* happen! Possible attack!\");\n\t\t\t\t\tsource.forceDisconnect(true);\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\t// A few extra can happen by accident. Just use the first 20.\n\t\t\t\t\tLogger.normal(this, \"Too many locations from \"+source.toString()+\" : \"+locs.length+\" could be an accident, using the first \"+OpennetManager.MAX_PEERS_FOR_SCALING);\n\t\t\t\t\tdouble[] firstLocs = new double[OpennetManager.MAX_PEERS_FOR_SCALING];\n\t\t\t\t\tSystem.arraycopy(locs, 0, firstLocs, 0, OpennetManager.MAX_PEERS_FOR_SCALING);\n\t\t\t\t\tlocs = firstLocs;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// We are on darknet and we trust our peers OR we are on opennet\n\t\t\t// and the amount of locations sent to us seems reasonable\n\t\t\tsource.updateLocation(newLoc, locs);\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif(!source.isRoutable()) return false;\n\t\tif(Logger.shouldLog(Logger.DEBUG, this)) Logger.debug(this, \"Not routable\");\n\n\t\tif(spec == DMT.FNPNetworkID) {\n\t\t\tsource.handleFNPNetworkID(m);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPSwapRequest) {\n\t\t\treturn node.lm.handleSwapRequest(m, source);\n\t\t} else if(spec == DMT.FNPSwapReply) {\n\t\t\treturn node.lm.handleSwapReply(m, source);\n\t\t} else if(spec == DMT.FNPSwapRejected) {\n\t\t\treturn node.lm.handleSwapRejected(m, source);\n\t\t} else if(spec == DMT.FNPSwapCommit) {\n\t\t\treturn node.lm.handleSwapCommit(m, source);\n\t\t} else if(spec == DMT.FNPSwapComplete) {\n\t\t\treturn node.lm.handleSwapComplete(m, source);\n\t\t} else if(spec == DMT.FNPCHKDataRequest) {\n\t\t\treturn handleDataRequest(m, source, false);\n\t\t} else if(spec == DMT.FNPSSKDataRequest) {\n\t\t\treturn handleDataRequest(m, source, true);\n\t\t} else if(spec == DMT.FNPInsertRequest) {\n\t\t\treturn handleInsertRequest(m, source, false);\n\t\t} else if(spec == DMT.FNPSSKInsertRequest) {\n\t\t\treturn handleInsertRequest(m, source, true);\n\t\t} else if(spec == DMT.FNPSSKInsertRequestNew) {\n\t\t\treturn handleInsertRequest(m, source, true);\n\t\t} else if(spec == DMT.FNPRHProbeRequest) {\n\t\t\treturn handleProbeRequest(m, source);\n\t\t} else if(spec == DMT.FNPRoutedPing) {\n\t\t\treturn handleRouted(m, source);\n\t\t} else if(spec == DMT.FNPRoutedPong) {\n\t\t\treturn handleRoutedReply(m);\n\t\t} else if(spec == DMT.FNPRoutedRejected) {\n\t\t\treturn handleRoutedRejected(m);\n\t\t\t// FIXME implement threaded probe requests of various kinds.\n\t\t\t// Old probe request code was a major pain, never really worked.\n\t\t\t// We should have threaded probe requests (for simple code),\n\t\t\t// and one for each routing strategy.\n//\t\t} else if(spec == DMT.FNPProbeRequest) {\n//\t\t\treturn handleProbeRequest(m, source);\n//\t\t} else if(spec == DMT.FNPProbeReply) {\n//\t\t\treturn handleProbeReply(m, source);\n//\t\t} else if(spec == DMT.FNPProbeRejected) {\n//\t\t\treturn handleProbeRejected(m, source);\n//\t\t} else if(spec == DMT.FNPProbeTrace) {\n//\t\t\treturn handleProbeTrace(m, source);\n\t\t} else if(spec == DMT.FNPOfferKey) {\n\t\t\treturn handleOfferKey(m, source);\n\t\t} else if(spec == DMT.FNPGetOfferedKey) {\n\t\t\treturn handleGetOfferedKey(m, source);\n\t\t}\n\t\treturn false;\n\t}","commit_id":"c7d210e12037c125e7f85940de77798891c27a83","url":"https://github.com/freenet/fred"},{"original_method":"public boolean handleMessage(Message m) {\n\t\tlogMINOR = Logger.shouldLog(Logger.MINOR, this);\n\t\tPeerNode source = (PeerNode)m.getSource();\n\t\tif(source == null) {\n\t\t\t// Node has been disconnected and garbage collected already! Ouch.\n\t\t\treturn true;\n\t\t}\n\t\tif(logMINOR) Logger.minor(this, \"Dispatching \"+m+\" from \"+source);\n\t\tif(callback != null) {\n\t\t\ttry {\n\t\t\t\tcallback.snoop(m, node);\n\t\t\t} catch (Throwable t) {\n\t\t\t\tLogger.error(this, \"Callback threw \"+t, t);\n\t\t\t}\n\t\t}\n\t\tMessageType spec = m.getSpec();\n\t\tif(spec == DMT.FNPPing) {\n\t\t\t// Send an FNPPong\n\t\t\tMessage reply = DMT.createFNPPong(m.getInt(DMT.PING_SEQNO));\n\t\t\ttry {\n\t\t\t\tsource.sendAsync(reply, null, 0, pingCounter); // nothing we can do if can't contact source\n\t\t\t} catch (NotConnectedException e) {\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Lost connection replying to \"+m);\n\t\t\t}\n\t\t\treturn true;\n\t\t} else if (spec == DMT.FNPStoreSecret) {\n\t\t\treturn node.netid.handleStoreSecret(m);\n\t\t} else if(spec == DMT.FNPSecretPing) {\n\t\t\treturn node.netid.handleSecretPing(m);\n\t\t} else if(spec == DMT.FNPDetectedIPAddress) {\n\t\t\tPeer p = (Peer) m.getObject(DMT.EXTERNAL_ADDRESS);\n\t\t\tsource.setRemoteDetectedPeer(p);\n\t\t\tnode.ipDetector.redetectAddress();\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPTime) {\n\t\t\treturn handleTime(m, source);\n\t\t} else if(spec == DMT.FNPUptime) {\n\t\t\treturn handleUptime(m, source);\n\t\t} else if(spec == DMT.FNPSentPackets) {\n\t\t\tsource.handleSentPackets(m);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPVoid) {\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPDisconnect) {\n\t\t\thandleDisconnect(m, source);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.nodeToNodeMessage) {\n\t\t\tnode.receivedNodeToNodeMessage(m, source);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.UOMAnnounce && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleAnnounce(m, source);\n\t\t} else if(spec == DMT.UOMRequestRevocation && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleRequestRevocation(m, source);\n\t\t} else if(spec == DMT.UOMSendingRevocation && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleSendingRevocation(m, source);\n\t\t} else if(spec == DMT.UOMRequestMain && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleRequestMain(m, source);\n\t\t} else if(spec == DMT.UOMSendingMain && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleSendingMain(m, source);\n\t\t} else if(spec == DMT.FNPOpennetAnnounceRequest) {\n\t\t\treturn handleAnnounceRequest(m, source);\n\t\t} else if(spec == DMT.FNPRoutingStatus) {\n\t\t\tif(source instanceof DarknetPeerNode) {\n\t\t\t\tboolean value = m.getBoolean(DMT.ROUTING_ENABLED);\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"The peer (\"+source+\") asked us to set routing=\"+value);\n\t\t\t\t((DarknetPeerNode)source).setRoutingStatus(value, false);\n\t\t\t}\n\t\t\t// We claim it in any case\n\t\t\treturn true;\n\t\t} else if(source.isRealConnection() && spec == DMT.FNPLocChangeNotification) {\n\t\t\tdouble newLoc = m.getDouble(DMT.LOCATION);\n\t\t\tsource.updateLocation(newLoc);\n\t\t\t// TODO: remove dead code when FNPLocChangeNotificationNew is mandatory\n\t\t\tif(source.getVersionNumber() > 1153)\n\t\t\t\tLogger.error(this, \"We received a FNPLocChangeNotification from a recent build: that should *not* happen! (\"+source.toString()+')');\n\t\t\treturn true;\n\t\t} else if(source.isRealConnection() && spec == DMT.FNPLocChangeNotificationNew) {\n\t\t\tdouble newLoc = m.getDouble(DMT.LOCATION);\n\t\t\tShortBuffer buffer = ((ShortBuffer) m.getObject(DMT.PEER_LOCATIONS));\n\t\t\tdouble[] locs = Fields.bytesToDoubles(buffer.getData());\n\t\t\tsource.updateLocation(newLoc, locs);\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif(!source.isRoutable()) return false;\n\t\tif(Logger.shouldLog(Logger.DEBUG, this)) Logger.debug(this, \"Not routable\");\n\n\t\tif(spec == DMT.FNPNetworkID) {\n\t\t\tsource.handleFNPNetworkID(m);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPSwapRequest) {\n\t\t\treturn node.lm.handleSwapRequest(m, source);\n\t\t} else if(spec == DMT.FNPSwapReply) {\n\t\t\treturn node.lm.handleSwapReply(m, source);\n\t\t} else if(spec == DMT.FNPSwapRejected) {\n\t\t\treturn node.lm.handleSwapRejected(m, source);\n\t\t} else if(spec == DMT.FNPSwapCommit) {\n\t\t\treturn node.lm.handleSwapCommit(m, source);\n\t\t} else if(spec == DMT.FNPSwapComplete) {\n\t\t\treturn node.lm.handleSwapComplete(m, source);\n\t\t} else if(spec == DMT.FNPCHKDataRequest) {\n\t\t\treturn handleDataRequest(m, source, false);\n\t\t} else if(spec == DMT.FNPSSKDataRequest) {\n\t\t\treturn handleDataRequest(m, source, true);\n\t\t} else if(spec == DMT.FNPInsertRequest) {\n\t\t\treturn handleInsertRequest(m, source, false);\n\t\t} else if(spec == DMT.FNPSSKInsertRequest) {\n\t\t\treturn handleInsertRequest(m, source, true);\n\t\t} else if(spec == DMT.FNPSSKInsertRequestNew) {\n\t\t\treturn handleInsertRequest(m, source, true);\n\t\t} else if(spec == DMT.FNPRHProbeRequest) {\n\t\t\treturn handleProbeRequest(m, source);\n\t\t} else if(spec == DMT.FNPRoutedPing) {\n\t\t\treturn handleRouted(m, source);\n\t\t} else if(spec == DMT.FNPRoutedPong) {\n\t\t\treturn handleRoutedReply(m);\n\t\t} else if(spec == DMT.FNPRoutedRejected) {\n\t\t\treturn handleRoutedRejected(m);\n\t\t\t// FIXME implement threaded probe requests of various kinds.\n\t\t\t// Old probe request code was a major pain, never really worked.\n\t\t\t// We should have threaded probe requests (for simple code),\n\t\t\t// and one for each routing strategy.\n//\t\t} else if(spec == DMT.FNPProbeRequest) {\n//\t\t\treturn handleProbeRequest(m, source);\n//\t\t} else if(spec == DMT.FNPProbeReply) {\n//\t\t\treturn handleProbeReply(m, source);\n//\t\t} else if(spec == DMT.FNPProbeRejected) {\n//\t\t\treturn handleProbeRejected(m, source);\n//\t\t} else if(spec == DMT.FNPProbeTrace) {\n//\t\t\treturn handleProbeTrace(m, source);\n\t\t} else if(spec == DMT.FNPOfferKey) {\n\t\t\treturn handleOfferKey(m, source);\n\t\t} else if(spec == DMT.FNPGetOfferedKey) {\n\t\t\treturn handleGetOfferedKey(m, source);\n\t\t}\n\t\treturn false;\n\t}","id":46192,"modified_method":"public boolean handleMessage(Message m) {\n\t\tlogMINOR = Logger.shouldLog(Logger.MINOR, this);\n\t\tPeerNode source = (PeerNode)m.getSource();\n\t\tif(source == null) {\n\t\t\t// Node has been disconnected and garbage collected already! Ouch.\n\t\t\treturn true;\n\t\t}\n\t\tif(logMINOR) Logger.minor(this, \"Dispatching \"+m+\" from \"+source);\n\t\tif(callback != null) {\n\t\t\ttry {\n\t\t\t\tcallback.snoop(m, node);\n\t\t\t} catch (Throwable t) {\n\t\t\t\tLogger.error(this, \"Callback threw \"+t, t);\n\t\t\t}\n\t\t}\n\t\tMessageType spec = m.getSpec();\n\t\tif(spec == DMT.FNPPing) {\n\t\t\t// Send an FNPPong\n\t\t\tMessage reply = DMT.createFNPPong(m.getInt(DMT.PING_SEQNO));\n\t\t\ttry {\n\t\t\t\tsource.sendAsync(reply, null, 0, pingCounter); // nothing we can do if can't contact source\n\t\t\t} catch (NotConnectedException e) {\n\t\t\t\tif(logMINOR) Logger.minor(this, \"Lost connection replying to \"+m);\n\t\t\t}\n\t\t\treturn true;\n\t\t} else if (spec == DMT.FNPStoreSecret) {\n\t\t\treturn node.netid.handleStoreSecret(m);\n\t\t} else if(spec == DMT.FNPSecretPing) {\n\t\t\treturn node.netid.handleSecretPing(m);\n\t\t} else if(spec == DMT.FNPDetectedIPAddress) {\n\t\t\tPeer p = (Peer) m.getObject(DMT.EXTERNAL_ADDRESS);\n\t\t\tsource.setRemoteDetectedPeer(p);\n\t\t\tnode.ipDetector.redetectAddress();\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPTime) {\n\t\t\treturn handleTime(m, source);\n\t\t} else if(spec == DMT.FNPUptime) {\n\t\t\treturn handleUptime(m, source);\n\t\t} else if(spec == DMT.FNPSentPackets) {\n\t\t\tsource.handleSentPackets(m);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPVoid) {\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPDisconnect) {\n\t\t\thandleDisconnect(m, source);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.nodeToNodeMessage) {\n\t\t\tnode.receivedNodeToNodeMessage(m, source);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.UOMAnnounce && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleAnnounce(m, source);\n\t\t} else if(spec == DMT.UOMRequestRevocation && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleRequestRevocation(m, source);\n\t\t} else if(spec == DMT.UOMSendingRevocation && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleSendingRevocation(m, source);\n\t\t} else if(spec == DMT.UOMRequestMain && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleRequestMain(m, source);\n\t\t} else if(spec == DMT.UOMSendingMain && source.isRealConnection()) {\n\t\t\treturn node.nodeUpdater.uom.handleSendingMain(m, source);\n\t\t} else if(spec == DMT.FNPOpennetAnnounceRequest) {\n\t\t\treturn handleAnnounceRequest(m, source);\n\t\t} else if(spec == DMT.FNPRoutingStatus) {\n\t\t\tif(source instanceof DarknetPeerNode) {\n\t\t\t\tboolean value = m.getBoolean(DMT.ROUTING_ENABLED);\n\t\t\t\tif(logMINOR)\n\t\t\t\t\tLogger.minor(this, \"The peer (\"+source+\") asked us to set routing=\"+value);\n\t\t\t\t((DarknetPeerNode)source).setRoutingStatus(value, false);\n\t\t\t}\n\t\t\t// We claim it in any case\n\t\t\treturn true;\n\t\t} else if(source.isRealConnection() && spec == DMT.FNPLocChangeNotification) {\n\t\t\tdouble newLoc = m.getDouble(DMT.LOCATION);\n\t\t\tsource.updateLocation(newLoc);\n\t\t\t// TODO: remove dead code when FNPLocChangeNotificationNew is mandatory\n\t\t\tif(source.getVersionNumber() > 1153)\n\t\t\t\tLogger.error(this, \"We received a FNPLocChangeNotification from a recent build: that should *not* happen! (\"+source.toString()+')');\n\t\t\treturn true;\n\t\t} else if(source.isRealConnection() && spec == DMT.FNPLocChangeNotificationNew) {\n\t\t\tdouble newLoc = m.getDouble(DMT.LOCATION);\n\t\t\tShortBuffer buffer = ((ShortBuffer) m.getObject(DMT.PEER_LOCATIONS));\n\t\t\tdouble[] locs = Fields.bytesToDoubles(buffer.getData());\n\t\t\t\n\t\t\t/**\n\t\t\t * Do *NOT* remove the sanity check below! \n\t\t\t * @see http://archives.freenetproject.org/message/20080718.144240.359e16d3.en.html\n\t\t\t */\n\t\t\tif((OpennetManager.MAX_PEERS_FOR_SCALING < locs.length) && (source.isOpennet())) {\n\t\t\t\tLogger.error(this, \"We received \"+locs.length+ \" locations from \"+source.toString()+\"! That should *NOT* happen!\");\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\t// We are on darknet and we trust our peers OR we are on opennet\n\t\t\t\t// and the amount of locations sent to us seems reasonable\n\t\t\t\tsource.updateLocation(newLoc, locs);\n\t\t\t}\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif(!source.isRoutable()) return false;\n\t\tif(Logger.shouldLog(Logger.DEBUG, this)) Logger.debug(this, \"Not routable\");\n\n\t\tif(spec == DMT.FNPNetworkID) {\n\t\t\tsource.handleFNPNetworkID(m);\n\t\t\treturn true;\n\t\t} else if(spec == DMT.FNPSwapRequest) {\n\t\t\treturn node.lm.handleSwapRequest(m, source);\n\t\t} else if(spec == DMT.FNPSwapReply) {\n\t\t\treturn node.lm.handleSwapReply(m, source);\n\t\t} else if(spec == DMT.FNPSwapRejected) {\n\t\t\treturn node.lm.handleSwapRejected(m, source);\n\t\t} else if(spec == DMT.FNPSwapCommit) {\n\t\t\treturn node.lm.handleSwapCommit(m, source);\n\t\t} else if(spec == DMT.FNPSwapComplete) {\n\t\t\treturn node.lm.handleSwapComplete(m, source);\n\t\t} else if(spec == DMT.FNPCHKDataRequest) {\n\t\t\treturn handleDataRequest(m, source, false);\n\t\t} else if(spec == DMT.FNPSSKDataRequest) {\n\t\t\treturn handleDataRequest(m, source, true);\n\t\t} else if(spec == DMT.FNPInsertRequest) {\n\t\t\treturn handleInsertRequest(m, source, false);\n\t\t} else if(spec == DMT.FNPSSKInsertRequest) {\n\t\t\treturn handleInsertRequest(m, source, true);\n\t\t} else if(spec == DMT.FNPSSKInsertRequestNew) {\n\t\t\treturn handleInsertRequest(m, source, true);\n\t\t} else if(spec == DMT.FNPRHProbeRequest) {\n\t\t\treturn handleProbeRequest(m, source);\n\t\t} else if(spec == DMT.FNPRoutedPing) {\n\t\t\treturn handleRouted(m, source);\n\t\t} else if(spec == DMT.FNPRoutedPong) {\n\t\t\treturn handleRoutedReply(m);\n\t\t} else if(spec == DMT.FNPRoutedRejected) {\n\t\t\treturn handleRoutedRejected(m);\n\t\t\t// FIXME implement threaded probe requests of various kinds.\n\t\t\t// Old probe request code was a major pain, never really worked.\n\t\t\t// We should have threaded probe requests (for simple code),\n\t\t\t// and one for each routing strategy.\n//\t\t} else if(spec == DMT.FNPProbeRequest) {\n//\t\t\treturn handleProbeRequest(m, source);\n//\t\t} else if(spec == DMT.FNPProbeReply) {\n//\t\t\treturn handleProbeReply(m, source);\n//\t\t} else if(spec == DMT.FNPProbeRejected) {\n//\t\t\treturn handleProbeRejected(m, source);\n//\t\t} else if(spec == DMT.FNPProbeTrace) {\n//\t\t\treturn handleProbeTrace(m, source);\n\t\t} else if(spec == DMT.FNPOfferKey) {\n\t\t\treturn handleOfferKey(m, source);\n\t\t} else if(spec == DMT.FNPGetOfferedKey) {\n\t\t\treturn handleGetOfferedKey(m, source);\n\t\t}\n\t\treturn false;\n\t}","commit_id":"555c447cbdcdd4966650c886740e633017a886c5","url":"https://github.com/freenet/fred"},{"original_method":"private void updateArrows() {\n\t\tif (location == null) {\n\t\t\treturn;\n\t\t}\n\t\tfor(int i =0; i<arrows.size(); i++){\n\t\t\tupdateArrow(points.get(i), arrows.get(i));\n\t\t}\n\t}","id":46193,"modified_method":"private void updateArrows() {\n\t\tif (location == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor(int i =0; i<arrows.size(); i++){\n\t\t\tarrows.get(i).setVisibility(View.VISIBLE);\n\t\t\tupdateArrow(points.get(i), arrows.get(i));\n\t\t}\n\t}","commit_id":"d22bec3f6eb4831ba321776954723f4ecdbeed09","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n\tpublic void onResume() {\n\t\tsuper.onResume();\n\t\tgetLocationProvider().addLocationListener(this);\n\t\tgetLocationProvider().addCompassListener(this);\n\t\tlocation = getLocationProvider().getLastKnownLocation();\n\t\tupdateLocation(location);\n\t\tsetupFavorites();\n\n\t}","id":46194,"modified_method":"@Override\n\tpublic void onResume() {\n\t\tsuper.onResume();\n\t\tif (getMyApplication().getFavorites().getFavouritePoints().size() > 0) {\n\t\t\tregisterListeners();\n\t\t\tif(!getMyApplication().getSettings().isLastKnownMapLocation()) {\n\t\t\t\t// show first time when application ran\n\t\t\t\tlocation = getMyApplication().getLocationProvider().getFirstTimeRunDefaultLocation();\n\t\t\t} else {\n\t\t\t\tlocation = getLocationProvider().getLastKnownLocation();\n\t\t\t}\n\t\t\tupdateLocation(location);\n\t\t}\n\n\n\t\tsetupFavorites();\n\n\t}","commit_id":"d22bec3f6eb4831ba321776954723f4ecdbeed09","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private void setupFavorites(){\n\t\tView mainView = getView();\n\t\tfinal FavouritesDbHelper helper = getMyApplication().getFavorites();\n\t\tpoints = new ArrayList<FavouritePoint>(helper.getFavouritePoints());\n\t\tarrows.clear();\n\t\tif (points.size() == 0){\n\t\t\t(mainView.findViewById(R.id.main_fav)).setVisibility(View.GONE);\n\t\t\treturn;\n\t\t} else {\n\t\t\t(mainView.findViewById(R.id.main_fav)).setVisibility(View.VISIBLE);\n\t\t}\n\t\tCollections.sort(points, new Comparator<FavouritePoint>() {\n\t\t\t@Override\n\t\t\tpublic int compare(FavouritePoint point, FavouritePoint point2) {\n\t\t\t\tLatLon lastKnownMapLocation = getMyApplication().getSettings().getLastKnownMapLocation();\n\t\t\t\tint dist = (int) (MapUtils.getDistance(point.getLatitude(), point.getLongitude(),\n\t\t\t\t\t\tlastKnownMapLocation.getLatitude(), lastKnownMapLocation.getLongitude()));\n\t\t\t\tint dist2 = (int) (MapUtils.getDistance(point2.getLatitude(), point2.getLongitude(),\n\t\t\t\t\t\tlastKnownMapLocation.getLatitude(), lastKnownMapLocation.getLongitude()));\n\t\t\t\treturn (dist - dist2);\n\t\t\t}\n\t\t});\n\t\tLinearLayout favorites = (LinearLayout) mainView.findViewById(R.id.favorites);\n\t\tfavorites.removeAllViews();\n\t\tif (points.size() > 3){\n\t\t\twhile (points.size() != 3){\n\t\t\t\tpoints.remove(3);\n\t\t\t}\n\t\t}\n\t\tfor (final FavouritePoint point : points) {\n\t\t\tLayoutInflater inflater = getActivity().getLayoutInflater();\n\t\t\tView view = inflater.inflate(R.layout.dash_favorites_item, null, false);\n\t\t\tTextView name = (TextView) view.findViewById(R.id.name);\n\t\t\tTextView label = (TextView) view.findViewById(R.id.distance);\n\t\t\tImageView icon = (ImageView) view.findViewById(R.id.icon);\n\t\t\tImageView direction = (ImageView) view.findViewById(R.id.direction);\n\n\t\t\tif(location != null){\n\t\t\t\tdirection.setVisibility(View.VISIBLE);\n\t\t\t\tupdateArrow(point, direction);\n\t\t\t\tarrows.add(direction);\n\t\t\t}\n\n\t\t\tname.setText(point.getName());\n\t\t\ticon.setImageDrawable(FavoriteImageDrawable.getOrCreate(getActivity(), point.getColor()));\n\t\t\tLatLon lastKnownMapLocation = getMyApplication().getSettings().getLastKnownMapLocation();\n\t\t\tint dist = (int) (MapUtils.getDistance(point.getLatitude(), point.getLongitude(),\n\t\t\t\t\tlastKnownMapLocation.getLatitude(), lastKnownMapLocation.getLongitude()));\n\t\t\tString distance = OsmAndFormatter.getFormattedDistance(dist, getMyApplication()) + \"  \";\n\t\t\tview.findViewById(R.id.navigate_to).setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View view) {\n\t\t\t\t\tDirectionsDialogs.directionsToDialogAndLaunchMap(getActivity(), point.getLatitude(), point.getLongitude(), point.getName());\n\t\t\t\t}\n\t\t\t});\n\t\t\tlabel.setText(distance, TextView.BufferType.SPANNABLE);\n\t\t\tlabel.setTypeface(Typeface.DEFAULT, point.isVisible() ? Typeface.NORMAL : Typeface.ITALIC);\n\t\t\tview.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View view) {\n\t\t\t\t\tgetMyApplication().getSettings().setMapLocationToShow(point.getLatitude(), point.getLongitude(), 15, null, point.getName(),\n\t\t\t\t\t\t\tpoint); //$NON-NLS-1$\n\t\t\t\t\tMapActivity.launchMapActivityMoveToTop(getActivity());\n\t\t\t\t}\n\t\t\t});\n\t\t\tint height = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 50, getResources().getDisplayMetrics());\n\n\t\t\tLinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, height);\n\t\t\tview.setLayoutParams(lp);\n\t\t\tfavorites.addView(view);\n\t\t}\n\t}","id":46195,"modified_method":"private void setupFavorites(){\n\t\tView mainView = getView();\n\t\tfinal FavouritesDbHelper helper = getMyApplication().getFavorites();\n\t\tpoints = new ArrayList<FavouritePoint>(helper.getFavouritePoints());\n\t\tarrows.clear();\n\t\tif (points.size() == 0){\n\t\t\t(mainView.findViewById(R.id.main_fav)).setVisibility(View.GONE);\n\t\t\treturn;\n\t\t} else {\n\t\t\t(mainView.findViewById(R.id.main_fav)).setVisibility(View.VISIBLE);\n\t\t}\n\t\tCollections.sort(points, new Comparator<FavouritePoint>() {\n\t\t\t@Override\n\t\t\tpublic int compare(FavouritePoint point, FavouritePoint point2) {\n\t\t\t\tLatLon lastKnownMapLocation = getMyApplication().getSettings().getLastKnownMapLocation();\n\t\t\t\tint dist = (int) (MapUtils.getDistance(point.getLatitude(), point.getLongitude(),\n\t\t\t\t\t\tlastKnownMapLocation.getLatitude(), lastKnownMapLocation.getLongitude()));\n\t\t\t\tint dist2 = (int) (MapUtils.getDistance(point2.getLatitude(), point2.getLongitude(),\n\t\t\t\t\t\tlastKnownMapLocation.getLatitude(), lastKnownMapLocation.getLongitude()));\n\t\t\t\treturn (dist - dist2);\n\t\t\t}\n\t\t});\n\t\tLinearLayout favorites = (LinearLayout) mainView.findViewById(R.id.favorites);\n\t\tfavorites.removeAllViews();\n\t\tif (points.size() > 3){\n\t\t\twhile (points.size() != 3){\n\t\t\t\tpoints.remove(3);\n\t\t\t}\n\t\t}\n\t\tfor (final FavouritePoint point : points) {\n\t\t\tLayoutInflater inflater = getActivity().getLayoutInflater();\n\t\t\tView view = inflater.inflate(R.layout.dash_favorites_item, null, false);\n\t\t\tTextView name = (TextView) view.findViewById(R.id.name);\n\t\t\tTextView label = (TextView) view.findViewById(R.id.distance);\n\t\t\tImageView icon = (ImageView) view.findViewById(R.id.icon);\n\t\t\tImageView direction = (ImageView) view.findViewById(R.id.direction);\n\n\t\t\tif(location != null){\n\t\t\t\tdirection.setVisibility(View.VISIBLE);\n\t\t\t\tupdateArrow(point, direction);\n\t\t\t}\n\t\t\tarrows.add(direction);\n\t\t\tname.setText(point.getName());\n\t\t\ticon.setImageDrawable(FavoriteImageDrawable.getOrCreate(getActivity(), point.getColor()));\n\t\t\tLatLon lastKnownMapLocation = getMyApplication().getSettings().getLastKnownMapLocation();\n\t\t\tint dist = (int) (MapUtils.getDistance(point.getLatitude(), point.getLongitude(),\n\t\t\t\t\tlastKnownMapLocation.getLatitude(), lastKnownMapLocation.getLongitude()));\n\t\t\tString distance = OsmAndFormatter.getFormattedDistance(dist, getMyApplication()) + \"  \";\n\t\t\tview.findViewById(R.id.navigate_to).setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View view) {\n\t\t\t\t\tDirectionsDialogs.directionsToDialogAndLaunchMap(getActivity(), point.getLatitude(), point.getLongitude(), point.getName());\n\t\t\t\t}\n\t\t\t});\n\t\t\tlabel.setText(distance, TextView.BufferType.SPANNABLE);\n\t\t\tlabel.setTypeface(Typeface.DEFAULT, point.isVisible() ? Typeface.NORMAL : Typeface.ITALIC);\n\t\t\tview.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View view) {\n\t\t\t\t\tgetMyApplication().getSettings().setMapLocationToShow(point.getLatitude(), point.getLongitude(), 15, null, point.getName(),\n\t\t\t\t\t\t\tpoint); //$NON-NLS-1$\n\t\t\t\t\tMapActivity.launchMapActivityMoveToTop(getActivity());\n\t\t\t\t}\n\t\t\t});\n\t\t\tint height = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 50, getResources().getDisplayMetrics());\n\n\t\t\tLinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, height);\n\t\t\tview.setLayoutParams(lp);\n\t\t\tfavorites.addView(view);\n\t\t}\n\t}","commit_id":"d22bec3f6eb4831ba321776954723f4ecdbeed09","url":"https://github.com/osmandapp/Osmand"},{"original_method":"/**\n     * Method to return the main cobbler snippets dir\n     * (i.e. /var/lib/cobbler/snippets) .. Reason this is\n     * a method is because we want it to be\n     * changeable for unit tests..\n     * @return the cobbler snippets dir\n     */\n    public static String getCobblerSnippetsDir() {\n        return Config.get().getCobblerSnippetsDir();\n    }","id":46196,"modified_method":"/**\n     * Method to return the main cobbler snippets dir\n     * (i.e. /var/lib/cobbler/snippets) .. Reason this is\n     * a method is because we want it to be\n     * changeable for unit tests..\n     * @return the cobbler snippets dir\n     */\n    public static File getCobblerSnippetsDir() {\n        File fl = new File(Config.get().getCobblerSnippetsDir());\n        return fl;\n    }","commit_id":"6638e20fbb0f2b167c6b49f95ac779f7dab651b4","url":"https://github.com/spacewalkproject/spacewalk"},{"original_method":"/**\n     * Returns the name of the dir that should be hosting scripts\n     * for the snippet. This is useful for example while\n     * creating snippets. \n     * @param org  the org hosting the snippet, or null if its a common org \n     * @return the name of the directory that should host the snippet file\n     */\n    public static String getPrefixFor(Org org) {\n        if (org == null) {\n            return getCobblerSnippetsDir();\n        }\n        return getSpacewalkSnippetsDir() + \"/\" + org.getId();\n    }","id":46197,"modified_method":"/**\n     * Returns the name of the dir that should be hosting scripts\n     * for the snippet. This is useful for example while\n     * creating snippets. \n     * @param org  the org hosting the snippet, or null if its a common org \n     * @return the name of the directory that should host the snippet file\n     */\n    public static String getPrefixFor(Org org) {\n        if (org == null) {\n            return getCobblerSnippetsDir().getAbsolutePath();\n        }\n        return getSpacewalkSnippetsDir().getAbsolutePath() + \"/\" + org.getId();\n    }","commit_id":"6638e20fbb0f2b167c6b49f95ac779f7dab651b4","url":"https://github.com/spacewalkproject/spacewalk"},{"original_method":"/**\n     * Method to return the base spacewalk snippets dir\n     * (i.e. /var/lib/cobbler/snippets/spacewalk) .. \n     * Reason this is\n     * a method is because we want it to be\n     * changeable for unit tests..\n     * @return the spacewalk snippets dir\n     */\n    public static String getSpacewalkSnippetsDir() {\n        String snipDir = getCobblerSnippetsDir();\n        if (snipDir.endsWith(\"/\")) {\n            return getCobblerSnippetsDir() + \"spacewalk\";   \n        }\n        return getCobblerSnippetsDir() + \"/spacewalk\";\n    }","id":46198,"modified_method":"/**\n     * Method to return the base spacewalk snippets dir\n     * (i.e. /var/lib/cobbler/snippets/spacewalk) .. \n     * Reason this is\n     * a method is because we want it to be\n     * changeable for unit tests..\n     * @return the spacewalk snippets dir\n     */\n    public static File getSpacewalkSnippetsDir() {\n        return new File(getCobblerSnippetsDir(), \"spacewalk\");\n    }","commit_id":"6638e20fbb0f2b167c6b49f95ac779f7dab651b4","url":"https://github.com/spacewalkproject/spacewalk"},{"original_method":"private static boolean isCommonPath(File path) {\n        return !path.getAbsolutePath().startsWith(getSpacewalkSnippetsDir()) && \n                    path.getAbsolutePath().startsWith(getCobblerSnippetsDir()); \n    }","id":46199,"modified_method":"private static boolean isCommonPath(File path) {\n        return !path.getAbsolutePath().startsWith(\n                        getSpacewalkSnippetsDir().getAbsolutePath()) && \n                    path.getAbsolutePath().\n                            startsWith(getCobblerSnippetsDir().getAbsolutePath()); \n    }","commit_id":"6638e20fbb0f2b167c6b49f95ac779f7dab651b4","url":"https://github.com/spacewalkproject/spacewalk"},{"original_method":"/**\n     * Returns a list of snippets accessible to this user\n     * @param user the user has to be atleast a \n     * config admin to be able to access snippets. \n     * @return the snippets accessible to the user.\n     */\n    public List<CobblerSnippet> listSnippets(User user) {\n        if (!user.hasRole(RoleFactory.CONFIG_ADMIN)) {\n            throw new PermissionException(RoleFactory.CONFIG_ADMIN);\n        }\n        \n        List<CobblerSnippet> snippetFiles = new LinkedList<CobblerSnippet>();\n        loadReadOnlySnippets(new File(CobblerSnippet.getCobblerSnippetsDir()),\n                                                            snippetFiles);\n        File spacewalkDir = new File(CobblerSnippet.getPrefixFor(user.getOrg()));\n        \n        if (spacewalkDir.exists() && spacewalkDir.isDirectory()) {\n            for (File file : spacewalkDir.listFiles()) {\n                if (!file.isHidden() && file.isFile()) {\n                    snippetFiles.add(CobblerSnippet.loadEditable(file.getName(),\n                                                            user.getOrg()));\n                }\n            }\n        }\n        return snippetFiles;\n    }","id":46200,"modified_method":"/**\n     * Returns a list of snippets accessible to this user\n     * @param user the user has to be atleast a \n     * config admin to be able to access snippets. \n     * @return the snippets accessible to the user.\n     */\n    public List<CobblerSnippet> listSnippets(User user) {\n        if (!user.hasRole(RoleFactory.CONFIG_ADMIN)) {\n            throw new PermissionException(RoleFactory.CONFIG_ADMIN);\n        }\n        \n        List<CobblerSnippet> snippetFiles = new LinkedList<CobblerSnippet>();\n        loadReadOnlySnippets(CobblerSnippet.getCobblerSnippetsDir(),\n                                                            snippetFiles);\n        File spacewalkDir = new File(CobblerSnippet.getPrefixFor(user.getOrg()));\n        \n        if (spacewalkDir.exists() && spacewalkDir.isDirectory()) {\n            for (File file : spacewalkDir.listFiles()) {\n                if (!file.isHidden() && file.isFile()) {\n                    snippetFiles.add(CobblerSnippet.loadEditable(file.getName(),\n                                                            user.getOrg()));\n                }\n            }\n        }\n        return snippetFiles;\n    }","commit_id":"6638e20fbb0f2b167c6b49f95ac779f7dab651b4","url":"https://github.com/spacewalkproject/spacewalk"},{"original_method":"private void loadReadOnlySnippets(File path, \n                    List<CobblerSnippet> snippetFiles) {\n        if (path.exists() && !path.isHidden()) {\n            final String spacewalkSnippetsDir = CobblerSnippet.getSpacewalkSnippetsDir();\n            if (!path.getAbsolutePath().startsWith(spacewalkSnippetsDir)) {\n                if (path.isDirectory()) {\n                    String[] children = path.list();\n                    Arrays.sort(children);\n                    for (int i = 0; i < children.length; i++) {\n                        loadReadOnlySnippets(new File(path, children[i]), snippetFiles);\n                    }\n                }\n                else {\n                    snippetFiles.add(CobblerSnippet.loadReadOnly(path));    \n                }\n            }\n        }\n    }","id":46201,"modified_method":"private void loadReadOnlySnippets(File path, \n                    List<CobblerSnippet> snippetFiles) {\n        if (path.exists() && !path.isHidden()) {\n            final String spacewalkSnippetsDir = CobblerSnippet.\n                        getSpacewalkSnippetsDir().getAbsolutePath();\n            if (!path.getAbsolutePath().startsWith(spacewalkSnippetsDir)) {\n                if (path.isDirectory()) {\n                    String[] children = path.list();\n                    Arrays.sort(children);\n                    for (int i = 0; i < children.length; i++) {\n                        loadReadOnlySnippets(new File(path, children[i]), snippetFiles);\n                    }\n                }\n                else {\n                    snippetFiles.add(CobblerSnippet.loadReadOnly(path));    \n                }\n            }\n        }\n    }","commit_id":"6638e20fbb0f2b167c6b49f95ac779f7dab651b4","url":"https://github.com/spacewalkproject/spacewalk"},{"original_method":"public static void createKickstartDirs() throws IOException {\n        createDirIfNotExists(new File(Config.get().getKickstartConfigDir() +\n                                                 \"/\" + KickstartData.WIZARD_DIR));\n        createDirIfNotExists(new File(Config.get().getKickstartConfigDir() +\n                                        \"/\" + KickstartData.RAW_DIR));\n        createDirIfNotExists(new File(CobblerSnippet.getSpacewalkSnippetsDir()));\n    }","id":46202,"modified_method":"public static void createKickstartDirs() throws IOException {\n        createDirIfNotExists(new File(Config.get().getKickstartConfigDir() +\n                                                 \"/\" + KickstartData.WIZARD_DIR));\n        createDirIfNotExists(new File(Config.get().getKickstartConfigDir() +\n                                        \"/\" + KickstartData.RAW_DIR));\n        createDirIfNotExists(CobblerSnippet.getSpacewalkSnippetsDir());\n    }","commit_id":"6638e20fbb0f2b167c6b49f95ac779f7dab651b4","url":"https://github.com/spacewalkproject/spacewalk"},{"original_method":"public RevisionKey read(Decoder decoder) throws Exception {\n            String resolverId = decoder.readString();\n            ModuleComponentIdentifier identifier = (ModuleComponentIdentifier) componentIdSerializer.read(decoder);\n            return new RevisionKey(resolverId, identifier);\n        }","id":46203,"modified_method":"public ModuleComponentAtRepositoryKey read(Decoder decoder) throws Exception {\n            String resolverId = decoder.readString();\n            ModuleComponentIdentifier identifier = (ModuleComponentIdentifier) componentIdSerializer.read(decoder);\n            return new ModuleComponentAtRepositoryKey(resolverId, identifier);\n        }","commit_id":"a19ba0b86c56972a1666bfda142ffff1ff137533","url":"https://github.com/gradle/gradle"},{"original_method":"public CachedMetaData getCachedModuleDescriptor(ModuleComponentRepository repository, ModuleComponentIdentifier componentId) {\n        ModuleMetadataCacheEntry entry = getCache().get(createKey(repository, componentId));\n        if (entry == null) {\n            return null;\n        }\n        if (entry.isMissing()) {\n            return new DefaultCachedMetaData(entry, null, timeProvider);\n        }\n        MutableModuleComponentResolveMetadata metadata = moduleMetadataStore.getModuleDescriptor(repository, componentId);\n        if (metadata == null) {\n            // Descriptor file has been deleted - ignore the entry\n            return null;\n        }\n        return new DefaultCachedMetaData(entry, entry.configure(metadata), timeProvider);\n    }","id":46204,"modified_method":"public CachedMetaData getCachedModuleDescriptor(ModuleComponentRepository repository, ModuleComponentIdentifier componentId) {\n        ModuleComponentAtRepositoryKey key = createKey(repository, componentId);\n        ModuleMetadataCacheEntry entry = getCache().get(key);\n        if (entry == null) {\n            return null;\n        }\n        if (entry.isMissing()) {\n            return new DefaultCachedMetaData(entry, null, timeProvider);\n        }\n        MutableModuleComponentResolveMetadata metadata = moduleMetadataStore.getModuleDescriptor(key);\n        if (metadata == null) {\n            // Descriptor file has been deleted - ignore the entry\n            getCache().remove(key);\n            return null;\n        }\n        return new DefaultCachedMetaData(entry, entry.configure(metadata), timeProvider);\n    }","commit_id":"a19ba0b86c56972a1666bfda142ffff1ff137533","url":"https://github.com/gradle/gradle"},{"original_method":"public CachedMetaData cacheMetaData(ModuleComponentRepository repository, ModuleComponentResolveMetadata metadata) {\n        LOGGER.debug(\"Recording module descriptor in cache: {} [changing = {}]\", metadata.getComponentId(), metadata.isChanging());\n        LocallyAvailableResource resource = moduleMetadataStore.putModuleDescriptor(repository, metadata);\n        ModuleMetadataCacheEntry entry = createEntry(metadata, resource.getSha1());\n        getCache().put(createKey(repository, metadata.getComponentId()), entry);\n        return new DefaultCachedMetaData(entry, null, timeProvider);\n    }","id":46205,"modified_method":"public CachedMetaData cacheMetaData(ModuleComponentRepository repository, ModuleComponentResolveMetadata metadata) {\n        LOGGER.debug(\"Recording module descriptor in cache: {} [changing = {}]\", metadata.getComponentId(), metadata.isChanging());\n        ModuleComponentAtRepositoryKey key = createKey(repository, metadata.getComponentId());\n        LocallyAvailableResource resource = moduleMetadataStore.putModuleDescriptor(key, metadata);\n        ModuleMetadataCacheEntry entry = createEntry(metadata, resource.getSha1());\n        getCache().put(key, entry);\n        return new DefaultCachedMetaData(entry, null, timeProvider);\n    }","commit_id":"a19ba0b86c56972a1666bfda142ffff1ff137533","url":"https://github.com/gradle/gradle"},{"original_method":"private RevisionKey createKey(ModuleComponentRepository repository, ModuleComponentIdentifier id) {\n        return new RevisionKey(repository.getId(), id);\n    }","id":46206,"modified_method":"private ModuleComponentAtRepositoryKey createKey(ModuleComponentRepository repository, ModuleComponentIdentifier id) {\n        return new ModuleComponentAtRepositoryKey(repository.getId(), id);\n    }","commit_id":"a19ba0b86c56972a1666bfda142ffff1ff137533","url":"https://github.com/gradle/gradle"},{"original_method":"private PersistentIndexedCache<RevisionKey, ModuleMetadataCacheEntry> getCache() {\n        if (cache == null) {\n            cache = initCache();\n        }\n        return cache;\n    }","id":46207,"modified_method":"private PersistentIndexedCache<ModuleComponentAtRepositoryKey, ModuleMetadataCacheEntry> getCache() {\n        if (cache == null) {\n            cache = initCache();\n        }\n        return cache;\n    }","commit_id":"a19ba0b86c56972a1666bfda142ffff1ff137533","url":"https://github.com/gradle/gradle"},{"original_method":"private PersistentIndexedCache<RevisionKey, ModuleMetadataCacheEntry> initCache() {\n        return cacheLockingManager.createCache(\"module-metadata\", new RevisionKeySerializer(), new ModuleMetadataCacheEntrySerializer());\n    }","id":46208,"modified_method":"private PersistentIndexedCache<ModuleComponentAtRepositoryKey, ModuleMetadataCacheEntry> initCache() {\n        return cacheLockingManager.createCache(\"module-metadata\", new RevisionKeySerializer(), new ModuleMetadataCacheEntrySerializer());\n    }","commit_id":"a19ba0b86c56972a1666bfda142ffff1ff137533","url":"https://github.com/gradle/gradle"},{"original_method":"private String getFilePath(ModuleComponentRepository repository, ModuleComponentIdentifier moduleComponentIdentifier) {\n        return moduleComponentIdentifier.getGroup() + \"/\" + moduleComponentIdentifier.getModule() + \"/\" + moduleComponentIdentifier.getVersion() + \"/\" + repository.getId() + \"/descriptor.bin\";\n    }","id":46209,"modified_method":"private String getFilePath(ModuleComponentAtRepositoryKey componentId) {\n        ModuleComponentIdentifier moduleComponentIdentifier = componentId.getComponentId();\n        return moduleComponentIdentifier.getGroup() + \"/\" + moduleComponentIdentifier.getModule() + \"/\" + moduleComponentIdentifier.getVersion() + \"/\" + componentId.getRepositoryId() + \"/descriptor.bin\";\n    }","commit_id":"a19ba0b86c56972a1666bfda142ffff1ff137533","url":"https://github.com/gradle/gradle"},{"original_method":"public MutableModuleComponentResolveMetadata getModuleDescriptor(ModuleComponentRepository repository, ModuleComponentIdentifier moduleComponentIdentifier) {\n        String filePath = getFilePath(repository, moduleComponentIdentifier);\n        final LocallyAvailableResource resource = metaDataStore.get(filePath);\n        if (resource != null) {\n            try {\n                KryoBackedDecoder decoder = new KryoBackedDecoder(new FileInputStream(resource.getFile()));\n                try {\n                    return moduleMetadataSerializer.read(decoder);\n                } finally {\n                    decoder.close();\n                }\n            } catch (Exception e) {\n                throw new RuntimeException(\"Could not load module metadata from \" + resource.getDisplayName(), e);\n            }\n        }\n        return null;\n    }","id":46210,"modified_method":"public MutableModuleComponentResolveMetadata getModuleDescriptor(ModuleComponentAtRepositoryKey component) {\n        String filePath = getFilePath(component);\n        final LocallyAvailableResource resource = metaDataStore.get(filePath);\n        if (resource != null) {\n            try {\n                KryoBackedDecoder decoder = new KryoBackedDecoder(new FileInputStream(resource.getFile()));\n                try {\n                    return moduleMetadataSerializer.read(decoder);\n                } finally {\n                    decoder.close();\n                }\n            } catch (Exception e) {\n                throw new RuntimeException(\"Could not load module metadata from \" + resource.getDisplayName(), e);\n            }\n        }\n        return null;\n    }","commit_id":"a19ba0b86c56972a1666bfda142ffff1ff137533","url":"https://github.com/gradle/gradle"},{"original_method":"public LocallyAvailableResource putModuleDescriptor(ModuleComponentRepository repository, final ModuleComponentResolveMetadata metadata) {\n        String filePath = getFilePath(repository, metadata.getComponentId());\n        return metaDataStore.add(filePath, new Action<File>() {\n            public void execute(File moduleDescriptorFile) {\n                try {\n                    KryoBackedEncoder encoder = new KryoBackedEncoder(new FileOutputStream(moduleDescriptorFile));\n                    try {\n                        moduleMetadataSerializer.write(encoder, metadata);\n                    } finally {\n                        encoder.close();\n                    }\n                } catch (Exception e) {\n                    throw UncheckedException.throwAsUncheckedException(e);\n                }\n            }\n        });\n    }","id":46211,"modified_method":"public LocallyAvailableResource putModuleDescriptor(ModuleComponentAtRepositoryKey component, final ModuleComponentResolveMetadata metadata) {\n        String filePath = getFilePath(component);\n        return metaDataStore.add(filePath, new Action<File>() {\n            public void execute(File moduleDescriptorFile) {\n                try {\n                    KryoBackedEncoder encoder = new KryoBackedEncoder(new FileOutputStream(moduleDescriptorFile));\n                    try {\n                        moduleMetadataSerializer.write(encoder, metadata);\n                    } finally {\n                        encoder.close();\n                    }\n                } catch (Exception e) {\n                    throw UncheckedException.throwAsUncheckedException(e);\n                }\n            }\n        });\n    }","commit_id":"a19ba0b86c56972a1666bfda142ffff1ff137533","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n    public Object getAttribute(String name) {\n        V value = this.getAttributeValue(this.createKey(name));\n        return (value != null) ? this.marshaller.read(value) : null;\n    }","id":46212,"modified_method":"@Override\n    public Object getAttribute(String name) {\n        SessionAttributeCacheKey key = this.createKey(name);\n        return this.marshaller.read(this.cache.get(key));\n    }","commit_id":"b1cfa1434f8999662fdcedaf785721bded502241","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public Set<String> getAttributeNames() {\n        return this.attributes;\n    }","id":46213,"modified_method":"@Override\n    public Set<String> getAttributeNames() {\n        Set<String> attributes = new TreeSet<>();\n        for (SessionAttributeCacheKey key: this.cache.getAdvancedCache().getGroup(this.id).keySet()) {\n            attributes.add(key.getAttribute());\n        }\n        return attributes;\n    }","commit_id":"b1cfa1434f8999662fdcedaf785721bded502241","url":"https://github.com/wildfly/wildfly"},{"original_method":"public FineImmutableSessionAttributes(String id, Set<String> attributes, Cache<SessionAttributeCacheKey, V> attributeCache, SessionAttributeMarshaller<Object, V> marshaller) {\n        this.id = id;\n        this.attributes = attributes;\n        this.cache = attributeCache;\n        this.marshaller = marshaller;\n    }","id":46214,"modified_method":"public FineImmutableSessionAttributes(String id, Cache<SessionAttributeCacheKey, V> attributeCache, SessionAttributeMarshaller<Object, V> marshaller) {\n        this.id = id;\n        this.cache = attributeCache;\n        this.marshaller = marshaller;\n    }","commit_id":"b1cfa1434f8999662fdcedaf785721bded502241","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public Object getAttribute(String name) {\n        SessionAttributeCacheKey key = this.createKey(name);\n        V value = this.getAttributeValue(key);\n        if (value == null) return null;\n        Object attribute = this.marshaller.read(value);\n        // If the object is mutable, we need to indicate that the attribute should be replicated\n        if (MutableDetector.isMutable(attribute)) {\n            new CacheEntryMutator<>(this.cache, key, value).mutate();\n        }\n        return attribute;\n    }","id":46215,"modified_method":"@Override\n    public Object getAttribute(String name) {\n        SessionAttributeCacheKey key = this.createKey(name);\n        V value = this.cache.get(key);\n        if (value == null) return null;\n        Object attribute = this.marshaller.read(value);\n        // If the object is mutable, we need to indicate that the attribute should be replicated\n        if (MutableDetector.isMutable(attribute)) {\n            new CacheEntryMutator<>(this.cache, key, value).mutate();\n        }\n        return attribute;\n    }","commit_id":"b1cfa1434f8999662fdcedaf785721bded502241","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public Object removeAttribute(String name) {\n        return this.attributes.remove(name) ? this.marshaller.read(this.cache.getAdvancedCache().withFlags(Flag.FORCE_SYNCHRONOUS).remove(this.createKey(name))) : null;\n    }","id":46216,"modified_method":"@Override\n    public Object removeAttribute(String name) {\n        SessionAttributeCacheKey key = this.createKey(name);\n        return this.marshaller.read(this.cache.getAdvancedCache().withFlags(Flag.FORCE_SYNCHRONOUS).remove(key));\n    }","commit_id":"b1cfa1434f8999662fdcedaf785721bded502241","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public Object setAttribute(String name, Object attribute) {\n        if (attribute == null) {\n            return this.removeAttribute(name);\n        }\n        SessionAttributeCacheKey key = this.createKey(name);\n        V value = this.marshaller.write(attribute);\n        return this.marshaller.read(this.cache.getAdvancedCache().withFlags(this.attributes.add(name) ? Flag.IGNORE_RETURN_VALUES : Flag.FORCE_SYNCHRONOUS).put(key, value));\n    }","id":46217,"modified_method":"@Override\n    public Object setAttribute(String name, Object attribute) {\n        if (attribute == null) {\n            return this.removeAttribute(name);\n        }\n        SessionAttributeCacheKey key = this.createKey(name);\n        V value = this.marshaller.write(attribute);\n        return this.marshaller.read(this.cache.getAdvancedCache().withFlags(Flag.FORCE_SYNCHRONOUS).put(key, value));\n    }","commit_id":"b1cfa1434f8999662fdcedaf785721bded502241","url":"https://github.com/wildfly/wildfly"},{"original_method":"public FineSessionAttributes(String id, Set<String> attributes, Cache<SessionAttributeCacheKey, V> attributeCache, SessionAttributeMarshaller<Object, V> marshaller) {\n        super(id, attributes, attributeCache, marshaller);\n        this.attributes = attributes;\n        this.cache = attributeCache;\n        this.marshaller = marshaller;\n    }","id":46218,"modified_method":"public FineSessionAttributes(String id, Cache<SessionAttributeCacheKey, V> attributeCache, SessionAttributeMarshaller<Object, V> marshaller) {\n        super(id, attributeCache, marshaller);\n        this.cache = attributeCache;\n        this.marshaller = marshaller;\n    }","commit_id":"b1cfa1434f8999662fdcedaf785721bded502241","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void writeObject(ObjectOutput output, FineSessionCacheEntry<Object> entry) throws IOException {\n        this.externalizer.writeObject(output, (SimpleSessionMetaData) entry.getMetaData());\n        Set<String> attributes = entry.getAttributes();\n        output.writeInt(attributes.size());\n        for (String attribute: attributes) {\n            output.writeUTF(attribute);\n        }\n    }","id":46219,"modified_method":"@Override\n    public void writeObject(ObjectOutput output, FineSessionCacheEntry<Object> entry) throws IOException {\n        this.externalizer.writeObject(output, (SimpleSessionMetaData) entry.getMetaData());\n    }","commit_id":"b1cfa1434f8999662fdcedaf785721bded502241","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public FineSessionCacheEntry<Object> readObject(ObjectInput input) throws IOException {\n        FineSessionCacheEntry<Object> entry = new FineSessionCacheEntry<>(this.externalizer.readObject(input));\n        Set<String> attributes = entry.getAttributes();\n        int size = input.readInt();\n        for (int i = 0; i < size; ++i) {\n            attributes.add(input.readUTF());\n        }\n        return entry;\n    }","id":46220,"modified_method":"@Override\n    public FineSessionCacheEntry<Object> readObject(ObjectInput input) throws IOException {\n        return new FineSessionCacheEntry<>(this.externalizer.readObject(input));\n    }","commit_id":"b1cfa1434f8999662fdcedaf785721bded502241","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void evict(final String id) {\n        final FineSessionCacheEntry<L> entry = this.findValue(id);\n        if (entry != null) {\n            for (String attribute: entry.getAttributes()) {\n                try {\n                    this.attributeCache.evict(new SessionAttributeCacheKey(id, attribute));\n                } catch (Throwable e) {\n                    InfinispanWebLogger.ROOT_LOGGER.failedToPassivateSessionAttribute(e, id, attribute);\n                }\n            }\n            try {\n                this.sessionCache.evict(id);\n            } catch (Throwable e) {\n                InfinispanWebLogger.ROOT_LOGGER.failedToPassivateSession(e, id);\n            }\n        }\n    }","id":46221,"modified_method":"@Override\n    public void evict(final String id) {\n        for (SessionAttributeCacheKey key: this.attributeCache.getAdvancedCache().getGroup(id).keySet()) {\n            try {\n                this.attributeCache.evict(key);\n            } catch (Throwable e) {\n                InfinispanWebLogger.ROOT_LOGGER.failedToPassivateSessionAttribute(e, id, key.getAttribute());\n            }\n        }\n        try {\n            this.sessionCache.evict(id);\n        } catch (Throwable e) {\n            InfinispanWebLogger.ROOT_LOGGER.failedToPassivateSession(e, id);\n        }\n    }","commit_id":"b1cfa1434f8999662fdcedaf785721bded502241","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void remove(final String id) {\n        FineSessionCacheEntry<L> entry = this.sessionCache.getAdvancedCache().withFlags(Flag.FORCE_SYNCHRONOUS).remove(id);\n        Cache<SessionAttributeCacheKey, MarshalledValue<Object, MarshallingContext>> cache = this.attributeCache.getAdvancedCache().withFlags(Flag.IGNORE_RETURN_VALUES);\n        for (String attribute : entry.getAttributes()) {\n            cache.remove(new SessionAttributeCacheKey(id, attribute));\n        }\n    }","id":46222,"modified_method":"@Override\n    public void remove(final String id) {\n        this.sessionCache.getAdvancedCache().withFlags(Flag.IGNORE_RETURN_VALUES).remove(id);\n        this.attributeCache.getAdvancedCache().removeGroup(id);\n    }","commit_id":"b1cfa1434f8999662fdcedaf785721bded502241","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public ImmutableSession createImmutableSession(String id, FineSessionCacheEntry<L> entry) {\n        ImmutableSessionAttributes attributes = new FineImmutableSessionAttributes<>(id, entry.getAttributes(), this.attributeCache, this.marshaller);\n        return new InfinispanImmutableSession(id, entry.getMetaData(), attributes, this.context);\n    }","id":46223,"modified_method":"@Override\n    public ImmutableSession createImmutableSession(String id, FineSessionCacheEntry<L> entry) {\n        ImmutableSessionAttributes attributes = new FineImmutableSessionAttributes<>(id, this.attributeCache, this.marshaller);\n        return new InfinispanImmutableSession(id, entry.getMetaData(), attributes, this.context);\n    }","commit_id":"b1cfa1434f8999662fdcedaf785721bded502241","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public Session<L> createSession(String id, FineSessionCacheEntry<L> entry) {\n        SessionMetaData metaData = entry.getMetaData();\n        Mutator mutator = metaData.isNew() ? Mutator.PASSIVE : new CacheEntryMutator<>(this.sessionCache, id, entry);\n        SessionAttributes attributes = new FineSessionAttributes<>(id, entry.getAttributes(), this.attributeCache, this.marshaller);\n        return new InfinispanSession<>(id, entry.getMetaData(), attributes, entry.getLocalContext(), this.localContextFactory, this.context, mutator, this);\n    }","id":46224,"modified_method":"@Override\n    public Session<L> createSession(String id, FineSessionCacheEntry<L> entry) {\n        SessionMetaData metaData = entry.getMetaData();\n        Mutator mutator = metaData.isNew() ? Mutator.PASSIVE : new CacheEntryMutator<>(this.sessionCache, id, entry);\n        SessionAttributes attributes = new FineSessionAttributes<>(id, this.attributeCache, this.marshaller);\n        return new InfinispanSession<>(id, entry.getMetaData(), attributes, entry.getLocalContext(), this.localContextFactory, this.context, mutator, this);\n    }","commit_id":"b1cfa1434f8999662fdcedaf785721bded502241","url":"https://github.com/wildfly/wildfly"},{"original_method":"private TextRow(String text, Font font, FontRenderContext frc, TextLayout row, Rectangle2D bounds) {\n        this.text = text;\n        if (row == null)\n            mRow = new TextLayout(text, font, frc);\n        else\n            mRow = row;\n\n        final Rectangle2D.Float closeBounds = (Rectangle2D.Float) mRow.getBounds();\n\n        if (bounds == null) {\n            mBounds = closeBounds;\n        } else {\n            if (DEBUG.TEXT) System.out.println(\"TextRow[\" + text + \"] rowbnds=\" + tufts.Util.fmt(row.getBounds()));\n            mBounds = (Rectangle2D.Float) bounds;\n            mBounds.width = closeBounds.width; // take the more accurate width from the TextLayout\n        }\n\n        this.width = mBounds.width;\n        this.height = mBounds.height;\n        \n        if (DEBUG.TEXT) System.out.println(\"TextRow[\" + text + \"]  bounds=\" + tufts.Util.fmt(bounds));\n    }","id":46225,"modified_method":"private TextRow(String text, Font font, FontRenderContext frc, TextLayout row, Rectangle2D bounds) {\n        this.text = text;\n        if (row == null)\n            mRow = new TextLayout(text, font, frc);\n        else\n            mRow = row;\n\n        final Rectangle2D.Float closeBounds = new Rectangle2D.Float();\n        closeBounds.height = (float) mRow.getBounds().getHeight();\n        closeBounds.width = (float) mRow.getBounds().getWidth();\n\n        if (bounds == null) {\n            mBounds = closeBounds;\n        } else {\n            if (DEBUG.TEXT) System.out.println(\"TextRow[\" + text + \"] rowbnds=\" + tufts.Util.fmt(row.getBounds()));\n            mBounds = (Rectangle2D.Float) bounds;\n            mBounds.width = closeBounds.width; // take the more accurate width from the TextLayout\n        }\n\n        this.width = mBounds.width;\n        this.height = mBounds.height;\n        \n        if (DEBUG.TEXT) System.out.println(\"TextRow[\" + text + \"]  bounds=\" + tufts.Util.fmt(bounds));\n    }","commit_id":"c23e5c34c10b0ce3eb46c32dd451f3fa58662836","url":"https://github.com/VUE/VUE"},{"original_method":"@Override\n    public boolean handleMousePressed(MapMouseEvent e) {\n        super.handleMousePressed(e);\n\n//         System.out.println(\"isZoomInMode:\" + isZoomInMode()\n//                            +\" isZoomOutMode():\"+isZoomOutMode()\n//                            +\" isZoomFullScreen:\"+isZoomFullScreenMode()\n//                            +\" isZoomOutToMap:\"+isZoomOutToMapMode());\n\n        if (isZoomInMode() || isZoomOutMode())\n            return false;\n        \n        if (isZoomOutToMapMode())\n            return false;\n\n        final LWComponent picked = e.getPicked();\n        final MapViewer viewer = e.getViewer();\n\n        if (zoomedTo != null && !e.isShiftDown()) {\n            // already zoomed into something: un-zoom us\n            if (oldFocal != null) {\n                // we were focused into a slide: pop the focal\n                viewer.loadFocal(oldFocal);\n                oldFocal = null;\n            } else {\n                // zoom out to the whole map\n                setZoomFit(viewer, true);\n            }\n            zoomedTo = null;\n            ignoreRelease = true;\n            return true;\n        } else if (picked != null)  {\n\n            // nothing zoomed into, or shift was down, meaning keep zooming in:\n\n            if (picked instanceof LWSlide) {\n\n                if (zoomedTo == picked) {\n                    // we're already zoomed to this slide: now load it as an editable focal\n                    // (slides only editable if they're the focal: not on map as slide icons)\n                    out(\"LOADING FOCAL\");\n                    oldFocal = viewer.getFocal();\n                    viewer.loadFocal((LWSlide) zoomedTo);\n                } else {\n                    zoomToSlide(viewer, (LWSlide) picked);\n                }\n\n            } else {            \t \n\n                setZoomFitRegion(viewer,\n                                 picked.getBounds(),\n                                 0,\n                                 true);\n            }\n            zoomedTo = picked;\n            ignoreRelease = true;\n            return true;\n        } else\n            return false;\n    }","id":46226,"modified_method":"@Override\n    public boolean handleMousePressed(MapMouseEvent e) {\n        super.handleMousePressed(e);\n\n//         System.out.println(\"isZoomInMode:\" + isZoomInMode()\n//                            +\" isZoomOutMode():\"+isZoomOutMode()\n//                            +\" isZoomFullScreen:\"+isZoomFullScreenMode()\n//                            +\" isZoomOutToMap:\"+isZoomOutToMapMode());\n\n        if (isZoomInMode() || isZoomOutMode())\n            return false;\n        \n        if (isZoomOutToMapMode())\n            return false;\n\n        final LWComponent picked = e.getPicked();\n        final MapViewer viewer = e.getViewer();\n\n        if (zoomedTo != null && !e.isShiftDown()) {\n            // already zoomed into something: un-zoom us\n            if (oldFocal != null) {\n                // we were focused into a slide: pop the focal\n                viewer.loadFocal(oldFocal);\n                oldFocal = null;\n            } else {\n                // zoom out to the whole map\n                setZoomFit(viewer, true);\n            }\n            zoomedTo = null;\n            ignoreRelease = true;\n            return true;\n        } else if (picked != null)  {\n\n            // nothing zoomed into, or shift was down, meaning keep zooming in:\n\n            if (picked instanceof LWSlide) {\n\n                if (zoomedTo == picked) {\n                    // we're already zoomed to this slide: now load it as an editable focal\n                    // (slides only editable if they're the focal: not on map as slide icons)\n                    out(\"LOADING FOCAL\");\n                    oldFocal = viewer.getFocal();\n                    viewer.loadFocal((LWSlide) zoomedTo);\n                } else {\n                    zoomToSlide(viewer, (LWSlide) picked);\n                }\n\n            } else {\n\n                final Rectangle2D zoomBounds;\n\n                if (e.isControlDown())\n                    zoomBounds = picked.getFanBounds();\n                else\n                    zoomBounds = picked.getBounds();\n                \n                setZoomFitRegion(viewer,\n                                 zoomBounds,\n                                 0,\n                                 true);\n            }\n            zoomedTo = picked;\n            ignoreRelease = true;\n            return true;\n        } else\n            return false;\n    }","commit_id":"7745384528337257a72c48f9f8633eca3250868f","url":"https://github.com/VUE/VUE"},{"original_method":"public void paint(Graphics g, JComponent current) {\n    if (myPainters.isEmpty()) return;\n    Graphics2D g2d = (Graphics2D)g;\n    Rectangle clip = ObjectUtils.notNull(g.getClipBounds(), current.getBounds());\n\n    Component component = null;\n    Rectangle componentBounds = null;\n    boolean clipMatched = false;\n    for (Painter painter : myPainters) {\n      if (!painter.needsRepaint()) continue;\n\n      Component cur = myPainter2Component.get(painter);\n      if (cur != component || componentBounds == null) {\n        Container parent = (component = cur).getParent();\n        if (parent == null) continue;\n        componentBounds = SwingUtilities.convertRectangle(parent, component.getBounds(), current);\n        clipMatched = clip.contains(componentBounds) || clip.intersects(componentBounds);\n      }\n      if (!clipMatched) continue;\n\n      Point targetPoint = SwingUtilities.convertPoint(current, 0, 0, component);\n      Rectangle targetRect = new Rectangle(targetPoint, component.getSize());\n      g2d.setClip(clip.intersection(componentBounds));\n      g2d.translate(-targetRect.x, -targetRect.y);\n      painter.paint(component, g2d);\n      g2d.translate(targetRect.x, targetRect.y);\n    }\n\n  }","id":46227,"modified_method":"public void paint(Graphics g, JComponent component) {\n    if (myPainters.isEmpty()) return;\n    Graphics2D g2d = (Graphics2D)g;\n    Rectangle clip = ObjectUtils.notNull(g.getClipBounds(), component.getBounds());\n\n    Rectangle r = null;\n    boolean clipMatched = false;\n    Component prev = null;\n    for (Painter painter : myPainters) {\n      if (!painter.needsRepaint()) continue;\n\n      Component cur = myPainter2Component.get(painter);\n      if (cur != prev || r == null) {\n        Container curParent = cur.getParent();\n        if (curParent == null) continue;\n        r = SwingUtilities.convertRectangle(curParent, cur.getBounds(), component);\n        clipMatched = clip.contains(r) || clip.intersects(r);\n        prev = cur;\n      }\n      if (!clipMatched) continue;\n\n      g2d.setClip(clip.intersection(r));\n      g2d.translate(r.x, r.y);\n      painter.paint(prev, g2d);\n      g2d.translate(-r.x, -r.y);\n    }\n\n  }","commit_id":"5b259d7f30096bd145f039848bba627668bf0621","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void setProject(final Project project) {\n    myProject = project;\n    if (project != null) {\n      if (myRootPane != null) {\n        myRootPane.installNorthComponents(project);\n      }\n\n      project.getMessageBus().connect().subscribe(StatusBar.Info.TOPIC, myRootPane.getStatusBar());\n      installDefaultProjectStatusBarWidgets(myProject);\n    }\n    else {\n      if (myRootPane != null) { //already disposed\n        myRootPane.deinstallNorthComponents();\n      }\n    }\n\n    if (project == null) {\n      FocusTrackback.release(this);\n    }\n  }","id":46228,"modified_method":"public void setProject(final Project project) {\n    if (SystemInfo.isMacOSLion && myProject != project && project != null) {\n      myRestoreFullscreen = myProject == null && shouldRestoreFullScreen(project);\n      \n      if (myProject != null) {\n        storeFullScreenStateIfNeeded(false); // disable for old project\n      }\n    }\n    \n    myProject = project;\n    if (project != null) {\n      if (myRootPane != null) {\n        myRootPane.installNorthComponents(project);\n      }\n\n      project.getMessageBus().connect().subscribe(StatusBar.Info.TOPIC, myRootPane.getStatusBar());\n      installDefaultProjectStatusBarWidgets(myProject);\n    }\n    else {\n      if (myRootPane != null) { //already disposed\n        myRootPane.deinstallNorthComponents();\n      }\n    }\n\n    if (project == null) {\n      FocusTrackback.release(this);\n    }\n    \n    if (isVisible() && myRestoreFullscreen) {\n      MacMainFrameDecorator.toggleFullScreen(this);\n      myRestoreFullscreen = false;\n      storeFullScreenStateIfNeeded(false); // reset\n    }\n  }","commit_id":"9867e200c8f2227c9e8b4e5c07042eea044d7ec5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public MacMainFrameDecorator(@NotNull final Frame frame, final boolean navBar) {\n    final ID window = findWindowForTitle(frame.getTitle());\n    if (window == null) return;\n\n    if (CURRENT_SETTER == null) {\n      CURRENT_SETTER = navBar ? NAVBAR_SETTER : TOOLBAR_SETTER;\n      CURRENT_GETTER = navBar ? NAVBAR_GETTER : TOOLBAR_GETTER;\n      SHOWN = CURRENT_GETTER.fun(null);\n    }\n\n    UISettings.getInstance().addUISettingsListener(this, this);\n\n    final ID pool = invoke(\"NSAutoreleasePool\", \"new\");\n\n    try {\n      if (SystemInfo.isMacOSLion) {\n        // fullscreen\n\n        invoke(window, \"setCollectionBehavior:\", 1 << 7); // NSCollectionBehaviorFullScreenPrimary = 1 << 7, NSCollectionBehaviorFullScreenAuxiliary = 1 << 8\n      } else {\n        // toggle toolbar\n\n        myClassName = \"IdeaToolbar\" + UNIQUE_COUNTER.incrementAndGet();\n\n        final ID ownToolbar = Foundation.registerObjcClass(Foundation.getClass(\"NSToolbar\"), myClassName);\n        Foundation.registerObjcClassPair(ownToolbar);\n\n        ID toolbar = invoke(invoke(myClassName, \"alloc\"), \"initWithIdentifier:\", Foundation.cfString(myClassName));\n        Foundation.cfRetain(toolbar);\n\n        invoke(toolbar, \"setVisible:\", 0); // hide native toolbar by default\n\n        Foundation.addMethod(ownToolbar, Foundation.createSelector(\"setVisible:\"), SET_VISIBLE_CALLBACK, \"v*\");\n        Foundation.addMethod(ownToolbar, Foundation.createSelector(\"isVisible\"), IS_VISIBLE, \"B*\");\n\n        invoke(window, \"setToolbar:\", toolbar);\n        invoke(window, \"setShowsToolbarButton:\", 1);\n      }\n    }\n    finally {\n      invoke(pool, \"release\");\n    }\n  }","id":46229,"modified_method":"public MacMainFrameDecorator(@NotNull final Frame frame, final boolean navBar) {\n    final ID window = findWindowForTitle(frame.getTitle());\n    if (window == null) return;\n\n    if (CURRENT_SETTER == null) {\n      CURRENT_SETTER = navBar ? NAVBAR_SETTER : TOOLBAR_SETTER;\n      CURRENT_GETTER = navBar ? NAVBAR_GETTER : TOOLBAR_GETTER;\n      SHOWN = CURRENT_GETTER.fun(null);\n    }\n\n    UISettings.getInstance().addUISettingsListener(this, this);\n\n    final ID pool = invoke(\"NSAutoreleasePool\", \"new\");\n\n    int v = UNIQUE_COUNTER.incrementAndGet();\n\n    try {\n      if (SystemInfo.isMacOSLion) {\n        // fullscreen support\n        \n        final ID delegateClass = Foundation.registerObjcClass(Foundation.getClass(\"NSObject\"), \"IdeaNSWindowDelegate\" + v);\n        Foundation.registerObjcClassPair(delegateClass);\n\n        myDidExit = new Callback() {\n          public void callback(ID caller, ID notification) {\n            SwingUtilities.invokeLater(new Runnable() {\n              @Override\n              public void run() {\n                if (frame instanceof IdeFrameImpl) {\n                  ((IdeFrameImpl)frame).storeFullScreenStateIfNeeded(false);\n                }\n              }\n            });\n          }\n        };\n        Foundation.addMethod(delegateClass, Foundation.createSelector(\"windowDidExitFullScreen:\"), myDidExit, \"v*\");\n\n        myDidEnter = new Callback() {\n          public void callback(ID caller, ID notification) {\n            SwingUtilities.invokeLater(new Runnable() {\n              @Override\n              public void run() {\n                if (frame instanceof IdeFrameImpl) {\n                  //((IdeFrameImpl)frame).storeFullScreenStateIfNeeded(true);\n                  \n                  // fix problem with bottom empty bar\n                  // it seems like the title is still visible in fullscreen but the window itself shifted up for titlebar height\n                  // and the size of the frame is still calculated to be the height of the screen which is wrong\n                  // so just add these titlebar height to the frame height once again\n                  SwingUtilities.invokeLater(new Runnable() {\n                    @Override\n                    public void run() {\n                      frame.setSize(frame.getWidth(), frame.getHeight() + frame.getInsets().top);\n                    }\n                  });\n                }\n              }\n            });\n          }\n        };\n\n        Foundation.addMethod(delegateClass, Foundation.createSelector(\"windowDidEnterFullScreen:\"), myDidEnter, \"v*\");\n\n        // enable fullscreen titlebar button\n        invoke(window, \"setCollectionBehavior:\", 1 << 7); // NSCollectionBehaviorFullScreenPrimary = 1 << 7, NSCollectionBehaviorFullScreenAuxiliary = 1 << 8\n\n        ID notificationCenter = invoke(\"NSNotificationCenter\", \"defaultCenter\");\n\n        ID delegate = invoke(invoke(\"IdeaNSWindowDelegate\" + v, \"alloc\"), \"init\");\n        invoke(notificationCenter, \"addObserver:selector:name:object:\", delegate, \n               Foundation.createSelector(\"windowDidEnterFullScreen:\"), \n               Foundation.cfString(\"NSWindowDidEnterFullScreenNotification\"), window);\n\n        //invoke(notificationCenter, \"addObserver:selector:name:object:\", delegate, \n        //       Foundation.createSelector(\"windowDidExitFullScreen:\"), \n        //       Foundation.cfString(\"NSWindowDidExitFullScreenNotification\"), window);\n      } else {\n        // toggle toolbar\n        String className = \"IdeaToolbar\" + v;\n        final ID ownToolbar = Foundation.registerObjcClass(Foundation.getClass(\"NSToolbar\"), className);\n        Foundation.registerObjcClassPair(ownToolbar);\n\n        ID toolbar = invoke(invoke(className, \"alloc\"), \"initWithIdentifier:\", Foundation.cfString(className));\n        Foundation.cfRetain(toolbar);\n\n        invoke(toolbar, \"setVisible:\", 0); // hide native toolbar by default\n\n        Foundation.addMethod(ownToolbar, Foundation.createSelector(\"setVisible:\"), SET_VISIBLE_CALLBACK, \"v*\");\n        Foundation.addMethod(ownToolbar, Foundation.createSelector(\"isVisible\"), IS_VISIBLE, \"B*\");\n\n        invoke(window, \"setToolbar:\", toolbar);\n        invoke(window, \"setShowsToolbarButton:\", 1);\n      }\n    }\n    finally {\n      invoke(pool, \"release\");\n    }\n  }","commit_id":"9867e200c8f2227c9e8b4e5c07042eea044d7ec5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public final void writeExternal(final Element element) {\n    // Save frame bounds\n    final Element frameElement = new Element(FRAME_ELEMENT);\n    element.addContent(frameElement);\n    final Project[] projects = ProjectManager.getInstance().getOpenProjects();\n    final Project project;\n    if (projects.length > 0) {\n      project = projects[projects.length - 1];\n    }\n    else {\n      project = null;\n    }\n\n    final IdeFrameImpl frame = getFrame(project);\n    if (frame != null) {\n      final Rectangle rectangle = frame.getBounds();\n      frameElement.setAttribute(X_ATTR, Integer.toString(rectangle.x));\n      frameElement.setAttribute(Y_ATTR, Integer.toString(rectangle.y));\n      frameElement.setAttribute(WIDTH_ATTR, Integer.toString(rectangle.width));\n      frameElement.setAttribute(HEIGHT_ATTR, Integer.toString(rectangle.height));\n      frameElement.setAttribute(EXTENDED_STATE_ATTR, Integer.toString(frame.getExtendedState()));\n\n      // Save default layout\n      final Element layoutElement = new Element(DesktopLayout.TAG);\n      element.addContent(layoutElement);\n      myLayout.writeExternal(layoutElement);\n    }\n  }","id":46230,"modified_method":"public final void writeExternal(final Element element) {\n    // Save frame bounds\n    final Element frameElement = new Element(FRAME_ELEMENT);\n    element.addContent(frameElement);\n    final Project[] projects = ProjectManager.getInstance().getOpenProjects();\n    final Project project;\n    if (projects.length > 0) {\n      project = projects[projects.length - 1];\n    }\n    else {\n      project = null;\n    }\n\n    final IdeFrameImpl frame = getFrame(project);\n    if (frame != null) {\n      boolean usePreviousBounds = SystemInfo.isMacOSLion && WindowManagerEx.getInstanceEx().isFullScreen(frame);\n      final Rectangle rectangle = usePreviousBounds ? myFrameBounds : frame.getBounds();\n      frameElement.setAttribute(X_ATTR, Integer.toString(rectangle.x));\n      frameElement.setAttribute(Y_ATTR, Integer.toString(rectangle.y));\n      frameElement.setAttribute(WIDTH_ATTR, Integer.toString(rectangle.width));\n      frameElement.setAttribute(HEIGHT_ATTR, Integer.toString(rectangle.height));\n      frameElement.setAttribute(EXTENDED_STATE_ATTR, Integer.toString(frame.getExtendedState()));\n\n      // Save default layout\n      final Element layoutElement = new Element(DesktopLayout.TAG);\n      element.addContent(layoutElement);\n      myLayout.writeExternal(layoutElement);\n    }\n  }","commit_id":"9867e200c8f2227c9e8b4e5c07042eea044d7ec5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * invoked by reflection\n   * @param dataManager\n   * @param applicationInfoEx\n   * @param actionManager\n   * @param uiSettings\n   */\n  public WindowManagerImpl(DataManager dataManager,\n                           ApplicationInfoEx applicationInfoEx,\n                           ActionManagerEx actionManager,\n                           UISettings uiSettings) {\n    myApplicationInfoEx = applicationInfoEx;\n    myDataManager = dataManager;\n    myActionManager = actionManager;\n    myUiSettings = uiSettings;\n    if (myDataManager instanceof DataManagerImpl) {\n        ((DataManagerImpl)myDataManager).setWindowManager(this);\n    }\n\n    final Application application = ApplicationManager.getApplication();\n    if (!application.isUnitTestMode()) {\n      Disposer.register(application, new Disposable() {\n        @Override\n        public void dispose() {\n          disposeRootFrame();\n        }\n      });\n    }\n\n    myCommandProcessor = new CommandProcessor();\n    myWindowWatcher = new WindowWatcher();\n    final KeyboardFocusManager keyboardFocusManager = KeyboardFocusManager.getCurrentKeyboardFocusManager();\n    keyboardFocusManager.addPropertyChangeListener(FOCUSED_WINDOW_PROPERTY_NAME, myWindowWatcher);\n    if (Patches.SUN_BUG_ID_4218084) {\n      keyboardFocusManager.addPropertyChangeListener(FOCUSED_WINDOW_PROPERTY_NAME, new SUN_BUG_ID_4218084_Patch());\n    }\n    myLayout = new DesktopLayout();\n    myProject2Frame = new HashMap<Project, IdeFrameImpl>();\n    myDialogsToDispose = new HashMap<Project, Set<JDialog>>();\n    myFrameExtendedState = Frame.NORMAL;\n\n    // Calculate screen bounds.\n\n    Rectangle screenBounds = new Rectangle();\n    if (!application.isHeadlessEnvironment()) {\n      final GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();\n      final GraphicsDevice[] devices = env.getScreenDevices();\n      for (final GraphicsDevice device : devices) {\n        screenBounds = screenBounds.union(device.getDefaultConfiguration().getBounds());\n      }\n    }\n    myScreenBounds = screenBounds;\n\n    myActivationListener = new WindowAdapter() {\n      public void windowActivated(WindowEvent e) {\n        Window activeWindow = e.getWindow();\n        if (activeWindow instanceof IdeFrameImpl) { // must be\n          proceedDialogDisposalQueue(((IdeFrameImpl)activeWindow).getProject());\n        }\n      }\n    };\n  }","id":46231,"modified_method":"/**\n   * invoked by reflection\n   * @param dataManager\n   * @param applicationInfoEx\n   * @param actionManager\n   * @param uiSettings\n   */\n  public WindowManagerImpl(DataManager dataManager,\n                           ApplicationInfoEx applicationInfoEx,\n                           ActionManagerEx actionManager,\n                           UISettings uiSettings,\n                           MessageBus bus) {\n    myApplicationInfoEx = applicationInfoEx;\n    myDataManager = dataManager;\n    myActionManager = actionManager;\n    myUiSettings = uiSettings;\n    if (myDataManager instanceof DataManagerImpl) {\n        ((DataManagerImpl)myDataManager).setWindowManager(this);\n    }\n\n    final Application application = ApplicationManager.getApplication();\n    if (!application.isUnitTestMode()) {\n      Disposer.register(application, new Disposable() {\n        @Override\n        public void dispose() {\n          disposeRootFrame();\n        }\n      });\n    }\n\n    myCommandProcessor = new CommandProcessor();\n    myWindowWatcher = new WindowWatcher();\n    final KeyboardFocusManager keyboardFocusManager = KeyboardFocusManager.getCurrentKeyboardFocusManager();\n    keyboardFocusManager.addPropertyChangeListener(FOCUSED_WINDOW_PROPERTY_NAME, myWindowWatcher);\n    if (Patches.SUN_BUG_ID_4218084) {\n      keyboardFocusManager.addPropertyChangeListener(FOCUSED_WINDOW_PROPERTY_NAME, new SUN_BUG_ID_4218084_Patch());\n    }\n    myLayout = new DesktopLayout();\n    myProject2Frame = new HashMap<Project, IdeFrameImpl>();\n    myDialogsToDispose = new HashMap<Project, Set<JDialog>>();\n    myFrameExtendedState = Frame.NORMAL;\n\n    // Calculate screen bounds.\n\n    Rectangle screenBounds = new Rectangle();\n    if (!application.isHeadlessEnvironment()) {\n      final GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();\n      final GraphicsDevice[] devices = env.getScreenDevices();\n      for (final GraphicsDevice device : devices) {\n        screenBounds = screenBounds.union(device.getDefaultConfiguration().getBounds());\n      }\n    }\n    myScreenBounds = screenBounds;\n\n    myActivationListener = new WindowAdapter() {\n      public void windowActivated(WindowEvent e) {\n        Window activeWindow = e.getWindow();\n        if (activeWindow instanceof IdeFrameImpl) { // must be\n          proceedDialogDisposalQueue(((IdeFrameImpl)activeWindow).getProject());\n        }\n      }\n    };\n    \n    bus.connect().subscribe(AppLifecycleListener.TOPIC, new AppLifecycleListener.Adapter() {\n      @Override\n      public void appClosing() {\n        // save fullscreen window states\n        if (SystemInfo.isMacOSLion) {\n          Project[] openProjects = ProjectManager.getInstance().getOpenProjects();\n          \n          if (openProjects.length > 0) {\n            WindowManagerEx wm = WindowManagerEx.getInstanceEx();\n            for (Project project : openProjects) {\n              IdeFrameImpl frame  = wm.getFrame(project);\n              if (frame != null) {\n                frame.storeFullScreenStateIfNeeded();\n              }\n            }\n          }\n        }\n      }\n    });\n  }","commit_id":"9867e200c8f2227c9e8b4e5c07042eea044d7ec5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public ContextMenuAdapter createListAdapter(final MapActivity ma) {\n\t\tContextMenuAdapter adapter = new ContextMenuAdapter(ma);\n\t\tadapter.item(R.string.layers_category_show).setCategory(true);\n\t\tadapter.item(R.string.configure_map).icons(R.drawable.ic_back_drawer_dark, R.drawable.ic_back_drawer_white)\n\t\t\t\t.listen(new OnContextMenuClick() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic boolean onContextMenuClick(int itemId, int pos, boolean isChecked) {\n\t\t\t\t\t\tma.getMapActions().prepareStartOptionsMenu();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}).reg();\n\t\tcreateLayersItems(adapter, ma);\n\t\tcreateRenderingAttributeItems(adapter, ma);\n\t\treturn adapter;\n\t}","id":46232,"modified_method":"public ContextMenuAdapter createListAdapter(final MapActivity ma) {\n\t\tContextMenuAdapter adapter = new ContextMenuAdapter(ma);\n\t\tadapter.item(R.string.layers_category_show).setCategory(true).reg();\n\t\tadapter.item(R.string.configure_map).icons(R.drawable.ic_back_drawer_dark, R.drawable.ic_back_drawer_white)\n\t\t\t\t.listen(new OnContextMenuClick() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic boolean onContextMenuClick(int itemId, int pos, boolean isChecked) {\n\t\t\t\t\t\tma.getMapActions().prepareStartOptionsMenu();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}).reg();\n\t\tcreateLayersItems(adapter, ma);\n\t\tcreateRenderingAttributeItems(adapter, ma);\n\t\treturn adapter;\n\t}","commit_id":"122a4ea349fc49e7f863f6d371c660b314f33d6c","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private void createLayersItems(ContextMenuAdapter adapter , MapActivity activity) {\n\t\tOsmandApplication app = activity.getMyApplication();\n\t\tOsmandSettings settings = app.getSettings();\n\t\tLayerMenuListener l = new LayerMenuListener(activity);\n\t\tadapter.item(R.string.layers_category_show).setCategory(true);\n\t\t// String appMode = \" [\" + settings.getApplicationMode().toHumanString(view.getApplication()) +\"] \";\n\t\tadapter.item(R.string.layer_poi).selected(settings.SHOW_POI_OVER_MAP.get() ? 1 : 0)\n\t\t\t\t.icons(R.drawable.ic_action_info_dark, R.drawable.ic_action_info_light).listen(l).reg();\n\t\tadapter.item(R.string.layer_amenity_label).selected(settings.SHOW_POI_LABEL.get() ? 1 : 0) \n\t\t\t\t.icons(R.drawable.ic_action_text_dark, R.drawable.ic_action_text_light).listen(l).reg();\n\t\tadapter.item(R.string.layer_favorites).selected(settings.SHOW_FAVORITES.get() ? 1 : 0) \n\t\t\t\t.icons(R.drawable.ic_action_fav_dark, R.drawable.ic_action_fav_light).listen(l).reg();\n\t\tadapter.item(R.string.layer_gpx_layer).selected(\n\t\t\t\tapp.getSelectedGpxHelper().isShowingAnyGpxFiles()? 1 : 0)\n//\t\t\t\t.icons(R.drawable.ic_action_foot_dark, R.drawable.ic_action_foot_light)\n\t\t\t\t.icons(R.drawable.ic_action_polygom_dark, R.drawable.ic_action_polygom_light)\n\t\t\t\t.listen(l).reg();\n\t\tadapter.item(R.string.layer_transport).selected( settings.SHOW_TRANSPORT_OVER_MAP.get() ? 1 : 0)\n\t\t\t\t.icons(R.drawable.ic_action_bus_dark, R.drawable.ic_action_bus_light).listen(l).reg(); \n\t\tif(TransportRouteHelper.getInstance().routeIsCalculated()){\n\t\t\tadapter.item(R.string.layer_transport_route).selected(1)\n\t\t\t\t.icons(R.drawable.ic_action_bus_dark, R.drawable.ic_action_bus_light).listen(l).reg();\n\t\t}\n\t\t\n\t\tOsmandPlugin.registerLayerContextMenu(activity.getMapView(), adapter, activity);\n\t\tapp.getAppCustomization().prepareLayerContextMenu(activity, adapter);\n\t}","id":46233,"modified_method":"private void createLayersItems(ContextMenuAdapter adapter , MapActivity activity) {\n\t\tOsmandApplication app = activity.getMyApplication();\n\t\tOsmandSettings settings = app.getSettings();\n\t\tLayerMenuListener l = new LayerMenuListener(activity);\n\t\tadapter.item(R.string.layers_category_show).setCategory(true).reg();\n\t\t// String appMode = \" [\" + settings.getApplicationMode().toHumanString(view.getApplication()) +\"] \";\n\t\tadapter.item(R.string.layer_poi).selected(settings.SHOW_POI_OVER_MAP.get() ? 1 : 0)\n\t\t\t\t.icons(R.drawable.ic_action_info_dark, R.drawable.ic_action_info_light).listen(l).reg();\n\t\tadapter.item(R.string.layer_amenity_label).selected(settings.SHOW_POI_LABEL.get() ? 1 : 0) \n\t\t\t\t.icons(R.drawable.ic_action_text_dark, R.drawable.ic_action_text_light).listen(l).reg();\n\t\tadapter.item(R.string.layer_favorites).selected(settings.SHOW_FAVORITES.get() ? 1 : 0) \n\t\t\t\t.icons(R.drawable.ic_action_fav_dark, R.drawable.ic_action_fav_light).listen(l).reg();\n\t\tadapter.item(R.string.layer_gpx_layer).selected(\n\t\t\t\tapp.getSelectedGpxHelper().isShowingAnyGpxFiles()? 1 : 0)\n//\t\t\t\t.icons(R.drawable.ic_action_foot_dark, R.drawable.ic_action_foot_light)\n\t\t\t\t.icons(R.drawable.ic_action_polygom_dark, R.drawable.ic_action_polygom_light)\n\t\t\t\t.listen(l).reg();\n\t\tadapter.item(R.string.layer_transport).selected( settings.SHOW_TRANSPORT_OVER_MAP.get() ? 1 : 0)\n\t\t\t\t.icons(R.drawable.ic_action_bus_dark, R.drawable.ic_action_bus_light).listen(l).reg(); \n\t\tif(TransportRouteHelper.getInstance().routeIsCalculated()){\n\t\t\tadapter.item(R.string.layer_transport_route).selected(1)\n\t\t\t\t.icons(R.drawable.ic_action_bus_dark, R.drawable.ic_action_bus_light).listen(l).reg();\n\t\t}\n\t\t\n\t\tOsmandPlugin.registerLayerContextMenu(activity.getMapView(), adapter, activity);\n\t\tapp.getAppCustomization().prepareLayerContextMenu(activity, adapter);\n\t}","commit_id":"122a4ea349fc49e7f863f6d371c660b314f33d6c","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private void createRenderingAttributeItems(ContextMenuAdapter adapter, final MapActivity activity) {\n\t\tadapter.item(R.string.map_widget_map_rendering).setCategory(true);\n\t\tadapter.item(R.string.map_widget_renderer).listen(new OnContextMenuClick() {\n\t\t\t@Override\n\t\t\tpublic boolean onContextMenuClick(int itemId, int pos, boolean isChecked) {\n\t\t\t\tAlertDialog.Builder bld = new AlertDialog.Builder(activity);\n\t\t\t\tbld.setTitle(R.string.renderers);\n\t\t\t\tfinal OsmandApplication app = activity.getMyApplication();\n\t\t\t\tCollection<String> rendererNames = app.getRendererRegistry().getRendererNames();\n\t\t\t\tfinal String[] items = rendererNames.toArray(new String[rendererNames.size()]);\n\t\t\t\tfinal String[] visibleNames = new String[items.length];\n\t\t\t\tint selected = -1;\n\t\t\t\tfinal String selectedName = app.getRendererRegistry().getCurrentSelectedRenderer().getName();\n\t\t\t\tfor (int j = 0; j < items.length; j++) {\n\t\t\t\t\tif (items[j].equals(selectedName)) {\n\t\t\t\t\t\tselected = j;\n\t\t\t\t\t}\n\t\t\t\t\tvisibleNames[j] = items[j].replace('_', ' ').replace('-', ' ');\n\t\t\t\t}\n\t\t\t\tbld.setSingleChoiceItems(visibleNames, selected, new DialogInterface.OnClickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\t\tString renderer = items[which];\n\t\t\t\t\t\tRenderingRulesStorage loaded = app.getRendererRegistry().getRenderer(renderer);\n\t\t\t\t\t\tif (loaded != null) {\n\t\t\t\t\t\t\tOsmandMapTileView view = activity.getMapView();\n\t\t\t\t\t\t\tview.getSettings().RENDERER.set(renderer);\n\t\t\t\t\t\t\tapp.getRendererRegistry().setCurrentSelectedRender(loaded);\n\t\t\t\t\t\t\trefreshMapComplete(activity);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tAccessibleToast.makeText(app, R.string.renderer_load_exception, Toast.LENGTH_SHORT).show();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\t}\n\n\t\t\t\t});\n\t\t\t\tbld.show();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}).reg();\n\n\t\tadapter.item(R.string.map_widget_day_night).listen(new OnContextMenuClick() {\n\t\t\t@Override\n\t\t\tpublic boolean onContextMenuClick(int itemId, int pos, boolean isChecked) {\n\t\t\t\tfinal OsmandMapTileView view = activity.getMapView();\n\t\t\t\tAlertDialog.Builder bld = new AlertDialog.Builder(view.getContext());\n\t\t\t\tbld.setTitle(R.string.daynight);\n\t\t\t\tfinal String[] items = new String[OsmandSettings.DayNightMode.values().length];\n\t\t\t\tfor (int i = 0; i < items.length; i++) {\n\t\t\t\t\titems[i] = OsmandSettings.DayNightMode.values()[i].toHumanString(activity.getMyApplication());\n\t\t\t\t}\n\t\t\t\tint i = view.getSettings().DAYNIGHT_MODE.get().ordinal();\n\t\t\t\tbld.setSingleChoiceItems(items, i, new DialogInterface.OnClickListener() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\t\tview.getSettings().DAYNIGHT_MODE.set(OsmandSettings.DayNightMode.values()[which]);\n\t\t\t\t\t\trefreshMapComplete(activity);\n\t\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tbld.show();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}).reg();\n\n\t\tadapter.item(R.string.text_size).listen(new OnContextMenuClick() {\n\t\t\t@Override\n\t\t\tpublic boolean onContextMenuClick(int itemId, int pos, boolean isChecked) {\n\t\t\t\tfinal OsmandMapTileView view = activity.getMapView();\n\t\t\t\tAlertDialog.Builder b = new AlertDialog.Builder(view.getContext());\n\t\t\t\t// test old descr as title\n\t\t\t\tb.setTitle(R.string.text_size);\n\t\t\t\tfinal Float[] txtValues = new Float[] { 0.75f, 1f, 1.25f, 1.5f, 2f, 3f };\n\t\t\t\tint selected = -1;\n\t\t\t\tfinal String[] txtNames = new String[txtValues.length];\n\t\t\t\tfor (int i = 0; i < txtNames.length; i++) {\n\t\t\t\t\ttxtNames[i] = (int) (txtValues[i] * 100) + \" %\";\n\t\t\t\t\tif (view.getSettings().TEXT_SCALE.get() == txtValues[i]) {\n\t\t\t\t\t\tselected = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tb.setSingleChoiceItems(txtNames, selected, new DialogInterface.OnClickListener() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\t\tview.getSettings().TEXT_SCALE.set(txtValues[which]);\n\t\t\t\t\t\trefreshMapComplete(activity);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tb.show();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}).reg();\n\n\t\tRenderingRulesStorage renderer = activity.getMyApplication().getRendererRegistry().getCurrentSelectedRenderer();\n\t\tif (renderer != null) {\n\t\t\tcreateCustomRenderingProperties(renderer, adapter, activity);\n\t\t}\n\t}","id":46234,"modified_method":"private void createRenderingAttributeItems(ContextMenuAdapter adapter, final MapActivity activity) {\n\t\tadapter.item(R.string.map_widget_map_rendering).setCategory(true).reg();\n\t\tadapter.item(R.string.map_widget_renderer).listen(new OnContextMenuClick() {\n\t\t\t@Override\n\t\t\tpublic boolean onContextMenuClick(int itemId, int pos, boolean isChecked) {\n\t\t\t\tAlertDialog.Builder bld = new AlertDialog.Builder(activity);\n\t\t\t\tbld.setTitle(R.string.renderers);\n\t\t\t\tfinal OsmandApplication app = activity.getMyApplication();\n\t\t\t\tCollection<String> rendererNames = app.getRendererRegistry().getRendererNames();\n\t\t\t\tfinal String[] items = rendererNames.toArray(new String[rendererNames.size()]);\n\t\t\t\tfinal String[] visibleNames = new String[items.length];\n\t\t\t\tint selected = -1;\n\t\t\t\tfinal String selectedName = app.getRendererRegistry().getCurrentSelectedRenderer().getName();\n\t\t\t\tfor (int j = 0; j < items.length; j++) {\n\t\t\t\t\tif (items[j].equals(selectedName)) {\n\t\t\t\t\t\tselected = j;\n\t\t\t\t\t}\n\t\t\t\t\tvisibleNames[j] = items[j].replace('_', ' ').replace('-', ' ');\n\t\t\t\t}\n\t\t\t\tbld.setSingleChoiceItems(visibleNames, selected, new DialogInterface.OnClickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\t\tString renderer = items[which];\n\t\t\t\t\t\tRenderingRulesStorage loaded = app.getRendererRegistry().getRenderer(renderer);\n\t\t\t\t\t\tif (loaded != null) {\n\t\t\t\t\t\t\tOsmandMapTileView view = activity.getMapView();\n\t\t\t\t\t\t\tview.getSettings().RENDERER.set(renderer);\n\t\t\t\t\t\t\tapp.getRendererRegistry().setCurrentSelectedRender(loaded);\n\t\t\t\t\t\t\trefreshMapComplete(activity);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tAccessibleToast.makeText(app, R.string.renderer_load_exception, Toast.LENGTH_SHORT).show();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\t}\n\n\t\t\t\t});\n\t\t\t\tbld.show();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}).reg();\n\n\t\tadapter.item(R.string.map_widget_day_night).listen(new OnContextMenuClick() {\n\t\t\t@Override\n\t\t\tpublic boolean onContextMenuClick(int itemId, int pos, boolean isChecked) {\n\t\t\t\tfinal OsmandMapTileView view = activity.getMapView();\n\t\t\t\tAlertDialog.Builder bld = new AlertDialog.Builder(view.getContext());\n\t\t\t\tbld.setTitle(R.string.daynight);\n\t\t\t\tfinal String[] items = new String[OsmandSettings.DayNightMode.values().length];\n\t\t\t\tfor (int i = 0; i < items.length; i++) {\n\t\t\t\t\titems[i] = OsmandSettings.DayNightMode.values()[i].toHumanString(activity.getMyApplication());\n\t\t\t\t}\n\t\t\t\tint i = view.getSettings().DAYNIGHT_MODE.get().ordinal();\n\t\t\t\tbld.setSingleChoiceItems(items, i, new DialogInterface.OnClickListener() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\t\tview.getSettings().DAYNIGHT_MODE.set(OsmandSettings.DayNightMode.values()[which]);\n\t\t\t\t\t\trefreshMapComplete(activity);\n\t\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tbld.show();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}).reg();\n\n\t\tadapter.item(R.string.text_size).listen(new OnContextMenuClick() {\n\t\t\t@Override\n\t\t\tpublic boolean onContextMenuClick(int itemId, int pos, boolean isChecked) {\n\t\t\t\tfinal OsmandMapTileView view = activity.getMapView();\n\t\t\t\tAlertDialog.Builder b = new AlertDialog.Builder(view.getContext());\n\t\t\t\t// test old descr as title\n\t\t\t\tb.setTitle(R.string.text_size);\n\t\t\t\tfinal Float[] txtValues = new Float[] { 0.75f, 1f, 1.25f, 1.5f, 2f, 3f };\n\t\t\t\tint selected = -1;\n\t\t\t\tfinal String[] txtNames = new String[txtValues.length];\n\t\t\t\tfor (int i = 0; i < txtNames.length; i++) {\n\t\t\t\t\ttxtNames[i] = (int) (txtValues[i] * 100) + \" %\";\n\t\t\t\t\tif (view.getSettings().TEXT_SCALE.get() == txtValues[i]) {\n\t\t\t\t\t\tselected = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tb.setSingleChoiceItems(txtNames, selected, new DialogInterface.OnClickListener() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\t\tview.getSettings().TEXT_SCALE.set(txtValues[which]);\n\t\t\t\t\t\trefreshMapComplete(activity);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tb.show();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}).reg();\n\n\t\tRenderingRulesStorage renderer = activity.getMyApplication().getRendererRegistry().getCurrentSelectedRenderer();\n\t\tif (renderer != null) {\n\t\t\tcreateCustomRenderingProperties(renderer, adapter, activity);\n\t\t}\n\t}","commit_id":"122a4ea349fc49e7f863f6d371c660b314f33d6c","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private void createCustomRenderingProperties(RenderingRulesStorage renderer, ContextMenuAdapter adapter , final MapActivity activity){\n\t\tfinal OsmandMapTileView view = activity.getMapView();\n\t\tadapter.item(R.string.map_widget_vector_attributes).setCategory(true);\n\t\tfinal OsmandApplication app = view.getApplication();\n\t\tList<RenderingRuleProperty> customRules = renderer.PROPS.getCustomRules();\n\t\tfor (final RenderingRuleProperty p : customRules) {\n\t\t\tString propertyName = SettingsActivity.getStringPropertyName(view.getContext(), p.getAttrName(),\n\t\t\t\t\tp.getName());\n\t\t\t// test old descr as title\n\t\t\tfinal String propertyDescr = SettingsActivity.getStringPropertyDescription(view.getContext(),\n\t\t\t\t\tp.getAttrName(), p.getName());\n\t\t\tif (p.isBoolean()) {\n\t\t\t\tfinal OsmandSettings.CommonPreference<Boolean> pref = view.getApplication().getSettings()\n\t\t\t\t\t\t.getCustomRenderBooleanProperty(p.getAttrName());\n\t\t\t\tadapter.item(propertyName).listen(new OnContextMenuClick() {\n\t\t\t\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic boolean onContextMenuClick(int itemId, int pos, boolean isChecked) {\n\t\t\t\t\t\tpref.set(!pref.get());\n\t\t\t\t\t\trefreshMapComplete(activity);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}).selected(pref.get() ? 1 : 0).reg();\n\t\t\t} else {\n\t\t\t\tfinal OsmandSettings.CommonPreference<String> pref = view.getApplication().getSettings()\n\t\t\t\t\t\t.getCustomRenderProperty(p.getAttrName());\n\t\t\t\tadapter.item(propertyName).listen(new OnContextMenuClick() {\n\t\t\t\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic boolean onContextMenuClick(int itemId, int pos, boolean isChecked) {\n\t\t\t\t\t\tAlertDialog.Builder b = new AlertDialog.Builder(view.getContext());\n\t\t\t\t\t\t// test old descr as title\n\t\t\t\t\t\tb.setTitle(propertyDescr);\n\n\t\t\t\t\t\tint i = Arrays.asList(p.getPossibleValues()).indexOf(pref.get());\n\n\t\t\t\t\t\tString[] possibleValuesString = new String[p.getPossibleValues().length];\n\n\t\t\t\t\t\tfor (int j = 0; j < p.getPossibleValues().length; j++) {\n\t\t\t\t\t\t\tpossibleValuesString[j] = SettingsActivity.getStringPropertyValue(view.getContext(),\n\t\t\t\t\t\t\t\t\tp.getPossibleValues()[j]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tb.setSingleChoiceItems(possibleValuesString, i, new DialogInterface.OnClickListener() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\t\t\t\tpref.set(p.getPossibleValues()[which]);\n\t\t\t\t\t\t\t\tapp.getResourceManager().getRenderer().clearCache();\n\t\t\t\t\t\t\t\tview.refreshMap(true);\n\t\t\t\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tb.show();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}).reg();\n\t\t\t}\n\t\t}\n\t}","id":46235,"modified_method":"private void createCustomRenderingProperties(RenderingRulesStorage renderer, ContextMenuAdapter adapter , final MapActivity activity){\n\t\tfinal OsmandMapTileView view = activity.getMapView();\n\t\tadapter.item(R.string.map_widget_vector_attributes).setCategory(true).reg();\n\t\tfinal OsmandApplication app = view.getApplication();\n\t\tList<RenderingRuleProperty> customRules = renderer.PROPS.getCustomRules();\n\t\tfor (final RenderingRuleProperty p : customRules) {\n\t\t\tString propertyName = SettingsActivity.getStringPropertyName(view.getContext(), p.getAttrName(),\n\t\t\t\t\tp.getName());\n\t\t\t// test old descr as title\n\t\t\tfinal String propertyDescr = SettingsActivity.getStringPropertyDescription(view.getContext(),\n\t\t\t\t\tp.getAttrName(), p.getName());\n\t\t\tif (p.isBoolean()) {\n\t\t\t\tfinal OsmandSettings.CommonPreference<Boolean> pref = view.getApplication().getSettings()\n\t\t\t\t\t\t.getCustomRenderBooleanProperty(p.getAttrName());\n\t\t\t\tadapter.item(propertyName).listen(new OnContextMenuClick() {\n\t\t\t\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic boolean onContextMenuClick(int itemId, int pos, boolean isChecked) {\n\t\t\t\t\t\tpref.set(!pref.get());\n\t\t\t\t\t\trefreshMapComplete(activity);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}).selected(pref.get() ? 1 : 0).reg();\n\t\t\t} else {\n\t\t\t\tfinal OsmandSettings.CommonPreference<String> pref = view.getApplication().getSettings()\n\t\t\t\t\t\t.getCustomRenderProperty(p.getAttrName());\n\t\t\t\tadapter.item(propertyName).listen(new OnContextMenuClick() {\n\t\t\t\t\t\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic boolean onContextMenuClick(int itemId, int pos, boolean isChecked) {\n\t\t\t\t\t\tAlertDialog.Builder b = new AlertDialog.Builder(view.getContext());\n\t\t\t\t\t\t// test old descr as title\n\t\t\t\t\t\tb.setTitle(propertyDescr);\n\n\t\t\t\t\t\tint i = Arrays.asList(p.getPossibleValues()).indexOf(pref.get());\n\n\t\t\t\t\t\tString[] possibleValuesString = new String[p.getPossibleValues().length];\n\n\t\t\t\t\t\tfor (int j = 0; j < p.getPossibleValues().length; j++) {\n\t\t\t\t\t\t\tpossibleValuesString[j] = SettingsActivity.getStringPropertyValue(view.getContext(),\n\t\t\t\t\t\t\t\t\tp.getPossibleValues()[j]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tb.setSingleChoiceItems(possibleValuesString, i, new DialogInterface.OnClickListener() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\t\t\t\tpref.set(p.getPossibleValues()[which]);\n\t\t\t\t\t\t\t\tapp.getResourceManager().getRenderer().clearCache();\n\t\t\t\t\t\t\t\tview.refreshMap(true);\n\t\t\t\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tb.show();\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}).reg();\n\t\t\t}\n\t\t}\n\t}","commit_id":"122a4ea349fc49e7f863f6d371c660b314f33d6c","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public ListAdapter createListAdapter(final Activity activity, final int layoutId, final boolean holoLight) {\n\t\tfinal int padding = (int) (12 * activity.getResources().getDisplayMetrics().density + 0.5f);\n\t\tListAdapter listadapter = new ArrayAdapter<String>(activity, layoutId, R.id.title,\n\t\t\t\tgetItemNames()) {\n\t\t\t@Override\n\t\t\tpublic View getView(int position, View convertView, ViewGroup parent) {\n\t\t\t\t// User super class to create the View\n\t\t\t\tView v = convertView;\n\t\t\t\tif (v == null) {\n\t\t\t\t\tv = activity.getLayoutInflater().inflate(layoutId, null);\n\t\t\t\t}\n\t\t\t\tTextView tv = (TextView) v.findViewById(R.id.title);\n\t\t\t\ttv.setText(getItemName(position));\n\n\t\t\t\t// Put the image on the TextView\n\t\t\t\tif (getImageId(position, holoLight) != 0) {\n\t\t\t\t\ttv.setCompoundDrawablesWithIntrinsicBounds(getImageId(position, holoLight), 0, 0, 0);\n\t\t\t\t} else {\n\t\t\t\t\ttv.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_action_transparent, 0, 0, 0);\n\t\t\t\t}\n\t\t\t\ttv.setCompoundDrawablePadding(padding);\n\t\t\t\t\n\t\t\t\tif(isCategory(position)) {\n\t\t\t\t\ttv.setTypeface(Typeface.DEFAULT_BOLD);\n\t\t\t\t} else {\n\t\t\t\t\ttv.setTypeface(null);\n\t\t\t\t}\n\n\t\t\t\tfinal CheckBox ch = ((CheckBox) v.findViewById(R.id.check_item));\n\t\t\t\tch.setVisibility(View.GONE);\n\t\t\t\treturn v;\n\t\t\t}\n\t\t};\n\t\treturn listadapter;\n\t}","id":46236,"modified_method":"public ListAdapter createListAdapter(final Activity activity, final int layoutId, final boolean holoLight) {\n\t\tfinal int padding = (int) (12 * activity.getResources().getDisplayMetrics().density + 0.5f);\n\t\tListAdapter listadapter = new ArrayAdapter<String>(activity, layoutId, R.id.title,\n\t\t\t\tgetItemNames()) {\n\t\t\t@Override\n\t\t\tpublic View getView(final int position, View convertView, ViewGroup parent) {\n\t\t\t\t// User super class to create the View\n\t\t\t\tView v = convertView;\n\t\t\t\tif (v == null) {\n\t\t\t\t\tv = activity.getLayoutInflater().inflate(layoutId, null);\n\t\t\t\t}\n\t\t\t\tTextView tv = (TextView) v.findViewById(R.id.title);\n\t\t\t\ttv.setText(getItemName(position));\n\n\t\t\t\t// Put the image on the TextView\n\t\t\t\tif (getImageId(position, holoLight) != 0) {\n\t\t\t\t\ttv.setCompoundDrawablesWithIntrinsicBounds(getImageId(position, holoLight), 0, 0, 0);\n\t\t\t\t} else {\n\t\t\t\t\ttv.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_action_transparent, 0, 0, 0);\n\t\t\t\t}\n\t\t\t\ttv.setCompoundDrawablePadding(padding);\n\t\t\t\t\n\t\t\t\tif(isCategory(position)) {\n\t\t\t\t\ttv.setTypeface(Typeface.DEFAULT_BOLD);\n\t\t\t\t} else {\n\t\t\t\t\ttv.setTypeface(null);\n\t\t\t\t}\n\n\t\t\t\tfinal CheckBox ch = ((CheckBox) v.findViewById(R.id.check_item));\n\t\t\t\tif(selectedList.get(position) != -1) {\n\t\t\t\t\tch.setOnCheckedChangeListener(null);\n\t\t\t\t\tch.setVisibility(View.VISIBLE);\n\t\t\t\t\tch.setSelected(selectedList.get(position) > 0);\n\t\t\t\t\tch.setOnCheckedChangeListener(new OnCheckedChangeListener() {\n\t\t\t\t\t\t\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n\t\t\t\t\t\t\tOnContextMenuClick ca = getClickAdapter(position);\n\t\t\t\t\t\t\tif(ca != null) {\n\t\t\t\t\t\t\t\tca.onContextMenuClick(getItemId(position), position, isChecked);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tch.setVisibility(View.VISIBLE);\n\t\t\t\t} else {\n\t\t\t\t\tch.setVisibility(View.GONE);\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t}\n\t\t};\n\t\treturn listadapter;\n\t}","commit_id":"122a4ea349fc49e7f863f6d371c660b314f33d6c","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public void setCategory(boolean b) {\n\t\t\tcat = b;\n\t\t}","id":46237,"modified_method":"public Item setCategory(boolean b) {\n\t\t\tcat = b;\n\t\t\treturn this;\n\t\t}","commit_id":"122a4ea349fc49e7f863f6d371c660b314f33d6c","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n  protected void prepareTestData(MPSFacetConfiguration configuration) throws Exception {\n    Module module = configuration.getFacet().getModule();\n    String moduleFileName = module.getModuleFilePath();\n    copyResource(moduleFileName, \"makeTestBroken.iml\", \"/tests/makeTestBroken/makeTestBroken.iml\");\n    final IFile brokenModel = copyResource(\"models\", \"broken.mps\", \"broken.mps\", \"/tests/makeTestBroken/models/broken.mps\");\n    configuration.getState().setModelRootPaths(brokenModel.getParent().getPath());\n    prepareTestData(configuration, brokenModel.getParent());\n  }","id":46238,"modified_method":"@Override\n  protected void prepareTestData(MPSFacetConfiguration configuration) throws Exception {\n    Module module = configuration.getFacet().getModule();\n    String moduleFileName = module.getModuleFilePath();\n    copyResource(moduleFileName, \"makeTestBroken.iml\", \"/tests/makeTestBroken/makeTestBroken.iml\");\n    final IFile brokenModel = copyResource(\"models\", \"broken.mps\", \"broken.mps\", \"/tests/makeTestBroken/models/broken.mps\");\n    ArrayList<ModelRoot> roots = new ArrayList<ModelRoot>();\n    roots.add(new ModelRoot(brokenModel.getParent().getPath()));\n    configuration.getState().setModelRoots(roots);\n    prepareTestData(configuration, brokenModel.getParent());\n  }","commit_id":"096971a46f777233c22f549dd364119e6318adae","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  protected void prepareTestData(MPSFacetConfiguration configuration) throws Exception {\n    Module module = configuration.getFacet().getModule();\n    String moduleFileName = module.getModuleFilePath();\n    copyResource(moduleFileName, \"makeTests.iml\", \"/tests/makeTests/makeTests.iml\");\n    final IFile codeModel = copyResource(\"models\", \"code.mps\", \"code.mps\", \"/tests/makeTests/models/code.mps\");\n    final IFile dataModel = copyResource(\"models\", \"data.mps\", \"data.mps\", \"/tests/makeTests/models/data.mps\");\n    final IFile code2Model = copyResource(\"models\", \"code2.mps\", \"code2.mps\", \"/tests/makeTests/models/code2.mps\");\n    final IFile data2Model = copyResource(\"models\", \"data2.mps\", \"data2.mps\", \"/tests/makeTests/models/data2.mps\");\n    configuration.getState().setModelRootPaths(codeModel.getParent().getPath());\n    prepareTestData(configuration, codeModel.getParent());\n  }","id":46239,"modified_method":"@Override\n  protected void prepareTestData(MPSFacetConfiguration configuration) throws Exception {\n    Module module = configuration.getFacet().getModule();\n    String moduleFileName = module.getModuleFilePath();\n    copyResource(moduleFileName, \"makeTests.iml\", \"/tests/makeTests/makeTests.iml\");\n    final IFile codeModel = copyResource(\"models\", \"code.mps\", \"code.mps\", \"/tests/makeTests/models/code.mps\");\n    final IFile dataModel = copyResource(\"models\", \"data.mps\", \"data.mps\", \"/tests/makeTests/models/data.mps\");\n    final IFile code2Model = copyResource(\"models\", \"code2.mps\", \"code2.mps\", \"/tests/makeTests/models/code2.mps\");\n    final IFile data2Model = copyResource(\"models\", \"data2.mps\", \"data2.mps\", \"/tests/makeTests/models/data2.mps\");\n    ArrayList<ModelRoot> roots = new ArrayList<ModelRoot>();\n    roots.add(new ModelRoot(codeModel.getParent().getPath()));\n    configuration.getState().setModelRoots(roots);\n    prepareTestData(configuration, codeModel.getParent());\n  }","commit_id":"096971a46f777233c22f549dd364119e6318adae","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    protected void prepareTestData(MPSFacetConfiguration configuration) throws  Exception {\n        IFile test = copyResource(\"models\", \"test.mps\", \"test.mps\", \"/tests/editorTests/models/test.mps\");\n        configuration.getState().setModelRootPaths(new String[]{test.getParent().getPath()});\n    }","id":46240,"modified_method":"@Override\n    protected void prepareTestData(MPSFacetConfiguration configuration) throws  Exception {\n        IFile test = copyResource(\"models\", \"test.mps\", \"test.mps\", \"/tests/editorTests/models/test.mps\");\n      ArrayList<ModelRoot> roots = new ArrayList<ModelRoot>();\n      roots.add(new ModelRoot(test.getParent().getPath()));\n      configuration.getState().setModelRoots(roots);\n    }","commit_id":"096971a46f777233c22f549dd364119e6318adae","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void testAddRemoveModelRoot() throws InterruptedException {\n        @NonNls final File modelRootDir = new File(getModuleHome(), \"modelRoot\");\n        assertTrue(modelRootDir.mkdir());\n\n        ModuleReference solutionReference = myFacet.getSolution().getModuleReference();\n\n        String modelRootPath = modelRootDir.getPath();\n        MPSConfigurationBean configurationBean = myFacet.getConfiguration().getState();\n        configurationBean.setModelRootPaths(modelRootPath);\n        myFacet.setConfiguration(configurationBean);\n        flushEDT();\n\n        Solution repositorySolution = MPSModuleRepository.getInstance().getSolution(solutionReference);\n        assertEquals(myFacet.getSolution(), repositorySolution);\n        Collection<SModelRoot> modelRoots = repositorySolution.getSModelRoots();\n        assertEquals(1, modelRoots.size());\n        SModelRoot theModelRoot = modelRoots.iterator().next();\n        assertEquals(modelRootDir.getPath(), theModelRoot.getPath());\n\n        configurationBean = myFacet.getConfiguration().getState();\n        configurationBean.setModelRootPaths();\n        myFacet.setConfiguration(configurationBean);\n        flushEDT();\n\n        assertEmpty(repositorySolution.getSModelRoots());\n    }","id":46241,"modified_method":"public void testAddRemoveModelRoot() throws InterruptedException {\n    @NonNls final File modelRootDir = new File(getModuleHome(), \"modelRoot\");\n    assertTrue(modelRootDir.mkdir());\n\n    ModuleReference solutionReference = myFacet.getSolution().getModuleReference();\n\n    String modelRootPath = modelRootDir.getPath();\n    MPSConfigurationBean configurationBean = myFacet.getConfiguration().getState();\n    ArrayList<ModelRoot> roots = new ArrayList<ModelRoot>();\n    roots.add(new ModelRoot(modelRootPath));\n    configurationBean.setModelRoots(roots);\n    myFacet.setConfiguration(configurationBean);\n    flushEDT();\n\n    Solution repositorySolution = MPSModuleRepository.getInstance().getSolution(solutionReference);\n    assertEquals(myFacet.getSolution(), repositorySolution);\n    Collection<SModelRoot> modelRoots = repositorySolution.getSModelRoots();\n    assertEquals(1, modelRoots.size());\n    SModelRoot theModelRoot = modelRoots.iterator().next();\n    assertEquals(modelRootDir.getPath(), theModelRoot.getPath());\n\n    configurationBean = myFacet.getConfiguration().getState();\n    configurationBean.setModelRoots(new ArrayList<ModelRoot>());\n    myFacet.setConfiguration(configurationBean);\n    flushEDT();\n\n    assertEmpty(repositorySolution.getSModelRoots());\n  }","commit_id":"096971a46f777233c22f549dd364119e6318adae","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  protected void prepareTestData(final MPSFacetConfiguration configuration) throws Exception {\n    String moduleFileName = configuration.getFacet().getModule().getModuleFilePath();\n    copyResource(moduleFileName, \"blProject.iml\", \"/tests/blProject/blProject.iml\");\n    final IFile model = copyResource(\"models\", \"main.mps\", \"main.mps\", \"/tests/blProject/models/main.mps\");\n    final IFile source = model.getParent();\n    configuration.getState().setModelRootPaths(model.getParent().getPath());\n    prepareTestData(configuration, source);\n  }","id":46242,"modified_method":"@Override\n  protected void prepareTestData(final MPSFacetConfiguration configuration) throws Exception {\n    String moduleFileName = configuration.getFacet().getModule().getModuleFilePath();\n    copyResource(moduleFileName, \"blProject.iml\", \"/tests/blProject/blProject.iml\");\n    final IFile model = copyResource(\"models\", \"main.mps\", \"main.mps\", \"/tests/blProject/models/main.mps\");\n    final IFile source = model.getParent();\n    ArrayList<ModelRoot> roots = new ArrayList<ModelRoot>();\n    roots.add(new ModelRoot(model.getParent().getPath()));\n    configuration.getState().setModelRoots(roots);\n    prepareTestData(configuration, source);\n  }","commit_id":"096971a46f777233c22f549dd364119e6318adae","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    public void actionPerformed(AnActionEvent e) {\n        Module module = e.getData(LangDataKeys.MODULE);\n        assert module != null;\n        VirtualFile[] vFiles = e.getData(PlatformDataKeys.VIRTUAL_FILE_ARRAY);\n        assert vFiles != null;\n        MPSFacet mpsFacet = FacetManager.getInstance(module).getFacetByType(MPSFacetType.ID);\n        assert mpsFacet != null;\n\n        MPSConfigurationBean configurationBean = mpsFacet.getConfiguration().getState();\n        List<String> modelRootPaths = new ArrayList<String>(Arrays.asList(configurationBean.getModelRootPaths()));\n        for (VirtualFile vFile : vFiles) {\n            modelRootPaths.add(VirtualFileManager.extractPath(vFile.getUrl()));\n        }\n        configurationBean.setModelRootPaths(modelRootPaths.toArray(new String[modelRootPaths.size()]));\n        mpsFacet.setConfiguration(configurationBean);\n    }","id":46243,"modified_method":"@Override\n  public void actionPerformed(AnActionEvent e) {\n    Module module = e.getData(LangDataKeys.MODULE);\n    assert module != null;\n    VirtualFile[] vFiles = e.getData(PlatformDataKeys.VIRTUAL_FILE_ARRAY);\n    assert vFiles != null;\n    MPSFacet mpsFacet = FacetManager.getInstance(module).getFacetByType(MPSFacetType.ID);\n    assert mpsFacet != null;\n\n    MPSConfigurationBean configurationBean = mpsFacet.getConfiguration().getState();\n    List<ModelRoot> modelRootPaths = new ArrayList<ModelRoot>(configurationBean.getModelRoots());\n    for (VirtualFile vFile : vFiles) {\n      modelRootPaths.add(new ModelRoot(VirtualFileManager.extractPath(vFile.getUrl())));\n    }\n    configurationBean.setModelRoots(modelRootPaths);\n    mpsFacet.setConfiguration(configurationBean);\n  }","commit_id":"096971a46f777233c22f549dd364119e6318adae","url":"https://github.com/JetBrains/MPS"},{"original_method":"private boolean isEnabled(AnActionEvent e) {\n        Module module = e.getData(LangDataKeys.MODULE);\n        VirtualFile[] vFiles = e.getData(PlatformDataKeys.VIRTUAL_FILE_ARRAY);\n        if (module == null || vFiles == null) {\n            return false;\n        }\n\n        MPSFacet mpsFacet = FacetManager.getInstance(module).getFacetByType(MPSFacetType.ID);\n        if (mpsFacet == null || !mpsFacet.wasInitialized()) {\n            return false;\n        }\n        for (VirtualFile vFile : vFiles) {\n            if (!vFile.isDirectory()) {\n                return false;\n            }\n            String url = vFile.getUrl();\n            if (!LocalFileSystem.PROTOCOL.equals(VirtualFileManager.extractProtocol(url))) {\n                return false;\n            }\n            String path = VirtualFileManager.extractPath(url);\n            for (String sourcePath : mpsFacet.getConfiguration().getState().getModelRootPaths()) {\n                if (sourcePath.startsWith(path) || path.startsWith(sourcePath)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }","id":46244,"modified_method":"private boolean isEnabled(AnActionEvent e) {\n    Module module = e.getData(LangDataKeys.MODULE);\n    VirtualFile[] vFiles = e.getData(PlatformDataKeys.VIRTUAL_FILE_ARRAY);\n    if (module == null || vFiles == null) return false;\n\n    MPSFacet mpsFacet = FacetManager.getInstance(module).getFacetByType(MPSFacetType.ID);\n    if (mpsFacet == null || !mpsFacet.wasInitialized()) return false;\n\n    for (VirtualFile vFile : vFiles) {\n      if (!vFile.isDirectory()) return false;\n\n      String url = vFile.getUrl();\n      if (!LocalFileSystem.PROTOCOL.equals(VirtualFileManager.extractProtocol(url))) return false;\n\n      String path = VirtualFileManager.extractPath(url);\n      for (ModelRoot mr : mpsFacet.getConfiguration().getState().getModelRoots()) {\n        if (mr.getManager()!=null) continue;\n        if (mr.getPath().startsWith(path) || path.startsWith(mr.getPath())) return false;\n      }\n    }\n    return true;\n  }","commit_id":"096971a46f777233c22f549dd364119e6318adae","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected MPSFacet addMPSFacet(Module module) {\n        FacetManager facetManager = FacetManager.getInstance(module);\n        FacetType<MPSFacet, MPSFacetConfiguration> facetType = FacetTypeRegistry.getInstance().findFacetType(MPSFacetType.ID);\n        Assert.assertNotNull(\"MPS facet type is not found\", facetType);\n        MPSFacet facet = facetManager.createFacet(facetType, \"MPS\", null);\n        final MPSFacetConfiguration configuration = facet.getConfiguration();\n        configuration.getState().setModelRootPaths(VirtualFileManager.extractPath(getContentRoot().findChild(\"src\").getUrl()));\n\n        final ModifiableFacetModel facetModel = facetManager.createModifiableModel();\n        facetModel.addFacet(facet);\n        ApplicationManager.getApplication().runWriteAction(new Runnable() {\n            @Override\n            public void run() {\n                facetModel.commit();\n            }\n        });\n        return facet;\n    }","id":46245,"modified_method":"protected MPSFacet addMPSFacet(Module module) {\n    FacetManager facetManager = FacetManager.getInstance(module);\n    FacetType<MPSFacet, MPSFacetConfiguration> facetType = FacetTypeRegistry.getInstance().findFacetType(MPSFacetType.ID);\n    Assert.assertNotNull(\"MPS facet type is not found\", facetType);\n    MPSFacet facet = facetManager.createFacet(facetType, \"MPS\", null);\n    final MPSFacetConfiguration configuration = facet.getConfiguration();\n    String path = VirtualFileManager.extractPath(getContentRoot().findChild(\"src\").getUrl());\n    ArrayList<ModelRoot> roots = new ArrayList<ModelRoot>();\n    roots.add(new ModelRoot(path));\n    configuration.getState().setModelRoots(roots);\n\n    final ModifiableFacetModel facetModel = facetManager.createModifiableModel();\n    facetModel.addFacet(facet);\n    ApplicationManager.getApplication().runWriteAction(new Runnable() {\n      @Override\n      public void run() {\n        facetModel.commit();\n      }\n    });\n    return facet;\n  }","commit_id":"096971a46f777233c22f549dd364119e6318adae","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  protected void prepareTestData(final MPSFacetConfiguration configuration) throws Exception {\n    String moduleFileName = configuration.getFacet().getModule().getModuleFilePath();\n    copyResource(moduleFileName, \"simple.iml\", \"/tests/simple/simple.iml\");\n    final IFile model = copyResource(\"models\", \"simple.mps\", \"simple.mps\", \"/tests/simple/models/simple.mps\");\n    configuration.getState().setModelRootPaths(model.getParent().getPath());\n    prepareTestData(configuration, model.getParent());\n  }","id":46246,"modified_method":"@Override\n  protected void prepareTestData(final MPSFacetConfiguration configuration) throws Exception {\n    String moduleFileName = configuration.getFacet().getModule().getModuleFilePath();\n    copyResource(moduleFileName, \"simple.iml\", \"/tests/simple/simple.iml\");\n    final IFile model = copyResource(\"models\", \"simple.mps\", \"simple.mps\", \"/tests/simple/models/simple.mps\");\n    ArrayList<ModelRoot> roots = new ArrayList<ModelRoot>();\n    roots.add(new ModelRoot(model.getParent().getPath()));\n    configuration.getState().setModelRoots(roots);\n    prepareTestData(configuration, model.getParent());\n  }","commit_id":"096971a46f777233c22f549dd364119e6318adae","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    public void actionPerformed(AnActionEvent e) {\n        Module module = e.getData(LangDataKeys.MODULE);\n        assert module != null;\n        VirtualFile[] vFiles = e.getData(PlatformDataKeys.VIRTUAL_FILE_ARRAY);\n        assert vFiles != null;\n        MPSFacet mpsFacet = FacetManager.getInstance(module).getFacetByType(MPSFacetType.ID);\n        assert mpsFacet != null;\n\n        MPSConfigurationBean configurationBean = mpsFacet.getConfiguration().getState();\n        List<String> modelRootPaths = new ArrayList<String>(Arrays.asList(configurationBean.getModelRootPaths()));\n        for (VirtualFile vFile : vFiles) {\n            modelRootPaths.remove(VirtualFileManager.extractPath(vFile.getUrl()));\n        }\n        configurationBean.setModelRootPaths(modelRootPaths.toArray(new String[modelRootPaths.size()]));\n        mpsFacet.setConfiguration(configurationBean);\n    }","id":46247,"modified_method":"@Override\n  public void actionPerformed(AnActionEvent e) {\n    Module module = e.getData(LangDataKeys.MODULE);\n    assert module != null;\n    VirtualFile[] vFiles = e.getData(PlatformDataKeys.VIRTUAL_FILE_ARRAY);\n    assert vFiles != null;\n    MPSFacet mpsFacet = FacetManager.getInstance(module).getFacetByType(MPSFacetType.ID);\n    assert mpsFacet != null;\n\n    MPSConfigurationBean configurationBean = mpsFacet.getConfiguration().getState();\n    List<ModelRoot> modelRoots = new ArrayList<ModelRoot>(configurationBean.getModelRoots());\n    for (VirtualFile vFile : vFiles) {\n      modelRoots.remove(new ModelRoot(VirtualFileManager.extractPath(vFile.getUrl())));\n    }\n    configurationBean.setModelRoots(modelRoots);\n    mpsFacet.setConfiguration(configurationBean);\n  }","commit_id":"096971a46f777233c22f549dd364119e6318adae","url":"https://github.com/JetBrains/MPS"},{"original_method":"private boolean isEnabled(AnActionEvent e) {\n        Module module = e.getData(LangDataKeys.MODULE);\n        VirtualFile[] vFiles = e.getData(PlatformDataKeys.VIRTUAL_FILE_ARRAY);\n        if (module == null || vFiles == null) {\n            return false;\n        }\n\n        MPSFacet mpsFacet = FacetManager.getInstance(module).getFacetByType(MPSFacetType.ID);\n        if (mpsFacet == null || !mpsFacet.wasInitialized()) {\n            return false;\n        }\n        Set<String> modelRootPaths = new HashSet<String>();\n        modelRootPaths.addAll(Arrays.asList(mpsFacet.getConfiguration().getState().getModelRootPaths()));\n        for (VirtualFile vFile : vFiles) {\n            if (!vFile.isDirectory()) {\n                return false;\n            }\n            String url = vFile.getUrl();\n            if (!LocalFileSystem.PROTOCOL.equals(VirtualFileManager.extractProtocol(url))) {\n                return false;\n            }\n            String path = VirtualFileManager.extractPath(url);\n            if (!modelRootPaths.contains(path)) {\n                return false;\n            }\n        }\n        return true;\n    }","id":46248,"modified_method":"private boolean isEnabled(AnActionEvent e) {\n    Module module = e.getData(LangDataKeys.MODULE);\n    VirtualFile[] vFiles = e.getData(PlatformDataKeys.VIRTUAL_FILE_ARRAY);\n    if (module == null || vFiles == null) return false;\n\n    MPSFacet mpsFacet = FacetManager.getInstance(module).getFacetByType(MPSFacetType.ID);\n    if (mpsFacet == null || !mpsFacet.wasInitialized()) return false;\n\n    Set<ModelRoot> modelRoots = new HashSet<ModelRoot>();\n    modelRoots.addAll(mpsFacet.getConfiguration().getState().getModelRoots());\n    for (VirtualFile vFile : vFiles) {\n      if (!vFile.isDirectory()) return false;\n\n      String url = vFile.getUrl();\n      if (!LocalFileSystem.PROTOCOL.equals(VirtualFileManager.extractProtocol(url))) return false;\n\n      String path = VirtualFileManager.extractPath(url);\n      if (!modelRoots.contains(new ModelRoot(path))) return false;\n    }\n    return true;\n  }","commit_id":"096971a46f777233c22f549dd364119e6318adae","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n   * Adds a primitive to a primitive list depending on its type.\n   * @param p update primitive\n   * @throws QueryException query exception\n   */\n  public void addPrimitive(final UpdatePrimitive p) throws QueryException {\n    Integer i;\n    if(p.node instanceof DBNode) i = ((DBNode) p.node).pre;\n    // possible to use node id 'cause nodes in map belong to the same\n    // database. thus there won't be any collisions between dbnodes and \n    // fragments\n    else i = ((FNode) p.node).id();\n    UpdatePrimitive[] l = op.get(i);\n    // [LK] same node, same kind of operation - what you wanna do?\n    if(l == null) {\n      l = new UpdatePrimitive[Type.values().length];\n      l[p.type().ordinal()] = p;\n      op.put(i, l);\n    } else l[p.type().ordinal()].merge(p);\n  }","id":46249,"modified_method":"/**\n   * Adds a primitive to a primitive list depending on its type.\n   * @param p update primitive\n   * @throws QueryException query exception\n   */\n  public void addPrimitive(final UpdatePrimitive p) throws QueryException {\n    Integer i;\n    if(p.node instanceof DBNode) i = ((DBNode) p.node).pre;\n    // possible to use node id 'cause nodes in map belong to the same\n    // database. thus there won't be any collisions between dbnodes and \n    // fragments\n    else i = ((FNode) p.node).id();\n    UpdatePrimitive[] l = op.get(i);\n    final int pos = p.type().ordinal();\n    if(l == null) {\n      l = new UpdatePrimitive[Type.values().length];\n      l[pos] = p;\n      op.put(i, l);\n    } else if(l[pos] == null) l[pos] = p;\n    else l[pos].merge(p);\n  }","commit_id":"768937a33475718004a88f1d24ea14ca3ff64357","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n  public Iter iter(final QueryContext ctx) throws QueryException {\n    // check source constraints\n    final Iter s = SeqIter.get(expr[1].iter(ctx));\n    final SeqIter seq = new SeqIter();\n    Item i = s.next();\n    // e needed to track order of attribute / non attribute nodes XUTY0004\n    boolean e = false;\n    while(i != null) {\n      // [LK] check  use of txt node constructor\n      if(i.type.num || i.type.str) seq.add(new FTxt(i.str(), null));\n      else if(i instanceof Nod) {\n        final Nod tn = (Nod) i;\n        final int k = Nod.kind(tn.type);\n        if(k == Data.ATTR) {\n          if(e) Err.or(UPNOATTRPER, this);\n        }\n        if(k != Data.ATTR) e = true;\n        if(Nod.kind(tn.type) == Data.DOC) \n          seq.add(tn.child());\n        else seq.add(tn);\n      } else Err.or(UPDATE, this);\n      i = s.next();\n    }\n    seq.reset();\n    \n    final boolean into = !(before || after);\n    // check target constraints\n    final Iter t = SeqIter.get(expr[0].iter(ctx));\n    i = t.next();\n    if(i == null) Err.or(UPSEQEMP, this);\n    if(!(i instanceof Nod) || t.size() > 1) Err.or(UPTRGTYP, this);\n    final Nod n = (Nod) i;\n    final int k = Nod.kind(n.type);\n    if(into && (!(k == Data.ELEM || k == Data.DOC))) Err.or(UPTRGTYP, this);\n    if(before || after) {\n      if(k == Data.ATTR) Err.or(UPTRGTYP2, this);\n      if(n.parent() == null) Err.or(UPPAREMPTY, this);\n    }\n    \n    int pl = -1;\n    if(n instanceof DBNode) {\n      final DBNode dn = (DBNode) n;\n      pl = dn.pre + dn.data.attSize(dn.pre, dn.data.kind(dn.pre));\n    }\n    UpdatePrimitive p = null;\n    if(into) p = first ? new InsertIntoFirstPrimitive(n, seq, pl) : \n      last ? new InsertIntoLastPrimitive(n, seq, pl) : \n        new InsertIntoPrimitive(n, seq, pl);\n    \n    if(after) p = new InsertAfterPrimitive(n, seq, pl);\n    if(before) p = new InsertBeforePrimitive(n, seq, pl);\n    \n    ctx.updates.addPrimitive(p);\n    return Iter.EMPTY;\n  }","id":46250,"modified_method":"@Override\n  public Iter iter(final QueryContext ctx) throws QueryException {\n    // check source constraints\n    final Iter s = SeqIter.get(expr[1].iter(ctx));\n    final SeqIter seq = new SeqIter();\n    final SeqIter aSeq = new SeqIter();\n    Item i = s.next();\n    // e needed to track order of attribute / non attribute nodes XUTY0004\n    boolean e = false;\n    while(i != null) {\n      // [LK] check  use of txt node constructor\n      if(i.type.num || i.type.str) seq.add(new FTxt(i.str(), null));\n      else if(i instanceof Nod) {\n        final Nod tn = (Nod) i;\n        final int k = Nod.kind(tn.type);\n        if(k == Data.ATTR) {\n          if(e) Err.or(UPNOATTRPER, this);\n          aSeq.add(tn);\n        } else {\n          e = true;\n          if(Nod.kind(tn.type) == Data.DOC) seq.add(tn.child());\n          else seq.add(tn);\n        }\n      } else Err.or(UPDATE, this);\n      i = s.next();\n    }\n    seq.reset();\n    \n    final boolean into = !(before || after);\n    // check target constraints\n    final Iter t = SeqIter.get(expr[0].iter(ctx));\n    i = t.next();\n    if(i == null) Err.or(UPSEQEMP, this);\n    if(!(i instanceof Nod) || t.size() > 1) Err.or(UPTRGTYP, this);\n    final Nod n = (Nod) i;\n    final int k = Nod.kind(n.type);\n    if(into && (!(k == Data.ELEM || k == Data.DOC))) Err.or(UPTRGTYP, this);\n    if(before || after) {\n      if(k == Data.ATTR) Err.or(UPTRGTYP2, this);\n      if(n.parent() == null) Err.or(UPPAREMPTY, this);\n    }\n    \n    if(!(n instanceof DBNode)) {\n      if(aSeq.size() > 0) ctx.updates.\n        addPrimitive(new InsertAttribute(n, aSeq, -1));\n      if(seq.size() > 0) ctx.updates.\n      addPrimitive(new InsertAttribute(n, seq, -1));\n      return Iter.EMPTY;\n    }\n    \n    final DBNode dbn = (DBNode) n;\n    final Data d = dbn.data;\n    int p = dbn.pre;\n    int l = p + d.attSize(p, d.kind(p));\n    if(aSeq.size() > 0) ctx.updates.addPrimitive(\n        new InsertAttribute(n, aSeq, l));\n    if(seq.size() > 0) {\n      UpdatePrimitive up = null;\n      if(into) up = new InsertIntoPrimitive(n, seq, l); \n      else Err.or(UPDATE, this);\n      ctx.updates.addPrimitive(up);\n    }\n    return Iter.EMPTY;\n  }","commit_id":"768937a33475718004a88f1d24ea14ca3ff64357","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Constructor.\n   * @param n target node\n   * @param copy insertion nods\n   * @param l actual insert location\n   */\n  protected InsertAttribute(final Nod n, final Iter copy, final int l) {\n    super(n, copy, l);\n  }","id":46251,"modified_method":"/**\n   * Constructor.\n   * @param n target node\n   * @param copy insertion nods\n   * @param l actual insert location\n   */\n  public InsertAttribute(final Nod n, final Iter copy, final int l) {\n    super(n, copy, l);\n  }","commit_id":"768937a33475718004a88f1d24ea14ca3ff64357","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n  public void apply() throws QueryException {\n    Err.or(UPDATE, this);\n  }","id":46252,"modified_method":"@Override\n  public void apply() throws QueryException {\n    if(!(node instanceof DBNode)) return;\n    \n    final SeqIter seq = new SeqIter();\n    final Iterator<Iter> it = c.iterator();\n    while(it.hasNext()) {\n      final Iter ni = it.next();\n      Item i = ni.next();\n      while(i != null) {\n        seq.add(i);\n        i = ni.next();\n      }\n    }\n    if(seq.size() == 0) return;\n    final DBNode n = (DBNode) node;\n    final Data d = n.data;\n    insertAttributes(loc, n.pre, d, buildDB(seq, d));\n  }","commit_id":"768937a33475718004a88f1d24ea14ca3ff64357","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n  public Type type() {\n    return null;\n  }","id":46253,"modified_method":"@Override\n  public Type type() {\n    return Type.INSERTATTR;\n  }","commit_id":"768937a33475718004a88f1d24ea14ca3ff64357","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n  public void merge(final UpdatePrimitive p) throws QueryException {\n    Err.or(UPDATE, this);\n  }","id":46254,"modified_method":"@SuppressWarnings(\"unused\")\n  @Override\n  public void merge(final UpdatePrimitive p) throws QueryException {\n    c.add(((NodeCopyPrimitive) p).c.getFirst());\n  }","commit_id":"768937a33475718004a88f1d24ea14ca3ff64357","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n  public void check() throws QueryException {\n    Err.or(UPDATE, this);\n  }","id":46255,"modified_method":"@SuppressWarnings(\"unused\")\n  @Override\n  public void check() throws QueryException {\n  }","commit_id":"768937a33475718004a88f1d24ea14ca3ff64357","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n  public void apply() throws QueryException {\n    if(!(node instanceof DBNode)) return;\n\n    // create db containing insertion nodes\n    // attribute nodes are treated seperately\n    final SeqIter aSeq = new SeqIter();\n    final SeqIter seq = new SeqIter();\n    final Iterator<Iter> it = c.iterator();\n    while(it.hasNext()) {\n      final Iter ni = it.next();\n      // sort nodes into attribute sequence and others\n      Item i = ni.next();\n      while(i != null) {\n        if(Nod.kind(i.type) == Data.ATTR) aSeq.add(i);\n        else seq.add(i);\n        i = ni.next();\n      }\n    }\n    \n    final DBNode n = (DBNode) node;\n    final Data d = n.data;\n    MemData m = null;\n    // source nodes may be empty, thus insert has no effect at all\n    if(seq.size() == 0 && aSeq.size() == 0) return;\n    \n    // insert non-attribute nodes\n    if(seq.size() > 0) {\n      m = buildDB(seq, ((DBNode) node).data);\n      d.insertSeq(loc, n.pre, m);\n    }\n    \n    // insert attributes\n    if(aSeq.size() > 0) {\n      m = buildDB(aSeq, ((DBNode) node).data);\n      UpdateFunctions.insertAttributes(n.pre + d.attSize(n.pre, d.kind(n.pre)), \n          n.pre, d, m);\n    }\n  }","id":46256,"modified_method":"@Override\n  public void apply() throws QueryException {\n    if(!(node instanceof DBNode)) return;\n\n    final SeqIter seq = new SeqIter();\n    final Iterator<Iter> it = c.iterator();\n    while(it.hasNext()) {\n      final Iter ni = it.next();\n      Item i = ni.next();\n      while(i != null) {\n        seq.add(i);\n        i = ni.next();\n      }\n    }\n    \n    final DBNode n = (DBNode) node;\n    final Data d = n.data;\n    // source nodes may be empty, thus insert has no effect at all\n    if(seq.size() == 0) return;\n    d.insertSeq(loc, n.pre, buildDB(seq, ((DBNode) node).data));\n  }","commit_id":"768937a33475718004a88f1d24ea14ca3ff64357","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n     * Completes the parsed relations with its members.\n     *\n     * @throws IllegalDataException thrown if a data integrity problem is detected, i.e. if a\n     * relation member refers to a local primitive which wasn't available in the data\n     *\n     */\n    private void processRelationsAfterParsing() throws IllegalDataException {\n        for (Long externalRelationId : relations.keySet()) {\n            Relation relation = (Relation) externalIdMap.get(\n                    new SimplePrimitiveId(externalRelationId, OsmPrimitiveType.RELATION)\n            );\n            List<RelationMember> relationMembers = new ArrayList<RelationMember>();\n            for (RelationMemberData rm : relations.get(externalRelationId)) {\n                OsmPrimitive primitive = null;\n\n                // lookup the member from the map of already created primitives\n                primitive = externalIdMap.get(new SimplePrimitiveId(rm.id, rm.type));\n\n                if (primitive == null) {\n                    if (rm.id <= 0)\n                        // relation member refers to a primitive with a negative id which was not\n                        // found in the data. This is always a data integrity problem and we abort\n                        // with an exception\n                        //\n                        throw new IllegalDataException(\n                                tr(\"Relation with external id ''{0}'' refers to a missing primitive with external id ''{1}''.\",\n                                        externalRelationId,\n                                        rm.id));\n\n                    // member refers to OSM primitive which was not present in the parsed data\n                    // -> create a new incomplete primitive and add it to the dataset\n                    //\n                    primitive = ds.getPrimitiveById(rm.id, rm.type);\n                    if (primitive == null) {\n                        switch (rm.type) {\n                        case NODE:\n                            primitive = new Node(rm.id); break;\n                        case WAY:\n                            primitive = new Way(rm.id); break;\n                        case RELATION:\n                            primitive = new Relation(rm.id); break;\n                        default: throw new AssertionError(); // can't happen\n                        }\n\n                        ds.addPrimitive(primitive);\n                        externalIdMap.put(new SimplePrimitiveId(rm.id, rm.type), primitive);\n                    }\n                }\n                if (primitive.isDeleted()) {\n                    logger.warning(tr(\"Deleted member {0} is used by relation {1}\", primitive.getId(), relation.getId()));\n                } else {\n                    relationMembers.add(new RelationMember(rm.role, primitive));\n                }\n            }\n            relation.setMembers(relationMembers);\n            ds.addPrimitive(relation);\n        }\n    }","id":46257,"modified_method":"/**\n     * Completes the parsed relations with its members.\n     *\n     * @throws IllegalDataException thrown if a data integrity problem is detected, i.e. if a\n     * relation member refers to a local primitive which wasn't available in the data\n     *\n     */\n    private void processRelationsAfterParsing() throws IllegalDataException {\n\n        // First add all relations to make sure that when relation reference other relation, the referenced will be already in dataset\n        for (Long externalRelationId : relations.keySet()) {\n            Relation relation = (Relation) externalIdMap.get(\n                    new SimplePrimitiveId(externalRelationId, OsmPrimitiveType.RELATION)\n            );\n            ds.addPrimitive(relation);\n        }\n\n        for (Long externalRelationId : relations.keySet()) {\n            Relation relation = (Relation) externalIdMap.get(\n                    new SimplePrimitiveId(externalRelationId, OsmPrimitiveType.RELATION)\n            );\n            List<RelationMember> relationMembers = new ArrayList<RelationMember>();\n            for (RelationMemberData rm : relations.get(externalRelationId)) {\n                OsmPrimitive primitive = null;\n\n                // lookup the member from the map of already created primitives\n                primitive = externalIdMap.get(new SimplePrimitiveId(rm.id, rm.type));\n\n                if (primitive == null) {\n                    if (rm.id <= 0)\n                        // relation member refers to a primitive with a negative id which was not\n                        // found in the data. This is always a data integrity problem and we abort\n                        // with an exception\n                        //\n                        throw new IllegalDataException(\n                                tr(\"Relation with external id ''{0}'' refers to a missing primitive with external id ''{1}''.\",\n                                        externalRelationId,\n                                        rm.id));\n\n                    // member refers to OSM primitive which was not present in the parsed data\n                    // -> create a new incomplete primitive and add it to the dataset\n                    //\n                    primitive = ds.getPrimitiveById(rm.id, rm.type);\n                    if (primitive == null) {\n                        switch (rm.type) {\n                        case NODE:\n                            primitive = new Node(rm.id); break;\n                        case WAY:\n                            primitive = new Way(rm.id); break;\n                        case RELATION:\n                            primitive = new Relation(rm.id); break;\n                        default: throw new AssertionError(); // can't happen\n                        }\n\n                        ds.addPrimitive(primitive);\n                        externalIdMap.put(new SimplePrimitiveId(rm.id, rm.type), primitive);\n                    }\n                }\n                if (primitive.isDeleted()) {\n                    logger.warning(tr(\"Deleted member {0} is used by relation {1}\", primitive.getId(), relation.getId()));\n                } else {\n                    relationMembers.add(new RelationMember(rm.role, primitive));\n                }\n            }\n            relation.setMembers(relationMembers);\n        }\n    }","commit_id":"0d77fad667c2d759b9f1c299473a0f40a0493eba","url":"https://github.com/openstreetmap/josm"},{"original_method":"@Override public DataSet clone() {\n        DataSet ds = new DataSet();\n        HashMap<OsmPrimitive, OsmPrimitive> primitivesMap = new HashMap<OsmPrimitive, OsmPrimitive>();\n        for (Node n : nodes) {\n            Node newNode = new Node(n);\n            primitivesMap.put(n, newNode);\n            ds.addPrimitive(newNode);\n        }\n        for (Way w : ways) {\n            Way newWay = new Way(w);\n            primitivesMap.put(w, newWay);\n            List<Node> newNodes = new ArrayList<Node>();\n            for (Node n: w.getNodes()) {\n                newNodes.add((Node)primitivesMap.get(n));\n            }\n            newWay.setNodes(newNodes);\n            ds.addPrimitive(newWay);\n        }\n        // Because relations can have other relations as members we first clone all relations\n        // and then get the cloned members\n        for (Relation r : relations) {\n            Relation newRelation = new Relation(r);\n            primitivesMap.put(r, newRelation);\n        }\n        for (Relation r : relations) {\n            Relation newRelation = (Relation)primitivesMap.get(r);\n            List<RelationMember> newMembers = new ArrayList<RelationMember>();\n            for (RelationMember rm: r.getMembers()) {\n                newMembers.add(new RelationMember(rm.getRole(), primitivesMap.get(rm.getMember())));\n            }\n            newRelation.setMembers(newMembers);\n            ds.addPrimitive(newRelation);\n        }\n        for (DataSource source : dataSources) {\n            ds.dataSources.add(new DataSource(source.bounds, source.origin));\n        }\n        ds.version = version;\n        return ds;\n    }","id":46258,"modified_method":"@Override public DataSet clone() {\n        DataSet ds = new DataSet();\n        HashMap<OsmPrimitive, OsmPrimitive> primitivesMap = new HashMap<OsmPrimitive, OsmPrimitive>();\n        for (Node n : nodes) {\n            Node newNode = new Node(n);\n            primitivesMap.put(n, newNode);\n            ds.addPrimitive(newNode);\n        }\n        for (Way w : ways) {\n            Way newWay = new Way(w);\n            primitivesMap.put(w, newWay);\n            List<Node> newNodes = new ArrayList<Node>();\n            for (Node n: w.getNodes()) {\n                newNodes.add((Node)primitivesMap.get(n));\n            }\n            newWay.setNodes(newNodes);\n            ds.addPrimitive(newWay);\n        }\n        // Because relations can have other relations as members we first clone all relations\n        // and then get the cloned members\n        for (Relation r : relations) {\n            Relation newRelation = new Relation(r, r.isNew());\n            newRelation.setMembers(null);\n            primitivesMap.put(r, newRelation);\n            ds.addPrimitive(newRelation);\n        }\n        for (Relation r : relations) {\n            Relation newRelation = (Relation)primitivesMap.get(r);\n            List<RelationMember> newMembers = new ArrayList<RelationMember>();\n            for (RelationMember rm: r.getMembers()) {\n                newMembers.add(new RelationMember(rm.getRole(), primitivesMap.get(rm.getMember())));\n            }\n            newRelation.setMembers(newMembers);\n        }\n        for (DataSource source : dataSources) {\n            ds.dataSources.add(new DataSource(source.bounds, source.origin));\n        }\n        ds.version = version;\n        return ds;\n    }","commit_id":"6678af33497ad0ff0900747faf7483a8a964f09a","url":"https://github.com/openstreetmap/josm"},{"original_method":"ServiceBuilder<ArquillianConfig> buildService(ServiceTarget serviceTarget, ServiceController<?> depController) {\n        ServiceBuilder<ArquillianConfig> builder = serviceTarget.addService(getServiceName(), this);\n        builder.addDependency(depController.getName());\n        return builder;\n    }","id":46259,"modified_method":"ServiceBuilder<ArquillianConfig> buildService(ServiceTarget serviceTarget, ServiceController<?> depController) {\n        ServiceBuilder<ArquillianConfig> builder = serviceTarget.addService(getServiceName(), this);\n        builder.addDependency(DependencyType.OPTIONAL, Services.SYSTEM_CONTEXT, BundleContext.class, injectedBundleContext);\n        builder.addDependency(depController.getName());\n        return builder;\n    }","commit_id":"c212bf24dfff2b13444672b63ee1b10aa820e54c","url":"https://github.com/wildfly/wildfly"},{"original_method":"public synchronized void start(StartContext context) throws StartException {\n        log.debugf(\"Starting Arquillian Test Runner\");\n\n        final MBeanServer mbeanServer = injectedMBeanServer.getValue();\n        serviceContainer = context.getController().getServiceContainer();\n        serviceTarget = context.getChildTarget();\n        try {\n            jmxTestRunner = new ExtendedJMXTestRunner();\n            jmxTestRunner.registerMBean(mbeanServer);\n        } catch (Throwable t) {\n            throw new StartException(\"Failed to start Arquillian Test Runner\", t);\n        }\n\n        final ArquillianService arqService = this;\n        listener = new AbstractServiceListener<Object>() {\n\n            @Override\n            public void transition(ServiceController<? extends Object> serviceController, ServiceController.Transition transition) {\n                switch (transition.getAfter()) {\n                    case UP: {\n                        ServiceName serviceName = serviceController.getName();\n                        String simpleName = serviceName.getSimpleName();\n                        if (JBOSS_DEPLOYMENT.isParentOf(serviceName) && simpleName.equals(Phase.INSTALL.toString())) {\n                            ServiceName parentName = serviceName.getParent();\n                            ServiceController<?> parentController = serviceContainer.getService(parentName);\n                            DeploymentUnit depUnit = (DeploymentUnit) parentController.getValue();\n                            ArquillianConfig arqConfig = ArquillianConfigBuilder.processDeployment(arqService, depUnit);\n                            if (arqConfig != null) {\n                                log.infof(\"Arquillian deployment detected: %s\", arqConfig);\n                                ServiceBuilder<ArquillianConfig> builder = arqConfig.buildService(serviceTarget, serviceController);\n                                FrameworkActivationProcessor.processDependencies(builder, arqConfig);\n                                builder.install();\n                            }\n                        }\n                    }\n                    case STARTING: {\n                        ServiceName serviceName = serviceController.getName();\n                        String simpleName = serviceName.getSimpleName();\n                        if(JBOSS_DEPLOYMENT.isParentOf(serviceName) && simpleName.equals(Phase.DEPENDENCIES.toString())) {\n                            ServiceName parentName = serviceName.getParent();\n                            ServiceController<?> parentController = serviceContainer.getService(parentName);\n                            DeploymentUnit depUnit = (DeploymentUnit) parentController.getValue();\n                            ArquillianConfigBuilder.handleParseAnnotations(depUnit);\n                            FrameworkActivationProcessor.handleParseAnnotations(depUnit);\n                        }\n                    }\n                }\n            }\n        };\n        serviceContainer.addListener(listener);\n    }","id":46260,"modified_method":"public synchronized void start(StartContext context) throws StartException {\n        log.debugf(\"Starting Arquillian Test Runner\");\n\n        final MBeanServer mbeanServer = injectedMBeanServer.getValue();\n        serviceContainer = context.getController().getServiceContainer();\n        serviceTarget = context.getChildTarget();\n        try {\n            jmxTestRunner = new ExtendedJMXTestRunner();\n            jmxTestRunner.registerMBean(mbeanServer);\n        } catch (Throwable t) {\n            throw new StartException(\"Failed to start Arquillian Test Runner\", t);\n        }\n\n        final ArquillianService arqService = this;\n        listener = new AbstractServiceListener<Object>() {\n\n            @Override\n            public void transition(ServiceController<? extends Object> serviceController, ServiceController.Transition transition) {\n                switch (transition.getAfter()) {\n                    case UP: {\n                        ServiceName serviceName = serviceController.getName();\n                        String simpleName = serviceName.getSimpleName();\n                        if (JBOSS_DEPLOYMENT.isParentOf(serviceName) && simpleName.equals(Phase.INSTALL.toString())) {\n                            ServiceName parentName = serviceName.getParent();\n                            ServiceController<?> parentController = serviceContainer.getService(parentName);\n                            DeploymentUnit depUnit = (DeploymentUnit) parentController.getValue();\n                            ArquillianConfig arqConfig = ArquillianConfigBuilder.processDeployment(arqService, depUnit);\n                            if (arqConfig != null) {\n                                log.infof(\"Arquillian deployment detected: %s\", arqConfig);\n                                ServiceBuilder<ArquillianConfig> builder = arqConfig.buildService(serviceTarget, serviceController);\n                                builder.install();\n                            }\n                        }\n                    }\n                    case STARTING: {\n                        ServiceName serviceName = serviceController.getName();\n                        String simpleName = serviceName.getSimpleName();\n                        if(JBOSS_DEPLOYMENT.isParentOf(serviceName) && simpleName.equals(Phase.DEPENDENCIES.toString())) {\n                            ServiceName parentName = serviceName.getParent();\n                            ServiceController<?> parentController = serviceContainer.getService(parentName);\n                            DeploymentUnit depUnit = (DeploymentUnit) parentController.getValue();\n                            ArquillianConfigBuilder.handleParseAnnotations(depUnit);\n                        }\n                    }\n                }\n            }\n        };\n        serviceContainer.addListener(listener);\n    }","commit_id":"c212bf24dfff2b13444672b63ee1b10aa820e54c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n\n        // Always make the system context & the environment available\n        phaseContext.addDeploymentDependency(Services.SYSTEM_CONTEXT, OSGiConstants.SYSTEM_CONTEXT_KEY);\n        phaseContext.addDeploymentDependency(Services.ENVIRONMENT, OSGiConstants.ENVIRONMENT_KEY);\n\n        // Not a bundle deployment - do nothing\n        DeploymentUnit depUnit = phaseContext.getDeploymentUnit();\n        if (depUnit.hasAttachment(OSGiConstants.DEPLOYMENT_KEY)) {\n\n            // Install the {@link FrameworkActivationService} if not done so already\n            if (FrameworkActivationService.activated() == false) {\n                ServiceVerificationHandler verificationHandler = depUnit.getAttachment(Attachments.SERVICE_VERIFICATION_HANDLER);\n                FrameworkActivationService.addService(deploymentTracker.getServiceTarget(), verificationHandler);\n            }\n\n            // Setup a dependency on the the next phase. Persistent bundles have a dependency on the bootstrap bundles\n            ServiceName phaseDependency = deploymentTracker.isComplete() ? FRAMEWORK_ACTIVE : BOOTSTRAP_BUNDLES_COMPLETE;\n            phaseContext.addDeploymentDependency(phaseDependency, AttachmentKey.create(Object.class));\n\n            // Make these services available for a bundle deployment only\n            phaseContext.addDeploymentDependency(Services.BUNDLE_MANAGER, OSGiConstants.BUNDLE_MANAGER_KEY);\n            phaseContext.addDeploymentDependency(Services.RESOLVER, OSGiConstants.RESOLVER_KEY);\n        }\n    }","id":46261,"modified_method":"@Override\n    public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n\n        // Always make the system context & the environment available\n        // [TODO] [AS7-5215] Deployments unecessarily trigger Framework create service\n        phaseContext.addDeploymentDependency(Services.SYSTEM_CONTEXT, OSGiConstants.SYSTEM_CONTEXT_KEY);\n        phaseContext.addDeploymentDependency(Services.ENVIRONMENT, OSGiConstants.ENVIRONMENT_KEY);\n\n        // Check whether this is an OSGi deployment or whether it wants to have an OSGi type injected\n        DeploymentUnit depUnit = phaseContext.getDeploymentUnit();\n        if (!depUnit.hasAttachment(OSGiConstants.DEPLOYMENT_KEY) && !hasValidInjectionPoint(depUnit))\n            return;\n\n        // Install the {@link FrameworkActivationService} if not done so already\n        if (FrameworkActivationService.activated() == false) {\n            ServiceVerificationHandler verificationHandler = depUnit.getAttachment(Attachments.SERVICE_VERIFICATION_HANDLER);\n            FrameworkActivationService.addService(deploymentTracker.getServiceTarget(), verificationHandler);\n        }\n\n        // Setup a dependency on the the next phase. Persistent bundles have a dependency on the bootstrap bundles\n        ServiceName phaseDependency = deploymentTracker.isComplete() ? FRAMEWORK_ACTIVE : BOOTSTRAP_BUNDLES_COMPLETE;\n        phaseContext.addDeploymentDependency(phaseDependency, AttachmentKey.create(Object.class));\n\n        // Make these services available for a bundle deployment only\n        phaseContext.addDeploymentDependency(Services.BUNDLE_MANAGER, OSGiConstants.BUNDLE_MANAGER_KEY);\n        phaseContext.addDeploymentDependency(Services.RESOLVER, OSGiConstants.RESOLVER_KEY);\n    }","commit_id":"c212bf24dfff2b13444672b63ee1b10aa820e54c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void start(StartContext context) throws StartException {\n        ServiceTarget serviceTarget = context.getChildTarget();\n        BootstrapBundlesIntegration.addService(serviceTarget);\n        PersistentBundlesIntegration.addService(serviceTarget);\n        ServiceContainer serviceContainer = context.getController().getServiceContainer();\n        serviceContainer.getRequiredService(Services.FRAMEWORK_ACTIVE).setMode(Mode.ACTIVE);\n    }","id":46262,"modified_method":"@Override\n    public void start(StartContext context) throws StartException {\n        ServiceTarget serviceTarget = context.getChildTarget();\n\n        // Install the bootstrap bundle service\n        new BootstrapBundlesIntegration(){\n            public void stop(StopContext context) {\n                frameworkActivated.set(false);\n            }\n        }.install(serviceTarget);\n\n        // Install the persistent bundle service\n        new PersistentBundlesIntegration().install(serviceTarget);\n\n        // Explicitly activate the Framework\n        ServiceContainer serviceContainer = context.getController().getServiceContainer();\n        serviceContainer.getRequiredService(Services.FRAMEWORK_ACTIVE).setMode(Mode.ACTIVE);\n    }","commit_id":"c212bf24dfff2b13444672b63ee1b10aa820e54c","url":"https://github.com/wildfly/wildfly"},{"original_method":"private PersistentBundlesIntegration() {\n        super(PERSISTENT_BUNDLES);\n    }","id":46263,"modified_method":"PersistentBundlesIntegration() {\n        super(PERSISTENT_BUNDLES);\n    }","commit_id":"c212bf24dfff2b13444672b63ee1b10aa820e54c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Deployment\n    public static JavaArchive createdeployment() {\n        final JavaArchive archive = ShrinkWrap.create(JavaArchive.class, \"example-bundlecontext\");\n        archive.setManifest(new Asset() {\n            @Override\n            public InputStream openStream() {\n                ManifestBuilder builder = ManifestBuilder.newInstance();\n                builder.addManifestHeader(\"Dependencies\", \"org.osgi.core\");\n                return builder.openStream();\n            }\n        });\n        return archive;\n    }","id":46264,"modified_method":"@Deployment\n    public static JavaArchive createdeployment() {\n        return ShrinkWrap.create(JavaArchive.class, \"example-bundlecontext\");\n    }","commit_id":"c212bf24dfff2b13444672b63ee1b10aa820e54c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void undeploy(final DeploymentUnit context) {\n        // Unregister the log context\n        final Module module = context.getAttachment(Attachments.MODULE);\n        final ClassLoader current = SecurityActions.getThreadContextClassLoader();\n        try {\n            SecurityActions.setThreadContextClassLoader(module.getClassLoader());\n            LoggingExtension.CONTEXT_SELECTOR.unregisterLogContext(module.getClassLoader(), LogContext.getLogContext());\n        } finally {\n            SecurityActions.setThreadContextClassLoader(current);\n        }\n    }","id":46265,"modified_method":"@Override\n    public void undeploy(final DeploymentUnit context) {\n        // OSGi bundles deployments may not have a module attached\n        if (context.hasAttachment(Attachments.MODULE)) {\n            final Module module = context.getAttachment(Attachments.MODULE);\n            final ClassLoader current = SecurityActions.getThreadContextClassLoader();\n            try {\n                // Unregister the log context\n                SecurityActions.setThreadContextClassLoader(module.getClassLoader());\n                LoggingExtension.CONTEXT_SELECTOR.unregisterLogContext(module.getClassLoader(), LogContext.getLogContext());\n                context.removeAttachment(LOG_CONTEXT_KEY);\n            } finally {\n                SecurityActions.setThreadContextClassLoader(current);\n            }\n        }\n    }","commit_id":"3f7bc1f6a9dc00694f008237668d90f956c08082","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Finds the configuration file to be used and returns the first one found.\n     * <p/>\n     * Preference is for {@literal logging.properties} or {@literal jboss-logging.properties}.\n     *\n     * @param deploymentRoots the deployment roots to search.\n     *\n     * @return the configuration file if found, otherwise {@code null}.\n     *\n     * @throws DeploymentUnitProcessingException\n     *          if an error occurs.\n     */\n    private VirtualFile findConfigFile(final List<ResourceRoot> deploymentRoots) throws DeploymentUnitProcessingException {\n        VirtualFile result = null;\n        for (ResourceRoot resourceRoot : deploymentRoots) {\n            try {\n                final List<VirtualFile> configFiles = resourceRoot.getRoot().getChildrenRecursively(ConfigFilter.INSTANCE);\n                for (final VirtualFile file : configFiles) {\n                    final String fileName = file.getName();\n                    if (DEFAULT_PROPERTIES.equals(fileName) || JBOSS_PROPERTIES.equals(fileName)) {\n                        if (result != null) {\n                            LoggingLogger.ROOT_LOGGER.debugf(\"The previously found configuration file '%s' is being ignored in favour of '%s'\", result, file);\n                        }\n                        return file;\n                    } else if (LOG4J_PROPERTIES.equals(fileName) || LOG4J_XML.equals(fileName) || JBOSS_LOG4J_XML.equals(fileName)) {\n                        result = file;\n                    }\n                }\n            } catch (IOException e) {\n                throw LoggingMessages.MESSAGES.errorProcessingLoggingConfiguration(e);\n            }\n            // TODO (jrp) may be best to check all resource roots\n            if (result != null) {\n                break;\n            }\n        }\n        return result;\n    }","id":46266,"modified_method":"/**\n     * Finds the configuration file to be used and returns the first one found.\n     * <p/>\n     * Preference is for {@literal logging.properties} or {@literal jboss-logging.properties}.\n     *\n     * @param resourceRoot the resource to check.\n     *\n     * @return the configuration file if found, otherwise {@code null}.\n     *\n     * @throws DeploymentUnitProcessingException\n     *          if an error occurs.\n     */\n    private VirtualFile findConfigFile(ResourceRoot resourceRoot) throws DeploymentUnitProcessingException {\n        VirtualFile result = null;\n        try {\n            final List<VirtualFile> configFiles = resourceRoot.getRoot().getChildrenRecursively(ConfigFilter.INSTANCE);\n            for (final VirtualFile file : configFiles) {\n                final String fileName = file.getName();\n                if (DEFAULT_PROPERTIES.equals(fileName) || JBOSS_PROPERTIES.equals(fileName)) {\n                    if (result != null) {\n                        LoggingLogger.ROOT_LOGGER.debugf(\"The previously found configuration file '%s' is being ignored in favour of '%s'\", result, file);\n                    }\n                    return file;\n                } else if (LOG4J_PROPERTIES.equals(fileName) || LOG4J_XML.equals(fileName) || JBOSS_LOG4J_XML.equals(fileName)) {\n                    result = file;\n                }\n            }\n        } catch (IOException e) {\n            throw LoggingMessages.MESSAGES.errorProcessingLoggingConfiguration(e);\n        }\n        return result;\n    }","commit_id":"3f7bc1f6a9dc00694f008237668d90f956c08082","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        if (Boolean.valueOf(SecurityActions.getSystemProperty(PER_DEPLOYMENT_LOGGING, Boolean.toString(true)))) {\n            LoggingLogger.ROOT_LOGGER.trace(\"Scanning for logging configuration files.\");\n            final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n            if (deploymentUnit.hasAttachment(Attachments.RESOURCE_ROOTS)) {\n                final List<ResourceRoot> deploymentRoots = deploymentUnit.getAttachment(Attachments.RESOURCE_ROOTS);\n                final Module module = deploymentUnit.getAttachment(Attachments.MODULE);\n                final VirtualFile configFile = findConfigFile(deploymentRoots);\n                if (configFile != null) {\n                    InputStream configStream = null;\n                    try {\n                        LoggingLogger.ROOT_LOGGER.debugf(\"Found logging configuration file: %s\", configFile);\n                        // Create the log context and load into the selector for the module.\n                        final LogContext logContext = LogContext.create();\n                        LoggingExtension.CONTEXT_SELECTOR.registerLogContext(module.getClassLoader(), logContext);\n\n                        // Get the filname and open the stream\n                        final String fileName = configFile.getName();\n                        configStream = configFile.openStream();\n\n                        // Check the type of the configuration file\n                        if (LOG4J_PROPERTIES.equals(fileName) || LOG4J_XML.equals(fileName) || JBOSS_LOG4J_XML.equals(fileName)) {\n                            final ClassLoader current = SecurityActions.getThreadContextClassLoader();\n                            try {\n                                SecurityActions.setThreadContextClassLoader(module.getClassLoader());\n                                if (LOG4J_XML.equals(fileName) || JBOSS_LOG4J_XML.equals(fileName)) {\n                                    new DOMConfigurator().doConfigure(configStream, org.apache.log4j.JBossLogManagerFacade.getLoggerRepository(logContext));\n                                } else {\n                                    final Properties properties = new Properties();\n                                    properties.load(new InputStreamReader(configStream, \"utf-8\"));\n                                    new org.apache.log4j.PropertyConfigurator().doConfigure(properties, org.apache.log4j.JBossLogManagerFacade.getLoggerRepository(logContext));\n                                }\n                            } finally {\n                                SecurityActions.setThreadContextClassLoader(current);\n                            }\n                        } else {\n                            // Load non-log4j types\n                            new PropertyConfigurator(logContext).configure(configStream);\n                        }\n                    } catch (Exception e) {\n                        throw LoggingMessages.MESSAGES.failedToConfigureLogging(e, configFile.getName());\n                    } finally {\n                        safeClose(configStream);\n                    }\n                }\n            }\n        }\n    }","id":46267,"modified_method":"@Override\n    public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n\n        if (deploymentUnit.hasAttachment(Attachments.MODULE) && deploymentUnit.hasAttachment(Attachments.DEPLOYMENT_ROOT) &&\n                Boolean.valueOf(SecurityActions.getSystemProperty(PER_DEPLOYMENT_LOGGING, Boolean.toString(true)))) {\n            // If the log context is already attached, just skip processing\n            if (deploymentUnit.hasAttachment(LOG_CONTEXT_KEY)) return;\n\n            // Get the module\n            final Module module = deploymentUnit.getAttachment(Attachments.MODULE);\n            final ResourceRoot root = deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT);\n\n            // If this is a subdeployment and a log configuration was found on the parent, use that log context\n            if (SubDeploymentMarker.isSubDeployment(root)) {\n                final LogContext logContext = findParentLogContext(deploymentUnit);\n                if (logContext != null) {\n                    LoggingExtension.CONTEXT_SELECTOR.registerLogContext(module.getClassLoader(), logContext);\n                    return;\n                }\n            }\n\n            LoggingLogger.ROOT_LOGGER.trace(\"Scanning for logging configuration files.\");\n            final VirtualFile configFile = findConfigFile(root);\n            if (configFile != null) {\n                InputStream configStream = null;\n                try {\n                    LoggingLogger.ROOT_LOGGER.debugf(\"Found logging configuration file: %s\", configFile);\n                    // Create the log context and load into the selector for the module.\n                    final LogContext logContext = LogContext.create();\n                    LoggingExtension.CONTEXT_SELECTOR.registerLogContext(module.getClassLoader(), logContext);\n                    deploymentUnit.putAttachment(LOG_CONTEXT_KEY, logContext);\n\n                    // Get the filname and open the stream\n                    final String fileName = configFile.getName();\n                    configStream = configFile.openStream();\n\n                    // Check the type of the configuration file\n                    if (LOG4J_PROPERTIES.equals(fileName) || LOG4J_XML.equals(fileName) || JBOSS_LOG4J_XML.equals(fileName)) {\n                        final ClassLoader current = SecurityActions.getThreadContextClassLoader();\n                        try {\n                            SecurityActions.setThreadContextClassLoader(module.getClassLoader());\n                            if (LOG4J_XML.equals(fileName) || JBOSS_LOG4J_XML.equals(fileName)) {\n                                new DOMConfigurator().doConfigure(configStream, org.apache.log4j.JBossLogManagerFacade.getLoggerRepository(logContext));\n                            } else {\n                                final Properties properties = new Properties();\n                                properties.load(new InputStreamReader(configStream, \"utf-8\"));\n                                new org.apache.log4j.PropertyConfigurator().doConfigure(properties, org.apache.log4j.JBossLogManagerFacade.getLoggerRepository(logContext));\n                            }\n                        } finally {\n                            SecurityActions.setThreadContextClassLoader(current);\n                        }\n                    } else {\n                        // Load non-log4j types\n                        new PropertyConfigurator(logContext).configure(configStream);\n                    }\n                } catch (Exception e) {\n                    throw LoggingMessages.MESSAGES.failedToConfigureLogging(e, configFile.getName());\n                } finally {\n                    safeClose(configStream);\n                }\n            }\n        }\n    }","commit_id":"3f7bc1f6a9dc00694f008237668d90f956c08082","url":"https://github.com/wildfly/wildfly"},{"original_method":"static ServiceController<XBundle> addService(ServiceTarget serviceTarget, DeploymentUnit depUnit, XBundle bundle) {\n            ServiceName serviceName = depUnit.getServiceName().append(\"Activate\");\n            BundleActivateService service = new BundleActivateService(depUnit, bundle);\n            ServiceBuilder<XBundle> builder = serviceTarget.addService(serviceName, service);\n            // Add a dependency on the BundleActivator component\n            OSGiMetaData metadata = depUnit.getAttachment(OSGiConstants.OSGI_METADATA_KEY);\n            if (metadata != null && metadata.getBundleActivator() != null) {\n                String activatorClass = metadata.getBundleActivator();\n                EEModuleDescription moduleDescription = depUnit.getAttachment(EE_MODULE_DESCRIPTION);\n                if (moduleDescription != null) {\n                    for (ComponentDescription componentDescription : moduleDescription.getComponentDescriptions()) {\n                        if (activatorClass.equals(componentDescription.getComponentClassName())) {\n                            ServiceName startServiceName = componentDescription.getStartServiceName();\n                            builder.addDependency(startServiceName, Component.class, service.injectedComponent);\n                        }\n                    }\n                }\n            }\n            return builder.install();\n        }","id":46268,"modified_method":"static ServiceController<XBundle> addService(ServiceTarget serviceTarget, DeploymentUnit depUnit, XBundle bundle) {\n            ServiceName serviceName = depUnit.getServiceName().append(\"Activate\");\n            BundleActivateService service = new BundleActivateService(depUnit, bundle);\n            ServiceBuilder<XBundle> builder = serviceTarget.addService(serviceName, service);\n            // Add a dependency on the BundleActivator component\n            OSGiMetaData metadata = depUnit.getAttachment(OSGiConstants.OSGI_METADATA_KEY);\n            if (metadata != null && metadata.getBundleActivator() != null) {\n                String activatorClass = metadata.getBundleActivator();\n                EEModuleDescription moduleDescription = depUnit.getAttachment(EE_MODULE_DESCRIPTION);\n                if (moduleDescription != null) {\n                    for (ComponentDescription componentDescription : moduleDescription.getComponentDescriptions()) {\n                        if (activatorClass.equals(componentDescription.getComponentClassName())) {\n                            ServiceName startServiceName = componentDescription.getStartServiceName();\n                            builder.addDependency(startServiceName, Component.class, service.injectedComponent);\n                        }\n                    }\n                }\n            }\n            // Add other named dependencies\n            builder.addDependencies(depUnit.getAttachmentList(Attachments.BUNDLE_ACTIVE_DEPENDENCIES));\n            return builder.install();\n        }","commit_id":"88725f2e093af6296c7cd8ad3d4103b1cc9f1dd8","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName)\n            throws DeploymentUnitProcessingException {\n        final VirtualFile deploymentRoot = deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot();\n        final Module module = deploymentUnit.getAttachment(Attachments.MODULE);\n        if (module == null) {\n            throw new DeploymentUnitProcessingException(MESSAGES.failedToResolveModule(deploymentUnit));\n        }\n        final JBossWebMetaData metaData = warMetaData.getMergedJBossWebMetaData();\n        final List<SetupAction> setupActions = deploymentUnit.getAttachmentList(org.jboss.as.ee.component.Attachments.WEB_SETUP_ACTIONS);\n        metaData.resolveRunAs();\n\n        ScisMetaData scisMetaData = deploymentUnit.getAttachment(ScisMetaData.ATTACHMENT_KEY);\n\n        final Set<ServiceName> dependentComponents = new HashSet<>();\n        // see AS7-2077\n        // basically we want to ignore components that have failed for whatever reason\n        // if they are important they will be picked up when the web deployment actually starts\n        final List<ServiceName> components = deploymentUnit.getAttachmentList(WebComponentDescription.WEB_COMPONENTS);\n        final Set<ServiceName> failed = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.FAILED_COMPONENTS);\n        for (final ServiceName component : components) {\n            if (!failed.contains(component)) {\n                dependentComponents.add(component);\n            }\n        }\n\n        ComponentRegistry componentRegistry = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.COMPONENT_REGISTRY);\n        if (componentRegistry == null) {\n            //we do this to avoid lots of other null checks\n            //this will only happen if the EE subsystem is not installed\n            componentRegistry = new ComponentRegistry(null);\n        }\n\n        final WebInjectionContainer injectionContainer = new WebInjectionContainer(module.getClassLoader(), componentRegistry);\n\n        String securityContextId = deploymentUnit.getName();\n        if (deploymentUnit.getParent() != null) {\n            securityContextId = deploymentUnit.getParent().getName() + \"!\" + securityContextId;\n        }\n\n        final String pathName = pathNameOfDeployment(deploymentUnit, metaData);\n\n\n        String metaDataSecurityDomain = metaData.getSecurityDomain();\n        if (metaDataSecurityDomain == null) {\n            metaDataSecurityDomain = getJBossAppSecurityDomain(deploymentUnit);\n        }\n        if (metaDataSecurityDomain != null) {\n            metaDataSecurityDomain = metaDataSecurityDomain.trim();\n        }\n\n        String securityDomain = metaDataSecurityDomain == null ? SecurityConstants.DEFAULT_APPLICATION_POLICY : SecurityUtil\n                .unprefixSecurityDomain(metaDataSecurityDomain);\n\n        final ServiceName deploymentServiceName = UndertowService.deploymentServiceName(hostName,pathName);\n\n        final Set<ServiceName> additionalDependencies = new HashSet<>();\n        for(final SetupAction setupAction : setupActions) {\n            Set<ServiceName> dependencies = setupAction.dependencies();\n            if(dependencies != null) {\n                additionalDependencies.addAll(dependencies);\n            }\n        }\n\n        TldsMetaData tldsMetaData = deploymentUnit.getAttachment(TldsMetaData.ATTACHMENT_KEY);\n        UndertowDeploymentInfoService undertowDeploymentInfoService = UndertowDeploymentInfoService.builder()\n                        .setAttributes(deploymentUnit.getAttachment(ServletContextAttribute.ATTACHMENT_KEY))\n                .setComponentRegistry(componentRegistry)\n                .setContextPath(pathName)\n                .setDeploymentName(deploymentUnit.getName())\n                .setDeploymentRoot(deploymentRoot)\n                .setInjectionContainer(injectionContainer)\n                .setMergedMetaData(warMetaData.getMergedJBossWebMetaData())\n                .setModule(module)\n                .setScisMetaData(scisMetaData)\n                .setSecurityContextId(securityContextId)\n                .setSecurityDomain(securityDomain)\n                .setSharedTlds(tldsMetaData == null ? Collections.<TldMetaData>emptyList() : tldsMetaData.getSharedTlds(deploymentUnit))\n                .setTldsMetaData(tldsMetaData)\n                .setSetupActions(setupActions)\n                .setOverlays(warMetaData.getOverlays())\n                .setExpressionFactoryWrappers(deploymentUnit.getAttachmentList(ExpressionFactoryWrapper.ATTACHMENT_KEY))\n                .createUndertowDeploymentInfoService();\n\n        final ServiceName deploymentInfoServiceName = deploymentServiceName.append(UndertowDeploymentInfoService.SERVICE_NAME);\n        ServiceBuilder<DeploymentInfo> infoBuilder = serviceTarget.addService(deploymentInfoServiceName, undertowDeploymentInfoService)\n                .addDependency(UndertowService.SERVLET_CONTAINER.append(defaultContainer), ServletContainerService.class, undertowDeploymentInfoService.getContainer())\n                .addDependency(ServiceBuilder.DependencyType.OPTIONAL, SessionCookieConfigService.SERVICE_NAME.append(defaultContainer), SessionCookieConfigService.class, undertowDeploymentInfoService.getDefaultSessionCookieConfig())\n                .addDependency(SecurityDomainService.SERVICE_NAME.append(securityDomain), SecurityDomainContext.class, undertowDeploymentInfoService.getSecurityDomainContextValue())\n                .addDependency(UndertowService.UNDERTOW, UndertowService.class, undertowDeploymentInfoService.getUndertowService())\n                .addDependency(ServiceBuilder.DependencyType.OPTIONAL, BufferCacheService.SERVICE_NAME.append(\"default\"), DirectBufferCache.class, undertowDeploymentInfoService.getBufferCacheInjectedValue())\n                .addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES))\n                .addDependencies(additionalDependencies);\n\n        if (metaData.getDistributable() != null) {\n            SessionManagerFactoryBuilderService factoryBuilderService = new SessionManagerFactoryBuilderService();\n            SessionManagerFactoryBuilder factoryBuilder = factoryBuilderService.getValue();\n            if (factoryBuilder != null) {\n                ServiceName factoryName = deploymentServiceName.append(\"session\");\n                factoryBuilder.build(serviceTarget, factoryName, deploymentServiceName, module, metaData)\n                    .setInitialMode(Mode.ON_DEMAND)\n                    .install()\n                ;\n                infoBuilder.addDependency(factoryName, SessionManagerFactory.class, undertowDeploymentInfoService.getSessionManagerFactoryInjector());\n            } else {\n                UndertowLogger.ROOT_LOGGER.clusteringNotSupported();\n            }\n        }\n\n        infoBuilder.install();\n\n        final ServiceName hostServiceName = UndertowService.virtualHostName(defaultServer, hostName);\n        final UndertowDeploymentService service = new UndertowDeploymentService(injectionContainer);\n        final ServiceBuilder<UndertowDeploymentService> builder = serviceTarget.addService(deploymentServiceName, service)\n                .addDependencies(dependentComponents)\n                .addDependency(UndertowService.SERVLET_CONTAINER.append(defaultContainer), ServletContainerService.class, service.getContainer())\n                .addDependency(hostServiceName, Host.class, service.getHost())\n                .addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES))\n                .addDependency(deploymentInfoServiceName, DeploymentInfo.class, service.getDeploymentInfoInjectedValue());\n\n        deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES, deploymentServiceName);\n\n        // OSGi web applications are activated in {@link WebContextActivationProcessor} according to bundle lifecycle changes\n        if (deploymentUnit.hasAttachment(Attachments.OSGI_MANIFEST)) {\n            builder.setInitialMode(Mode.NEVER);\n            UndertowDeploymentService.ContextActivatorImpl activator = new UndertowDeploymentService.ContextActivatorImpl(builder.install());\n            deploymentUnit.putAttachment(ContextActivator.ATTACHMENT_KEY, activator);\n        } else {\n            builder.setInitialMode(Mode.ACTIVE);\n            builder.install();\n        }\n\n        // Process the web related mgmt information\n        final ModelNode node = deploymentUnit.getDeploymentSubsystemModel(UndertowExtension.SUBSYSTEM_NAME);\n        node.get(DeploymentDefinition.CONTEXT_ROOT.getName()).set(\"\".equals(pathName) ? \"/\" : pathName);\n        node.get(DeploymentDefinition.VIRTUAL_HOST.getName()).set(hostName);\n        processManagement(deploymentUnit, metaData);\n    }","id":46269,"modified_method":"private void processDeployment(final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget, String hostName)\n            throws DeploymentUnitProcessingException {\n        final VirtualFile deploymentRoot = deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot();\n        final Module module = deploymentUnit.getAttachment(Attachments.MODULE);\n        if (module == null) {\n            throw new DeploymentUnitProcessingException(MESSAGES.failedToResolveModule(deploymentUnit));\n        }\n        final JBossWebMetaData metaData = warMetaData.getMergedJBossWebMetaData();\n        final List<SetupAction> setupActions = deploymentUnit.getAttachmentList(org.jboss.as.ee.component.Attachments.WEB_SETUP_ACTIONS);\n        metaData.resolveRunAs();\n\n        ScisMetaData scisMetaData = deploymentUnit.getAttachment(ScisMetaData.ATTACHMENT_KEY);\n\n        final Set<ServiceName> dependentComponents = new HashSet<>();\n        // see AS7-2077\n        // basically we want to ignore components that have failed for whatever reason\n        // if they are important they will be picked up when the web deployment actually starts\n        final List<ServiceName> components = deploymentUnit.getAttachmentList(WebComponentDescription.WEB_COMPONENTS);\n        final Set<ServiceName> failed = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.FAILED_COMPONENTS);\n        for (final ServiceName component : components) {\n            if (!failed.contains(component)) {\n                dependentComponents.add(component);\n            }\n        }\n\n        ComponentRegistry componentRegistry = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.COMPONENT_REGISTRY);\n        if (componentRegistry == null) {\n            //we do this to avoid lots of other null checks\n            //this will only happen if the EE subsystem is not installed\n            componentRegistry = new ComponentRegistry(null);\n        }\n\n        final WebInjectionContainer injectionContainer = new WebInjectionContainer(module.getClassLoader(), componentRegistry);\n\n        String securityContextId = deploymentUnit.getName();\n        if (deploymentUnit.getParent() != null) {\n            securityContextId = deploymentUnit.getParent().getName() + \"!\" + securityContextId;\n        }\n\n        final String pathName = pathNameOfDeployment(deploymentUnit, metaData);\n\n\n        String metaDataSecurityDomain = metaData.getSecurityDomain();\n        if (metaDataSecurityDomain == null) {\n            metaDataSecurityDomain = getJBossAppSecurityDomain(deploymentUnit);\n        }\n        if (metaDataSecurityDomain != null) {\n            metaDataSecurityDomain = metaDataSecurityDomain.trim();\n        }\n\n        String securityDomain = metaDataSecurityDomain == null ? SecurityConstants.DEFAULT_APPLICATION_POLICY : SecurityUtil\n                .unprefixSecurityDomain(metaDataSecurityDomain);\n\n        final ServiceName deploymentServiceName = UndertowService.deploymentServiceName(hostName,pathName);\n\n        final Set<ServiceName> additionalDependencies = new HashSet<>();\n        for(final SetupAction setupAction : setupActions) {\n            Set<ServiceName> dependencies = setupAction.dependencies();\n            if(dependencies != null) {\n                additionalDependencies.addAll(dependencies);\n            }\n        }\n\n        TldsMetaData tldsMetaData = deploymentUnit.getAttachment(TldsMetaData.ATTACHMENT_KEY);\n        UndertowDeploymentInfoService undertowDeploymentInfoService = UndertowDeploymentInfoService.builder()\n                        .setAttributes(deploymentUnit.getAttachment(ServletContextAttribute.ATTACHMENT_KEY))\n                .setComponentRegistry(componentRegistry)\n                .setContextPath(pathName)\n                .setDeploymentName(deploymentUnit.getName())\n                .setDeploymentRoot(deploymentRoot)\n                .setInjectionContainer(injectionContainer)\n                .setMergedMetaData(warMetaData.getMergedJBossWebMetaData())\n                .setModule(module)\n                .setScisMetaData(scisMetaData)\n                .setSecurityContextId(securityContextId)\n                .setSecurityDomain(securityDomain)\n                .setSharedTlds(tldsMetaData == null ? Collections.<TldMetaData>emptyList() : tldsMetaData.getSharedTlds(deploymentUnit))\n                .setTldsMetaData(tldsMetaData)\n                .setSetupActions(setupActions)\n                .setOverlays(warMetaData.getOverlays())\n                .setExpressionFactoryWrappers(deploymentUnit.getAttachmentList(ExpressionFactoryWrapper.ATTACHMENT_KEY))\n                .createUndertowDeploymentInfoService();\n\n        final ServiceName deploymentInfoServiceName = deploymentServiceName.append(UndertowDeploymentInfoService.SERVICE_NAME);\n        ServiceBuilder<DeploymentInfo> infoBuilder = serviceTarget.addService(deploymentInfoServiceName, undertowDeploymentInfoService)\n                .addDependency(UndertowService.SERVLET_CONTAINER.append(defaultContainer), ServletContainerService.class, undertowDeploymentInfoService.getContainer())\n                .addDependency(ServiceBuilder.DependencyType.OPTIONAL, SessionCookieConfigService.SERVICE_NAME.append(defaultContainer), SessionCookieConfigService.class, undertowDeploymentInfoService.getDefaultSessionCookieConfig())\n                .addDependency(SecurityDomainService.SERVICE_NAME.append(securityDomain), SecurityDomainContext.class, undertowDeploymentInfoService.getSecurityDomainContextValue())\n                .addDependency(UndertowService.UNDERTOW, UndertowService.class, undertowDeploymentInfoService.getUndertowService())\n                .addDependency(ServiceBuilder.DependencyType.OPTIONAL, BufferCacheService.SERVICE_NAME.append(\"default\"), DirectBufferCache.class, undertowDeploymentInfoService.getBufferCacheInjectedValue())\n                .addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES))\n                .addDependencies(additionalDependencies);\n\n        if (metaData.getDistributable() != null) {\n            SessionManagerFactoryBuilderService factoryBuilderService = new SessionManagerFactoryBuilderService();\n            SessionManagerFactoryBuilder factoryBuilder = factoryBuilderService.getValue();\n            if (factoryBuilder != null) {\n                ServiceName factoryName = deploymentServiceName.append(\"session\");\n                factoryBuilder.build(serviceTarget, factoryName, deploymentServiceName, module, metaData)\n                    .setInitialMode(Mode.ON_DEMAND)\n                    .install()\n                ;\n                infoBuilder.addDependency(factoryName, SessionManagerFactory.class, undertowDeploymentInfoService.getSessionManagerFactoryInjector());\n            } else {\n                UndertowLogger.ROOT_LOGGER.clusteringNotSupported();\n            }\n        }\n\n        infoBuilder.install();\n\n        final boolean isWebappBundle = deploymentUnit.hasAttachment(Attachments.OSGI_MANIFEST);\n        final ServiceName hostServiceName = UndertowService.virtualHostName(defaultServer, hostName);\n        final UndertowDeploymentService service = new UndertowDeploymentService(injectionContainer, !isWebappBundle);\n        final ServiceBuilder<UndertowDeploymentService> builder = serviceTarget.addService(deploymentServiceName, service)\n                .addDependencies(dependentComponents)\n                .addDependency(UndertowService.SERVLET_CONTAINER.append(defaultContainer), ServletContainerService.class, service.getContainer())\n                .addDependency(hostServiceName, Host.class, service.getHost())\n                .addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES))\n                .addDependency(deploymentInfoServiceName, DeploymentInfo.class, service.getDeploymentInfoInjectedValue());\n\n        deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES, deploymentServiceName);\n\n        // OSGi web applications are activated in {@link WebContextActivationProcessor} according to bundle lifecycle changes\n        if (isWebappBundle) {\n            UndertowDeploymentService.ContextActivatorImpl activator = new UndertowDeploymentService.ContextActivatorImpl(builder.install());\n            deploymentUnit.putAttachment(ContextActivator.ATTACHMENT_KEY, activator);\n            deploymentUnit.addToAttachmentList(Attachments.BUNDLE_ACTIVE_DEPENDENCIES, deploymentServiceName);\n        } else {\n            builder.install();\n        }\n\n        // Process the web related mgmt information\n        final ModelNode node = deploymentUnit.getDeploymentSubsystemModel(UndertowExtension.SUBSYSTEM_NAME);\n        node.get(DeploymentDefinition.CONTEXT_ROOT.getName()).set(\"\".equals(pathName) ? \"/\" : pathName);\n        node.get(DeploymentDefinition.VIRTUAL_HOST.getName()).set(hostName);\n        processManagement(deploymentUnit, metaData);\n    }","commit_id":"88725f2e093af6296c7cd8ad3d4103b1cc9f1dd8","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n        public ServletContext getServletContext() {\n            //todo UndertowDeploymentService should be fully started before this method is called\n            UndertowDeploymentService service = controller.getValue();\n            Deployment deployment = service.deploymentManager.getDeployment();\n            return deployment != null ? deployment.getServletContext() : null;\n        }","id":46270,"modified_method":"@Override\n        public ServletContext getServletContext() {\n            //todo UndertowDeploymentService should be fully started before this method is called\n            UndertowDeploymentService service = controller.getValue();\n            DeploymentManager manager = service.deploymentManager;\n            Deployment deployment = manager != null ? manager.getDeployment() : null;\n            return deployment != null ? deployment.getServletContext() : null;\n        }","commit_id":"88725f2e093af6296c7cd8ad3d4103b1cc9f1dd8","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void stop(final StopContext stopContext) {\n        Deployment deployment = deploymentManager.getDeployment();\n        try {\n            deploymentManager.stop();\n        } catch (ServletException e) {\n            throw new RuntimeException(e);\n        }\n        deploymentManager.undeploy();\n        host.getValue().unregisterDeployment(deployment);\n    }","id":46271,"modified_method":"@Override\n    public void stop(final StopContext stopContext) {\n        stopContext();\n    }","commit_id":"88725f2e093af6296c7cd8ad3d4103b1cc9f1dd8","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void start(final StartContext startContext) throws StartException {\n        DeploymentInfo deploymentInfo = deploymentInfoInjectedValue.getValue();\n\n        StartupContext.setInjectionContainer(webInjectionContainer);\n        try {\n            deploymentManager = container.getValue().getServletContainer().addDeployment(deploymentInfo);\n            deploymentManager.deploy();\n\n            try {\n                HttpHandler handler = deploymentManager.start();\n                Deployment deployment = deploymentManager.getDeployment();\n                host.getValue().registerDeployment(deployment, handler);\n            } catch (ServletException e) {\n                throw new StartException(e);\n            }\n        } finally {\n            StartupContext.setInjectionContainer(null);\n        }\n    }","id":46272,"modified_method":"@Override\n    public void start(final StartContext startContext) throws StartException {\n        if (autostart) {\n            try {\n                startContext();\n            } catch (ServletException e) {\n                throw new StartException(e);\n            }\n        }\n    }","commit_id":"88725f2e093af6296c7cd8ad3d4103b1cc9f1dd8","url":"https://github.com/wildfly/wildfly"},{"original_method":"public UndertowDeploymentService(final WebInjectionContainer webInjectionContainer) {\n        this.webInjectionContainer = webInjectionContainer;\n    }","id":46273,"modified_method":"public UndertowDeploymentService(final WebInjectionContainer webInjectionContainer, boolean autostart) {\n        this.webInjectionContainer = webInjectionContainer;\n        this.autostart = autostart;\n    }","commit_id":"88725f2e093af6296c7cd8ad3d4103b1cc9f1dd8","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void processDeployment(final String hostName, final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget)\n            throws DeploymentUnitProcessingException {\n        final VirtualFile deploymentRoot = deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot();\n        final Module module = deploymentUnit.getAttachment(Attachments.MODULE);\n        if (module == null) {\n            throw new DeploymentUnitProcessingException(MESSAGES.failedToResolveModule(deploymentRoot));\n        }\n        final ClassLoader classLoader = module.getClassLoader();\n        final JBossWebMetaData metaData = warMetaData.getMergedJBossWebMetaData();\n        final List<SetupAction> setupActions = deploymentUnit.getAttachmentList(org.jboss.as.ee.component.Attachments.WEB_SETUP_ACTIONS);\n        // Resolve the context factory\n        WebContextFactory contextFactory = deploymentUnit.getAttachment(WebContextFactory.ATTACHMENT);\n        if (contextFactory == null) {\n            contextFactory = WebContextFactory.DEFAULT;\n        }\n\n        // Create the context\n        final StandardContext webContext = contextFactory.createContext(deploymentUnit);\n        final JBossContextConfig config = new JBossContextConfig(deploymentUnit, this.service);\n\n        // Add SecurityAssociationValve right at the beginning\n        webContext.addValve(new SecurityContextAssociationValve(deploymentUnit));\n\n        // Set the deployment root\n        try {\n            webContext.setDocBase(deploymentRoot.getPhysicalFile().getAbsolutePath());\n        } catch (IOException e) {\n            throw new DeploymentUnitProcessingException(e);\n        }\n        webContext.addLifecycleListener(config);\n\n        final String pathName = pathNameOfDeployment(deploymentUnit, metaData);\n        webContext.setPath(pathName);\n        webContext.setIgnoreAnnotations(true);\n        webContext.setCrossContext(!metaData.isDisableCrossContext());\n\n        //setup JSP expression factory wrapper\n        List<ExpressionFactoryWrapper> wrappers = deploymentUnit.getAttachmentList(ExpressionFactoryWrapper.ATTACHMENT_KEY);\n        if (!wrappers.isEmpty()) {\n            if (metaData.getListeners() == null) {\n                metaData.setListeners(new ArrayList<ListenerMetaData>());\n            }\n            final ListenerMetaData listenerMetaData = new ListenerMetaData();\n            listenerMetaData.setListenerClass(JspInitializationListener.class.getName());\n            metaData.getListeners().add(listenerMetaData);\n            deploymentUnit.addToAttachmentList(ServletContextAttribute.ATTACHMENT_KEY, new ServletContextAttribute(JspInitializationListener.CONTEXT_KEY, wrappers));\n        }\n\n        // Hook for post processing the web context (e.g. for SIP)\n        contextFactory.postProcessContext(deploymentUnit, webContext);\n\n        final Set<ServiceName> dependentComponents = new HashSet<ServiceName>();\n        // see AS7-2077\n        // basically we want to ignore components that have failed for whatever reason\n        // if they are important they will be picked up when the web deployment actually starts\n        final List<ServiceName> components = deploymentUnit.getAttachmentList(WebComponentDescription.WEB_COMPONENTS);\n        final Set<ServiceName> failed = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.FAILED_COMPONENTS);\n        for (final ServiceName component : components) {\n            boolean skip = false;\n            if (!failed.contains(component)) {\n                dependentComponents.add(component);\n            }\n        }\n\n        final Loader loader = new WebCtxLoader(classLoader);\n        webContext.setLoader(loader);\n\n        webContext.setAllowLinking(metaData.isSymbolicLinkingEnabled());\n\n        // Valves\n        List<ValveMetaData> valves = metaData.getValves();\n        if (valves == null) {\n            metaData.setValves(valves = new ArrayList<ValveMetaData>());\n        }\n        for (ValveMetaData valve : valves) {\n            Valve valveInstance = (Valve) getInstance(module, valve.getModule(), valve.getValveClass(), valve.getParams());\n            webContext.getPipeline().addValve(valveInstance);\n        }\n\n        // Container listeners\n        List<ContainerListenerMetaData> listeners = metaData.getContainerListeners();\n        if (listeners != null) {\n            for (ContainerListenerMetaData listener : listeners) {\n                switch (listener.getListenerType()) {\n                    case CONTAINER:\n                        ContainerListener containerListener = (ContainerListener) getInstance(module, listener.getModule(), listener.getListenerClass(),\n                                listener.getParams());\n                        webContext.addContainerListener(containerListener);\n                        break;\n                    case LIFECYCLE:\n                        LifecycleListener lifecycleListener = (LifecycleListener) getInstance(module, listener.getModule(), listener.getListenerClass(),\n                                listener.getParams());\n                        if (webContext instanceof Lifecycle) {\n                            ((Lifecycle) webContext).addLifecycleListener(lifecycleListener);\n                        }\n                        break;\n                    case SERVLET_INSTANCE:\n                        webContext.addInstanceListener(listener.getListenerClass());\n                        break;\n                    case SERVLET_CONTAINER:\n                        webContext.addWrapperListener(listener.getListenerClass());\n                        break;\n                    case SERVLET_LIFECYCLE:\n                        webContext.addWrapperLifecycle(listener.getListenerClass());\n                        break;\n                }\n            }\n        }\n\n        // Set the session cookies flag according to metadata\n        switch (metaData.getSessionCookies()) {\n            case JBossWebMetaData.SESSION_COOKIES_ENABLED:\n                webContext.setCookies(true);\n                break;\n            case JBossWebMetaData.SESSION_COOKIES_DISABLED:\n                webContext.setCookies(false);\n                break;\n        }\n\n        String metaDataSecurityDomain = metaData.getSecurityDomain();\n        if (metaDataSecurityDomain == null) {\n            metaDataSecurityDomain = getJBossAppSecurityDomain(deploymentUnit);\n        }\n        if (metaDataSecurityDomain != null) {\n            metaDataSecurityDomain = metaDataSecurityDomain.trim();\n        }\n\n        String securityDomain = metaDataSecurityDomain == null ? SecurityConstants.DEFAULT_APPLICATION_POLICY : SecurityUtil\n                .unprefixSecurityDomain(metaDataSecurityDomain);\n\n        // Setup an deployer configured ServletContext attributes\n        final List<ServletContextAttribute> attributes = deploymentUnit.getAttachment(ServletContextAttribute.ATTACHMENT_KEY);\n\n        try {\n            final ServiceName webappServiceName = WebSubsystemServices.deploymentServiceName(hostName, pathName);\n            final ServiceName realmServiceName = webappServiceName.append(\"realm\");\n\n\n            deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES, webappServiceName);\n            deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES, realmServiceName);\n\n            final JBossWebRealmService realmService = new JBossWebRealmService(deploymentUnit);\n            ServiceBuilder<Realm> realmBuilder = serviceTarget.addService(realmServiceName, realmService);\n            realmBuilder\n                    .addDependency(DependencyType.REQUIRED, SecurityDomainService.SERVICE_NAME.append(securityDomain), SecurityDomainContext.class,\n                            realmService.getSecurityDomainContextInjector()).setInitialMode(Mode.ACTIVE).install();\n\n            ComponentRegistry componentRegistry = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.COMPONENT_REGISTRY);\n            if(componentRegistry == null) {\n                //we do this to avoid lots of other null checks\n                //this will only happen if the EE subsystem is not installed\n                componentRegistry = new ComponentRegistry(null);\n            }\n\n\n            final WebDeploymentService webappService = new WebDeploymentService(webContext, new WebInjectionContainer(module.getClassLoader(), componentRegistry), setupActions, attributes);\n            ServiceBuilder<StandardContext> webappBuilder = serviceTarget.addService(webappServiceName, webappService)\n                    .addDependency(WebSubsystemServices.JBOSS_WEB_HOST.append(hostName), VirtualHost.class, new WebContextInjector(webContext))\n                    .addDependencies(dependentComponents).addDependency(realmServiceName, Realm.class, webappService.getRealm())\n                    .addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES))\n                    .addDependency(JndiNamingDependencyProcessor.serviceName(deploymentUnit.getServiceName()));\n\n            // inject the server executor which can be used by the WebDeploymentService for blocking tasks in start/stop\n            // of that service\n            Services.addServerExecutorDependency(webappBuilder, webappService.getServerExecutorInjector(), false);\n\n\n            // add any dependencies required by the setup action\n            for (final SetupAction action : setupActions) {\n                webappBuilder.addDependencies(action.dependencies());\n            }\n\n            // Add distributable session manager factory dependency if necessary\n            if (metaData.getDistributable() != null) {\n                SessionManagerFactoryBuilderService factoryBuilderService = new SessionManagerFactoryBuilderService();\n                SessionManagerFactoryBuilder factoryBuilder = factoryBuilderService.getValue();\n                if (factoryBuilder != null) {\n                    ServiceName factoryName = webappServiceName.append(\"session\");\n\n                    ServiceBuilder<SessionManagerFactory> builder = factoryBuilder.build(serviceTarget, factoryName, webappServiceName, module, metaData);\n                    if (builder != null) {\n                        builder.setInitialMode(Mode.ON_DEMAND).install();\n                        webappBuilder.addDependency(factoryName, SessionManagerFactory.class, config.getSessionManagerFactoryInjector());\n                    }\n                }\n            }\n\n            // OSGi web applications are activated in {@link WebContextActivationProcessor} according to bundle lifecycle changes\n            if (deploymentUnit.hasAttachment(Attachments.OSGI_MANIFEST)) {\n                webappBuilder.setInitialMode(Mode.NEVER);\n                WebDeploymentService.ContextActivatorImpl activator = new WebDeploymentService.ContextActivatorImpl(webappBuilder.install());\n                deploymentUnit.putAttachment(ContextActivator.ATTACHMENT_KEY, activator);\n            } else {\n                webappBuilder.setInitialMode(Mode.ACTIVE);\n                webappBuilder.install();\n            }\n\n            // adding JACC service\n            AbstractSecurityDeployer<WarMetaData> deployer = new WarSecurityDeployer();\n            JaccService<WarMetaData> jaccService = deployer.deploy(deploymentUnit);\n            if (jaccService != null) {\n                ((WarJaccService) jaccService).setContext(webContext);\n                final ServiceName jaccServiceName = deploymentUnit.getServiceName().append(JaccService.SERVICE_NAME);\n                ServiceBuilder<?> jaccBuilder = serviceTarget.addService(jaccServiceName, jaccService);\n                if (deploymentUnit.getParent() != null) {\n                    // add dependency to parent policy\n                    final DeploymentUnit parentDU = deploymentUnit.getParent();\n                    jaccBuilder.addDependency(parentDU.getServiceName().append(JaccService.SERVICE_NAME), PolicyConfiguration.class,\n                            jaccService.getParentPolicyInjector());\n                }\n                // add dependency to web deployment service\n                jaccBuilder.addDependency(webappServiceName);\n                jaccBuilder.setInitialMode(Mode.PASSIVE).install();\n            }\n        } catch (ServiceRegistryException e) {\n            throw new DeploymentUnitProcessingException(MESSAGES.failedToAddWebDeployment(), e);\n        }\n\n        // Process the web related mgmt information\n        final ModelNode node = deploymentUnit.getDeploymentSubsystemModel(\"web\");\n        node.get(WebDeploymentDefinition.CONTEXT_ROOT.getName()).set(\"\".equals(pathName) ? \"/\" : pathName);\n        node.get(WebDeploymentDefinition.VIRTUAL_HOST.getName()).set(hostName);\n        processManagement(deploymentUnit, metaData);\n    }","id":46274,"modified_method":"private void processDeployment(final String hostName, final WarMetaData warMetaData, final DeploymentUnit deploymentUnit, final ServiceTarget serviceTarget)\n            throws DeploymentUnitProcessingException {\n        final VirtualFile deploymentRoot = deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot();\n        final Module module = deploymentUnit.getAttachment(Attachments.MODULE);\n        if (module == null) {\n            throw new DeploymentUnitProcessingException(MESSAGES.failedToResolveModule(deploymentRoot));\n        }\n        final ClassLoader classLoader = module.getClassLoader();\n        final JBossWebMetaData metaData = warMetaData.getMergedJBossWebMetaData();\n        final List<SetupAction> setupActions = deploymentUnit.getAttachmentList(org.jboss.as.ee.component.Attachments.WEB_SETUP_ACTIONS);\n        // Resolve the context factory\n        WebContextFactory contextFactory = deploymentUnit.getAttachment(WebContextFactory.ATTACHMENT);\n        if (contextFactory == null) {\n            contextFactory = WebContextFactory.DEFAULT;\n        }\n\n        // Create the context\n        final StandardContext webContext = contextFactory.createContext(deploymentUnit);\n        final JBossContextConfig config = new JBossContextConfig(deploymentUnit, this.service);\n\n        // Add SecurityAssociationValve right at the beginning\n        webContext.addValve(new SecurityContextAssociationValve(deploymentUnit));\n\n        // Set the deployment root\n        try {\n            webContext.setDocBase(deploymentRoot.getPhysicalFile().getAbsolutePath());\n        } catch (IOException e) {\n            throw new DeploymentUnitProcessingException(e);\n        }\n        webContext.addLifecycleListener(config);\n\n        final String pathName = pathNameOfDeployment(deploymentUnit, metaData);\n        webContext.setPath(pathName);\n        webContext.setIgnoreAnnotations(true);\n        webContext.setCrossContext(!metaData.isDisableCrossContext());\n\n        //setup JSP expression factory wrapper\n        List<ExpressionFactoryWrapper> wrappers = deploymentUnit.getAttachmentList(ExpressionFactoryWrapper.ATTACHMENT_KEY);\n        if (!wrappers.isEmpty()) {\n            if (metaData.getListeners() == null) {\n                metaData.setListeners(new ArrayList<ListenerMetaData>());\n            }\n            final ListenerMetaData listenerMetaData = new ListenerMetaData();\n            listenerMetaData.setListenerClass(JspInitializationListener.class.getName());\n            metaData.getListeners().add(listenerMetaData);\n            deploymentUnit.addToAttachmentList(ServletContextAttribute.ATTACHMENT_KEY, new ServletContextAttribute(JspInitializationListener.CONTEXT_KEY, wrappers));\n        }\n\n        // Hook for post processing the web context (e.g. for SIP)\n        contextFactory.postProcessContext(deploymentUnit, webContext);\n\n        final Set<ServiceName> dependentComponents = new HashSet<ServiceName>();\n        // see AS7-2077\n        // basically we want to ignore components that have failed for whatever reason\n        // if they are important they will be picked up when the web deployment actually starts\n        final List<ServiceName> components = deploymentUnit.getAttachmentList(WebComponentDescription.WEB_COMPONENTS);\n        final Set<ServiceName> failed = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.FAILED_COMPONENTS);\n        for (final ServiceName component : components) {\n            if (!failed.contains(component)) {\n                dependentComponents.add(component);\n            }\n        }\n\n        final Loader loader = new WebCtxLoader(classLoader);\n        webContext.setLoader(loader);\n\n        webContext.setAllowLinking(metaData.isSymbolicLinkingEnabled());\n\n        // Valves\n        List<ValveMetaData> valves = metaData.getValves();\n        if (valves == null) {\n            metaData.setValves(valves = new ArrayList<ValveMetaData>());\n        }\n        for (ValveMetaData valve : valves) {\n            Valve valveInstance = (Valve) getInstance(module, valve.getModule(), valve.getValveClass(), valve.getParams());\n            webContext.getPipeline().addValve(valveInstance);\n        }\n\n        // Container listeners\n        List<ContainerListenerMetaData> listeners = metaData.getContainerListeners();\n        if (listeners != null) {\n            for (ContainerListenerMetaData listener : listeners) {\n                switch (listener.getListenerType()) {\n                    case CONTAINER:\n                        ContainerListener containerListener = (ContainerListener) getInstance(module, listener.getModule(), listener.getListenerClass(),\n                                listener.getParams());\n                        webContext.addContainerListener(containerListener);\n                        break;\n                    case LIFECYCLE:\n                        LifecycleListener lifecycleListener = (LifecycleListener) getInstance(module, listener.getModule(), listener.getListenerClass(),\n                                listener.getParams());\n                        if (webContext instanceof Lifecycle) {\n                            ((Lifecycle) webContext).addLifecycleListener(lifecycleListener);\n                        }\n                        break;\n                    case SERVLET_INSTANCE:\n                        webContext.addInstanceListener(listener.getListenerClass());\n                        break;\n                    case SERVLET_CONTAINER:\n                        webContext.addWrapperListener(listener.getListenerClass());\n                        break;\n                    case SERVLET_LIFECYCLE:\n                        webContext.addWrapperLifecycle(listener.getListenerClass());\n                        break;\n                }\n            }\n        }\n\n        // Set the session cookies flag according to metadata\n        switch (metaData.getSessionCookies()) {\n            case JBossWebMetaData.SESSION_COOKIES_ENABLED:\n                webContext.setCookies(true);\n                break;\n            case JBossWebMetaData.SESSION_COOKIES_DISABLED:\n                webContext.setCookies(false);\n                break;\n        }\n\n        String metaDataSecurityDomain = metaData.getSecurityDomain();\n        if (metaDataSecurityDomain == null) {\n            metaDataSecurityDomain = getJBossAppSecurityDomain(deploymentUnit);\n        }\n        if (metaDataSecurityDomain != null) {\n            metaDataSecurityDomain = metaDataSecurityDomain.trim();\n        }\n\n        String securityDomain = metaDataSecurityDomain == null ? SecurityConstants.DEFAULT_APPLICATION_POLICY : SecurityUtil\n                .unprefixSecurityDomain(metaDataSecurityDomain);\n\n        // Setup an deployer configured ServletContext attributes\n        final List<ServletContextAttribute> attributes = deploymentUnit.getAttachment(ServletContextAttribute.ATTACHMENT_KEY);\n\n        try {\n            final ServiceName webappServiceName = WebSubsystemServices.deploymentServiceName(hostName, pathName);\n            final ServiceName realmServiceName = webappServiceName.append(\"realm\");\n\n\n            deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES, webappServiceName);\n            deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES, realmServiceName);\n\n            final JBossWebRealmService realmService = new JBossWebRealmService(deploymentUnit);\n            ServiceBuilder<Realm> realmBuilder = serviceTarget.addService(realmServiceName, realmService);\n            realmBuilder\n                    .addDependency(DependencyType.REQUIRED, SecurityDomainService.SERVICE_NAME.append(securityDomain), SecurityDomainContext.class,\n                            realmService.getSecurityDomainContextInjector()).setInitialMode(Mode.ACTIVE).install();\n\n            ComponentRegistry componentRegistry = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.COMPONENT_REGISTRY);\n            if(componentRegistry == null) {\n                //we do this to avoid lots of other null checks\n                //this will only happen if the EE subsystem is not installed\n                componentRegistry = new ComponentRegistry(null);\n            }\n\n\n            final WebDeploymentService webappService = new WebDeploymentService(webContext, new WebInjectionContainer(module.getClassLoader(), componentRegistry), setupActions, attributes);\n            ServiceBuilder<StandardContext> webappBuilder = serviceTarget.addService(webappServiceName, webappService)\n                    .addDependency(WebSubsystemServices.JBOSS_WEB_HOST.append(hostName), VirtualHost.class, new WebContextInjector(webContext))\n                    .addDependencies(dependentComponents).addDependency(realmServiceName, Realm.class, webappService.getRealm())\n                    .addDependencies(deploymentUnit.getAttachmentList(Attachments.WEB_DEPENDENCIES))\n                    .addDependency(JndiNamingDependencyProcessor.serviceName(deploymentUnit.getServiceName()));\n\n            // inject the server executor which can be used by the WebDeploymentService for blocking tasks in start/stop\n            // of that service\n            Services.addServerExecutorDependency(webappBuilder, webappService.getServerExecutorInjector(), false);\n\n\n            // add any dependencies required by the setup action\n            for (final SetupAction action : setupActions) {\n                webappBuilder.addDependencies(action.dependencies());\n            }\n\n            // Add distributable session manager factory dependency if necessary\n            if (metaData.getDistributable() != null) {\n                SessionManagerFactoryBuilderService factoryBuilderService = new SessionManagerFactoryBuilderService();\n                SessionManagerFactoryBuilder factoryBuilder = factoryBuilderService.getValue();\n                if (factoryBuilder != null) {\n                    ServiceName factoryName = webappServiceName.append(\"session\");\n\n                    ServiceBuilder<SessionManagerFactory> builder = factoryBuilder.build(serviceTarget, factoryName, webappServiceName, module, metaData);\n                    if (builder != null) {\n                        builder.setInitialMode(Mode.ON_DEMAND).install();\n                        webappBuilder.addDependency(factoryName, SessionManagerFactory.class, config.getSessionManagerFactoryInjector());\n                    }\n                }\n            }\n\n            webappBuilder.setInitialMode(Mode.ACTIVE);\n            webappBuilder.install();\n\n            // adding JACC service\n            AbstractSecurityDeployer<WarMetaData> deployer = new WarSecurityDeployer();\n            JaccService<WarMetaData> jaccService = deployer.deploy(deploymentUnit);\n            if (jaccService != null) {\n                ((WarJaccService) jaccService).setContext(webContext);\n                final ServiceName jaccServiceName = deploymentUnit.getServiceName().append(JaccService.SERVICE_NAME);\n                ServiceBuilder<?> jaccBuilder = serviceTarget.addService(jaccServiceName, jaccService);\n                if (deploymentUnit.getParent() != null) {\n                    // add dependency to parent policy\n                    final DeploymentUnit parentDU = deploymentUnit.getParent();\n                    jaccBuilder.addDependency(parentDU.getServiceName().append(JaccService.SERVICE_NAME), PolicyConfiguration.class,\n                            jaccService.getParentPolicyInjector());\n                }\n                // add dependency to web deployment service\n                jaccBuilder.addDependency(webappServiceName);\n                jaccBuilder.setInitialMode(Mode.PASSIVE).install();\n            }\n        } catch (ServiceRegistryException e) {\n            throw new DeploymentUnitProcessingException(MESSAGES.failedToAddWebDeployment(), e);\n        }\n\n        // Process the web related mgmt information\n        final ModelNode node = deploymentUnit.getDeploymentSubsystemModel(\"web\");\n        node.get(WebDeploymentDefinition.CONTEXT_ROOT.getName()).set(\"\".equals(pathName) ? \"/\" : pathName);\n        node.get(WebDeploymentDefinition.VIRTUAL_HOST.getName()).set(hostName);\n        processManagement(deploymentUnit, metaData);\n    }","commit_id":"88725f2e093af6296c7cd8ad3d4103b1cc9f1dd8","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        DeploymentUnit depUnit = phaseContext.getDeploymentUnit();\n        ContextActivator activator = depUnit.getAttachment(ContextActivator.ATTACHMENT_KEY);\n        XBundleRevision brev = depUnit.getAttachment(OSGiConstants.BUNDLE_REVISION_KEY);\n        if (activator != null && brev != null) {\n            // Add the {@link ContextActivator} to the {@link XBundleRevision}\n            brev.putAttachment(WebExtension.CONTEXT_ACTIVATOR_KEY, activator);\n\n            // Start the context when the bundle will get started automatically\n            Deployment deployment = brev.getBundle().adapt(Deployment.class);\n            if (deployment.isAutoStart()) {\n                activator.startAsync();\n            }\n        }\n    }","id":46275,"modified_method":"@Override\n    public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        DeploymentUnit depUnit = phaseContext.getDeploymentUnit();\n        ContextActivator activator = depUnit.getAttachment(ContextActivator.ATTACHMENT_KEY);\n        XBundleRevision brev = depUnit.getAttachment(OSGiConstants.BUNDLE_REVISION_KEY);\n        if (activator != null && brev != null) {\n            // Add the {@link ContextActivator} to the {@link XBundleRevision}\n            brev.putAttachment(WebExtension.CONTEXT_ACTIVATOR_KEY, activator);\n        }\n    }","commit_id":"88725f2e093af6296c7cd8ad3d4103b1cc9f1dd8","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void invoke(int state, InvocationContext context) {\n        XBundle bundle = (XBundle) context.getBundle();\n        XBundleRevision brev = bundle.getBundleRevision();\n        ContextActivator activator = brev.getAttachment(WebExtension.CONTEXT_ACTIVATOR_KEY);\n        if (activator != null) {\n            switch (state) {\n                case Bundle.ACTIVE:\n                    try {\n                        if (!activator.start(ACTIVATOR_TIMEOUT, TimeUnit.MILLISECONDS)) {\n                            throw new LifecycleInterceptorException(OSGiMessages.MESSAGES.startContextFailed());\n                        }\n                        injectBundleContext(activator.getServletContext(), bundle.getBundleContext());\n                    } catch (TimeoutException ex) {\n                        throw new LifecycleInterceptorException(ex.getMessage(), ex);\n                    }\n                    break;\n                case Bundle.RESOLVED:\n                    uninjectBundleContext(activator.getServletContext());\n                    activator.stop(ACTIVATOR_TIMEOUT, TimeUnit.MILLISECONDS);\n                    break;\n            }\n        }\n    }","id":46276,"modified_method":"@Override\n    public void invoke(int state, InvocationContext context) {\n        XBundle bundle = (XBundle) context.getBundle();\n        XBundleRevision brev = bundle.getBundleRevision();\n        ContextActivator activator = brev.getAttachment(WebExtension.CONTEXT_ACTIVATOR_KEY);\n        if (activator != null) {\n            switch (state) {\n                case Bundle.ACTIVE:\n                    if (!activator.startContext()) {\n                        throw new LifecycleInterceptorException(OSGiMessages.MESSAGES.startContextFailed());\n                    }\n                    injectBundleContext(activator.getServletContext(), bundle.getBundleContext());\n                    break;\n                case Bundle.RESOLVED:\n                    uninjectBundleContext(activator.getServletContext());\n                    activator.stopContext();\n                    break;\n            }\n        }\n    }","commit_id":"88725f2e093af6296c7cd8ad3d4103b1cc9f1dd8","url":"https://github.com/wildfly/wildfly"},{"original_method":"ConfigThread(final Language docLanguage, final Configuration config, final File baseDir) {\n    this.docLanguage = docLanguage;\n    this.config = config;\n    this.baseDir = baseDir;\n    cfgDialog = new ConfigurationDialog(true);\n    cfgDialog.setDisabledRules(config.getDisabledRuleIds());\n    cfgDialog.setMotherTongue(config.getMotherTongue());\n  }","id":46277,"modified_method":"ConfigThread(final Language docLanguage, final Configuration config, final File baseDir) {\n    this.docLanguage = docLanguage;\n    this.config = config;\n    this.baseDir = baseDir;\n    cfgDialog = new ConfigurationDialog(true, true);\n    cfgDialog.setDisabledRules(config.getDisabledRuleIds());\n    cfgDialog.setMotherTongue(config.getMotherTongue());\n  }","commit_id":"9b2bd1d4d73478c828c81020291dd7f656272c2b","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"public void actionPerformed(ActionEvent e) {\n    if (e.getActionCommand().equals(OK_BUTTON)) {\n      int i = 0;\n      inactiveRuleIds.clear();\n      for (JCheckBox checkBox : checkBoxes) {\n        if (!checkBox.isSelected()) {\n          String ruleId = checkBoxesRuleIds.get(i);\n          inactiveRuleIds.add(ruleId);\n        }\n        i++;\n      }\n      if (motherTongueBox.getSelectedItem() instanceof String)\n        motherTongue = null;\n      else\n        motherTongue = (Language)motherTongueBox.getSelectedItem();\n      serverMode = serverCheckbox.isSelected();\n      serverPort = Integer.parseInt(serverPortField.getText());\n      isClosed = true;\n      dialog.setVisible(false);\n    } else if (e.getActionCommand().equals(CANCEL_BUTTON)) {\n      isClosed = true;\n      dialog.setVisible(false);\n    }\n  }","id":46278,"modified_method":"public void actionPerformed(ActionEvent e) {\n    if (e.getSource() == okButton) {\n      int i = 0;\n      inactiveRuleIds.clear();\n      for (JCheckBox checkBox : checkBoxes) {\n        if (!checkBox.isSelected()) {\n          String ruleId = checkBoxesRuleIds.get(i);\n          inactiveRuleIds.add(ruleId);\n        }\n        i++;\n      }\n      if (motherTongueBox.getSelectedItem() instanceof String)\n        motherTongue = null;\n      else\n        motherTongue = (Language)motherTongueBox.getSelectedItem();\n      if (serverCheckbox != null) {\n        serverMode = serverCheckbox.isSelected();\n        serverPort = Integer.parseInt(serverPortField.getText());\n      }\n      isClosed = true;\n      dialog.setVisible(false);\n    } else if (e.getSource() == cancelButton) {\n      isClosed = true;\n      dialog.setVisible(false);\n    }\n  }","commit_id":"9b2bd1d4d73478c828c81020291dd7f656272c2b","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"/**\n   * For internal testing only.\n   */\n  public static void main(String[] args) throws IOException, ParserConfigurationException, SAXException {\n    ConfigurationDialog dlg = new ConfigurationDialog(false);\n    List<Rule> rules = new ArrayList<Rule>();\n    JLanguageTool lt = new JLanguageTool(Language.ENGLISH);\n    lt.activateDefaultPatternRules();\n    rules.addAll(lt.getAllRules());\n    dlg.show(rules);\n  }","id":46279,"modified_method":"/**\n   * For internal testing only.\n   */\n  public static void main(String[] args) throws IOException, ParserConfigurationException, SAXException {\n    ConfigurationDialog dlg = new ConfigurationDialog(false, false);\n    List<Rule> rules = new ArrayList<Rule>();\n    JLanguageTool lt = new JLanguageTool(Language.ENGLISH);\n    lt.activateDefaultPatternRules();\n    rules.addAll(lt.getAllRules());\n    dlg.show(rules);\n  }","commit_id":"9b2bd1d4d73478c828c81020291dd7f656272c2b","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"public int getServerPort() {\n    return Integer.parseInt(serverPortField.getText());\n  }","id":46280,"modified_method":"public int getServerPort() {\n    if (serverPortField == null)\n      return HTTPServer.DEFAULT_PORT;\n    return Integer.parseInt(serverPortField.getText());\n  }","commit_id":"9b2bd1d4d73478c828c81020291dd7f656272c2b","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"public void show(List<Rule> rules) {\n    dialog = new JDialog();\n    // TODO: i18n:\n    dialog.setTitle(\"LanguageTool \" +JLanguageTool.VERSION+ \" Options\");\n    checkBoxes.clear();\n    checkBoxesRuleIds.clear();\n    \n    Collections.sort(rules, new CategoryComparator());\n    \n    // close dialog when user presses Escape key:\n    KeyStroke stroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);\n    ActionListener actionListener = new ActionListener() {\n      @SuppressWarnings(\"unused\")\n      public void actionPerformed(ActionEvent actionEvent) {\n        isClosed = true;\n        dialog.setVisible(false); \n      }\n    };\n    JRootPane rootPane = dialog.getRootPane();\n    rootPane.registerKeyboardAction(actionListener, stroke, JComponent.WHEN_IN_FOCUSED_WINDOW);\n    \n    JPanel checkBoxPanel = new JPanel();\n    checkBoxPanel.setLayout(new GridBagLayout());\n    GridBagConstraints cons = new GridBagConstraints();\n    cons.anchor = GridBagConstraints.NORTHWEST;\n    cons.gridx = 0;\n    int row = 0;\n    String prevID = null;\n    String prevCategory = null;\n    for (Rule rule : rules) {\n      // avoid displaying rules from rule groups more than once:\n      if (prevID == null || (prevID != null && !prevID.equals(rule.getId()))) {\n        cons.gridy = row;\n        JCheckBox checkBox = new JCheckBox(rule.getDescription());\n        if (inactiveRuleIds != null && inactiveRuleIds.contains(rule.getId()))\n          checkBox.setSelected(false);\n        else\n          checkBox.setSelected(true);\n        checkBoxes.add(checkBox);\n        checkBoxesRuleIds.add(rule.getId());\n        boolean showHeadline = (rule.getCategory() != null && !rule.getCategory().getName().equals(prevCategory));\n        if ((showHeadline || prevCategory == null) && rule.getCategory() != null) {\n          checkBoxPanel.add(new JLabel(rule.getCategory().getName()), cons);\n          prevCategory = rule.getCategory().getName();\n          cons.gridy++;\n          row++;\n        }\n        checkBox.setMargin(new Insets(0, 20, 0, 0));    // indent\n        checkBoxPanel.add(checkBox, cons);\n        row++;\n      }\n      prevID = rule.getId();\n    }\n\n    JPanel motherTonguePanel = new JPanel();\n    motherTonguePanel.add(new JLabel(\"Your mother tongue: \"), cons);\n    motherTongueBox = new JComboBox(getPossibleMotherTongues());\n    if (motherTongue != null)\n      motherTongueBox.setSelectedItem(motherTongue);\n    motherTonguePanel.add(motherTongueBox, cons);\n\n    JPanel portPanel = new JPanel();\n    portPanel.setLayout(new GridBagLayout());\n    // TODO: why is this now left-aligned?!?!\n    serverCheckbox = new JCheckBox(\"Run as server on port\");\n    serverCheckbox.setMnemonic('r');\n    serverCheckbox.setSelected(serverMode);\n    cons = new GridBagConstraints();\n    cons.insets = new Insets(0, 4, 0, 0);\n    cons.gridx = 0;\n    cons.gridy = 0;\n    cons.anchor = GridBagConstraints.WEST;\n    cons.fill = GridBagConstraints.NONE;\n    cons.weightx = 0.0f;\n    portPanel.add(serverCheckbox, cons);\n    serverPortField = new JTextField(serverPort + \"\");\n    serverPortField.setEnabled(serverCheckbox.isSelected());\n    // TODO: without this the box is just a few pixels small, but why??:\n    serverPortField.setMinimumSize(new Dimension(200, 15));\n    cons.gridx = 1;\n    serverCheckbox.addActionListener(new ActionListener() {\n      public void actionPerformed(@SuppressWarnings(\"unused\")ActionEvent e) {\n        serverPortField.setEnabled(serverCheckbox.isSelected());\n      }});\n    portPanel.add(serverPortField, cons);\n\n    JPanel buttonPanel = new JPanel();\n    buttonPanel.setLayout(new GridBagLayout());\n    JButton okButton = new JButton(OK_BUTTON);\n    okButton.setMnemonic('o');\n    okButton.addActionListener(this);\n    JButton cancelButton = new JButton(CANCEL_BUTTON);\n    cancelButton.setMnemonic('c');\n    cancelButton.addActionListener(this);\n    cons = new GridBagConstraints();\n    cons.insets = new Insets(0, 4, 0, 0);\n    buttonPanel.add(okButton, cons);\n    buttonPanel.add(cancelButton, cons);\n    \n    Container contentPane = dialog.getContentPane();\n    contentPane.setLayout(new GridBagLayout());\n    cons = new GridBagConstraints();\n    cons.insets = new Insets(4, 4, 4, 4);\n    cons.gridx = 0;\n    cons.gridy = 0;\n    cons.weightx = 10.0f;\n    cons.weighty = 10.0f;\n    cons.fill = GridBagConstraints.BOTH;\n    contentPane.add(new JScrollPane(checkBoxPanel), cons);\n    \n    cons.gridx = 0;\n    cons.gridy = 1;\n    cons.weightx = 0.0f;\n    cons.weighty = 0.0f;\n    cons.fill = GridBagConstraints.NONE;\n    cons.anchor = GridBagConstraints.WEST;\n    contentPane.add(motherTonguePanel, cons);\n\n    cons.gridx = 0;\n    cons.gridy = 2;\n    cons.weightx = 0.0f;\n    cons.weighty = 0.0f;\n    cons.fill = GridBagConstraints.NONE;\n    cons.anchor = GridBagConstraints.WEST;\n    contentPane.add(portPanel, cons);\n\n    cons.gridx = 0;\n    cons.gridy = 3;\n    cons.weightx = 0.0f;\n    cons.weighty = 0.0f;\n    cons.fill = GridBagConstraints.NONE;\n    cons.anchor = GridBagConstraints.EAST;\n    contentPane.add(buttonPanel, cons);\n    \n    dialog.pack();\n    dialog.setModal(modal);\n    dialog.setSize(500, 500);\n    isClosed = false;\n    // center on screen:\n    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n    Dimension frameSize = dialog.getSize();\n    dialog.setLocation(screenSize.width/2 - (frameSize.width/2), screenSize.height/2 - (frameSize.height/2));\n    dialog.setVisible(true);\n  }","id":46281,"modified_method":"public void show(List<Rule> rules) {\n    dialog = new JDialog();\n    // TODO: i18n:\n    dialog.setTitle(messages.getString(\"guiConfigWindowTitle\"));\n    checkBoxes.clear();\n    checkBoxesRuleIds.clear();\n    \n    Collections.sort(rules, new CategoryComparator());\n    \n    // close dialog when user presses Escape key:\n    KeyStroke stroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);\n    ActionListener actionListener = new ActionListener() {\n      @SuppressWarnings(\"unused\")\n      public void actionPerformed(ActionEvent actionEvent) {\n        isClosed = true;\n        dialog.setVisible(false); \n      }\n    };\n    JRootPane rootPane = dialog.getRootPane();\n    rootPane.registerKeyboardAction(actionListener, stroke, JComponent.WHEN_IN_FOCUSED_WINDOW);\n    \n    JPanel checkBoxPanel = new JPanel();\n    checkBoxPanel.setLayout(new GridBagLayout());\n    GridBagConstraints cons = new GridBagConstraints();\n    cons.anchor = GridBagConstraints.NORTHWEST;\n    cons.gridx = 0;\n    int row = 0;\n    String prevID = null;\n    String prevCategory = null;\n    for (Rule rule : rules) {\n      // avoid displaying rules from rule groups more than once:\n      if (prevID == null || (prevID != null && !prevID.equals(rule.getId()))) {\n        cons.gridy = row;\n        JCheckBox checkBox = new JCheckBox(rule.getDescription());\n        if (inactiveRuleIds != null && inactiveRuleIds.contains(rule.getId()))\n          checkBox.setSelected(false);\n        else\n          checkBox.setSelected(true);\n        checkBoxes.add(checkBox);\n        checkBoxesRuleIds.add(rule.getId());\n        boolean showHeadline = (rule.getCategory() != null && !rule.getCategory().getName().equals(prevCategory));\n        if ((showHeadline || prevCategory == null) && rule.getCategory() != null) {\n          checkBoxPanel.add(new JLabel(rule.getCategory().getName()), cons);\n          prevCategory = rule.getCategory().getName();\n          cons.gridy++;\n          row++;\n        }\n        checkBox.setMargin(new Insets(0, 20, 0, 0));    // indent\n        checkBoxPanel.add(checkBox, cons);\n        row++;\n      }\n      prevID = rule.getId();\n    }\n\n    JPanel motherTonguePanel = new JPanel();\n    motherTonguePanel.add(new JLabel(messages.getString(\"guiMotherTongue\")), cons);\n    motherTongueBox = new JComboBox(getPossibleMotherTongues());\n    if (motherTongue != null)\n      motherTongueBox.setSelectedItem(motherTongue);\n    motherTonguePanel.add(motherTongueBox, cons);\n\n    JPanel portPanel = new JPanel();\n    portPanel.setLayout(new GridBagLayout());\n    // TODO: why is this now left-aligned?!?!\n    cons = new GridBagConstraints();\n    cons.insets = new Insets(0, 4, 0, 0);\n    cons.gridx = 0;\n    cons.gridy = 0;\n    cons.anchor = GridBagConstraints.WEST;\n    cons.fill = GridBagConstraints.NONE;\n    cons.weightx = 0.0f;\n    if (!insideOOo) {\n      serverCheckbox = new JCheckBox(messages.getString(\"guiRunOnPort\"));\n      serverCheckbox.setMnemonic('r');\n      serverCheckbox.setSelected(serverMode);\n      portPanel.add(serverCheckbox, cons);\n      serverPortField = new JTextField(serverPort + \"\");\n      serverPortField.setEnabled(serverCheckbox.isSelected());\n      // TODO: without this the box is just a few pixels small, but why??:\n      serverPortField.setMinimumSize(new Dimension(200, 15));\n      cons.gridx = 1;\n      serverCheckbox.addActionListener(new ActionListener() {\n        public void actionPerformed(@SuppressWarnings(\"unused\")ActionEvent e) {\n          serverPortField.setEnabled(serverCheckbox.isSelected());\n        }});\n      portPanel.add(serverPortField, cons);\n    }\n\n    JPanel buttonPanel = new JPanel();\n    buttonPanel.setLayout(new GridBagLayout());\n    okButton = new JButton(messages.getString(\"guiOKButton\"));\n    okButton.setMnemonic('o');\n    okButton.addActionListener(this);\n    cancelButton = new JButton(messages.getString(\"guiCancelButton\"));\n    cancelButton.setMnemonic('c');\n    cancelButton.addActionListener(this);\n    cons = new GridBagConstraints();\n    cons.insets = new Insets(0, 4, 0, 0);\n    buttonPanel.add(okButton, cons);\n    buttonPanel.add(cancelButton, cons);\n    \n    Container contentPane = dialog.getContentPane();\n    contentPane.setLayout(new GridBagLayout());\n    cons = new GridBagConstraints();\n    cons.insets = new Insets(4, 4, 4, 4);\n    cons.gridx = 0;\n    cons.gridy = 0;\n    cons.weightx = 10.0f;\n    cons.weighty = 10.0f;\n    cons.fill = GridBagConstraints.BOTH;\n    contentPane.add(new JScrollPane(checkBoxPanel), cons);\n    \n    cons.gridx = 0;\n    cons.gridy = 1;\n    cons.weightx = 0.0f;\n    cons.weighty = 0.0f;\n    cons.fill = GridBagConstraints.NONE;\n    cons.anchor = GridBagConstraints.WEST;\n    contentPane.add(motherTonguePanel, cons);\n\n    cons.gridx = 0;\n    cons.gridy = 2;\n    cons.weightx = 0.0f;\n    cons.weighty = 0.0f;\n    cons.fill = GridBagConstraints.NONE;\n    cons.anchor = GridBagConstraints.WEST;\n    contentPane.add(portPanel, cons);\n\n    cons.gridx = 0;\n    cons.gridy = 3;\n    cons.weightx = 0.0f;\n    cons.weighty = 0.0f;\n    cons.fill = GridBagConstraints.NONE;\n    cons.anchor = GridBagConstraints.EAST;\n    contentPane.add(buttonPanel, cons);\n    \n    dialog.pack();\n    dialog.setModal(modal);\n    dialog.setSize(500, 500);\n    isClosed = false;\n    // center on screen:\n    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n    Dimension frameSize = dialog.getSize();\n    dialog.setLocation(screenSize.width/2 - (frameSize.width/2), screenSize.height/2 - (frameSize.height/2));\n    dialog.setVisible(true);\n  }","commit_id":"9b2bd1d4d73478c828c81020291dd7f656272c2b","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"public ConfigurationDialog(boolean modal) {\n    this.modal = modal;\n  }","id":46282,"modified_method":"public ConfigurationDialog(boolean modal, boolean insideOOo) {\n    this.modal = modal;\n    this.insideOOo = insideOOo;\n    messages = JLanguageTool.getMessageBundle();\n  }","commit_id":"9b2bd1d4d73478c828c81020291dd7f656272c2b","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"public boolean getRunServer() {\n    return serverCheckbox.isSelected();\n  }","id":46283,"modified_method":"public boolean getRunServer() {\n    if (serverCheckbox == null)\n      return false;\n    return serverCheckbox.isSelected();\n  }","commit_id":"9b2bd1d4d73478c828c81020291dd7f656272c2b","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"/**\n   * Create a JLanguageTool and setup the built-in rules appropriate for the\n   * given language.\n   * @param motherTongue the user's mother tongue or <code>null<\/code>\n   * @param basedirArg the installation directory of LanguageTool\n   * @throws IOException \n   */\n  public JLanguageTool(Language language, Language motherTongue, File basedirArg) throws IOException {\n    if (language == null) {\n      throw new NullPointerException(\"language cannot be null\");\n    }\n    basedir = basedirArg;\n    this.language = language;\n    this.motherTongue = motherTongue;\n    ResourceBundle messages = ResourceBundle.getBundle(\"de.danielnaber.languagetool.MessagesBundle\",\n        language.getLocale());\n    // TODO: use reflection to get a list of all non-pattern rules?:\n    Rule[] allBuiltinRules = new Rule[] { \n        // Several languages:\n        new CommaWhitespaceRule(messages), \n        new WordRepeatRule(messages, language),\n        new DoublePunctuationRule(messages),\n        new UppercaseSentenceStartRule(messages),\n        // English:\n        new AvsAnRule(messages),        \n        // German:\n        new WordCoherencyRule(messages),\n        new CaseRule(messages),\n        new WiederVsWiderRule(messages),\n        new AgreementRule(messages),\n        new DashRule(messages),\n        // Polish:\n        new PolishWordRepeatRule(messages)\n      };\n    for (int i = 0; i < allBuiltinRules.length; i++) {\n      if (allBuiltinRules[i].supportsLanguage(language))\n        builtinRules.add(allBuiltinRules[i]);\n    }\n    tagger = language.getTagger();\n    sentenceTokenizer = language.getSentenceTokenizer();\n    wordTokenizer = language.getWordTokenizer();\n  }","id":46284,"modified_method":"/**\n   * Create a JLanguageTool and setup the built-in rules appropriate for the\n   * given language.\n   * @param motherTongue the user's mother tongue or <code>null<\/code>\n   * @param basedirArg the installation directory of LanguageTool\n   * @throws IOException \n   */\n  public JLanguageTool(Language language, Language motherTongue, File basedirArg) throws IOException {\n    if (language == null) {\n      throw new NullPointerException(\"language cannot be null\");\n    }\n    basedir = basedirArg;\n    this.language = language;\n    this.motherTongue = motherTongue;\n    messages = getMessageBundle(language);\n    // TODO: use reflection to get a list of all non-pattern rules?:\n    Rule[] allBuiltinRules = new Rule[] { \n        // Several languages:\n        new CommaWhitespaceRule(messages), \n        new WordRepeatRule(messages, language),\n        new DoublePunctuationRule(messages),\n        new UppercaseSentenceStartRule(messages),\n        // English:\n        new AvsAnRule(messages),        \n        // German:\n        new WordCoherencyRule(messages),\n        new CaseRule(messages),\n        new WiederVsWiderRule(messages),\n        new AgreementRule(messages),\n        new DashRule(messages),\n        // Polish:\n        new PolishWordRepeatRule(messages)\n      };\n    for (int i = 0; i < allBuiltinRules.length; i++) {\n      if (allBuiltinRules[i].supportsLanguage(language))\n        builtinRules.add(allBuiltinRules[i]);\n    }\n    tagger = language.getTagger();\n    sentenceTokenizer = language.getSentenceTokenizer();\n    wordTokenizer = language.getWordTokenizer();\n  }","commit_id":"9b2bd1d4d73478c828c81020291dd7f656272c2b","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"private ConfigurationDialog getCurrentConfigDialog() {\n    Language language = getCurrentLanguage();\n    ConfigurationDialog configDialog = null;\n    if (configDialogs.containsKey(language)) {\n      configDialog = (ConfigurationDialog)configDialogs.get(language);\n    } else {\n      configDialog = new ConfigurationDialog(true);\n      configDialog.setMotherTongue(config.getMotherTongue());\n      configDialog.setDisabledRules(config.getDisabledRuleIds());\n      configDialog.setRunServer(config.getRunServer());\n      configDialog.setServerPort(config.getServerPort());\n      configDialogs.put(language, configDialog);\n    }\n    return configDialog;\n  }","id":46285,"modified_method":"private ConfigurationDialog getCurrentConfigDialog() {\n    Language language = getCurrentLanguage();\n    ConfigurationDialog configDialog = null;\n    if (configDialogs.containsKey(language)) {\n      configDialog = (ConfigurationDialog)configDialogs.get(language);\n    } else {\n      configDialog = new ConfigurationDialog(true, false);\n      configDialog.setMotherTongue(config.getMotherTongue());\n      configDialog.setDisabledRules(config.getDisabledRuleIds());\n      configDialog.setRunServer(config.getRunServer());\n      configDialog.setServerPort(config.getServerPort());\n      configDialogs.put(language, configDialog);\n    }\n    return configDialog;\n  }","commit_id":"9b2bd1d4d73478c828c81020291dd7f656272c2b","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"void checkClipboardText() {\n    String s = getClipboardText();\n    textArea.setText(s);\n    JLanguageTool langTool = getCurrentLanguageTool();\n    checkTextAndDisplayResults(langTool, getCurrentLanguage().getName());\n  }","id":46286,"modified_method":"void checkClipboardText() {\n    String s = getClipboardText();\n    textArea.setText(s);\n    JLanguageTool langTool = getCurrentLanguageTool();\n    checkTextAndDisplayResults(langTool, getCurrentLanguage());\n  }","commit_id":"9b2bd1d4d73478c828c81020291dd7f656272c2b","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"private void restoreFromTray() {\n    String s = getClipboardText();\n    // show GUI and check the text from clipboard/selection:\n    frame.setVisible(true);\n    textArea.setText(s);\n    JLanguageTool langTool = getCurrentLanguageTool();\n    checkTextAndDisplayResults(langTool, getCurrentLanguage().getName());\n  }","id":46287,"modified_method":"private void restoreFromTray() {\n    String s = getClipboardText();\n    // show GUI and check the text from clipboard/selection:\n    frame.setVisible(true);\n    textArea.setText(s);\n    JLanguageTool langTool = getCurrentLanguageTool();\n    checkTextAndDisplayResults(langTool, getCurrentLanguage());\n  }","commit_id":"9b2bd1d4d73478c828c81020291dd7f656272c2b","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"private void checkTextAndDisplayResults(final JLanguageTool langTool, final String langName) {\n    if (textArea.getText().trim().equals(\"\")) {\n      textArea.setText(\"Please insert text to check here\");\n    } else {\n      StringBuilder sb = new StringBuilder();\n      resultArea.setText(HTML_FONT_START + \"Starting check in \"+langName+\"...<br>\\n\" + HTML_FONT_END);\n      resultArea.repaint(); // FIXME: why doesn't this work?\n      //TODO: resultArea.setCursor(new Cursor(Cursor.WAIT_CURSOR)); \n      sb.append(\"Starting check in \" +langName+ \"...<br>\\n\");\n      int matches = 0;\n      try {\n        matches = checkText(langTool, textArea.getText(), sb);\n      } catch (Exception ex) {\n        sb.append(\"<br><br><b><font color=\\\"red\\\">\" + ex.toString() + \"<br>\");\n        StackTraceElement[] elements = ex.getStackTrace();\n        for (StackTraceElement element : elements) {\n          sb.append(element + \"<br>\");\n        }\n        sb.append(\"<\/font><\/b><br>\");\n        ex.printStackTrace();\n      }\n      sb.append(\"Check done. \" +matches+ \" potential problems found<br>\\n\");\n      resultArea.setText(HTML_FONT_START + sb.toString() + HTML_FONT_END);\n      resultArea.setCaretPosition(0);\n    }\n  }","id":46288,"modified_method":"private void checkTextAndDisplayResults(final JLanguageTool langTool, final Language lang) {\n    if (textArea.getText().trim().equals(\"\")) {\n      textArea.setText(\"enterText2\");\n    } else {\n      StringBuilder sb = new StringBuilder();\n      String startChecktext = makeTexti18n(\"startChecking\", new Object[] { messages.getString(lang.getShortName()) });\n      resultArea.setText(HTML_FONT_START + startChecktext +\"<br>\\n\" + HTML_FONT_END);\n      resultArea.repaint(); // FIXME: why doesn't this work?\n      //TODO: resultArea.setCursor(new Cursor(Cursor.WAIT_CURSOR)); \n      sb.append(startChecktext+\"...<br>\\n\");\n      int matches = 0;\n      try {\n        matches = checkText(langTool, textArea.getText(), sb);\n      } catch (Exception ex) {\n        sb.append(\"<br><br><b><font color=\\\"red\\\">\" + ex.toString() + \"<br>\");\n        StackTraceElement[] elements = ex.getStackTrace();\n        for (StackTraceElement element : elements) {\n          sb.append(element + \"<br>\");\n        }\n        sb.append(\"<\/font><\/b><br>\");\n        ex.printStackTrace();\n      }\n      String checkDone = makeTexti18n(\"checkDone\", new Object[] { new Integer(matches) });\n      sb.append(checkDone + \"<br>\\n\");\n      resultArea.setText(HTML_FONT_START + sb.toString() + HTML_FONT_END);\n      resultArea.setCaretPosition(0);\n    }\n  }","commit_id":"9b2bd1d4d73478c828c81020291dd7f656272c2b","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"private void createGUI() {\n    frame = new JFrame(\"LanguageTool \" +JLanguageTool.VERSION+ \" Demo\");\n    frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);\n    frame.addWindowListener(new CloseListener());\n    frame.setIconImage(new ImageIcon(WINDOW_ICON_URL).getImage());\n    frame.setJMenuBar(new MainMenuBar(this));\n\n    textArea = new JTextArea(\"This is a example input to to show you how JLanguageTool works. \" +\n        \"Note, however, that it does not include a spell checka.\");\n    // TODO: wrong line number is displayed for lines that are wrapped automatically:\n    textArea.setLineWrap(true);\n    textArea.setWrapStyleWord(true);\n    resultArea = new JTextPane();\n    resultArea.setContentType(\"text/html\");\n    resultArea.setText(HTML_FONT_START + \"Results will appear here\" + HTML_FONT_END);\n    JLabel label = new JLabel(\"Please type or paste text to check in the top area\");\n    JButton button = new JButton(CHECK_TEXT_BUTTON);\n    button.setMnemonic('c'); \n    button.addActionListener(this);\n\n    JPanel panel = new JPanel();\n    panel.setLayout(new GridBagLayout());\n    GridBagConstraints buttonCons = new GridBagConstraints();\n    buttonCons.gridx = 0;\n    buttonCons.gridy = 0;\n    panel.add(button, buttonCons);\n    buttonCons.gridx = 1;\n    buttonCons.gridy = 0;\n    panel.add(new JLabel(\" in: \"), buttonCons);\n    buttonCons.gridx = 2;\n    buttonCons.gridy = 0;\n    langBox = new JComboBox();\n    for (Language lang : Language.LANGUAGES) {\n      if (lang != Language.DEMO) {\n        langBox.addItem(lang);\n      }\n    }\n    panel.add(langBox, buttonCons);\n\n    Container contentPane = frame.getContentPane();\n    GridBagLayout gridLayout = new GridBagLayout();\n    contentPane.setLayout(gridLayout);\n    GridBagConstraints cons = new GridBagConstraints();\n    cons.insets = new Insets(5, 5, 5, 5);\n    cons.fill = GridBagConstraints.BOTH;\n    cons.weightx = 10.0f;\n    cons.weighty = 10.0f;\n    cons.gridx = 0;\n    cons.gridy = 1;\n    cons.weighty = 5.0f;\n    JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, new JScrollPane(textArea),\n        new JScrollPane(resultArea));\n    splitPane.setDividerLocation(200);\n    contentPane.add(splitPane, cons);\n\n    cons.fill = GridBagConstraints.NONE;\n    cons.gridx = 0;\n    cons.gridy = 2;\n    cons.weighty = 0.0f;\n    cons.insets = new Insets(3,3,3,3);\n    //cons.fill = GridBagConstraints.NONE;\n    contentPane.add(label, cons);\n    cons.gridy = 3;\n    contentPane.add(panel, cons);\n    \n    frame.pack();\n    frame.setSize(600, 600);\n  }","id":46289,"modified_method":"private void createGUI() {\n    frame = new JFrame(\"LanguageTool \" + JLanguageTool.VERSION);\n    frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);\n    frame.addWindowListener(new CloseListener());\n    frame.setIconImage(new ImageIcon(WINDOW_ICON_URL).getImage());\n    frame.setJMenuBar(new MainMenuBar(this, messages));\n\n    textArea = new JTextArea(messages.getString(\"guiDemoText\"));\n    // TODO: wrong line number is displayed for lines that are wrapped automatically:\n    textArea.setLineWrap(true);\n    textArea.setWrapStyleWord(true);\n    resultArea = new JTextPane();\n    resultArea.setContentType(\"text/html\");\n    resultArea.setText(HTML_FONT_START + messages.getString(\"resultAreaText\") + HTML_FONT_END);\n    JLabel label = new JLabel(messages.getString(\"enterText\"));\n    JButton button = new JButton(messages.getString(\"checkText\"));\n    button.setMnemonic('c'); \n    button.addActionListener(this);\n\n    JPanel panel = new JPanel();\n    panel.setLayout(new GridBagLayout());\n    GridBagConstraints buttonCons = new GridBagConstraints();\n    buttonCons.gridx = 0;\n    buttonCons.gridy = 0;\n    panel.add(button, buttonCons);\n    buttonCons.gridx = 1;\n    buttonCons.gridy = 0;\n    panel.add(new JLabel(\" \" + messages.getString(\"textLanguage\") + \" \"), buttonCons);\n    buttonCons.gridx = 2;\n    buttonCons.gridy = 0;\n    langBox = new JComboBox();\n    for (Language lang : Language.LANGUAGES) {\n      if (lang != Language.DEMO) {\n        langBox.addItem(lang);\n      }\n    }\n    // use the system default language to preselect the language from the combo box: \n    langBox.setSelectedItem(Language.getLanguageForShortName(Locale.getDefault().getLanguage()));\n    panel.add(langBox, buttonCons);\n\n    Container contentPane = frame.getContentPane();\n    GridBagLayout gridLayout = new GridBagLayout();\n    contentPane.setLayout(gridLayout);\n    GridBagConstraints cons = new GridBagConstraints();\n    cons.insets = new Insets(5, 5, 5, 5);\n    cons.fill = GridBagConstraints.BOTH;\n    cons.weightx = 10.0f;\n    cons.weighty = 10.0f;\n    cons.gridx = 0;\n    cons.gridy = 1;\n    cons.weighty = 5.0f;\n    JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, new JScrollPane(textArea),\n        new JScrollPane(resultArea));\n    splitPane.setDividerLocation(200);\n    contentPane.add(splitPane, cons);\n\n    cons.fill = GridBagConstraints.NONE;\n    cons.gridx = 0;\n    cons.gridy = 2;\n    cons.weighty = 0.0f;\n    cons.insets = new Insets(3,3,3,3);\n    //cons.fill = GridBagConstraints.NONE;\n    contentPane.add(label, cons);\n    cons.gridy = 3;\n    contentPane.add(panel, cons);\n    \n    frame.pack();\n    frame.setSize(600, 600);\n  }","commit_id":"9b2bd1d4d73478c828c81020291dd7f656272c2b","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"private Main() throws IOException {\n    config = new Configuration(new File(System.getProperty(\"user.home\")), CONFIG_FILE);\n    maybeStartServer();\n  }","id":46290,"modified_method":"private Main() throws IOException {\n    config = new Configuration(new File(System.getProperty(\"user.home\")), CONFIG_FILE);\n    messages = JLanguageTool.getMessageBundle();\n    maybeStartServer();\n  }","commit_id":"9b2bd1d4d73478c828c81020291dd7f656272c2b","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"private int checkText(final JLanguageTool langTool, final String text, final StringBuilder sb) throws IOException {\n    long startTime = System.currentTimeMillis();\n    List<RuleMatch> ruleMatches = langTool.check(text);\n    long startTimeMatching = System.currentTimeMillis();\n    int i = 0;\n    for (RuleMatch match : ruleMatches) {\n      sb.append(\"<br>\\n<b>\" +(i+1)+ \". Line \" + (match.getLine() + 1) + \", column \" + match.getColumn()\n          + \"<\/b><br>\\n\");\n      String msg = match.getMessage();\n      msg = msg.replaceAll(\"<suggestion>\", \"<b>\");\n      msg = msg.replaceAll(\"<\/suggestion>\", \"<\/b>\");\n      msg = msg.replaceAll(\"<old>\", \"<b>\");\n      msg = msg.replaceAll(\"<\/old>\", \"<\/b>\");\n      sb.append(\"<b>Message:<\/b> \" + msg + \"<br>\\n\");\n      String context = Tools.getContext(match.getFromPos(), match.getToPos(), text);\n      sb.append(\"<b>Context:<\/b> \" + context);\n      sb.append(\"<br>\\n\");\n      i++;\n    }\n    long endTime = System.currentTimeMillis();\n    sb.append(\"<br>\\nTime: \" + (endTime - startTime) + \"ms (including \"\n        + (endTime - startTimeMatching) + \"ms for rule matching)<br>\\n\");\n    return ruleMatches.size();\n  }","id":46291,"modified_method":"private int checkText(final JLanguageTool langTool, final String text, final StringBuilder sb) throws IOException {\n    long startTime = System.currentTimeMillis();\n    List<RuleMatch> ruleMatches = langTool.check(text);\n    long startTimeMatching = System.currentTimeMillis();\n    int i = 0;\n    for (RuleMatch match : ruleMatches) {\n      String output = makeTexti18n(\"result1\", new Object[] {\n          new Integer(i+1), new Integer(match.getLine()+1), new Integer(match.getColumn())\n      });\n      sb.append(output);\n      String msg = match.getMessage();\n      msg = msg.replaceAll(\"<suggestion>\", \"<b>\");\n      msg = msg.replaceAll(\"<\/suggestion>\", \"<\/b>\");\n      msg = msg.replaceAll(\"<old>\", \"<b>\");\n      msg = msg.replaceAll(\"<\/old>\", \"<\/b>\");\n      sb.append(\"<b>\" +messages.getString(\"errorMessage\")+ \"<\/b> \" + msg + \"<br>\\n\");\n      String context = Tools.getContext(match.getFromPos(), match.getToPos(), text);\n      sb.append(\"<b>\" +messages.getString(\"errorContext\")+ \"<\/b> \" + context);\n      sb.append(\"<br>\\n\");\n      i++;\n    }\n    long endTime = System.currentTimeMillis();\n    sb.append(makeTexti18n(\"resultTime\", new Object[] {\n       new Long(endTime - startTime), new Long(endTime - startTimeMatching)\n    }));\n    return ruleMatches.size();\n  }","commit_id":"9b2bd1d4d73478c828c81020291dd7f656272c2b","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"void loadFile() {\n    JFileChooser jfc = new JFileChooser();\n    jfc.setFileFilter(new PlainTextFilter());\n    jfc.showOpenDialog(frame);\n    try {\n      File file = jfc.getSelectedFile();\n      if (file == null)   // user cancelled\n        return;\n      String fileContents = StringTools.readFile(file.getAbsolutePath());\n      textArea.setText(fileContents);\n      JLanguageTool langTool = getCurrentLanguageTool();\n      checkTextAndDisplayResults(langTool, getCurrentLanguage().getName());\n    } catch (IOException e) {\n      showError(e);\n    }\n  }","id":46292,"modified_method":"void loadFile() {\n    JFileChooser jfc = new JFileChooser();\n    jfc.setFileFilter(new PlainTextFilter());\n    jfc.showOpenDialog(frame);\n    try {\n      File file = jfc.getSelectedFile();\n      if (file == null)   // user cancelled\n        return;\n      String fileContents = StringTools.readFile(file.getAbsolutePath());\n      textArea.setText(fileContents);\n      JLanguageTool langTool = getCurrentLanguageTool();\n      checkTextAndDisplayResults(langTool, getCurrentLanguage());\n    } catch (IOException e) {\n      showError(e);\n    }\n  }","commit_id":"9b2bd1d4d73478c828c81020291dd7f656272c2b","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"public void actionPerformed(final ActionEvent e) {\n    if (e.getActionCommand().equals(CHECK_TEXT_BUTTON)) {\n      JLanguageTool langTool = getCurrentLanguageTool();\n      checkTextAndDisplayResults(langTool, getCurrentLanguage().getName());\n    } else {\n      throw new IllegalArgumentException(\"Unknown action \" + e);\n    }\n  }","id":46293,"modified_method":"public void actionPerformed(final ActionEvent e) {\n    if (e.getActionCommand().equals(messages.getString(\"checkText\"))) {\n      JLanguageTool langTool = getCurrentLanguageTool();\n      checkTextAndDisplayResults(langTool, getCurrentLanguage());\n    } else {\n      throw new IllegalArgumentException(\"Unknown action \" + e);\n    }\n  }","commit_id":"9b2bd1d4d73478c828c81020291dd7f656272c2b","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"public void actionPerformed(ActionEvent e) {\n    if (e.getActionCommand().equals(OPEN)) {\n      prg.loadFile();\n    } else if (e.getActionCommand().equals(CHECK_CLIPBOARD_TEXT)) {\n      prg.checkClipboardText();\n    } else if (e.getActionCommand().equals(DOCK_TO_TRAY)) {\n      prg.hideToTray();\n    } else if (e.getActionCommand().equals(OPTIONS)) {\n      prg.showOptions();\n    } else if (e.getActionCommand().equals(QUIT)) {\n      prg.quit();\n    } else if (e.getActionCommand().equals(ABOUT)) {\n      JOptionPane.showMessageDialog(null, \"LanguageTool \" + JLanguageTool.VERSION + \"\\n\" + \n          \"Copyright (C) 2005-2006 Daniel Naber\\n\"+\n          \"This software is licensed under the GNU Lesser General Public License.\\n\"+\n          \"LanguageTool Homepage: http://www.danielnaber.de/languagetool\");\n    } else {\n      throw new IllegalArgumentException(\"Unknown action \" + e);\n    }\n  }","id":46294,"modified_method":"public void actionPerformed(ActionEvent e) {\n    if (e.getActionCommand().equals(openText)) {\n      prg.loadFile();\n    } else if (e.getActionCommand().equals(checkClipboardText)) {\n      prg.checkClipboardText();\n    } else if (e.getActionCommand().equals(docktoTrayText)) {\n      prg.hideToTray();\n    } else if (e.getActionCommand().equals(optionsText)) {\n      prg.showOptions();\n    } else if (e.getActionCommand().equals(quitText)) {\n      prg.quit();\n    } else if (e.getActionCommand().equals(aboutText)) {\n      JOptionPane.showMessageDialog(null, \"LanguageTool \" + JLanguageTool.VERSION + \"\\n\" + \n          \"Copyright (C) 2005-2006 Daniel Naber\\n\"+\n          \"This software is licensed under the GNU Lesser General Public License.\\n\"+\n          \"LanguageTool Homepage: http://www.danielnaber.de/languagetool\");\n    } else {\n      throw new IllegalArgumentException(\"Unknown action \" + e);\n    }\n  }","commit_id":"9b2bd1d4d73478c828c81020291dd7f656272c2b","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"public void actionPerformed(ActionEvent event) {\n    if (event.getActionCommand().equals(CHANGE_BUTTON)) {\n      changeText();\n    } else if (event.getActionCommand().equals(IGNORE_BUTTON)) {\n      gotoNextMatch();\n    } else if (event.getActionCommand().equals(IGNORE_ALL_BUTTON)) {\n      ignoreAll();\n      gotoNextMatch();\n    } else if (event.getActionCommand().equals(OPTIONS_BUTTON)) {\n      ConfigurationDialog cfgDialog = new ConfigurationDialog(true);\n      cfgDialog.setMotherTongue(configuration.getMotherTongue());\n      cfgDialog.setDisabledRules(configuration.getDisabledRuleIds());\n      cfgDialog.show(rules);\n      configuration.setDisabledRuleIds(cfgDialog.getDisabledRuleIds());\n      configuration.setMotherTongue(cfgDialog.getMotherTongue());\n    } else if (event.getActionCommand().equals(CLOSE_BUTTON)) {\n      close();\n    } else {\n      System.err.println(\"Unknown action: \" + event);\n    }\n  }","id":46295,"modified_method":"public void actionPerformed(ActionEvent event) {\n    if (event.getActionCommand().equals(CHANGE_BUTTON)) {\n      changeText();\n    } else if (event.getActionCommand().equals(IGNORE_BUTTON)) {\n      gotoNextMatch();\n    } else if (event.getActionCommand().equals(IGNORE_ALL_BUTTON)) {\n      ignoreAll();\n      gotoNextMatch();\n    } else if (event.getActionCommand().equals(OPTIONS_BUTTON)) {\n      ConfigurationDialog cfgDialog = new ConfigurationDialog(true, true);\n      cfgDialog.setMotherTongue(configuration.getMotherTongue());\n      cfgDialog.setDisabledRules(configuration.getDisabledRuleIds());\n      cfgDialog.show(rules);\n      configuration.setDisabledRuleIds(cfgDialog.getDisabledRuleIds());\n      configuration.setMotherTongue(cfgDialog.getMotherTongue());\n    } else if (event.getActionCommand().equals(CLOSE_BUTTON)) {\n      close();\n    } else {\n      System.err.println(\"Unknown action: \" + event);\n    }\n  }","commit_id":"9b2bd1d4d73478c828c81020291dd7f656272c2b","url":"https://github.com/languagetool-org/languagetool"},{"original_method":"/**\n\t * @see org.apache.wicket.examples.WicketExampleApplication#init()\n\t */\n\t@Override\n\tprotected void init()\n\t{\n\t\tsuper.init();\n\n\t\t// mount single bookmarkable pages\n\t\tmountPage(\"/the/homepage/path\", Home.class);\n\t\tmountPage(\"/a/nice/path/to/the/first/page\", Page1.class);\n\t\tmountPage(\"/path/to/page2\", Page2.class);\n\t\tmountPage(\"/path/to/page2qpencoded\", Page2QP.class);\n\n\t\t// mount a whole package at once (all bookmarkable pages,\n\t\t// the relative class name will be part of the url\n\n\t\t// maybe not the neatest sight, but for package mounting it makes\n\t\t// sense to use one of the (important) classes in your package, so\n\t\t// that any refactoring (like a package rename) will automatically\n\t\t// be applied here.\n\t\tgetRootRequestMapperAsCompound().add(\n\t\t\tnew PackageMapper(\"/my/mounted/package\", PackageName.forClass(Page3.class)));\n\t}","id":46296,"modified_method":"/**\n\t * @see org.apache.wicket.examples.WicketExampleApplication#init()\n\t */\n\t@Override\n\tprotected void init()\n\t{\n\t\tsuper.init();\n\n\t\t// mount single bookmarkable pages\n\t\tmountPage(\"/the/homepage/path\", Home.class);\n\t\tmountPage(\"/a/nice/path/to/the/first/page\", Page1.class);\n\t\tmountPage(\"/path/to/page2\", Page2.class);\n\t\tmountPage(\"/path/to/page2qpencoded\", Page2QP.class);\n\n\t\t// mount a whole package at once (all bookmarkable pages,\n\t\t// the relative class name will be part of the url\n\n\t\t// maybe not the neatest sight, but for package mounting it makes\n\t\t// sense to use one of the (important) classes in your package, so\n\t\t// that any refactoring (like a package rename) will automatically\n\t\t// be applied here.\n\t\tgetRootRequestMapperAsCompound().add(\n\t\t\tnew MountMapper(\"/my/mounted/package\", new PackageMapper(\n\t\t\t\tPackageName.forClass(Page3.class))));\n\t}","commit_id":"0c7775946277419d8f94396ea4863a75ed7d71a8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Construct.\n\t * \n\t * @param mountPath\n\t * @param packageName\n\t */\n\tpublic PackageMapper(final String mountPath, final PackageName packageName)\n\t{\n\t\tthis(mountPath, packageName, new PageParametersEncoder());\n\t}","id":46297,"modified_method":"/**\n\t * Construct.\n\t * \n\t * @param packageName\n\t */\n\tpublic PackageMapper(final PackageName packageName)\n\t{\n\t\tthis(packageName, new PageParametersEncoder());\n\t}","commit_id":"0c7775946277419d8f94396ea4863a75ed7d71a8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Construct.\n\t * \n\t * @param mountPath\n\t * @param packageName\n\t * @param pageParametersEncoder\n\t */\n\tpublic PackageMapper(final String mountPath, final PackageName packageName,\n\t\tfinal IPageParametersEncoder pageParametersEncoder)\n\t{\n\t\tArgs.notNull(mountPath, \"mountPath\");\n\t\tArgs.notNull(packageName, \"packageName\");\n\t\tArgs.notNull(pageParametersEncoder, \"pageParametersEncoder\");\n\n\t\tthis.mountPath = mountPath;\n\t\tthis.packageName = packageName;\n\t\tthis.pageParametersEncoder = pageParametersEncoder;\n\t}","id":46298,"modified_method":"/**\n\t * Construct.\n\t * \n\t * @param packageName\n\t * @param pageParametersEncoder\n\t */\n\tpublic PackageMapper(final PackageName packageName,\n\t\tfinal IPageParametersEncoder pageParametersEncoder)\n\t{\n\t\tArgs.notNull(packageName, \"packageName\");\n\t\tArgs.notNull(pageParametersEncoder, \"pageParametersEncoder\");\n\n\t\tthis.packageName = packageName;\n\t\tthis.pageParametersEncoder = pageParametersEncoder;\n\t}","commit_id":"0c7775946277419d8f94396ea4863a75ed7d71a8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @see org.apache.wicket.request.mapper.AbstractBookmarkableMapper#parseRequest(org.apache.wicket.request.Request)\n\t */\n\t@Override\n\tprotected UrlInfo parseRequest(Request request)\n\t{\n\t\tUrl url = request.getUrl();\n\t\tif (url.getSegments().size() >= 1 && urlStartsWith(url, mountPath))\n\t\t{\n\t\t\t// try to extract page and component information from URL\n\t\t\tPageComponentInfo info = getPageComponentInfo(url);\n\n\t\t\t// load the page class\n\t\t\tString className = url.getSegments().get(1);\n\t\t\tString fullyQualifiedClassName = packageName.getName() + '.' + className;\n\t\t\tClass<? extends IRequestablePage> pageClass = getPageClass(fullyQualifiedClassName);\n\n\t\t\tif (pageClass != null && IRequestablePage.class.isAssignableFrom(pageClass))\n\t\t\t{\n\t\t\t\t// extract the PageParameters from URL if there are any\n\t\t\t\tPageParameters pageParameters = extractPageParameters(request, 2,\n\t\t\t\t\tpageParametersEncoder);\n\n\t\t\t\treturn new UrlInfo(info, pageClass, pageParameters);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}","id":46299,"modified_method":"/**\n\t * @see org.apache.wicket.request.mapper.AbstractBookmarkableMapper#parseRequest(org.apache.wicket.request.Request)\n\t */\n\t@Override\n\tprotected UrlInfo parseRequest(Request request)\n\t{\n\t\tUrl url = request.getUrl();\n\t\tif (url.getSegments().size() >= 1)\n\t\t{\n\t\t\t// try to extract page and component information from URL\n\t\t\tPageComponentInfo info = getPageComponentInfo(url);\n\n\t\t\t// load the page class\n\t\t\tString className = url.getSegments().get(0);\n\t\t\tString fullyQualifiedClassName = packageName.getName() + '.' + className;\n\t\t\tClass<? extends IRequestablePage> pageClass = getPageClass(fullyQualifiedClassName);\n\n\t\t\tif (pageClass != null && IRequestablePage.class.isAssignableFrom(pageClass))\n\t\t\t{\n\t\t\t\t// extract the PageParameters from URL if there are any\n\t\t\t\tPageParameters pageParameters = extractPageParameters(request, 1,\n\t\t\t\t\tpageParametersEncoder);\n\n\t\t\t\treturn new UrlInfo(info, pageClass, pageParameters);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}","commit_id":"0c7775946277419d8f94396ea4863a75ed7d71a8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @see org.apache.wicket.request.mapper.AbstractBookmarkableMapper#buildUrl(org.apache.wicket.request.mapper.AbstractBookmarkableMapper.UrlInfo)\n\t */\n\t@Override\n\tprotected Url buildUrl(UrlInfo info)\n\t{\n\t\tClass<? extends IRequestablePage> pageClass = info.getPageClass();\n\t\tif (PackageName.forClass(pageClass).equals(packageName))\n\t\t{\n\t\t\tUrl url = new Url();\n\t\t\turl.getSegments().add(mountPath);\n\t\t\turl.getSegments().add(pageClass.getSimpleName());\n\n\t\t\tencodePageComponentInfo(url, info.getPageComponentInfo());\n\n\t\t\treturn encodePageParameters(url, info.getPageParameters(), pageParametersEncoder);\n\t\t}\n\n\t\treturn null;\n\t}","id":46300,"modified_method":"/**\n\t * @see org.apache.wicket.request.mapper.AbstractBookmarkableMapper#buildUrl(org.apache.wicket.request.mapper.AbstractBookmarkableMapper.UrlInfo)\n\t */\n\t@Override\n\tprotected Url buildUrl(UrlInfo info)\n\t{\n\t\tClass<? extends IRequestablePage> pageClass = info.getPageClass();\n\t\tif (PackageName.forClass(pageClass).equals(packageName))\n\t\t{\n\t\t\tUrl url = new Url();\n\t\t\turl.getSegments().add(pageClass.getSimpleName());\n\t\t\tencodePageComponentInfo(url, info.getPageComponentInfo());\n\t\t\treturn encodePageParameters(url, info.getPageParameters(), pageParametersEncoder);\n\t\t}\n\n\t\treturn null;\n\t}","commit_id":"0c7775946277419d8f94396ea4863a75ed7d71a8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t */\n\tpublic void testDecode3()\n\t{\n\t\tUrl url = Url.parse(MOUNT_PATH + \"/\" + PAGE_CLASS_NAME + \"?15\");\n\t\tIRequestHandler handler = encoder.mapRequest(getRequest(url));\n\n\t\tassertTrue(handler instanceof RenderPageRequestHandler);\n\t\tIRequestablePage page = ((RenderPageRequestHandler)handler).getPage();\n\t\tcheckPage(page, 15);\n\t}","id":46301,"modified_method":"/**\n\t * \n\t */\n\tpublic void testDecode3()\n\t{\n\t\tUrl url = Url.parse(PAGE_CLASS_NAME + \"?15\");\n\t\tIRequestHandler handler = encoder.mapRequest(getRequest(url));\n\n\t\tassertTrue(handler instanceof RenderPageRequestHandler);\n\t\tIRequestablePage page = ((RenderPageRequestHandler)handler).getPage();\n\t\tcheckPage(page, 15);\n\t}","commit_id":"0c7775946277419d8f94396ea4863a75ed7d71a8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t */\n\tpublic void testDecode4()\n\t{\n\t\tUrl url = Url.parse(MOUNT_PATH + \"/\" + PAGE_CLASS_NAME + \"/i1/i2?15&a=b&b=c\");\n\t\tIRequestHandler handler = encoder.mapRequest(getRequest(url));\n\n\t\tassertTrue(handler instanceof RenderPageRequestHandler);\n\t\tIRequestablePage page = ((RenderPageRequestHandler)handler).getPage();\n\t\tcheckPage(page, 15);\n\n\t\tPageParameters p = page.getPageParameters();\n\t\tassertEquals(2, p.getIndexedCount());\n\t\tassertEquals(\"i1\", p.get(0).toString());\n\t\tassertEquals(\"i2\", p.get(1).toString());\n\n\t\tassertEquals(2, p.getNamedKeys().size());\n\t\tassertEquals(\"b\", p.get(\"a\").toString());\n\t\tassertEquals(\"c\", p.get(\"b\").toString());\n\t}","id":46302,"modified_method":"/**\n\t * \n\t */\n\tpublic void testDecode4()\n\t{\n\t\tUrl url = Url.parse(PAGE_CLASS_NAME + \"/i1/i2?15&a=b&b=c\");\n\t\tIRequestHandler handler = encoder.mapRequest(getRequest(url));\n\n\t\tassertTrue(handler instanceof RenderPageRequestHandler);\n\t\tIRequestablePage page = ((RenderPageRequestHandler)handler).getPage();\n\t\tcheckPage(page, 15);\n\n\t\tPageParameters p = page.getPageParameters();\n\t\tassertEquals(2, p.getIndexedCount());\n\t\tassertEquals(\"i1\", p.get(0).toString());\n\t\tassertEquals(\"i2\", p.get(1).toString());\n\n\t\tassertEquals(2, p.getNamedKeys().size());\n\t\tassertEquals(\"b\", p.get(\"a\").toString());\n\t\tassertEquals(\"c\", p.get(\"b\").toString());\n\t}","commit_id":"0c7775946277419d8f94396ea4863a75ed7d71a8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t */\n\tpublic void testEncode7()\n\t{\n\t\tMockPage page = new MockPage(15);\n\t\tpage.getPageParameters().set(0, \"i1\");\n\t\tpage.getPageParameters().set(1, \"i2\");\n\t\tpage.getPageParameters().set(\"a\", \"b\");\n\t\tpage.getPageParameters().set(\"b\", \"c\");\n\n\t\t// shouldn't make any difference for BookmarkableListenerInterfaceRequestHandler,\n\t\t// as this explicitely says the url must be bookmarkable\n\t\tpage.setCreatedBookmarkable(false);\n\n\t\tIRequestableComponent c = page.get(\"foo:bar\");\n\n\t\tPageAndComponentProvider provider = new PageAndComponentProvider(page, c);\n\t\tIRequestHandler handler = new BookmarkableListenerInterfaceRequestHandler(provider,\n\t\t\tILinkListener.INTERFACE, 4);\n\n\t\tUrl url = encoder.mapHandler(handler);\n\n\t\tassertEquals(MOUNT_PATH + \"/\" + PAGE_CLASS_NAME +\n\t\t\t\"/i1/i2?15-0.ILinkListener.4-foo-bar&a=b&b=c\", url.toString());\n\t}","id":46303,"modified_method":"/**\n\t * \n\t */\n\tpublic void testEncode7()\n\t{\n\t\tMockPage page = new MockPage(15);\n\t\tpage.getPageParameters().set(0, \"i1\");\n\t\tpage.getPageParameters().set(1, \"i2\");\n\t\tpage.getPageParameters().set(\"a\", \"b\");\n\t\tpage.getPageParameters().set(\"b\", \"c\");\n\n\t\t// shouldn't make any difference for BookmarkableListenerInterfaceRequestHandler,\n\t\t// as this explicitely says the url must be bookmarkable\n\t\tpage.setCreatedBookmarkable(false);\n\n\t\tIRequestableComponent c = page.get(\"foo:bar\");\n\n\t\tPageAndComponentProvider provider = new PageAndComponentProvider(page, c);\n\t\tIRequestHandler handler = new BookmarkableListenerInterfaceRequestHandler(provider,\n\t\t\tILinkListener.INTERFACE, 4);\n\n\t\tUrl url = encoder.mapHandler(handler);\n\n\t\tassertEquals(PAGE_CLASS_NAME + \"/i1/i2?15-0.ILinkListener.4-foo-bar&a=b&b=c\",\n\t\t\turl.toString());\n\t}","commit_id":"0c7775946277419d8f94396ea4863a75ed7d71a8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t */\n\tpublic void testEncode2()\n\t{\n\t\tPageParameters parameters = new PageParameters();\n\t\tparameters.set(0, \"i1\");\n\t\tparameters.set(1, \"i2\");\n\t\tparameters.set(\"a\", \"b\");\n\t\tparameters.set(\"b\", \"c\");\n\t\tPageProvider provider = new PageProvider(MockPage.class, parameters);\n\t\tprovider.setPageSource(context);\n\t\tIRequestHandler handler = new BookmarkablePageRequestHandler(provider);\n\t\tUrl url = encoder.mapHandler(handler);\n\t\tassertEquals(MOUNT_PATH + \"/\" + PAGE_CLASS_NAME + \"/i1/i2?a=b&b=c\", url.toString());\n\t}","id":46304,"modified_method":"/**\n\t * \n\t */\n\tpublic void testEncode2()\n\t{\n\t\tPageParameters parameters = new PageParameters();\n\t\tparameters.set(0, \"i1\");\n\t\tparameters.set(1, \"i2\");\n\t\tparameters.set(\"a\", \"b\");\n\t\tparameters.set(\"b\", \"c\");\n\t\tPageProvider provider = new PageProvider(MockPage.class, parameters);\n\t\tprovider.setPageSource(context);\n\t\tIRequestHandler handler = new BookmarkablePageRequestHandler(provider);\n\t\tUrl url = encoder.mapHandler(handler);\n\t\tassertEquals(PAGE_CLASS_NAME + \"/i1/i2?a=b&b=c\", url.toString());\n\t}","commit_id":"0c7775946277419d8f94396ea4863a75ed7d71a8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t */\n\tpublic void testDecode1()\n\t{\n\t\tUrl url = Url.parse(MOUNT_PATH + \"/\" + PAGE_CLASS_NAME);\n\t\tIRequestHandler handler = encoder.mapRequest(getRequest(url));\n\n\t\tassertTrue(handler instanceof RenderPageRequestHandler);\n\t\tIRequestablePage page = ((RenderPageRequestHandler)handler).getPage();\n\t\tassertEquals(PAGE_CLASS_NAME, page.getClass().getSimpleName());\n\t\tassertEquals(0, page.getPageParameters().getIndexedCount());\n\t\tassertTrue(page.getPageParameters().getNamedKeys().isEmpty());\n\t}","id":46305,"modified_method":"/**\n\t * \n\t */\n\tpublic void testDecode1()\n\t{\n\t\tUrl url = Url.parse(PAGE_CLASS_NAME);\n\t\tIRequestHandler handler = encoder.mapRequest(getRequest(url));\n\n\t\tassertTrue(handler instanceof RenderPageRequestHandler);\n\t\tIRequestablePage page = ((RenderPageRequestHandler)handler).getPage();\n\t\tassertEquals(PAGE_CLASS_NAME, page.getClass().getSimpleName());\n\t\tassertEquals(0, page.getPageParameters().getIndexedCount());\n\t\tassertTrue(page.getPageParameters().getNamedKeys().isEmpty());\n\t}","commit_id":"0c7775946277419d8f94396ea4863a75ed7d71a8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t */\n\tpublic void testEncode4()\n\t{\n\t\tMockPage page = new MockPage(15);\n\t\tpage.getPageParameters().set(0, \"i1\");\n\t\tpage.getPageParameters().set(1, \"i2\");\n\t\tpage.getPageParameters().set(\"a\", \"b\");\n\t\tpage.getPageParameters().set(\"b\", \"c\");\n\t\tpage.setCreatedBookmarkable(true);\n\n\t\tIPageProvider provider = new PageProvider(page);\n\t\tIRequestHandler handler = new RenderPageRequestHandler(provider);\n\t\tUrl url = encoder.mapHandler(handler);\n\n\t\tassertEquals(MOUNT_PATH + \"/\" + PAGE_CLASS_NAME + \"/i1/i2?15&a=b&b=c\", url.toString());\n\t}","id":46306,"modified_method":"/**\n\t * \n\t */\n\tpublic void testEncode4()\n\t{\n\t\tMockPage page = new MockPage(15);\n\t\tpage.getPageParameters().set(0, \"i1\");\n\t\tpage.getPageParameters().set(1, \"i2\");\n\t\tpage.getPageParameters().set(\"a\", \"b\");\n\t\tpage.getPageParameters().set(\"b\", \"c\");\n\t\tpage.setCreatedBookmarkable(true);\n\n\t\tIPageProvider provider = new PageProvider(page);\n\t\tIRequestHandler handler = new RenderPageRequestHandler(provider);\n\t\tUrl url = encoder.mapHandler(handler);\n\n\t\tassertEquals(PAGE_CLASS_NAME + \"/i1/i2?15&a=b&b=c\", url.toString());\n\t}","commit_id":"0c7775946277419d8f94396ea4863a75ed7d71a8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t */\n\tpublic void testEncode3()\n\t{\n\t\tPageParameters parameters = new PageParameters();\n\t\tparameters.set(0, \"i1\");\n\t\tparameters.set(1, \"i2\");\n\t\tparameters.set(\"a\", \"b\");\n\t\tparameters.set(\"b\", \"c\");\n\n\t\tPageProvider provider = new PageProvider(MockPage.class, parameters);\n\t\tprovider.setPageSource(context);\n\t\tIRequestHandler handler = new BookmarkablePageRequestHandler(provider);\n\t\tUrl url = encoder.mapHandler(handler);\n\n\t\tassertEquals(MOUNT_PATH + \"/\" + PAGE_CLASS_NAME + \"/i1/i2?a=b&b=c\", url.toString());\n\t}","id":46307,"modified_method":"/**\n\t * \n\t */\n\tpublic void testEncode3()\n\t{\n\t\tPageParameters parameters = new PageParameters();\n\t\tparameters.set(0, \"i1\");\n\t\tparameters.set(1, \"i2\");\n\t\tparameters.set(\"a\", \"b\");\n\t\tparameters.set(\"b\", \"c\");\n\n\t\tPageProvider provider = new PageProvider(MockPage.class, parameters);\n\t\tprovider.setPageSource(context);\n\t\tIRequestHandler handler = new BookmarkablePageRequestHandler(provider);\n\t\tUrl url = encoder.mapHandler(handler);\n\n\t\tassertEquals(PAGE_CLASS_NAME + \"/i1/i2?a=b&b=c\", url.toString());\n\t}","commit_id":"0c7775946277419d8f94396ea4863a75ed7d71a8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t */\n\tpublic void testDecode2()\n\t{\n\t\tUrl url = Url.parse(MOUNT_PATH + \"/\" + PAGE_CLASS_NAME + \"/indexed1?a=b&b=c\");\n\t\tIRequestHandler handler = encoder.mapRequest(getRequest(url));\n\n\t\tassertTrue(handler instanceof RenderPageRequestHandler);\n\t\tIRequestablePage page = ((RenderPageRequestHandler)handler).getPage();\n\t\tassertEquals(PAGE_CLASS_NAME, page.getClass().getSimpleName());\n\n\t\tPageParameters p = page.getPageParameters();\n\t\tassertEquals(1, p.getIndexedCount());\n\t\tassertEquals(\"indexed1\", p.get(0).toString());\n\n\t\tassertEquals(2, p.getNamedKeys().size());\n\t\tassertEquals(\"b\", p.get(\"a\").toString());\n\t\tassertEquals(\"c\", p.get(\"b\").toString());\n\t}","id":46308,"modified_method":"/**\n\t * \n\t */\n\tpublic void testDecode2()\n\t{\n\t\tUrl url = Url.parse(PAGE_CLASS_NAME + \"/indexed1?a=b&b=c\");\n\t\tIRequestHandler handler = encoder.mapRequest(getRequest(url));\n\n\t\tassertTrue(handler instanceof RenderPageRequestHandler);\n\t\tIRequestablePage page = ((RenderPageRequestHandler)handler).getPage();\n\t\tassertEquals(PAGE_CLASS_NAME, page.getClass().getSimpleName());\n\n\t\tPageParameters p = page.getPageParameters();\n\t\tassertEquals(1, p.getIndexedCount());\n\t\tassertEquals(\"indexed1\", p.get(0).toString());\n\n\t\tassertEquals(2, p.getNamedKeys().size());\n\t\tassertEquals(\"b\", p.get(\"a\").toString());\n\t\tassertEquals(\"c\", p.get(\"b\").toString());\n\t}","commit_id":"0c7775946277419d8f94396ea4863a75ed7d71a8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t */\n\tpublic void testDecode9()\n\t{\n\t\tUrl url = Url.parse(MOUNT_PATH + \"/\" + PAGE_CLASS_NAME +\n\t\t\t\"/i1/i2?15-5.ILinkListener-foo-bar&a=b&b=c\");\n\n\t\tcontext.setNextPageRenderCount(6);\n\n\t\ttry\n\t\t{\n\t\t\tIRequestHandler handler = encoder.mapRequest(getRequest(url));\n\n\t\t\t((IPageRequestHandler)handler).getPage();\n\n\t\t\t// should never get here\n\t\t\tassertFalse(true);\n\t\t}\n\t\tcatch (StalePageException e)\n\t\t{\n\n\t\t}\n\t}","id":46309,"modified_method":"/**\n\t * \n\t */\n\tpublic void testDecode9()\n\t{\n\t\tUrl url = Url.parse(PAGE_CLASS_NAME + \"/i1/i2?15-5.ILinkListener-foo-bar&a=b&b=c\");\n\n\t\tcontext.setNextPageRenderCount(6);\n\n\t\ttry\n\t\t{\n\t\t\tIRequestHandler handler = encoder.mapRequest(getRequest(url));\n\n\t\t\t((IPageRequestHandler)handler).getPage();\n\n\t\t\t// should never get here\n\t\t\tassertFalse(true);\n\t\t}\n\t\tcatch (StalePageException e)\n\t\t{\n\n\t\t}\n\t}","commit_id":"0c7775946277419d8f94396ea4863a75ed7d71a8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t */\n\tpublic void testDecode6()\n\t{\n\t\tUrl url = Url.parse(MOUNT_PATH + \"/\" + PAGE_CLASS_NAME +\n\t\t\t\"/i1/i2?15-ILinkListener-foo-bar&a=b&b=c\");\n\t\tIRequestHandler handler = encoder.mapRequest(getRequest(url));\n\n\t\tassertTrue(handler instanceof ListenerInterfaceRequestHandler);\n\t\tListenerInterfaceRequestHandler h = (ListenerInterfaceRequestHandler)handler;\n\n\t\tIRequestablePage page = h.getPage();\n\t\tcheckPage(page, 15);\n\n\t\tassertEquals(ILinkListener.INTERFACE, h.getListenerInterface());\n\t\tassertEquals(\"foo:bar\", h.getComponent().getPageRelativePath());\n\n\t\tPageParameters p = page.getPageParameters();\n\t\tassertEquals(2, p.getIndexedCount());\n\t\tassertEquals(\"i1\", p.get(0).toString());\n\t\tassertEquals(\"i2\", p.get(1).toString());\n\n\t\tassertEquals(2, p.getNamedKeys().size());\n\t\tassertEquals(\"b\", p.get(\"a\").toString());\n\t\tassertEquals(\"c\", p.get(\"b\").toString());\n\t}","id":46310,"modified_method":"/**\n\t * \n\t */\n\tpublic void testDecode6()\n\t{\n\t\tUrl url = Url.parse(PAGE_CLASS_NAME + \"/i1/i2?15-ILinkListener-foo-bar&a=b&b=c\");\n\t\tIRequestHandler handler = encoder.mapRequest(getRequest(url));\n\n\t\tassertTrue(handler instanceof ListenerInterfaceRequestHandler);\n\t\tListenerInterfaceRequestHandler h = (ListenerInterfaceRequestHandler)handler;\n\n\t\tIRequestablePage page = h.getPage();\n\t\tcheckPage(page, 15);\n\n\t\tassertEquals(ILinkListener.INTERFACE, h.getListenerInterface());\n\t\tassertEquals(\"foo:bar\", h.getComponent().getPageRelativePath());\n\n\t\tPageParameters p = page.getPageParameters();\n\t\tassertEquals(2, p.getIndexedCount());\n\t\tassertEquals(\"i1\", p.get(0).toString());\n\t\tassertEquals(\"i2\", p.get(1).toString());\n\n\t\tassertEquals(2, p.getNamedKeys().size());\n\t\tassertEquals(\"b\", p.get(\"a\").toString());\n\t\tassertEquals(\"c\", p.get(\"b\").toString());\n\t}","commit_id":"0c7775946277419d8f94396ea4863a75ed7d71a8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t */\n\tpublic void testEncode6()\n\t{\n\t\tMockPage page = new MockPage(15);\n\t\tpage.getPageParameters().set(0, \"i1\");\n\t\tpage.getPageParameters().set(1, \"i2\");\n\t\tpage.getPageParameters().set(\"a\", \"b\");\n\t\tpage.getPageParameters().set(\"b\", \"c\");\n\n\t\t// shouldn't make any difference for BookmarkableListenerInterfaceRequestHandler,\n\t\t// as this explicitely says the url must be bookmarkable\n\t\tpage.setCreatedBookmarkable(false);\n\n\t\tIRequestableComponent c = page.get(\"foo:bar\");\n\n\t\tPageAndComponentProvider provider = new PageAndComponentProvider(page, c);\n\t\tIRequestHandler handler = new BookmarkableListenerInterfaceRequestHandler(provider,\n\t\t\tILinkListener.INTERFACE);\n\n\t\tUrl url = encoder.mapHandler(handler);\n\n\t\tassertEquals(MOUNT_PATH + \"/\" + PAGE_CLASS_NAME +\n\t\t\t\"/i1/i2?15-0.ILinkListener-foo-bar&a=b&b=c\", url.toString());\n\t}","id":46311,"modified_method":"/**\n\t * \n\t */\n\tpublic void testEncode6()\n\t{\n\t\tMockPage page = new MockPage(15);\n\t\tpage.getPageParameters().set(0, \"i1\");\n\t\tpage.getPageParameters().set(1, \"i2\");\n\t\tpage.getPageParameters().set(\"a\", \"b\");\n\t\tpage.getPageParameters().set(\"b\", \"c\");\n\n\t\t// shouldn't make any difference for BookmarkableListenerInterfaceRequestHandler,\n\t\t// as this explicitely says the url must be bookmarkable\n\t\tpage.setCreatedBookmarkable(false);\n\n\t\tIRequestableComponent c = page.get(\"foo:bar\");\n\n\t\tPageAndComponentProvider provider = new PageAndComponentProvider(page, c);\n\t\tIRequestHandler handler = new BookmarkableListenerInterfaceRequestHandler(provider,\n\t\t\tILinkListener.INTERFACE);\n\n\t\tUrl url = encoder.mapHandler(handler);\n\n\t\tassertEquals(PAGE_CLASS_NAME + \"/i1/i2?15-0.ILinkListener-foo-bar&a=b&b=c\", url.toString());\n\t}","commit_id":"0c7775946277419d8f94396ea4863a75ed7d71a8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t */\n\tpublic void testEncode1()\n\t{\n\t\tPageProvider provider = new PageProvider(MockPage.class, new PageParameters());\n\t\tprovider.setPageSource(context);\n\t\tIRequestHandler handler = new BookmarkablePageRequestHandler(provider);\n\t\tUrl url = encoder.mapHandler(handler);\n\t\tassertEquals(MOUNT_PATH + \"/\" + PAGE_CLASS_NAME, url.toString());\n\t}","id":46312,"modified_method":"/**\n\t * \n\t */\n\tpublic void testEncode1()\n\t{\n\t\tPageProvider provider = new PageProvider(MockPage.class, new PageParameters());\n\t\tprovider.setPageSource(context);\n\t\tIRequestHandler handler = new BookmarkablePageRequestHandler(provider);\n\t\tUrl url = encoder.mapHandler(handler);\n\t\tassertEquals(PAGE_CLASS_NAME, url.toString());\n\t}","commit_id":"0c7775946277419d8f94396ea4863a75ed7d71a8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t */\n\tpublic void testDecode7()\n\t{\n\t\tUrl url = Url.parse(MOUNT_PATH + \"/\" + PAGE_CLASS_NAME + \"?15-ILinkListener.4-foo-bar\");\n\t\tIRequestHandler handler = encoder.mapRequest(getRequest(url));\n\n\t\tassertTrue(handler instanceof ListenerInterfaceRequestHandler);\n\n\t\tListenerInterfaceRequestHandler h = (ListenerInterfaceRequestHandler)handler;\n\n\t\tIRequestablePage page = h.getPage();\n\t\tcheckPage(page, 15);\n\n\t\tassertEquals(ILinkListener.INTERFACE, h.getListenerInterface());\n\t\tassertEquals(\"foo:bar\", h.getComponent().getPageRelativePath());\n\t\tassertEquals((Object)4, h.getBehaviorIndex());\n\t}","id":46313,"modified_method":"/**\n\t * \n\t */\n\tpublic void testDecode7()\n\t{\n\t\tUrl url = Url.parse(PAGE_CLASS_NAME + \"?15-ILinkListener.4-foo-bar\");\n\t\tIRequestHandler handler = encoder.mapRequest(getRequest(url));\n\n\t\tassertTrue(handler instanceof ListenerInterfaceRequestHandler);\n\n\t\tListenerInterfaceRequestHandler h = (ListenerInterfaceRequestHandler)handler;\n\n\t\tIRequestablePage page = h.getPage();\n\t\tcheckPage(page, 15);\n\n\t\tassertEquals(ILinkListener.INTERFACE, h.getListenerInterface());\n\t\tassertEquals(\"foo:bar\", h.getComponent().getPageRelativePath());\n\t\tassertEquals((Object)4, h.getBehaviorIndex());\n\t}","commit_id":"0c7775946277419d8f94396ea4863a75ed7d71a8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t */\n\tpublic void testEncode8()\n\t{\n\t\tMockPage page = new MockPage(15);\n\t\tpage.setBookmarkable(true);\n\t\tpage.setCreatedBookmarkable(true);\n\t\tpage.setPageStateless(true);\n\n\t\tIPageProvider provider = new PageProvider(page);\n\t\tIRequestHandler handler = new RenderPageRequestHandler(provider);\n\n\t\tUrl url = encoder.mapHandler(handler);\n\n\t\tassertEquals(MOUNT_PATH + \"/\" + PAGE_CLASS_NAME, url.toString());\n\t}","id":46314,"modified_method":"/**\n\t * \n\t */\n\tpublic void testEncode8()\n\t{\n\t\tMockPage page = new MockPage(15);\n\t\tpage.setBookmarkable(true);\n\t\tpage.setCreatedBookmarkable(true);\n\t\tpage.setPageStateless(true);\n\n\t\tIPageProvider provider = new PageProvider(page);\n\t\tIRequestHandler handler = new RenderPageRequestHandler(provider);\n\n\t\tUrl url = encoder.mapHandler(handler);\n\n\t\tassertEquals(PAGE_CLASS_NAME, url.toString());\n\t}","commit_id":"0c7775946277419d8f94396ea4863a75ed7d71a8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t */\n\tpublic void testDecode5()\n\t{\n\t\tUrl url = Url.parse(MOUNT_PATH + \"/\" + PAGE_CLASS_NAME + \"?15-ILinkListener-foo-bar\");\n\t\tIRequestHandler handler = encoder.mapRequest(getRequest(url));\n\n\t\tassertTrue(handler instanceof ListenerInterfaceRequestHandler);\n\n\t\tListenerInterfaceRequestHandler h = (ListenerInterfaceRequestHandler)handler;\n\n\t\tIRequestablePage page = h.getPage();\n\t\tcheckPage(page, 15);\n\n\t\tassertEquals(ILinkListener.INTERFACE, h.getListenerInterface());\n\t\tassertEquals(\"foo:bar\", h.getComponent().getPageRelativePath());\n\t\tassertNull(h.getBehaviorIndex());\n\t}","id":46315,"modified_method":"/**\n\t * \n\t */\n\tpublic void testDecode5()\n\t{\n\t\tUrl url = Url.parse(PAGE_CLASS_NAME + \"?15-ILinkListener-foo-bar\");\n\t\tIRequestHandler handler = encoder.mapRequest(getRequest(url));\n\n\t\tassertTrue(handler instanceof ListenerInterfaceRequestHandler);\n\n\t\tListenerInterfaceRequestHandler h = (ListenerInterfaceRequestHandler)handler;\n\n\t\tIRequestablePage page = h.getPage();\n\t\tcheckPage(page, 15);\n\n\t\tassertEquals(ILinkListener.INTERFACE, h.getListenerInterface());\n\t\tassertEquals(\"foo:bar\", h.getComponent().getPageRelativePath());\n\t\tassertNull(h.getBehaviorIndex());\n\t}","commit_id":"0c7775946277419d8f94396ea4863a75ed7d71a8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t */\n\tpublic void testDecode8()\n\t{\n\t\tUrl url = Url.parse(MOUNT_PATH + \"/\" + PAGE_CLASS_NAME +\n\t\t\t\"/i1/i2?15-5.ILinkListener-foo-bar&a=b&b=c\");\n\n\t\tcontext.setNextPageRenderCount(5);\n\n\t\tIRequestHandler handler = encoder.mapRequest(getRequest(url));\n\n\t\tassertTrue(handler instanceof ListenerInterfaceRequestHandler);\n\t\tListenerInterfaceRequestHandler h = (ListenerInterfaceRequestHandler)handler;\n\n\t\tIRequestablePage page = h.getPage();\n\t\tassertEquals(page.getRenderCount(), 5);\n\t}","id":46316,"modified_method":"/**\n\t * \n\t */\n\tpublic void testDecode8()\n\t{\n\t\tUrl url = Url.parse(PAGE_CLASS_NAME + \"/i1/i2?15-5.ILinkListener-foo-bar&a=b&b=c\");\n\n\t\tcontext.setNextPageRenderCount(5);\n\n\t\tIRequestHandler handler = encoder.mapRequest(getRequest(url));\n\n\t\tassertTrue(handler instanceof ListenerInterfaceRequestHandler);\n\t\tListenerInterfaceRequestHandler h = (ListenerInterfaceRequestHandler)handler;\n\n\t\tIRequestablePage page = h.getPage();\n\t\tassertEquals(page.getRenderCount(), 5);\n\t}","commit_id":"0c7775946277419d8f94396ea4863a75ed7d71a8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * WICKET-2993\n\t */\n\tpublic void testDecode10()\n\t{\n\t\t// use String.class but any other non-Page will do the job as well\n\t\tUrl url = Url.parse(MOUNT_PATH + \"/\" + String.class.getSimpleName());\n\n\t\tIRequestHandler handler = encoder.mapRequest(getRequest(url));\n\t\tassertNull(\"A non-page class should not create a request handler!\", handler);\n\t}","id":46317,"modified_method":"/**\n\t * WICKET-2993\n\t */\n\tpublic void testDecode10()\n\t{\n\t\t// use String.class but any other non-Page will do the job as well\n\t\tUrl url = Url.parse(String.class.getSimpleName());\n\n\t\tIRequestHandler handler = encoder.mapRequest(getRequest(url));\n\t\tassertNull(\"A non-page class should not create a request handler!\", handler);\n\t}","commit_id":"0c7775946277419d8f94396ea4863a75ed7d71a8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * \n\t * @see org.apache.wicket.examples.WicketExampleApplication#init()\n\t */\n\t@Override\n\tpublic void init()\n\t{\n\t\tsuper.init();\n\n\t\tgetRootRequestMapperAsCompound().add(new CustomHomeMapper());\n\n\t\tgetRootRequestMapperAsCompound().add(\n\t\t\tnew LocaleFirstMapper(new MountedMapper(\"/localized\", LocalizedPage.class)));\n\n\t\tgetRootRequestMapperAsCompound().add(new MountedMapper(\"secured\", HttpsPage.class));\n\n\t\tgetRootRequestMapperAsCompound().add(\n\t\t\tnew PackageMapper(\"pMount\", PackageName.forClass(PackageMountedPage.class)));\n\n\t\tsetRootRequestMapper(new HttpsMapper(getRootRequestMapper(), new HttpsConfig()));\n\t}","id":46318,"modified_method":"/**\n\t * \n\t * @see org.apache.wicket.examples.WicketExampleApplication#init()\n\t */\n\t@Override\n\tpublic void init()\n\t{\n\t\tsuper.init();\n\n\t\tgetRootRequestMapperAsCompound().add(new CustomHomeMapper());\n\n\t\tgetRootRequestMapperAsCompound().add(\n\t\t\tnew LocaleFirstMapper(new MountedMapper(\"/localized\", LocalizedPage.class)));\n\n\t\tgetRootRequestMapperAsCompound().add(new MountedMapper(\"secured\", HttpsPage.class));\n\n\t\tgetRootRequestMapperAsCompound().add(\n\t\t\tnew MountMapper(\"pMount\", new PackageMapper(\n\t\t\t\tPackageName.forClass(PackageMountedPage.class))));\n\n\t\tsetRootRequestMapper(new HttpsMapper(getRootRequestMapper(), new HttpsConfig()));\n\t}","commit_id":"0c7775946277419d8f94396ea4863a75ed7d71a8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @see org.apache.wicket.examples.WicketExampleApplication#init()\n\t */\n\t@Override\n\tprotected void init()\n\t{\n\t\tsuper.init();\n\n\t\tmountPage(\"/statefull\", StatefulPage.class);\n\t\tmountPage(\"/query\", StatelessPage1.class);\n\t\tmountPage(\"/mixed\", StatelessPage2.class);\n\t\tmountPage(\"/state-in-url\", StatelessPage3.class);\n\t\tgetRootRequestMapperAsCompound().add(\n\t\t\tnew PackageMapper(\"/public\", PackageName.forClass(StatelessApplication.class)));\n\t\tmountPage(\"foo\", StatelessPage.class);\n\t}","id":46319,"modified_method":"/**\n\t * @see org.apache.wicket.examples.WicketExampleApplication#init()\n\t */\n\t@Override\n\tprotected void init()\n\t{\n\t\tsuper.init();\n\n\t\tmountPage(\"/statefull\", StatefulPage.class);\n\t\tmountPage(\"/query\", StatelessPage1.class);\n\t\tmountPage(\"/mixed\", StatelessPage2.class);\n\t\tmountPage(\"/state-in-url\", StatelessPage3.class);\n\t\tgetRootRequestMapperAsCompound().add(\n\t\t\tnew MountMapper(\"/public\", new PackageMapper(\n\t\t\t\tPackageName.forClass(StatelessApplication.class))));\n\t\tmountPage(\"foo\", StatelessPage.class);\n\t}","commit_id":"0c7775946277419d8f94396ea4863a75ed7d71a8","url":"https://github.com/apache/wicket"},{"original_method":"/**\n    *  Processes the Reduction produced by Parser.classDeclaration().\n    */\n\n    protected ClassNode classDeclaration( ClassNode context, CSTNode reduction ) throws ParserException\n    {\n        //\n        // Calculate the easy stuff\n\n        String   name = identifier( reduction );\n        this.newClasses.add(name);\n        int modifiers = modifiers( reduction.get(1) );\n        String parent = resolveName( reduction.get(2).get(1) );\n\n\n        //\n        // Then process the interface list.\n\n        CSTNode  interfaceReduction = reduction.get(3);\n        String[] interfaces = new String[interfaceReduction.children()];\n        for( int i = 1; i < interfaceReduction.size(); i++ )\n        {\n            interfaces[i-1] = resolveName( interfaceReduction.get(i) );\n        }\n\n\n        //\n        // Create the class.\n\n        ClassNode classNode = (\n            context == null\n                ? new ClassNode(               dot(packageName, name), modifiers, parent, interfaces, MixinNode.EMPTY_ARRAY )\n                : new InnerClassNode( context, dot(packageName, name), modifiers, parent, interfaces, MixinNode.EMPTY_ARRAY )\n        );\n\n        classNode.setCSTNode( reduction.get(0) );\n        typeBody( classNode, reduction.get(4), 0, 0 );\n        return classNode;\n    }","id":46320,"modified_method":"/**\n    *  Processes the Reduction produced by Parser.classDeclaration().\n    */\n\n    protected ClassNode classDeclaration( ClassNode context, CSTNode reduction ) throws ParserException\n    {\n        //\n        // Calculate the easy stuff\n\n        String   name = identifier( reduction );\n        addNewClassName(name);\n        int modifiers = modifiers( reduction.get(1) );\n        String parent = resolveName( reduction.get(2).get(1) );\n\n\n        //\n        // Then process the interface list.\n\n        CSTNode  interfaceReduction = reduction.get(3);\n        String[] interfaces = new String[interfaceReduction.children()];\n        for( int i = 1; i < interfaceReduction.size(); i++ )\n        {\n            interfaces[i-1] = resolveName( interfaceReduction.get(i) );\n        }\n\n\n        //\n        // Create the class.\n\n        ClassNode classNode = (\n            context == null\n                ? new ClassNode(               dot(getPackageName(), name), modifiers, parent, interfaces, MixinNode.EMPTY_ARRAY )\n                : new InnerClassNode( context, dot(getPackageName(), name), modifiers, parent, interfaces, MixinNode.EMPTY_ARRAY )\n        );\n\n        classNode.setCSTNode( reduction.get(0) );\n        typeBody( classNode, reduction.get(4), 0, 0 );\n        return classNode;\n    }","commit_id":"71240585fd9487fd485dd4cf88ce3a20e93d811b","url":"https://github.com/apache/groovy"},{"original_method":"/**\n    *  Initializes the <code>ASTBuilder<\/code>.\n    */\n\n    public ASTBuilder( SourceUnit sourceUnit, ClassLoader classLoader )\n    {\n        this.controller  = sourceUnit;\n        this.classLoader = classLoader;\n        this.imports     = new HashMap();\n        this.packageName = null;\n    }","id":46321,"modified_method":"public ASTBuilder( SourceUnit sourceUnit, ClassLoader classLoader )\n    {\n        super(sourceUnit, classLoader);\n    }","commit_id":"71240585fd9487fd485dd4cf88ce3a20e93d811b","url":"https://github.com/apache/groovy"},{"original_method":"/**\n    *  Builds a name from a CSTNode, then resolves it.  Returns the resolved name\n    *  if available, or null, unless safe is set, in which case the built name\n    *  is returned instead of null.\n    *\n    *  @todo we should actually remove all resolving code from the ASTBuilder and\n    *        move it into the verifier / analyser\n    */\n\n    protected String resolveName( CSTNode root, boolean safe )\n    {\n        String name = makeName( root );\n        if (name.length() == 0)\n            return \"\";\n        if (this.newClasses.contains(name)) {\n            return dot(packageName, name);\n        } else {\n            return resolveName( name, safe );\n        }\n    }","id":46322,"modified_method":"/**\n    *  Builds a name from a CSTNode, then resolves it.  Returns the resolved name\n    *  if available, or null, unless safe is set, in which case the built name\n    *  is returned instead of null.\n    *\n    *  @todo we should actually remove all resolving code from the ASTBuilder and\n    *        move it into the verifier / analyser\n    */\n\n    protected String resolveName( CSTNode root, boolean safe )\n    {\n        String name = makeName( root );\n        if (name.length() == 0)\n            return \"\";\n        return resolveNewClassOrName(name, safe);\n    }","commit_id":"71240585fd9487fd485dd4cf88ce3a20e93d811b","url":"https://github.com/apache/groovy"},{"original_method":"/**\n    *  Builds an AST ModuleNode from a Parser.module() Reduction.\n    */\n\n    public ModuleNode build( CSTNode input ) throws ParserException\n    {\n        this.newClasses.clear();\n        this.output = new ModuleNode( controller );\n        resolutions.clear();\n\n        //\n        // input structure:\n        //    1: package\n        //    2: imports\n        //   3+: statements\n\n        packageName = packageDeclaration( input.get(1) );\n        output.setPackageName( packageName );\n\n        importStatements( output, input.get(2) );\n\n        for( int i = 3; i < input.size(); ++i )\n        {\n            topLevelStatement( output, input.get(i) );\n        }\n\n        if( output.isEmpty() )\n        {\n            output.addStatement( new BlockStatement() );\n        }\n\n        return output;\n    }","id":46323,"modified_method":"/**\n    *  Builds an AST ModuleNode from a Parser.module() Reduction.\n    */\n\n    public ModuleNode build( CSTNode input ) throws ParserException\n    {\n        makeModule();\n\n       //\n        // input structure:\n        //    1: package\n        //    2: imports\n        //   3+: statements\n\n        setPackageName( packageDeclaration( input.get(1) ));\n\n        importStatements( output, input.get(2) );\n\n        for( int i = 3; i < input.size(); ++i )\n        {\n            topLevelStatement( output, input.get(i) );\n        }\n\n        if( output.isEmpty() )\n        {\n            output.addStatement( new BlockStatement() );\n        }\n\n        return output;\n    }","commit_id":"71240585fd9487fd485dd4cf88ce3a20e93d811b","url":"https://github.com/apache/groovy"},{"original_method":"public static ParserPluginFactory newInstance() {\n        if (useNewParser) {\n            Class type = null;\n            String name = \"org.codehaus.groovy.antlr.AntlrParserPluginFactory\";\n            try {\n                type = Class.forName(name);\n            }\n            catch (ClassNotFoundException e) {\n                try {\n                    type = Thread.currentThread().getContextClassLoader().loadClass(name);\n                }\n                catch (ClassNotFoundException e1) {\n                    try {\n                        type = ParserPluginFactory.class.getClassLoader().loadClass(name);\n                    }\n                    catch (ClassNotFoundException e2) {\n                        // ignore\n                    }\n                }\n            }\n\n            if (type != null) {\n                try {\n                    return (ParserPluginFactory) type.newInstance();\n                }\n                catch (Exception e) {\n                    throw new RuntimeException(\"Could not create AntlrParserPluginFactory: \" + e, e);\n                }\n            }\n            // can't find Antlr parser, so lets use the Classic one\n        }\n        return new ClassicParserPluginFactory();\n    }","id":46324,"modified_method":"public static ParserPluginFactory newInstance() {\n        if (useNewParser) {\n            Class type = null;\n            String name = \"org.codehaus.groovy.antlr.AntlrParserPluginFactory\";\n            try {\n                type = Class.forName(name);\n            }\n            catch (ClassNotFoundException e) {\n                try {\n                    type = ParserPluginFactory.class.getClassLoader().loadClass(name);\n                }\n                catch (ClassNotFoundException e1) {\n                    ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n                    if (contextClassLoader != null) {\n                        try {\n                            type = contextClassLoader.loadClass(name);\n                        }\n                        catch (ClassNotFoundException e2) {\n                            // ignore\n                        }\n                    }\n                }\n            }\n\n            if (type != null) {\n                try {\n                    return (ParserPluginFactory) type.newInstance();\n                }\n                catch (Exception e) {\n                    throw new RuntimeException(\"Could not create AntlrParserPluginFactory: \" + e, e);\n                }\n            }\n            // can't find Antlr parser, so lets use the Classic one\n        }\n        return new ClassicParserPluginFactory();\n    }","commit_id":"71240585fd9487fd485dd4cf88ce3a20e93d811b","url":"https://github.com/apache/groovy"},{"original_method":"/**\r\n\t * Intersects the given segment and plane, returning the intersection point in o\r\n\t * \r\n\t * @param s the segment\r\n\t * @param p the plane\r\n\t * @param i the intersection point (output)\r\n\t * @return whether the segment and the plane intersect\r\n\t */\r\n\tpublic static boolean intersectSegmentPlane( Segment s, Plane p, Vector i )\r\n\t{\r\n\t\tVector ab = s.b.tmp().sub(s.a);\r\n\t\tfloat t = (p.d - p.normal.dot(s.a) ) / p.normal.dot(ab);\r\n\t\tif( t >= 0 && t <= 1 )\r\n\t\t{\r\n\t\t\ti.set(s.a).add( ab.mul(t) );\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\treturn false;\r\n\t}","id":46325,"modified_method":"/**\r\n\t * Intersects the given segment and plane, returning the intersection point in o\r\n\t * \r\n\t * @param s the segment\r\n\t * @param p the plane\r\n\t * @param i the intersection point (output)\r\n\t * @return whether the segment and the plane intersect\r\n\t */\r\n\tpublic static boolean intersectSegmentPlane( Segment s, Plane p, Vector i )\r\n\t{\r\n\t\tVector ab = s.b.tmp().sub(s.a);\r\n\t\tfloat denom = ab.dot( plane.getNormal() );\t\t\r\n\t\tfloat t = -( s.a.dot(plane.getNormal()) + plane.getD() ) / denom;\r\n\t\tif( t < 0 || t > 1 )\r\n\t\t\treturn false;\r\n\r\n\t\tintersection.set( s.a ).add( ab.mul(t) );\r\n\t\treturn true;\r\n\t}","commit_id":"abc14dea2c2b1737ed29e42ccec1c1d20ab1786c","url":"https://github.com/libgdx/libgdx"},{"original_method":"private void processInput( Input input, float deltaTime )\r\n\t{\r\n\t\tif( input.isKeyPressed( Input.Keys.KEYCODE_DPAD_LEFT ) )\r\n\t\t\tyAngle += deltaTime * 120;\r\n\t\tif( input.isKeyPressed( Input.Keys.KEYCODE_DPAD_RIGHT ) )\r\n\t\t\tyAngle -= deltaTime * 120;\r\n\t\t\r\n\t\tcam.getDirection().set( 0, 0, -1 );\r\n\t\tmat.setToRotation( axis, yAngle );\r\n\t\tcam.getDirection().rot( mat );\r\n\t\t\r\n\t\ttmp.set( cam.getPosition() ).y -= 0.55f;\r\n\t\t\r\n\t\tif( !CollisionDetection.collide( cMesh, cam.getPosition(), tmp, intersection ) )\r\n\t\t{\r\n\t\t\tvelocity.add( 0, -0.5f * deltaTime, 0 ); // gravity\r\n\t\t\tSystem.out.println( \"applying gravity\");\r\n\t\t}\t\t\r\n\r\n\t\tif( input.isKeyPressed( Input.Keys.KEYCODE_DPAD_UP ) )\t\t\r\n\t\t\tvelocity.add(cam.getDirection().tmp().mul( SPEED * deltaTime));\r\n\t\tif( input.isKeyPressed( Input.Keys.KEYCODE_DPAD_DOWN ) )\r\n\t\t\tvelocity.add(cam.getDirection().tmp().mul(SPEED * -deltaTime));\r\n\t\t\t\t\r\n\t\tcollider.collide( cMesh, cam.getPosition(), velocity, 0.0000001f );\t\t\r\n\t\t\r\n\t\tcam.getPosition().add( velocity );\r\n\t\tvelocity.mul( 0.90f ); // decay\r\n\t\t\r\n//\t\tSystem.out.println( cam.getPosition() );\r\n//\t\tSystem.out.println( \"processed: \" + CollisionDetection.getNumProcessedTriangles() + \", culled: \" + CollisionDetection.getNumCulledTriangles() + \", early out: \" + CollisionDetection.getNumEarlyOutTriangles() + \", collided: \" + CollisionDetection.getNumCollidedTriangles() );\r\n\t}","id":46326,"modified_method":"private void processInput( Input input, float deltaTime )\r\n\t{\r\n\t\tif( input.isKeyPressed( Input.Keys.KEYCODE_DPAD_LEFT ) )\r\n\t\t\tyAngle += deltaTime * 120;\r\n\t\tif( input.isKeyPressed( Input.Keys.KEYCODE_DPAD_RIGHT ) )\r\n\t\t\tyAngle -= deltaTime * 120;\r\n\t\t\r\n\t\tcam.getDirection().set( 0, 0, -1 );\r\n\t\tmat.setToRotation( axis, yAngle );\r\n\t\tcam.getDirection().rot( mat );\r\n\t\t\r\n\t\tsegment.a.set( cam.getPosition() );\r\n\t\tsegment.b.set( cam.getPosition() ).y -= 1.1f;\r\n\t\t\r\n\t\tif( !CollisionDetection.testMeshSegment( cMesh, segment) ) \r\n\t\t{\r\n\t\t\tvelocity.add( 0, -0.5f * deltaTime, 0 ); // gravity\r\n\t\t\tSystem.out.println( \"applying gravity\");\r\n\t\t}\t\t\r\n\r\n\t\tif( input.isKeyPressed( Input.Keys.KEYCODE_DPAD_UP ) )\t\t\r\n\t\t\tvelocity.add(cam.getDirection().tmp().mul( SPEED * deltaTime));\r\n\t\tif( input.isKeyPressed( Input.Keys.KEYCODE_DPAD_DOWN ) )\r\n\t\t\tvelocity.add(cam.getDirection().tmp().mul(SPEED * -deltaTime));\r\n\t\t\t\t\r\n\t\tcollider.collide( cMesh, cam.getPosition(), velocity, 0.0000001f );\t\t\r\n\t\t\r\n\t\tcam.getPosition().add( velocity );\r\n\t\tvelocity.mul( 0.90f ); // decay\r\n\t\t\r\n//\t\tSystem.out.println( cam.getPosition() );\r\n//\t\tSystem.out.println( \"processed: \" + CollisionDetection.getNumProcessedTriangles() + \", culled: \" + CollisionDetection.getNumCulledTriangles() + \", early out: \" + CollisionDetection.getNumEarlyOutTriangles() + \", collided: \" + CollisionDetection.getNumCollidedTriangles() );\r\n\t}","commit_id":"abc14dea2c2b1737ed29e42ccec1c1d20ab1786c","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override\r\n\tpublic void surfaceCreated(Application app) \r\n\t{\t\t\t\r\n\t\tFloatMesh m = (FloatMesh)ModelLoader.loadObj( app.getFiles().readInternalFile( \"data/scene.obj\" ), true );\r\n\t\tmesh = new MeshRenderer( app.getGraphics().getGL10(), m, true, true );\t\t\t\r\n\t\tcam = new PerspectiveCamera();\r\n\t\tcam.setFov( 45 );\r\n\t\tcam.setNear( 0.1f );\r\n\t\tcam.setFar( 1000 );\r\n\t\tcam.getPosition().y = 5;\r\n\t\t\r\n\t\tcMesh = new CollisionMesh( m, false );\r\n\t\tcollider = new EllipsoidCollider( 0.5f, 0.5f, 0.5f, new SlideResponse() );\t\t\t\r\n\t}","id":46327,"modified_method":"@Override\r\n\tpublic void surfaceCreated(Application app) \r\n\t{\t\t\t\r\n\t\tFloatMesh m = (FloatMesh)ModelLoader.loadObj( app.getFiles().readInternalFile( \"data/scene.obj\" ), true );\r\n\t\tmesh = new MeshRenderer( app.getGraphics().getGL10(), m, true, true );\t\t\t\r\n\t\tcam = new PerspectiveCamera();\r\n\t\tcam.setFov( 45 );\r\n\t\tcam.setNear( 0.1f );\r\n\t\tcam.setFar( 1000 );\r\n\t\tcam.getPosition().y = 5;\r\n\t\t\r\n\t\tcMesh = new CollisionMesh( m, false );\r\n\t\tcollider = new EllipsoidCollider( 0.5f, 1, 0.5f, new SlideResponse() );\t\t\t\r\n\t}","commit_id":"abc14dea2c2b1737ed29e42ccec1c1d20ab1786c","url":"https://github.com/libgdx/libgdx"},{"original_method":"public NewsDB.Record next() {\r\n            if (this.stackNodeIterator == null) return null;\r\n            final Row.Entry row = this.stackNodeIterator.next();\r\n            try {\r\n                return b2r(row);\r\n            } catch (final IOException e) {\r\n                return null;\r\n            }\r\n        }","id":46328,"modified_method":"public NewsDB.Record next() {\r\n            if (this.stackNodeIterator == null) return null;\r\n            Row.Entry row;\r\n            try {\r\n                row = this.stackNodeIterator.next();\r\n            } catch (final IndexOutOfBoundsException e) {\r\n                e.printStackTrace();\r\n                return null;\r\n            }\r\n            try {\r\n                return b2r(row);\r\n            } catch (final IOException e) {\r\n                e.printStackTrace();\r\n                return null;\r\n            }\r\n        }","commit_id":"c31564ef08266de9fdb0a3882261eefaecb49f66","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void line(\n            int Ax, int Ay, final int Bx, final int By,\n            final String colorLine, final int intensityLine,\n            final String colorDot, final int intensityDot, final int dotDist, final int dotPos, final int dotRadius, final boolean dotFilled\n            ) {\n        // Bresenham's line drawing algorithm\n        int dX = Math.abs(Bx-Ax);\n        int dY = Math.abs(By-Ay);\n        final int Xincr = (Ax > Bx) ? -1 : 1;\n        final int Yincr = (Ay > By) ? -1 : 1;\n        int dotc = 0;\n        if (dX >= dY) {\n            final int dPr  = dY<<1;\n            final int dPru = dPr - (dX<<1);\n            int P = dPr - dX;\n            for (; dX >= 0; dX--) {\n                if (colorLine != null) this.setColor(colorLine);\n                plot(Ax, Ay, intensityLine);\n                if (dotc == dotPos) {\n                    if (colorDot != null) this.setColor(colorDot);\n                    if (dotRadius == 0) this.plot(Ax, Ay, intensityDot);\n                    else if (dotRadius > 0) this.dot(Ax, Ay, dotRadius, dotFilled, intensityDot);\n                }\n                dotc++;\n                if (dotc == dotDist) dotc = 0;\n                if (P > 0) {\n                    Ax += Xincr;\n                    Ay += Yincr;\n                    P += dPru;\n                } else {\n                    Ax += Xincr;\n                    P += dPr;\n                }\n            }\n        } else {\n            final int dPr  = dX<<1;\n            final int dPru = dPr - (dY<<1);\n            int P = dPr - dY;\n            for (; dY >= 0; dY--) {\n                if (colorLine != null) this.setColor(colorLine);\n                plot(Ax, Ay, intensityLine);\n                if (dotc == dotPos) {\n                    if (colorDot != null) this.setColor(colorDot);\n                    if (dotRadius == 0) this.plot(Ax, Ay, intensityDot);\n                    else if (dotRadius > 0) this.dot(Ax, Ay, dotRadius, dotFilled, intensityDot);\n                }\n                dotc++;\n                if (dotc == dotDist) dotc = 0;\n                if (P > 0) {\n                    Ax += Xincr;\n                    Ay += Yincr;\n                    P += dPru;\n                } else {\n                    Ay += Yincr;\n                    P += dPr;\n                }\n            }\n        }\n    }","id":46329,"modified_method":"public void line(\n            int Ax, int Ay, final int Bx, final int By,\n            final String colorLine, final int intensityLine,\n            final String colorDot, final int intensityDot, final int dotDist, final int dotPos, final int dotRadius, final boolean dotFilled\n            ) {\n        // Bresenham's line drawing algorithm\n        int dX = Math.abs(Bx-Ax);\n        int dY = Math.abs(By-Ay);\n        final int Xincr = (Ax > Bx) ? -1 : 1;\n        final int Yincr = (Ay > By) ? -1 : 1;\n        int dotc = 0;\n        if (dX >= dY) {\n            final int dPr  = dY<<1;\n            final int dPru = dPr - (dX<<1);\n            int P = dPr - dX;\n            for (; dX >= 0; dX--) {\n                if (colorLine != null) this.setColor(colorLine);\n                plot(Ax, Ay, intensityLine);\n                if (dotc == dotPos) {\n                    if (colorDot != null) this.setColor(colorDot);\n                    if (dotRadius == 0) this.plot(Ax, Ay, intensityDot);\n                    else if (dotRadius > 0) dot(Ax, Ay, dotRadius, dotFilled, intensityDot);\n                }\n                dotc++;\n                if (dotc == dotDist) dotc = 0;\n                if (P > 0) {\n                    Ax += Xincr;\n                    Ay += Yincr;\n                    P += dPru;\n                } else {\n                    Ax += Xincr;\n                    P += dPr;\n                }\n            }\n        } else {\n            final int dPr  = dX<<1;\n            final int dPru = dPr - (dY<<1);\n            int P = dPr - dY;\n            for (; dY >= 0; dY--) {\n                if (colorLine != null) this.setColor(colorLine);\n                plot(Ax, Ay, intensityLine);\n                if (dotc == dotPos) {\n                    if (colorDot != null) this.setColor(colorDot);\n                    if (dotRadius == 0) this.plot(Ax, Ay, intensityDot);\n                    else if (dotRadius > 0) dot(Ax, Ay, dotRadius, dotFilled, intensityDot);\n                }\n                dotc++;\n                if (dotc == dotDist) dotc = 0;\n                if (P > 0) {\n                    Ax += Xincr;\n                    Ay += Yincr;\n                    P += dPru;\n                } else {\n                    Ay += Yincr;\n                    P += dPr;\n                }\n            }\n        }\n    }","commit_id":"c31564ef08266de9fdb0a3882261eefaecb49f66","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public int getWidth() {\n        return width;\n    }","id":46330,"modified_method":"public int getWidth() {\n        return this.width;\n    }","commit_id":"c31564ef08266de9fdb0a3882261eefaecb49f66","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"/**\n     * inserts image where all pixels that have a special RGB value\n     * pixel at (xx, yy) are transparent\n     * @param bitmap bitmap to be inserted\n     * @param x x-value of upper left coordinate where bitmap will be placed\n     * @param y y-value of upper left coordinate where bitmap will be placed\n     * @param rgb RGB value which will be transparent\n     * @param filter filter to be applied\n     */\n    public void insertBitmap(final BufferedImage bitmap, final int x, final int y, final int transRGB, final FilterMode filter) {\n        insertBitmap(bitmap, x, y, transRGB);\n\n        final int bitmapWidth = bitmap.getWidth();\n        final int bitmapHeight = bitmap.getHeight();        \n        \n        if (filter == FilterMode.FILTER_ANTIALIASING) {\n            \n            int transX = -1;\n            int transY = -1;\n            final int imageWidth = image.getWidth();\n            final int imageHeight = image.getHeight();\n            \n            // find first pixel in bitmap that equals transRGB\n            // and also lies in area of image that will be covered by bitmap\n            int i = 0;\n            int j = 0;\n            boolean found = false;\n            while ((i < bitmapWidth) && (i + x < imageWidth) && !found) {\n                while ((j < bitmapHeight) && (j + y < imageHeight) && !found) {\n                    if (bitmap.getRGB(i, j) == transRGB) {\n                        transX = i;\n                        transY = j;\n                        found = true;\n                    }\n                    j++;\n                }\n                i++;\n            }\n\n            // if there is a transparent pixel in the bitmap that covers an area\n            // of the image, the fiter will be used. If no such pixel has been found that\n            // means that there either is no transparent pixel in the bitmap or part\n            // of the bitmap that covers part of tha image is not within the borders of\n            // the image (i.e. bitmap is larger than image)\n            if (transX != -1) {\n                filter(x - 1, y - 1, x + bitmapWidth, y + bitmapHeight, filter, image.getRGB(transX + x, transY + y));\n            }\n\n        } else {\n            filter(x - 1, y - 1, x + bitmapWidth, y + bitmapHeight, filter, -1);\n        }\n\n    }","id":46331,"modified_method":"/**\n     * inserts image where all pixels that have a special RGB value\n     * pixel at (xx, yy) are transparent\n     * @param bitmap bitmap to be inserted\n     * @param x x-value of upper left coordinate where bitmap will be placed\n     * @param y y-value of upper left coordinate where bitmap will be placed\n     * @param rgb RGB value which will be transparent\n     * @param filter filter to be applied\n     */\n    public void insertBitmap(final BufferedImage bitmap, final int x, final int y, final int transRGB, final FilterMode filter) {\n        insertBitmap(bitmap, x, y, transRGB);\n\n        final int bitmapWidth = bitmap.getWidth();\n        final int bitmapHeight = bitmap.getHeight();\n\n        if (filter == FilterMode.FILTER_ANTIALIASING) {\n\n            int transX = -1;\n            int transY = -1;\n            final int imageWidth = this.image.getWidth();\n            final int imageHeight = this.image.getHeight();\n\n            // find first pixel in bitmap that equals transRGB\n            // and also lies in area of image that will be covered by bitmap\n            int i = 0;\n            int j = 0;\n            boolean found = false;\n            while ((i < bitmapWidth) && (i + x < imageWidth) && !found) {\n                while ((j < bitmapHeight) && (j + y < imageHeight) && !found) {\n                    if (bitmap.getRGB(i, j) == transRGB) {\n                        transX = i;\n                        transY = j;\n                        found = true;\n                    }\n                    j++;\n                }\n                i++;\n            }\n\n            // if there is a transparent pixel in the bitmap that covers an area\n            // of the image, the fiter will be used. If no such pixel has been found that\n            // means that there either is no transparent pixel in the bitmap or part\n            // of the bitmap that covers part of tha image is not within the borders of\n            // the image (i.e. bitmap is larger than image)\n            if (transX != -1) {\n                filter(x - 1, y - 1, x + bitmapWidth, y + bitmapHeight, filter, this.image.getRGB(transX + x, transY + y));\n            }\n\n        } else {\n            filter(x - 1, y - 1, x + bitmapWidth, y + bitmapHeight, filter, -1);\n        }\n\n    }","commit_id":"c31564ef08266de9fdb0a3882261eefaecb49f66","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public RasterPlotter(final int width, final int height, final DrawMode drawMode, final long backgroundColor) {\n        this.cc = new int[3];\n        this.width = width;\n        this.height = height;\n        this.backgroundCol = backgroundColor;\n        this.defaultColR = 0xFF;\n        this.defaultColG = 0xFF;\n        this.defaultColB = 0xFF;\n        this.defaultMode = drawMode;\n        try {\n            this.image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n        } catch (OutOfMemoryError e) {\n            this.image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB);\n            //throw new RuntimeException(RasterPlotter.class.getSimpleName() + \": not enough memory (\" + MemoryControl.available() + \") available\");\n        }\n        this.clear();\n        this.grid = image.getRaster();\n    }","id":46332,"modified_method":"public RasterPlotter(final int width, final int height, final DrawMode drawMode, final long backgroundColor) {\n        this.cc = new int[3];\n        this.width = width;\n        this.height = height;\n        this.backgroundCol = backgroundColor;\n        this.defaultColR = 0xFF;\n        this.defaultColG = 0xFF;\n        this.defaultColB = 0xFF;\n        this.defaultMode = drawMode;\n        try {\n            this.image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n        } catch (final OutOfMemoryError e) {\n            this.image = new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB);\n            //throw new RuntimeException(RasterPlotter.class.getSimpleName() + \": not enough memory (\" + MemoryControl.available() + \") available\");\n        }\n        clear();\n        this.grid = this.image.getRaster();\n    }","commit_id":"c31564ef08266de9fdb0a3882261eefaecb49f66","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void arcDot(final int cx, final int cy, final int arcRadius, final int angle, final int dotRadius) {\n        final double a = PI180 * ((double) angle);\n        final int x = cx + (int) (arcRadius * Math.cos(a));\n        final int y = cy - (int) (arcRadius * Math.sin(a));\n        dot(x, y, dotRadius, true, 100);\n    }","id":46333,"modified_method":"public void arcDot(final int cx, final int cy, final int arcRadius, final int angle, final int dotRadius) {\n        final double a = PI180 * (angle);\n        final int x = cx + (int) (arcRadius * Math.cos(a));\n        final int y = cy - (int) (arcRadius * Math.sin(a));\n        dot(x, y, dotRadius, true, 100);\n    }","commit_id":"c31564ef08266de9fdb0a3882261eefaecb49f66","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"/**\n     * inserts image  where all pixels that have the same RGB value as the\n     * pixel at (xx, yy) are transparent\n     * @param bitmap bitmap to be inserted\n     * @param x x-value of upper left coordinate where bitmap will be placed\n     * @param y y-value of upper left coordinate where bitmap will be placed\n     * @param rgb RGB value which will be transparent\n     */      \n    public void insertBitmap(final BufferedImage bitmap, final int x, final int y, final int transRGB) {\n        final int heightSrc = bitmap.getHeight();\n        final int widthSrc  = bitmap.getWidth();\n        final int heightTgt = height;\n        final int widthTgt  = width;\n\n        int rgb;\n        for (int i = 0; i < heightSrc; i++) {\n            for (int j = 0; j < widthSrc; j++) {\n                // pixel in legal area?\n                if (j + x >= 0 && i + y >= 0 && i + y < heightTgt && j + x < widthTgt) {\n                    rgb = bitmap.getRGB(j, i);\n                    if (rgb != transRGB) {\n                        image.setRGB(j + x, i + y, rgb);\n                    }\n                }\n            }\n        }\n    }","id":46334,"modified_method":"/**\n     * inserts image  where all pixels that have the same RGB value as the\n     * pixel at (xx, yy) are transparent\n     * @param bitmap bitmap to be inserted\n     * @param x x-value of upper left coordinate where bitmap will be placed\n     * @param y y-value of upper left coordinate where bitmap will be placed\n     * @param rgb RGB value which will be transparent\n     */\n    public void insertBitmap(final BufferedImage bitmap, final int x, final int y, final int transRGB) {\n        final int heightSrc = bitmap.getHeight();\n        final int widthSrc  = bitmap.getWidth();\n        final int heightTgt = this.height;\n        final int widthTgt  = this.width;\n\n        int rgb;\n        for (int i = 0; i < heightSrc; i++) {\n            for (int j = 0; j < widthSrc; j++) {\n                // pixel in legal area?\n                if (j + x >= 0 && i + y >= 0 && i + y < heightTgt && j + x < widthTgt) {\n                    rgb = bitmap.getRGB(j, i);\n                    if (rgb != transRGB) {\n                        this.image.setRGB(j + x, i + y, rgb);\n                    }\n                }\n            }\n        }\n    }","commit_id":"c31564ef08266de9fdb0a3882261eefaecb49f66","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void setColor(final long c) {\n    \tif (this.defaultMode == DrawMode.MODE_SUB) {\n            final int r = (int) (c >> 16);\n            final int g = (int) ((c >> 8) & 0xff);\n            final int b = (int) (c & 0xff);\n            defaultColR = (g + b) >>> 1; // / 2;\n            defaultColG = (r + b) >>> 1; // / 2;\n            defaultColB = (r + g) >>> 1; // / 2;\n    \t} else {\n            defaultColR = (int) (c >> 16);\n            defaultColG = (int) ((c >> 8) & 0xff);\n            defaultColB = (int) (c & 0xff);\n    \t}\n        \n    }","id":46335,"modified_method":"public void setColor(final long c) {\n    \tif (this.defaultMode == DrawMode.MODE_SUB) {\n            final int r = (int) (c >> 16);\n            final int g = (int) ((c >> 8) & 0xff);\n            final int b = (int) (c & 0xff);\n            this.defaultColR = (g + b) >>> 1; // / 2;\n            this.defaultColG = (r + b) >>> 1; // / 2;\n            this.defaultColB = (r + g) >>> 1; // / 2;\n    \t} else {\n            this.defaultColR = (int) (c >> 16);\n            this.defaultColG = (int) ((c >> 8) & 0xff);\n            this.defaultColB = (int) (c & 0xff);\n    \t}\n\n    }","commit_id":"c31564ef08266de9fdb0a3882261eefaecb49f66","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"/**\n     * filter for a square part of the ymageMatrix\n     * @param ulx x-value for upper left coordinate\n     * @param uly y-value for upper left coordinate\n     * @param lrx x-value for lower right coordinate\n     * @param lry y-value for lower right coordinate\n     * @param filter chooses filter \n     */\n    private void filter(final int ulx, final int uly, final int lrx, final int lry, final FilterMode filter, final int bgcolor) {\n\n        // taking care that all values are legal\n        final int lox = Math.min(Math.max(Math.min(ulx, lrx), 0), width - 1);\n        final int loy = Math.min(Math.max(Math.min(uly, lry), 0), height -1);\n        final int rux = Math.min(Math.max(Math.max(ulx, lrx), 0), width - 1);\n        final int ruy = Math.min(Math.max(Math.max(uly, lry), 0), height -1);\n  \n        int numberOfNeighbours = 0;\n        int rgbR = 0;\n        int rgbG = 0;\n        int rgbB = 0;\n        int rgb = 0;\n        final int width2 = rux - lox + 1;\n        final int height2 = ruy - loy + 1;\n        boolean border = false;\n        final BufferedImage image2 = new BufferedImage(width2, height2, BufferedImage.TYPE_INT_RGB);\n\n        for (int i = lox; i < rux + 1; i++) {\n            for (int j = loy; j < ruy + 1; j++) {\n\n                numberOfNeighbours = 0;\n                rgbR = 0;\n                rgbG = 0;\n                rgbB = 0;\n\n                if (filter == FilterMode.FILTER_ANTIALIASING || filter == FilterMode.FILTER_BLUR) {\n                    // taking samples from neighbouring pixel\n                    if (i > lox) {\n                        rgb = image.getRGB(i - 1, j);\n                        border = (rgb == bgcolor);\n                        rgbR += rgb >> 16 & 0xff;\n                        rgbG += rgb >> 8 & 0xff;\n                        rgbB += rgb & 0xff;\n                        numberOfNeighbours++;\n                    }\n                    if (j > loy) {\n                        rgb = image.getRGB(i, j - 1);\n                        border = border || (rgb == bgcolor);\n                        rgbR += rgb >> 16 & 0xff;\n                        rgbG += rgb >> 8 & 0xff;\n                        rgbB += rgb & 0xff;\n                        numberOfNeighbours++;\n                    }\n                    if (i < width - 1) {\n                        rgb = image.getRGB(i + 1, j);\n                        border = border || (rgb == bgcolor);\n                        rgbR += rgb >> 16 & 0xff;\n                        rgbG += rgb >> 8 & 0xff;\n                        rgbB += rgb & 0xff;\n                        numberOfNeighbours++;\n                    }\n                    if (i < height - 1) {\n                        rgb = image.getRGB(i, j + 1);\n                        border = border || (rgb == bgcolor);\n                        rgbR += rgb >> 16 & 0xff;\n                        rgbG += rgb >> 8 & 0xff;\n                        rgbB += rgb & 0xff;\n                        numberOfNeighbours++;\n                    }\n\n                }\n\n                rgb = image.getRGB(i, j);\n                \n                // add value of pixel\n                // in case filter is used for antialiasing this will only be done if\n                // the pixel is on the edge to the background color\n                if (filter == FilterMode.FILTER_ANTIALIASING && border || filter == FilterMode.FILTER_BLUR) {\n                    rgbR += (rgb >> 16 & 0xff);\n                    rgbG += (rgb >> 8 & 0xff);\n                    rgbB += (rgb & 0xff);\n                    numberOfNeighbours++;                    \n                    border = false;\n                } \n                // set to value of pixel => keep value\n                else if (filter == FilterMode.FILTER_ANTIALIASING) {\n                    rgbR = (rgb >> 16 & 0xff);\n                    rgbG = (rgb >> 8 & 0xff);\n                    rgbB = (rgb & 0xff);\n                    numberOfNeighbours = 1;\n                }\n                // set value of pixel to inverted value (using XOR)\n                else if (filter == FilterMode.FILTER_INVERT) {\n                    rgb = rgb ^ 0xffffff;\n                    rgbR = (rgb >> 16 & 0xff);\n                    rgbG = (rgb >> 8 & 0xff);\n                    rgbB = (rgb & 0xff);\n                    numberOfNeighbours = 1;\n                }\n\n                // calculating the average\n                rgbR = (rgbR / numberOfNeighbours);\n                rgbG = (rgbG / numberOfNeighbours);\n                rgbB = (rgbB / numberOfNeighbours);\n                \n                rgb = (rgbR << 16) | (rgbG << 8) | rgbB;\n                \n                image2.setRGB(i-lox, j-loy, rgb);\n            }\n        }\n        \n        // insert new version of area into image\n        insertBitmap(image2, lox, loy);\n    }","id":46336,"modified_method":"/**\n     * filter for a square part of the ymageMatrix\n     * @param ulx x-value for upper left coordinate\n     * @param uly y-value for upper left coordinate\n     * @param lrx x-value for lower right coordinate\n     * @param lry y-value for lower right coordinate\n     * @param filter chooses filter\n     */\n    private void filter(final int ulx, final int uly, final int lrx, final int lry, final FilterMode filter, final int bgcolor) {\n\n        // taking care that all values are legal\n        final int lox = Math.min(Math.max(Math.min(ulx, lrx), 0), this.width - 1);\n        final int loy = Math.min(Math.max(Math.min(uly, lry), 0), this.height -1);\n        final int rux = Math.min(Math.max(Math.max(ulx, lrx), 0), this.width - 1);\n        final int ruy = Math.min(Math.max(Math.max(uly, lry), 0), this.height -1);\n\n        int numberOfNeighbours = 0;\n        int rgbR = 0;\n        int rgbG = 0;\n        int rgbB = 0;\n        int rgb = 0;\n        final int width2 = rux - lox + 1;\n        final int height2 = ruy - loy + 1;\n        boolean border = false;\n        final BufferedImage image2 = new BufferedImage(width2, height2, BufferedImage.TYPE_INT_RGB);\n\n        for (int i = lox; i < rux + 1; i++) {\n            for (int j = loy; j < ruy + 1; j++) {\n\n                numberOfNeighbours = 0;\n                rgbR = 0;\n                rgbG = 0;\n                rgbB = 0;\n\n                if (filter == FilterMode.FILTER_ANTIALIASING || filter == FilterMode.FILTER_BLUR) {\n                    // taking samples from neighbouring pixel\n                    if (i > lox) {\n                        rgb = this.image.getRGB(i - 1, j);\n                        border = (rgb == bgcolor);\n                        rgbR += rgb >> 16 & 0xff;\n                        rgbG += rgb >> 8 & 0xff;\n                        rgbB += rgb & 0xff;\n                        numberOfNeighbours++;\n                    }\n                    if (j > loy) {\n                        rgb = this.image.getRGB(i, j - 1);\n                        border = border || (rgb == bgcolor);\n                        rgbR += rgb >> 16 & 0xff;\n                        rgbG += rgb >> 8 & 0xff;\n                        rgbB += rgb & 0xff;\n                        numberOfNeighbours++;\n                    }\n                    if (i < this.width - 1) {\n                        rgb = this.image.getRGB(i + 1, j);\n                        border = border || (rgb == bgcolor);\n                        rgbR += rgb >> 16 & 0xff;\n                        rgbG += rgb >> 8 & 0xff;\n                        rgbB += rgb & 0xff;\n                        numberOfNeighbours++;\n                    }\n                    if (i < this.height - 1) {\n                        rgb = this.image.getRGB(i, j + 1);\n                        border = border || (rgb == bgcolor);\n                        rgbR += rgb >> 16 & 0xff;\n                        rgbG += rgb >> 8 & 0xff;\n                        rgbB += rgb & 0xff;\n                        numberOfNeighbours++;\n                    }\n\n                }\n\n                rgb = this.image.getRGB(i, j);\n\n                // add value of pixel\n                // in case filter is used for antialiasing this will only be done if\n                // the pixel is on the edge to the background color\n                if (filter == FilterMode.FILTER_ANTIALIASING && border || filter == FilterMode.FILTER_BLUR) {\n                    rgbR += (rgb >> 16 & 0xff);\n                    rgbG += (rgb >> 8 & 0xff);\n                    rgbB += (rgb & 0xff);\n                    numberOfNeighbours++;\n                    border = false;\n                }\n                // set to value of pixel => keep value\n                else if (filter == FilterMode.FILTER_ANTIALIASING) {\n                    rgbR = (rgb >> 16 & 0xff);\n                    rgbG = (rgb >> 8 & 0xff);\n                    rgbB = (rgb & 0xff);\n                    numberOfNeighbours = 1;\n                }\n                // set value of pixel to inverted value (using XOR)\n                else if (filter == FilterMode.FILTER_INVERT) {\n                    rgb = rgb ^ 0xffffff;\n                    rgbR = (rgb >> 16 & 0xff);\n                    rgbG = (rgb >> 8 & 0xff);\n                    rgbB = (rgb & 0xff);\n                    numberOfNeighbours = 1;\n                }\n\n                // calculating the average\n                rgbR = (rgbR / numberOfNeighbours);\n                rgbG = (rgbG / numberOfNeighbours);\n                rgbB = (rgbB / numberOfNeighbours);\n\n                rgb = (rgbR << 16) | (rgbG << 8) | rgbB;\n\n                image2.setRGB(i-lox, j-loy, rgb);\n            }\n        }\n\n        // insert new version of area into image\n        insertBitmap(image2, lox, loy);\n    }","commit_id":"c31564ef08266de9fdb0a3882261eefaecb49f66","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void arcArc(final int cx, final int cy, final int arcRadius, final int angle,\n            final int innerRadius, final int outerRadius, final int intensity) {\n        final double a = PI180 * ((double) angle);\n        final int x = cx + (int) (arcRadius * Math.cos(a));\n        final int y = cy - (int) (arcRadius * Math.sin(a));\n        arc(x, y, innerRadius, outerRadius, intensity);\n    }","id":46337,"modified_method":"public void arcArc(final int cx, final int cy, final int arcRadius, final int angle,\n            final int innerRadius, final int outerRadius, final int intensity) {\n        final double a = PI180 * (angle);\n        final int x = cx + (int) (arcRadius * Math.cos(a));\n        final int y = cy - (int) (arcRadius * Math.sin(a));\n        arc(x, y, innerRadius, outerRadius, intensity);\n    }","commit_id":"c31564ef08266de9fdb0a3882261eefaecb49f66","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public int[] getColor(final int x, final int y) {\n        final int[] c = new int[3];\n        return grid.getPixel(x, y, c);\n    }","id":46338,"modified_method":"public int[] getColor(final int x, final int y) {\n        final int[] c = new int[3];\n        return this.grid.getPixel(x, y, c);\n    }","commit_id":"c31564ef08266de9fdb0a3882261eefaecb49f66","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void arcConnect(final int cx, final int cy, final int arcRadius, final int angle1, final int angle2, final boolean in,\n            final String colorLine, final int intensityLine,\n            final String colorDot, final int intensityDot, final int dotDist, final int dotPos, final int dotRadius, final boolean dotFilled) {\n        final double a1 = PI180 * ((double) angle1);\n        final double a2 = PI180 * ((double) angle2);\n        final int x1 = cx + (int) (arcRadius * Math.cos(a1));\n        final int y1 = cy - (int) (arcRadius * Math.sin(a1));\n        final int x2 = cx + (int) (arcRadius * Math.cos(a2));\n        final int y2 = cy - (int) (arcRadius * Math.sin(a2));\n        if (in) {\n            line(x1, y1, x2, y2,\n                colorLine, intensityLine,\n                colorDot, intensityDot, dotDist, dotPos, dotRadius, dotFilled);\n        } else {\n            line(x2, y2, x1, y1, \n                colorLine, intensityLine,\n                colorDot, intensityDot, dotDist, dotPos, dotRadius, dotFilled);\n        }\n    }","id":46339,"modified_method":"public void arcConnect(final int cx, final int cy, final int arcRadius, final int angle1, final int angle2, final boolean in,\n            final String colorLine, final int intensityLine,\n            final String colorDot, final int intensityDot, final int dotDist, final int dotPos, final int dotRadius, final boolean dotFilled) {\n        final double a1 = PI180 * (angle1);\n        final double a2 = PI180 * (angle2);\n        final int x1 = cx + (int) (arcRadius * Math.cos(a1));\n        final int y1 = cy - (int) (arcRadius * Math.sin(a1));\n        final int x2 = cx + (int) (arcRadius * Math.cos(a2));\n        final int y2 = cy - (int) (arcRadius * Math.sin(a2));\n        if (in) {\n            line(x1, y1, x2, y2,\n                colorLine, intensityLine,\n                colorDot, intensityDot, dotDist, dotPos, dotRadius, dotFilled);\n        } else {\n            line(x2, y2, x1, y1,\n                colorLine, intensityLine,\n                colorDot, intensityDot, dotDist, dotPos, dotRadius, dotFilled);\n        }\n    }","commit_id":"c31564ef08266de9fdb0a3882261eefaecb49f66","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public int getHeight() {\n        return height;\n    }","id":46340,"modified_method":"public int getHeight() {\n        return this.height;\n    }","commit_id":"c31564ef08266de9fdb0a3882261eefaecb49f66","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void arcLine(final int cx, final int cy, final int innerRadius, final int outerRadius, final int angle, final boolean in,\n            final String colorLine, final String colorDot, final int dotDist, final int dotPos, final int dotRadius, final boolean dotFilled) {\n        final double a = PI180 * ((double) angle);\n        final double cosa = Math.cos(a);\n        final double sina = Math.sin(a);\n        final int xi = cx + (int) (innerRadius * cosa);\n        final int yi = cy - (int) (innerRadius * sina);\n        final int xo = cx + (int) (outerRadius * cosa);\n        final int yo = cy - (int) (outerRadius * sina);\n        //line(xi, yi, xo, yo, 100);\n        if (in) {\n            line(\n                    xo, yo, xi, yi, \n                    colorLine, 100,\n                    colorDot, 100, dotDist, dotPos, dotRadius, dotFilled\n                   );\n        } else {\n            line(\n                    xi, yi, xo, yo,\n                    colorLine, 100,\n                    colorDot, 100, dotDist, dotPos, dotRadius, dotFilled\n                   );\n        }\n    }","id":46341,"modified_method":"public void arcLine(final int cx, final int cy, final int innerRadius, final int outerRadius, final int angle, final boolean in,\n            final String colorLine, final String colorDot, final int dotDist, final int dotPos, final int dotRadius, final boolean dotFilled) {\n        final double a = PI180 * (angle);\n        final double cosa = Math.cos(a);\n        final double sina = Math.sin(a);\n        final int xi = cx + (int) (innerRadius * cosa);\n        final int yi = cy - (int) (innerRadius * sina);\n        final int xo = cx + (int) (outerRadius * cosa);\n        final int yo = cy - (int) (outerRadius * sina);\n        //line(xi, yi, xo, yo, 100);\n        if (in) {\n            line(\n                    xo, yo, xi, yi,\n                    colorLine, 100,\n                    colorDot, 100, dotDist, dotPos, dotRadius, dotFilled\n                   );\n        } else {\n            line(\n                    xi, yi, xo, yo,\n                    colorLine, 100,\n                    colorDot, 100, dotDist, dotPos, dotRadius, dotFilled\n                   );\n        }\n    }","commit_id":"c31564ef08266de9fdb0a3882261eefaecb49f66","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"/**\n     * Deletes all pixels of image and sets them to previously defined\n     * background color.\n     */\n    public final void clear() {\n    \t// fill grid with background color\n        final int bgR = (int) (this.backgroundCol >> 16);\n        final int bgG = (int) ((this.backgroundCol >> 8) & 0xff);\n        final int bgB = (int) (this.backgroundCol & 0xff);\n\n        final Graphics2D gr = image.createGraphics();\n        gr.setBackground(new Color(bgR, bgG, bgB));\n        gr.clearRect(0, 0, width, height);\n    }","id":46342,"modified_method":"/**\n     * Deletes all pixels of image and sets them to previously defined\n     * background color.\n     */\n    public final void clear() {\n    \t// fill grid with background color\n        final int bgR = (int) (this.backgroundCol >> 16);\n        final int bgG = (int) ((this.backgroundCol >> 8) & 0xff);\n        final int bgB = (int) (this.backgroundCol & 0xff);\n\n        final Graphics2D gr = this.image.createGraphics();\n        gr.setBackground(new Color(bgR, bgG, bgB));\n        gr.clearRect(0, 0, this.width, this.height);\n    }","commit_id":"c31564ef08266de9fdb0a3882261eefaecb49f66","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void arcArc(final int cx, final int cy, final int arcRadius, final int angle,\n            final int innerRadius, final int outerRadius, final int fromArc, final int toArc) {\n        final double a = PI180 * ((double) angle);\n        final int x = cx + (int) (arcRadius * Math.cos(a));\n        final int y = cy - (int) (arcRadius * Math.sin(a));\n        arc(x, y, innerRadius, outerRadius, fromArc, toArc);\n    }","id":46343,"modified_method":"public void arcArc(final int cx, final int cy, final int arcRadius, final int angle,\n            final int innerRadius, final int outerRadius, final int fromArc, final int toArc) {\n        final double a = PI180 * (angle);\n        final int x = cx + (int) (arcRadius * Math.cos(a));\n        final int y = cy - (int) (arcRadius * Math.sin(a));\n        arc(x, y, innerRadius, outerRadius, fromArc, toArc);\n    }","commit_id":"c31564ef08266de9fdb0a3882261eefaecb49f66","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void plot(final int x, final int y, final int intensity) {\n        if ((x < 0) || (x >= width)) return;\n        if ((y < 0) || (y >= height)) return;\n        if (this.defaultMode == DrawMode.MODE_REPLACE) {\n            if (intensity == 100) synchronized (cc) {\n                cc[0] = defaultColR;\n                cc[1] = defaultColG;\n                cc[2] = defaultColB;\n                grid.setPixel(x, y, cc);\n            } else synchronized (cc) {\n                final int[] c = grid.getPixel(x, y, cc);\n                c[0] = (intensity * defaultColR + (100 - intensity) * c[0]) / 100;\n                c[1] = (intensity * defaultColG + (100 - intensity) * c[1]) / 100;\n                c[2] = (intensity * defaultColB + (100 - intensity) * c[2]) / 100;\n                grid.setPixel(x, y, c);\n            }\n        } else if (this.defaultMode == DrawMode.MODE_ADD) synchronized (cc) {\n            final int[] c = grid.getPixel(x, y, cc);\n            if (intensity == 100) {\n                c[0] = (0xff & c[0]) + defaultColR; if (cc[0] > 255) cc[0] = 255;\n                c[1] = (0xff & c[1]) + defaultColG; if (cc[1] > 255) cc[1] = 255;\n                c[2] = (0xff & c[2]) + defaultColB; if (cc[2] > 255) cc[2] = 255;\n            } else {\n                c[0] = (0xff & c[0]) + (intensity * defaultColR / 100); if (cc[0] > 255) cc[0] = 255;\n                c[1] = (0xff & c[1]) + (intensity * defaultColG / 100); if (cc[1] > 255) cc[1] = 255;\n                c[2] = (0xff & c[2]) + (intensity * defaultColB / 100); if (cc[2] > 255) cc[2] = 255;\n            }\n            grid.setPixel(x, y, c);\n        } else if (this.defaultMode == DrawMode.MODE_SUB) synchronized (cc) {\n            final int[] c = grid.getPixel(x, y, cc);\n            if (intensity == 100) {\n                c[0] = (0xff & c[0]) - defaultColR; if (cc[0] < 0) cc[0] = 0;\n                c[1] = (0xff & c[1]) - defaultColG; if (cc[1] < 0) cc[1] = 0;\n                c[2] = (0xff & c[2]) - defaultColB; if (cc[2] < 0) cc[2] = 0;\n            } else {\n                c[0] = (0xff & c[0]) - (intensity * defaultColR / 100); if (cc[0] < 0) cc[0] = 0;\n                c[1] = (0xff & c[1]) - (intensity * defaultColG / 100); if (cc[1] < 0) cc[1] = 0;\n                c[2] = (0xff & c[2]) - (intensity * defaultColB / 100); if (cc[2] < 0) cc[2] = 0;\n            }\n            grid.setPixel(x, y, c);\n        }\n    }","id":46344,"modified_method":"public void plot(final int x, final int y, final int intensity) {\n        if ((x < 0) || (x >= this.width)) return;\n        if ((y < 0) || (y >= this.height)) return;\n        if (this.defaultMode == DrawMode.MODE_REPLACE) {\n            if (intensity == 100) synchronized (this.cc) {\n                this.cc[0] = this.defaultColR;\n                this.cc[1] = this.defaultColG;\n                this.cc[2] = this.defaultColB;\n                this.grid.setPixel(x, y, this.cc);\n            } else synchronized (this.cc) {\n                final int[] c = this.grid.getPixel(x, y, this.cc);\n                c[0] = (intensity * this.defaultColR + (100 - intensity) * c[0]) / 100;\n                c[1] = (intensity * this.defaultColG + (100 - intensity) * c[1]) / 100;\n                c[2] = (intensity * this.defaultColB + (100 - intensity) * c[2]) / 100;\n                this.grid.setPixel(x, y, c);\n            }\n        } else if (this.defaultMode == DrawMode.MODE_ADD) synchronized (this.cc) {\n            int[] c = null;\n            try {\n                c = this.grid.getPixel(x, y, this.cc);\n            }   catch (final ArrayIndexOutOfBoundsException e) {\n                // catch \"Coordinate out of bounds\"\n                return;\n            }\n            if (intensity == 100) {\n                c[0] = (0xff & c[0]) + this.defaultColR; if (this.cc[0] > 255) this.cc[0] = 255;\n                c[1] = (0xff & c[1]) + this.defaultColG; if (this.cc[1] > 255) this.cc[1] = 255;\n                c[2] = (0xff & c[2]) + this.defaultColB; if (this.cc[2] > 255) this.cc[2] = 255;\n            } else {\n                c[0] = (0xff & c[0]) + (intensity * this.defaultColR / 100); if (this.cc[0] > 255) this.cc[0] = 255;\n                c[1] = (0xff & c[1]) + (intensity * this.defaultColG / 100); if (this.cc[1] > 255) this.cc[1] = 255;\n                c[2] = (0xff & c[2]) + (intensity * this.defaultColB / 100); if (this.cc[2] > 255) this.cc[2] = 255;\n            }\n            this.grid.setPixel(x, y, c);\n        } else if (this.defaultMode == DrawMode.MODE_SUB) synchronized (this.cc) {\n            int[] c = null;\n            try {\n                c = this.grid.getPixel(x, y, this.cc);\n            }   catch (final ArrayIndexOutOfBoundsException e) {\n                // catch \"Coordinate out of bounds\"\n                return;\n            }\n            if (intensity == 100) {\n                c[0] = (0xff & c[0]) - this.defaultColR; if (this.cc[0] < 0) this.cc[0] = 0;\n                c[1] = (0xff & c[1]) - this.defaultColG; if (this.cc[1] < 0) this.cc[1] = 0;\n                c[2] = (0xff & c[2]) - this.defaultColB; if (this.cc[2] < 0) this.cc[2] = 0;\n            } else {\n                c[0] = (0xff & c[0]) - (intensity * this.defaultColR / 100); if (this.cc[0] < 0) this.cc[0] = 0;\n                c[1] = (0xff & c[1]) - (intensity * this.defaultColG / 100); if (this.cc[1] < 0) this.cc[1] = 0;\n                c[2] = (0xff & c[2]) - (intensity * this.defaultColB / 100); if (this.cc[2] < 0) this.cc[2] = 0;\n            }\n            this.grid.setPixel(x, y, c);\n        }\n    }","commit_id":"c31564ef08266de9fdb0a3882261eefaecb49f66","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public static void updatePermissions(DBBroker broker, XmldbURI pathUri, PermissionModifier permissionModifier) throws PermissionDeniedException {\n        DocumentImpl doc = null;\n        final TransactionManager transact = broker.getBrokerPool().getTransactionManager();\n        try(final Txn transaction = transact.beginTransaction()) {\n            final Collection collection = broker.openCollection(pathUri, Lock.WRITE_LOCK);\n            if (collection == null) {\n                doc = broker.getXMLResource(pathUri, Lock.WRITE_LOCK);\n                if(doc == null) {\n                    transact.abort(transaction);\n                    throw new XPathException(\"Resource or collection '\" + pathUri.toString() + \"' does not exist.\");\n                }\n\n                final Permission permissions = doc.getPermissions();\n                permissionModifier.modify(permissions);\n\n                broker.storeXMLResource(transaction, doc);\n                transact.commit(transaction);\n                broker.flush();\n            } else {\n                // keep the write lock in the transaction\n                transaction.registerLock(collection.getLock(), Lock.WRITE_LOCK);\n\n                final Permission permissions = collection.getPermissionsNoLock();\n                permissionModifier.modify(permissions);\n\n                broker.saveCollection(transaction, collection);\n                transact.commit(transaction);\n                broker.flush();\n            }\n        } catch(final XPathException | PermissionDeniedException | IOException | TriggerException | TransactionException e) {\n            throw new PermissionDeniedException(\"Permission to modify permissions is denied for user '\" + broker.getCurrentSubject().getName() + \"' on '\" + pathUri.toString() + \"': \" + e.getMessage(), e);\n        } finally {\n            if(doc != null) {\n                doc.getUpdateLock().release(Lock.WRITE_LOCK);\n            }\n        }\n    }","id":46345,"modified_method":"public static void updatePermissions(final DBBroker broker, final XmldbURI pathUri, final ConsumerE<Permission, PermissionDeniedException> permissionModifier) throws PermissionDeniedException {\n        DocumentImpl doc = null;\n        final TransactionManager transact = broker.getBrokerPool().getTransactionManager();\n        try(final Txn transaction = transact.beginTransaction()) {\n            final Collection collection = broker.openCollection(pathUri, Lock.WRITE_LOCK);\n            if (collection == null) {\n                doc = broker.getXMLResource(pathUri, Lock.WRITE_LOCK);\n                if(doc == null) {\n                    transact.abort(transaction);\n                    throw new XPathException(\"Resource or collection '\" + pathUri.toString() + \"' does not exist.\");\n                }\n\n                final Permission permissions = doc.getPermissions();\n                permissionModifier.accept(permissions);\n\n                broker.storeXMLResource(transaction, doc);\n                transact.commit(transaction);\n                broker.flush();\n            } else {\n                // keep the write lock in the transaction\n                transaction.registerLock(collection.getLock(), Lock.WRITE_LOCK);\n\n                final Permission permissions = collection.getPermissionsNoLock();\n                permissionModifier.accept(permissions);\n\n                broker.saveCollection(transaction, collection);\n                transact.commit(transaction);\n                broker.flush();\n            }\n        } catch(final XPathException | PermissionDeniedException | IOException | TriggerException | TransactionException e) {\n            throw new PermissionDeniedException(\"Permission to modify permissions is denied for user '\" + broker.getCurrentSubject().getName() + \"' on '\" + pathUri.toString() + \"': \" + e.getMessage(), e);\n        } finally {\n            if(doc != null) {\n                doc.getUpdateLock().release(Lock.WRITE_LOCK);\n            }\n        }\n    }","commit_id":"a7ce5c7397dd5938a59a34e3b114f11a2842f54c","url":"https://github.com/eXist-db/exist"},{"original_method":"private Sequence functionRemoveACE(final XmldbURI pathUri, final int index) throws PermissionDeniedException {\n        PermissionFactory.updatePermissions(context.getBroker(), pathUri, new PermissionModifier(){\n            @Override\n            public void modify(final Permission permission) throws PermissionDeniedException {\n                if(permission instanceof SimpleACLPermission) {\n                    //remove the ace\n                    final SimpleACLPermission aclPermission = ((SimpleACLPermission)permission);\n                    aclPermission.removeACE(index);\n                } else {\n                    throw new PermissionDeniedException(\"ACL like permissions have not been enabled\");\n                }\n            }\n        });\n        return Sequence.EMPTY_SEQUENCE;\n    }","id":46346,"modified_method":"private Sequence functionRemoveACE(final XmldbURI pathUri, final int index) throws PermissionDeniedException {\n        PermissionFactory.updatePermissions(context.getBroker(), pathUri,\n                forAcl(aclPermission -> aclPermission.removeACE(index))\n        );\n        return Sequence.EMPTY_SEQUENCE;\n    }","commit_id":"a7ce5c7397dd5938a59a34e3b114f11a2842f54c","url":"https://github.com/eXist-db/exist"},{"original_method":"private Sequence functionClearACL(final XmldbURI pathUri) throws PermissionDeniedException {\n        PermissionFactory.updatePermissions(context.getBroker(), pathUri, new PermissionModifier(){\n            @Override\n            public void modify(final Permission permission) throws PermissionDeniedException {\n                if(permission instanceof SimpleACLPermission) {\n                    //clear the acl\n                    final SimpleACLPermission aclPermission = ((SimpleACLPermission)permission);\n                    aclPermission.clear();\n                } else {\n                    throw new PermissionDeniedException(\"ACL like permissions have not been enabled\");\n                }\n            }\n        });\n        return Sequence.EMPTY_SEQUENCE;\n    }","id":46347,"modified_method":"private Sequence functionClearACL(final XmldbURI pathUri) throws PermissionDeniedException {\n        PermissionFactory.updatePermissions(context.getBroker(), pathUri,\n                forAcl(aclPermission -> aclPermission.clear())\n        );\n        return Sequence.EMPTY_SEQUENCE;\n    }","commit_id":"a7ce5c7397dd5938a59a34e3b114f11a2842f54c","url":"https://github.com/eXist-db/exist"},{"original_method":"private Sequence functionChOwn(final XmldbURI pathUri, final String owner) throws PermissionDeniedException {\n        PermissionFactory.updatePermissions(context.getBroker(), pathUri, new PermissionModifier(){\n            @Override\n            public void modify(final Permission permission) throws PermissionDeniedException {\n\n                if(owner.indexOf(OWNER_GROUP_SEPARATOR) > -1) {\n                    permission.setOwner(owner.substring(0, owner.indexOf((OWNER_GROUP_SEPARATOR))));\n                    permission.setGroup(owner.substring(owner.indexOf(OWNER_GROUP_SEPARATOR) + 1));\n                } else {\n                    permission.setOwner(owner);\n                }\n            }\n        });\n        return Sequence.EMPTY_SEQUENCE;\n    }","id":46348,"modified_method":"private Sequence functionChOwn(final XmldbURI pathUri, final String owner) throws PermissionDeniedException {\n        PermissionFactory.updatePermissions(context.getBroker(), pathUri, permission -> {\n            if(owner.indexOf(OWNER_GROUP_SEPARATOR) > -1) {\n                permission.setOwner(owner.substring(0, owner.indexOf((OWNER_GROUP_SEPARATOR))));\n                permission.setGroup(owner.substring(owner.indexOf(OWNER_GROUP_SEPARATOR) + 1));\n            } else {\n                permission.setOwner(owner);\n            }\n        });\n        return Sequence.EMPTY_SEQUENCE;\n    }","commit_id":"a7ce5c7397dd5938a59a34e3b114f11a2842f54c","url":"https://github.com/eXist-db/exist"},{"original_method":"private Sequence functionModifyACE(final XmldbURI pathUri, final int index, final ACE_ACCESS_TYPE access_type, final String mode) throws PermissionDeniedException {\n        PermissionFactory.updatePermissions(context.getBroker(), pathUri, new PermissionModifier(){\n            @Override\n            public void modify(final Permission permission) throws PermissionDeniedException {\n                if(permission instanceof SimpleACLPermission) {\n                    //insert the ace\n                    final SimpleACLPermission aclPermission = ((SimpleACLPermission)permission);\n                    aclPermission.modifyACE(index, access_type, mode);\n                } else {\n                    throw new PermissionDeniedException(\"ACL like permissions have not been enabled\");\n                }\n            }\n        });\n        return Sequence.EMPTY_SEQUENCE;\n    }","id":46349,"modified_method":"private Sequence functionModifyACE(final XmldbURI pathUri, final int index, final ACE_ACCESS_TYPE access_type, final String mode) throws PermissionDeniedException {\n        PermissionFactory.updatePermissions(context.getBroker(), pathUri,\n                forAcl(aclPermission -> aclPermission.modifyACE(index, access_type, mode))\n        );\n        return Sequence.EMPTY_SEQUENCE;\n    }","commit_id":"a7ce5c7397dd5938a59a34e3b114f11a2842f54c","url":"https://github.com/eXist-db/exist"},{"original_method":"private Sequence functionInsertACE(final XmldbURI pathUri, final int index, final ACE_TARGET target, final String name, final ACE_ACCESS_TYPE access_type, final String mode) throws PermissionDeniedException {\n        PermissionFactory.updatePermissions(context.getBroker(), pathUri, new PermissionModifier(){\n            @Override\n            public void modify(final Permission permission) throws PermissionDeniedException {\n                if(permission instanceof SimpleACLPermission) {\n                    //insert the ace\n                    final SimpleACLPermission aclPermission = ((SimpleACLPermission)permission);\n                    aclPermission.insertACE(index, access_type, target, name, mode);\n                } else {\n                    throw new PermissionDeniedException(\"ACL like permissions have not been enabled\");\n                }\n            }\n        });\n        return Sequence.EMPTY_SEQUENCE;\n    }","id":46350,"modified_method":"private Sequence functionInsertACE(final XmldbURI pathUri, final int index, final ACE_TARGET target, final String name, final ACE_ACCESS_TYPE access_type, final String mode) throws PermissionDeniedException {\n        PermissionFactory.updatePermissions(context.getBroker(), pathUri,\n                forAcl(aclPermission -> aclPermission.insertACE(index, access_type, target, name, mode))\n        );\n        return Sequence.EMPTY_SEQUENCE;\n    }","commit_id":"a7ce5c7397dd5938a59a34e3b114f11a2842f54c","url":"https://github.com/eXist-db/exist"},{"original_method":"@Override\n    public Sequence eval(final Sequence[] args, final Sequence contextSequence) throws XPathException {\n\n        Sequence result = Sequence.EMPTY_SEQUENCE;\n\n        if(isCalledAs(qnModeToOctal.getLocalPart())) {\n            final String mode = args[0].itemAt(0).getStringValue();\n            result = functionModeToOctal(mode);\n        } else if(isCalledAs(qnOctalToMode.getLocalPart())) {\n            final String octal = args[0].itemAt(0).getStringValue();\n            result = functionOctalToMode(octal);\n        } else {\n        \n            //all functions below take a path as the first arg\n            final XmldbURI pathUri = ((AnyURIValue)args[0].itemAt(0)).toXmldbURI();\n\n            try {\n                if(isCalledAs(qnGetPermissions.getLocalPart())) {\n                    result = functionGetPermissions(pathUri);\n                } else if(isCalledAs(qnAddUserACE.getLocalPart()) || isCalledAs(qnAddGroupACE.getLocalPart())) {\n                    final ACE_TARGET target = isCalledAs(qnAddUserACE.getLocalPart()) ? ACE_TARGET.USER : ACE_TARGET.GROUP;\n                    final String name = args[1].getStringValue();\n                    final ACE_ACCESS_TYPE access_type = args[2].effectiveBooleanValue() ? ACE_ACCESS_TYPE.ALLOWED : ACE_ACCESS_TYPE.DENIED;\n                    final String mode = args[3].itemAt(0).getStringValue();\n                    result = functionAddACE(pathUri, target, name, access_type, mode);\n                } else if(isCalledAs(qnInsertUserACE.getLocalPart()) || isCalledAs(qnInsertGroupACE.getLocalPart())) {\n                    final ACE_TARGET target = isCalledAs(qnInsertUserACE.getLocalPart()) ? ACE_TARGET.USER : ACE_TARGET.GROUP;\n                    final int index = ((Integer)args[1].itemAt(0).toJavaObject(Integer.class));\n                    final String name = args[2].getStringValue();\n                    final ACE_ACCESS_TYPE access_type = args[3].effectiveBooleanValue() ? ACE_ACCESS_TYPE.ALLOWED : ACE_ACCESS_TYPE.DENIED;\n                    final String mode = args[4].itemAt(0).getStringValue();\n                    result = functionInsertACE(pathUri, index, target, name, access_type, mode);\n                } else if(isCalledAs(qnModifyACE.getLocalPart())) {\n                    final int index = ((Integer)args[1].itemAt(0).toJavaObject(Integer.class));\n                    final ACE_ACCESS_TYPE access_type = args[2].effectiveBooleanValue() ? ACE_ACCESS_TYPE.ALLOWED : ACE_ACCESS_TYPE.DENIED;\n                    final String mode = args[3].itemAt(0).getStringValue();\n                    result = functionModifyACE(pathUri, index, access_type, mode);\n                } else if(isCalledAs(qnRemoveACE.getLocalPart())) {\n                    final int index = ((Integer)args[1].itemAt(0).toJavaObject(Integer.class));\n                    result = functionRemoveACE(pathUri, index);\n                } else if(isCalledAs(qnClearACL.getLocalPart())) {\n                    result = functionClearACL(pathUri);\n                } else if(isCalledAs(qnChMod.getLocalPart())) {\n                    final String mode = args[1].itemAt(0).getStringValue();\n                    result = functionChMod(pathUri, mode);\n                } else if(isCalledAs(qnChOwn.getLocalPart())) {\n                    final String owner = args[1].itemAt(0).getStringValue();\n                    result = functionChOwn(pathUri, owner);\n                }  else if(isCalledAs(qnChGrp.getLocalPart())) {\n                    final String groupname = args[1].itemAt(0).getStringValue();\n                    result = functionChGrp(pathUri, groupname);\n                } else if(isCalledAs(qnHasAccess.getLocalPart())) {\n                    final String mode = args[1].itemAt(0).getStringValue();\n                    result = functionHasAccess(pathUri, mode);\n                }\n            } catch(final PermissionDeniedException pde) {\n              throw new XPathException(this, pde);\n            }\n        }\n\n        return result;\n    }","id":46351,"modified_method":"@Override\n    public Sequence eval(final Sequence[] args, final Sequence contextSequence) throws XPathException {\n\n        final Sequence result;\n\n        if(isCalledAs(qnModeToOctal.getLocalPart())) {\n            final String mode = args[0].itemAt(0).getStringValue();\n            result = functionModeToOctal(mode);\n        } else if(isCalledAs(qnOctalToMode.getLocalPart())) {\n            final String octal = args[0].itemAt(0).getStringValue();\n            result = functionOctalToMode(octal);\n        } else {\n        \n            //all functions below take a path as the first arg\n            final XmldbURI pathUri = ((AnyURIValue)args[0].itemAt(0)).toXmldbURI();\n\n            try {\n                if(isCalledAs(qnGetPermissions.getLocalPart())) {\n                    result = functionGetPermissions(pathUri);\n                } else if(isCalledAs(qnAddUserACE.getLocalPart()) || isCalledAs(qnAddGroupACE.getLocalPart())) {\n                    final ACE_TARGET target = isCalledAs(qnAddUserACE.getLocalPart()) ? ACE_TARGET.USER : ACE_TARGET.GROUP;\n                    final String name = args[1].getStringValue();\n                    final ACE_ACCESS_TYPE access_type = args[2].effectiveBooleanValue() ? ACE_ACCESS_TYPE.ALLOWED : ACE_ACCESS_TYPE.DENIED;\n                    final String mode = args[3].itemAt(0).getStringValue();\n                    result = functionAddACE(pathUri, target, name, access_type, mode);\n                } else if(isCalledAs(qnInsertUserACE.getLocalPart()) || isCalledAs(qnInsertGroupACE.getLocalPart())) {\n                    final ACE_TARGET target = isCalledAs(qnInsertUserACE.getLocalPart()) ? ACE_TARGET.USER : ACE_TARGET.GROUP;\n                    final int index = args[1].itemAt(0).toJavaObject(Integer.class);\n                    final String name = args[2].getStringValue();\n                    final ACE_ACCESS_TYPE access_type = args[3].effectiveBooleanValue() ? ACE_ACCESS_TYPE.ALLOWED : ACE_ACCESS_TYPE.DENIED;\n                    final String mode = args[4].itemAt(0).getStringValue();\n                    result = functionInsertACE(pathUri, index, target, name, access_type, mode);\n                } else if(isCalledAs(qnModifyACE.getLocalPart())) {\n                    final int index = args[1].itemAt(0).toJavaObject(Integer.class);\n                    final ACE_ACCESS_TYPE access_type = args[2].effectiveBooleanValue() ? ACE_ACCESS_TYPE.ALLOWED : ACE_ACCESS_TYPE.DENIED;\n                    final String mode = args[3].itemAt(0).getStringValue();\n                    result = functionModifyACE(pathUri, index, access_type, mode);\n                } else if(isCalledAs(qnRemoveACE.getLocalPart())) {\n                    final int index = args[1].itemAt(0).toJavaObject(Integer.class);\n                    result = functionRemoveACE(pathUri, index);\n                } else if(isCalledAs(qnClearACL.getLocalPart())) {\n                    result = functionClearACL(pathUri);\n                } else if(isCalledAs(qnChMod.getLocalPart())) {\n                    final String mode = args[1].itemAt(0).getStringValue();\n                    result = functionChMod(pathUri, mode);\n                } else if(isCalledAs(qnChOwn.getLocalPart())) {\n                    final String owner = args[1].itemAt(0).getStringValue();\n                    result = functionChOwn(pathUri, owner);\n                }  else if(isCalledAs(qnChGrp.getLocalPart())) {\n                    final String groupname = args[1].itemAt(0).getStringValue();\n                    result = functionChGrp(pathUri, groupname);\n                } else if(isCalledAs(qnHasAccess.getLocalPart())) {\n                    final String mode = args[1].itemAt(0).getStringValue();\n                    result = functionHasAccess(pathUri, mode);\n                } else {\n                    result = Sequence.EMPTY_SEQUENCE;\n                }\n            } catch(final PermissionDeniedException pde) {\n              throw new XPathException(this, pde);\n            }\n        }\n\n        return result;\n    }","commit_id":"a7ce5c7397dd5938a59a34e3b114f11a2842f54c","url":"https://github.com/eXist-db/exist"},{"original_method":"private Sequence functionChMod(final XmldbURI pathUri, final String modeStr) throws PermissionDeniedException {\n        PermissionFactory.updatePermissions(context.getBroker(), pathUri, new PermissionModifier(){\n            @Override\n            public void modify(final Permission permission) throws PermissionDeniedException {\n                try {\n                    permission.setMode(modeStr);\n                } catch(final SyntaxException se) {\n                    throw new PermissionDeniedException(\"Unrecognised mode syntax: \" + se.getMessage(), se);\n                }\n            }\n        });\n        return Sequence.EMPTY_SEQUENCE;\n    }","id":46352,"modified_method":"private Sequence functionChMod(final XmldbURI pathUri, final String modeStr) throws PermissionDeniedException {\n        PermissionFactory.updatePermissions(context.getBroker(), pathUri, permission -> {\n            try {\n                permission.setMode(modeStr);\n            } catch(final SyntaxException se) {\n                throw new PermissionDeniedException(\"Unrecognised mode syntax: \" + se.getMessage(), se);\n            }\n        });\n        return Sequence.EMPTY_SEQUENCE;\n    }","commit_id":"a7ce5c7397dd5938a59a34e3b114f11a2842f54c","url":"https://github.com/eXist-db/exist"},{"original_method":"private Sequence functionAddACE(final XmldbURI pathUri, final ACE_TARGET target, final String name, final ACE_ACCESS_TYPE access_type, final String mode) throws PermissionDeniedException {\n        PermissionFactory.updatePermissions(context.getBroker(), pathUri, new PermissionModifier(){\n            @Override\n            public void modify(final Permission permission) throws PermissionDeniedException {\n                if(permission instanceof SimpleACLPermission) {\n                    //add the ace\n                    final SimpleACLPermission aclPermission = ((SimpleACLPermission)permission);\n                    aclPermission.addACE(access_type, target, name, mode);\n                } else {\n                    throw new PermissionDeniedException(\"ACL like permissions have not been enabled\");\n                }\n            }\n        });\n        return Sequence.EMPTY_SEQUENCE;\n    }","id":46353,"modified_method":"private Sequence functionAddACE(final XmldbURI pathUri, final ACE_TARGET target, final String name, final ACE_ACCESS_TYPE access_type, final String mode) throws PermissionDeniedException {\n        PermissionFactory.updatePermissions(context.getBroker(), pathUri,\n                forAcl(aclPermission -> aclPermission.addACE(access_type, target, name, mode))\n        );\n        return Sequence.EMPTY_SEQUENCE;\n    }","commit_id":"a7ce5c7397dd5938a59a34e3b114f11a2842f54c","url":"https://github.com/eXist-db/exist"},{"original_method":"private Sequence functionChGrp(final XmldbURI pathUri, final String groupname) throws PermissionDeniedException {\n        PermissionFactory.updatePermissions(context.getBroker(), pathUri, new PermissionModifier(){\n            @Override\n            public void modify(final Permission permission) throws PermissionDeniedException {\n                permission.setGroup(groupname);\n            }\n        });\n        return Sequence.EMPTY_SEQUENCE;\n    }","id":46354,"modified_method":"private Sequence functionChGrp(final XmldbURI pathUri, final String groupname) throws PermissionDeniedException {\n        PermissionFactory.updatePermissions(context.getBroker(), pathUri, permission -> permission.setGroup(groupname));\n        return Sequence.EMPTY_SEQUENCE;\n    }","commit_id":"a7ce5c7397dd5938a59a34e3b114f11a2842f54c","url":"https://github.com/eXist-db/exist"},{"original_method":"/**\r\n   * Opens the XUL database dialog\r\n * @return databaseName (or NULL on error or cancel)\r\n */\r\npublic String open() {\r\n\r\n    // Load the XUL definition to a dom4j document...\r\n\tDocument doc = null;\r\n\ttry {\t  \r\n\t\tInputStream in = XulDatabaseDialog.class.getClassLoader().getResourceAsStream(\r\n        \t\"org/pentaho/ui/database/databasedialog.xul\");\r\n\r\n\t\tSAXReader rdr = new SAXReader();\r\n\t\tdoc = rdr.read(in);\r\n    } catch (Exception e) {\r\n\t\tnew ErrorDialog(parentShell, Messages.getString(\"XulDatabaseDialog.Error.Titel\"), Messages.getString(\"XulDatabaseDialog.Error.SAXReader\"), e);\r\n\t\treturn null;\r\n    }\r\n\r\n    XulDomContainer container = null;\r\n    try {\r\n      container = new SwtXulLoader().loadXul(doc);\r\n      dataHandler = container.getEventHandler(\"dataHandler\");\r\n      if (databaseMeta != null) {\r\n        dataHandler.setData(databaseMeta);\r\n      }\r\n    } catch (Exception e) {\r\n\t\tnew ErrorDialog(parentShell, Messages.getString(\"XulDatabaseDialog.Error.Titel\"), Messages.getString(\"XulDatabaseDialog.Error.LoadXul\"), e);\r\n\t\treturn null;\r\n    }\r\n\r\n    try {\r\n        XulComponent boxElement = container.getDocumentRoot().getElementById(\"test-button-box\");\r\n        XulComponent parentElement = boxElement.getParent();\r\n\r\n        XulDomContainer fragmentContainer = null;\r\n      \r\n\t\t// Get new box fragment ...\r\n\t\t// This will effectively set up the SWT parent child relationship...\r\n\t\t  \r\n\t\tString pkg = getClass().getPackage().getName().replace('.', '/');\r\n\t\tfragmentContainer = container.loadFragment(pkg.concat(\"/feature_override.xul\"));\r\n\t\tXulComponent newBox = fragmentContainer.getDocumentRoot().getFirstChild();\r\n\t\tparentElement.replaceChild(boxElement, newBox);\r\n\t\t  \r\n\t\tcontainer.addEventHandler(\"featureHandler\", DataOverrideHandler.class.getName());\r\n\t\t((DataOverrideHandler)container.getEventHandler(\"featureHandler\")).setDatabases(databases);\r\n      \r\n    } catch (XulException e) {\r\n\t\tnew ErrorDialog(parentShell, Messages.getString(\"XulDatabaseDialog.Error.Titel\"), Messages.getString(\"XulDatabaseDialog.Error.HandleXul\"), e);\r\n\t\treturn null;\r\n    }\r\n\r\n    try {\r\n        XulWindow dialog = (XulWindow) container.getDocumentRoot().getRootElement();\r\n        shell = (Shell)dialog.getManagedObject();\r\n        shell.setParent(parentShell);\r\n        props.setLook(shell);\r\n        shell.setImage(GUIResource.getInstance().getImageConnection());\r\n        \r\n        dialog.open();\r\n    \t\r\n        databaseMeta = (DatabaseMeta)dataHandler.getData();\r\n        databaseName = databaseMeta.getDatabaseName();\r\n    } catch (Exception e) {\r\n\t\tnew ErrorDialog(parentShell, Messages.getString(\"XulDatabaseDialog.Error.Titel\"), Messages.getString(\"XulDatabaseDialog.Error.Dialog\"), e);\r\n\t\treturn null;\r\n    }\r\n    return databaseName;\r\n  }","id":46355,"modified_method":"/**\r\n   * Opens the XUL database dialog\r\n * @return databaseName (or NULL on error or cancel)\r\n */\r\npublic String open() {\r\n\r\n    // Load the XUL definition to a dom4j document...\r\n\tDocument doc = null;\r\n\ttry {\t  \r\n\t\tInputStream in = XulDatabaseDialog.class.getClassLoader().getResourceAsStream(\r\n        \t\"org/pentaho/ui/database/databasedialog.xul\");\r\n\r\n\t\tSAXReader rdr = new SAXReader();\r\n\t\tdoc = rdr.read(in);\r\n    } catch (Exception e) {\r\n\t\tnew ErrorDialog(parentShell, Messages.getString(\"XulDatabaseDialog.Error.Titel\"), Messages.getString(\"XulDatabaseDialog.Error.SAXReader\"), e);\r\n\t\treturn null;\r\n    }\r\n\r\n    XulDomContainer container = null;\r\n    try {\r\n      SwtXulLoader loader = new SwtXulLoader();\r\n      loader.register(\"VARIABLETEXTBOX\", \"org.pentaho.di.ui.core.database.dialog.tags.ExtTextbox\");\r\n      container = loader.loadXul(doc);\r\n\r\n      container.addEventHandler(\"dataHandler\", DataOverrideHandler.class.getName());\r\n\r\n      dataHandler = container.getEventHandler(\"dataHandler\");\r\n      if (databaseMeta != null) {\r\n        dataHandler.setData(databaseMeta);\r\n      }\r\n      \r\n      ((DataOverrideHandler) container.getEventHandler(\"dataHandler\")).setDatabases(databases);\r\n      ((DataOverrideHandler) container.getEventHandler(\"dataHandler\")).getControls();\r\n\r\n    } catch (XulException e1) {\r\n      e1.printStackTrace();\r\n    }\r\n\r\n    try {\r\n    // Inject the button panel that contains the \"Feature List\" and \"Explore\" buttons\r\n\r\n        XulComponent boxElement = container.getDocumentRoot().getElementById(\"test-button-box\");\r\n        XulComponent parentElement = boxElement.getParent();\r\n\r\n        XulDomContainer fragmentContainer = null;\r\n      \r\n\t\t// Get new box fragment ...\r\n\t\t// This will effectively set up the SWT parent child relationship...\r\n\t\t  \r\n\t\tString pkg = getClass().getPackage().getName().replace('.', '/');\r\n\t\tfragmentContainer = container.loadFragment(pkg.concat(\"/feature_override.xul\"));\r\n\t\tXulComponent newBox = fragmentContainer.getDocumentRoot().getFirstChild();\r\n\t\tparentElement.replaceChild(boxElement, newBox);\r\n\t\t  \r\n      \r\n    } catch (XulException e) {\r\n\t\tnew ErrorDialog(parentShell, Messages.getString(\"XulDatabaseDialog.Error.Titel\"), Messages.getString(\"XulDatabaseDialog.Error.HandleXul\"), e);\r\n\t\treturn null;\r\n    }\r\n\r\n    try {\r\n        XulWindow dialog = (XulWindow) container.getDocumentRoot().getRootElement();\r\n        shell = (Shell)dialog.getManagedObject();\r\n        shell.setParent(parentShell);\r\n    // props.setLook(shell);\r\n        shell.setImage(GUIResource.getInstance().getImageConnection());\r\n        \r\n        dialog.open();\r\n    \t\r\n        databaseMeta = (DatabaseMeta)dataHandler.getData();\r\n        databaseName = databaseMeta.getDatabaseName();\r\n    } catch (Exception e) {\r\n\t\tnew ErrorDialog(parentShell, Messages.getString(\"XulDatabaseDialog.Error.Titel\"), Messages.getString(\"XulDatabaseDialog.Error.Dialog\"), e);\r\n\t\treturn null;\r\n    }\r\n    return databaseName;\r\n  }","commit_id":"10213ad319bc7c646ef04a94ef32ee0bff248866","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"/** Parse an attribute and adds it to the definition.\n\t */\n\tprivate void addAttribute(InstanceDefinition instdef, Namespace attrns,\n\tString name, String value, Condition cond) throws Exception {\n\t\tif (Events.isValid(name)) {\n\t\t\tboolean bZkAttr = attrns == null;\n\t\t\tif (!bZkAttr) {\n\t\t\t\tfinal String pref = attrns.getPrefix(), uri = attrns.getURI();\n\t\t\t\tfinal LanguageDefinition langdef = instdef.getLanguageDefinition();\n\t\t\t\tif (langdef == null)\n\t\t\t\t\tbZkAttr = true;\n\t\t\t\telse if (isDefault(langdef, pref, uri))\n\t\t\t\t\tbZkAttr = !langdef.isDynamicReservedAttributes(\"[event]\");\n\t\t\t\telse\n\t\t\t\t\tbZkAttr = LanguageDefinition.ZK_NAMESPACE.equals(uri);\n\t\t\t}\n\t\t\tif (bZkAttr) {\n\t\t\t\tinstdef.addEventHandler(name, ZScript.parseContent(value, null), cond);\n\t\t\t\treturn; //done\n\t\t\t}\n\t\t}\n\t\tinstdef.addProperty(name, value, cond);\n\t}","id":46356,"modified_method":"/** Parse an attribute and adds it to the definition.\n\t */\n\tprivate void addAttribute(InstanceDefinition instdef, Namespace attrns,\n\tString name, String value, Condition cond) throws Exception {\n\t\tif (Events.isValid(name)) {\n\t\t\tboolean bZkAttr = attrns == null;\n\t\t\tif (!bZkAttr) {\n\t\t\t\tfinal String pref = attrns.getPrefix(), uri = attrns.getURI();\n\t\t\t\tfinal LanguageDefinition langdef = instdef.getLanguageDefinition();\n\t\t\t\tif (langdef == null)\n\t\t\t\t\tbZkAttr = true;\n\t\t\t\telse if (isDefault(langdef, pref, uri))\n\t\t\t\t\tbZkAttr = !langdef.isDynamicReservedAttributes(\"[event]\");\n\t\t\t\telse\n\t\t\t\t\tbZkAttr = LanguageDefinition.ZK_NAMESPACE.equals(uri);\n\t\t\t}\n\t\t\tif (bZkAttr) {\n\t\t\t\tfinal ZScript zscript = ZScript.parseContent(value, null);\n\t\t\t\tif (zscript.getLanguage() == null)\n\t\t\t\t\tzscript.setLanguage(\n\t\t\t\t\t\tinstdef.getPageDefinition().getZScriptLanguage());\n\t\t\t\t\t\t//resolve it here instead of runtime since createComponents\n\t\t\t\tinstdef.addEventHandler(name, zscript, cond);\n\t\t\t\treturn; //done\n\t\t\t}\n\t\t}\n\t\tinstdef.addProperty(name, value, cond);\n\t}","commit_id":"31146c95a3e190d5c472ca2e0d545e05fe3f327b","url":"https://github.com/zkoss/zk"},{"original_method":"/** Parse processing instruction.\n\t */\n\tprivate void parse(PageDefinition pgdef, ProcessingInstruction pi)\n\tthrows Exception {\n\t\tfinal String target = pi.getTarget();\n\t\tfinal Map params = pi.parseData();\n\t\tif (\"taglib\".equals(target)) {\n\t\t\tfinal String uri = (String)params.remove(\"uri\");\n\t\t\tfinal String prefix = (String)params.remove(\"prefix\");\n\t\t\tif (!params.isEmpty())\n\t\t\t\tlog.warning(\"Ignored unknown attributes: \"+params.keySet()+\", \"+pi.getLocator());\n\t\t\tif (uri == null || prefix == null)\n\t\t\t\tthrow new UiException(\"Both uri and prefix attribute are required, \"+pi.getLocator());\n\t\t\t//if (D.ON && log.debugable()) log.debug(\"taglib: prefix=\"+prefix+\" uri=\"+uri);\n\t\t\tnoEL(\"prefix\", prefix, pi);\n\t\t\tnoEL(\"uri\", uri, pi); //not support EL (kind of chicken-egg issue)\n\t\t\tpgdef.addTaglib(new Taglib(prefix, toAbsoluteURI(uri, false)));\n\t\t} else if (\"init\".equals(target)) {\n\t\t\tfinal List args = new LinkedList();\n\t\t\tfor (int j = 0;; ++j) {\n\t\t\t\tfinal String arg = (String)params.remove(\"arg\" + j);\n\t\t\t\tif (arg == null) break;\n\t\t\t\targs.add(arg);\n\t\t\t}\n\n\t\t\tfinal String clsnm = (String)params.remove(\"class\");\n\t\t\tfinal String zsrc = (String)params.remove(\"zscript\");\n\n\t\t\tif (!params.isEmpty())\n\t\t\t\tlog.warning(\"Ignored unknown attributes: \"+params.keySet()+\", \"+pi.getLocator());\n\n\t\t\tif (isEmpty(clsnm)) {\n\t\t\t\tif (isEmpty(zsrc))\n\t\t\t\t\tthrow new UiException(\"Either the class or zscript attribute must be specified, \"+pi.getLocator());\n\n\t\t\t\tfinal ZScript zs;\n\t\t\t\tif (zsrc.indexOf(\"${\") >= 0) {\n\t\t\t\t\tzs = new ZScript(null, zsrc, null, getLocator()); //URL in EL\n\t\t\t\t} else {\n\t\t\t\t\tfinal URL url = getLocator().getResource(zsrc);\n\t\t\t\t\tif (url == null) throw new FileNotFoundException(\"File not found: \"+zsrc+\", at \"+pi.getLocator());\n\t\t\t\t\tzs = new ZScript(null, url, null);\n\t\t\t\t}\n\n\t\t\t\tpgdef.addInitiatorDefinition(\n\t\t\t\t\tnew InitiatorDefinition(new ZScriptInitiator(zs), args));\n\t\t\t} else {\n\t\t\t\tif (!isEmpty(zsrc))\n\t\t\t\t\tthrow new UiException(\"You cannot specify both class and zscript, \"+pi.getLocator());\n\n\t\t\t\tpgdef.addInitiatorDefinition(\n\t\t\t\t\tclsnm.indexOf(\"${\") >= 0 ? //class supports EL\n\t\t\t\t\t\tnew InitiatorDefinition(clsnm, args):\n\t\t\t\t\t\tnew InitiatorDefinition(locateClass(clsnm), args));\n\t\t\t\t\t//Note: we don't resolve the class name later because\n\t\t\t\t\t//no zscript run before init (and better performance)\n\t\t\t}\n\t\t} else if (\"variable-resolver\".equals(target)) {\n\t\t\tfinal String clsnm = (String)params.remove(\"class\");\n\t\t\tif (isEmpty(clsnm))\n\t\t\t\tthrow new UiException(\"The class attribute is required, \"+pi.getLocator());\n\t\t\tif (!params.isEmpty())\n\t\t\t\tlog.warning(\"Ignored unknown attributes: \"+params.keySet()+\", \"+pi.getLocator());\n\n\t\t\tpgdef.addVariableResolverDefinition(\n\t\t\t\tclsnm.indexOf(\"${\") >= 0 ? //class supports EL\n\t\t\t\t\tnew VariableResolverDefinition(clsnm):\n\t\t\t\t\tnew VariableResolverDefinition(locateClass(clsnm)));\n\t\t} else if (\"component\".equals(target)) { //declare a component\n\t\t\tfinal String name = (String)params.remove(\"name\");\n\t\t\tif (isEmpty(name)) throw new UiException(\"name is required, \"+pi.getLocator());\n\t\t\tnoEL(\"name\", name, pi); //note: macro-uri supports EL\n\n\t\t\tfinal String macroURI = (String)params.remove(\"macro-uri\");\n\t\t\tfinal String extds = (String)params.remove(\"extends\");\n\t\t\tfinal String clsnm = (String)params.remove(\"class\");\n\t\t\tComponentDefinition compdef;\n\t\t\tif (macroURI != null) {\n\t\t\t\t//if (D.ON && log.finerable()) log.finer(\"macro component definition: \"+name);\n\n\t\t\t\tnoEL(\"macro-uri\", macroURI, pi);\n\t\t\t\t\t//no EL because pagedef must be loaded to resolve\n\t\t\t\t\t//the impl class before creating an instance of macro\n\n\t\t\t\tcompdef = new ComponentDefinition(\n\t\t\t\t\tnull, name, toAbsoluteURI(macroURI, false));\n\t\t\t\tpgdef.getLanguageDefinition().initMacroDefinition(compdef);\n\t\t\t\tif (!isEmpty(clsnm)) {\n\t\t\t\t\tnoEL(\"class\", clsnm, pi);\n\t\t\t\t\tcompdef.setImplementationClass(clsnm);\n\t\t\t\t\t\t//Resolve later since might defined in zscript\n\t\t\t\t}\n\t\t\t} else if (extds != null) { //extends\n\t\t\t\t//if (D.ON && log.finerable()) log.finer(\"Override component definition: \"+name);\n\n\t\t\t\tnoEL(\"extends\", extds, pi);\n\t\t\t\tfinal ComponentDefinition ref = pgdef.getLanguageDefinition()\n\t\t\t\t\t.getComponentDefinition(extds);\n\t\t\t\tif (ref.isMacro())\n\t\t\t\t\tthrow new UiException(\"Unable to extend from a macro component, \"+pi.getLocator());\n\n\t\t\t\tcompdef = (ComponentDefinition)ref.clone(name);\n\t\t\t\tcompdef.setLanguageDefinition(null);\n\t\t\t\tif (!isEmpty(clsnm)) {\n\t\t\t\t\tnoEL(\"class\", clsnm, pi);\n\t\t\t\t\tcompdef.setImplementationClass(clsnm);\n\t\t\t\t\t\t//Resolve later since might defined in zscript\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//if (D.ON && log.finerable()) log.finer(\"Add component definition: name=\"+name);\n\n\t\t\t\tif (isEmpty(clsnm)) throw new UiException(\"class is required, \"+pi.getLocator());\n\t\t\t\tnoEL(\"class\", clsnm, pi);\n\n\t\t\t\tcompdef = new ComponentDefinition(null, name, (Class)null);\n\t\t\t\tcompdef.setImplementationClass(clsnm);\n\t\t\t\t\t//Resolve later since might be defined in zscript\n\t\t\t}\n\n\t\t\tpgdef.addComponentDefinition(compdef);\n\n\t\t\tfinal String moldnm = (String)params.remove(\"mold-name\");\n\t\t\tnoEL(\"mold-name\", moldnm, pi);\n\t\t\tfinal String moldURI = (String)params.remove(\"mold-uri\");\n\t\t\tif (!isEmpty(moldURI))\n\t\t\t\tcompdef.addMold(isEmpty(moldnm) ? \"default\": moldnm,\n\t\t\t\t\ttoAbsoluteURI(moldURI, true));\n\t\t\tfor (Iterator e = params.entrySet().iterator(); e.hasNext();) {\n\t\t\t\tfinal Map.Entry me = (Map.Entry)e.next();\n\t\t\t\tcompdef.addProperty(\n\t\t\t\t\t(String)me.getKey(), (String)me.getValue(), null);\n\t\t\t}\n\t\t} else if (\"link\".equals(target) || \"meta\".equals(target)) { //declare a header element\n\t\t\tpgdef.addHeader(new Header(target, params));\n\t\t} else if (\"page\".equals(target)) {\n\t\t\tparsePageDirective(pgdef, pi, params);\n\t\t} else if (\"import\".equals(target)) { //import\n\t\t\tthrow new UiException(\"The import directive can be used only at the top level, \"+pi.getLocator());\n\t\t} else {\n\t\t\tlog.warning(\"Unknown processing instruction: \"+target+\", \"+pi.getLocator());\n\t\t}\n\t}","id":46357,"modified_method":"/** Parse processing instruction.\n\t */\n\tprivate void parse(PageDefinition pgdef, ProcessingInstruction pi)\n\tthrows Exception {\n\t\tfinal String target = pi.getTarget();\n\t\tfinal Map params = pi.parseData();\n\t\tif (\"taglib\".equals(target)) {\n\t\t\tfinal String uri = (String)params.remove(\"uri\");\n\t\t\tfinal String prefix = (String)params.remove(\"prefix\");\n\t\t\tif (!params.isEmpty())\n\t\t\t\tlog.warning(\"Ignored unknown attributes: \"+params.keySet()+\", \"+pi.getLocator());\n\t\t\tif (uri == null || prefix == null)\n\t\t\t\tthrow new UiException(\"Both uri and prefix attribute are required, \"+pi.getLocator());\n\t\t\t//if (D.ON && log.debugable()) log.debug(\"taglib: prefix=\"+prefix+\" uri=\"+uri);\n\t\t\tnoEL(\"prefix\", prefix, pi);\n\t\t\tnoEL(\"uri\", uri, pi); //not support EL (kind of chicken-egg issue)\n\t\t\tpgdef.addTaglib(new Taglib(prefix, toAbsoluteURI(uri, false)));\n\t\t} else if (\"init\".equals(target)) {\n\t\t\tfinal List args = new LinkedList();\n\t\t\tfor (int j = 0;; ++j) {\n\t\t\t\tfinal String arg = (String)params.remove(\"arg\" + j);\n\t\t\t\tif (arg == null) break;\n\t\t\t\targs.add(arg);\n\t\t\t}\n\n\t\t\tfinal String clsnm = (String)params.remove(\"class\");\n\t\t\tfinal String zsrc = (String)params.remove(\"zscript\");\n\n\t\t\tif (!params.isEmpty())\n\t\t\t\tlog.warning(\"Ignored unknown attributes: \"+params.keySet()+\", \"+pi.getLocator());\n\n\t\t\tif (isEmpty(clsnm)) {\n\t\t\t\tif (isEmpty(zsrc))\n\t\t\t\t\tthrow new UiException(\"Either the class or zscript attribute must be specified, \"+pi.getLocator());\n\n\t\t\t\tfinal ZScript zs;\n\t\t\t\tfinal String zslang = pgdef.getZScriptLanguage();\n\t\t\t\tif (zsrc.indexOf(\"${\") >= 0) {\n\t\t\t\t\tzs = new ZScript(zslang, zsrc, null, getLocator()); //URL in EL\n\t\t\t\t} else {\n\t\t\t\t\tfinal URL url = getLocator().getResource(zsrc);\n\t\t\t\t\tif (url == null) throw new FileNotFoundException(\"File not found: \"+zsrc+\", at \"+pi.getLocator());\n\t\t\t\t\tzs = new ZScript(zslang, url, null);\n\t\t\t\t}\n\n\t\t\t\tpgdef.addInitiatorDefinition(\n\t\t\t\t\tnew InitiatorDefinition(new ZScriptInitiator(zs), args));\n\t\t\t} else {\n\t\t\t\tif (!isEmpty(zsrc))\n\t\t\t\t\tthrow new UiException(\"You cannot specify both class and zscript, \"+pi.getLocator());\n\n\t\t\t\tpgdef.addInitiatorDefinition(\n\t\t\t\t\tclsnm.indexOf(\"${\") >= 0 ? //class supports EL\n\t\t\t\t\t\tnew InitiatorDefinition(clsnm, args):\n\t\t\t\t\t\tnew InitiatorDefinition(locateClass(clsnm), args));\n\t\t\t\t\t//Note: we don't resolve the class name later because\n\t\t\t\t\t//no zscript run before init (and better performance)\n\t\t\t}\n\t\t} else if (\"variable-resolver\".equals(target)) {\n\t\t\tfinal String clsnm = (String)params.remove(\"class\");\n\t\t\tif (isEmpty(clsnm))\n\t\t\t\tthrow new UiException(\"The class attribute is required, \"+pi.getLocator());\n\t\t\tif (!params.isEmpty())\n\t\t\t\tlog.warning(\"Ignored unknown attributes: \"+params.keySet()+\", \"+pi.getLocator());\n\n\t\t\tpgdef.addVariableResolverDefinition(\n\t\t\t\tclsnm.indexOf(\"${\") >= 0 ? //class supports EL\n\t\t\t\t\tnew VariableResolverDefinition(clsnm):\n\t\t\t\t\tnew VariableResolverDefinition(locateClass(clsnm)));\n\t\t} else if (\"component\".equals(target)) { //declare a component\n\t\t\tfinal String name = (String)params.remove(\"name\");\n\t\t\tif (isEmpty(name)) throw new UiException(\"name is required, \"+pi.getLocator());\n\t\t\tnoEL(\"name\", name, pi); //note: macro-uri supports EL\n\n\t\t\tfinal String macroURI = (String)params.remove(\"macro-uri\");\n\t\t\tfinal String extds = (String)params.remove(\"extends\");\n\t\t\tfinal String clsnm = (String)params.remove(\"class\");\n\t\t\tComponentDefinition compdef;\n\t\t\tif (macroURI != null) {\n\t\t\t\t//if (D.ON && log.finerable()) log.finer(\"macro component definition: \"+name);\n\n\t\t\t\tnoEL(\"macro-uri\", macroURI, pi);\n\t\t\t\t\t//no EL because pagedef must be loaded to resolve\n\t\t\t\t\t//the impl class before creating an instance of macro\n\n\t\t\t\tcompdef = new ComponentDefinition(\n\t\t\t\t\tnull, name, toAbsoluteURI(macroURI, false));\n\t\t\t\tpgdef.getLanguageDefinition().initMacroDefinition(compdef);\n\t\t\t\tif (!isEmpty(clsnm)) {\n\t\t\t\t\tnoEL(\"class\", clsnm, pi);\n\t\t\t\t\tcompdef.setImplementationClass(clsnm);\n\t\t\t\t\t\t//Resolve later since might defined in zscript\n\t\t\t\t}\n\t\t\t} else if (extds != null) { //extends\n\t\t\t\t//if (D.ON && log.finerable()) log.finer(\"Override component definition: \"+name);\n\n\t\t\t\tnoEL(\"extends\", extds, pi);\n\t\t\t\tfinal ComponentDefinition ref = pgdef.getLanguageDefinition()\n\t\t\t\t\t.getComponentDefinition(extds);\n\t\t\t\tif (ref.isMacro())\n\t\t\t\t\tthrow new UiException(\"Unable to extend from a macro component, \"+pi.getLocator());\n\n\t\t\t\tcompdef = (ComponentDefinition)ref.clone(name);\n\t\t\t\tcompdef.setLanguageDefinition(null);\n\t\t\t\tif (!isEmpty(clsnm)) {\n\t\t\t\t\tnoEL(\"class\", clsnm, pi);\n\t\t\t\t\tcompdef.setImplementationClass(clsnm);\n\t\t\t\t\t\t//Resolve later since might defined in zscript\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//if (D.ON && log.finerable()) log.finer(\"Add component definition: name=\"+name);\n\n\t\t\t\tif (isEmpty(clsnm)) throw new UiException(\"class is required, \"+pi.getLocator());\n\t\t\t\tnoEL(\"class\", clsnm, pi);\n\n\t\t\t\tcompdef = new ComponentDefinition(null, name, (Class)null);\n\t\t\t\tcompdef.setImplementationClass(clsnm);\n\t\t\t\t\t//Resolve later since might be defined in zscript\n\t\t\t}\n\n\t\t\tpgdef.addComponentDefinition(compdef);\n\n\t\t\tfinal String moldnm = (String)params.remove(\"mold-name\");\n\t\t\tnoEL(\"mold-name\", moldnm, pi);\n\t\t\tfinal String moldURI = (String)params.remove(\"mold-uri\");\n\t\t\tif (!isEmpty(moldURI))\n\t\t\t\tcompdef.addMold(isEmpty(moldnm) ? \"default\": moldnm,\n\t\t\t\t\ttoAbsoluteURI(moldURI, true));\n\t\t\tfor (Iterator e = params.entrySet().iterator(); e.hasNext();) {\n\t\t\t\tfinal Map.Entry me = (Map.Entry)e.next();\n\t\t\t\tcompdef.addProperty(\n\t\t\t\t\t(String)me.getKey(), (String)me.getValue(), null);\n\t\t\t}\n\t\t} else if (\"link\".equals(target) || \"meta\".equals(target)) { //declare a header element\n\t\t\tpgdef.addHeader(new Header(target, params));\n\t\t} else if (\"page\".equals(target)) {\n\t\t\tparsePageDirective(pgdef, pi, params);\n\t\t} else if (\"import\".equals(target)) { //import\n\t\t\tthrow new UiException(\"The import directive can be used only at the top level, \"+pi.getLocator());\n\t\t} else {\n\t\t\tlog.warning(\"Unknown processing instruction: \"+target+\", \"+pi.getLocator());\n\t\t}\n\t}","commit_id":"31146c95a3e190d5c472ca2e0d545e05fe3f327b","url":"https://github.com/zkoss/zk"},{"original_method":"private void parseZScript(InstanceDefinition parent, Element el,\n\tAnnotInfo annotInfo) throws Exception {\n\t\t//if (!el.getElements().isEmpty())\n\t\t//\tthrow new UiException(\"Child elements are not allowed for the zscript element, \"+el.getLocator());\n\n\t\tif (el.getAttributeItem(\"forEach\") != null)\n\t\t\tthrow new UiException(\"forEach not applicable to zscript, \"+el.getLocator());\n\t\tif (annotInfo.clear())\n\t\t\tlog.warning(\"Annotations are ignored since <zscript> doesn't support them, \"+el.getLocator());\n\n\t\tfinal String ifc = el.getAttribute(\"if\"),\n\t\t\tunless = el.getAttribute(\"unless\"),\n\t\t\tzsrc = el.getAttribute(\"src\");\n\n\t\tString zslang = el.getAttribute(\"language\");\n\t\tif (zslang != null && zslang.length() == 0) zslang = null;\n\t\t\t//means the default scripting language\n\n\t\tfinal Condition cond = ConditionImpl.getInstance(ifc, unless);\n\t\tif (!isEmpty(zsrc)) {\n\t\t\tfinal ZScript zs;\n\t\t\tif (zsrc.indexOf(\"${\") >= 0) {\n\t\t\t\tzs = new ZScript(zslang, zsrc, cond, getLocator());\n\t\t\t} else {\n\t\t\t\tfinal URL url = getLocator().getResource(zsrc);\n\t\t\t\tif (url == null) throw new FileNotFoundException(\"File not found: \"+zsrc+\", at \"+el.getLocator());\n\t\t\t\tzs = new ZScript(zslang, url, cond);\n\t\t\t}\n\n\t\t\tparent.appendChild(zs);\n\t\t}\n\n\t\tfinal String script = el.getText(true);\n\t\tif (!isEmpty(script))\n\t\t\tparent.appendChild(new ZScript(zslang, script, cond));\n\t}","id":46358,"modified_method":"private void parseZScript(InstanceDefinition parent, Element el,\n\tAnnotInfo annotInfo) throws Exception {\n\t\t//if (!el.getElements().isEmpty())\n\t\t//\tthrow new UiException(\"Child elements are not allowed for the zscript element, \"+el.getLocator());\n\n\t\tif (el.getAttributeItem(\"forEach\") != null)\n\t\t\tthrow new UiException(\"forEach not applicable to zscript, \"+el.getLocator());\n\t\tif (annotInfo.clear())\n\t\t\tlog.warning(\"Annotations are ignored since <zscript> doesn't support them, \"+el.getLocator());\n\n\t\tfinal String ifc = el.getAttribute(\"if\"),\n\t\t\tunless = el.getAttribute(\"unless\"),\n\t\t\tzsrc = el.getAttribute(\"src\");\n\n\t\tString zslang = el.getAttribute(\"language\");\n\t\tif (zslang != null && zslang.length() == 0)\n\t\t\tzslang = parent.getPageDefinition().getZScriptLanguage();\n\t\t\t//we have to resolve it in parser since a page might be\n\t\t\t//created by use of createComponents\n\n\t\tfinal Condition cond = ConditionImpl.getInstance(ifc, unless);\n\t\tif (!isEmpty(zsrc)) {\n\t\t\tfinal ZScript zs;\n\t\t\tif (zsrc.indexOf(\"${\") >= 0) {\n\t\t\t\tzs = new ZScript(zslang, zsrc, cond, getLocator());\n\t\t\t} else {\n\t\t\t\tfinal URL url = getLocator().getResource(zsrc);\n\t\t\t\tif (url == null) throw new FileNotFoundException(\"File not found: \"+zsrc+\", at \"+el.getLocator());\n\t\t\t\tzs = new ZScript(zslang, url, cond);\n\t\t\t}\n\n\t\t\tparent.appendChild(zs);\n\t\t}\n\n\t\tfinal String script = el.getText(true);\n\t\tif (!isEmpty(script))\n\t\t\tparent.appendChild(new ZScript(zslang, script, cond));\n\t}","commit_id":"31146c95a3e190d5c472ca2e0d545e05fe3f327b","url":"https://github.com/zkoss/zk"},{"original_method":"private static SNode _quotation_createNode_mxlioj_a0a5a6a3a5(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4, Object parameter_5) {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    SNode quotedNode_12 = null;\n    SNode quotedNode_13 = null;\n    SNode quotedNode_14 = null;\n    SNode quotedNode_15 = null;\n    SNode quotedNode_16 = null;\n    SNode quotedNode_17 = null;\n    SNode quotedNode_18 = null;\n    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L, \"jetbrains.mps.baseLanguage.structure.IfStatement\"), null, null, false);\n    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, \"jetbrains.mps.baseLanguage.structure.StatementList\"), null, null, false);\n    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f0L, \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement\"), null, null, false);\n    quotedNode_14 = (SNode) parameter_1;\n    if (quotedNode_14 != null) {\n      quotedNode_9.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f0L, 0xf8cc67c7f1L, \"localVariableDeclaration\"), HUtil.copyIfNecessary(quotedNode_14));\n    }\n    quotedNode_7.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, 0xf8cc6bf961L, \"statement\"), quotedNode_9);\n    {\n      List<SNode> nodes = (List<SNode>) parameter_2;\n      for (SNode child : nodes) {\n        quotedNode_7.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, 0xf8cc6bf961L, \"statement\"), HUtil.copyIfNecessary(child));\n      }\n    }\n    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7feL, \"jetbrains.mps.baseLanguage.structure.ReturnStatement\"), null, null, false);\n    quotedNode_15 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, \"jetbrains.mps.baseLanguage.structure.VariableReference\"), null, null, false);\n    SNodeAccessUtil.setReferenceTarget(quotedNode_15, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, 0xf8cc6bf960L, \"variableDeclaration\"), (SNode) parameter_3);\n    quotedNode_11.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7feL, 0xf8cc6bf96cL, \"expression\"), quotedNode_15);\n    quotedNode_7.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, 0xf8cc6bf961L, \"statement\"), quotedNode_11);\n    quotedNode_6.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L, 0xf8cc56b219L, \"ifTrue\"), quotedNode_7);\n    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, \"jetbrains.mps.baseLanguage.structure.DotExpression\"), null, null, false);\n    quotedNode_12 = (SNode) parameter_4;\n    if (quotedNode_12 != null) {\n      quotedNode_8.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46a4416L, \"operand\"), HUtil.copyIfNecessary(quotedNode_12));\n    }\n    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118154a6332L, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), null, null, false);\n    quotedNode_13.setReference(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, \"baseMethodDeclaration\"), SReference.create(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, \"baseMethodDeclaration\"), quotedNode_13, facade.createModelReference(\"6354ebe7-c22a-4a0f-ac54-50b52ab9b065/java:java.lang(JDK/)\"), facade.createNodeId(\"~Object.equals(java.lang.Object):boolean\")));\n    quotedNode_17 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x24b2bf7ce180eb54L, \"jetbrains.mps.lang.smodel.structure.ConceptIdRefExpression\"), null, null, false);\n    SNodeAccessUtil.setReferenceTarget(quotedNode_17, MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x24b2bf7ce180eb54L, 0x24b2bf7ce180eb55L, \"conceptDeclaration\"), (SNode) parameter_5);\n    quotedNode_13.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, \"actualArgument\"), quotedNode_17);\n    quotedNode_8.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46b36c4L, \"operation\"), quotedNode_13);\n    quotedNode_6.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L, 0xf8cc56b218L, \"condition\"), quotedNode_8);\n    return quotedNode_6;\n  }","id":46359,"modified_method":"private static SNode _quotation_createNode_mxlioj_a0a5a6a3a5(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4, Object parameter_5) {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    SNode quotedNode_12 = null;\n    SNode quotedNode_13 = null;\n    SNode quotedNode_14 = null;\n    SNode quotedNode_15 = null;\n    SNode quotedNode_16 = null;\n    SNode quotedNode_17 = null;\n    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L, \"jetbrains.mps.baseLanguage.structure.IfStatement\"), null, null, false);\n    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, \"jetbrains.mps.baseLanguage.structure.StatementList\"), null, null, false);\n    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f0L, \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement\"), null, null, false);\n    quotedNode_14 = (SNode) parameter_1;\n    if (quotedNode_14 != null) {\n      quotedNode_9.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f0L, 0xf8cc67c7f1L, \"localVariableDeclaration\"), HUtil.copyIfNecessary(quotedNode_14));\n    }\n    quotedNode_7.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, 0xf8cc6bf961L, \"statement\"), quotedNode_9);\n    {\n      List<SNode> nodes = (List<SNode>) parameter_2;\n      for (SNode child : nodes) {\n        quotedNode_7.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, 0xf8cc6bf961L, \"statement\"), HUtil.copyIfNecessary(child));\n      }\n    }\n    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7feL, \"jetbrains.mps.baseLanguage.structure.ReturnStatement\"), null, null, false);\n    quotedNode_15 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, \"jetbrains.mps.baseLanguage.structure.VariableReference\"), null, null, false);\n    SNodeAccessUtil.setReferenceTarget(quotedNode_15, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, 0xf8cc6bf960L, \"variableDeclaration\"), (SNode) parameter_3);\n    quotedNode_11.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7feL, 0xf8cc6bf96cL, \"expression\"), quotedNode_15);\n    quotedNode_7.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, 0xf8cc6bf961L, \"statement\"), quotedNode_11);\n    quotedNode_6.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L, 0xf8cc56b219L, \"ifTrue\"), quotedNode_7);\n    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, \"jetbrains.mps.baseLanguage.structure.DotExpression\"), null, null, false);\n    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118154a6332L, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), null, null, false);\n    quotedNode_12.setReference(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, \"baseMethodDeclaration\"), SReference.create(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, \"baseMethodDeclaration\"), quotedNode_12, facade.createModelReference(\"6354ebe7-c22a-4a0f-ac54-50b52ab9b065/java:java.util(JDK/)\"), facade.createNodeId(\"~List.equals(java.lang.Object):boolean\")));\n    quotedNode_16 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x24b2bf7ce180eb54L, \"jetbrains.mps.lang.smodel.structure.ConceptIdRefExpression\"), null, null, false);\n    SNodeAccessUtil.setReferenceTarget(quotedNode_16, MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x24b2bf7ce180eb54L, 0x24b2bf7ce180eb55L, \"conceptDeclaration\"), (SNode) parameter_4);\n    quotedNode_12.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, \"actualArgument\"), quotedNode_16);\n    quotedNode_8.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46b36c4L, \"operation\"), quotedNode_12);\n    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, \"jetbrains.mps.baseLanguage.structure.VariableReference\"), null, null, false);\n    SNodeAccessUtil.setReferenceTarget(quotedNode_13, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, 0xf8cc6bf960L, \"variableDeclaration\"), (SNode) parameter_5);\n    quotedNode_8.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46a4416L, \"operand\"), quotedNode_13);\n    quotedNode_6.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L, 0xf8cc56b218L, \"condition\"), quotedNode_8);\n    return quotedNode_6;\n  }","commit_id":"ef6aec9355f38ef9c550fa3659999f8b7f4d8c2d","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_mxlioj_a0a0a3a6a3a5(Object parameter_1, Object parameter_2) {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b213L, \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\"), null, null, false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, \"jetbrains.mps.baseLanguage.structure.DotExpression\"), null, null, false);\n    quotedNode_5 = (SNode) parameter_1;\n    if (quotedNode_5 != null) {\n      quotedNode_4.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46a4416L, \"operand\"), HUtil.copyIfNecessary(quotedNode_5));\n    }\n    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118154a6332L, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), null, null, false);\n    quotedNode_6.setReference(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, \"baseMethodDeclaration\"), SReference.create(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, \"baseMethodDeclaration\"), quotedNode_6, facade.createModelReference(\"6354ebe7-c22a-4a0f-ac54-50b52ab9b065/java:java.util(JDK/)\"), facade.createNodeId(\"~ArrayList.add(java.lang.Object):boolean\")));\n    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x11157a3736dL, \"jetbrains.mps.baseLanguageInternal.structure.InternalNewExpression\"), null, null, false);\n    SNodeAccessUtil.setProperty(quotedNode_8, MetaAdapterFactory.getProperty(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x11157a3736dL, 0x11157a64c91L, \"fqClassName\"), (String) parameter_2);\n    quotedNode_6.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, \"actualArgument\"), quotedNode_8);\n    quotedNode_4.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46b36c4L, \"operation\"), quotedNode_6);\n    quotedNode_3.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b213L, 0xf8cc56b214L, \"expression\"), quotedNode_4);\n    return quotedNode_3;\n  }","id":46360,"modified_method":"private static SNode _quotation_createNode_mxlioj_a0a0a3a6a3a5(Object parameter_1, Object parameter_2) {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b213L, \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\"), null, null, false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, \"jetbrains.mps.baseLanguage.structure.DotExpression\"), null, null, false);\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118154a6332L, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), null, null, false);\n    quotedNode_5.setReference(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, \"baseMethodDeclaration\"), SReference.create(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, \"baseMethodDeclaration\"), quotedNode_5, facade.createModelReference(\"6354ebe7-c22a-4a0f-ac54-50b52ab9b065/java:java.util(JDK/)\"), facade.createNodeId(\"~ArrayList.add(java.lang.Object):boolean\")));\n    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x11157a3736dL, \"jetbrains.mps.baseLanguageInternal.structure.InternalNewExpression\"), null, null, false);\n    SNodeAccessUtil.setProperty(quotedNode_7, MetaAdapterFactory.getProperty(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x11157a3736dL, 0x11157a64c91L, \"fqClassName\"), (String) parameter_1);\n    quotedNode_5.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, \"actualArgument\"), quotedNode_7);\n    quotedNode_4.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46b36c4L, \"operation\"), quotedNode_5);\n    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, \"jetbrains.mps.baseLanguage.structure.VariableReference\"), null, null, false);\n    SNodeAccessUtil.setReferenceTarget(quotedNode_6, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, 0xf8cc6bf960L, \"variableDeclaration\"), (SNode) parameter_2);\n    quotedNode_4.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46a4416L, \"operand\"), quotedNode_6);\n    quotedNode_3.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b213L, 0xf8cc56b214L, \"expression\"), quotedNode_4);\n    return quotedNode_3;\n  }","commit_id":"ef6aec9355f38ef9c550fa3659999f8b7f4d8c2d","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Nullable\n  @Override\n  public SNode generateDescriptor(Collection<SModel> aspectModels) {\n    List<SNode> methods = new ArrayList<SNode>();\n    for (final LanguageAspectGenerator_PerConcept.ConceptGeneratorDescriptor acd : CollectionSequence.fromCollection(getDescriptors()).where(new IWhereFilter<LanguageAspectGenerator_PerConcept.ConceptGeneratorDescriptor>() {\n      public boolean accept(LanguageAspectGenerator_PerConcept.ConceptGeneratorDescriptor it) {\n        return !(it.isAttached());\n      }\n    })) {\n      SNode resultDecl = _quotation_createNode_mxlioj_a0a0b0f(acd.getInterfaceClass());\n\n      List<SNode> addStmts = new ArrayList<SNode>();\n      for (SNode aspect : CollectionSequence.fromCollection(aspectModels).translate(new ITranslator2<SModel, SNode>() {\n        public Iterable<SNode> translate(SModel it) {\n          return SModelOperations.nodes(it, acd.getApplicableConcept());\n        }\n      })) {\n        ListSequence.fromList(addStmts).addElement(_quotation_createNode_mxlioj_a0a0a3a1a5(resultDecl, acd.getGeneratedClassFqName(aspect, aspect.getModel())));\n      }\n\n      ListSequence.fromList(methods).addElement(_quotation_createNode_mxlioj_a0a5a1a5(resultDecl, addStmts, resultDecl, acd.getInterfaceClass(), acd.getGeneratedMethodName()));\n    }\n\n    for (final LanguageAspectGenerator_PerConcept.ConceptGeneratorDescriptor acd : CollectionSequence.fromCollection(getDescriptors()).where(new IWhereFilter<LanguageAspectGenerator_PerConcept.ConceptGeneratorDescriptor>() {\n      public boolean accept(LanguageAspectGenerator_PerConcept.ConceptGeneratorDescriptor it) {\n        return it.isAttached();\n      }\n    })) {\n      SNode conceptParamDecl = _quotation_createNode_mxlioj_a0a0d0f();\n\n      final MultiMap<SNode, SNode> byConcept = new MultiMap();\n      CollectionSequence.fromCollection(aspectModels).translate(new ITranslator2<SModel, SNode>() {\n        public Iterable<SNode> translate(SModel it) {\n          return SModelOperations.nodes(it, acd.getApplicableConcept());\n        }\n      }).visitAll(new IVisitor<SNode>() {\n        public void visit(SNode it) {\n          byConcept.putValue(acd.getAttachedConcept(it), it);\n        }\n      });\n\n      List<SNode> ifStmts = new ArrayList<SNode>();\n      for (SNode c : SetSequence.fromSet(byConcept.keySet())) {\n        SNode resultDecl = _quotation_createNode_mxlioj_a0a0g0d0f(acd.getInterfaceClass());\n\n        List<SNode> addStmts = new ArrayList<SNode>();\n        for (SNode aspectItem : CollectionSequence.fromCollection(byConcept.get(c))) {\n          ListSequence.fromList(addStmts).addElement(_quotation_createNode_mxlioj_a0a0a3a6a3a5(resultDecl, acd.getGeneratedClassFqName(aspectItem, SNodeOperations.getModel(aspectItem))));\n        }\n\n        ListSequence.fromList(ifStmts).addElement(_quotation_createNode_mxlioj_a0a5a6a3a5(resultDecl, addStmts, resultDecl, conceptParamDecl, c));\n      }\n\n      ListSequence.fromList(methods).addElement(_quotation_createNode_mxlioj_a0a8a3a5(ifStmts, acd.getInterfaceClass(), conceptParamDecl, acd.getGeneratedMethodName()));\n    }\n\n    // resulting class \n    SNode result = _quotation_createNode_mxlioj_a0g0f(getInterfaceClass(), getGeneratedClassShortName(), methods);\n\n    return result;\n  }","id":46361,"modified_method":"@Nullable\n  @Override\n  public SNode generateDescriptor(Collection<SModel> aspectModels) {\n    List<SNode> methods = new ArrayList<SNode>();\n    for (final LanguageAspectGenerator_PerConcept.ConceptGeneratorDescriptor acd : CollectionSequence.fromCollection(getDescriptors()).where(new IWhereFilter<LanguageAspectGenerator_PerConcept.ConceptGeneratorDescriptor>() {\n      public boolean accept(LanguageAspectGenerator_PerConcept.ConceptGeneratorDescriptor it) {\n        return !(it.isAttached());\n      }\n    })) {\n      SNode resultDecl = _quotation_createNode_mxlioj_a0a0b0f(acd.getInterfaceClass());\n\n      List<SNode> addStmts = new ArrayList<SNode>();\n      for (SNode aspect : CollectionSequence.fromCollection(aspectModels).translate(new ITranslator2<SModel, SNode>() {\n        public Iterable<SNode> translate(SModel it) {\n          return SModelOperations.nodes(it, acd.getApplicableConcept());\n        }\n      })) {\n        ListSequence.fromList(addStmts).addElement(_quotation_createNode_mxlioj_a0a0a3a1a5(acd.getGeneratedClassFqName(aspect, aspect.getModel()), resultDecl));\n      }\n\n      ListSequence.fromList(methods).addElement(_quotation_createNode_mxlioj_a0a5a1a5(resultDecl, addStmts, resultDecl, acd.getInterfaceClass(), acd.getGeneratedMethodName()));\n    }\n\n    for (final LanguageAspectGenerator_PerConcept.ConceptGeneratorDescriptor acd : CollectionSequence.fromCollection(getDescriptors()).where(new IWhereFilter<LanguageAspectGenerator_PerConcept.ConceptGeneratorDescriptor>() {\n      public boolean accept(LanguageAspectGenerator_PerConcept.ConceptGeneratorDescriptor it) {\n        return it.isAttached();\n      }\n    })) {\n      SNode conceptParamDecl = _quotation_createNode_mxlioj_a0a0d0f();\n\n      final MultiMap<SNode, SNode> byConcept = new MultiMap();\n      CollectionSequence.fromCollection(aspectModels).translate(new ITranslator2<SModel, SNode>() {\n        public Iterable<SNode> translate(SModel it) {\n          return SModelOperations.nodes(it, acd.getApplicableConcept());\n        }\n      }).visitAll(new IVisitor<SNode>() {\n        public void visit(SNode it) {\n          byConcept.putValue(acd.getAttachedConcept(it), it);\n        }\n      });\n\n      List<SNode> ifStmts = new ArrayList<SNode>();\n      for (SNode c : SetSequence.fromSet(byConcept.keySet())) {\n        SNode resultDecl = _quotation_createNode_mxlioj_a0a0g0d0f(acd.getInterfaceClass());\n\n        List<SNode> addStmts = new ArrayList<SNode>();\n        for (SNode aspectItem : CollectionSequence.fromCollection(byConcept.get(c))) {\n          ListSequence.fromList(addStmts).addElement(_quotation_createNode_mxlioj_a0a0a3a6a3a5(acd.getGeneratedClassFqName(aspectItem, SNodeOperations.getModel(aspectItem)), resultDecl));\n        }\n\n        ListSequence.fromList(ifStmts).addElement(_quotation_createNode_mxlioj_a0a5a6a3a5(resultDecl, addStmts, resultDecl, c, conceptParamDecl));\n      }\n\n      ListSequence.fromList(methods).addElement(_quotation_createNode_mxlioj_a0a8a3a5(ifStmts, acd.getInterfaceClass(), conceptParamDecl, acd.getGeneratedMethodName()));\n    }\n\n    // resulting class \n    SNode result = _quotation_createNode_mxlioj_a0g0f(getInterfaceClass(), getGeneratedClassShortName(), methods);\n\n    return result;\n  }","commit_id":"ef6aec9355f38ef9c550fa3659999f8b7f4d8c2d","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_mxlioj_a0a0a3a1a5(Object parameter_1, Object parameter_2) {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b213L, \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\"), null, null, false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, \"jetbrains.mps.baseLanguage.structure.DotExpression\"), null, null, false);\n    quotedNode_5 = (SNode) parameter_1;\n    if (quotedNode_5 != null) {\n      quotedNode_4.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46a4416L, \"operand\"), HUtil.copyIfNecessary(quotedNode_5));\n    }\n    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118154a6332L, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), null, null, false);\n    quotedNode_6.setReference(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, \"baseMethodDeclaration\"), SReference.create(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, \"baseMethodDeclaration\"), quotedNode_6, facade.createModelReference(\"6354ebe7-c22a-4a0f-ac54-50b52ab9b065/java:java.util(JDK/)\"), facade.createNodeId(\"~ArrayList.add(java.lang.Object):boolean\")));\n    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x11157a3736dL, \"jetbrains.mps.baseLanguageInternal.structure.InternalNewExpression\"), null, null, false);\n    SNodeAccessUtil.setProperty(quotedNode_8, MetaAdapterFactory.getProperty(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x11157a3736dL, 0x11157a64c91L, \"fqClassName\"), (String) parameter_2);\n    quotedNode_6.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, \"actualArgument\"), quotedNode_8);\n    quotedNode_4.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46b36c4L, \"operation\"), quotedNode_6);\n    quotedNode_3.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b213L, 0xf8cc56b214L, \"expression\"), quotedNode_4);\n    return quotedNode_3;\n  }","id":46362,"modified_method":"private static SNode _quotation_createNode_mxlioj_a0a0a3a1a5(Object parameter_1, Object parameter_2) {\n    PersistenceFacade facade = PersistenceFacade.getInstance();\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b213L, \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\"), null, null, false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, \"jetbrains.mps.baseLanguage.structure.DotExpression\"), null, null, false);\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118154a6332L, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), null, null, false);\n    quotedNode_5.setReference(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, \"baseMethodDeclaration\"), SReference.create(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, \"baseMethodDeclaration\"), quotedNode_5, facade.createModelReference(\"6354ebe7-c22a-4a0f-ac54-50b52ab9b065/java:java.util(JDK/)\"), facade.createNodeId(\"~ArrayList.add(java.lang.Object):boolean\")));\n    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x11157a3736dL, \"jetbrains.mps.baseLanguageInternal.structure.InternalNewExpression\"), null, null, false);\n    SNodeAccessUtil.setProperty(quotedNode_7, MetaAdapterFactory.getProperty(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x11157a3736dL, 0x11157a64c91L, \"fqClassName\"), (String) parameter_1);\n    quotedNode_5.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, \"actualArgument\"), quotedNode_7);\n    quotedNode_4.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46b36c4L, \"operation\"), quotedNode_5);\n    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, \"jetbrains.mps.baseLanguage.structure.VariableReference\"), null, null, false);\n    SNodeAccessUtil.setReferenceTarget(quotedNode_6, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, 0xf8cc6bf960L, \"variableDeclaration\"), (SNode) parameter_2);\n    quotedNode_4.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46a4416L, \"operand\"), quotedNode_6);\n    quotedNode_3.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b213L, 0xf8cc56b214L, \"expression\"), quotedNode_4);\n    return quotedNode_3;\n  }","commit_id":"ef6aec9355f38ef9c550fa3659999f8b7f4d8c2d","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n     * Produces the replacement for a container page element to use in a copy of an existing container page.<p>\n     *\n     * @param targetPage the target container page\n     * @param originalElement the original element\n     * @return the replacement element for the copied page\n     *\n     * @throws CmsException if something goes wrong\n     * @throws NoCustomReplacementException if a custom replacement is not found for a type which requires it\n     */\n    public CmsContainerElementBean replaceContainerElement(\n        CmsResource targetPage,\n        CmsContainerElementBean originalElement) throws CmsException, NoCustomReplacementException {\n        // if (m_elementReplacements.containsKey(originalElement.getId()\n\n        CmsObject targetCms = OpenCms.initCmsObject(m_cms);\n\n        CmsSite site = OpenCms.getSiteManager().getSiteForRootPath(m_targetFolder.getRootPath());\n        if (site != null) {\n            targetCms.getRequestContext().setSiteRoot(site.getSiteRoot());\n        }\n\n        if ((originalElement.getFormatterId() == null) || (originalElement.getId() == null)) {\n            String rootPath = m_originalPage != null ? m_originalPage.getRootPath() : \"???\";\n            LOG.warn(\"Skipping container element because of missing id in page: \" + rootPath);\n            return null;\n        }\n\n        if (m_elementReplacements.containsKey(originalElement.getId())) {\n            return new CmsContainerElementBean(\n                m_elementReplacements.get(originalElement.getId()),\n                originalElement.getFormatterId(),\n                originalElement.getIndividualSettings(),\n                originalElement.isCreateNew());\n        } else {\n            CmsResource originalResource = m_cms.readResource(\n                originalElement.getId(),\n                CmsResourceFilter.IGNORE_EXPIRATION);\n            I_CmsResourceType type = OpenCms.getResourceManager().getResourceType(originalResource);\n            CmsADEConfigData config = OpenCms.getADEManager().lookupConfiguration(m_cms, targetPage.getRootPath());\n            CmsResourceTypeConfig typeConfig = config.getResourceType(type.getTypeName());\n            boolean shouldCopyElement;\n            if (m_copyMode == CopyMode.reuse) {\n                shouldCopyElement = false;\n            } else if (typeConfig == null) {\n                LOG.warn(\n                    \"Type configuration for type \" + type.getTypeName() + \" not found at \" + targetPage.getRootPath());\n                shouldCopyElement = false;\n            } else {\n                shouldCopyElement = (originalElement.isCreateNew() || typeConfig.isCopyInModels())\n                    && !type.getTypeName().equals(CmsResourceTypeXmlContainerPage.MODEL_GROUP_TYPE_NAME);\n            }\n            if (shouldCopyElement) {\n                CmsResource resourceCopy = typeConfig.createNewElement(\n                    targetCms,\n                    originalResource,\n                    targetPage.getRootPath());\n                CmsContainerElementBean copy = new CmsContainerElementBean(\n                    resourceCopy.getStructureId(),\n                    originalElement.getFormatterId(),\n                    originalElement.getIndividualSettings(),\n                    originalElement.isCreateNew());\n                m_elementReplacements.put(originalElement.getId(), resourceCopy.getStructureId());\n                LOG.info(\n                    \"Copied container element \" + originalResource.getRootPath() + \" -> \" + resourceCopy.getRootPath());\n                CmsLockActionRecord record = null;\n                try {\n                    record = CmsLockUtil.ensureLock(m_cms, resourceCopy);\n                    adjustLocalesForElement(resourceCopy);\n                } finally {\n                    if ((record != null) && (record.getChange() == LockChange.locked)) {\n                        m_cms.unlockResource(resourceCopy);\n                    }\n                }\n                return copy;\n            } else if (m_customReplacements != null) {\n                CmsUUID replacementId = m_customReplacements.get(originalElement.getId());\n                if (replacementId != null) {\n\n                    return new CmsContainerElementBean(\n                        replacementId,\n                        originalElement.getFormatterId(),\n                        originalElement.getIndividualSettings(),\n                        originalElement.isCreateNew());\n                } else {\n                    if ((m_typesWithRequiredReplacements != null)\n                        && m_typesWithRequiredReplacements.contains(type.getTypeName())) {\n                        throw new NoCustomReplacementException(originalResource);\n                    } else {\n                        return originalElement;\n                    }\n\n                }\n            } else {\n                LOG.info(\"Reusing container element: \" + originalResource.getRootPath());\n                return originalElement;\n\n            }\n        }\n    }","id":46363,"modified_method":"/**\n     * Produces the replacement for a container page element to use in a copy of an existing container page.<p>\n     *\n     * @param targetPage the target container page\n     * @param originalElement the original element\n     * @return the replacement element for the copied page\n     *\n     * @throws CmsException if something goes wrong\n     * @throws NoCustomReplacementException if a custom replacement is not found for a type which requires it\n     */\n    public CmsContainerElementBean replaceContainerElement(\n        CmsResource targetPage,\n        CmsContainerElementBean originalElement) throws CmsException, NoCustomReplacementException {\n        // if (m_elementReplacements.containsKey(originalElement.getId()\n\n        CmsObject targetCms = OpenCms.initCmsObject(m_cms);\n\n        CmsSite site = OpenCms.getSiteManager().getSiteForRootPath(m_targetFolder.getRootPath());\n        if (site != null) {\n            targetCms.getRequestContext().setSiteRoot(site.getSiteRoot());\n        }\n\n        if ((originalElement.getFormatterId() == null) || (originalElement.getId() == null)) {\n            String rootPath = m_originalPage != null ? m_originalPage.getRootPath() : \"???\";\n            LOG.warn(\"Skipping container element because of missing id in page: \" + rootPath);\n            return null;\n        }\n\n        if (m_elementReplacements.containsKey(originalElement.getId())) {\n            return new CmsContainerElementBean(\n                m_elementReplacements.get(originalElement.getId()),\n                maybeReplaceFormatter(originalElement.getFormatterId()),\n                maybeReplaceFormatterInSettings(originalElement.getIndividualSettings()),\n                originalElement.isCreateNew());\n        } else {\n            CmsResource originalResource = m_cms.readResource(\n                originalElement.getId(),\n                CmsResourceFilter.IGNORE_EXPIRATION);\n            I_CmsResourceType type = OpenCms.getResourceManager().getResourceType(originalResource);\n            CmsADEConfigData config = OpenCms.getADEManager().lookupConfiguration(m_cms, targetPage.getRootPath());\n            CmsResourceTypeConfig typeConfig = config.getResourceType(type.getTypeName());\n            boolean shouldCopyElement;\n            if (m_copyMode == CopyMode.reuse) {\n                shouldCopyElement = false;\n            } else if (typeConfig == null) {\n                LOG.warn(\n                    \"Type configuration for type \" + type.getTypeName() + \" not found at \" + targetPage.getRootPath());\n                shouldCopyElement = false;\n            } else {\n                shouldCopyElement = (originalElement.isCreateNew() || typeConfig.isCopyInModels())\n                    && !type.getTypeName().equals(CmsResourceTypeXmlContainerPage.MODEL_GROUP_TYPE_NAME);\n            }\n            if (shouldCopyElement) {\n                CmsResource resourceCopy = typeConfig.createNewElement(\n                    targetCms,\n                    originalResource,\n                    targetPage.getRootPath());\n                CmsContainerElementBean copy = new CmsContainerElementBean(\n                    resourceCopy.getStructureId(),\n                    maybeReplaceFormatter(originalElement.getFormatterId()),\n                    maybeReplaceFormatterInSettings(originalElement.getIndividualSettings()),\n                    originalElement.isCreateNew());\n                m_elementReplacements.put(originalElement.getId(), resourceCopy.getStructureId());\n                LOG.info(\n                    \"Copied container element \" + originalResource.getRootPath() + \" -> \" + resourceCopy.getRootPath());\n                CmsLockActionRecord record = null;\n                try {\n                    record = CmsLockUtil.ensureLock(m_cms, resourceCopy);\n                    adjustLocalesForElement(resourceCopy);\n                } finally {\n                    if ((record != null) && (record.getChange() == LockChange.locked)) {\n                        m_cms.unlockResource(resourceCopy);\n                    }\n                }\n                return copy;\n            } else if (m_customReplacements != null) {\n                CmsUUID replacementId = m_customReplacements.get(originalElement.getId());\n                if (replacementId != null) {\n\n                    return new CmsContainerElementBean(\n                        replacementId,\n                        maybeReplaceFormatter(originalElement.getFormatterId()),\n                        maybeReplaceFormatterInSettings(originalElement.getIndividualSettings()),\n                        originalElement.isCreateNew());\n                } else {\n                    if ((m_typesWithRequiredReplacements != null)\n                        && m_typesWithRequiredReplacements.contains(type.getTypeName())) {\n                        throw new NoCustomReplacementException(originalResource);\n                    } else {\n                        return originalElement;\n                    }\n\n                }\n            } else {\n                LOG.info(\"Reusing container element: \" + originalResource.getRootPath());\n                return originalElement;\n\n            }\n        }\n    }","commit_id":"68baeb9ec841409793797caa4a440c96cb7f7bd3","url":"https://github.com/alkacon/opencms-core"},{"original_method":"private void drawSegment(RotatedTileBox tb, Canvas canvas) {\n\t\tif (points.size() > 0) {\n\t\t\tcanvas.rotate(-tb.getRotate(), tb.getCenterPixelX(), tb.getCenterPixelY());\n\t\t\tpaint.setStrokeWidth(12 * tb.getDensity());\n\t\t\tTIntArrayList tx = new TIntArrayList();\n\t\t\tTIntArrayList ty = new TIntArrayList();\n\t\t\tfor (int i = 0; i < points.size(); i++) {\n\t\t\t\tLocation o = points.get(i);\n\t\t\t\tint x = (int) tb.getPixXFromLatLon(o.getLatitude(), o.getLongitude());\n\t\t\t\tint y = (int) tb.getPixYFromLatLon(o.getLatitude(), o.getLongitude());\n\t\t\t\ttx.add(x);\n\t\t\t\tty.add(y);\n\t\t\t}\n\t\t\tcalculatePath(tb, tx, ty, path);\n\t\t\t\n\t\t\tif(isPaint_1) {\n\t\t\t\tcanvas.drawPath(path, paint_1);\n\t\t\t}\n\t\t\tif(isShadowPaint) {\n\t\t\t\tcanvas.drawPath(path, shadowPaint);\n\t\t\t}\n\t\t\tcanvas.drawPath(path, paint);\n\t\t\tif(isPaint2) {\n\t\t\t\tcanvas.drawPath(path, paint2);\n\t\t\t}\n\t\t\tif (tb.getZoomAnimation() == 0) {\n\t\t\t\tTIntArrayList lst = new TIntArrayList(50);\n\t\t\t\tcalculateSplitPaths(tb, tx, ty, lst);\n\t\t\t\tdrawArrowsOverPath(canvas, lst, coloredArrowUp);\n\t\t\t}\n\t\t\tcanvas.rotate(tb.getRotate(), tb.getCenterPixelX(), tb.getCenterPixelY());\n\t\t}\n\t}","id":46364,"modified_method":"private void drawSegment(RotatedTileBox tb, Canvas canvas) {\n\t\tif (points.size() > 0) {\n\t\t\tcanvas.rotate(-tb.getRotate(), tb.getCenterPixelX(), tb.getCenterPixelY());\n\t\t\t\n\t\t\tTIntArrayList tx = new TIntArrayList();\n\t\t\tTIntArrayList ty = new TIntArrayList();\n\t\t\tfor (int i = 0; i < points.size(); i++) {\n\t\t\t\tLocation o = points.get(i);\n\t\t\t\tint x = (int) tb.getPixXFromLatLon(o.getLatitude(), o.getLongitude());\n\t\t\t\tint y = (int) tb.getPixYFromLatLon(o.getLatitude(), o.getLongitude());\n\t\t\t\ttx.add(x);\n\t\t\t\tty.add(y);\n\t\t\t}\n\t\t\tcalculatePath(tb, tx, ty, path);\n\t\t\t\n\t\t\tif(isPaint_1) {\n\t\t\t\tcanvas.drawPath(path, paint_1);\n\t\t\t}\n\t\t\tif(isShadowPaint) {\n\t\t\t\tcanvas.drawPath(path, shadowPaint);\n\t\t\t}\n\t\t\tcanvas.drawPath(path, paint);\n\t\t\tif(isPaint2) {\n\t\t\t\tcanvas.drawPath(path, paint2);\n\t\t\t}\n\t\t\tif (tb.getZoomAnimation() == 0) {\n\t\t\t\tTIntArrayList lst = new TIntArrayList(50);\n\t\t\t\tcalculateSplitPaths(tb, tx, ty, lst);\n\t\t\t\tdrawArrowsOverPath(canvas, lst, coloredArrowUp);\n\t\t\t}\n\t\t\tcanvas.rotate(tb.getRotate(), tb.getCenterPixelX(), tb.getCenterPixelY());\n\t\t}\n\t}","commit_id":"40e85314a08697a5640a568f72d81129cd44448b","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private void drawAction(RotatedTileBox tb, Canvas canvas) {\n\t\tif (actionPoints.size() > 0) {\n\t\t\tcanvas.rotate(-tb.getRotate(), tb.getCenterPixelX(), tb.getCenterPixelY());\n\t\t\tTIntArrayList tx = new TIntArrayList();\n\t\t\tTIntArrayList ty = new TIntArrayList();\n\t\t\tfor (int i = 0; i < actionPoints.size(); i++) {\n\t\t\t\tLocation o = actionPoints.get(i);\n\t\t\t\tint x = (int) tb.getPixXFromLatLon(o.getLatitude(), o.getLongitude());\n\t\t\t\tint y = (int) tb.getPixYFromLatLon(o.getLatitude(), o.getLongitude());\n\t\t\t\ttx.add(x);\n\t\t\t\tty.add(y);\n\t\t\t}\n\t\t\tPath pth = new Path();\n\t\t\tfor(int i = 0; i < tx.size(); i += 3) {\n\t\t\t\tpth.reset();\n\t\t\t\tpth.moveTo(tx.get(i), tx.get(i));\n\t\t\t\tpth.lineTo(tx.get(i + 1), tx.get(i + 1));\n\t\t\t\tpth.lineTo(tx.get(i + 2), tx.get(i + 2));\n\t\t\t\tcanvas.drawPath(pth, actionPaint);\n\t\t\t}\n\t\t\tcanvas.rotate(tb.getRotate(), tb.getCenterPixelX(), tb.getCenterPixelY());\n\t\t}\n\t}","id":46365,"modified_method":"private void drawAction(RotatedTileBox tb, Canvas canvas) {\n\t\tif (actionPoints.size() > 0) {\n\t\t\tcanvas.rotate(-tb.getRotate(), tb.getCenterPixelX(), tb.getCenterPixelY());\n\t\t\tPath pth = new Path();\n\t\t\tMatrix matrix = new Matrix();\n\t\t\tboolean first = true;\n\t\t\tint x = 0, px = 0, py = 0, y = 0;\n\t\t\tfor (int i = 0; i < actionPoints.size(); i++) {\n\t\t\t\tLocation o = actionPoints.get(i);\n\t\t\t\tif (o == null) {\n\t\t\t\t\tcanvas.drawPath(pth, actionPaint);\n\t\t\t\t\tfloat angleRad = (float) Math.atan2(y - py, x - px);\n\t\t\t\t\tfloat angle = (float) (angleRad * 180 / Math.PI) + 90f;\n\t\t\t\t\tfloat distSegment = FloatMath.sqrt((y - py) * (y - py) + (x - px) * (x - px));\n\t\t\t\t\tif (distSegment == 0) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// int len = (int) (distSegment / pxStep);\n\t\t\t\t\tfloat pdx = x - px;\n\t\t\t\t\tfloat pdy = y - py;\n\t\t\t\t\tmatrix.reset();\n\t\t\t\t\tmatrix.postTranslate(0, -actionArrow.getHeight() / 2);\n\t\t\t\t\tmatrix.postRotate(angle, actionArrow.getWidth() / 2, 0);\n\t\t\t\t\tmatrix.postTranslate(px + pdx - actionArrow.getWidth() / 2, py + pdy);\n\t\t\t\t\tcanvas.drawBitmap(actionArrow, matrix, paintIcon);\n\t\t\t\t\tfirst = true;\n\t\t\t\t} else {\n\t\t\t\t\tpx = x;\n\t\t\t\t\tpy = y;\n\t\t\t\t\tx = (int) tb.getPixXFromLatLon(o.getLatitude(), o.getLongitude());\n\t\t\t\t\ty = (int) tb.getPixYFromLatLon(o.getLatitude(), o.getLongitude());\n\t\t\t\t\tif(first) {\n\t\t\t\t\t\tpth.reset();\n\t\t\t\t\t\tpth.moveTo(x, y);\n\t\t\t\t\t\tfirst = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpth.lineTo(x, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tcanvas.rotate(tb.getRotate(), tb.getCenterPixelX(), tb.getCenterPixelY());\n\t\t}\n\t}","commit_id":"40e85314a08697a5640a568f72d81129cd44448b","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private void updatePaints(DrawSettings nightMode, RotatedTileBox tileBox){\n\t\tRenderingRulesStorage rrs = view.getApplication().getRendererRegistry().getCurrentSelectedRenderer();\n\t\tfinal boolean isNight = nightMode != null && nightMode.isNightMode();\n\t\tint hsh = calculateHash(rrs, isNight, tileBox.getMapDensity());\n\t\tif (hsh != cachedHash) {\n\t\t\tcachedHash = hsh;\n\t\t\t// cachedColor = view.getResources().getColor(R.color.nav_track);\n\t\t\tif (rrs != null) {\n\t\t\t\tRenderingRuleSearchRequest req = new RenderingRuleSearchRequest(rrs);\n\t\t\t\treq.setBooleanFilter(rrs.PROPS.R_NIGHT_MODE, isNight);\n\t\t\t\tif (req.searchRenderingAttribute(\"route\")) {\n\t\t\t\t\tRenderingContext rc = new OsmandRenderer.RenderingContext(view.getContext());\n\t\t\t\t\trc.setDensityValue((float) tileBox.getMapDensity());\n//\t\t\t\t\tcachedColor = req.getIntPropertyValue(rrs.PROPS.R_COLOR);\n\t\t\t\t\tosmandRenderer.updatePaint(req, paint, 0, false, rc);\n\t\t\t\t\tosmandRenderer.updatePaint(req, actionPaint, 0, false, rc);\n\t\t\t\t\tactionPaint.setColor(Color.WHITE);\n\t\t\t\t\tisPaint2 = osmandRenderer.updatePaint(req, paint2, 1, false, rc);\n\t\t\t\t\tisPaint_1 = osmandRenderer.updatePaint(req, paint_1, -1, false, rc);\n\t\t\t\t\tisShadowPaint = req.isSpecified(rrs.PROPS.R_SHADOW_RADIUS);\n\t\t\t\t\tif(isShadowPaint) {\n\t\t\t\t\t\tColorFilter cf = new PorterDuffColorFilter(req.getIntPropertyValue(rrs.PROPS.R_SHADOW_COLOR), Mode.SRC_IN);\n\t\t\t\t\t\tshadowPaint.setColorFilter(cf);\n\t\t\t\t\t\tshadowPaint.setStrokeWidth(paint.getStrokeWidth() + 2 * rc.getComplexValue(req, rrs.PROPS.R_SHADOW_RADIUS));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tSystem.err.println(\"Rendering attribute route is not found !\");\n\t\t\t\t\tpaint.setStrokeWidth(12 * view.getDensity());\n\t\t\t\t\tactionPaint.setStrokeWidth(12 * view.getDensity());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":46366,"modified_method":"private void updatePaints(DrawSettings nightMode, RotatedTileBox tileBox){\n\t\tRenderingRulesStorage rrs = view.getApplication().getRendererRegistry().getCurrentSelectedRenderer();\n\t\tfinal boolean isNight = nightMode != null && nightMode.isNightMode();\n\t\tint hsh = calculateHash(rrs, isNight, tileBox.getMapDensity());\n\t\tif (hsh != cachedHash) {\n\t\t\tcachedHash = hsh;\n\t\t\t// cachedColor = view.getResources().getColor(R.color.nav_track);\n\t\t\tif (rrs != null) {\n\t\t\t\tRenderingRuleSearchRequest req = new RenderingRuleSearchRequest(rrs);\n\t\t\t\treq.setBooleanFilter(rrs.PROPS.R_NIGHT_MODE, isNight);\n\t\t\t\tif (req.searchRenderingAttribute(\"route\")) {\n\t\t\t\t\tRenderingContext rc = new OsmandRenderer.RenderingContext(view.getContext());\n\t\t\t\t\trc.setDensityValue((float) tileBox.getMapDensity());\n//\t\t\t\t\tcachedColor = req.getIntPropertyValue(rrs.PROPS.R_COLOR);\n\t\t\t\t\tosmandRenderer.updatePaint(req, paint, 0, false, rc);\n\t\t\t\t\tif(paint.getStrokeWidth() == 0) {\n\t\t\t\t\t\tpaint.setStrokeWidth(12 * view.getDensity());\n\t\t\t\t\t}\n\t\t\t\t\tosmandRenderer.updatePaint(req, actionPaint, 2, false, rc);\n\t\t\t\t\t// TODO remove\n\t\t\t\t\tactionPaint.setStrokeWidth(7 * view.getDensity());\n\t\t\t\t\tactionPaint.setColor(Color.WHITE);\n\t\t\t\t\tisPaint2 = osmandRenderer.updatePaint(req, paint2, 1, false, rc);\n\t\t\t\t\tisPaint_1 = osmandRenderer.updatePaint(req, paint_1, -1, false, rc);\n\t\t\t\t\tisShadowPaint = req.isSpecified(rrs.PROPS.R_SHADOW_RADIUS);\n\t\t\t\t\tif(isShadowPaint) {\n\t\t\t\t\t\tColorFilter cf = new PorterDuffColorFilter(req.getIntPropertyValue(rrs.PROPS.R_SHADOW_COLOR), Mode.SRC_IN);\n\t\t\t\t\t\tshadowPaint.setColorFilter(cf);\n\t\t\t\t\t\tshadowPaint.setStrokeWidth(paint.getStrokeWidth() + 2 * rc.getComplexValue(req, rrs.PROPS.R_SHADOW_RADIUS));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tSystem.err.println(\"Rendering attribute route is not found !\");\n\t\t\t\t\tpaint.setStrokeWidth(12 * view.getDensity());\n\t\t\t\t\tactionPaint.setStrokeWidth(7 * view.getDensity());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"40e85314a08697a5640a568f72d81129cd44448b","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public void drawLocations(RotatedTileBox tb, Canvas canvas, double topLatitude, double leftLongitude, double bottomLatitude, double rightLongitude) {\n\t\tpoints.clear();\n\t\tactionPoints.clear();\n\t\tboolean previousVisible = false;\n\t\tLocation lastProjection = helper.getLastProjection();\n\t\tif (lastProjection != null) {\n\t\t\tif (leftLongitude <= lastProjection.getLongitude() && lastProjection.getLongitude() <= rightLongitude\n\t\t\t\t\t&& bottomLatitude <= lastProjection.getLatitude() && lastProjection.getLatitude() <= topLatitude) {\n\t\t\t\tpoints.add(lastProjection);\n\t\t\t\tpreviousVisible = true;\n\t\t\t}\n\t\t}\n\t\tList<Location> routeNodes = helper.getRoute().getRouteLocations();\n\t\tint cd = helper.getRoute().getCurrentRoute();\n\t\tList<RouteDirectionInfo> rd = helper.getRouteDirections();\n\t\tIterator<RouteDirectionInfo> it = rd.iterator();\n\t\tRouteDirectionInfo nf = null;\n\t\tfor (int i = 0; i < routeNodes.size(); i++) {\n\t\t\tLocation ls = routeNodes.get(i);\n\t\t\tif(nf != null && nf.routePointOffset < i + cd) {\n\t\t\t\tnf = null;\n\t\t\t}\n\t\t\twhile (nf != null && it.hasNext()) {\n\t\t\t\tnf = it.next();\n\t\t\t\tif (nf.routePointOffset < i + cd) {\n\t\t\t\t\tnf = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tboolean action = nf != null && nf.routePointOffset == i + cd;\n\t\t\tif (leftLongitude <= ls.getLongitude() && ls.getLongitude() <= rightLongitude && bottomLatitude <= ls.getLatitude()\n\t\t\t\t\t&& ls.getLatitude() <= topLatitude) {\n\t\t\t\tpoints.add(ls);\n\t\t\t\t\n\t\t\t\tif (!previousVisible) {\n\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\tpoints.add(0, routeNodes.get(i - 1));\n\t\t\t\t\t} else if (lastProjection != null) {\n\t\t\t\t\t\tpoints.add(0, lastProjection);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(action) {\n\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\tactionPoints.add(0, routeNodes.get(i - 1));\n\t\t\t\t\t} else if (lastProjection != null) {\n\t\t\t\t\t\tactionPoints.add(0, lastProjection);\n\t\t\t\t\t}\n\t\t\t\t\tactionPoints.add(ls);\n\t\t\t\t\tif(i < routeNodes.size() - 1) {\n\t\t\t\t\t\tactionPoints.add(routeNodes.get(i + 1));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tactionPoints.add(ls);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpreviousVisible = true;\n\t\t\t} else if (previousVisible) {\n\t\t\t\tpoints.add(ls);\n\t\t\t\tdrawSegment(tb, canvas);\n\t\t\t\tpreviousVisible = false;\n\t\t\t\tpoints.clear();\n\t\t\t}\n\t\t}\n\t\tdrawSegment(tb, canvas);\n\t\tdrawAction(tb, canvas);\n\t}","id":46367,"modified_method":"public void drawLocations(RotatedTileBox tb, Canvas canvas, double topLatitude, double leftLongitude, double bottomLatitude, double rightLongitude) {\n\t\tpoints.clear();\n\t\tactionPoints.clear();\n\t\tboolean previousVisible = false;\n\t\tLocation lastProjection = helper.getLastProjection();\n\t\tif (lastProjection != null) {\n\t\t\tif (leftLongitude <= lastProjection.getLongitude() && lastProjection.getLongitude() <= rightLongitude\n\t\t\t\t\t&& bottomLatitude <= lastProjection.getLatitude() && lastProjection.getLatitude() <= topLatitude) {\n\t\t\t\tpoints.add(lastProjection);\n\t\t\t\tpreviousVisible = true;\n\t\t\t}\n\t\t}\n\t\tList<Location> routeNodes = helper.getRoute().getRouteLocations();\n\t\tint cd = helper.getRoute().getCurrentRoute();\n\t\tList<RouteDirectionInfo> rd = helper.getRouteDirections();\n\t\tIterator<RouteDirectionInfo> it = rd.iterator();\n\t\tfor (int i = 0; i < routeNodes.size(); i++) {\n\t\t\tLocation ls = routeNodes.get(i);\n\t\t\tif (leftLongitude <= ls.getLongitude() && ls.getLongitude() <= rightLongitude && bottomLatitude <= ls.getLatitude()\n\t\t\t\t\t&& ls.getLatitude() <= topLatitude) {\n\t\t\t\tpoints.add(ls);\n\t\t\t\t\n\t\t\t\tif (!previousVisible) {\n\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\tpoints.add(0, routeNodes.get(i - 1));\n\t\t\t\t\t} else if (lastProjection != null) {\n\t\t\t\t\t\tpoints.add(0, lastProjection);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpreviousVisible = true;\n\t\t\t} else if (previousVisible) {\n\t\t\t\tpoints.add(ls);\n\t\t\t\tdrawSegment(tb, canvas);\n\t\t\t\tpreviousVisible = false;\n\t\t\t\tpoints.clear();\n\t\t\t}\n\t\t}\n\t\tdrawSegment(tb, canvas);\n\t\tif (tb.getZoom() >= 14) {\n\t\t\tcalculateActionPoints(topLatitude, leftLongitude, bottomLatitude, rightLongitude, lastProjection,\n\t\t\t\t\trouteNodes, cd, it);\n\t\t\tdrawAction(tb, canvas);\n\t\t}\n\t}","commit_id":"40e85314a08697a5640a568f72d81129cd44448b","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private void initUI() {\n\t\tpaint = new Paint();\n\t\tpaint.setStyle(Style.STROKE);\n\t\tpaint.setAntiAlias(true);\n\t\tpaint.setStrokeCap(Cap.ROUND);\n\t\tpaint.setStrokeJoin(Join.ROUND);\n\t\t\n\t\tactionPaint = new Paint();\n\t\tactionPaint.setStyle(Style.STROKE);\n\t\tactionPaint.setAntiAlias(true);\n\t\tactionPaint.setStrokeCap(Cap.ROUND);\n\t\tactionPaint.setStrokeJoin(Join.ROUND);\n\t\tpath = new Path();\n\t\t\n\t\tpaintIcon = new Paint();\n\t\tpaintIcon.setFilterBitmap(true);\n\t\tpaintIcon.setAntiAlias(true);\n\t\tpaintIcon.setColor(Color.BLACK);\n\t\tpaintIcon.setStrokeWidth(3);\n\t\t\n\t}","id":46368,"modified_method":"private void initUI() {\n\t\tpaint = new Paint();\n\t\tpaint.setStyle(Style.STROKE);\n\t\tpaint.setAntiAlias(true);\n\t\tpaint.setStrokeCap(Cap.ROUND);\n\t\tpaint.setStrokeJoin(Join.ROUND);\n\t\tactionArrow = BitmapFactory.decodeResource(view.getResources(), R.drawable.map_action_arrow, null);\n\t\t\n\t\tactionPaint = new Paint();\n\t\tactionPaint.setStyle(Style.STROKE);\n\t\tactionPaint.setAntiAlias(true);\n\t\tactionPaint.setStrokeCap(Cap.BUTT);\n\t\tactionPaint.setStrokeJoin(Join.ROUND);\n\t\tactionPaint.setStrokeWidth(7 * view.getDensity());\n\t\tactionPaint.setColor(Color.WHITE);\n\t\tpath = new Path();\n\t\t\n\t\tpaintIcon = new Paint();\n\t\tpaintIcon.setFilterBitmap(true);\n\t\tpaintIcon.setAntiAlias(true);\n\t\tpaintIcon.setColor(Color.BLACK);\n\t\tpaintIcon.setStrokeWidth(3);\n\t\t\n\t}","commit_id":"40e85314a08697a5640a568f72d81129cd44448b","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private static void init(){\r\n\t\t\r\n\t// 1. highway\t\r\n\t\tregister(\"highway\", \"motorway\", HIGHWAY, PL_HW_MOTORWAY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"motorway_link\", HIGHWAY, PL_HW_MOTORWAY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"trunk\", HIGHWAY, PL_HW_TRUNK, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"trunk_link\", HIGHWAY, PL_HW_TRUNK, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"primary\", HIGHWAY, PL_HW_PRIMARY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"primary_link\", HIGHWAY, PL_HW_PRIMARY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"secondary\", HIGHWAY, PL_HW_SECONDARY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"secondary_link\", HIGHWAY, PL_HW_SECONDARY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"tertiary\", HIGHWAY, PL_HW_TERTIARY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"unclassified\", HIGHWAY, PL_HW_UNCLASSIFIED, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"road\", HIGHWAY, PL_HW_UNCLASSIFIED, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"residential\", HIGHWAY, PL_HW_RESIDENTIAL, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"living_street\", HIGHWAY, PL_HW_LIVING_STREET, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"service\", HIGHWAY, PL_HW_SERVICE, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"track\", HIGHWAY, PL_HW_TRACK, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"pedestrian\", HIGHWAY, PL_HW_PEDESTRIAN, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n//\t\tregister(\"highway\", \"raceway\", HIGHWAY, PL_HW_RACEWAY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"services\", HIGHWAY, PL_HW_SERVICES, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n//\t\tregister(\"highway\", \"bus_guideway\", HIGHWAY, PL_HW_MOTORWAY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"path\", HIGHWAY, PL_HW_PATH, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"cycleway\", HIGHWAY, PL_HW_CYCLEWAY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"footway\", HIGHWAY, PL_HW_FOOTWAY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"bridleway\", HIGHWAY, PL_HW_BRIDLEWAY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"byway\", HIGHWAY, PL_HW_BYWAY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"steps\", HIGHWAY, PL_HW_STEPS, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"ford\", HIGHWAY, PL_HW_FORD, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"construction\", HIGHWAY, PL_HW_CONSTRUCTION, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"proposed\", HIGHWAY, PL_HW_PROPOSED, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregister(\"highway\", \"mini_roundabout\", HIGHWAY, 35, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"stop\", HIGHWAY, 36, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"give_way\", HIGHWAY, 37, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"traffic_signals\", HIGHWAY, 38, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"motorway_junction\", HIGHWAY, 39, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"bus_stop\", HIGHWAY, 40, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"platform\", HIGHWAY, 41, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"turning_circle\", HIGHWAY, 42, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"emergency_access_point\", HIGHWAY, 43, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"speed_camera\", HIGHWAY, 44, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"street_lamp\", HIGHWAY, 45, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregister(\"traffic_calming\", \"yes\", HIGHWAY, 50, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"traffic_calming\", \"bump\", HIGHWAY, 51, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"traffic_calming\", \"chicane\", HIGHWAY, 52, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"traffic_calming\", \"cushion\", HIGHWAY, 53, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"traffic_calming\", \"hump\", HIGHWAY, 54, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"traffic_calming\", \"rumble_strip\", HIGHWAY, 55, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"traffic_calming\", \"table\", HIGHWAY, 56, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"traffic_calming\", \"choker\", HIGHWAY, 57, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"traffic_calming\", null, HIGHWAY, 58, POINT_TYPE); //$NON-NLS-1$\r\n\t\t\r\n\t// 2. barrier\t\r\n\t\tregister(\"barrier\", \"hedge\", BARRIER, 1, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"fence\", BARRIER, 2, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"wall\", BARRIER, 3, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"ditch\", BARRIER, 1, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"retaining_wall\", BARRIER, 4, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"city_wall\", BARRIER, 5, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"bollard\", BARRIER, 6, POLYLINE_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"cycle_barrier\", BARRIER, 16, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"block\", BARRIER, 17, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"cattle_grid\", BARRIER, 18, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"toll_booth\", BARRIER, 19, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"entrance\", BARRIER, 20, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"gate\", BARRIER, 21, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"lift_gate\", BARRIER, 22, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"stile\", BARRIER, 23, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"horse_stile\", BARRIER, 24, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"kissing_gate\", BARRIER, 25, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"sally_port\", BARRIER, 26, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"turnstile\", BARRIER, 27, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"kent_carriage_gap\", BARRIER, 28, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t// 3. waterway\t\r\n\t\tregister(\"waterway\", \"stream\", WATERWAY, 1, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\t\t\r\n\t\tregister(\"waterway\", \"river\", WATERWAY, 2, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"waterway\", \"riverbank\", WATERWAY, 3, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"waterway\", \"canal\", WATERWAY, 4, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"waterway\", \"ditch\", WATERWAY, 5, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"waterway\", \"drain\", WATERWAY, 6, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"waterway\", \"dock\", WATERWAY, 7, POLYGON_WITH_CENTER_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"waterway\", \"lock_gate\", WATERWAY, 8, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"waterway\", \"turning_point\", WATERWAY, 9, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"waterway\", \"boatyard\", WATERWAY, 10, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"waterway\", \"weir\", WATERWAY, 11, POLYLINE_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"waterway\", \"dam\", WATERWAY, 12, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\r\n\t// 4. railway\t\r\n\t\tregister(\"railway\", \"rail\", RAILWAY, 1, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"tram\", RAILWAY, 2, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"light_rail\", RAILWAY, 3, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"abandoned\", RAILWAY, 4, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"disused\", RAILWAY, 5, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"subway\", RAILWAY, 6, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"preserved\", RAILWAY, 7, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"narrow_gauge\", RAILWAY, 8, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"construction\", RAILWAY, 9, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"monorail\", RAILWAY, 10, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"funicular\", RAILWAY, 11, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregister(\"railway\", \"platform\", RAILWAY, 12, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"station\", RAILWAY, 13, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"turntable\", RAILWAY, 14, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregister(\"railway\", \"halt\", RAILWAY, 22, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"tram_stop\", RAILWAY, 23, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"crossing\", RAILWAY, 24, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"level_crossing\", RAILWAY, 25, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"subway_entrance\", RAILWAY, 26, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"buffer_stop\", RAILWAY, 27, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\r\n\t\r\n\t// 5. aeroway\r\n\t\tregister(\"aeroway\", \"aerodrome\", AEROWAY, 1, POLYGON_WITH_CENTER_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aeroway\", \"terminal\", AEROWAY, 2, POLYGON_WITH_CENTER_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aeroway\", \"helipad\", AEROWAY, 3, POLYGON_WITH_CENTER_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aeroway\", \"runway\", AEROWAY, 7, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aeroway\", \"taxiway\", AEROWAY, 8, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aeroway\", \"apron\", AEROWAY, 9, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aeroway\", \"gate\", AEROWAY, 12, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aeroway\", \"windsock\", AEROWAY, 13, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\r\n\t// 6. aerialway\r\n\t\tregister(\"aerialway\", \"cable_car\", AERIALWAY, 1, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aerialway\", \"gondola\", AERIALWAY, 2, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aerialway\", \"chair_lift\", AERIALWAY, 3, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aerialway\", \"mixed_lift\", AERIALWAY, 4, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aerialway\", \"drag_lift\", AERIALWAY, 5, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aerialway\", \"gondola\", AERIALWAY, 6, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"aerialway\", \"station\", AERIALWAY, 7); //$NON-NLS-1$ //$NON-NLS-2$ \r\n\t\tregister(\"aerialway\", \"pylon\", AERIALWAY, 8, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aerialway\", \"goods\", AERIALWAY, 9, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t\r\n\t// 7. power\r\n\t\tregister(\"power\", \"tower\", POWER, 1, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"power\", \"pole\", POWER, 2, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"power\", \"line\", POWER, 3, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"power\", \"minor_line\", POWER, 4, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"power\", \"station\", POWER, 5); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"power\", \"sub_station\", POWER, 6); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"power\", \"generator\", POWER, 7, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"power\", \"cable_distribution_cabinet\", POWER, 8, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t\r\n\t// 8. man_made\r\n\t\tregister(\"building\", \"yes\", MAN_MADE, SUBTYPE_BUILDING, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"building\", null, MAN_MADE, SUBTYPE_BUILDING, POLYGON_TYPE); //$NON-NLS-1$ \r\n\t\tregister(\"man_made\", \"wastewater_plant\", MAN_MADE, 2, POINT_TYPE, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"man_made\", \"water_works\", MAN_MADE, 3); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"man_made\", \"works\", MAN_MADE, 4); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"building\", \"garages\", MAN_MADE, SUBTYPE_GARAGES, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\t\r\n\t\tregister(\"man_made\", \"cutline\", MAN_MADE, 7, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"groyne\", MAN_MADE, 8, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"pier\", MAN_MADE, 9, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"pipeline\", MAN_MADE, 10, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"reservoir_covered\", MAN_MADE, 11, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregister(\"man_made\", \"beacon\", MAN_MADE, 15, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"crane\", MAN_MADE, 16, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"lighthouse\", MAN_MADE, 17, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"mineshaft\", MAN_MADE, 18, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"adit\", MAN_MADE, 19, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"petroleum_well\", MAN_MADE, 20, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"surveillance\", MAN_MADE, 21, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"survey_point\", MAN_MADE, 22, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"tower\", MAN_MADE, 23, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"watermill\", MAN_MADE, 24, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"water_tower\", MAN_MADE, 25, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"water_well\", MAN_MADE, 26, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"windmill\", MAN_MADE, 27, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t// 9. leisure\r\n\t\tregister(\"leisure\", \"dog_park\", LEISURE, 1, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"sports_centre\", LEISURE, 2, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"golf_course\", LEISURE, 3, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"stadium\", LEISURE, 4, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterRules(\"leisure\", \"track\", LEISURE, 5, POINT_TYPE, POLYLINE_TYPE, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"pitch\", LEISURE, 6, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"water_park\", LEISURE, 7, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"marina\", LEISURE, 8, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"slipway\", LEISURE, 9, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"fishing\", LEISURE, 10, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"nature_reserve\", LEISURE, 11, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"park\", LEISURE, 12, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"playground\", LEISURE, 13, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"garden\", LEISURE, 14, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"common\", LEISURE, 15, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"ice_rink\", LEISURE, 16, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"miniature_golf\", LEISURE, 17, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"dance\", LEISURE, 18, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t// 10. office\r\n\t\tregister(\"office\", \"accountant\", OFFICE, 5, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"architect\", OFFICE, 6, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"company\", OFFICE, 7, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"employment_agency\", OFFICE, 8, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"estate_agent\", OFFICE, 9, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"government\", OFFICE, 10, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"insurance\", OFFICE, 11, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"it\", OFFICE, 12, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"lawyer\", OFFICE, 13, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"ngo\", OFFICE, 14, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"quango\", OFFICE, 15, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"research\", OFFICE, 16, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"telecommunication\", OFFICE, 17, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"travel_agent\", OFFICE, 18, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\t// changed\r\n\t\tregister(\"amenity\", \"architect_office\", OFFICE, 19, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t// 11. shop\r\n\t\t// reserve numbers from 1-10\r\n\t\tregister(\"shop\", \"alcohol\", SHOP, 41, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"bakery\", SHOP, 42, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"beauty\", SHOP, 43, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"beverages\", SHOP, 44, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"bicycle\", SHOP, 45, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"books\", SHOP, 46, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"boutique\", SHOP, 47, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"butcher\", SHOP, 48, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"car\", SHOP, 49, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"car_repair\", SHOP, 50, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"charity\", SHOP, 11, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"chemist\", SHOP, 12, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"clothes\", SHOP, 13, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"computer\", SHOP, 14, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"confectionery\", SHOP, 15, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"convenience\", SHOP, 16, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"department_store\", SHOP, 17, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"dry_cleaning\", SHOP, 18, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"doityourself\", SHOP, 19, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"electronics\", SHOP, 20, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"fabrics\", SHOP, 21, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"farm\", SHOP, 22, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"florist\", SHOP, 23, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"funeral_directors\", SHOP, 24, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"furniture\", SHOP, 25, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"garden_centre\", SHOP, 26, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"general\", SHOP, 27, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"gift\", SHOP, 28, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"glaziery\", SHOP, 29, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"greengrocer\", SHOP, 30, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"hairdresser\", SHOP, 31, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"hardware\", SHOP, 32, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"hearing_aids\", SHOP, 33, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"hifi\", SHOP, 34, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"ice_cream\", SHOP, 35, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"hardware\", SHOP, 36, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"hearing_aids\", SHOP, 37, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"hifi\", SHOP, 38, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"ice_cream\", SHOP, 39, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"jewelry\", SHOP, 40, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"kiosk\", SHOP, 51, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"laundry\", SHOP, 52, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"mall\", SHOP, 53, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"massage\", SHOP, 54, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"money_lender\", SHOP, 55, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"motorcycle\", SHOP, 56, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"newsagent\", SHOP, 57, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"optician\", SHOP, 58, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"organic\", SHOP, 59, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"outdoor\", SHOP, 60, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"pawnbroker\", SHOP, 61, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"second_hand\", SHOP, 62, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"sports\", SHOP, 63, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"stationery\", SHOP, 64, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"supermarket\", SHOP, 65, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"shoes\", SHOP, 66, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"tattoo\", SHOP, 67, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"toys\", SHOP, 68, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"travel_agency\", SHOP, 69, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"variety_store\", SHOP, 70, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"video\", SHOP, 71, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t\t\r\n\t// 12. emergency\r\n\t\tregisterAsBuilding(\"emergency\", \"ambulance_station\", EMERGENCY, 1); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"emergency\", \"ses_station\", EMERGENCY, 2); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregister(\"emergency\", \"fire_extinguisher\", EMERGENCY, 3, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"emergency\", \"fire_flapper\", EMERGENCY, 4,POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"emergency\", \"fire_hose\", EMERGENCY, 5, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"emergency\", \"fire_hydrant\", EMERGENCY, 6, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"emergency\", \"phone\", EMERGENCY, 7, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"emergency\", \"ses_station\", EMERGENCY, 8, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"emergency\", \"siren\", EMERGENCY, 9, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\r\n\t\t// change category\r\n\t\tregister(\"amenity\", \"fire_station\", EMERGENCY, 10, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t// 13. tourism\r\n\t\tregister(\"tourism\", \"attraction\", TOURISM, 2, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"tourism\", \"artwork\", TOURISM, 3, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"tourism\", \"camp_site\", TOURISM, 4, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"tourism\", \"caravan_site\", TOURISM, 5, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"tourism\", \"picnic_site\", TOURISM, 6, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"tourism\", \"theme_park\", TOURISM, 7, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"tourism\", \"zoo\", TOURISM, 8, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregisterAsBuilding(\"tourism\", \"alpine_hut\",  TOURISM, 9); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"tourism\", \"chalet\", TOURISM, 10); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"tourism\", \"guest_house\", TOURISM, 11); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"tourism\", \"hostel\", TOURISM, 12); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"tourism\", \"hotel\", TOURISM, 13); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"tourism\", \"motel\", TOURISM, 14); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"tourism\", \"museum\", TOURISM, 15); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregister(\"tourism\", \"information\", TOURISM, 16, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"tourism\", \"viewpoint\", TOURISM, 17, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"tourism\", null, TOURISM, 18, POINT_TYPE); //$NON-NLS-1$ \r\n\t\r\n\t// 14. historic\r\n\t\tregister(\"historic\", \"archaeological_site\", HISTORIC, 1, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"historic\", \"battlefield\", HISTORIC, 2, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"historic\", \"castle\", HISTORIC, 4, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"historic\", \"fort\", HISTORIC, 5, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"historic\", \"ruins\", HISTORIC, 8, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"historic\", \"monument\", HISTORIC, 7); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregister(\"historic\", \"boundary_stone\", HISTORIC, 3, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"historic\", \"memorial\", HISTORIC, 6, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"historic\", \"wayside_cross\", HISTORIC, 9, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"historic\", \"wayside_shrine\", HISTORIC, 10, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"historic\", \"wreck\", HISTORIC, 11, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"historic\", null, HISTORIC, 12, POINT_TYPE); //$NON-NLS-1$ \r\n\t\r\n\t// 15. landuse\r\n\t\tregister(\"landuse\", \"allotments\", LANDUSE, 1, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"basin\", LANDUSE, 2, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"brownfield\", LANDUSE, 3, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"cemetery\", LANDUSE, 4, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"commercial\", LANDUSE, 5, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"construction\", LANDUSE, 6, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"farm\", LANDUSE, 7, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"farmland\", LANDUSE, 8, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"farmyard\", LANDUSE, 9, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"forest\", LANDUSE, 10, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"garages\", LANDUSE, 11, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"grass\", LANDUSE, 12, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"greenfield\", LANDUSE, 13, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"greenhouse_horticulture\", LANDUSE, 14, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"industrial\", LANDUSE, 15, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"landfill\", LANDUSE, 16, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"meadow\", LANDUSE, 17, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"military\", LANDUSE, 18, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$ \r\n\t\tregister(\"landuse\", \"orchard\", LANDUSE, 19, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"railway\", LANDUSE, 20, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$]\r\n\t\tregister(\"landuse\", \"recreation_ground\", LANDUSE, 21, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"reservoir\", LANDUSE, 22, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"residential\", LANDUSE, 23, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"retail\", LANDUSE, 24, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"salt_pond\", LANDUSE, 25, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"village_green\", LANDUSE, 26, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"vineyard\", LANDUSE, 27, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t// 16. military\r\n\t\tregister(\"military\", \"airfield\", MILITARY, 1, POLYGON_WITH_CENTER_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"military\", \"bunker\", MILITARY, 1, POLYGON_WITH_CENTER_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"military\", \"barracks\", MILITARY, 1, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"military\", \"danger_area\", MILITARY, 1, POLYGON_WITH_CENTER_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"military\", \"range\", MILITARY, 1, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"military\", \"naval_base\", MILITARY, 1, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\t\r\n\t// 17. natural\t\r\n\t\tregister(\"natural\", \"coastline\", NATURAL, 5, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregister(\"natural\", \"bay\", NATURAL, 1, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"beach\", NATURAL, 2, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"cave_entrance\", NATURAL, 3, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterRules(\"natural\", \"cliff\", NATURAL, 4, POLYGON_TYPE, POINT_TYPE, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"fell\", NATURAL, 6, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"glacier\", NATURAL, 7, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"heath\", NATURAL, 8, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"land\", NATURAL, 9, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"heath\", NATURAL, 10, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"marsh\", NATURAL, 11, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"mud\", NATURAL, 12, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"peak\", NATURAL, 13, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"sand\", NATURAL, 14, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"scree\", NATURAL, 15, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"scrub\", NATURAL, 16, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"spring\", NATURAL, 17, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"stone\", NATURAL, 18, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"tree\", NATURAL, 19, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"volcano\", NATURAL, 20, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"water\", NATURAL, 21, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"wetland\", NATURAL, 22, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"wood\", NATURAL, 23, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\r\n\t// 18. amenity sustenance\r\n\t\tregisterAsBuilding(\"amenity\", \"restaurant\", AMENITY_SUSTENANCE, 1); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"cafe\", AMENITY_SUSTENANCE, 2); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"food_court\", AMENITY_SUSTENANCE, 3); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"fast_food\", AMENITY_SUSTENANCE, 4); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"pub\", AMENITY_SUSTENANCE, 5); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"bar\", AMENITY_SUSTENANCE, 6); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"biergarten\", AMENITY_SUSTENANCE, 7); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"drinking_water\", AMENITY_SUSTENANCE, 8, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"bbq\", AMENITY_SUSTENANCE, 9, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t// 19. amenity education\r\n\t\tregisterAsBuilding(\"amenity\", \"kindergarten\", AMENITY_EDUCATION, 1); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"school\", AMENITY_EDUCATION, 2, POINT_TYPE, POLYGON_WITH_CENTER_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"college\", AMENITY_EDUCATION, 3, POINT_TYPE, POLYGON_WITH_CENTER_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"library\", AMENITY_EDUCATION, 4, POINT_TYPE, POLYGON_WITH_CENTER_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"university\", AMENITY_EDUCATION, 5, POINT_TYPE, POLYGON_WITH_CENTER_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t\r\n\t\r\n\t// 20. amenity transportation\r\n\t\tregister(\"amenity\", \"parking\", AMENITY_TRANSPORTATION, SUBTYPE_PARKING, //$NON-NLS-1$ //$NON-NLS-2$ \r\n\t\t\t\tPOLYGON_WITH_CENTER_TYPE, POINT_TYPE); \r\n\t\tregister(\"amenity\", \"bicycle_parking\", AMENITY_TRANSPORTATION, 2, //$NON-NLS-1$ //$NON-NLS-2$ \r\n\t\t\t\tPOLYGON_WITH_CENTER_TYPE, POINT_TYPE); \r\n\t\tregister(\"amenity\", \"ferry_terminal\", AMENITY_TRANSPORTATION, 3, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"fuel\", AMENITY_TRANSPORTATION, 4); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\t// do not register small objects as area\r\n\t\tregister(\"amenity\", \"taxi\", AMENITY_TRANSPORTATION, 16, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"bicycle_rental\", AMENITY_TRANSPORTATION, 17, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"bus_station\", AMENITY_TRANSPORTATION, 18, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$ \r\n\t\tregister(\"amenity\", \"car_rental\", AMENITY_TRANSPORTATION, 19, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"car_sharing\", AMENITY_TRANSPORTATION, 20, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"car_wash\", AMENITY_TRANSPORTATION, 21, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"grit_bin\", AMENITY_TRANSPORTATION, 22, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t// 21. amenity finance\r\n\t\tregister(\"amenity\", \"atm\", AMENITY_FINANCE, 1, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"bank\", AMENITY_FINANCE, 2); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"bureau_de_change\", AMENITY_FINANCE, 3, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t// 22. amenity healthcare\r\n\t\tregisterAsBuilding(\"amenity\", \"pharmacy\", AMENITY_HEALTHCARE, 1); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"hospital\", AMENITY_HEALTHCARE, 2); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"baby_hatch\", AMENITY_HEALTHCARE, 3, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"dentist\", AMENITY_HEALTHCARE, 4, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"doctors\", AMENITY_HEALTHCARE, 5, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"veterinary\", AMENITY_HEALTHCARE, 6, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"first_aid\", AMENITY_HEALTHCARE, 7, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t// 23. amenity entertainment\r\n\t\t\r\n\t\tregister(\"amenity\", \"arts_centre\", AMENITY_ENTERTAINMENT, 2, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"cinema\", AMENITY_ENTERTAINMENT, 3, POLYGON_WITH_CENTER_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"community_centre\", AMENITY_ENTERTAINMENT, 4, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"social_centre\", AMENITY_ENTERTAINMENT, 5, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregisterAsBuilding(\"amenity\", \"nightclub\", AMENITY_ENTERTAINMENT, 6); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"stripclub\", AMENITY_ENTERTAINMENT, 7, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"studio\", AMENITY_ENTERTAINMENT, 8, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"theatre\", AMENITY_ENTERTAINMENT, 9); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"sauna\", AMENITY_ENTERTAINMENT, 10, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"brothel\", AMENITY_ENTERTAINMENT, 11); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t// 24. amenity others\r\n\t\tregister(\"amenity\", \"marketplace\", AMENITY_OTHER, 1, POINT_TYPE, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregisterAsBuilding(\"amenity\", \"courthouse\", AMENITY_OTHER, 5); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"crematorium\", AMENITY_OTHER, 6); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"embassy\", AMENITY_OTHER, 7); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"grave_yard\", AMENITY_OTHER, 8, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"hunting_stand\", AMENITY_OTHER, 9, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"police\", AMENITY_OTHER, 10, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"post_box\", AMENITY_OTHER, 11, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"post_office\", AMENITY_OTHER, 12); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"prison\", AMENITY_OTHER, 13); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"public_building\", AMENITY_OTHER, 14); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"recycling\", AMENITY_OTHER, 15, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"shelter\", AMENITY_OTHER, 16, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"telephone\", AMENITY_OTHER, 17, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"toilets\", AMENITY_OTHER, 18, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"townhall\", AMENITY_OTHER, 19); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"vending_machine\", AMENITY_OTHER, 20, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"waste_basket\", AMENITY_OTHER, 21, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"waste_disposal\", AMENITY_OTHER, 22, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"fountain\", AMENITY_OTHER, 23, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"bench\", AMENITY_OTHER, 24, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"clock\", AMENITY_OTHER, 25, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\r\n\t// 25. administrative \r\n\t\tregister(\"place\", \"continent\", ADMINISTRATIVE, 1, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"place\", \"country\", ADMINISTRATIVE, 2, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"place\", \"state\", ADMINISTRATIVE, 3, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"place\", \"region\", ADMINISTRATIVE, 4, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"place\", \"county\", ADMINISTRATIVE, 5, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"place\", \"city\", ADMINISTRATIVE, 6, POINT_TYPE, POLYGON_WITH_CENTER_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"place\", \"town\", ADMINISTRATIVE, 7, POINT_TYPE, POLYGON_WITH_CENTER_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"place\", \"village\", ADMINISTRATIVE, 8, POINT_TYPE, POLYGON_WITH_CENTER_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"place\", \"hamlet\", ADMINISTRATIVE, 9, POINT_TYPE, POLYGON_WITH_CENTER_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"place\", \"suburb\", ADMINISTRATIVE, 10, POINT_TYPE, POLYGON_WITH_CENTER_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"place\", \"locality\", ADMINISTRATIVE, 11, POINT_TYPE, POLYGON_WITH_CENTER_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"place\", \"island\", ADMINISTRATIVE, 12, POINT_TYPE, POLYGON_WITH_CENTER_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregister(\"boundary\", \"administrative\", ADMINISTRATIVE, 15, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"boundary\", \"civil\", ADMINISTRATIVE, 16, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"boundary\", \"political\", ADMINISTRATIVE, 17, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"boundary\", \"maritime\", ADMINISTRATIVE, 18, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"boundary\", \"national_park\", ADMINISTRATIVE, 19, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"boundary\", \"protected_area\", ADMINISTRATIVE, 20, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"addr:housenumber\", null, ADMINISTRATIVE, 21, POINT_TYPE); //$NON-NLS-1$\r\n\r\n\t\t\r\n\t\t\r\n\t// 27. sport\r\n\t\tregister(\"sport\", \"9pin\", SPORT, 1, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"10pin\", SPORT, 2, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"archery\", SPORT, 3, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"athletics\", SPORT, 4, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"australian_football\", SPORT, 5, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"baseball\", SPORT, 6, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"basketball\", SPORT, 7, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"beachvolleyball\", SPORT, 8, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"boules\", SPORT, 9, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"bowls\", SPORT, 10, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"canoe\", SPORT, 11, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"chess\", SPORT, 12, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"climbing\", SPORT, 13, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"cricket\", SPORT, 14, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"cricket_nets\", SPORT, 15, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"croquet\", SPORT, 16, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"cycling\", SPORT, 17, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"diving\", SPORT, 18, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"dog_racing\", SPORT, 19, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"equestrian\", SPORT, 20, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"football\", SPORT, 21, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"golf\", SPORT, 22, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"gymnastics\", SPORT, 23, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"hockey\", SPORT, 24, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"horse_racing\", SPORT, 25, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"ice_stock\", SPORT, 26, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"korfball\", SPORT, 27, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"motor\", SPORT, 28, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"multi\", SPORT, 29, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"orienteering\", SPORT, 30, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"paddle_tennis\", SPORT, 31, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"paragliding\", SPORT, 32, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"pelota\", SPORT, 33, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"racquet\", SPORT, 34, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"rowing\", SPORT, 35, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"rugby\", SPORT, 36, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"shooting\", SPORT, 37, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"skating\", SPORT, 38, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"skateboard\", SPORT, 39, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"skiing\", SPORT, 40, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"soccer\", SPORT, 41, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"swimming\", SPORT, 42, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"table_tennis\", SPORT, 43, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"team_handball\", SPORT, 44, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"tennis\", SPORT, 45, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"toboggan\", SPORT, 46, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"volleyball\", SPORT, 47, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\t\t\r\n\t}","id":46369,"modified_method":"private static void init(){\r\n\t\t\r\n\t// 1. highway\t\r\n\t\tregister(\"highway\", \"motorway\", HIGHWAY, PL_HW_MOTORWAY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"motorway_link\", HIGHWAY, PL_HW_MOTORWAY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"trunk\", HIGHWAY, PL_HW_TRUNK, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"trunk_link\", HIGHWAY, PL_HW_TRUNK, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"primary\", HIGHWAY, PL_HW_PRIMARY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"primary_link\", HIGHWAY, PL_HW_PRIMARY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"secondary\", HIGHWAY, PL_HW_SECONDARY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"secondary_link\", HIGHWAY, PL_HW_SECONDARY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"tertiary\", HIGHWAY, PL_HW_TERTIARY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"unclassified\", HIGHWAY, PL_HW_UNCLASSIFIED, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"road\", HIGHWAY, PL_HW_UNCLASSIFIED, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"residential\", HIGHWAY, PL_HW_RESIDENTIAL, POLYLINE_TYPE, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"living_street\", HIGHWAY, PL_HW_LIVING_STREET, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"service\", HIGHWAY, PL_HW_SERVICE, POLYLINE_TYPE, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"track\", HIGHWAY, PL_HW_TRACK, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"pedestrian\", HIGHWAY, PL_HW_PEDESTRIAN, POLYLINE_TYPE, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n//\t\tregister(\"highway\", \"raceway\", HIGHWAY, PL_HW_RACEWAY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"services\", HIGHWAY, PL_HW_SERVICES, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n//\t\tregister(\"highway\", \"bus_guideway\", HIGHWAY, PL_HW_MOTORWAY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"path\", HIGHWAY, PL_HW_PATH, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"cycleway\", HIGHWAY, PL_HW_CYCLEWAY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"footway\", HIGHWAY, PL_HW_FOOTWAY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"bridleway\", HIGHWAY, PL_HW_BRIDLEWAY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"byway\", HIGHWAY, PL_HW_BYWAY, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"steps\", HIGHWAY, PL_HW_STEPS, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"ford\", HIGHWAY, PL_HW_FORD, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"construction\", HIGHWAY, PL_HW_CONSTRUCTION, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"proposed\", HIGHWAY, PL_HW_PROPOSED, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregister(\"highway\", \"mini_roundabout\", HIGHWAY, 35, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"stop\", HIGHWAY, 36, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"give_way\", HIGHWAY, 37, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"traffic_signals\", HIGHWAY, 38, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"motorway_junction\", HIGHWAY, 39, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"bus_stop\", HIGHWAY, 40, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"platform\", HIGHWAY, 41, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"turning_circle\", HIGHWAY, 42, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"emergency_access_point\", HIGHWAY, 43, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"speed_camera\", HIGHWAY, 44, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"highway\", \"street_lamp\", HIGHWAY, 45, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregister(\"traffic_calming\", \"yes\", HIGHWAY, 50, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"traffic_calming\", \"bump\", HIGHWAY, 51, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"traffic_calming\", \"chicane\", HIGHWAY, 52, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"traffic_calming\", \"cushion\", HIGHWAY, 53, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"traffic_calming\", \"hump\", HIGHWAY, 54, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"traffic_calming\", \"rumble_strip\", HIGHWAY, 55, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"traffic_calming\", \"table\", HIGHWAY, 56, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"traffic_calming\", \"choker\", HIGHWAY, 57, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"traffic_calming\", null, HIGHWAY, 58, POINT_TYPE); //$NON-NLS-1$\r\n\t\t\r\n\t// 2. barrier\t\r\n\t\tregister(\"barrier\", \"hedge\", BARRIER, 1, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"fence\", BARRIER, 2, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"wall\", BARRIER, 3, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"ditch\", BARRIER, 1, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"retaining_wall\", BARRIER, 4, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"city_wall\", BARRIER, 5, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"bollard\", BARRIER, 6, POLYLINE_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"cycle_barrier\", BARRIER, 16, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"block\", BARRIER, 17, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"cattle_grid\", BARRIER, 18, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"toll_booth\", BARRIER, 19, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"entrance\", BARRIER, 20, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"gate\", BARRIER, 21, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"lift_gate\", BARRIER, 22, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"stile\", BARRIER, 23, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"horse_stile\", BARRIER, 24, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"kissing_gate\", BARRIER, 25, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"sally_port\", BARRIER, 26, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"turnstile\", BARRIER, 27, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"barrier\", \"kent_carriage_gap\", BARRIER, 28, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t// 3. waterway\t\r\n\t\tregister(\"waterway\", \"stream\", WATERWAY, 1, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\t\t\r\n\t\tregister(\"waterway\", \"river\", WATERWAY, 2, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"waterway\", \"riverbank\", WATERWAY, 3, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"waterway\", \"canal\", WATERWAY, 4, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"waterway\", \"ditch\", WATERWAY, 5, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"waterway\", \"drain\", WATERWAY, 6, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"waterway\", \"dock\", WATERWAY, 7, POLYGON_WITH_CENTER_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"waterway\", \"lock_gate\", WATERWAY, 8, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"waterway\", \"turning_point\", WATERWAY, 9, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"waterway\", \"boatyard\", WATERWAY, 10, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"waterway\", \"weir\", WATERWAY, 11, POLYLINE_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"waterway\", \"dam\", WATERWAY, 12, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\r\n\t// 4. railway\t\r\n\t\tregister(\"railway\", \"rail\", RAILWAY, 1, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"tram\", RAILWAY, 2, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"light_rail\", RAILWAY, 3, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"abandoned\", RAILWAY, 4, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"disused\", RAILWAY, 5, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"subway\", RAILWAY, 6, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"preserved\", RAILWAY, 7, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"narrow_gauge\", RAILWAY, 8, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"construction\", RAILWAY, 9, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"monorail\", RAILWAY, 10, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"funicular\", RAILWAY, 11, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregister(\"railway\", \"platform\", RAILWAY, 12, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"station\", RAILWAY, 13, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"turntable\", RAILWAY, 14, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregister(\"railway\", \"halt\", RAILWAY, 22, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"tram_stop\", RAILWAY, 23, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"crossing\", RAILWAY, 24, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"level_crossing\", RAILWAY, 25, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"subway_entrance\", RAILWAY, 26, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"railway\", \"buffer_stop\", RAILWAY, 27, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\r\n\t\r\n\t// 5. aeroway\r\n\t\tregister(\"aeroway\", \"aerodrome\", AEROWAY, 1, POLYGON_WITH_CENTER_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aeroway\", \"terminal\", AEROWAY, 2, POLYGON_WITH_CENTER_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aeroway\", \"helipad\", AEROWAY, 3, POLYGON_WITH_CENTER_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aeroway\", \"runway\", AEROWAY, 7, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aeroway\", \"taxiway\", AEROWAY, 8, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aeroway\", \"apron\", AEROWAY, 9, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aeroway\", \"gate\", AEROWAY, 12, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aeroway\", \"windsock\", AEROWAY, 13, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\r\n\t// 6. aerialway\r\n\t\tregister(\"aerialway\", \"cable_car\", AERIALWAY, 1, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aerialway\", \"gondola\", AERIALWAY, 2, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aerialway\", \"chair_lift\", AERIALWAY, 3, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aerialway\", \"mixed_lift\", AERIALWAY, 4, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aerialway\", \"drag_lift\", AERIALWAY, 5, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aerialway\", \"gondola\", AERIALWAY, 6, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"aerialway\", \"station\", AERIALWAY, 7); //$NON-NLS-1$ //$NON-NLS-2$ \r\n\t\tregister(\"aerialway\", \"pylon\", AERIALWAY, 8, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"aerialway\", \"goods\", AERIALWAY, 9, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t\r\n\t// 7. power\r\n\t\tregister(\"power\", \"tower\", POWER, 1, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"power\", \"pole\", POWER, 2, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"power\", \"line\", POWER, 3, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"power\", \"minor_line\", POWER, 4, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"power\", \"station\", POWER, 5); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"power\", \"sub_station\", POWER, 6); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"power\", \"generator\", POWER, 7, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"power\", \"cable_distribution_cabinet\", POWER, 8, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t\r\n\t// 8. man_made\r\n\t\tregister(\"building\", \"yes\", MAN_MADE, SUBTYPE_BUILDING, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"building\", null, MAN_MADE, SUBTYPE_BUILDING, POLYGON_TYPE); //$NON-NLS-1$ \r\n\t\tregister(\"man_made\", \"wastewater_plant\", MAN_MADE, 2, POINT_TYPE, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"man_made\", \"water_works\", MAN_MADE, 3); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"man_made\", \"works\", MAN_MADE, 4); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"building\", \"garages\", MAN_MADE, SUBTYPE_GARAGES, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\t\r\n\t\tregister(\"man_made\", \"cutline\", MAN_MADE, 7, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"groyne\", MAN_MADE, 8, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"pier\", MAN_MADE, 9, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"pipeline\", MAN_MADE, 10, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"reservoir_covered\", MAN_MADE, 11, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregister(\"man_made\", \"beacon\", MAN_MADE, 15, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"crane\", MAN_MADE, 16, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"lighthouse\", MAN_MADE, 17, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"mineshaft\", MAN_MADE, 18, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"adit\", MAN_MADE, 19, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"petroleum_well\", MAN_MADE, 20, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"surveillance\", MAN_MADE, 21, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"survey_point\", MAN_MADE, 22, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"tower\", MAN_MADE, 23, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"watermill\", MAN_MADE, 24, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"water_tower\", MAN_MADE, 25, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"water_well\", MAN_MADE, 26, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"man_made\", \"windmill\", MAN_MADE, 27, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t// 9. leisure\r\n\t\tregister(\"leisure\", \"dog_park\", LEISURE, 1, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"sports_centre\", LEISURE, 2, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"golf_course\", LEISURE, 3, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"stadium\", LEISURE, 4, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterRules(\"leisure\", \"track\", LEISURE, 5, POINT_TYPE, POLYLINE_TYPE, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"pitch\", LEISURE, 6, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"water_park\", LEISURE, 7, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"marina\", LEISURE, 8, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"slipway\", LEISURE, 9, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"fishing\", LEISURE, 10, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"nature_reserve\", LEISURE, 11, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"park\", LEISURE, 12, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"playground\", LEISURE, 13, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"garden\", LEISURE, 14, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"common\", LEISURE, 15, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"ice_rink\", LEISURE, 16, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"miniature_golf\", LEISURE, 17, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"leisure\", \"dance\", LEISURE, 18, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t// 10. office\r\n\t\tregister(\"office\", \"accountant\", OFFICE, 5, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"architect\", OFFICE, 6, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"company\", OFFICE, 7, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"employment_agency\", OFFICE, 8, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"estate_agent\", OFFICE, 9, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"government\", OFFICE, 10, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"insurance\", OFFICE, 11, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"it\", OFFICE, 12, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"lawyer\", OFFICE, 13, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"ngo\", OFFICE, 14, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"quango\", OFFICE, 15, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"research\", OFFICE, 16, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"telecommunication\", OFFICE, 17, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"office\", \"travel_agent\", OFFICE, 18, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\t// changed\r\n\t\tregister(\"amenity\", \"architect_office\", OFFICE, 19, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t// 11. shop\r\n\t\t// reserve numbers from 1-10\r\n\t\tregister(\"shop\", \"alcohol\", SHOP, 41, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"bakery\", SHOP, 42, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"beauty\", SHOP, 43, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"beverages\", SHOP, 44, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"bicycle\", SHOP, 45, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"books\", SHOP, 46, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"boutique\", SHOP, 47, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"butcher\", SHOP, 48, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"car\", SHOP, 49, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"car_repair\", SHOP, 50, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"charity\", SHOP, 11, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"chemist\", SHOP, 12, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"clothes\", SHOP, 13, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"computer\", SHOP, 14, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"confectionery\", SHOP, 15, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"convenience\", SHOP, 16, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"department_store\", SHOP, 17, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"dry_cleaning\", SHOP, 18, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"doityourself\", SHOP, 19, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"electronics\", SHOP, 20, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"fabrics\", SHOP, 21, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"farm\", SHOP, 22, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"florist\", SHOP, 23, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"funeral_directors\", SHOP, 24, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"furniture\", SHOP, 25, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"garden_centre\", SHOP, 26, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"general\", SHOP, 27, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"gift\", SHOP, 28, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"glaziery\", SHOP, 29, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"greengrocer\", SHOP, 30, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"hairdresser\", SHOP, 31, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"hardware\", SHOP, 32, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"hearing_aids\", SHOP, 33, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"hifi\", SHOP, 34, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"ice_cream\", SHOP, 35, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"hardware\", SHOP, 36, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"hearing_aids\", SHOP, 37, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"hifi\", SHOP, 38, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"ice_cream\", SHOP, 39, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"jewelry\", SHOP, 40, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"kiosk\", SHOP, 51, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"laundry\", SHOP, 52, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"mall\", SHOP, 53, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"massage\", SHOP, 54, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"money_lender\", SHOP, 55, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"motorcycle\", SHOP, 56, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"newsagent\", SHOP, 57, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"optician\", SHOP, 58, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"organic\", SHOP, 59, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"outdoor\", SHOP, 60, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"pawnbroker\", SHOP, 61, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"second_hand\", SHOP, 62, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"sports\", SHOP, 63, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"stationery\", SHOP, 64, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"supermarket\", SHOP, 65, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"shoes\", SHOP, 66, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"tattoo\", SHOP, 67, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"toys\", SHOP, 68, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"travel_agency\", SHOP, 69, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"variety_store\", SHOP, 70, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"shop\", \"video\", SHOP, 71, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t\t\r\n\t// 12. emergency\r\n\t\tregisterAsBuilding(\"emergency\", \"ambulance_station\", EMERGENCY, 1); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"emergency\", \"ses_station\", EMERGENCY, 2); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregister(\"emergency\", \"fire_extinguisher\", EMERGENCY, 3, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"emergency\", \"fire_flapper\", EMERGENCY, 4,POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"emergency\", \"fire_hose\", EMERGENCY, 5, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"emergency\", \"fire_hydrant\", EMERGENCY, 6, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"emergency\", \"phone\", EMERGENCY, 7, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"emergency\", \"ses_station\", EMERGENCY, 8, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"emergency\", \"siren\", EMERGENCY, 9, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\r\n\t\t// change category\r\n\t\tregister(\"amenity\", \"fire_station\", EMERGENCY, 10, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t// 13. tourism\r\n\t\tregister(\"tourism\", \"attraction\", TOURISM, 2, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"tourism\", \"artwork\", TOURISM, 3, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"tourism\", \"camp_site\", TOURISM, 4, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"tourism\", \"caravan_site\", TOURISM, 5, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"tourism\", \"picnic_site\", TOURISM, 6, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"tourism\", \"theme_park\", TOURISM, 7, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"tourism\", \"zoo\", TOURISM, 8, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregisterAsBuilding(\"tourism\", \"alpine_hut\",  TOURISM, 9); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"tourism\", \"chalet\", TOURISM, 10); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"tourism\", \"guest_house\", TOURISM, 11); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"tourism\", \"hostel\", TOURISM, 12); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"tourism\", \"hotel\", TOURISM, 13); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"tourism\", \"motel\", TOURISM, 14); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"tourism\", \"museum\", TOURISM, 15); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregister(\"tourism\", \"information\", TOURISM, 16, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"tourism\", \"viewpoint\", TOURISM, 17, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"tourism\", null, TOURISM, 18, POINT_TYPE); //$NON-NLS-1$ \r\n\t\r\n\t// 14. historic\r\n\t\tregister(\"historic\", \"archaeological_site\", HISTORIC, 1, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"historic\", \"battlefield\", HISTORIC, 2, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"historic\", \"castle\", HISTORIC, 4, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"historic\", \"fort\", HISTORIC, 5, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"historic\", \"ruins\", HISTORIC, 8, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"historic\", \"monument\", HISTORIC, 7); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregister(\"historic\", \"boundary_stone\", HISTORIC, 3, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"historic\", \"memorial\", HISTORIC, 6, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"historic\", \"wayside_cross\", HISTORIC, 9, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"historic\", \"wayside_shrine\", HISTORIC, 10, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"historic\", \"wreck\", HISTORIC, 11, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"historic\", null, HISTORIC, 12, POINT_TYPE); //$NON-NLS-1$ \r\n\t\r\n\t// 15. landuse\r\n\t\tregister(\"landuse\", \"allotments\", LANDUSE, 1, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"basin\", LANDUSE, 2, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"brownfield\", LANDUSE, 3, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"cemetery\", LANDUSE, 4, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"commercial\", LANDUSE, 5, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"construction\", LANDUSE, 6, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"farm\", LANDUSE, 7, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"farmland\", LANDUSE, 8, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"farmyard\", LANDUSE, 9, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"forest\", LANDUSE, 10, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"garages\", LANDUSE, 11, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"grass\", LANDUSE, 12, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"greenfield\", LANDUSE, 13, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"greenhouse_horticulture\", LANDUSE, 14, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"industrial\", LANDUSE, 15, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"landfill\", LANDUSE, 16, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"meadow\", LANDUSE, 17, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"military\", LANDUSE, 18, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$ \r\n\t\tregister(\"landuse\", \"orchard\", LANDUSE, 19, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"railway\", LANDUSE, 20, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$]\r\n\t\tregister(\"landuse\", \"recreation_ground\", LANDUSE, 21, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"reservoir\", LANDUSE, 22, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"residential\", LANDUSE, 23, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"retail\", LANDUSE, 24, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"salt_pond\", LANDUSE, 25, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"village_green\", LANDUSE, 26, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"landuse\", \"vineyard\", LANDUSE, 27, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t// 16. military\r\n\t\tregister(\"military\", \"airfield\", MILITARY, 1, POLYGON_WITH_CENTER_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"military\", \"bunker\", MILITARY, 1, POLYGON_WITH_CENTER_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"military\", \"barracks\", MILITARY, 1, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"military\", \"danger_area\", MILITARY, 1, POLYGON_WITH_CENTER_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"military\", \"range\", MILITARY, 1, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"military\", \"naval_base\", MILITARY, 1, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\t\r\n\t// 17. natural\t\r\n\t\tregister(\"natural\", \"coastline\", NATURAL, 5, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregister(\"natural\", \"bay\", NATURAL, 1, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"beach\", NATURAL, 2, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"cave_entrance\", NATURAL, 3, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterRules(\"natural\", \"cliff\", NATURAL, 4, POLYGON_TYPE, POINT_TYPE, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"fell\", NATURAL, 6, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"glacier\", NATURAL, 7, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"heath\", NATURAL, 8, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"land\", NATURAL, 9, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"heath\", NATURAL, 10, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"marsh\", NATURAL, 11, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"mud\", NATURAL, 12, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"peak\", NATURAL, 13, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"sand\", NATURAL, 14, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"scree\", NATURAL, 15, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"scrub\", NATURAL, 16, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"spring\", NATURAL, 17, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"stone\", NATURAL, 18, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"tree\", NATURAL, 19, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"volcano\", NATURAL, 20, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"water\", NATURAL, 21, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"wetland\", NATURAL, 22, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"natural\", \"wood\", NATURAL, 23, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\r\n\t// 18. amenity sustenance\r\n\t\tregisterAsBuilding(\"amenity\", \"restaurant\", AMENITY_SUSTENANCE, 1); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"cafe\", AMENITY_SUSTENANCE, 2); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"food_court\", AMENITY_SUSTENANCE, 3); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"fast_food\", AMENITY_SUSTENANCE, 4); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"pub\", AMENITY_SUSTENANCE, 5); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"bar\", AMENITY_SUSTENANCE, 6); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"biergarten\", AMENITY_SUSTENANCE, 7); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"drinking_water\", AMENITY_SUSTENANCE, 8, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"bbq\", AMENITY_SUSTENANCE, 9, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t// 19. amenity education\r\n\t\tregisterAsBuilding(\"amenity\", \"kindergarten\", AMENITY_EDUCATION, 1); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"school\", AMENITY_EDUCATION, 2, POINT_TYPE, POLYGON_WITH_CENTER_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"college\", AMENITY_EDUCATION, 3, POINT_TYPE, POLYGON_WITH_CENTER_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"library\", AMENITY_EDUCATION, 4, POINT_TYPE, POLYGON_WITH_CENTER_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"university\", AMENITY_EDUCATION, 5, POINT_TYPE, POLYGON_WITH_CENTER_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t\r\n\t\r\n\t// 20. amenity transportation\r\n\t\tregister(\"amenity\", \"parking\", AMENITY_TRANSPORTATION, SUBTYPE_PARKING, //$NON-NLS-1$ //$NON-NLS-2$ \r\n\t\t\t\tPOLYGON_WITH_CENTER_TYPE, POINT_TYPE); \r\n\t\tregister(\"amenity\", \"bicycle_parking\", AMENITY_TRANSPORTATION, 2, //$NON-NLS-1$ //$NON-NLS-2$ \r\n\t\t\t\tPOLYGON_WITH_CENTER_TYPE, POINT_TYPE); \r\n\t\tregister(\"amenity\", \"ferry_terminal\", AMENITY_TRANSPORTATION, 3, POLYGON_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"fuel\", AMENITY_TRANSPORTATION, 4); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\t// do not register small objects as area\r\n\t\tregister(\"amenity\", \"taxi\", AMENITY_TRANSPORTATION, 16, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"bicycle_rental\", AMENITY_TRANSPORTATION, 17, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"bus_station\", AMENITY_TRANSPORTATION, 18, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$ \r\n\t\tregister(\"amenity\", \"car_rental\", AMENITY_TRANSPORTATION, 19, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"car_sharing\", AMENITY_TRANSPORTATION, 20, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"car_wash\", AMENITY_TRANSPORTATION, 21, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"grit_bin\", AMENITY_TRANSPORTATION, 22, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t// 21. amenity finance\r\n\t\tregister(\"amenity\", \"atm\", AMENITY_FINANCE, 1, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"bank\", AMENITY_FINANCE, 2); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"bureau_de_change\", AMENITY_FINANCE, 3, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t// 22. amenity healthcare\r\n\t\tregisterAsBuilding(\"amenity\", \"pharmacy\", AMENITY_HEALTHCARE, 1); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"hospital\", AMENITY_HEALTHCARE, 2, POLYGON_WITH_CENTER_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"baby_hatch\", AMENITY_HEALTHCARE, 3, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"dentist\", AMENITY_HEALTHCARE, 4, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"doctors\", AMENITY_HEALTHCARE, 5, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"veterinary\", AMENITY_HEALTHCARE, 6, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"first_aid\", AMENITY_HEALTHCARE, 7, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t// 23. amenity entertainment\r\n\t\t\r\n\t\tregister(\"amenity\", \"arts_centre\", AMENITY_ENTERTAINMENT, 2, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"cinema\", AMENITY_ENTERTAINMENT, 3, POLYGON_WITH_CENTER_TYPE, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"community_centre\", AMENITY_ENTERTAINMENT, 4, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"social_centre\", AMENITY_ENTERTAINMENT, 5, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregisterAsBuilding(\"amenity\", \"nightclub\", AMENITY_ENTERTAINMENT, 6); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"stripclub\", AMENITY_ENTERTAINMENT, 7, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"studio\", AMENITY_ENTERTAINMENT, 8, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"theatre\", AMENITY_ENTERTAINMENT, 9); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"sauna\", AMENITY_ENTERTAINMENT, 10, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"brothel\", AMENITY_ENTERTAINMENT, 11); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\r\n\t// 24. amenity others\r\n\t\tregister(\"amenity\", \"marketplace\", AMENITY_OTHER, 1, POINT_TYPE, POLYGON_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregisterAsBuilding(\"amenity\", \"courthouse\", AMENITY_OTHER, 5); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"crematorium\", AMENITY_OTHER, 6); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"embassy\", AMENITY_OTHER, 7); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"grave_yard\", AMENITY_OTHER, 8, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"hunting_stand\", AMENITY_OTHER, 9, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"police\", AMENITY_OTHER, 10, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"post_box\", AMENITY_OTHER, 11, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"post_office\", AMENITY_OTHER, 12); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"prison\", AMENITY_OTHER, 13); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"public_building\", AMENITY_OTHER, 14); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"recycling\", AMENITY_OTHER, 15, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"shelter\", AMENITY_OTHER, 16, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"telephone\", AMENITY_OTHER, 17, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"toilets\", AMENITY_OTHER, 18, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregisterAsBuilding(\"amenity\", \"townhall\", AMENITY_OTHER, 19); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"vending_machine\", AMENITY_OTHER, 20, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"waste_basket\", AMENITY_OTHER, 21, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"waste_disposal\", AMENITY_OTHER, 22, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"fountain\", AMENITY_OTHER, 23, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"bench\", AMENITY_OTHER, 24, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"amenity\", \"clock\", AMENITY_OTHER, 25, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\r\n\t// 25. administrative \r\n\t\tregister(\"place\", \"continent\", ADMINISTRATIVE, 1, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"place\", \"country\", ADMINISTRATIVE, 2, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"place\", \"state\", ADMINISTRATIVE, 3, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"place\", \"region\", ADMINISTRATIVE, 4, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"place\", \"county\", ADMINISTRATIVE, 5, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"place\", \"city\", ADMINISTRATIVE, 6, POINT_TYPE, POLYGON_WITH_CENTER_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"place\", \"town\", ADMINISTRATIVE, 7, POINT_TYPE, POLYGON_WITH_CENTER_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"place\", \"village\", ADMINISTRATIVE, 8, POINT_TYPE, POLYGON_WITH_CENTER_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"place\", \"hamlet\", ADMINISTRATIVE, 9, POINT_TYPE, POLYGON_WITH_CENTER_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"place\", \"suburb\", ADMINISTRATIVE, 10, POINT_TYPE, POLYGON_WITH_CENTER_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"place\", \"locality\", ADMINISTRATIVE, 11, POINT_TYPE, POLYGON_WITH_CENTER_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"place\", \"island\", ADMINISTRATIVE, 12, POINT_TYPE, POLYGON_WITH_CENTER_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\r\n\t\tregister(\"boundary\", \"administrative\", ADMINISTRATIVE, 15, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"boundary\", \"civil\", ADMINISTRATIVE, 16, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"boundary\", \"political\", ADMINISTRATIVE, 17, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"boundary\", \"maritime\", ADMINISTRATIVE, 18, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"boundary\", \"national_park\", ADMINISTRATIVE, 19, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"boundary\", \"protected_area\", ADMINISTRATIVE, 20, POLYLINE_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"addr:housenumber\", null, ADMINISTRATIVE, 21, POINT_TYPE); //$NON-NLS-1$\r\n\r\n\t\t\r\n\t\t\r\n\t// 27. sport\r\n\t\tregister(\"sport\", \"9pin\", SPORT, 1, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"10pin\", SPORT, 2, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"archery\", SPORT, 3, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"athletics\", SPORT, 4, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"australian_football\", SPORT, 5, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"baseball\", SPORT, 6, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"basketball\", SPORT, 7, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"beachvolleyball\", SPORT, 8, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"boules\", SPORT, 9, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"bowls\", SPORT, 10, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"canoe\", SPORT, 11, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"chess\", SPORT, 12, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"climbing\", SPORT, 13, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"cricket\", SPORT, 14, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"cricket_nets\", SPORT, 15, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"croquet\", SPORT, 16, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"cycling\", SPORT, 17, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"diving\", SPORT, 18, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"dog_racing\", SPORT, 19, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"equestrian\", SPORT, 20, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"football\", SPORT, 21, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"golf\", SPORT, 22, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"gymnastics\", SPORT, 23, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"hockey\", SPORT, 24, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"horse_racing\", SPORT, 25, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"ice_stock\", SPORT, 26, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"korfball\", SPORT, 27, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"motor\", SPORT, 28, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"multi\", SPORT, 29, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"orienteering\", SPORT, 30, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"paddle_tennis\", SPORT, 31, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"paragliding\", SPORT, 32, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"pelota\", SPORT, 33, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"racquet\", SPORT, 34, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"rowing\", SPORT, 35, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"rugby\", SPORT, 36, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"shooting\", SPORT, 37, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"skating\", SPORT, 38, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"skateboard\", SPORT, 39, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"skiing\", SPORT, 40, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"soccer\", SPORT, 41, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"swimming\", SPORT, 42, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"table_tennis\", SPORT, 43, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"team_handball\", SPORT, 44, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"tennis\", SPORT, 45, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"toboggan\", SPORT, 46, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tregister(\"sport\", \"volleyball\", SPORT, 47, POINT_TYPE); //$NON-NLS-1$ //$NON-NLS-2$\t\t\r\n\t}","commit_id":"19f0a808c875243d03dd568c67860246bc1c520f","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private void drawPolyline(MapRenderObject obj, Canvas canvas, double leftTileX, double topTileY, int zoom, float rotate) {\r\n\t\tif(obj.getPointsLength() == 0){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tPath path = null;\r\n\t\tfloat pathRotate = 0;\r\n\t\tfloat xLength = 0;\r\n\t\tfloat yLength = 0;\r\n\t\t\r\n\t\t\r\n\t\tPaint paint = paintStroke;\r\n\t\tint type = MapRenderingTypes.getObjectType(obj.getType());\r\n\t\tint subtype = MapRenderingTypes.getPolylineSubType(obj.getType());\r\n\t\t\r\n\t\tboolean showText = true;\r\n\t\tboolean showLine = true;\r\n\t\tpaint.setPathEffect(null);\r\n\t\tpaint.setShadowLayer(0, 0, 0, 0);\r\n\t\tif (type == MapRenderingTypes.HIGHWAY) {\r\n\t\t\tint hwType = subtype;\r\n\t\t\tboolean carRoad = true;\r\n\t\t\tif (hwType == MapRenderingTypes.PL_HW_TRUNK) {\r\n\t\t\t\tpaint.setColor(clTrunkRoad);\r\n\t\t\t} else if (hwType == MapRenderingTypes.PL_HW_MOTORWAY) {\r\n\t\t\t\tpaint.setColor(clMotorwayRoad);\r\n\t\t\t} else if (hwType == MapRenderingTypes.PL_HW_PRIMARY) {\r\n\t\t\t\tpaint.setColor(clPrimaryRoad);\r\n\t\t\t} else if (hwType == MapRenderingTypes.PL_HW_SECONDARY) {\r\n\t\t\t\tpaint.setColor(clSecondaryRoad);\r\n\t\t\t} else if (hwType == MapRenderingTypes.PL_HW_TERTIARY) {\r\n\t\t\t\tpaint.setColor(clTertiaryRoad);\r\n\t\t\t\tpaint.setShadowLayer(2, 0, 0, Color.rgb(186, 186, 186));\r\n\t\t\t} else if (hwType == MapRenderingTypes.PL_HW_SERVICE || hwType == MapRenderingTypes.PL_HW_UNCLASSIFIED\r\n\t\t\t\t\t|| hwType == MapRenderingTypes.PL_HW_RESIDENTIAL) {\r\n\t\t\t\tpaint.setShadowLayer(1, 0, 0, Color.rgb(194, 194, 194));\r\n\t\t\t\tpaint.setColor(clRoadColor);\r\n\t\t\t} else if (hwType == MapRenderingTypes.PL_HW_PEDESTRIAN) {\r\n\t\t\t\tpaint.setShadowLayer(1, 0, 0, Color.rgb(176, 176, 176));\r\n\t\t\t\tpaint.setColor(Color.rgb(236, 236, 236));\r\n\t\t\t} else {\r\n\t\t\t\tcarRoad = false;\r\n\t\t\t\tpaint.setStrokeWidth(2);\r\n\t\t\t\tpaint.setPathEffect(pedestrianPathEffect);\r\n\t\t\t\tif (hwType == MapRenderingTypes.PL_HW_TRACK || hwType == MapRenderingTypes.PL_HW_PATH) {\r\n\t\t\t\t\tpaint.setColor(clTrackRoad);\r\n\t\t\t\t\tpaint.setPathEffect(trackPathEffect);\r\n\t\t\t\t} else if (hwType == MapRenderingTypes.PL_HW_CYCLEWAY || hwType == MapRenderingTypes.PL_HW_BRIDLEWAY) {\r\n\t\t\t\t\tpaint.setColor(clCycleWayRoad);\r\n\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\t\r\n\t\t\t\t\tpaint.setColor(clPedestrianRoad);\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (carRoad) {\r\n\t\t\t\tif (zoom < 16) {\r\n\t\t\t\t\tpaint.setStrokeWidth(6);\r\n\t\t\t\t} else if (zoom == 16) {\r\n\t\t\t\t\tpaint.setStrokeWidth(7);\r\n\t\t\t\t} else if (zoom == 17) {\r\n\t\t\t\t\tpaint.setStrokeWidth(11);\r\n\t\t\t\t} else if (zoom >= 18) {\r\n\t\t\t\t\tpaint.setStrokeWidth(16);\r\n\t\t\t\t}\r\n\t\t\t\tif (hwType == MapRenderingTypes.PL_HW_SERVICE) {\r\n\t\t\t\t\tpaint.setStrokeWidth(paint.getStrokeWidth() - 2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tshowText = carRoad || zoom > 16;\r\n\t\t} else if(type == MapRenderingTypes.BARRIER){\r\n\t\t\tshowLine = zoom > 16;\t\r\n//\t\t\tif(subtype == 2){\r\n\t\t\tpaint.setColor(Color.rgb(137, 136, 132));\r\n//\t\t\t}\r\n\t\t\tpaint.setStrokeWidth(1);\r\n\t\t} else if(type == MapRenderingTypes.RAILWAY){\r\n\t\t\tpaint.setStrokeWidth(2);\r\n\t\t\tif(subtype == 6){\r\n\t\t\t\tpaint.setColor(Color.rgb(153, 153, 153));\r\n\t\t\t\tif(zoom > 16){\r\n\t\t\t\t\tpaint.setStrokeWidth(3);\r\n\t\t\t\t}\r\n\t\t\t\tpaint.setPathEffect(subwayPathEffect);\r\n\t\t\t} else if(subtype == 2){\r\n\t\t\t\tpaint.setColor(Color.rgb(62, 62, 62));\r\n\t\t\t} else if(subtype == 1){\r\n\t\t\t\tpaint.setColor(Color.rgb(153, 153, 153));\r\n\t\t\t\tif(zoom >= 16){\r\n\t\t\t\t\tpaint.setStrokeWidth(3);\r\n\t\t\t\t}\r\n\t\t\t\tpaint.setPathEffect(railwayPathEffect);\r\n\t\t\t} else {\r\n\t\t\t\tpaint.setColor(Color.rgb(153, 153, 153));\r\n\t\t\t}\r\n\t\t} else if(type == MapRenderingTypes.WATERWAY){\r\n\t\t\tif(subtype >= 1 && subtype <= 6){\r\n\t\t\t\tpaint.setColor(Color.rgb(181, 208, 208));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tpaint.setColor(Color.BLACK);\r\n\t\t\tpaint.setStrokeWidth(1);\r\n\t\t}\r\n\t\t\r\n\t\tif(!showLine){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tboolean inverse = false;\r\n\t\tfloat xPrev = 0;\r\n\t\tfloat yPrev = 0;\r\n\t\tint middle = obj.getPointsLength() / 2;\r\n\t\tfor (int i = 0; i < obj.getPointsLength(); i++) {\r\n\t\t\tfloat lon = obj.getPointLongitude(i);\r\n\t\t\tfloat lat = obj.getPointLatitude(i);\r\n\t\t\tPointF p = calcPoint(leftTileX, topTileY, lat, lon, zoom, rotate);\r\n\t\t\tif (path == null) {\r\n\t\t\t\tpath = new Path();\r\n\t\t\t\tpath.moveTo(p.x, p.y);\r\n\t\t\t} else {\r\n\t\t\t\txLength += p.x - xPrev; // not abs\r\n\t\t\t\tyLength += p.y - yPrev; // not abs\r\n\t\t\t\tif(i == middle){\r\n\t\t\t\t\tdouble rot = - Math.atan2(p.x - xPrev, p.y - yPrev) * 180 / Math.PI;\r\n\t\t\t\t\tif (rot < 0) {\r\n\t\t\t\t\t\trot += 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (rot < 180) {\r\n\t\t\t\t\t\trot += 180;\r\n\t\t\t\t\t\tinverse = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpathRotate = (float) rot;\r\n\t\t\t\t}\r\n\t\t\t\tif (pathRotate == 0) {\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tpath.lineTo(p.x, p.y);\r\n\t\t\t}\r\n\t\t\txPrev = p.x;\r\n\t\t\tyPrev = p.y;\r\n\t\t}\r\n\t\tif (path != null) {\r\n\t\t\tcanvas.drawPath(path, paint);\r\n\t\t\tif (obj.getName() != null && showText) {\r\n\t\t\t\t\r\n\t\t\t\tif (paintText.measureText(obj.getName()) < Math.max(Math.abs(xLength), Math.abs(yLength))) {\r\n\t\t\t\t\tif (inverse) {\r\n\t\t\t\t\t\tpath.rewind();\r\n\t\t\t\t\t\tboolean st = true;\r\n\t\t\t\t\t\tfor (int i = obj.getPointsLength() - 1; i >= 0; i--) {\r\n\t\t\t\t\t\t\tfloat lon = obj.getPointLongitude(i);\r\n\t\t\t\t\t\t\tfloat lat = obj.getPointLatitude(i);\r\n\t\t\t\t\t\t\tPointF p = calcPoint(leftTileX, topTileY, lat, lon, zoom, rotate);\r\n\t\t\t\t\t\t\tif (st) {\r\n\t\t\t\t\t\t\t\tst = false;\r\n\t\t\t\t\t\t\t\tpath.moveTo(p.x, p.y);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tpath.lineTo(p.x, p.y);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tcanvas.drawTextOnPath(obj.getName(), path, 0, 0, paintText);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}","id":46370,"modified_method":"private void drawPolyline(MapRenderObject obj, Canvas canvas, double leftTileX, double topTileY, int zoom, float rotate) {\r\n\t\tif(obj.getPointsLength() == 0){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tPath path = null;\r\n\t\tfloat pathRotate = 0;\r\n\t\tfloat xLength = 0;\r\n\t\tfloat yLength = 0;\r\n\t\t\r\n\t\t\r\n\t\tPaint paint = paintStroke;\r\n\t\tint type = MapRenderingTypes.getObjectType(obj.getType());\r\n\t\tint subtype = MapRenderingTypes.getPolylineSubType(obj.getType());\r\n\t\t\r\n\t\tboolean showText = true;\r\n\t\tboolean showLine = true;\r\n\t\tpaint.setPathEffect(null);\r\n\t\tpaint.setShadowLayer(0, 0, 0, 0);\r\n\t\tpaint.setColor(Color.BLACK);\r\n\t\tpaint.setStrokeWidth(1);\r\n\t\t\r\n\t\tif (type == MapRenderingTypes.HIGHWAY) {\r\n\t\t\tint hwType = subtype;\r\n\t\t\tboolean carRoad = true;\r\n\t\t\tif (hwType == MapRenderingTypes.PL_HW_TRUNK) {\r\n\t\t\t\tpaint.setColor(clTrunkRoad);\r\n\t\t\t} else if (hwType == MapRenderingTypes.PL_HW_MOTORWAY) {\r\n\t\t\t\tpaint.setColor(clMotorwayRoad);\r\n\t\t\t} else if (hwType == MapRenderingTypes.PL_HW_PRIMARY) {\r\n\t\t\t\tpaint.setColor(clPrimaryRoad);\r\n\t\t\t} else if (hwType == MapRenderingTypes.PL_HW_SECONDARY) {\r\n\t\t\t\tpaint.setColor(clSecondaryRoad);\r\n\t\t\t} else if (hwType == MapRenderingTypes.PL_HW_TERTIARY) {\r\n\t\t\t\tpaint.setColor(clTertiaryRoad);\r\n\t\t\t\tpaint.setShadowLayer(2, 0, 0, Color.rgb(186, 186, 186));\r\n\t\t\t} else if (hwType == MapRenderingTypes.PL_HW_SERVICE || hwType == MapRenderingTypes.PL_HW_UNCLASSIFIED\r\n\t\t\t\t\t|| hwType == MapRenderingTypes.PL_HW_RESIDENTIAL) {\r\n\t\t\t\tpaint.setShadowLayer(1, 0, 0, Color.rgb(194, 194, 194));\r\n\t\t\t\tpaint.setColor(clRoadColor);\r\n\t\t\t} else if (hwType == MapRenderingTypes.PL_HW_PEDESTRIAN) {\r\n\t\t\t\tpaint.setShadowLayer(1, 0, 0, Color.rgb(176, 176, 176));\r\n\t\t\t\tpaint.setColor(Color.rgb(236, 236, 236));\r\n\t\t\t} else {\r\n\t\t\t\tcarRoad = false;\r\n\t\t\t\tpaint.setStrokeWidth(2);\r\n\t\t\t\tpaint.setPathEffect(pedestrianPathEffect);\r\n\t\t\t\tif (hwType == MapRenderingTypes.PL_HW_TRACK || hwType == MapRenderingTypes.PL_HW_PATH) {\r\n\t\t\t\t\tpaint.setColor(clTrackRoad);\r\n\t\t\t\t\tpaint.setPathEffect(trackPathEffect);\r\n\t\t\t\t} else if (hwType == MapRenderingTypes.PL_HW_CYCLEWAY || hwType == MapRenderingTypes.PL_HW_BRIDLEWAY) {\r\n\t\t\t\t\tpaint.setColor(clCycleWayRoad);\r\n\t\t\t\t\r\n\t\t\t\t} else {\r\n\t\t\t\t\tpaint.setColor(clPedestrianRoad);\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (carRoad) {\r\n\t\t\t\tif (zoom < 16) {\r\n\t\t\t\t\tpaint.setStrokeWidth(6);\r\n\t\t\t\t} else if (zoom == 16) {\r\n\t\t\t\t\tpaint.setStrokeWidth(7);\r\n\t\t\t\t} else if (zoom == 17) {\r\n\t\t\t\t\tpaint.setStrokeWidth(11);\r\n\t\t\t\t} else if (zoom >= 18) {\r\n\t\t\t\t\tpaint.setStrokeWidth(16);\r\n\t\t\t\t}\r\n\t\t\t\tif (hwType == MapRenderingTypes.PL_HW_SERVICE) {\r\n\t\t\t\t\tpaint.setStrokeWidth(paint.getStrokeWidth() - 2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tshowText = carRoad || zoom > 16;\r\n\t\t} else if(type == MapRenderingTypes.BARRIER){\r\n\t\t\tshowLine = zoom > 16;\t\r\n//\t\t\tif(subtype == 2){\r\n\t\t\tpaint.setColor(Color.rgb(137, 136, 132));\r\n//\t\t\t}\r\n\t\t\tpaint.setStrokeWidth(1);\r\n\t\t} else if(type == MapRenderingTypes.RAILWAY){\r\n\t\t\tpaint.setStrokeWidth(2);\r\n\t\t\tif(subtype == 6){\r\n\t\t\t\tpaint.setColor(Color.rgb(153, 153, 153));\r\n\t\t\t\tif(zoom > 16){\r\n\t\t\t\t\tpaint.setStrokeWidth(3);\r\n\t\t\t\t}\r\n\t\t\t\tpaint.setPathEffect(subwayPathEffect);\r\n\t\t\t} else if(subtype == 2){\r\n\t\t\t\tpaint.setColor(Color.rgb(62, 62, 62));\r\n\t\t\t} else if(subtype == 1){\r\n\t\t\t\tpaint.setColor(Color.rgb(153, 153, 153));\r\n\t\t\t\tif(zoom >= 16){\r\n\t\t\t\t\tpaint.setStrokeWidth(3);\r\n\t\t\t\t}\r\n\t\t\t\tpaint.setPathEffect(railwayPathEffect);\r\n\t\t\t} else {\r\n\t\t\t\tpaint.setColor(Color.rgb(153, 153, 153));\r\n\t\t\t}\r\n\t\t} else if(type == MapRenderingTypes.WATERWAY){\r\n\t\t\tif(subtype >= 1 && subtype <= 6){\r\n\t\t\t\tpaint.setStrokeWidth(2);\r\n\t\t\t\tpaint.setColor(Color.rgb(181, 208, 208));\r\n\t\t\t}\r\n\t\t} \r\n\t\t\r\n\t\tif(!showLine){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tboolean inverse = false;\r\n\t\tfloat xPrev = 0;\r\n\t\tfloat yPrev = 0;\r\n\t\tint middle = obj.getPointsLength() / 2;\r\n\t\tfor (int i = 0; i < obj.getPointsLength(); i++) {\r\n\t\t\tfloat lon = obj.getPointLongitude(i);\r\n\t\t\tfloat lat = obj.getPointLatitude(i);\r\n\t\t\tPointF p = calcPoint(leftTileX, topTileY, lat, lon, zoom, rotate);\r\n\t\t\tif (path == null) {\r\n\t\t\t\tpath = new Path();\r\n\t\t\t\tpath.moveTo(p.x, p.y);\r\n\t\t\t} else {\r\n\t\t\t\txLength += p.x - xPrev; // not abs\r\n\t\t\t\tyLength += p.y - yPrev; // not abs\r\n\t\t\t\tif(i == middle){\r\n\t\t\t\t\tdouble rot = - Math.atan2(p.x - xPrev, p.y - yPrev) * 180 / Math.PI;\r\n\t\t\t\t\tif (rot < 0) {\r\n\t\t\t\t\t\trot += 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (rot < 180) {\r\n\t\t\t\t\t\trot += 180;\r\n\t\t\t\t\t\tinverse = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpathRotate = (float) rot;\r\n\t\t\t\t}\r\n\t\t\t\tif (pathRotate == 0) {\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\tpath.lineTo(p.x, p.y);\r\n\t\t\t}\r\n\t\t\txPrev = p.x;\r\n\t\t\tyPrev = p.y;\r\n\t\t}\r\n\t\tif (path != null) {\r\n\t\t\tcanvas.drawPath(path, paint);\r\n\t\t\tif (obj.getName() != null && showText) {\r\n\t\t\t\t\r\n\t\t\t\tif (paintText.measureText(obj.getName()) < Math.max(Math.abs(xLength), Math.abs(yLength))) {\r\n\t\t\t\t\tif (inverse) {\r\n\t\t\t\t\t\tpath.rewind();\r\n\t\t\t\t\t\tboolean st = true;\r\n\t\t\t\t\t\tfor (int i = obj.getPointsLength() - 1; i >= 0; i--) {\r\n\t\t\t\t\t\t\tfloat lon = obj.getPointLongitude(i);\r\n\t\t\t\t\t\t\tfloat lat = obj.getPointLatitude(i);\r\n\t\t\t\t\t\t\tPointF p = calcPoint(leftTileX, topTileY, lat, lon, zoom, rotate);\r\n\t\t\t\t\t\t\tif (st) {\r\n\t\t\t\t\t\t\t\tst = false;\r\n\t\t\t\t\t\t\t\tpath.moveTo(p.x, p.y);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tpath.lineTo(p.x, p.y);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tcanvas.drawTextOnPath(obj.getName(), path, 0, 2, paintText);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}","commit_id":"19f0a808c875243d03dd568c67860246bc1c520f","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private PointF drawPolygon(MapRenderObject obj, Canvas canvas, double leftTileX, double topTileY, int zoom, float rotate) {\r\n\t\tPaint paint = paintFill;\r\n\t\tfloat xText = 0;\r\n\t\tfloat yText = 0;\r\n\t\tPath path = null;\r\n\t\tint type = MapRenderingTypes.getObjectType(obj.getType());\r\n\t\tint subtype = MapRenderingTypes.getPolygonSubType(obj.getType());\r\n\t\tint color = Color.LTGRAY;\r\n\t\tif (type == MapRenderingTypes.MAN_MADE) {\r\n\t\t\tif (subtype == MapRenderingTypes.SUBTYPE_BUILDING) {\r\n\t\t\t\tcolor = Color.rgb(188, 169, 169);\r\n\t\t\t} else if (subtype == MapRenderingTypes.SUBTYPE_GARAGES) {\r\n\t\t\t\tcolor = Color.rgb(221, 221, 221);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} else if (type == MapRenderingTypes.WATERWAY) {\r\n\t\t\tif(subtype == 3){\r\n\t\t\t\tcolor = Color.rgb(181, 208, 208);\r\n\t\t\t}\r\n\t\t} else if (type == MapRenderingTypes.AMENITY_TRANSPORTATION) {\r\n\t\t\tif (subtype == 1 || subtype == 2) {\r\n\t\t\t\tcolor = Color.rgb(246, 238, 183);\r\n\t\t\t}\r\n\t\t} else if (type == MapRenderingTypes.AMENITY_ENTERTAINMENT) {\r\n\t\t\tif (subtype == 3) {\r\n\t\t\t\tcolor = Color.rgb(204, 153, 153);\r\n\t\t\t}\r\n\t\t} else if (type == MapRenderingTypes.AMENITY_EDUCATION) {\r\n\t\t\tif(subtype == 2 || subtype == 3 || subtype == 5){\r\n\t\t\t\tcolor = Color.rgb(240, 240, 216);\r\n\t\t\t} else {\r\n\t\t\t\t// draw as building education\r\n\t\t\t\tcolor = Color.rgb(188, 169, 169);\r\n\t\t\t}\r\n\t\t} else if (type == MapRenderingTypes.LEISURE) {\r\n\t\t\tswitch (subtype) {\r\n\t\t\tcase 4:\r\n\t\t\t\tcolor = Color.rgb(51, 204, 153);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 12:\r\n\t\t\t\tcolor = Color.rgb(206, 246, 202);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t} else if (type == MapRenderingTypes.LANDUSE) {\r\n\t\t\tswitch (subtype) {\r\n\t\t\tcase 5:\r\n\t\t\t\tcolor = Color.rgb(239, 200, 200);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 12:\r\n\t\t\t\tcolor = Color.rgb(207, 236, 168);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 15:\r\n\t\t\t\tcolor = Color.rgb(223, 209, 214);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\t\t\r\n\t\tpaint.setColor(color);\r\n\t\t\r\n\t\tfor (int i = 0; i < obj.getPointsLength(); i++) {\r\n\t\t\tfloat lon = obj.getPointLongitude(i);\r\n\t\t\tfloat lat = obj.getPointLatitude(i);\r\n\t\t\tPointF p = calcPoint(leftTileX, topTileY, lat, lon, zoom, rotate);\r\n\t\t\txText += p.x;\r\n\t\t\tyText += p.y;\r\n\t\t\tif (path == null) {\r\n\t\t\t\tpath = new Path();\r\n\t\t\t\tpath.moveTo(p.x, p.y);\r\n\t\t\t} else {\r\n\t\t\t\tpath.lineTo(p.x, p.y);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (path != null) {\r\n\t\t\txText /= obj.getPointsLength();\r\n\t\t\tyText /= obj.getPointsLength();\r\n\t\t\tcanvas.drawPath(path, paint);\r\n\t\t\tString name = obj.getName();\r\n\t\t\tif(name != null){\r\n\t\t\t\t\r\n\t\t\t\tboolean accept = zoom > 17;\r\n\t\t\t\tif(zoom > 15){\r\n\t\t\t\t\taccept = name.length() < 4; \r\n\t\t\t\t} else if(zoom > 16){\r\n\t\t\t\t\taccept = name.length() < 8;\r\n\t\t\t\t}\r\n\t\t\t\tif(accept){\r\n\t\t\t\t\tcanvas.drawText(name, xText, yText, paintText);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn new PointF(xText, yText);\r\n\t\t}\r\n\t\treturn null;\r\n\t}","id":46371,"modified_method":"private PointF drawPolygon(MapRenderObject obj, Canvas canvas, double leftTileX, double topTileY, int zoom, float rotate) {\r\n\t\tPaint paint = paintFill;\r\n\t\tfloat xText = 0;\r\n\t\tfloat yText = 0;\r\n\t\tPath path = null;\r\n\t\tint type = MapRenderingTypes.getObjectType(obj.getType());\r\n\t\tint subtype = MapRenderingTypes.getPolygonSubType(obj.getType());\r\n\t\tint color = Color.WHITE;\r\n\t\tint colorAround = 0;\r\n\t\tShader shader = null;\r\n\t\tif (type == MapRenderingTypes.MAN_MADE) {\r\n\t\t\tif (subtype == MapRenderingTypes.SUBTYPE_BUILDING) {\r\n\t\t\t\tcolor = Color.rgb(188, 169, 169);\r\n\t\t\t} else if (subtype == MapRenderingTypes.SUBTYPE_GARAGES) {\r\n\t\t\t\tcolor = Color.rgb(221, 221, 221);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} else if (type == MapRenderingTypes.WATERWAY) {\r\n\t\t\tif(subtype == 3){\r\n\t\t\t\tcolor = Color.rgb(181, 208, 208);\r\n\t\t\t}\r\n\t\t} else if (type == MapRenderingTypes.HIGHWAY) {\r\n\t\t\tif (subtype == MapRenderingTypes.PL_HW_SERVICE || subtype == MapRenderingTypes.PL_HW_UNCLASSIFIED\r\n\t\t\t\t|| subtype == MapRenderingTypes.PL_HW_RESIDENTIAL) {\r\n\t\t\t\tcolorAround = Color.rgb(194, 194, 194);\r\n\t\t\t\tcolor = clRoadColor;\r\n\t\t\t} else if(subtype == MapRenderingTypes.PL_HW_PEDESTRIAN || subtype == MapRenderingTypes.PL_HW_FOOTWAY){\r\n\t\t\t\tcolor = Color.rgb(236, 236, 236);\r\n\t\t\t\tcolorAround = Color.rgb(176, 176, 176);\r\n\t\t\t}\r\n\t\t} else if (type == MapRenderingTypes.TOURISM) {\r\n\t\t\tif (subtype == 2) {\r\n\t\t\t\tcolor = Color.rgb(204, 153, 153);\r\n\t\t\t} else if(subtype == 8){\r\n\t\t\t\tshader = getShader(R.drawable.h_zoo);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} else if (type == MapRenderingTypes.NATURAL) {\r\n\t\t\tif(subtype == 23){\r\n\t\t\t\tcolor = Color.rgb(114, 191, 129);\r\n\t\t\t} else if(subtype == 2){\r\n\t\t\t\tcolor = Color.rgb(238, 204, 85);\r\n\t\t\t} else if(subtype == 21 || subtype == 5){\r\n\t\t\t\tcolor = Color.rgb(181, 214, 241);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} else if (type == MapRenderingTypes.LANDUSE) {\r\n\t\t\tswitch (subtype) {\r\n\t\t\tcase 1:\r\n\t\t\t\tcolor = Color.rgb(189, 227, 203);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\tcase 22:\r\n\t\t\t\tcolor = Color.rgb(180, 213, 240);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tcolor = Color.rgb(235, 215, 254);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\tshader = getShader(R.drawable.h_grave_yard);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5:\r\n\t\t\t\tcolor = Color.rgb(239, 200, 200);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 6:\r\n\t\t\t\tcolor = Color.rgb(157, 157, 108);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 10:\r\n\t\t\t\tshader = getShader(R.drawable.h_forest);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 12:\r\n\t\t\t\tcolor = Color.rgb(207, 236, 168);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 15:\r\n\t\t\t\tcolor = Color.rgb(223, 209, 214);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 23:\r\n\t\t\t\tcolor = Color.rgb(221, 221, 221);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 24:\r\n\t\t\t\tcolor = Color.rgb(254, 234, 234);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 27:\r\n\t\t\t\tshader = getShader(R.drawable.h_vineyard);\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\t\t} else if (type == MapRenderingTypes.LEISURE) {\r\n\t\t\tcolorAround = Color.rgb(147, 207, 170);\r\n\t\t\tswitch (subtype) {\r\n\t\t\tcase 2:\r\n\t\t\t\tcolor = Color.rgb(189, 227, 203);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\tcase 14:\r\n\t\t\tcase 15:\r\n\t\t\t\tcolor = Color.rgb(199, 241, 163);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 6:\r\n\t\t\t\tcolor = Color.rgb(137, 210, 174);\r\n\t\t\tcase 4:\r\n\t\t\t\tcolor = Color.rgb(51, 204, 153);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5:\r\n\t\t\t\tcolor = Color.rgb(189, 207, 203);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 12:\r\n\t\t\t\tcolor = Color.rgb(206, 246, 202);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 13:\r\n\t\t\t\tcolor = Color.rgb(204, 255, 241);\r\n\t\t\t\tbreak;\r\n\t\t\tcase 11:\r\n\t\t\t\tshader = getShader(R.drawable.h_nr);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} else if (type == MapRenderingTypes.AMENITY_HEALTHCARE) {\r\n\t\t\tif (subtype == 2) {\r\n\t\t\t\tcolor = Color.rgb(240, 240, 216);\r\n\t\t\t\tcolorAround = Color.rgb(212, 168, 158);\r\n\t\t\t}\r\n\t\t} else if (type == MapRenderingTypes.AMENITY_TRANSPORTATION) {\r\n\t\t\tif (subtype == 1 || subtype == 2) {\r\n\t\t\t\tcolor = Color.rgb(246, 238, 183);\r\n\t\t\t}\r\n\t\t} else if (type == MapRenderingTypes.AMENITY_ENTERTAINMENT) {\r\n\t\t\tif (subtype == 3) {\r\n\t\t\t\tcolor = Color.rgb(204, 153, 153);\r\n\t\t\t}\r\n\t\t} else if (type == MapRenderingTypes.AMENITY_EDUCATION) {\r\n\t\t\tif(subtype == 2 || subtype == 3 || subtype == 5){\r\n\t\t\t\tcolor = Color.rgb(240, 240, 216);\r\n\t\t\t\tcolorAround = Color.rgb(212, 168, 158);\r\n\t\t\t} else {\r\n\t\t\t\t// draw as building education\r\n\t\t\t\tcolor = Color.rgb(188, 169, 169);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\t\r\n\t\tpaint.setColor(color);\r\n\t\tfor (int i = 0; i < obj.getPointsLength(); i++) {\r\n\t\t\tfloat lon = obj.getPointLongitude(i);\r\n\t\t\tfloat lat = obj.getPointLatitude(i);\r\n\t\t\tPointF p = calcPoint(leftTileX, topTileY, lat, lon, zoom, rotate);\r\n\t\t\txText += p.x;\r\n\t\t\tyText += p.y;\r\n\t\t\tif (path == null) {\r\n\t\t\t\tpath = new Path();\r\n\t\t\t\tpath.moveTo(p.x, p.y);\r\n\t\t\t} else {\r\n\t\t\t\tpath.lineTo(p.x, p.y);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (path != null) {\r\n\t\t\txText /= obj.getPointsLength();\r\n\t\t\tyText /= obj.getPointsLength();\r\n\t\t\tpaint.setShader(shader);\r\n\t\t\tcanvas.drawPath(path, paint);\r\n\t\t\tif(colorAround != 0){\r\n\t\t\t\tpaintStroke.setColor(colorAround);\r\n\t\t\t\tpaintStroke.setStrokeWidth(1);\r\n\t\t\t\tcanvas.drawPath(path, paintStroke);\r\n\t\t\t}\r\n\t\t\tString name = obj.getName();\r\n\t\t\tif(name != null){\r\n\t\t\t\t\r\n\t\t\t\tboolean accept = zoom > 17;\r\n\t\t\t\tif(zoom > 15){\r\n\t\t\t\t\taccept = name.length() < 4; \r\n\t\t\t\t} else if(zoom > 16){\r\n\t\t\t\t\taccept = name.length() < 8;\r\n\t\t\t\t}\r\n\t\t\t\tif(accept){\r\n\t\t\t\t\tcanvas.drawText(name, xText, yText, paintText);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn new PointF(xText, yText);\r\n\t\t}\r\n\t\treturn null;\r\n\t}","commit_id":"19f0a808c875243d03dd568c67860246bc1c520f","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public static int getPointBitmap(int zoom, int type, int subType) {\r\n\t\tint resId = 0;\r\n\t\tif(type == MapRenderingTypes.HIGHWAY){\r\n\t\t\tif (zoom > 16) {\r\n\t\t\t\tif(subType == 38){\r\n\t\t\t\t\tresId = R.drawable.h_traffic_light;\r\n\t\t\t\t} else if(subType == 40){\r\n\t\t\t\t\tresId = R.drawable.h_bus_stop;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} else if(type == MapRenderingTypes.SHOP){\r\n\t\t\tif (zoom > 15) {\r\n\t\t\t\tswitch (subType) {\r\n\t\t\t\tcase 27:\r\n\t\t\t\tcase 65:\r\n\t\t\t\tcase 53:\r\n\t\t\t\t\tresId = R.drawable.h_shop_supermarket;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 13:\r\n\t\t\t\t\tresId = R.drawable.h_shop_clothes;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 31:\r\n\t\t\t\t\tresId = R.drawable.h_shop_hairdresser;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (zoom > 16) {\r\n\t\t\t\tswitch (subType) {\r\n\t\t\t\tcase 48:\r\n\t\t\t\t\tresId = R.drawable.h_shop_butcher;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 42:\r\n\t\t\t\t\tresId = R.drawable.h_shop_bakery;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 20:\r\n\t\t\t\t\tresId = R.drawable.h_shop_diy;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 16:\r\n\t\t\t\t\tresId = R.drawable.h_shop_convenience;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if(type == MapRenderingTypes.TOURISM){\r\n\t\t\tif (zoom > 15) {\r\n\t\t\t\tswitch (subType) {\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tresId = R.drawable.h_camp_site;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tresId = R.drawable.h_caravan_park;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\tresId = R.drawable.h_camp_site; // picnic\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 9:\r\n\t\t\t\t\tresId = R.drawable.h_alpinehut;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 10:\r\n\t\t\t\tcase 11:\r\n\t\t\t\t\tresId = R.drawable.h_guest_house;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 12:\r\n\t\t\t\tcase 14:\r\n\t\t\t\t\tresId = R.drawable.h_hostel;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 13:\r\n\t\t\t\t\tresId = R.drawable.h_hotel;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 15:\r\n\t\t\t\t\tresId = R.drawable.h_museum;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if(type == MapRenderingTypes.AMENITY_SUSTENANCE){\r\n\t\t\tif (zoom > 15) {\r\n\t\t\t\tswitch (subType) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tresId = R.drawable.h_restaurant;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tresId = R.drawable.h_cafe;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tresId = R.drawable.h_fast_food;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tresId = R.drawable.h_pub;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 7:\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\tresId = R.drawable.h_bar;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 8:\r\n\t\t\t\t\tresId = R.drawable.h_food_drinkingtap;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if(type == MapRenderingTypes.AMENITY_EDUCATION){\r\n\t\t\tif (zoom > 15){\r\n\t\t\t\tif(subType == 2){\r\n\t\t\t\t\tresId = R.drawable.h_school;\r\n\t\t\t\t} else if(subType == 4){\r\n\t\t\t\t\tresId = R.drawable.h_library;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (type == MapRenderingTypes.AMENITY_TRANSPORTATION) {\r\n\t\t\tif (subType == 1 || subType == 2) {\r\n\t\t\t\tresId = R.drawable.h_parking;\r\n\t\t\t} else if (subType == 4) {\r\n\t\t\t\tresId = R.drawable.h_fuel;\r\n\t\t\t} else if (subType == 18) {\r\n\t\t\t\tresId = R.drawable.h_bus_station;\r\n\t\t\t}\r\n\t\t} else if (type == MapRenderingTypes.AMENITY_FINANCE) {\r\n\t\t\tif (subType == 1) {\r\n\t\t\t\tif (zoom > 16) {\r\n\t\t\t\t\tresId = R.drawable.h_atm;\r\n\t\t\t\t}\r\n\t\t\t} else if (subType == 2) {\r\n\t\t\t\tif (zoom > 15) {\r\n\t\t\t\t\tresId = R.drawable.h_bank;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (type == MapRenderingTypes.AMENITY_HEALTHCARE) {\r\n\t\t\tif (subType == 1) {\r\n\t\t\t\tif (zoom > 15) {\r\n\t\t\t\t\tresId = R.drawable.h_pharmacy;\r\n\t\t\t\t}\r\n\t\t\t} else if (subType == 2) {\r\n\t\t\t\tresId = R.drawable.h_hospital;\r\n\t\t\t}\r\n\t\t} else if (type == MapRenderingTypes.AMENITY_ENTERTAINMENT) {\r\n\t\t\tif (zoom >= 15) {\r\n\t\t\t\tif (subType == 3) {\r\n\t\t\t\t\tresId = R.drawable.h_cinema;\r\n\t\t\t\t} else if(subType == 9) {\r\n\t\t\t\t\tresId = R.drawable.h_theatre;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if(type == MapRenderingTypes.AMENITY_OTHER){\r\n\t\t\tif (zoom > 16) {\r\n\t\t\t\tswitch (subType) {\r\n\t\t\t\tcase 10:\r\n\t\t\t\t\tresId = R.drawable.h_police;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 18:\r\n\t\t\t\t\tresId = R.drawable.h_toilets;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 15:\r\n\t\t\t\t\tresId = R.drawable.h_recycling;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 7:\r\n\t\t\t\t\tresId = R.drawable.h_embassy;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 8:\r\n\t\t\t\t\tresId = R.drawable.h_grave_yard;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 17:\r\n\t\t\t\t\tresId = R.drawable.h_telephone;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 11:\r\n\t\t\t\t\tresId = R.drawable.h_postbox;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 12:\r\n\t\t\t\t\tresId = R.drawable.h_postoffice;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn resId;\r\n\t}","id":46372,"modified_method":"public static int getPointBitmap(int zoom, int type, int subType) {\r\n\t\tint resId = 0;\r\n\t\tif(type == MapRenderingTypes.HIGHWAY){\r\n\t\t\tif (zoom > 16) {\r\n\t\t\t\tif(subType == 38){\r\n\t\t\t\t\tresId = R.drawable.h_traffic_light;\r\n\t\t\t\t} else if(subType == 40){\r\n\t\t\t\t\tresId = R.drawable.h_bus_stop;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} else if(type == MapRenderingTypes.SHOP){\r\n\t\t\tif (zoom > 15) {\r\n\t\t\t\tswitch (subType) {\r\n\t\t\t\tcase 27:\r\n\t\t\t\tcase 65:\r\n\t\t\t\t\tresId = R.drawable.h_shop_supermarket;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 17:\r\n\t\t\t\tcase 53:\r\n\t\t\t\t\tresId = R.drawable.h_department_store;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 13:\r\n\t\t\t\t\tresId = R.drawable.h_shop_clothes;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 31:\r\n\t\t\t\t\tresId = R.drawable.h_shop_hairdresser;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (zoom > 16) {\r\n\t\t\t\tswitch (subType) {\r\n\t\t\t\tcase 48:\r\n\t\t\t\t\tresId = R.drawable.h_shop_butcher;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 42:\r\n\t\t\t\t\tresId = R.drawable.h_shop_bakery;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 20:\r\n\t\t\t\t\tresId = R.drawable.h_shop_diy;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 16:\r\n\t\t\t\t\tresId = R.drawable.h_shop_convenience;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if(type == MapRenderingTypes.TOURISM){\r\n\t\t\tif (zoom > 15) {\r\n\t\t\t\tswitch (subType) {\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tresId = R.drawable.h_camp_site;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tresId = R.drawable.h_caravan_park;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\tresId = R.drawable.h_camp_site; // picnic\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 9:\r\n\t\t\t\t\tresId = R.drawable.h_alpinehut;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 10:\r\n\t\t\t\tcase 11:\r\n\t\t\t\t\tresId = R.drawable.h_guest_house;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 12:\r\n\t\t\t\tcase 14:\r\n\t\t\t\t\tresId = R.drawable.h_hostel;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 13:\r\n\t\t\t\t\tresId = R.drawable.h_hotel;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 15:\r\n\t\t\t\t\tresId = R.drawable.h_museum;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if(type == MapRenderingTypes.HISTORIC){\r\n\t\t\tif (zoom > 15) {\r\n\t\t\t\tif (subType == 6) {\r\n\t\t\t\t\tresId = R.drawable.h_memorial;\r\n\t\t\t\t} else if(zoom > 16){\r\n\t\t\t\t\t// something historic\r\n\t\t\t\t\tresId = R.drawable.h_view_point;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t} else if(type == MapRenderingTypes.EMERGENCY){\r\n\t\t\tif(zoom > 15){\r\n\t\t\t\tif(subType == 10){\r\n\t\t\t\t\tresId = R.drawable.h_firestation;\r\n\t\t\t\t} else if(subType == 7){\r\n\t\t\t\t\tresId = R.drawable.h_sosphone;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if(type == MapRenderingTypes.AMENITY_SUSTENANCE){\r\n\t\t\tif (zoom > 15) {\r\n\t\t\t\tswitch (subType) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tresId = R.drawable.h_restaurant;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tresId = R.drawable.h_cafe;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tresId = R.drawable.h_fast_food;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\tresId = R.drawable.h_pub;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 7:\r\n\t\t\t\tcase 6:\r\n\t\t\t\t\tresId = R.drawable.h_bar;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 8:\r\n\t\t\t\t\tresId = R.drawable.h_food_drinkingtap;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if(type == MapRenderingTypes.AMENITY_EDUCATION){\r\n\t\t\tif (zoom > 15){\r\n\t\t\t\tif(subType == 2){\r\n\t\t\t\t\tresId = R.drawable.h_school;\r\n\t\t\t\t} else if(subType == 4){\r\n\t\t\t\t\tresId = R.drawable.h_library;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (type == MapRenderingTypes.AMENITY_TRANSPORTATION) {\r\n\t\t\tif (subType == 1 || subType == 2) {\r\n\t\t\t\tresId = R.drawable.h_parking;\r\n\t\t\t} else if (subType == 4) {\r\n\t\t\t\tresId = R.drawable.h_fuel;\r\n\t\t\t} else if (subType == 18) {\r\n\t\t\t\tresId = R.drawable.h_bus_station;\r\n\t\t\t}\r\n\t\t} else if (type == MapRenderingTypes.AMENITY_FINANCE) {\r\n\t\t\tif (subType == 1) {\r\n\t\t\t\tif (zoom > 16) {\r\n\t\t\t\t\tresId = R.drawable.h_atm;\r\n\t\t\t\t}\r\n\t\t\t} else if (subType == 2) {\r\n\t\t\t\tif (zoom > 15) {\r\n\t\t\t\t\tresId = R.drawable.h_bank;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (type == MapRenderingTypes.AMENITY_HEALTHCARE) {\r\n\t\t\tif (subType == 1) {\r\n\t\t\t\tif (zoom > 15) {\r\n\t\t\t\t\tresId = R.drawable.h_pharmacy;\r\n\t\t\t\t}\r\n\t\t\t} else if (subType == 2) {\r\n\t\t\t\tresId = R.drawable.h_hospital;\r\n\t\t\t}\r\n\t\t} else if (type == MapRenderingTypes.AMENITY_ENTERTAINMENT) {\r\n\t\t\tif (zoom >= 15) {\r\n\t\t\t\tif (subType == 3) {\r\n\t\t\t\t\tresId = R.drawable.h_cinema;\r\n\t\t\t\t} else if(subType == 9) {\r\n\t\t\t\t\tresId = R.drawable.h_theatre;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if(type == MapRenderingTypes.AMENITY_OTHER){\r\n\t\t\tif (zoom > 16) {\r\n\t\t\t\tswitch (subType) {\r\n\t\t\t\tcase 10:\r\n\t\t\t\t\tresId = R.drawable.h_police;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 18:\r\n\t\t\t\t\tresId = R.drawable.h_toilets;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 15:\r\n\t\t\t\t\tresId = R.drawable.h_recycling;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 7:\r\n\t\t\t\t\tresId = R.drawable.h_embassy;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 8:\r\n\t\t\t\t\tresId = R.drawable.h_grave_yard;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 17:\r\n\t\t\t\t\tresId = R.drawable.h_telephone;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 11:\r\n\t\t\t\t\tresId = R.drawable.h_postbox;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 12:\r\n\t\t\t\t\tresId = R.drawable.h_postoffice;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn resId;\r\n\t}","commit_id":"19f0a808c875243d03dd568c67860246bc1c520f","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override protected String doInBackground(String... params) {\n\n            // Resample track, then analyse altitudes and set colours for each point\n\n            culled = resampleTrack(rs.getPoints(), segmentSize);\n            if (!isCancelled() && !culled.isEmpty()) {\n\n                int halfC = Algorithms.getRainbowColor(0.5);\n\n                // Calculate the absolutes of the altitude variations\n                Double max = Double.NEGATIVE_INFINITY;\n                Double min = Double.POSITIVE_INFINITY;\n                for (GPXUtilities.WptPt pt : culled) {\n                    max = Math.max(max, pt.ele);\n                    min = Math.min(min, pt.ele);\n                    pt.colourARGB = halfC;                  // default, in case there are no 'ele' in GPX\n                }\n\n                Double elevationRange = max - min;\n                if (elevationRange > 0)\n                    for (GPXUtilities.WptPt pt : culled)\n                        pt.colourARGB = Algorithms.getRainbowColor((pt.ele - min) / elevationRange);\n            }\n\n            return isCancelled() ? \"\" : \"OK\";\n        }","id":46373,"modified_method":"@Override protected String doInBackground(String... params) {\n\n            // Resample track, then analyse altitudes and set colours for each point\n\n            culled = resampleTrack(rs.points, segmentSize);\n            if (!isCancelled() && !culled.isEmpty()) {\n\n                int halfC = Algorithms.getRainbowColor(0.5);\n\n                // Calculate the absolutes of the altitude variations\n                Double max = Double.NEGATIVE_INFINITY;\n                Double min = Double.POSITIVE_INFINITY;\n                for (GPXUtilities.WptPt pt : culled) {\n                    max = Math.max(max, pt.ele);\n                    min = Math.min(min, pt.ele);\n                    pt.colourARGB = halfC;                  // default, in case there are no 'ele' in GPX\n                }\n\n                Double elevationRange = max - min;\n                if (elevationRange > 0)\n                    for (GPXUtilities.WptPt pt : culled)\n                        pt.colourARGB = Algorithms.getRainbowColor((pt.ele - min) / elevationRange);\n            }\n\n            return isCancelled() ? \"\" : \"OK\";\n        }","commit_id":"778a243cdf19aad0ff90d2e2988a5a40a6014304","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override protected String doInBackground(String... params) {\n            culled = resampleTrack(rs.getPoints(), segmentSize);\n            return isCancelled() ? \"\" : \"OK\";\n        }","id":46374,"modified_method":"@Override protected String doInBackground(String... params) {\n            culled = resampleTrack(rs.points, segmentSize);\n            return isCancelled() ? \"\" : \"OK\";\n        }","commit_id":"778a243cdf19aad0ff90d2e2988a5a40a6014304","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override protected String doInBackground(String... params) {\n\n            // Reduce the point-count of the GPX track using Ramer-Douglas-Peucker algorithm.\n\n            points = rs.getPoints();\n            int nsize = points.size();\n            if (nsize > 2) {\n                culled = new ArrayList<>();\n                survivor = new boolean[nsize];\n                cullRamerDouglasPeucer(0, nsize - 1);\n                if (!isCancelled()) {\n                    survivor[0] = true;\n                    for (int i = 0; i < survivor.length; i++)\n                        if (survivor[i]) {\n                            culled.add(points.get(i));\n                        }\n                }\n            } else { // make a copy of 0-1-2 point arrays\n                culled = new ArrayList<>();\n                for (GPXUtilities.WptPt pt : points) {\n                    culled.add(new GPXUtilities.WptPt(pt));\n                }\n            }\n            return isCancelled() ? \"\" : \"OK\";\n        }","id":46375,"modified_method":"@Override protected String doInBackground(String... params) {\n\n            // Reduce the point-count of the GPX track using Ramer-Douglas-Peucker algorithm.\n\n            points = rs.points;\n            int nsize = points.size();\n            if (nsize > 2) {\n                culled = new ArrayList<>();\n                survivor = new boolean[nsize];\n                cullRamerDouglasPeucer(0, nsize - 1);\n                if (!isCancelled()) {\n                    survivor[0] = true;\n                    for (int i = 0; i < survivor.length; i++)\n                        if (survivor[i]) {\n                            culled.add(points.get(i));\n                        }\n                }\n            } else { // make a copy of 0-1-2 point arrays\n                culled = new ArrayList<>();\n                for (GPXUtilities.WptPt pt : points) {\n                    culled.add(new GPXUtilities.WptPt(pt));\n                }\n            }\n            return isCancelled() ? \"\" : \"OK\";\n        }","commit_id":"778a243cdf19aad0ff90d2e2988a5a40a6014304","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override protected String doInBackground(String... params) {\n\n            // Resample track, then analyse speeds and set colours for each point\n\n            List<GPXUtilities.WptPt> points = rs.getPoints();\n            culled = resampleTrack(points, segmentSize);\n            if (!isCancelled() && !culled.isEmpty()) {\n\n                GPXUtilities.WptPt lastPt = points.get(0);\n                lastPt.speed = 0;\n\n                // calculate speeds using time:distance for each segment\n                for (int i = 1; i < points.size(); i++) {\n                    GPXUtilities.WptPt pt = points.get(i);\n                    double delta = pt.time - lastPt.time;\n                    if (delta > 0) {\n                        pt.speed = MapUtils.getDistance(pt.getLatitude(), pt.getLongitude(),\n                                lastPt.getLatitude(), lastPt.getLongitude()) / delta;\n                    } else {\n                        pt.speed = 0;        // GPX doesn't have time - this is OK, colour will be mid-range for whole track\n                    }\n                    lastPt = pt;\n                }\n\n                int halfC = Algorithms.getRainbowColor(0.5);\n\n                // Calculate the absolutes of the speed variations\n                Double max = Double.NEGATIVE_INFINITY;\n                Double min = Double.POSITIVE_INFINITY;\n                for (GPXUtilities.WptPt pt : points) {\n                    max = Math.max(max, pt.speed);\n                    min = Math.min(min, pt.speed);\n                    pt.colourARGB = halfC;                  // default, in case there are no 'time' in GPX\n                }\n                Double speedRange = max - min;\n                if (speedRange > 0) {\n                    for (GPXUtilities.WptPt pt : points)\n                        pt.colourARGB = Algorithms.getRainbowColor((pt.speed - min) / speedRange);\n                }\n            }\n            return isCancelled() ? \"\" : \"OK\";\n        }","id":46376,"modified_method":"@Override protected String doInBackground(String... params) {\n\n            // Resample track, then analyse speeds and set colours for each point\n\n            List<GPXUtilities.WptPt> points = rs.points;\n            culled = resampleTrack(points, segmentSize);\n            if (!isCancelled() && !culled.isEmpty()) {\n\n                GPXUtilities.WptPt lastPt = points.get(0);\n                lastPt.speed = 0;\n\n                // calculate speeds using time:distance for each segment\n                for (int i = 1; i < points.size(); i++) {\n                    GPXUtilities.WptPt pt = points.get(i);\n                    double delta = pt.time - lastPt.time;\n                    if (delta > 0) {\n                        pt.speed = MapUtils.getDistance(pt.getLatitude(), pt.getLongitude(),\n                                lastPt.getLatitude(), lastPt.getLongitude()) / delta;\n                    } else {\n                        pt.speed = 0;        // GPX doesn't have time - this is OK, colour will be mid-range for whole track\n                    }\n                    lastPt = pt;\n                }\n\n                int halfC = Algorithms.getRainbowColor(0.5);\n\n                // Calculate the absolutes of the speed variations\n                Double max = Double.NEGATIVE_INFINITY;\n                Double min = Double.POSITIVE_INFINITY;\n                for (GPXUtilities.WptPt pt : points) {\n                    max = Math.max(max, pt.speed);\n                    min = Math.min(min, pt.speed);\n                    pt.colourARGB = halfC;                  // default, in case there are no 'time' in GPX\n                }\n                Double speedRange = max - min;\n                if (speedRange > 0) {\n                    for (GPXUtilities.WptPt pt : points)\n                        pt.colourARGB = Algorithms.getRainbowColor((pt.speed - min) / speedRange);\n                }\n            }\n            return isCancelled() ? \"\" : \"OK\";\n        }","commit_id":"778a243cdf19aad0ff90d2e2988a5a40a6014304","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private void drawSelectedFilesSegments(Canvas canvas, RotatedTileBox tileBox,\n\t\t\tList<SelectedGpxFile> selectedGPXFiles, DrawSettings settings) {\n\t\tfor (SelectedGpxFile g : selectedGPXFiles) {\n\t\t\tList<TrkSegment> segments = g.getPointsToDisplay();\n\t\t\tfor (TrkSegment ts : segments) {\n\n\t\t\t\tif (ts.renders.isEmpty()\t\t\t\t// only do once (CODE HERE NEEDS TO BE UI INSTEAD)\n\t\t\t\t\t\t&& !ts.points.isEmpty()) {\t\t// hmmm. 0-point tracks happen, but.... how?\n\n\t\t\t\t\tif (g.isShowCurrentTrack()) {\n\t\t\t\t\t\tRenderable.StandardTrack st = new Renderable.StandardTrack(ts.points, 18);\n\t\t\t\t\t\tst.setCurrentTrack();\n\t\t\t\t\t\tts.renders.add(st);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tts.renders.add(new Renderable.Altitude(ts.points, 10));\n\t\t\t\t\t\tts.renders.add(new Renderable.StandardTrack(ts.points, 18));\n\t\t\t\t\t\t//ts.renders.add(new Renderable.Conveyor(ts.points, view, 20, 250));\n\t\t\t\t\t\tts.renders.add(new Renderable.DistanceMarker(ts.points, 1000));\n\t\t\t\t\t\t//ts.renders.add(new Renderable.Speed(ts.points, 50, 128));\n\t\t\t\t\t\tts.renders.add(new Renderable.Arrows(ts.points, view, 10, 250));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tts.recalculateRenderScales(view.getZoom());\n\t\t\t\tupdatePaints(ts.getColor(cachedColor), g.isRoutePoints(), g.isShowCurrentTrack(), settings, tileBox);\n\t\t\t\tts.drawRenderers(paint, canvas, tileBox);\n\t\t\t}\n\t\t}\n\t}","id":46377,"modified_method":"private void drawSelectedFilesSegments(Canvas canvas, RotatedTileBox tileBox,\n\t\t\tList<SelectedGpxFile> selectedGPXFiles, DrawSettings settings) {\n\t\tfor (SelectedGpxFile g : selectedGPXFiles) {\n\t\t\tList<TrkSegment> segments = g.getPointsToDisplay();\n\t\t\tfor (TrkSegment ts : segments) {\n\n\t\t\t\tif (ts.renders.isEmpty()\t\t\t\t// only do once (CODE HERE NEEDS TO BE UI INSTEAD)\n\t\t\t\t\t\t&& !ts.points.isEmpty()) {\t\t// hmmm. 0-point tracks happen, but.... how?\n\n\t\t\t\t\tif (g.isShowCurrentTrack()) {\n\t\t\t\t\t\tts.renders.add(new Renderable.CurrentTrack(ts.points));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tts.renders.add(new Renderable.Altitude(ts.points, 10));\n\t\t\t\t\t\tts.renders.add(new Renderable.StandardTrack(ts.points, 18));\n\t\t\t\t\t\t//ts.renders.add(new Renderable.Conveyor(ts.points, view, 20, 250));\n\t\t\t\t\t\t//ts.renders.add(new Renderable.Speed(ts.points, 50, 128));\n\t\t\t\t\t\tts.renders.add(new Renderable.Arrows(ts.points, view, 10, 250));\n\t\t\t\t\t\tts.renders.add(new Renderable.DistanceMarker(ts.points, 1000));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tts.recalculateRenderScales(view.getZoom());\n\t\t\t\tupdatePaints(ts.getColor(cachedColor), g.isRoutePoints(), g.isShowCurrentTrack(), settings, tileBox);\n\t\t\t\tts.drawRenderers(paint, canvas, tileBox);\n\t\t\t}\n\t\t}\n\t}","commit_id":"778a243cdf19aad0ff90d2e2988a5a40a6014304","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public void setRDP(List<GPXUtilities.WptPt> cull) {\n\n            culled = cull;\n\n            // Find the segment's bounding box, to allow quick draw rejection later\n\n            trackBounds.left = trackBounds.bottom = Double.POSITIVE_INFINITY;\n            trackBounds.right = trackBounds.top = Double.NEGATIVE_INFINITY;\n\n            for (GPXUtilities.WptPt pt : culled) {\n                trackBounds.right = Math.max(trackBounds.right, pt.lon);\n                trackBounds.left = Math.min(trackBounds.left, pt.lon);\n                trackBounds.top = Math.max(trackBounds.top, pt.lat);\n                trackBounds.bottom = Math.min(trackBounds.bottom, pt.lat);\n            }\n\n            //if (view != null) {\n            //    view.refreshMap();          // force a redraw\n            //}\n        }","id":46378,"modified_method":"public void setRDP(List<GPXUtilities.WptPt> cull) {\n\n            culled = cull;\n            calculateBounds(culled);\n\n            //if (view != null) {\n            //    view.refreshMap();          // force a redraw\n            //}\n        }","commit_id":"778a243cdf19aad0ff90d2e2988a5a40a6014304","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override public void recalculateRenderScale(double newZoom) {\n\n            // Here we create the 'shadow' resampled/culled points list, based on the asynchronous call.\n            // The asynchronous callback will set the variable 'culled', and that is preferentially used for rendering\n            // The current track does not undergo this process, as it is potentially constantly changing.\n\n            if (!currentTrack && zoom != newZoom) {\n\n                if (culler != null) {\n                    culler.cancel(true);\n                }\n                double cullDistance = Math.pow(2.0, base - newZoom);\n                culler = new AsynchronousResampler.RamerDouglasPeucer(this, cullDistance);\n\n                if (zoom < newZoom) {            // if line would look worse (we're zooming in) then...\n                    culled = null;                 // use full-resolution until re-cull complete\n                }\n                zoom = newZoom;\n                culler.execute(\"\");\n\n                // The trackBounds may be slightly inaccurate (unlikely, but...) so let's reset it\n                //trackBounds.left = trackBounds.bottom = Double.POSITIVE_INFINITY;\n                //trackBounds.right = trackBounds.bottom = Double.NEGATIVE_INFINITY;\n            }\n        }","id":46379,"modified_method":"@Override public void recalculateRenderScale(double newZoom) {\n\n            // Here we create the 'shadow' resampled/culled points list, based on the asynchronous call.\n            // The asynchronous callback will set the variable 'culled', and that is preferentially used for rendering\n            // The current track does not undergo this process, as it is potentially constantly changing.\n\n            if (zoom != newZoom) {\n\n                if (culler != null) {\n                    culler.cancel(true);\n                }\n                double cullDistance = Math.pow(2.0, base - newZoom);\n                culler = new AsynchronousResampler.RamerDouglasPeucer(this, cullDistance);\n\n                if (zoom < newZoom) {            // if line would look worse (we're zooming in) then...\n                    culled = null;                 // use full-resolution until re-cull complete\n                }\n                zoom = newZoom;\n                culler.execute(\"\");\n\n                // The trackBounds may be slightly inaccurate (unlikely, but...) so let's reset it\n                //trackBounds.left = trackBounds.bottom = Double.POSITIVE_INFINITY;\n                //trackBounds.right = trackBounds.bottom = Double.NEGATIVE_INFINITY;\n            }\n        }","commit_id":"778a243cdf19aad0ff90d2e2988a5a40a6014304","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override public void drawSingleSegment(Paint p, Canvas canvas, RotatedTileBox tileBox) {\n\n            List<GPXUtilities.WptPt> pts = culled == null? points: culled;\t\t\t// use culled points preferentially\n            if (pts != null && !pts.isEmpty()\n                    && QuadRect.trivialOverlap(tileBox.getLatLonBounds(), trackBounds)) {\n\n                canvas.rotate(-tileBox.getRotate(), tileBox.getCenterPixelX(), tileBox.getCenterPixelY());\n\n                float stroke = p.getStrokeWidth()/2;\n\n                float clipL = -stroke;\n                float clipB = -stroke;\n                float clipT = canvas.getHeight() + stroke;\n                float clipR = canvas.getWidth() + stroke;\n\n                GPXUtilities.WptPt pt = pts.get(0);\n                float lastx = tileBox.getPixXFromLatLon(pt.lat, pt.lon);\n                float lasty = tileBox.getPixYFromLatLon(pt.lat, pt.lon);\n\n                int size = pts.size();\n                for (int i = 1; i < size; i++) {\n                    pt = pts.get(i);\n\n                    float x = tileBox.getPixXFromLatLon(pt.lat, pt.lon);\n                    float y = tileBox.getPixYFromLatLon(pt.lat, pt.lon);\n\n                    if (Math.min(x, lastx) < clipR && Math.max(x, lastx) > clipL\n                            && Math.min(y, lasty) < clipT && Math.max(y, lasty) > clipB) {\n                        canvas.drawLine(lastx, lasty, x, y, p);\n                    }\n                    lastx = x;\n                    lasty = y;\n                }\n                canvas.rotate(tileBox.getRotate(), tileBox.getCenterPixelX(), tileBox.getCenterPixelY());\n            }\n        }","id":46380,"modified_method":"@Override public void drawSingleSegment(Paint p, Canvas canvas, RotatedTileBox tileBox) {\n            draw(culled == null ? points : culled, p, canvas, tileBox);\n        }","commit_id":"778a243cdf19aad0ff90d2e2988a5a40a6014304","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public RenderableSegment(List<GPXUtilities.WptPt> pt) {\n            points = pt;\n            culled = null;\n        }","id":46381,"modified_method":"public RenderableSegment(List<GPXUtilities.WptPt> pt) {\n            points = pt;\n            calculateBounds(points);\n        }","commit_id":"778a243cdf19aad0ff90d2e2988a5a40a6014304","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override public void drawSingleSegment(Paint p, Canvas canvas, RotatedTileBox tileBox) {\n\n            if (culled != null && !culled.isEmpty() && zoom > 14\n                    && QuadRect.trivialOverlap(tileBox.getLatLonBounds(), trackBounds)) {\n\n                canvas.rotate(-tileBox.getRotate(), tileBox.getCenterPixelX(), tileBox.getCenterPixelY());\n\n                float stroke = p.getStrokeWidth();\n                float arrowSize = (float) Math.pow(2.0,zoom-18) * 128;\n\n                int pCol = p.getColor();\n                p.setColor(Color.RED);\n\n                float lastx = 0;\n                float lasty = 0;\n                boolean broken = true;\n                int intp = conveyor;                                // the segment cycler\n\n                float clipL = -arrowSize;\n                float clipB = -arrowSize;\n                float clipT = canvas.getHeight() + arrowSize;\n                float clipR = canvas.getWidth() + arrowSize;\n\n                for (GPXUtilities.WptPt pt : culled) {\n                    intp--;                                         // increment to go the other way!\n\n                    float x = tileBox.getPixXFromLatLon(pt.lat, pt.lon);\n                    float y = tileBox.getPixYFromLatLon(pt.lat, pt.lon);\n\n                    boolean nextBroken = true;\n\n                    if (Math.min(x, lastx) < clipR && Math.max(x, lastx) > clipL\n                            && Math.min(y, lasty) < clipT && Math.max(y, lasty) > clipB) {\n\n                        int segment = intp & 15;\n                        if (segment < 6) {\n                            p.setStrokeWidth(stroke * (3.25f - segment/2f));\n\n                            if (!broken) {\n                                canvas.drawLine(lastx, lasty, x, y, p);\n                            }\n                            nextBroken = false;\n\n                            // arrowhead...\n                            if (zoom > 15 &&  segment == 0) {\n                                double angle = Math.atan2(lasty - y, lastx - x);\n                                float newx1 = x + (float) Math.cos(angle - 0.4) * arrowSize;\n                                float newy1 = y + (float) Math.sin(angle - 0.4) * arrowSize;\n                                float newx2 = x + (float) Math.cos(angle + 0.4) * arrowSize;\n                                float newy2 = y + (float) Math.sin(angle + 0.4) * arrowSize;\n\n                                canvas.drawLine(newx1, newy1, x, y, p);\n                                canvas.drawLine(newx2, newy2, x, y, p);\n                            }\n                        }\n                    }\n                    broken = nextBroken;\n                    lastx = x;\n                    lasty = y;\n                }\n                canvas.rotate(tileBox.getRotate(), tileBox.getCenterPixelX(), tileBox.getCenterPixelY());\n                p.setColor(pCol);\n                p.setStrokeWidth(stroke);\n            }\n        }","id":46382,"modified_method":"@Override public void drawSingleSegment(Paint p, Canvas canvas, RotatedTileBox tileBox) {\n\n            if (culled != null && !culled.isEmpty() && zoom > 14\n                    && QuadRect.trivialOverlap(tileBox.getLatLonBounds(), trackBounds)) {\n\n                canvas.rotate(-tileBox.getRotate(), tileBox.getCenterPixelX(), tileBox.getCenterPixelY());\n\n                float stroke = p.getStrokeWidth();\n                double zoomlimit = zoom > 17 ? 17f : zoom;\n                float arrowSize = (float) Math.pow(2.0,zoomlimit-18) * 128;\n\n                int pCol = p.getColor();\n                p.setColor(Color.MAGENTA);\n\n                float lastx = 0;\n                float lasty = 0;\n                boolean broken = true;\n                int intp = conveyor;                                // the segment cycler\n\n                float clipL = -arrowSize;\n                float clipB = -arrowSize;\n                float clipT = canvas.getHeight() + arrowSize;\n                float clipR = canvas.getWidth() + arrowSize;\n\n                for (GPXUtilities.WptPt pt : culled) {\n                    intp--;                                         // increment to go the other way!\n\n                    float x = tileBox.getPixXFromLatLon(pt.lat, pt.lon);\n                    float y = tileBox.getPixYFromLatLon(pt.lat, pt.lon);\n\n                    boolean nextBroken = true;\n\n                    if (Math.min(x, lastx) < clipR && Math.max(x, lastx) > clipL\n                            && Math.min(y, lasty) < clipT && Math.max(y, lasty) > clipB) {\n\n                        int segment = intp & 15;\n                        if (segment < 6) {\n\n                            int segpiece = 6-segment;\n                            if (segpiece > 4)\n                                segpiece = 4;\n\n                            if (!broken) {\n                                p.setStrokeWidth(stroke * segpiece / 2f);\n                                canvas.drawLine(lastx, lasty, x, y, p);\n                            }\n                            nextBroken = false;\n\n                            // arrowhead...\n                            if (segment == 0) {\n                                p.setStrokeWidth(stroke * (6f - segment)/4f);\n                                double angle = Math.atan2(lasty - y, lastx - x);\n                                float newx1 = x + (float) Math.cos(angle - 0.4) * arrowSize;\n                                float newy1 = y + (float) Math.sin(angle - 0.4) * arrowSize;\n                                float newx2 = x + (float) Math.cos(angle + 0.4) * arrowSize;\n                                float newy2 = y + (float) Math.sin(angle + 0.4) * arrowSize;\n\n                                canvas.drawLine(newx1, newy1, x, y, p);\n                                canvas.drawLine(newx2, newy2, x, y, p);\n                            }\n                        }\n                    }\n                    broken = nextBroken;\n                    lastx = x;\n                    lasty = y;\n                }\n                canvas.rotate(tileBox.getRotate(), tileBox.getCenterPixelX(), tileBox.getCenterPixelY());\n                p.setColor(pCol);\n                p.setStrokeWidth(stroke);\n            }\n        }","commit_id":"778a243cdf19aad0ff90d2e2988a5a40a6014304","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public <TM extends IModule> TM registerModule(ModuleHandle handle, MPSModuleOwner owner) {\n    ModelAccess.assertLegalWrite();\n\n    IModule module   = ModuleFileTracker.getInstance().getModuleByFile(handle.getFile());\n    if (module == null) {\n      if (handle.getDescriptor() instanceof LanguageDescriptor) {\n        module = Language.createLanguage(null, handle, owner);\n      } else if (handle.getDescriptor() instanceof SolutionDescriptor) {\n        module = Solution.newInstance(handle, owner);\n      } else if (handle.getDescriptor() instanceof DevkitDescriptor) {\n        module = DevKit.newInstance(handle, owner);\n      } else {\n        throw new IllegalArgumentException(\"Unknown module \" + handle.getFile().getName());\n      }\n    } else {\n      if (owner == module) {\n        LOG.warning(\"module \" + module + \" wants to own itself: will be collected very quickly\", module);\n      }\n      myModuleToOwners.addLink(module, owner);\n      myModules.add(module);\n    }\n    invalidateCaches();\n    fireModuleAdded(module);\n    return (TM) module;\n  }","id":46383,"modified_method":"public void registerModule(IModule module, MPSModuleOwner owner) {\n    ModelAccess.assertLegalWrite();\n\n    ModuleId moduleId = module.getModuleReference().getModuleId();\n    String moduleFqName = module.getModuleFqName();\n\n    assert moduleId!=null:\"module with nul id is added to repository: fqName=\"+moduleFqName+\"; file=\"+module.getDescriptorFile();\n\n    IModule existing = getModuleById(moduleId);\n    if (existing==null){\n      if (myFqNameToModulesMap.containsKey(moduleFqName)) {\n        IModule m = myFqNameToModulesMap.get(moduleFqName);\n        LOG.warning(\"duplicate module name \" + moduleFqName + \" : module with the same UID exists at \" + m.getDescriptorFile() + \" and \" + module.getDescriptorFile(), m);\n      }\n\n      myFqNameToModulesMap.put(moduleFqName, module);\n      myIdToModuleMap.put(module.getModuleReference().getModuleId(), module);\n      myModules.add(module);\n    }\n\n    myModuleToOwners.addLink(module, owner);\n\n    invalidateCaches();\n    fireModuleAdded(module);\n  }","commit_id":"7756356fa9147711c0a38a4a0086c783c3b5552e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void unRegisterModules(MPSModuleOwner owner) {\n    ModelAccess.assertLegalWrite();\n\n    myModuleToOwners.clearSecond(owner);\n    invalidateCaches();\n    fireRepositoryChanged();\n  }","id":46384,"modified_method":"public void unregisterModule(IModule module, MPSModuleOwner owner) {\n    ModelAccess.assertLegalWrite();\n\n    assert myModules.contains(module):\"trying to unregister non-registered module: fqName=\"+module.getModuleFqName()+\"; file=\"+module.getDescriptorFile();\n\n    myModuleToOwners.removeLink(module,owner);\n    boolean remove = myModuleToOwners.getByFirst(module).isEmpty();\n    if (remove){\n      fireBeforeModuleRemoved(module);\n      myModules.remove(module);\n      myIdToModuleMap.remove(module.getModuleReference().getModuleId());\n      myFqNameToModulesMap.remove(module.getModuleFqName());\n      invalidateCaches();\n      fireModuleRemoved(module);\n    } else {\n      invalidateCaches();\n      fireRepositoryChanged();\n    }\n  }","commit_id":"7756356fa9147711c0a38a4a0086c783c3b5552e","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void initializeMaps(List<RelationBlock> inequalities) {\n    myInputsToOutputs.clear();\n    myNodesToBlocks.clear();\n    myNodes.clear();\n    for (RelationBlock inequality : inequalities) {\n      if (inequality.isCheckOnly()) {\n        continue;\n      }\n      for (Pair<SNode, SNode> pair : inequality.getInputsAndOutputs()) {\n        SNode input = myState.getRepresentative(pair.first);\n        SNode output = myState.getRepresentative(pair.second);\n        if (input != null) {\n          if (TypesUtil.isVariable(input)) {\n            myNodes.add(input);\n          }\n          if (TypesUtil.isVariable(output)) {\n            myNodes.add(output);\n          }\n          if (input != output && output != null) {\n            addVariablesLink(input, output);\n            myNodesToBlocks.addLink(input, inequality);\n            if (!TypesUtil.isVariable(input) && !TypesUtil.isVariable(output)) {\n              List<SNode> inputVariables = TypesUtil.getVariables(input, myState);\n              List<SNode> outputVariables = TypesUtil.getVariables(output, myState);\n              myNodes.addAll(inputVariables);\n              myNodes.addAll(outputVariables);\n              for (SNode inputVar : inputVariables) {\n                for (SNode outputVar : outputVariables) {\n                  addVariablesLink(myState.getRepresentative(inputVar), myState.getRepresentative(outputVar));\n                }\n              }\n            }\n          }\n          if (output != null) {\n\n            myNodesToBlocks.addLink(output, inequality);\n          }\n        }\n      }\n    }\n  }","id":46385,"modified_method":"private void initializeMaps(List<RelationBlock> inequalities) {\n    myInputsToOutputs.clear();\n    myNodesToBlocks.clear();\n    myNodes.clear();\n    for (RelationBlock inequality : inequalities) {\n      if (inequality.isCheckOnly()) {\n        continue;\n      }\n      for (Pair<SNode, SNode> pair : inequality.getInputsAndOutputs()) {\n        SNode input = myState.getRepresentative(pair.first);\n        SNode output = myState.getRepresentative(pair.second);\n        if (input == null || output == null) continue;\n        if (TypesUtil.isVariable(input)) {\n          myNodes.add(input);\n        }\n        if (TypesUtil.isVariable(output)) {\n          myNodes.add(output);\n        }\n        if (input != output) {\n          for (SNode inputVar : TypesUtil.getVariables(input, myState)) {\n            for (SNode outputVar : TypesUtil.getVariables(output, myState)) {\n              addVariablesLink(myState.getRepresentative(inputVar), myState.getRepresentative(outputVar));\n            }\n          }\n        }\n        myNodesToBlocks.addLink(input, inequality);\n        myNodesToBlocks.addLink(output, inequality);\n      }\n    }\n  }","commit_id":"e8c4296c386e08e90266bed384a6962fecaf2d79","url":"https://github.com/JetBrains/MPS"},{"original_method":"public ModuleStub registerModuleStub(IFile file, MPSModuleOwner owner) {\n    myDirtyFlag = true;\n    String canonicalPath = file.getCanonicalPath();\n    ModuleStub moduleStub = myFileToModuleStubMap.get(canonicalPath);\n    if (moduleStub == null) {\n      moduleStub = ModuleStub.newInstance(file, owner);\n    } else {\n      //todo\n      myModuleStubToOwners.addLink(moduleStub, owner);\n    }\n    //fireRepositoryChanged();\n    return moduleStub;\n  }","id":46386,"modified_method":"public ModuleStub registerModuleStub(IFile file, MPSModuleOwner owner) {\n    myDirtyFlag = true;\n    String canonicalPath = file.getCanonicalPath();\n    ModuleStub moduleStub = myFileToModuleStubMap.get(canonicalPath);\n    if (moduleStub == null) {\n      moduleStub = ModuleStub.newInstance(file, CollectionUtil.asSet(owner));\n    } else {\n      //todo\n      myModuleStubToOwners.addLink(moduleStub, owner);\n    }\n    //fireRepositoryChanged();\n    return moduleStub;\n  }","commit_id":"9ee41ced95528a53d7e42d933380cf5df5106006","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void addModuleStub(ModuleStub moduleStub, MPSModuleOwner owner) {\n    myDirtyFlag = true;\n    if (myModuleStubToOwners.contains(moduleStub, owner)) {\n      throw new RuntimeException(\"Couldn't add module stub\\\"\" + moduleStub.getOldModuleId() + \"\\\" : this module stub is already registered with this very owner: \" + owner);\n    }\n    IFile descriptorFile = moduleStub.getDescriptorFile();\n\n    String canonicalDescriptorPath;\n    if (descriptorFile == null) {\n      canonicalDescriptorPath = null;\n    } else {\n      canonicalDescriptorPath = descriptorFile.getCanonicalPath();\n    }\n    if (canonicalDescriptorPath != null && !myFileToModuleStubMap.containsKey(canonicalDescriptorPath)) {\n      myFileToModuleStubMap.put(canonicalDescriptorPath, moduleStub);\n    }\n\n    putModuleStubWithUID(moduleStub.getOldModuleId(), moduleStub);\n\n    myModuleStubToOwners.addLink(moduleStub, owner);\n\n    //fireModuleAdded(moduleStub);\n  }","id":46387,"modified_method":"public void addModuleStub(ModuleStub moduleStub, Set<MPSModuleOwner> owners) {\n    myDirtyFlag = true;\n/*    if (myModuleStubToOwners.contains(moduleStub, owners)) {\n      throw new RuntimeException(\"Couldn't add module stub\\\"\" + moduleStub.getOldModuleId() + \"\\\" : this module stub is already registered with this very owner: \" + owners);\n    }*/\n    IFile descriptorFile = moduleStub.getDescriptorFile();\n\n    String canonicalDescriptorPath;\n    if (descriptorFile == null) {\n      canonicalDescriptorPath = null;\n    } else {\n      canonicalDescriptorPath = descriptorFile.getCanonicalPath();\n    }\n    if (canonicalDescriptorPath != null && !myFileToModuleStubMap.containsKey(canonicalDescriptorPath)) {\n      myFileToModuleStubMap.put(canonicalDescriptorPath, moduleStub);\n    }\n\n    putModuleStubWithUID(moduleStub.getOldModuleId(), moduleStub);\n\n    for (MPSModuleOwner owner : owners) {\n      myModuleStubToOwners.addLink(moduleStub, owner);\n    }\n\n    //fireModuleAdded(moduleStub);\n  }","commit_id":"9ee41ced95528a53d7e42d933380cf5df5106006","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected String[] getPoms()\n        throws IOException\n    {\n        String[] poms;\n\n        if ( ( pom != null ) && pom.exists() )\n        {\n            poms = new String[]{ pom.getAbsolutePath() };\n        }\n        else if ( invokerTest != null )\n        {\n            String[] testRegexes = StringUtils.split( invokerTest, \",\" );\n            List /* String */includes = new ArrayList( testRegexes.length );\n\n            for ( int i = 0, size = testRegexes.length; i < size; i++ )\n            {\n                // user just use -Dinvoker.test=MWAR191,MNG111 to use a directory thats the end is not pom.xml\n                includes.add( testRegexes[i].endsWith( \"pom.xml\" ) ? testRegexes[i] : testRegexes[i]\n                    + File.separatorChar + \"pom.xml\" );\n            }\n\n            final FileSet fs = new FileSet();\n\n            fs.setIncludes( includes );\n            //fs.setExcludes( pomExcludes );\n            fs.setDirectory( projectsDirectory.getCanonicalPath() );\n            fs.setFollowSymlinks( false );\n            fs.setUseDefaultExcludes( false );\n\n            final FileSetManager fsm = new FileSetManager( getLog() );\n\n            poms = fsm.getIncludedFiles( fs );\n        }\n        else\n        {\n            final FileSet fs = new FileSet();\n\n            fs.setIncludes( pomIncludes );\n            fs.setExcludes( pomExcludes );\n            fs.setDirectory( projectsDirectory.getCanonicalPath() );\n            fs.setFollowSymlinks( false );\n            fs.setUseDefaultExcludes( false );\n\n            final FileSetManager fsm = new FileSetManager( getLog() );\n\n            poms = fsm.getIncludedFiles( fs );\n        }\n\n        poms = normalizePomPaths( poms );\n\n        return poms;\n    }","id":46388,"modified_method":"protected String[] getPoms()\n        throws IOException\n    {\n        String[] poms;\n\n        if ( ( pom != null ) && pom.exists() )\n        {\n            poms = new String[]{ pom.getAbsolutePath() };\n        }\n        else if ( invokerTest != null )\n        {\n            String[] testRegexes = StringUtils.split( invokerTest, \",\" );\n            List /* String */includes = new ArrayList( testRegexes.length );\n\n            for ( int i = 0, size = testRegexes.length; i < size; i++ )\n            {\n                // user just use -Dinvoker.test=MWAR191,MNG111 to use a directory thats the end is not pom.xml\n                includes.add( testRegexes[i] );\n            }\n\n            final FileSet fs = new FileSet();\n\n            fs.setIncludes( includes );\n            //fs.setExcludes( pomExcludes );\n            fs.setDirectory( projectsDirectory.getCanonicalPath() );\n            fs.setFollowSymlinks( false );\n            fs.setUseDefaultExcludes( true );\n\n            final FileSetManager fsm = new FileSetManager( getLog() );\n\n            List included = new ArrayList();\n            included.addAll( Arrays.asList( fsm.getIncludedFiles( fs ) ) );\n            included.addAll( Arrays.asList( fsm.getIncludedDirectories( fs ) ) );\n            poms = (String[]) included.toArray( new String[included.size()] );\n        }\n        else\n        {\n            final FileSet fs = new FileSet();\n\n            fs.setIncludes( pomIncludes );\n            fs.setExcludes( pomExcludes );\n            fs.setDirectory( projectsDirectory.getCanonicalPath() );\n            fs.setFollowSymlinks( false );\n            fs.setUseDefaultExcludes( true );\n\n            final FileSetManager fsm = new FileSetManager( getLog() );\n\n            List included = new ArrayList();\n            included.addAll( Arrays.asList( fsm.getIncludedFiles( fs ) ) );\n            included.addAll( Arrays.asList( fsm.getIncludedDirectories( fs ) ) );\n            poms = (String[]) included.toArray( new String[included.size()] );\n        }\n\n        poms = normalizePomPaths( poms );\n\n        return poms;\n    }","commit_id":"3ae26d869215aee084237ad76c5297c2ef4064ae","url":"https://github.com/apache/maven-plugins"},{"original_method":"private boolean verify( final File basedir, final File pom, final List failures, final FileLogger logger )\n    {\n        boolean result = true;\n\n        if ( postBuildHookScript != null )\n        {\n            try\n            {\n                result = runScript( \"verification script\", basedir, postBuildHookScript, logger );\n            }\n            catch ( final IOException e )\n            {\n                result = false;\n            }\n            catch ( final EvalError e )\n            {\n                String errorMessage = \"error evaluating script \" + basedir.getPath() + File.separatorChar\n                    + postBuildHookScript + \", \" + e.getMessage();\n                getLog().error( errorMessage, e );\n                result = false;\n            }\n        }\n\n        return result;\n    }","id":46389,"modified_method":"private boolean verify( final File basedir, final FileLogger logger )\n    {\n        boolean result = true;\n\n        if ( postBuildHookScript != null )\n        {\n            try\n            {\n                result = runScript( \"verification script\", basedir, postBuildHookScript, logger );\n            }\n            catch ( final IOException e )\n            {\n                result = false;\n            }\n            catch ( final EvalError e )\n            {\n                String errorMessage = \"error evaluating script \" + basedir.getPath() + File.separatorChar\n                    + postBuildHookScript + \", \" + e.getMessage();\n                getLog().error( errorMessage, e );\n                result = false;\n            }\n        }\n\n        return result;\n    }","commit_id":"3ae26d869215aee084237ad76c5297c2ef4064ae","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Copied a directory structure with deafault exclusions (.svn, CVS, etc)\n     * \n     * @param sourceDir\n     * @param destDir\n     * @throws IOException\n     */\n    private void copyDirectoryStructure( File sourceDir, File destDir ) throws IOException\n    {\n        DirectoryScanner scanner = new DirectoryScanner();\n        scanner.setBasedir( sourceDir );\n        if ( ! cloneAllFiles )\n        {\n            scanner.addDefaultExcludes();\n        }\n        scanner.scan();\n        \n        String [] includedFiles = scanner.getIncludedFiles();\n        for ( int i = 0; i < includedFiles.length; ++i )\n        {\n            File sourceFile = new File( sourceDir, includedFiles[ i ] );\n            File destFile = new File( destDir, includedFiles[ i ] );\n            FileUtils.copyFile( sourceFile, destFile );\n        }\n    }","id":46390,"modified_method":"/**\n     * Copied a directory structure with deafault exclusions (.svn, CVS, etc)\n     * \n     * @param sourceDir\n     * @param destDir\n     * @throws IOException\n     */\n    private void copyDirectoryStructure( File sourceDir, File destDir ) throws IOException\n    {\n        DirectoryScanner scanner = new DirectoryScanner();\n        scanner.setBasedir( sourceDir );\n        if ( ! cloneAllFiles )\n        {\n            scanner.addDefaultExcludes();\n        }\n        scanner.scan();\n\n        /*\n         * NOTE: Make sure the destination directory is always there (even if empty) to support POM-less ITs.\n         */\n        destDir.mkdirs();\n\n        String[] includedFiles = scanner.getIncludedFiles();\n        for ( int i = 0; i < includedFiles.length; ++i )\n        {\n            File sourceFile = new File( sourceDir, includedFiles[ i ] );\n            File destFile = new File( destDir, includedFiles[ i ] );\n            FileUtils.copyFile( sourceFile, destFile );\n        }\n    }","commit_id":"3ae26d869215aee084237ad76c5297c2ef4064ae","url":"https://github.com/apache/maven-plugins"},{"original_method":"private void runBuild( final File projectsDir, final String pom, final List failures )\n        throws MojoExecutionException\n    {\n\n        File pomFile = new File( projectsDir, pom );\n        final File basedir = pomFile.getParentFile();\n        File interpolatedPomFile = buildInterpolatedFile( pomFile, basedir, \"interpolated-pom.xml\" );\n        FileLogger logger = null;\n        try\n        {\n            getLog().info( \"Building: \" + pom );\n\n            final File outputLog = new File( basedir, \"build.log\" );\n\n            final Properties invokerProperties = getInvokerProperties( basedir );\n            if ( getLog().isDebugEnabled() && !invokerProperties.isEmpty() )\n            {\n                getLog().debug( \"Using invoker properties:\" );\n                for ( Iterator it = new TreeSet( invokerProperties.keySet() ).iterator(); it.hasNext(); )\n                {\n                    String key = (String) it.next();\n                    String value = invokerProperties.getProperty( key );\n                    getLog().debug( \"  \" + key + \" = \" + value );\n                }\n            }\n\n            if ( !noLog )\n            {\n                outputLog.getParentFile().mkdirs();\n\n                try\n                {\n                    if ( streamLogs )\n                    {\n                        logger = new FileLogger( outputLog, getLog() );\n                    }\n                    else\n                    {\n                        logger = new FileLogger( outputLog );\n                    }\n\n                    getLog().debug( \"build log initialized in: \" + outputLog );\n                }\n                catch ( final IOException e )\n                {\n                    getLog().debug( \"Error initializing build logfile in: \" + outputLog, e );\n                    getLog().info( \"...FAILED[could not initialize logfile in: \" + outputLog + \"]\" );\n\n                    failures.add( pom );\n\n                    return;\n                }\n            }\n\n            if ( !prebuild( basedir, interpolatedPomFile, failures, logger ) )\n            {\n                getLog().info( \"...FAILED[pre-build script returned false]\" );\n\n                failures.add( pom );\n\n                return;\n            }\n\n            final InvocationRequest request = new DefaultInvocationRequest();\n\n            final List invocationGoals = getGoals( basedir );\n\n            if ( ( invocationGoals.size() == 1 ) && \"_default\".equals( invocationGoals.get( 0 ) ) )\n            {\n                getLog().debug( \"Executing default goal for project in: \" + pom );\n            }\n            else\n            {\n                getLog().debug( \"Executing goals: \" + invocationGoals + \" for project in: \" + pom );\n\n                request.setGoals( invocationGoals );\n            }\n\n            try\n            {\n                Properties collectedTestProperties = new Properties();\n\n                if ( testProperties != null )\n                {\n                    collectedTestProperties.putAll( testProperties );\n                }\n\n                if ( properties != null )\n                {\n                    collectedTestProperties.putAll( properties );\n                }\n\n                final Properties loadedProperties = loadTestProperties( basedir );\n\n                if ( loadedProperties != null )\n                {\n                    collectedTestProperties.putAll( loadedProperties );\n                }\n\n                request.setProperties( collectedTestProperties );\n            }\n            catch ( final IOException e )\n            {\n                getLog().debug( \"Error reading test-properties file in: \" + testPropertiesFile, e );\n                getLog().info( \"...FAILED[error reading test properties in: \" + testPropertiesFile + \"]\" );\n\n                failures.add( pom );\n\n                return;\n            }\n\n            if ( localRepositoryPath != null )\n            {\n                File localRepoDir = localRepositoryPath;\n\n                getLog().debug( \"Using local repository: \" + localRepoDir );\n\n                if ( ! localRepositoryPath.exists() )\n                {\n                    localRepositoryPath.mkdirs();\n                }\n                \n                request.setLocalRepositoryDirectory( localRepoDir );\n            }\n\n            request.setInteractive( false );\n\n            request.setShowErrors( showErrors );\n\n            request.setDebug( debug );\n\n            request.setBaseDirectory( basedir );\n\n            if ( !noLog )\n            {\n                request.setErrorHandler( logger );\n\n                request.setOutputHandler( logger );\n            }\n\n            request.setPomFile( interpolatedPomFile );\n\n            request.setProfiles( getProfiles( basedir ) );\n\n            if ( settingsFile != null )\n            {\n                buildInterpolatedFile( settingsFile, settingsFile.getParentFile(), settingsFile.getName()\n                    + \".interpolated\" );\n                request.setUserSettingsFile( new File( settingsFile.getParentFile(), settingsFile.getName()\n                    + \".interpolated\" ) );\n            }\n\n            request.setMavenOpts( mavenOpts );\n\n            configureInvocation( request, invokerProperties );\n\n            try\n            {\n                getLog().debug( \"Using MAVEN_OPTS: \" + request.getMavenOpts() );\n                getLog().debug( \"Executing: \" + new MavenCommandLineBuilder().build( request ) );\n            }\n            catch ( CommandLineConfigurationException e )\n            {\n                getLog().debug( \"Failed to display command line: \" + e.getMessage() );\n            }\n\n            InvocationResult result = null;\n\n            try\n            {\n                result = invoker.execute( request );\n            }\n            catch ( final MavenInvocationException e )\n            {\n                getLog().debug( \"Error invoking Maven: \" + e.getMessage(), e );\n                getLog().info( \"...FAILED[error invoking Maven]\" );\n\n                failures.add( pom );\n\n                return;\n            }\n\n            final CommandLineException executionException = result.getExecutionException();\n            final boolean nonZeroExit =\n                \"failure\".equalsIgnoreCase( invokerProperties.getProperty( \"invoker.buildResult\" ) );\n\n            if ( executionException != null )\n            {\n                if ( !suppressSummaries )\n                {\n                    StringBuffer buffer = new StringBuffer( 256 );\n                    buffer.append( \"...FAILED. \" );\n                    if ( !noLog )\n                    {\n                        buffer.append( \"See \" ).append( outputLog.getAbsolutePath() ).append( \" for details.\" );\n                    }\n                    else\n                    {\n                        buffer.append( \"See console output for details.\" );\n                    }\n                    getLog().info( buffer.toString() );\n                }\n\n                failures.add( pom );\n            }\n            else if ( ( result.getExitCode() != 0 ) != nonZeroExit )\n            {\n                if ( !suppressSummaries )\n                {\n                    StringBuffer buffer = new StringBuffer( 256 );\n                    buffer.append( \"...FAILED[code=\" ).append( result.getExitCode() ).append( \"]. \" );\n                    if ( !noLog )\n                    {\n                        buffer.append( \"See \" ).append( outputLog.getAbsolutePath() ).append( \" for details.\" );\n                    }\n                    else\n                    {\n                        buffer.append( \"See console output for details.\" );\n                    }\n                    getLog().info( buffer.toString() );\n                }\n\n                failures.add( pom );\n            }\n            else if ( !verify( basedir, interpolatedPomFile, failures, logger ) )\n            {\n                if ( !suppressSummaries )\n                {\n                    getLog().info( \"...FAILED[verify script returned false].\" );\n                }\n\n                failures.add( pom );\n            }\n            else if ( !suppressSummaries )\n            {\n                getLog().info( \"...SUCCESS.\" );\n            }\n        }\n        finally\n        {\n            if ( logger != null )\n            {\n                logger.close();\n            }\n        }\n    }","id":46391,"modified_method":"/**\n     * Runs the specified IT project.\n     * \n     * @param projectsDir The base directory of all IT projects, must not be <code>null<\/code>.\n     * @param project The relative path to the IT project, either to a POM file or merely to a directory, must not be\n     *            <code>null<\/code>.\n     * @param failures The list to record build failures in, must not be <code>null<\/code>.\n     * @throws MojoExecutionException If the IT project could not be launched.\n     */\n    private void runBuild( final File projectsDir, String project, final List failures )\n        throws MojoExecutionException\n    {\n        File pomFile = new File( projectsDir, project );\n        File basedir;\n        if ( pomFile.isDirectory() )\n        {\n            basedir = pomFile;\n            pomFile = new File( basedir, \"pom.xml\" );\n            if ( !pomFile.exists() )\n            {\n                pomFile = null;\n            }\n            else\n            {\n                project += File.separator + \"pom.xml\";\n            }\n        }\n        else\n        {\n            basedir = pomFile.getParentFile();\n        }\n        File interpolatedPomFile = null;\n        if ( pomFile != null )\n        {\n            interpolatedPomFile = buildInterpolatedFile( pomFile, basedir, \"interpolated-pom.xml\" );\n        }\n\n        FileLogger logger = null;\n        try\n        {\n            getLog().info( \"Building: \" + project );\n\n            final File outputLog = new File( basedir, \"build.log\" );\n\n            final Properties invokerProperties = getInvokerProperties( basedir );\n            if ( getLog().isDebugEnabled() && !invokerProperties.isEmpty() )\n            {\n                getLog().debug( \"Using invoker properties:\" );\n                for ( Iterator it = new TreeSet( invokerProperties.keySet() ).iterator(); it.hasNext(); )\n                {\n                    String key = (String) it.next();\n                    String value = invokerProperties.getProperty( key );\n                    getLog().debug( \"  \" + key + \" = \" + value );\n                }\n            }\n\n            if ( !noLog )\n            {\n                outputLog.getParentFile().mkdirs();\n\n                try\n                {\n                    if ( streamLogs )\n                    {\n                        logger = new FileLogger( outputLog, getLog() );\n                    }\n                    else\n                    {\n                        logger = new FileLogger( outputLog );\n                    }\n\n                    getLog().debug( \"build log initialized in: \" + outputLog );\n                }\n                catch ( final IOException e )\n                {\n                    getLog().debug( \"Error initializing build logfile in: \" + outputLog, e );\n                    getLog().info( \"...FAILED[could not initialize logfile in: \" + outputLog + \"]\" );\n\n                    failures.add( project );\n\n                    return;\n                }\n            }\n\n            if ( !prebuild( basedir, logger ) )\n            {\n                getLog().info( \"...FAILED[pre-build script returned false]\" );\n\n                failures.add( project );\n\n                return;\n            }\n\n            final InvocationRequest request = new DefaultInvocationRequest();\n\n            final List invocationGoals = getGoals( basedir );\n\n            if ( ( invocationGoals.size() == 1 ) && \"_default\".equals( invocationGoals.get( 0 ) ) )\n            {\n                getLog().debug( \"Executing default goal for project in: \" + project );\n            }\n            else\n            {\n                getLog().debug( \"Executing goals: \" + invocationGoals + \" for project in: \" + project );\n\n                request.setGoals( invocationGoals );\n            }\n\n            try\n            {\n                Properties collectedTestProperties = new Properties();\n\n                if ( testProperties != null )\n                {\n                    collectedTestProperties.putAll( testProperties );\n                }\n\n                if ( properties != null )\n                {\n                    collectedTestProperties.putAll( properties );\n                }\n\n                final Properties loadedProperties = loadTestProperties( basedir );\n\n                if ( loadedProperties != null )\n                {\n                    collectedTestProperties.putAll( loadedProperties );\n                }\n\n                request.setProperties( collectedTestProperties );\n            }\n            catch ( final IOException e )\n            {\n                getLog().debug( \"Error reading test-properties file in: \" + testPropertiesFile, e );\n                getLog().info( \"...FAILED[error reading test properties in: \" + testPropertiesFile + \"]\" );\n\n                failures.add( project );\n\n                return;\n            }\n\n            if ( localRepositoryPath != null )\n            {\n                File localRepoDir = localRepositoryPath;\n\n                getLog().debug( \"Using local repository: \" + localRepoDir );\n\n                if ( ! localRepositoryPath.exists() )\n                {\n                    localRepositoryPath.mkdirs();\n                }\n                \n                request.setLocalRepositoryDirectory( localRepoDir );\n            }\n\n            request.setInteractive( false );\n\n            request.setShowErrors( showErrors );\n\n            request.setDebug( debug );\n\n            request.setBaseDirectory( basedir );\n\n            if ( !noLog )\n            {\n                request.setErrorHandler( logger );\n\n                request.setOutputHandler( logger );\n            }\n\n            if ( interpolatedPomFile != null )\n            {\n                request.setPomFile( interpolatedPomFile );\n            }\n\n            request.setProfiles( getProfiles( basedir ) );\n\n            if ( settingsFile != null )\n            {\n                buildInterpolatedFile( settingsFile, settingsFile.getParentFile(), settingsFile.getName()\n                    + \".interpolated\" );\n                request.setUserSettingsFile( new File( settingsFile.getParentFile(), settingsFile.getName()\n                    + \".interpolated\" ) );\n            }\n\n            request.setMavenOpts( mavenOpts );\n\n            configureInvocation( request, invokerProperties );\n\n            try\n            {\n                getLog().debug( \"Using MAVEN_OPTS: \" + request.getMavenOpts() );\n                getLog().debug( \"Executing: \" + new MavenCommandLineBuilder().build( request ) );\n            }\n            catch ( CommandLineConfigurationException e )\n            {\n                getLog().debug( \"Failed to display command line: \" + e.getMessage() );\n            }\n\n            InvocationResult result = null;\n\n            try\n            {\n                result = invoker.execute( request );\n            }\n            catch ( final MavenInvocationException e )\n            {\n                getLog().debug( \"Error invoking Maven: \" + e.getMessage(), e );\n                getLog().info( \"...FAILED[error invoking Maven]\" );\n\n                failures.add( project );\n\n                return;\n            }\n\n            final CommandLineException executionException = result.getExecutionException();\n            final boolean nonZeroExit =\n                \"failure\".equalsIgnoreCase( invokerProperties.getProperty( \"invoker.buildResult\" ) );\n\n            if ( executionException != null )\n            {\n                if ( !suppressSummaries )\n                {\n                    StringBuffer buffer = new StringBuffer( 256 );\n                    buffer.append( \"...FAILED. \" );\n                    if ( !noLog )\n                    {\n                        buffer.append( \"See \" ).append( outputLog.getAbsolutePath() ).append( \" for details.\" );\n                    }\n                    else\n                    {\n                        buffer.append( \"See console output for details.\" );\n                    }\n                    getLog().info( buffer.toString() );\n                }\n\n                failures.add( project );\n            }\n            else if ( ( result.getExitCode() != 0 ) != nonZeroExit )\n            {\n                if ( !suppressSummaries )\n                {\n                    StringBuffer buffer = new StringBuffer( 256 );\n                    buffer.append( \"...FAILED[code=\" ).append( result.getExitCode() ).append( \"]. \" );\n                    if ( !noLog )\n                    {\n                        buffer.append( \"See \" ).append( outputLog.getAbsolutePath() ).append( \" for details.\" );\n                    }\n                    else\n                    {\n                        buffer.append( \"See console output for details.\" );\n                    }\n                    getLog().info( buffer.toString() );\n                }\n\n                failures.add( project );\n            }\n            else if ( !verify( basedir, logger ) )\n            {\n                if ( !suppressSummaries )\n                {\n                    getLog().info( \"...FAILED[verify script returned false].\" );\n                }\n\n                failures.add( project );\n            }\n            else if ( !suppressSummaries )\n            {\n                getLog().info( \"...SUCCESS.\" );\n            }\n        }\n        finally\n        {\n            if ( logger != null )\n            {\n                logger.close();\n            }\n        }\n    }","commit_id":"3ae26d869215aee084237ad76c5297c2ef4064ae","url":"https://github.com/apache/maven-plugins"},{"original_method":"private void cloneProjects( String[] includedPoms )\n        throws IOException\n    {\n        List clonedSubpaths = new ArrayList();\n\n        for ( int i = 0; i < includedPoms.length; i++ )\n        {\n            String subpath = includedPoms[i];\n            int lastSep = subpath.lastIndexOf( File.separator );\n\n            if ( lastSep > -1 )\n            {\n                subpath = subpath.substring( 0, lastSep );\n            }\n            else\n            {\n                subpath = \".\";\n            }\n\n            // avoid copying subdirs that are already cloned.\n            if ( !alreadyCloned( subpath, clonedSubpaths ) )\n            {\n                // avoid creating new files that point to dir/.\n                if ( \".\".equals( subpath ) )\n                {\n                    String cloneSubdir = normalizePath( cloneProjectsTo, projectsDirectory.getCanonicalPath() );\n\n                    // avoid infinite recursion if the cloneTo path is a subdirectory.\n                    if ( cloneSubdir != null )\n                    {\n                        File temp = File.createTempFile( \"pre-invocation-clone.\", \"\" );\n                        temp.delete();\n                        temp.mkdirs();\n\n                        copyDirectoryStructure( projectsDirectory, temp );\n\n                        FileUtils.deleteDirectory( new File( temp, cloneSubdir ) );\n\n                        copyDirectoryStructure( temp, cloneProjectsTo );\n                    }\n                    else\n                    {\n                        copyDirectoryStructure( projectsDirectory, cloneProjectsTo );\n                    }\n                }\n                else\n                {\n                    copyDirectoryStructure( new File( projectsDirectory, subpath ), new File( cloneProjectsTo,\n                                                                                              subpath ) );\n                }\n\n                clonedSubpaths.add( subpath );\n            }\n        }\n    }","id":46392,"modified_method":"/**\n     * Copies the specified IT projects to the directory given by {@link #cloneProjectsTo}. A project may either be\n     * denoted by a path to a POM file or merely by a path to a base directory.\n     * \n     * @param includedProjects The paths to the IT projects, relative to the projects directory, must not be\n     *            <code>null<\/code>.\n     * @throws IOException The the projects could not be copied.\n     */\n    private void cloneProjects( String[] includedProjects )\n        throws IOException\n    {\n        List clonedSubpaths = new ArrayList();\n\n        for ( int i = 0; i < includedProjects.length; i++ )\n        {\n            String subpath = includedProjects[i];\n            if ( !new File( projectsDirectory, subpath ).isDirectory() )\n            {\n                int lastSep = subpath.lastIndexOf( File.separator );\n                if ( lastSep > -1 )\n                {\n                    subpath = subpath.substring( 0, lastSep );\n                }\n                else\n                {\n                    subpath = \".\";\n                }\n            }\n\n            // avoid copying subdirs that are already cloned.\n            if ( !alreadyCloned( subpath, clonedSubpaths ) )\n            {\n                // avoid creating new files that point to dir/.\n                if ( \".\".equals( subpath ) )\n                {\n                    String cloneSubdir = normalizePath( cloneProjectsTo, projectsDirectory.getCanonicalPath() );\n\n                    // avoid infinite recursion if the cloneTo path is a subdirectory.\n                    if ( cloneSubdir != null )\n                    {\n                        File temp = File.createTempFile( \"pre-invocation-clone.\", \"\" );\n                        temp.delete();\n                        temp.mkdirs();\n\n                        copyDirectoryStructure( projectsDirectory, temp );\n\n                        FileUtils.deleteDirectory( new File( temp, cloneSubdir ) );\n\n                        copyDirectoryStructure( temp, cloneProjectsTo );\n                    }\n                    else\n                    {\n                        copyDirectoryStructure( projectsDirectory, cloneProjectsTo );\n                    }\n                }\n                else\n                {\n                    copyDirectoryStructure( new File( projectsDirectory, subpath ), new File( cloneProjectsTo,\n                                                                                              subpath ) );\n                }\n\n                clonedSubpaths.add( subpath );\n            }\n        }\n    }","commit_id":"3ae26d869215aee084237ad76c5297c2ef4064ae","url":"https://github.com/apache/maven-plugins"},{"original_method":"private boolean prebuild( final File basedir, final File pom, final List failures, final FileLogger logger )\n    {\n        boolean result = true;\n\n        if ( preBuildHookScript != null )\n        {\n            try\n            {\n                result = runScript( \"pre-build script\", basedir, preBuildHookScript, logger );\n            }\n            catch ( final IOException e )\n            {\n                result = false;\n            }\n            catch ( final EvalError e )\n            {\n                String errorMessage = \"error evaluating script \" + basedir.getPath() + File.separatorChar\n                    + postBuildHookScript + \", \" + e.getMessage();\n                getLog().error( errorMessage, e );\n                result = false;\n            }\n        }\n\n        return result;\n    }","id":46393,"modified_method":"private boolean prebuild( final File basedir, final FileLogger logger )\n    {\n        boolean result = true;\n\n        if ( preBuildHookScript != null )\n        {\n            try\n            {\n                result = runScript( \"pre-build script\", basedir, preBuildHookScript, logger );\n            }\n            catch ( final IOException e )\n            {\n                result = false;\n            }\n            catch ( final EvalError e )\n            {\n                String errorMessage = \"error evaluating script \" + basedir.getPath() + File.separatorChar\n                    + postBuildHookScript + \", \" + e.getMessage();\n                getLog().error( errorMessage, e );\n                result = false;\n            }\n        }\n\n        return result;\n    }","commit_id":"3ae26d869215aee084237ad76c5297c2ef4064ae","url":"https://github.com/apache/maven-plugins"},{"original_method":"public void testFullPatternInvokerTest()\n        throws Exception\n    {\n        InvokerMojo invokerMojo = new InvokerMojo();\n        setVariableValueToObject( invokerMojo, \"goalsFile\", \"validate-goal.txt\" );\n        String dirPath = getBasedir() + \"/src/test/resources/unit\";\n        List goals = invokerMojo.getGoals( new File( dirPath ) );\n        assertEquals( 1, goals.size() );\n        setVariableValueToObject( invokerMojo, \"projectsDirectory\", new File( dirPath ) );\n        setVariableValueToObject( invokerMojo, \"invokerTest\", \"*\" );\n        String[] poms = invokerMojo.getPoms();\n        System.out.println( Arrays.asList( poms ) );\n        assertEquals( 4, poms.length );\n    }","id":46394,"modified_method":"public void testFullPatternInvokerTest()\n        throws Exception\n    {\n        InvokerMojo invokerMojo = new InvokerMojo();\n        setVariableValueToObject( invokerMojo, \"goalsFile\", \"validate-goal.txt\" );\n        String dirPath = getBasedir() + \"/src/test/resources/unit\";\n        List goals = invokerMojo.getGoals( new File( dirPath ) );\n        assertEquals( 1, goals.size() );\n        setVariableValueToObject( invokerMojo, \"projectsDirectory\", new File( dirPath ) );\n        setVariableValueToObject( invokerMojo, \"invokerTest\", \"*\" );\n        String[] poms = invokerMojo.getPoms();\n        System.out.println( Arrays.asList( poms ) );\n        assertEquals( 6, poms.length );\n    }","commit_id":"3ae26d869215aee084237ad76c5297c2ef4064ae","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Creates a new logger that writes to the specified file and optionally mirrors messages to the given mojo logger.\n     * \n     * @param outputFile The path to the output file, must not be <code>null<\/code>.\n     * @param log The mojo logger to additionally output messages to, may be <code>null<\/code> if not used.\n     * @throws IOException If the output file could not be created.\n     */\n    public FileLogger( File outputFile, Log log )\n        throws IOException\n    {\n        this.log = log;\n        stream = new PrintStream( new FileOutputStream( outputFile ) );\n\n        Runnable finalizer = new Runnable()\n        {\n            public void run()\n            {\n                try\n                {\n                    finalize();\n                }\n                catch ( Throwable e )\n                {\n                    // ignore\n                }\n            }\n        };\n\n        Runtime.getRuntime().addShutdownHook( new Thread( finalizer ) );\n    }","id":46395,"modified_method":"/**\n     * Creates a new logger that writes to the specified file and optionally mirrors messages to the given mojo logger.\n     * \n     * @param outputFile The path to the output file, must not be <code>null<\/code>.\n     * @param log The mojo logger to additionally output messages to, may be <code>null<\/code> if not used.\n     * @throws IOException If the output file could not be created.\n     */\n    public FileLogger( File outputFile, Log log )\n        throws IOException\n    {\n        this.file = outputFile;\n        this.log = log;\n\n        outputFile.getParentFile().mkdirs();\n        stream = new PrintStream( new FileOutputStream( outputFile ) );\n\n        Runnable finalizer = new Runnable()\n        {\n            public void run()\n            {\n                try\n                {\n                    finalize();\n                }\n                catch ( Throwable e )\n                {\n                    // ignore\n                }\n            }\n        };\n\n        Runtime.getRuntime().addShutdownHook( new Thread( finalizer ) );\n    }","commit_id":"3ffe580c53cc378a72241099f9b8802f6f54d919","url":"https://github.com/apache/maven-plugins"},{"original_method":"public void testEmptyProfilesFromFile()\n        throws Exception\n    {\n\n        InvokerMojo invokerMojo = new InvokerMojo();\n        setVariableValueToObject( invokerMojo, \"profiles\", Arrays.asList( new String[] { \"zloug\" } ) );\n        setVariableValueToObject( invokerMojo, \"profilesFile\", \"emptyProfiles.txt\" );\n        setVariableValueToObject( invokerMojo, \"settings\", new Settings() );\n        String dirPath = getBasedir() + File.separatorChar + \"src\" + File.separatorChar + \"test\" + File.separatorChar\n            + \"resources\" + File.separatorChar + \"unit\" + File.separatorChar + \"profiles-from-file\";\n        List profiles = invokerMojo.getProfiles( new File( dirPath ) );\n        assertFalse( profiles.contains( \"zloug\" ) );\n        assertEquals( 0, profiles.size() );\n\n    }","id":46396,"modified_method":"public void testEmptyProfilesFromFile()\n        throws Exception\n    {\n\n        InvokerMojo invokerMojo = new InvokerMojo();\n        setVariableValueToObject( invokerMojo, \"project\", buildMavenProjectStub() );\n        setVariableValueToObject( invokerMojo, \"profiles\", Arrays.asList( new String[] { \"zloug\" } ) );\n        setVariableValueToObject( invokerMojo, \"profilesFile\", \"emptyProfiles.txt\" );\n        setVariableValueToObject( invokerMojo, \"settings\", new Settings() );\n        String dirPath = getBasedir() + File.separatorChar + \"src\" + File.separatorChar + \"test\" + File.separatorChar\n            + \"resources\" + File.separatorChar + \"unit\" + File.separatorChar + \"profiles-from-file\";\n        List profiles = invokerMojo.getProfiles( new File( dirPath ) );\n        assertFalse( profiles.contains( \"zloug\" ) );\n        assertEquals( 0, profiles.size() );\n\n    }","commit_id":"3ffe580c53cc378a72241099f9b8802f6f54d919","url":"https://github.com/apache/maven-plugins"},{"original_method":"public void testPomInterpolation()\n        throws Exception\n    {\n        FileReader fileReader = null;\n        File interpolatedPomFile = null;\n        try\n        {\n            InvokerMojo invokerMojo = new InvokerMojo();\n            setVariableValueToObject( invokerMojo, \"goalsFile\", \"goals.txt\" );\n            setVariableValueToObject( invokerMojo, \"project\", buildMavenProjectStub() );\n            setVariableValueToObject( invokerMojo, \"settings\", new Settings() );\n            Properties properties = new Properties();\n            properties.put( \"foo\", \"bar\" );\n            properties.put( \"version\", \"2.0-SNAPSHOT\" );\n            setVariableValueToObject( invokerMojo, \"interpolationsProperties\", properties );\n            String dirPath = getBasedir() + File.separatorChar + \"src\" + File.separatorChar + \"test\"\n                + File.separatorChar + \"resources\" + File.separatorChar + \"unit\" + File.separatorChar + \"interpolation\";\n            interpolatedPomFile = invokerMojo.buildInterpolatedFile( new File( dirPath, \"pom.xml\" ),\n                                                                        new File( getBasedir() + File.separatorChar\n                                                                            + \"target\" ), \"interpolated-pom.xml\"  );\n            fileReader = new FileReader( interpolatedPomFile );\n            String content = IOUtil.toString( fileReader );\n            assertTrue( content.indexOf( \"<interpolateValue>bar<\/interpolateValue>\" ) > 0 );\n            fileReader.close();\n            // recreate it to test delete if exists before creation\n            interpolatedPomFile = invokerMojo.buildInterpolatedFile( new File( dirPath, \"pom.xml\" ),\n                                                                        new File( getBasedir() + File.separatorChar\n                                                                            + \"target\" ), \"interpolated-pom.xml\"  );\n            fileReader = new FileReader( interpolatedPomFile );\n            content = IOUtil.toString( fileReader );\n            assertTrue( content.indexOf( \"<interpolateValue>bar<\/interpolateValue>\" ) > 0 );\n            fileReader.close();\n        } catch (Exception e)\n        {\n            throw e;\n        }\n        finally\n        {\n            if ( fileReader != null )\n            {\n                fileReader.close();\n            }\n        }\n    }","id":46397,"modified_method":"public void testPomInterpolation()\n        throws Exception\n    {\n        Reader reader = null;\n        File interpolatedPomFile = null;\n        try\n        {\n            InvokerMojo invokerMojo = new InvokerMojo();\n            setVariableValueToObject( invokerMojo, \"goalsFile\", \"goals.txt\" );\n            setVariableValueToObject( invokerMojo, \"project\", buildMavenProjectStub() );\n            setVariableValueToObject( invokerMojo, \"settings\", new Settings() );\n            Properties properties = new Properties();\n            properties.put( \"foo\", \"bar\" );\n            properties.put( \"version\", \"2.0-SNAPSHOT\" );\n            setVariableValueToObject( invokerMojo, \"interpolationsProperties\", properties );\n            String dirPath = getBasedir() + File.separatorChar + \"src\" + File.separatorChar + \"test\"\n                + File.separatorChar + \"resources\" + File.separatorChar + \"unit\" + File.separatorChar + \"interpolation\";\n            \n            interpolatedPomFile = new File( getBasedir(), \"target/interpolated-pom.xml\" );\n            invokerMojo.buildInterpolatedFile( new File( dirPath, \"pom.xml\" ), interpolatedPomFile );\n            reader = ReaderFactory.newXmlReader( interpolatedPomFile );\n            String content = IOUtil.toString( reader );\n            assertTrue( content.indexOf( \"<interpolateValue>bar<\/interpolateValue>\" ) > 0 );\n            reader.close();\n            // recreate it to test delete if exists before creation\n            invokerMojo.buildInterpolatedFile( new File( dirPath, \"pom.xml\" ), interpolatedPomFile );\n            reader = ReaderFactory.newXmlReader( interpolatedPomFile );\n            content = IOUtil.toString( reader );\n            assertTrue( content.indexOf( \"<interpolateValue>bar<\/interpolateValue>\" ) > 0 );\n            reader.close();\n        }\n        finally\n        {\n            IOUtil.close( reader );\n        }\n    }","commit_id":"3ffe580c53cc378a72241099f9b8802f6f54d919","url":"https://github.com/apache/maven-plugins"},{"original_method":"public void testProfilesFromFile()\n        throws Exception\n    {\n        InvokerMojo invokerMojo = new InvokerMojo();\n        setVariableValueToObject( invokerMojo, \"profilesFile\", \"profiles.txt\" );\n        String dirPath = getBasedir() + File.separatorChar + \"src\" + File.separatorChar + \"test\" + File.separatorChar\n            + \"resources\" + File.separatorChar + \"unit\" + File.separatorChar + \"profiles-from-file\";\n        List profiles = invokerMojo.getProfiles( new File( dirPath ) );\n        assertEquals( 2, profiles.size() );\n        assertTrue( profiles.contains( \"foo\" ) );\n    }","id":46398,"modified_method":"public void testProfilesFromFile()\n        throws Exception\n    {\n        InvokerMojo invokerMojo = new InvokerMojo();\n        setVariableValueToObject( invokerMojo, \"project\", buildMavenProjectStub() );\n        setVariableValueToObject( invokerMojo, \"profilesFile\", \"profiles.txt\" );\n        String dirPath = getBasedir() + File.separatorChar + \"src\" + File.separatorChar + \"test\" + File.separatorChar\n            + \"resources\" + File.separatorChar + \"unit\" + File.separatorChar + \"profiles-from-file\";\n        List profiles = invokerMojo.getProfiles( new File( dirPath ) );\n        assertEquals( 2, profiles.size() );\n        assertTrue( profiles.contains( \"foo\" ) );\n    }","commit_id":"3ffe580c53cc378a72241099f9b8802f6f54d919","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Copies the specified IT projects to the directory given by {@link #cloneProjectsTo}. A project may either be\n     * denoted by a path to a POM file or merely by a path to a base directory.\n     * \n     * @param includedProjects The paths to the IT projects, relative to the projects directory, must not be\n     *            <code>null<\/code>.\n     * @throws IOException The the projects could not be copied.\n     */\n    private void cloneProjects( String[] includedProjects )\n        throws IOException\n    {\n        List clonedSubpaths = new ArrayList();\n\n        for ( int i = 0; i < includedProjects.length; i++ )\n        {\n            String subpath = includedProjects[i];\n            if ( !new File( projectsDirectory, subpath ).isDirectory() )\n            {\n                int lastSep = subpath.lastIndexOf( File.separator );\n                if ( lastSep > -1 )\n                {\n                    subpath = subpath.substring( 0, lastSep );\n                }\n                else\n                {\n                    subpath = \".\";\n                }\n            }\n\n            // avoid copying subdirs that are already cloned.\n            if ( !alreadyCloned( subpath, clonedSubpaths ) )\n            {\n                // avoid creating new files that point to dir/.\n                if ( \".\".equals( subpath ) )\n                {\n                    String cloneSubdir = normalizePath( cloneProjectsTo, projectsDirectory.getCanonicalPath() );\n\n                    // avoid infinite recursion if the cloneTo path is a subdirectory.\n                    if ( cloneSubdir != null )\n                    {\n                        File temp = File.createTempFile( \"pre-invocation-clone.\", \"\" );\n                        temp.delete();\n                        temp.mkdirs();\n\n                        copyDirectoryStructure( projectsDirectory, temp );\n\n                        FileUtils.deleteDirectory( new File( temp, cloneSubdir ) );\n\n                        copyDirectoryStructure( temp, cloneProjectsTo );\n                    }\n                    else\n                    {\n                        copyDirectoryStructure( projectsDirectory, cloneProjectsTo );\n                    }\n                }\n                else\n                {\n                    copyDirectoryStructure( new File( projectsDirectory, subpath ), new File( cloneProjectsTo,\n                                                                                              subpath ) );\n                }\n\n                clonedSubpaths.add( subpath );\n            }\n        }\n    }","id":46399,"modified_method":"/**\n     * Copies the specified IT projects to the directory given by {@link #cloneProjectsTo}. A project may either be\n     * denoted by a path to a POM file or merely by a path to a base directory.\n     * \n     * @param includedProjects The paths to the IT projects, relative to the projects directory, must not be\n     *            <code>null<\/code>.\n     * @throws IOException The the projects could not be copied.\n     */\n    private void cloneProjects( String[] includedProjects )\n        throws IOException\n    {\n        cloneProjectsTo.mkdirs();\n\n        List clonedSubpaths = new ArrayList();\n\n        for ( int i = 0; i < includedProjects.length; i++ )\n        {\n            String subpath = includedProjects[i];\n            if ( !new File( projectsDirectory, subpath ).isDirectory() )\n            {\n                int lastSep = subpath.lastIndexOf( File.separator );\n                if ( lastSep > -1 )\n                {\n                    subpath = subpath.substring( 0, lastSep );\n                }\n                else\n                {\n                    subpath = \".\";\n                }\n            }\n\n            // avoid copying subdirs that are already cloned.\n            if ( !alreadyCloned( subpath, clonedSubpaths ) )\n            {\n                // avoid creating new files that point to dir/.\n                if ( \".\".equals( subpath ) )\n                {\n                    String cloneSubdir = normalizePath( cloneProjectsTo, projectsDirectory.getCanonicalPath() );\n\n                    // avoid infinite recursion if the cloneTo path is a subdirectory.\n                    if ( cloneSubdir != null )\n                    {\n                        File temp = File.createTempFile( \"pre-invocation-clone.\", \"\" );\n                        temp.delete();\n                        temp.mkdirs();\n\n                        copyDirectoryStructure( projectsDirectory, temp );\n\n                        FileUtils.deleteDirectory( new File( temp, cloneSubdir ) );\n\n                        copyDirectoryStructure( temp, cloneProjectsTo );\n                    }\n                    else\n                    {\n                        copyDirectoryStructure( projectsDirectory, cloneProjectsTo );\n                    }\n                }\n                else\n                {\n                    copyDirectoryStructure( new File( projectsDirectory, subpath ), new File( cloneProjectsTo,\n                                                                                              subpath ) );\n                }\n\n                clonedSubpaths.add( subpath );\n            }\n        }\n    }","commit_id":"3ffe580c53cc378a72241099f9b8802f6f54d919","url":"https://github.com/apache/maven-plugins"},{"original_method":"private Properties loadTestProperties( final File basedir )\n        throws IOException\n    {\n        final Properties testProps = new Properties();\n\n        if ( testPropertiesFile != null )\n        {\n            final File testProperties = new File( basedir, testPropertiesFile );\n\n            if ( testProperties.exists() )\n            {\n                InputStream fin = null;\n                try\n                {\n                    fin = new FileInputStream( testProperties );\n\n                    testProps.load( fin );\n                }\n                finally\n                {\n                    IOUtil.close( fin );\n                }\n            }\n        }\n\n        return testProps;\n    }","id":46400,"modified_method":"/**\n     * Reads the system properties to use for the specified project (if any).\n     * \n     * @param basedir The base directory of the project, must not be <code>null<\/code>.\n     * @return The system properties to use, may be empty but never <code>null<\/code>.\n     * @throws MojoExecutionException If the properties file exists but could not be read.\n     */\n    private Properties loadTestProperties( final File basedir )\n        throws MojoExecutionException\n    {\n        final Properties testProps = new Properties();\n\n        if ( testPropertiesFile != null )\n        {\n            final File testProperties = new File( basedir, testPropertiesFile );\n\n            if ( testProperties.exists() )\n            {\n                InputStream fin = null;\n                try\n                {\n                    fin = new FileInputStream( testProperties );\n\n                    testProps.load( fin );\n                }\n                catch ( IOException e )\n                {\n                    throw new MojoExecutionException( \"Error reading system properties for test: \"\n                        + testPropertiesFile );\n                }\n                finally\n                {\n                    IOUtil.close( fin );\n                }\n            }\n        }\n\n        return testProps;\n    }","commit_id":"3ffe580c53cc378a72241099f9b8802f6f54d919","url":"https://github.com/apache/maven-plugins"},{"original_method":"private boolean prebuild( final File basedir, final FileLogger logger )\n    {\n        boolean result = true;\n\n        if ( preBuildHookScript != null )\n        {\n            result = runScript( \"pre-build script\", basedir, preBuildHookScript, logger );\n        }\n\n        return result;\n    }","id":46401,"modified_method":"/**\n     * Runs the pre-build-hook script of the specified project (if any).\n     * \n     * @param basedir The base directory of the project, must not be <code>null<\/code>.\n     * @param logger The logger to redirect the script output to, may be <code>null<\/code> to use stdout/stderr.\n     * @return <code>true<\/code> if the script does not exist or completed successfully, <code>false<\/code> otherwise.\n     * @throws MojoExecutionException If an I/O error occurred while reading the script file.\n     */\n    private boolean prebuild( final File basedir, final FileLogger logger )\n        throws MojoExecutionException\n    {\n        boolean result = true;\n\n        if ( preBuildHookScript != null )\n        {\n            result = runScript( \"pre-build script\", basedir, preBuildHookScript, logger );\n        }\n\n        return result;\n    }","commit_id":"3ffe580c53cc378a72241099f9b8802f6f54d919","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Gets the (interpolated) invoker properties for an integration test.\n     * \n     * @param projectDirectory The base directory of the IT project, must not be <code>null<\/code>.\n     * @return The invoker properties, may be empty but never <code>null<\/code>.\n     * @throws MojoExecutionException If an error occurred.\n     */\n    private Properties getInvokerProperties( final File projectDirectory )\n        throws MojoExecutionException\n    {\n        Properties props = new Properties();\n        if ( invokerPropertiesFile != null )\n        {\n            File propertiesFile = new File( projectDirectory, invokerPropertiesFile );\n            if ( propertiesFile.isFile() )\n            {\n                InputStream in = null;\n                try\n                {\n                    in = new FileInputStream( propertiesFile );\n                    props.load( in );\n                }\n                catch ( IOException e )\n                {\n                    throw new MojoExecutionException( \"Failed to read invoker properties: \" + propertiesFile, e );\n                }\n                finally\n                {\n                    IOUtil.close( in );\n                }\n            }\n\n            Map filter = new CompositeMap( project, this.interpolationsProperties );\n            Interpolator interpolator = new RegexBasedInterpolator();\n            interpolator.addValueSource( new MapBasedValueSource( filter ) );\n            for ( Iterator it = props.keySet().iterator(); it.hasNext(); )\n            {\n                String key = (String) it.next();\n                String value = props.getProperty( key );\n                try\n                {\n                    value = interpolator.interpolate( value, \"\" );\n                }\n                catch ( InterpolationException e )\n                {\n                    throw new MojoExecutionException( \"Failed to interpolate invoker properties: \" + propertiesFile,\n                                                      e );\n                }\n                props.setProperty( key, value );\n            }\n        }\n        return props;\n    }","id":46402,"modified_method":"/**\n     * Interpolates the specified POM/settings file to a temporary file.\n     * \n     * @param originalFile The XML file to interpolate, must not be <code>null<\/code>.\n     * @param interpolatedFile The target file to write the interpolated contents of the original file to, must not be\n     *            <code>null<\/code>.\n     * @throws MojoExecutionException If the target file could not be created.\n     */\n    void buildInterpolatedFile( File originalFile, File interpolatedFile )\n        throws MojoExecutionException\n    {\n        if ( interpolatedFile.exists() )\n        {\n            interpolatedFile.delete();\n        }\n        interpolatedFile.deleteOnExit();\n        try\n        {\n            if ( !interpolatedFile.createNewFile() )\n            {\n                throw new MojoExecutionException( \"failed to create file \" + interpolatedFile.getPath() );\n            }\n        }\n        catch ( IOException e )\n        {\n            throw new MojoExecutionException( \"failed to create file \" + interpolatedFile.getPath(), e );\n        }\n        getLog().debug( \"interpolate file to create interpolated in \" + interpolatedFile.getPath() );\n\n        if ( settings.getLocalRepository() != null )\n        {\n            if ( this.interpolationsProperties == null )\n            {\n                this.interpolationsProperties = new Properties();\n            }\n            this.interpolationsProperties.put( \"localRepository\", settings.getLocalRepository() );\n        }\n        Map composite = new CompositeMap( this.project, this.interpolationsProperties );\n\n        BufferedReader reader = null;\n        Writer writer = null;\n        try\n        {\n            // interpolation with token @...@\n            reader =\n                new BufferedReader( new InterpolationFilterReader( ReaderFactory.newXmlReader( originalFile ),\n                                                                   composite, \"@\", \"@\" ) );\n            writer = WriterFactory.newXmlWriter( interpolatedFile );\n            String line = null;\n            while ( ( line = reader.readLine() ) != null )\n            {\n                writer.write( line );\n            }\n            writer.flush();\n        }\n        catch ( IOException e )\n        {\n            throw new MojoExecutionException( \"failed to interpolate file \" + originalFile.getPath(), e );\n        }\n        finally\n        {\n            // IOUtil in p-u is null check and silently NPE\n            IOUtil.close( reader );\n            IOUtil.close( writer );\n        }\n    }","commit_id":"3ffe580c53cc378a72241099f9b8802f6f54d919","url":"https://github.com/apache/maven-plugins"},{"original_method":"List getProfiles( File projectDirectory )\n        throws MojoExecutionException\n    {\n        if ( profilesFile == null )\n        {\n            return profiles == null ? Collections.EMPTY_LIST : profiles;\n        }\n        File projectProfilesFile = new File( projectDirectory, profilesFile );\n        if ( !projectProfilesFile.exists() )\n        {\n            return profiles == null ? Collections.EMPTY_LIST : profiles;\n        }\n        BufferedReader reader = null;\n        try\n        {\n            List profilesInFiles = new ArrayList();\n            reader = new BufferedReader( newReader( projectProfilesFile ) );\n            String line = null;\n            while ( ( line = reader.readLine() ) != null )\n            {\n                profilesInFiles.addAll( collectListFromCSV( line ) );\n            }\n            return profilesInFiles;\n        }\n        catch ( FileNotFoundException e )\n        {\n            // as we check first if the file it should not happened\n            throw new MojoExecutionException( projectProfilesFile + \" not found \", e );\n        }\n        catch ( IOException e )\n        {\n            throw new MojoExecutionException( \"error reading profile in file \" + projectProfilesFile + \" not found \",\n                                              e );\n        }\n        finally\n        {\n            IOUtil.close( reader );\n        }\n    }","id":46403,"modified_method":"/**\n     * Gets the profile list for the specified project.\n     * \n     * @param basedir The base directory of the project, must not be <code>null<\/code>.\n     * @return The list of profiles to activate when building the project, may be empty but never <code>null<\/code>.\n     * @throws MojoExecutionException If the profile file could not be read.\n     */\n    List getProfiles( File basedir )\n        throws MojoExecutionException\n    {\n        try\n        {\n            return getTokens( basedir, profilesFile, profiles );\n        }\n        catch ( IOException e )\n        {\n            throw new MojoExecutionException( \"error reading profiles\", e );\n        }\n    }","commit_id":"3ffe580c53cc378a72241099f9b8802f6f54d919","url":"https://github.com/apache/maven-plugins"},{"original_method":"private List collectListFromCSV( final String csv )\n    {\n        final List result = new ArrayList();\n\n        if ( ( csv != null ) && ( csv.trim().length() > 0 ) )\n        {\n            final StringTokenizer st = new StringTokenizer( csv, \",\" );\n\n            while ( st.hasMoreTokens() )\n            {\n                result.add( st.nextToken().trim() );\n            }\n        }\n\n        return result;\n    }","id":46404,"modified_method":"/**\n     * Gets a list of comma separated tokens from the specified line.\n     * \n     * @param csv The line with comma separated tokens, may be <code>null<\/code>.\n     * @return The list of tokens from the line, may be empty but never <code>null<\/code>.\n     */\n    private List collectListFromCSV( final String csv )\n    {\n        final List result = new ArrayList();\n\n        if ( ( csv != null ) && ( csv.trim().length() > 0 ) )\n        {\n            final StringTokenizer st = new StringTokenizer( csv, \",\" );\n\n            while ( st.hasMoreTokens() )\n            {\n                result.add( st.nextToken().trim() );\n            }\n        }\n\n        return result;\n    }","commit_id":"3ffe580c53cc378a72241099f9b8802f6f54d919","url":"https://github.com/apache/maven-plugins"},{"original_method":"public void execute()\n        throws MojoExecutionException, MojoFailureException\n    {\n        if ( skipInvocation )\n        {\n            getLog().info( \"Skipping invocation per configuration.\"\n                + \" If this is incorrect, ensure the skipInvocation parameter is not set to true.\" );\n            return;\n        }\n\n        String[] includedPoms;\n        if ( pom != null )\n        {\n            try\n            {\n                projectsDirectory = pom.getCanonicalFile().getParentFile();\n            }\n            catch ( IOException e )\n            {\n                throw new MojoExecutionException( \"Failed to discover projectsDirectory from pom File parameter.\"\n                    + \" Reason: \" + e.getMessage(), e );\n            }\n\n            includedPoms = new String[]{ pom.getName() };\n        }\n        else\n        {\n            try\n            {\n                includedPoms = getPoms();\n            }\n            catch ( final IOException e )\n            {\n                throw new MojoExecutionException( \"Error retrieving POM list from includes, excludes, \"\n                                + \"and projects directory. Reason: \" + e.getMessage(), e );\n            }\n        }\n\n\n        if ( ( includedPoms == null ) || ( includedPoms.length < 1 ) )\n        {\n            getLog().info( \"No test-projects were selected for execution.\" );\n            return;\n        }\n\n        if ( StringUtils.isEmpty( encoding ) )\n        {\n            getLog().warn(\n                           \"File encoding has not been set, using platform encoding \" + ReaderFactory.FILE_ENCODING\n                               + \", i.e. build is platform dependent!\" );\n        }\n\n        scriptInterpreters = new LinkedHashMap();\n        scriptInterpreters.put( \"bsh\", new BeanShellScriptInterpreter() );\n        scriptInterpreters.put( \"groovy\", new GroovyScriptInterpreter() );\n\n        File projectsDir = projectsDirectory;\n\n        if ( cloneProjectsTo != null )\n        {\n            cloneProjectsTo.mkdirs();\n\n            try\n            {\n                cloneProjects( includedPoms );\n            }\n            catch ( IOException e )\n            {\n                throw new MojoExecutionException( \"Failed to clone projects from: \" + projectsDirectory + \" to: \"\n                    + cloneProjectsTo + \". Reason: \" + e.getMessage(), e );\n            }\n\n            projectsDir = cloneProjectsTo;\n        }\n\n        final List failures = new ArrayList();\n\n        for ( int i = 0; i < includedPoms.length; i++ )\n        {\n            final String pom = includedPoms[i];\n\n            runBuild( projectsDir, pom, failures );\n        }\n\n\n        if ( !suppressSummaries )\n        {\n            final StringBuffer summary = new StringBuffer();\n            summary.append( \"\\n\\n\" );\n            summary.append( \"---------------------------------------\\n\" );\n            summary.append( \"Execution Summary:\\n\" );\n            summary.append( \"Builds Passing: \" ).append( includedPoms.length - failures.size() ).append( \"\\n\" );\n            summary.append( \"Builds Failing: \" ).append( failures.size() ).append( \"\\n\" );\n            summary.append( \"---------------------------------------\\n\" );\n\n            if ( !failures.isEmpty() )\n            {\n                summary.append( \"\\nThe following builds failed:\\n\" );\n\n                for ( final Iterator it = failures.iterator(); it.hasNext(); )\n                {\n                    final String pom = ( String ) it.next();\n                    summary.append( \"\\n*  \" ).append( pom );\n                }\n\n                summary.append( \"\\n\" );\n            }\n\n            getLog().info( summary.toString() );\n        }\n\n        if ( !failures.isEmpty() )\n        {\n            String message = failures.size() + \" builds failed.\";\n\n            throw new MojoFailureException( this, message, message );\n        }\n    }","id":46405,"modified_method":"/**\n     * Invokes Maven on the configured test projects.\n     * \n     * @throws MojoExecutionException If the goal encountered severe errors.\n     * @throws MojoFailureException If any of the Maven builds failed.\n     */\n    public void execute()\n        throws MojoExecutionException, MojoFailureException\n    {\n        if ( skipInvocation )\n        {\n            getLog().info( \"Skipping invocation per configuration.\"\n                + \" If this is incorrect, ensure the skipInvocation parameter is not set to true.\" );\n            return;\n        }\n\n        String[] includedPoms;\n        if ( pom != null )\n        {\n            try\n            {\n                projectsDirectory = pom.getCanonicalFile().getParentFile();\n            }\n            catch ( IOException e )\n            {\n                throw new MojoExecutionException( \"Failed to discover projectsDirectory from pom File parameter.\"\n                    + \" Reason: \" + e.getMessage(), e );\n            }\n\n            includedPoms = new String[]{ pom.getName() };\n        }\n        else\n        {\n            try\n            {\n                includedPoms = getPoms();\n            }\n            catch ( final IOException e )\n            {\n                throw new MojoExecutionException( \"Error retrieving POM list from includes, excludes, \"\n                                + \"and projects directory. Reason: \" + e.getMessage(), e );\n            }\n        }\n\n\n        if ( ( includedPoms == null ) || ( includedPoms.length < 1 ) )\n        {\n            getLog().info( \"No test projects were selected for execution.\" );\n            return;\n        }\n\n        if ( StringUtils.isEmpty( encoding ) )\n        {\n            getLog().warn(\n                           \"File encoding has not been set, using platform encoding \" + ReaderFactory.FILE_ENCODING\n                               + \", i.e. build is platform dependent!\" );\n        }\n\n        scriptInterpreters = new LinkedHashMap();\n        scriptInterpreters.put( \"bsh\", new BeanShellScriptInterpreter() );\n        scriptInterpreters.put( \"groovy\", new GroovyScriptInterpreter() );\n\n        File projectsDir = projectsDirectory;\n\n        if ( cloneProjectsTo != null )\n        {\n            try\n            {\n                cloneProjects( includedPoms );\n            }\n            catch ( IOException e )\n            {\n                throw new MojoExecutionException( \"Failed to clone projects from: \" + projectsDirectory + \" to: \"\n                    + cloneProjectsTo + \". Reason: \" + e.getMessage(), e );\n            }\n\n            projectsDir = cloneProjectsTo;\n        }\n\n        final List failures = new ArrayList();\n\n        for ( int i = 0; i < includedPoms.length; i++ )\n        {\n            final String pom = includedPoms[i];\n\n            runBuild( projectsDir, pom, failures );\n        }\n\n\n        if ( !suppressSummaries )\n        {\n            final StringBuffer summary = new StringBuffer();\n            summary.append( \"\\n\\n\" );\n            summary.append( \"---------------------------------------\\n\" );\n            summary.append( \"Execution Summary:\\n\" );\n            summary.append( \"Builds Passing: \" ).append( includedPoms.length - failures.size() ).append( \"\\n\" );\n            summary.append( \"Builds Failing: \" ).append( failures.size() ).append( \"\\n\" );\n            summary.append( \"---------------------------------------\\n\" );\n\n            if ( !failures.isEmpty() )\n            {\n                summary.append( \"\\nThe following builds failed:\\n\" );\n\n                for ( final Iterator it = failures.iterator(); it.hasNext(); )\n                {\n                    final String pom = ( String ) it.next();\n                    summary.append( \"\\n*  \" ).append( pom );\n                }\n\n                summary.append( \"\\n\" );\n            }\n\n            getLog().info( summary.toString() );\n        }\n\n        if ( !failures.isEmpty() )\n        {\n            String message = failures.size() + \" builds failed.\";\n\n            throw new MojoFailureException( this, message, message );\n        }\n    }","commit_id":"3ffe580c53cc378a72241099f9b8802f6f54d919","url":"https://github.com/apache/maven-plugins"},{"original_method":"private boolean verify( final File basedir, final FileLogger logger )\n    {\n        boolean result = true;\n\n        if ( postBuildHookScript != null )\n        {\n            result = runScript( \"verification script\", basedir, postBuildHookScript, logger );\n        }\n\n        return result;\n    }","id":46406,"modified_method":"/**\n     * Runs the post-build-hook script of the specified project (if any).\n     * \n     * @param basedir The base directory of the project, must not be <code>null<\/code>.\n     * @param logger The logger to redirect the script output to, may be <code>null<\/code> to use stdout/stderr.\n     * @return <code>true<\/code> if the script does not exist or completed successfully, <code>false<\/code> otherwise.\n     * @throws MojoExecutionException If an I/O error occurred while reading the script file.\n     */\n    private boolean verify( final File basedir, final FileLogger logger )\n        throws MojoExecutionException\n    {\n        boolean result = true;\n\n        if ( postBuildHookScript != null )\n        {\n            result = runScript( \"verification script\", basedir, postBuildHookScript, logger );\n        }\n\n        return result;\n    }","commit_id":"3ffe580c53cc378a72241099f9b8802f6f54d919","url":"https://github.com/apache/maven-plugins"},{"original_method":"private boolean runScript( final String scriptDescription, final File basedir, final String relativeScriptPath,\n                               final FileLogger logger )\n    {\n        final File scriptFile = resolveScript( new File( basedir, relativeScriptPath ) );\n\n        if ( scriptFile.exists() )\n        {\n            List classPath = addTestClassPath ? testClassPath : Collections.EMPTY_LIST;\n\n            Map globalVariables = new HashMap();\n            globalVariables.put( \"basedir\", basedir );\n\n            PrintStream out = noLog ? null : logger.getPrintStream();\n\n            ScriptInterpreter interpreter = getInterpreter( scriptFile );\n            if ( getLog().isDebugEnabled() )\n            {\n                String name = interpreter.getClass().getName();\n                name = name.substring( name.lastIndexOf( '.' ) + 1 );\n                getLog().debug( \"Running script with \" + name );\n            }\n\n            String script;\n            try\n            {\n                script = FileUtils.fileRead( scriptFile, encoding );\n            }\n            catch ( IOException e )\n            {\n                String errorMessage =\n                    \"error reading \" + scriptDescription + \" \" + basedir.getPath() + File.separatorChar\n                        + postBuildHookScript + \", \" + e.getMessage();\n                getLog().error( errorMessage, e );\n                return false;\n            }\n\n            try\n            {\n                if ( !noLog )\n                {\n                    logger.consumeLine( \"Running \" + scriptDescription + \" in: \" + scriptFile );\n                }\n                Object result = interpreter.evaluateScript( script, classPath, globalVariables, out );\n                if ( !noLog )\n                {\n                    logger.consumeLine( \"Finished \" + scriptDescription + \" in: \" + scriptFile );\n                }\n                return Boolean.TRUE.equals( result ) || \"true\".equals( result );\n            }\n            catch ( Exception e )\n            {\n                String errorMessage =\n                    \"error evaluating \" + scriptDescription + \" \" + basedir.getPath() + File.separatorChar\n                        + postBuildHookScript + \", \" + e.getMessage();\n                getLog().error( errorMessage, e );\n                return false;\n            }\n\n        }\n\n        return true;\n    }","id":46407,"modified_method":"/**\n     * Runs the specified hook script of the specified project (if any).\n     * \n     * @param scriptDescription The description of the script to use for logging, must not be <code>null<\/code>.\n     * @param basedir The base directory of the project, must not be <code>null<\/code>.\n     * @param relativeScriptPath The path to the script relative to the project base directory, must not be\n     *            <code>null<\/code>.\n     * @param logger The logger to redirect the script output to, may be <code>null<\/code> to use stdout/stderr.\n     * @return <code>true<\/code> if the script does not exist or completed successfully, <code>false<\/code> otherwise.\n     * @throws MojoExecutionException If an I/O error occurred while reading the script file.\n     */\n    private boolean runScript( final String scriptDescription, final File basedir, final String relativeScriptPath,\n                               final FileLogger logger )\n        throws MojoExecutionException\n    {\n        final File scriptFile = resolveScript( new File( basedir, relativeScriptPath ) );\n\n        if ( scriptFile.exists() )\n        {\n            List classPath = addTestClassPath ? testClassPath : Collections.EMPTY_LIST;\n\n            Map globalVariables = new HashMap();\n            globalVariables.put( \"basedir\", basedir );\n\n            PrintStream out = ( logger != null ) ? logger.getPrintStream() : null;\n\n            ScriptInterpreter interpreter = getInterpreter( scriptFile );\n            if ( getLog().isDebugEnabled() )\n            {\n                String name = interpreter.getClass().getName();\n                name = name.substring( name.lastIndexOf( '.' ) + 1 );\n                getLog().debug( \"Running script with \" + name );\n            }\n\n            String script;\n            try\n            {\n                script = FileUtils.fileRead( scriptFile, encoding );\n            }\n            catch ( IOException e )\n            {\n                String errorMessage =\n                    \"error reading \" + scriptDescription + \" \" + basedir.getPath() + File.separatorChar\n                        + postBuildHookScript + \", \" + e.getMessage();\n                throw new MojoExecutionException( errorMessage, e );\n            }\n\n            try\n            {\n                if ( logger != null )\n                {\n                    logger.consumeLine( \"Running \" + scriptDescription + \" in: \" + scriptFile );\n                }\n                Object result = interpreter.evaluateScript( script, classPath, globalVariables, out );\n                if ( logger != null )\n                {\n                    logger.consumeLine( \"Finished \" + scriptDescription + \" in: \" + scriptFile );\n                }\n                return Boolean.TRUE.equals( result ) || \"true\".equals( result );\n            }\n            catch ( Exception e )\n            {\n                String errorMessage =\n                    \"error evaluating \" + scriptDescription + \" \" + basedir.getPath() + File.separatorChar\n                        + postBuildHookScript + \", \" + e.getMessage();\n                getLog().error( errorMessage, e );\n                return false;\n            }\n\n        }\n\n        return true;\n    }","commit_id":"3ffe580c53cc378a72241099f9b8802f6f54d919","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Runs the specified IT project.\n     * \n     * @param projectsDir The base directory of all IT projects, must not be <code>null<\/code>.\n     * @param project The relative path to the IT project, either to a POM file or merely to a directory, must not be\n     *            <code>null<\/code>.\n     * @param failures The list to record build failures in, must not be <code>null<\/code>.\n     * @throws MojoExecutionException If the IT project could not be launched.\n     */\n    private void runBuild( final File projectsDir, String project, final List failures )\n        throws MojoExecutionException\n    {\n        File pomFile = new File( projectsDir, project );\n        File basedir;\n        if ( pomFile.isDirectory() )\n        {\n            basedir = pomFile;\n            pomFile = new File( basedir, \"pom.xml\" );\n            if ( !pomFile.exists() )\n            {\n                pomFile = null;\n            }\n            else\n            {\n                project += File.separator + \"pom.xml\";\n            }\n        }\n        else\n        {\n            basedir = pomFile.getParentFile();\n        }\n        File interpolatedPomFile = null;\n        if ( pomFile != null )\n        {\n            interpolatedPomFile = buildInterpolatedFile( pomFile, basedir, \"interpolated-pom.xml\" );\n        }\n\n        FileLogger logger = null;\n        try\n        {\n            getLog().info( \"Building: \" + project );\n\n            final File outputLog = new File( basedir, \"build.log\" );\n\n            final Properties invokerProperties = getInvokerProperties( basedir );\n            if ( getLog().isDebugEnabled() && !invokerProperties.isEmpty() )\n            {\n                getLog().debug( \"Using invoker properties:\" );\n                for ( Iterator it = new TreeSet( invokerProperties.keySet() ).iterator(); it.hasNext(); )\n                {\n                    String key = (String) it.next();\n                    String value = invokerProperties.getProperty( key );\n                    getLog().debug( \"  \" + key + \" = \" + value );\n                }\n            }\n\n            if ( !noLog )\n            {\n                outputLog.getParentFile().mkdirs();\n\n                try\n                {\n                    if ( streamLogs )\n                    {\n                        logger = new FileLogger( outputLog, getLog() );\n                    }\n                    else\n                    {\n                        logger = new FileLogger( outputLog );\n                    }\n\n                    getLog().debug( \"build log initialized in: \" + outputLog );\n                }\n                catch ( final IOException e )\n                {\n                    getLog().debug( \"Error initializing build logfile in: \" + outputLog, e );\n                    getLog().info( \"...FAILED[could not initialize logfile in: \" + outputLog + \"]\" );\n\n                    failures.add( project );\n\n                    return;\n                }\n            }\n\n            if ( !prebuild( basedir, logger ) )\n            {\n                getLog().info( \"...FAILED[pre-build script returned false]\" );\n\n                failures.add( project );\n\n                return;\n            }\n\n            final InvocationRequest request = new DefaultInvocationRequest();\n\n            final List invocationGoals = getGoals( basedir );\n\n            if ( ( invocationGoals.size() == 1 ) && \"_default\".equals( invocationGoals.get( 0 ) ) )\n            {\n                getLog().debug( \"Executing default goal for project in: \" + project );\n            }\n            else\n            {\n                getLog().debug( \"Executing goals: \" + invocationGoals + \" for project in: \" + project );\n\n                request.setGoals( invocationGoals );\n            }\n\n            try\n            {\n                Properties collectedTestProperties = new Properties();\n\n                if ( testProperties != null )\n                {\n                    collectedTestProperties.putAll( testProperties );\n                }\n\n                if ( properties != null )\n                {\n                    collectedTestProperties.putAll( properties );\n                }\n\n                final Properties loadedProperties = loadTestProperties( basedir );\n\n                if ( loadedProperties != null )\n                {\n                    collectedTestProperties.putAll( loadedProperties );\n                }\n\n                request.setProperties( collectedTestProperties );\n            }\n            catch ( final IOException e )\n            {\n                getLog().debug( \"Error reading test-properties file in: \" + testPropertiesFile, e );\n                getLog().info( \"...FAILED[error reading test properties in: \" + testPropertiesFile + \"]\" );\n\n                failures.add( project );\n\n                return;\n            }\n\n            if ( localRepositoryPath != null )\n            {\n                File localRepoDir = localRepositoryPath;\n\n                getLog().debug( \"Using local repository: \" + localRepoDir );\n\n                if ( ! localRepositoryPath.exists() )\n                {\n                    localRepositoryPath.mkdirs();\n                }\n                \n                request.setLocalRepositoryDirectory( localRepoDir );\n            }\n\n            request.setInteractive( false );\n\n            request.setShowErrors( showErrors );\n\n            request.setDebug( debug );\n\n            request.setBaseDirectory( basedir );\n\n            if ( !noLog )\n            {\n                request.setErrorHandler( logger );\n\n                request.setOutputHandler( logger );\n            }\n\n            if ( interpolatedPomFile != null )\n            {\n                request.setPomFile( interpolatedPomFile );\n            }\n\n            request.setProfiles( getProfiles( basedir ) );\n\n            if ( settingsFile != null )\n            {\n                buildInterpolatedFile( settingsFile, settingsFile.getParentFile(), settingsFile.getName()\n                    + \".interpolated\" );\n                request.setUserSettingsFile( new File( settingsFile.getParentFile(), settingsFile.getName()\n                    + \".interpolated\" ) );\n            }\n\n            request.setMavenOpts( mavenOpts );\n\n            configureInvocation( request, invokerProperties );\n\n            try\n            {\n                getLog().debug( \"Using MAVEN_OPTS: \" + request.getMavenOpts() );\n                getLog().debug( \"Executing: \" + new MavenCommandLineBuilder().build( request ) );\n            }\n            catch ( CommandLineConfigurationException e )\n            {\n                getLog().debug( \"Failed to display command line: \" + e.getMessage() );\n            }\n\n            InvocationResult result = null;\n\n            try\n            {\n                result = invoker.execute( request );\n            }\n            catch ( final MavenInvocationException e )\n            {\n                getLog().debug( \"Error invoking Maven: \" + e.getMessage(), e );\n                getLog().info( \"...FAILED[error invoking Maven]\" );\n\n                failures.add( project );\n\n                return;\n            }\n\n            final CommandLineException executionException = result.getExecutionException();\n            final boolean nonZeroExit =\n                \"failure\".equalsIgnoreCase( invokerProperties.getProperty( \"invoker.buildResult\" ) );\n\n            if ( executionException != null )\n            {\n                if ( !suppressSummaries )\n                {\n                    StringBuffer buffer = new StringBuffer( 256 );\n                    buffer.append( \"...FAILED. \" );\n                    if ( !noLog )\n                    {\n                        buffer.append( \"See \" ).append( outputLog.getAbsolutePath() ).append( \" for details.\" );\n                    }\n                    else\n                    {\n                        buffer.append( \"See console output for details.\" );\n                    }\n                    getLog().info( buffer.toString() );\n                }\n\n                failures.add( project );\n            }\n            else if ( ( result.getExitCode() != 0 ) != nonZeroExit )\n            {\n                if ( !suppressSummaries )\n                {\n                    StringBuffer buffer = new StringBuffer( 256 );\n                    buffer.append( \"...FAILED[code=\" ).append( result.getExitCode() ).append( \"]. \" );\n                    if ( !noLog )\n                    {\n                        buffer.append( \"See \" ).append( outputLog.getAbsolutePath() ).append( \" for details.\" );\n                    }\n                    else\n                    {\n                        buffer.append( \"See console output for details.\" );\n                    }\n                    getLog().info( buffer.toString() );\n                }\n\n                failures.add( project );\n            }\n            else if ( !verify( basedir, logger ) )\n            {\n                if ( !suppressSummaries )\n                {\n                    getLog().info( \"...FAILED[verify script returned false].\" );\n                }\n\n                failures.add( project );\n            }\n            else if ( !suppressSummaries )\n            {\n                getLog().info( \"...SUCCESS.\" );\n            }\n        }\n        finally\n        {\n            if ( logger != null )\n            {\n                logger.close();\n            }\n        }\n    }","id":46408,"modified_method":"/**\n     * Runs the specified IT project.\n     * \n     * @param projectsDir The base directory of all IT projects, must not be <code>null<\/code>.\n     * @param project The relative path to the IT project, either to a POM file or merely to a directory, must not be\n     *            <code>null<\/code>.\n     * @param failures The list to record build failures in, must not be <code>null<\/code>.\n     * @throws MojoExecutionException If the IT project could not be launched.\n     */\n    private void runBuild( final File projectsDir, String project, final List failures )\n        throws MojoExecutionException\n    {\n        File pomFile = new File( projectsDir, project );\n        File basedir;\n        if ( pomFile.isDirectory() )\n        {\n            basedir = pomFile;\n            pomFile = new File( basedir, \"pom.xml\" );\n            if ( !pomFile.exists() )\n            {\n                pomFile = null;\n            }\n            else\n            {\n                project += File.separator + \"pom.xml\";\n            }\n        }\n        else\n        {\n            basedir = pomFile.getParentFile();\n        }\n\n        getLog().info( \"Building: \" + project );\n\n        final Properties invokerProperties = getInvokerProperties( basedir );\n        if ( getLog().isDebugEnabled() && !invokerProperties.isEmpty() )\n        {\n            getLog().debug( \"Using invoker properties:\" );\n            for ( Iterator it = new TreeSet( invokerProperties.keySet() ).iterator(); it.hasNext(); )\n            {\n                String key = (String) it.next();\n                String value = invokerProperties.getProperty( key );\n                getLog().debug( \"  \" + key + \" = \" + value );\n            }\n        }\n\n        File interpolatedPomFile = null;\n        if ( pomFile != null )\n        {\n            interpolatedPomFile = new File( basedir, \"interpolated-pom.xml\" );\n            buildInterpolatedFile( pomFile, interpolatedPomFile );\n        }\n\n        final Properties loadedProperties = loadTestProperties( basedir );\n\n        FileLogger logger = setupLogger( basedir );\n        try\n        {\n            if ( !prebuild( basedir, logger ) )\n            {\n                getLog().info( \"...FAILED[pre-build script returned false]\" );\n\n                failures.add( project );\n\n                return;\n            }\n\n            final InvocationRequest request = new DefaultInvocationRequest();\n\n            final List invocationGoals = getGoals( basedir );\n\n            if ( invocationGoals.isEmpty()\n                || ( invocationGoals.size() == 1 && \"_default\".equals( invocationGoals.get( 0 ) ) ) )\n            {\n                getLog().debug( \"Executing default goal for project in: \" + project );\n            }\n            else\n            {\n                getLog().debug( \"Executing goals: \" + invocationGoals + \" for project in: \" + project );\n\n                request.setGoals( invocationGoals );\n            }\n\n            Properties collectedTestProperties = new Properties();\n            if ( testProperties != null )\n            {\n                collectedTestProperties.putAll( testProperties );\n            }\n            if ( properties != null )\n            {\n                collectedTestProperties.putAll( properties );\n            }\n            if ( loadedProperties != null )\n            {\n                collectedTestProperties.putAll( loadedProperties );\n            }\n            request.setProperties( collectedTestProperties );\n\n            if ( localRepositoryPath != null )\n            {\n                File localRepoDir = localRepositoryPath;\n\n                getLog().debug( \"Using local repository: \" + localRepoDir );\n\n                if ( ! localRepositoryPath.exists() )\n                {\n                    localRepositoryPath.mkdirs();\n                }\n                \n                request.setLocalRepositoryDirectory( localRepoDir );\n            }\n\n            request.setInteractive( false );\n\n            request.setShowErrors( showErrors );\n\n            request.setDebug( debug );\n\n            request.setBaseDirectory( basedir );\n\n            if ( logger != null )\n            {\n                request.setErrorHandler( logger );\n\n                request.setOutputHandler( logger );\n            }\n\n            if ( interpolatedPomFile != null )\n            {\n                request.setPomFile( interpolatedPomFile );\n            }\n\n            request.setProfiles( getProfiles( basedir ) );\n\n            if ( settingsFile != null )\n            {\n                File interpolatedSettingsFile =\n                    new File( settingsFile.getParentFile(), \"interpolated-\" + settingsFile.getName() );\n                buildInterpolatedFile( settingsFile, interpolatedSettingsFile );\n                request.setUserSettingsFile( interpolatedSettingsFile );\n            }\n\n            request.setMavenOpts( mavenOpts );\n\n            configureInvocation( request, invokerProperties );\n\n            try\n            {\n                getLog().debug( \"Using MAVEN_OPTS: \" + request.getMavenOpts() );\n                getLog().debug( \"Executing: \" + new MavenCommandLineBuilder().build( request ) );\n            }\n            catch ( CommandLineConfigurationException e )\n            {\n                getLog().debug( \"Failed to display command line: \" + e.getMessage() );\n            }\n\n            InvocationResult result = null;\n\n            try\n            {\n                result = invoker.execute( request );\n            }\n            catch ( final MavenInvocationException e )\n            {\n                getLog().debug( \"Error invoking Maven: \" + e.getMessage(), e );\n                getLog().info( \"...FAILED[error invoking Maven]\" );\n\n                failures.add( project );\n\n                return;\n            }\n\n            final CommandLineException executionException = result.getExecutionException();\n            final boolean nonZeroExit =\n                \"failure\".equalsIgnoreCase( invokerProperties.getProperty( \"invoker.buildResult\" ) );\n\n            if ( executionException != null )\n            {\n                if ( !suppressSummaries )\n                {\n                    StringBuffer buffer = new StringBuffer( 256 );\n                    buffer.append( \"...FAILED. \" );\n                    if ( logger != null )\n                    {\n                        buffer.append( \"See \" );\n                        buffer.append( logger.getOutputFile().getAbsolutePath() );\n                        buffer.append( \" for details.\" );\n                    }\n                    else\n                    {\n                        buffer.append( \"See console output for details.\" );\n                    }\n                    getLog().info( buffer.toString() );\n                }\n\n                failures.add( project );\n            }\n            else if ( ( result.getExitCode() != 0 ) != nonZeroExit )\n            {\n                if ( !suppressSummaries )\n                {\n                    StringBuffer buffer = new StringBuffer( 256 );\n                    buffer.append( \"...FAILED[code=\" ).append( result.getExitCode() ).append( \"]. \" );\n                    if ( logger != null )\n                    {\n                        buffer.append( \"See \" );\n                        buffer.append( logger.getOutputFile().getAbsolutePath() );\n                        buffer.append( \" for details.\" );\n                    }\n                    else\n                    {\n                        buffer.append( \"See console output for details.\" );\n                    }\n                    getLog().info( buffer.toString() );\n                }\n\n                failures.add( project );\n            }\n            else if ( !verify( basedir, logger ) )\n            {\n                if ( !suppressSummaries )\n                {\n                    getLog().info( \"...FAILED[verify script returned false].\" );\n                }\n\n                failures.add( project );\n            }\n            else if ( !suppressSummaries )\n            {\n                getLog().info( \"...SUCCESS.\" );\n            }\n        }\n        finally\n        {\n            if ( logger != null )\n            {\n                logger.close();\n            }\n        }\n    }","commit_id":"3ffe580c53cc378a72241099f9b8802f6f54d919","url":"https://github.com/apache/maven-plugins"},{"original_method":"List getGoals( final File basedir )\n    {\n        List invocationGoals = goals;\n\n        if ( goalsFile != null )\n        {\n            final File projectGoalList = new File( basedir, goalsFile );\n\n            if ( projectGoalList.exists() )\n            {\n                final List goals = readFromFile( projectGoalList );\n\n                if ( ( goals != null ) && !goals.isEmpty() )\n                {\n                    getLog().debug( \"Using goals specified in file: \" + projectGoalList );\n                    invocationGoals = goals;\n                }\n            }\n        }\n\n        return invocationGoals;\n    }","id":46409,"modified_method":"/**\n     * Gets the goal list for the specified project.\n     * \n     * @param basedir The base directory of the project, must not be <code>null<\/code>.\n     * @return The list of goals to run when building the project, may be empty but never <code>null<\/code>.\n     * @throws MojoExecutionException If the profile file could not be read.\n     */\n    List getGoals( final File basedir )\n        throws MojoExecutionException\n    {\n        try\n        {\n            return getTokens( basedir, goalsFile, goals );\n        }\n        catch ( IOException e )\n        {\n            throw new MojoExecutionException( \"error reading goals\", e );\n        }\n    }","commit_id":"3ffe580c53cc378a72241099f9b8802f6f54d919","url":"https://github.com/apache/maven-plugins"},{"original_method":"private void replaceWithBlock(@NotNull PsiStatement statement, PsiStatement blockCandidate) {\n    if (!statement.isValid()) {\n      LOG.assertTrue(false);\n    }\n\n    if (!checkRangeContainsElement(blockCandidate)) return;\n\n    final PsiManager manager = statement.getManager();\n    LOG.assertTrue(manager != null);\n    final PsiElementFactory factory = JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();\n    \n    String oldText = blockCandidate.getText();\n    StringBuilder buf = new StringBuilder(oldText.length() + 3);\n    buf.append('{');\n    buf.append(oldText);\n    buf.append(\"\\n}\");\n    final int oldTextLength = statement.getTextLength();\n    try {\n      CodeEditUtil.replaceChild((CompositeElement)SourceTreeToPsiMap.psiElementToTree(statement),\n                                SourceTreeToPsiMap.psiElementToTree(blockCandidate),\n                                SourceTreeToPsiMap.psiElementToTree(factory.createStatementFromText(buf.toString(), null)));\n      CodeStyleManager.getInstance(statement.getProject()).reformat(statement, true);\n    }\n    catch (IncorrectOperationException e) {\n      LOG.error(e);\n    }\n    finally {\n      updateResultRange(oldTextLength , statement.getTextLength());\n    }\n  }","id":46410,"modified_method":"private void replaceWithBlock(@NotNull PsiStatement statement, PsiStatement blockCandidate) {\n    if (!statement.isValid()) {\n      LOG.assertTrue(false);\n    }\n\n    if (!checkRangeContainsElement(blockCandidate)) return;\n\n    final PsiManager manager = statement.getManager();\n    LOG.assertTrue(manager != null);\n    final PsiElementFactory factory = JavaPsiFacade.getInstance(manager.getProject()).getElementFactory();\n    \n    String oldText = blockCandidate.getText();\n    StringBuilder buf = new StringBuilder(oldText.length() + 3);\n    buf.append('{');\n    buf.append(oldText);\n    buf.append(\"\\n}\");\n    final int oldTextLength = statement.getTextLength();\n    try {\n      CodeEditUtil.replaceChild(SourceTreeToPsiMap.psiElementToTree(statement),\n                                SourceTreeToPsiMap.psiElementToTree(blockCandidate),\n                                SourceTreeToPsiMap.psiElementToTree(factory.createStatementFromText(buf.toString(), null)));\n      CodeStyleManager.getInstance(statement.getProject()).reformat(statement, true);\n    }\n    catch (IncorrectOperationException e) {\n      LOG.error(e);\n    }\n    finally {\n      updateResultRange(oldTextLength , statement.getTextLength());\n    }\n  }","commit_id":"c3dbd62af24e093e7ffa87e34ce4b8abbb2a11e7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void setUp() throws Exception {\n    super.setUp();\n    if (ourTestCase != null) {\n      String message = \"Previous test \" + ourTestCase +\n                       \" hasn't called tearDown(). Probably overriden without super call.\";\n      ourTestCase = null;\n      fail(message);\n    }\n    ourTestCase = this;\n    IdeaLogger.ourErrorsOccurred = null;\n\n    LOG.info(getClass().getName() + \".setUp()\");\n\n    String tempdirpath = ourOriginalTempDir + \"/tsttmp\" + ourTestCount + \"/\";\n    setTmpDir(tempdirpath);\n    new File(tempdirpath).mkdir();\n\n    initApplication();\n\n    setUpProject();\n    markProjectCreationPlace();\n    storeSettings();\n  }","id":46411,"modified_method":"protected void setUp() throws Exception {\n    super.setUp();\n    if (ourTestCase != null) {\n      String message = \"Previous test \" + ourTestCase +\n                       \" hasn't called tearDown(). Probably overriden without super call.\";\n      ourTestCase = null;\n      fail(message);\n    }\n    IdeaLogger.ourErrorsOccurred = null;\n\n    LOG.info(getClass().getName() + \".setUp()\");\n\n    String tempdirpath = ourOriginalTempDir + \"/tsttmp\" + ourTestCount + \"/\";\n    setTmpDir(tempdirpath);\n    new File(tempdirpath).mkdir();\n\n    initApplication();\n\n    setUpProject();\n    markProjectCreationPlace();\n    storeSettings();\n    ourTestCase = this;\n  }","commit_id":"c3dbd62af24e093e7ffa87e34ce4b8abbb2a11e7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private Pair<MutableTextRange, StringBuffer> getFragmentByRange(int start, final int length) {\n      final StringBuffer fragmentBuffer = new StringBuffer();\n      int end = start + length;\n\n      // restoring buffer and remove all subfragments from the list\n      int documentOffset = 0;\n      int effectiveOffset = 0;\n\n      Iterator<Pair<MutableTextRange, StringBuffer>> iterator = myAffectedFragments.iterator();\n      while (iterator.hasNext() && effectiveOffset <= end) {\n        final Pair<MutableTextRange, StringBuffer> pair = iterator.next();\n        final MutableTextRange range = pair.getFirst();\n        final StringBuffer buffer = pair.getSecond();\n        int effectiveFragmentEnd = range.getStartOffset() + buffer.length();\n\n        if(range.getStartOffset() <= start && effectiveFragmentEnd >= end) return pair;\n\n        if(effectiveFragmentEnd >= start){\n          final int effectiveStart = Math.max(effectiveOffset, start);\n          if(range.getStartOffset() > start){\n            fragmentBuffer.append(myDocument.getCharsSequence(),\n                                  effectiveStart - effectiveOffset + documentOffset,\n                                  Math.min(range.getStartOffset(), end)- effectiveOffset + documentOffset);\n          }\n          if(end >= range.getStartOffset()){\n            fragmentBuffer.append(buffer);\n            end = end > effectiveFragmentEnd ? end - (buffer.length() - range.getLength()) : range.getEndOffset();\n            effectiveFragmentEnd = range.getEndOffset();\n            start = Math.min(start, range.getStartOffset());\n            iterator.remove();\n          }\n        }\n\n        documentOffset += range.getEndOffset() - effectiveOffset;\n        effectiveOffset = effectiveFragmentEnd;\n      }\n\n      if(effectiveOffset < end){\n        final int effectiveStart = Math.max(effectiveOffset, start);\n        fragmentBuffer.append(myDocument.getCharsSequence(),\n                              effectiveStart - effectiveOffset + documentOffset,\n                              end- effectiveOffset + documentOffset);\n      }\n\n      final Pair<MutableTextRange, StringBuffer> pair = new Pair<MutableTextRange, StringBuffer>(new MutableTextRange(start, end), fragmentBuffer);\n      myAffectedFragments.add(pair);\n      return pair;\n    }","id":46412,"modified_method":"private Pair<MutableTextRange, StringBuffer> getFragmentByRange(int start, final int length) {\n      final StringBuffer fragmentBuffer = new StringBuffer();\n      int end = start + length;\n\n      // restoring buffer and remove all subfragments from the list\n      int documentOffset = 0;\n      int effectiveOffset = 0;\n\n      Iterator<Pair<MutableTextRange, StringBuffer>> iterator = myAffectedFragments.iterator();\n      while (iterator.hasNext() && effectiveOffset <= end) {\n        final Pair<MutableTextRange, StringBuffer> pair = iterator.next();\n        final MutableTextRange range = pair.getFirst();\n        final StringBuffer buffer = pair.getSecond();\n        int effectiveFragmentEnd = range.getStartOffset() + buffer.length();\n\n        if(range.getStartOffset() <= start && effectiveFragmentEnd >= end) return pair;\n\n        if(effectiveFragmentEnd >= start){\n          final int effectiveStart = Math.max(effectiveOffset, start);\n          if(range.getStartOffset() > start){\n            fragmentBuffer.append(myDocument.getCharsSequence(),\n                                  effectiveStart - effectiveOffset + documentOffset,\n                                  Math.min(range.getStartOffset(), end)- effectiveOffset + documentOffset);\n          }\n          if(end >= range.getStartOffset()){\n            fragmentBuffer.append(buffer);\n            end = end > effectiveFragmentEnd ? end - (buffer.length() - range.getLength()) : range.getEndOffset();\n            effectiveFragmentEnd = range.getEndOffset();\n            start = Math.min(start, range.getStartOffset());\n            iterator.remove();\n          }\n        }\n\n        documentOffset += range.getEndOffset() - effectiveOffset;\n        effectiveOffset = effectiveFragmentEnd;\n      }\n\n      if(effectiveOffset < end){\n        final int effectiveStart = Math.max(effectiveOffset, start);\n        fragmentBuffer.append(myDocument.getCharsSequence(),\n                              effectiveStart - effectiveOffset + documentOffset,\n                              end- effectiveOffset + documentOffset);\n      }\n\n      MutableTextRange newRange = new MutableTextRange(start, end);\n      final Pair<MutableTextRange, StringBuffer> pair = new Pair<MutableTextRange, StringBuffer>(newRange, fragmentBuffer);\n      for (Pair<MutableTextRange, StringBuffer> affectedFragment : myAffectedFragments) {\n        MutableTextRange range = affectedFragment.getFirst();\n        assert end <= range.getStartOffset() || range.getEndOffset() <= start : \"Range :\"+range+\"; Added: \"+newRange;\n      }\n      myAffectedFragments.add(pair);\n      return pair;\n    }","commit_id":"c3dbd62af24e093e7ffa87e34ce4b8abbb2a11e7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private PsiField findFirstFieldInDeclaration(){\n    if (myRepositoryModifierList != null) return this; // optmization\n\n      CompositeElement treeElement = getTreeElement();\n      if (treeElement != null){\n        ASTNode modifierList = treeElement.findChildByRole(ChildRole.MODIFIER_LIST);\n        if (modifierList != null) {\n          return this;\n        }\n        else{\n          ASTNode prevField = treeElement.getTreePrev();\n          while(prevField.getElementType() != JavaElementType.FIELD){\n            prevField = prevField.getTreePrev();\n          }\n          return ((PsiFieldImpl)SourceTreeToPsiMap.treeElementToPsi(prevField)).findFirstFieldInDeclaration();\n        }\n      }\n      else{\n        long repositoryId = getRepositoryId();\n        if (myCachedFirstFieldInDeclId < 0){\n          myCachedFirstFieldInDeclId = getRepositoryManager().getFieldView().getFirstFieldInDeclaration(repositoryId);\n        }\n        long repositoryId1 = myCachedFirstFieldInDeclId;\n        if (repositoryId1 == repositoryId){\n          return this;\n        }\n        else{\n          return (PsiField)getRepositoryElementsManager().findOrCreatePsiElementById(repositoryId1);\n        }\n      }\n    }","id":46413,"modified_method":"private PsiField findFirstFieldInDeclaration(){\n    if (myRepositoryModifierList != null) return this; // optmization\n\n      CompositeElement treeElement = getTreeElement();\n      if (treeElement != null){\n        ASTNode modifierList = treeElement.findChildByRole(ChildRole.MODIFIER_LIST);\n        if (modifierList != null) {\n          return this;\n        }\n        else{\n          final PsiFieldImpl prevField = PsiTreeUtil.getPrevSiblingOfType(this, PsiFieldImpl.class);\n          LOG.assertTrue(prevField != null);\n          return prevField.findFirstFieldInDeclaration();\n        }\n      }\n      else{\n        long repositoryId = getRepositoryId();\n        if (myCachedFirstFieldInDeclId < 0){\n          myCachedFirstFieldInDeclId = getRepositoryManager().getFieldView().getFirstFieldInDeclaration(repositoryId);\n        }\n        long repositoryId1 = myCachedFirstFieldInDeclId;\n        if (repositoryId1 == repositoryId){\n          return this;\n        }\n        else{\n          return (PsiField)getRepositoryElementsManager().findOrCreatePsiElementById(repositoryId1);\n        }\n      }\n    }","commit_id":"1673a4d77537b1a584c47f3f8e7b1c5edc2da752","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void normalizeDeclaration() throws IncorrectOperationException{\n    CheckUtil.checkWritable(this);\n\n    final PsiTypeElement type = getTypeElement();\n    PsiElement modifierList = getModifierList();\n    ASTNode field = SourceTreeToPsiMap.psiElementToTree(type.getParent());\n    while(true){\n      ASTNode comma = TreeUtil.skipElements(field.getTreeNext(), ElementType.WHITE_SPACE_OR_COMMENT_BIT_SET);\n      if (comma == null || comma.getElementType() != JavaTokenType.COMMA) break;\n      ASTNode nextField = TreeUtil.skipElements(comma.getTreeNext(), ElementType.WHITE_SPACE_OR_COMMENT_BIT_SET);\n      if (nextField == null || nextField.getElementType() != JavaElementType.FIELD) break;\n\n      TreeElement semicolon = Factory.createSingleLeafElement(JavaTokenType.SEMICOLON, new char[]{';'}, 0, 1, null, getManager());\n      CodeEditUtil.addChild((CompositeElement)field, semicolon, null);\n\n      CodeEditUtil.removeChild((CompositeElement)comma.getTreeParent(), comma);\n\n      PsiElement typeClone = type.copy();\n      CodeEditUtil.addChild((CompositeElement)nextField, (TreeElement)SourceTreeToPsiMap.psiElementToTree(typeClone),\n                            nextField.getFirstChildNode());\n\n      PsiElement modifierListClone = modifierList.copy();\n      CodeEditUtil.addChild((CompositeElement)nextField, SourceTreeToPsiMap.psiElementToTree(modifierListClone), nextField.getFirstChildNode());\n\n      field = nextField;\n    }\n\n    SharedImplUtil.normalizeBrackets(this);\n  }","id":46414,"modified_method":"public void normalizeDeclaration() throws IncorrectOperationException{\n    CheckUtil.checkWritable(this);\n\n    final PsiTypeElement type = getTypeElement();\n    PsiElement modifierList = getModifierList();\n    ASTNode field = SourceTreeToPsiMap.psiElementToTree(type.getParent());\n    while(true){\n      ASTNode comma = TreeUtil.skipElements(field.getTreeNext(), ElementType.WHITE_SPACE_OR_COMMENT_BIT_SET);\n      if (comma == null || comma.getElementType() != JavaTokenType.COMMA) break;\n      ASTNode nextField = TreeUtil.skipElements(comma.getTreeNext(), ElementType.WHITE_SPACE_OR_COMMENT_BIT_SET);\n      if (nextField == null || nextField.getElementType() != JavaElementType.FIELD) break;\n\n      TreeElement semicolon = Factory.createSingleLeafElement(JavaTokenType.SEMICOLON, new char[]{';'}, 0, 1, null, getManager());\n      CodeEditUtil.addChild((CompositeElement)field, semicolon, null);\n\n      CodeEditUtil.removeChild((CompositeElement)comma.getTreeParent(), comma);\n\n      PsiElement typeClone = type.copy();\n      CodeEditUtil.addChild((CompositeElement)nextField, SourceTreeToPsiMap.psiElementToTree(typeClone),\n                            nextField.getFirstChildNode());\n\n      PsiElement modifierListClone = modifierList.copy();\n      CodeEditUtil.addChild((CompositeElement)nextField, SourceTreeToPsiMap.psiElementToTree(modifierListClone), nextField.getFirstChildNode());\n\n      field = nextField;\n    }\n\n    SharedImplUtil.normalizeBrackets(this);\n  }","commit_id":"1673a4d77537b1a584c47f3f8e7b1c5edc2da752","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private Object _computeConstantValue(Set<PsiVariable> visitedVars) {\n    if (myCachedInitializerValue != null && !(myCachedInitializerValue instanceof PsiExpression)){\n      return myCachedInitializerValue;\n    }\n\n    PsiType type = getType();\n    if (type == null) return null;\n    // javac rejects all non primitive and non String constants, although JLS states constants \"variables whose initializers are constant expressions\"\n    if (!(type instanceof PsiPrimitiveType) && !type.equalsToText(\"java.lang.String\")) return null;\n\n    PsiExpression initializer;\n    if (myCachedInitializerValue instanceof PsiExpression){\n      initializer = (PsiExpression)myCachedInitializerValue;\n    }\n    else{\n      if (getTreeElement() != null){\n        initializer = getInitializer();\n        if (initializer == null) return null;\n      }\n      else{\n        try{\n          String initializerText = getInitializerText();\n          if (initializerText == null) return null;\n          final FileElement holderElement = new DummyHolder(myManager, this).getTreeElement();\n          CompositeElement exprElement = ExpressionParsing.parseExpressionText(myManager, initializerText.toCharArray(), 0, initializerText.length(), holderElement.getCharTable());\n          TreeUtil.addChildren(holderElement, exprElement);\n          initializer = (PsiExpression)SourceTreeToPsiMap.treeElementToPsi(exprElement);\n        }\n        catch(InitializerTooLongException e){\n          calcTreeElement();\n          return computeConstantValue(visitedVars);\n        }\n      }\n    }\n\n    Object result = PsiConstantEvaluationHelperImpl.computeCastTo(initializer, type, visitedVars);\n\n    if (initializer instanceof PsiLiteralExpression){\n      myCachedInitializerValue = result;\n    }\n    else{\n      myCachedInitializerValue = initializer;\n    }\n\n\n    return result;\n  }","id":46415,"modified_method":"private Object _computeConstantValue(Set<PsiVariable> visitedVars) {\n    if (myCachedInitializerValue != null && !(myCachedInitializerValue instanceof PsiExpression)){\n      return myCachedInitializerValue;\n    }\n\n    PsiType type = getType();\n    // javac rejects all non primitive and non String constants, although JLS states constants \"variables whose initializers are constant expressions\"\n    if (!(type instanceof PsiPrimitiveType) && !type.equalsToText(\"java.lang.String\")) return null;\n\n    PsiExpression initializer;\n    if (myCachedInitializerValue instanceof PsiExpression){\n      initializer = (PsiExpression)myCachedInitializerValue;\n    }\n    else{\n      if (getTreeElement() != null){\n        initializer = getInitializer();\n        if (initializer == null) return null;\n      }\n      else{\n        try{\n          String initializerText = getInitializerText();\n          if (initializerText == null) return null;\n          final FileElement holderElement = new DummyHolder(myManager, this).getTreeElement();\n          CompositeElement exprElement = ExpressionParsing.parseExpressionText(myManager, initializerText.toCharArray(), 0, initializerText.length(), holderElement.getCharTable());\n          TreeUtil.addChildren(holderElement, exprElement);\n          initializer = (PsiExpression)SourceTreeToPsiMap.treeElementToPsi(exprElement);\n        }\n        catch(InitializerTooLongException e){\n          calcTreeElement();\n          return computeConstantValue(visitedVars);\n        }\n      }\n    }\n\n    Object result = PsiConstantEvaluationHelperImpl.computeCastTo(initializer, type, visitedVars);\n\n    if (initializer instanceof PsiLiteralExpression){\n      myCachedInitializerValue = result;\n    }\n    else{\n      myCachedInitializerValue = initializer;\n    }\n\n\n    return result;\n  }","commit_id":"1673a4d77537b1a584c47f3f8e7b1c5edc2da752","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean isDeprecated() {\n    if (myCachedIsDeprecated == null){\n      boolean deprecated;\n      if (getTreeElement() != null){\n        PsiDocComment docComment = getDocComment();\n        deprecated = docComment != null && getDocComment().findTagByName(\"deprecated\") != null;\n        if (!deprecated) {\n          deprecated = getModifierList().findAnnotation(\"java.lang.Deprecated\") != null;\n        }\n      }\n      else{\n          FieldView fieldView = getRepositoryManager().getFieldView();\n          deprecated = fieldView.isDeprecated(getRepositoryId());\n          if (!deprecated && fieldView.mayBeDeprecatedByAnnotation(getRepositoryId())) {\n            deprecated = getModifierList().findAnnotation(\"java.lang.Deprecated\") != null;\n          }\n        }\n      myCachedIsDeprecated = deprecated ? Boolean.TRUE : Boolean.FALSE;\n    }\n    return myCachedIsDeprecated.booleanValue();\n  }","id":46416,"modified_method":"public boolean isDeprecated() {\n    if (myCachedIsDeprecated == null){\n      boolean deprecated;\n      if (getTreeElement() != null){\n        PsiDocComment docComment = getDocComment();\n        deprecated = docComment != null && docComment.findTagByName(\"deprecated\") != null;\n        if (!deprecated) {\n          deprecated = getModifierList().findAnnotation(\"java.lang.Deprecated\") != null;\n        }\n      }\n      else{\n          FieldView fieldView = getRepositoryManager().getFieldView();\n          deprecated = fieldView.isDeprecated(getRepositoryId());\n          if (!deprecated && fieldView.mayBeDeprecatedByAnnotation(getRepositoryId())) {\n            deprecated = getModifierList().findAnnotation(\"java.lang.Deprecated\") != null;\n          }\n        }\n      myCachedIsDeprecated = deprecated ? Boolean.TRUE : Boolean.FALSE;\n    }\n    return myCachedIsDeprecated.booleanValue();\n  }","commit_id":"1673a4d77537b1a584c47f3f8e7b1c5edc2da752","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public PsiDocComment getDocComment(){\n    CompositeElement treeElement = calcTreeElement();\n    if (getTypeElement() != null) {\n      return (PsiDocComment)treeElement.findChildByRoleAsPsiElement(ChildRole.DOC_COMMENT);\n    }\n    else{\n      ASTNode prevField = treeElement.getTreePrev();\n      while(prevField.getElementType() != JavaElementType.FIELD){\n        prevField = prevField.getTreePrev();\n      }\n      return ((PsiField)SourceTreeToPsiMap.treeElementToPsi(prevField)).getDocComment();\n    }\n  }","id":46417,"modified_method":"public PsiDocComment getDocComment(){\n    if (getTypeElement() != null) {\n      return (PsiDocComment)calcTreeElement().findChildByRoleAsPsiElement(ChildRole.DOC_COMMENT);\n    }\n    else{\n      final PsiField prevField = PsiTreeUtil.getPrevSiblingOfType(this, PsiField.class);\n      LOG.assertTrue(prevField != null);\n      return prevField.getDocComment();\n    }\n  }","commit_id":"1673a4d77537b1a584c47f3f8e7b1c5edc2da752","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public String getName() {\n    if (myCachedName == null){\n      if (getTreeElement() != null){\n        myCachedName = getNameIdentifier().getText();\n      }\n      else{\n          myCachedName = getRepositoryManager().getFieldView().getName(getRepositoryId());\n        }\n      }\n    return myCachedName;\n  }","id":46418,"modified_method":"public String getName() {\n    String cachedName = myCachedName;\n    if (cachedName == null) {\n      if (getTreeElement() != null) {\n        cachedName = myCachedName = getNameIdentifier().getText();\n      }\n      else {\n        cachedName = myCachedName = getRepositoryManager().getFieldView().getName(getRepositoryId());\n      }\n    }\n    return cachedName;\n  }","commit_id":"0caf237b85f63f785c20ee72461376acf76afe7e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public Object computeConstantValue() {\n    if (myCachedInitializerValue != null && !(myCachedInitializerValue instanceof PsiExpression)){\n      return myCachedInitializerValue;\n    }\n\n    return computeConstantValue(new HashSet<PsiVariable>(2));\n  }","id":46419,"modified_method":"public Object computeConstantValue() {\n    Object cachedInitializerValue = myCachedInitializerValue;\n    if (cachedInitializerValue != null && !(cachedInitializerValue instanceof PsiExpression)){\n      return cachedInitializerValue;\n    }\n\n    return computeConstantValue(new HashSet<PsiVariable>(2));\n  }","commit_id":"0caf237b85f63f785c20ee72461376acf76afe7e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void normalizeDeclaration() throws IncorrectOperationException{\n    CheckUtil.checkWritable(this);\n\n    final PsiTypeElement type = getTypeElement();\n    PsiElement modifierList = getModifierList();\n    ASTNode field = SourceTreeToPsiMap.psiElementToTree(type.getParent());\n    while(true){\n      ASTNode comma = TreeUtil.skipElements(field.getTreeNext(), ElementType.WHITE_SPACE_OR_COMMENT_BIT_SET);\n      if (comma == null || comma.getElementType() != JavaTokenType.COMMA) break;\n      ASTNode nextField = TreeUtil.skipElements(comma.getTreeNext(), ElementType.WHITE_SPACE_OR_COMMENT_BIT_SET);\n      if (nextField == null || nextField.getElementType() != JavaElementType.FIELD) break;\n\n      TreeElement semicolon = Factory.createSingleLeafElement(JavaTokenType.SEMICOLON, \";\", 0, 1, null, getManager());\n      CodeEditUtil.addChild((CompositeElement)field, semicolon, null);\n\n      CodeEditUtil.removeChild((CompositeElement)comma.getTreeParent(), comma);\n\n      PsiElement typeClone = type.copy();\n      CodeEditUtil.addChild((CompositeElement)nextField, (TreeElement)SourceTreeToPsiMap.psiElementToTree(typeClone),\n                            nextField.getFirstChildNode());\n\n      PsiElement modifierListClone = modifierList.copy();\n      CodeEditUtil.addChild((CompositeElement)nextField, SourceTreeToPsiMap.psiElementToTree(modifierListClone), nextField.getFirstChildNode());\n\n      field = nextField;\n    }\n\n    SharedImplUtil.normalizeBrackets(this);\n  }","id":46420,"modified_method":"public void normalizeDeclaration() throws IncorrectOperationException{\n    CheckUtil.checkWritable(this);\n\n    final PsiTypeElement type = getTypeElement();\n    PsiElement modifierList = getModifierList();\n    ASTNode field = SourceTreeToPsiMap.psiElementToTree(type.getParent());\n    while(true){\n      ASTNode comma = TreeUtil.skipElements(field.getTreeNext(), ElementType.WHITE_SPACE_OR_COMMENT_BIT_SET);\n      if (comma == null || comma.getElementType() != JavaTokenType.COMMA) break;\n      ASTNode nextField = TreeUtil.skipElements(comma.getTreeNext(), ElementType.WHITE_SPACE_OR_COMMENT_BIT_SET);\n      if (nextField == null || nextField.getElementType() != JavaElementType.FIELD) break;\n\n      TreeElement semicolon = Factory.createSingleLeafElement(JavaTokenType.SEMICOLON, \";\", 0, 1, null, getManager());\n      CodeEditUtil.addChild((CompositeElement)field, semicolon, null);\n\n      CodeEditUtil.removeChild((CompositeElement)comma.getTreeParent(), comma);\n\n      PsiElement typeClone = type.copy();\n      CodeEditUtil.addChild((CompositeElement)nextField, SourceTreeToPsiMap.psiElementToTree(typeClone), nextField.getFirstChildNode());\n\n      PsiElement modifierListClone = modifierList.copy();\n      CodeEditUtil.addChild((CompositeElement)nextField, SourceTreeToPsiMap.psiElementToTree(modifierListClone), nextField.getFirstChildNode());\n\n      field = nextField;\n    }\n\n    SharedImplUtil.normalizeBrackets(this);\n  }","commit_id":"0caf237b85f63f785c20ee72461376acf76afe7e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private PsiField findFirstFieldInDeclaration(){\n    if (myRepositoryModifierList != null) return this; // optmization\n\n      CompositeElement treeElement = getTreeElement();\n      if (treeElement != null){\n        ASTNode modifierList = treeElement.findChildByRole(ChildRole.MODIFIER_LIST);\n        if (modifierList != null) {\n          return this;\n        }\n        else{\n          ASTNode prevField = treeElement.getTreePrev();\n          while(prevField.getElementType() != JavaElementType.FIELD){\n            prevField = prevField.getTreePrev();\n          }\n          return ((PsiFieldImpl)SourceTreeToPsiMap.treeElementToPsi(prevField)).findFirstFieldInDeclaration();\n        }\n      }\n      else{\n        long repositoryId = getRepositoryId();\n        if (myCachedFirstFieldInDeclId < 0){\n          myCachedFirstFieldInDeclId = getRepositoryManager().getFieldView().getFirstFieldInDeclaration(repositoryId);\n        }\n        long repositoryId1 = myCachedFirstFieldInDeclId;\n        if (repositoryId1 == repositoryId){\n          return this;\n        }\n        else{\n          return (PsiField)getRepositoryElementsManager().findOrCreatePsiElementById(repositoryId1);\n        }\n      }\n    }","id":46421,"modified_method":"private PsiField findFirstFieldInDeclaration() {\n    if (myRepositoryModifierList != null) return this; // optmization\n\n    CompositeElement treeElement = getTreeElement();\n    if (treeElement == null) {\n      long repositoryId = getRepositoryId();\n      long cachedFirstFieldInDeclId = myCachedFirstFieldInDeclId;\n      if (cachedFirstFieldInDeclId < 0) {\n        cachedFirstFieldInDeclId = myCachedFirstFieldInDeclId = getRepositoryManager().getFieldView().getFirstFieldInDeclaration(repositoryId);\n      }\n      long repositoryId1 = cachedFirstFieldInDeclId;\n      if (repositoryId1 == repositoryId) {\n        return this;\n      }\n      else {\n        return (PsiField)getRepositoryElementsManager().findOrCreatePsiElementById(repositoryId1);\n      }\n    }\n    else {\n      ASTNode modifierList = treeElement.findChildByRole(ChildRole.MODIFIER_LIST);\n      if (modifierList == null) {\n        ASTNode prevField = treeElement.getTreePrev();\n        while (prevField != null && prevField.getElementType() != JavaElementType.FIELD) {\n          prevField = prevField.getTreePrev();\n        }\n        if (prevField == null) return this;\n        return ((PsiFieldImpl)SourceTreeToPsiMap.treeElementToPsi(prevField)).findFirstFieldInDeclaration();\n      }\n      else {\n        return this;\n      }\n    }\n  }","commit_id":"0caf237b85f63f785c20ee72461376acf76afe7e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private Object _computeConstantValue(Set<PsiVariable> visitedVars) {\n    if (myCachedInitializerValue != null && !(myCachedInitializerValue instanceof PsiExpression)){\n      return myCachedInitializerValue;\n    }\n\n    PsiType type = getType();\n    if (type == null) return null;\n    // javac rejects all non primitive and non String constants, although JLS states constants \"variables whose initializers are constant expressions\"\n    if (!(type instanceof PsiPrimitiveType) && !type.equalsToText(\"java.lang.String\")) return null;\n\n    PsiExpression initializer;\n    if (myCachedInitializerValue instanceof PsiExpression){\n      initializer = (PsiExpression)myCachedInitializerValue;\n    }\n    else{\n      if (getTreeElement() != null){\n        initializer = getInitializer();\n        if (initializer == null) return null;\n      }\n      else{\n        try{\n          String initializerText = getInitializerText();\n          if (initializerText == null) return null;\n          final FileElement holderElement = new DummyHolder(myManager, this).getTreeElement();\n          CompositeElement exprElement = ExpressionParsing.parseExpressionText(myManager, initializerText, 0, initializerText.length(), holderElement.getCharTable());\n          TreeUtil.addChildren(holderElement, exprElement);\n          initializer = (PsiExpression)SourceTreeToPsiMap.treeElementToPsi(exprElement);\n        }\n        catch(InitializerTooLongException e){\n          calcTreeElement();\n          return computeConstantValue(visitedVars);\n        }\n      }\n    }\n\n    Object result = PsiConstantEvaluationHelperImpl.computeCastTo(initializer, type, visitedVars);\n\n    if (initializer instanceof PsiLiteralExpression){\n      myCachedInitializerValue = result;\n    }\n    else{\n      myCachedInitializerValue = initializer;\n    }\n\n\n    return result;\n  }","id":46422,"modified_method":"private Object _computeConstantValue(Set<PsiVariable> visitedVars) {\n    Object cachedInitializerValue = myCachedInitializerValue;\n    if (cachedInitializerValue != null && !(cachedInitializerValue instanceof PsiExpression)){\n      return cachedInitializerValue;\n    }\n\n    PsiType type = getType();\n    // javac rejects all non primitive and non String constants, although JLS states constants \"variables whose initializers are constant expressions\"\n    if (!(type instanceof PsiPrimitiveType) && !type.equalsToText(\"java.lang.String\")) return null;\n\n    PsiExpression initializer;\n    if (cachedInitializerValue != null) {\n      initializer = (PsiExpression)cachedInitializerValue;\n    }\n    else{\n      if (getTreeElement() != null){\n        initializer = getInitializer();\n        if (initializer == null) return null;\n      }\n      else{\n        try{\n          String initializerText = getInitializerText();\n          if (initializerText == null) return null;\n          final FileElement holderElement = new DummyHolder(myManager, this).getTreeElement();\n          CompositeElement exprElement = ExpressionParsing.parseExpressionText(myManager, initializerText, 0, initializerText.length(), holderElement.getCharTable());\n          TreeUtil.addChildren(holderElement, exprElement);\n          initializer = (PsiExpression)SourceTreeToPsiMap.treeElementToPsi(exprElement);\n        }\n        catch(InitializerTooLongException e){\n          calcTreeElement();\n          return computeConstantValue(visitedVars);\n        }\n      }\n    }\n\n    Object result = PsiConstantEvaluationHelperImpl.computeCastTo(initializer, type, visitedVars);\n\n    if (initializer instanceof PsiLiteralExpression){\n      myCachedInitializerValue = result;\n    }\n    else{\n      myCachedInitializerValue = initializer;\n    }\n\n\n    return result;\n  }","commit_id":"0caf237b85f63f785c20ee72461376acf76afe7e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public PsiType getType(){\n    if (getTreeElement() != null) {\n      myCachedType = null;\n      return SharedImplUtil.getType(this);\n    }\n    else {\n      if (myCachedType != null) {\n        PsiType type = myCachedType.get();\n        if (type != null) return type;\n      }\n\n      String typeText = getRepositoryManager().getFieldView().getTypeText(getRepositoryId());\n      try {\n        final PsiType type = myManager.getParserFacade().createTypeFromText(typeText, this);\n        myCachedType = new PatchedSoftReference<PsiType>(type);\n        return type;\n      }\n      catch (IncorrectOperationException e) {\n        LOG.error(e);\n        return null;\n      }\n    }\n  }","id":46423,"modified_method":"@NotNull\n  public PsiType getType(){\n    if (getTreeElement() == null) {\n      PatchedSoftReference<PsiType> cachedType = myCachedType;\n      if (cachedType != null) {\n        PsiType type = cachedType.get();\n        if (type != null) return type;\n      }\n\n      String typeText = getRepositoryManager().getFieldView().getTypeText(getRepositoryId());\n      try {\n        final PsiType type = myManager.getParserFacade().createTypeFromText(typeText, this);\n        myCachedType = new PatchedSoftReference<PsiType>(type);\n        return type;\n      }\n      catch (IncorrectOperationException e) {\n        LOG.error(e);\n        return null;\n      }\n    }\n    else {\n      myCachedType = null;\n      return SharedImplUtil.getType(this);\n    }\n  }","commit_id":"0caf237b85f63f785c20ee72461376acf76afe7e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean isDeprecated() {\n    if (myCachedIsDeprecated == null){\n      boolean deprecated;\n      if (getTreeElement() != null){\n        PsiDocComment docComment = getDocComment();\n        deprecated = docComment != null && getDocComment().findTagByName(\"deprecated\") != null;\n        if (!deprecated) {\n          deprecated = getModifierList().findAnnotation(\"java.lang.Deprecated\") != null;\n        }\n      }\n      else{\n          FieldView fieldView = getRepositoryManager().getFieldView();\n          deprecated = fieldView.isDeprecated(getRepositoryId());\n          if (!deprecated && fieldView.mayBeDeprecatedByAnnotation(getRepositoryId())) {\n            deprecated = getModifierList().findAnnotation(\"java.lang.Deprecated\") != null;\n          }\n        }\n      myCachedIsDeprecated = deprecated ? Boolean.TRUE : Boolean.FALSE;\n    }\n    return myCachedIsDeprecated.booleanValue();\n  }","id":46424,"modified_method":"public boolean isDeprecated() {\n    Boolean isDeprecated = myCachedIsDeprecated;\n    if (isDeprecated == null) {\n      boolean deprecated;\n      if (getTreeElement() != null) {\n        PsiDocComment docComment = getDocComment();\n        deprecated = docComment != null && getDocComment().findTagByName(\"deprecated\") != null;\n        if (!deprecated) {\n          deprecated = getModifierList().findAnnotation(\"java.lang.Deprecated\") != null;\n        }\n      }\n      else {\n        FieldView fieldView = getRepositoryManager().getFieldView();\n        deprecated = fieldView.isDeprecated(getRepositoryId());\n        if (!deprecated && fieldView.mayBeDeprecatedByAnnotation(getRepositoryId())) {\n          deprecated = getModifierList().findAnnotation(\"java.lang.Deprecated\") != null;\n        }\n      }\n      isDeprecated = myCachedIsDeprecated = deprecated ? Boolean.TRUE : Boolean.FALSE;\n    }\n    return isDeprecated.booleanValue();\n  }","commit_id":"0caf237b85f63f785c20ee72461376acf76afe7e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private String getInitializerText() throws InitializerTooLongException {\n    if (myCachedInitializerText == null){\n        long repositoryId = getRepositoryId();\n        myCachedInitializerText = getRepositoryManager().getFieldView().getInitializerText(repositoryId);\n        if (myCachedInitializerText == null) myCachedInitializerText = \"\";\n      }\n    return myCachedInitializerText.length() > 0 ? myCachedInitializerText : null;\n  }","id":46425,"modified_method":"private String getInitializerText() throws InitializerTooLongException {\n    String initializerText = myCachedInitializerText;\n    if (initializerText == null) {\n      long repositoryId = getRepositoryId();\n      initializerText = getRepositoryManager().getFieldView().getInitializerText(repositoryId);\n      if (initializerText == null) initializerText = \"\";\n      myCachedInitializerText = initializerText;\n    }\n    return initializerText.length() > 0 ? initializerText : null;\n  }","commit_id":"0caf237b85f63f785c20ee72461376acf76afe7e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public ResolvedArtifact downloadMetaDataArtifact(ArtifactIdentifier artifactRevisionId) {\n            return findStaticResourceUsingPatterns(ivyPatterns, artifactRevisionId, true);\n        }","id":46426,"modified_method":"public ExternalResource resolveMetaDataArtifact(ArtifactIdentifier artifactIdentifier) {\n            return findStaticResourceUsingPatterns(ivyPatterns, artifactIdentifier, true);\n        }","commit_id":"93fc9bd03facbb391d068214db411f53acc84b49","url":"https://github.com/gradle/gradle"},{"original_method":"public ResolvedArtifact downloadArtifact(ArtifactIdentifier artifactRevisionId) {\n            return findStaticResourceUsingPatterns(artifactPatterns, artifactRevisionId, true);\n        }","id":46427,"modified_method":"public boolean artifactExists(ArtifactIdentifier artifactIdentifier) {\n            return findStaticResourceUsingPatterns(artifactPatterns, artifactIdentifier, false) != null;\n        }","commit_id":"93fc9bd03facbb391d068214db411f53acc84b49","url":"https://github.com/gradle/gradle"},{"original_method":"protected DownloadedAndParsedMetaDataArtifact findMetaDataArtifact(DependencyMetaData dependency, ArtifactResolver artifactResolver) {\n        ArtifactIdentifier artifactIdentifier = getMetaDataArtifactFor(dependency);\n        if (artifactIdentifier == null) {\n            return null;\n        }\n        ResolvedArtifact metaDataResource = artifactResolver.downloadMetaDataArtifact(artifactIdentifier);\n        if (metaDataResource == null) {\n            return null;\n        }\n        MutableModuleVersionMetaData moduleVersionMetaData = getArtifactMetadata(dependency, artifactIdentifier, metaDataResource.getResource());\n\n        if (isCheckconsistency()) {\n            ModuleVersionSelector requested = dependency.getRequested();\n            ModuleVersionIdentifier requestedId = DefaultModuleVersionIdentifier.newId(requested.getGroup(), requested.getName(), requested.getVersion());\n            checkMetadataConsistency(requestedId, moduleVersionMetaData, metaDataResource);\n        }\n\n        return new DownloadedAndParsedMetaDataArtifact(metaDataResource.resource, metaDataResource.artifactId, moduleVersionMetaData);\n    }","id":46428,"modified_method":"protected MutableModuleVersionMetaData findMetaDataArtifact(DependencyMetaData dependency, ArtifactResolver artifactResolver) {\n        ArtifactIdentifier artifactIdentifier = getMetaDataArtifactFor(dependency);\n        if (artifactIdentifier == null) {\n            return null;\n        }\n        ExternalResource metaDataResource = artifactResolver.resolveMetaDataArtifact(artifactIdentifier);\n        if (metaDataResource == null) {\n            return null;\n        }\n        MutableModuleVersionMetaData moduleVersionMetaData = getArtifactMetadata(dependency, artifactIdentifier, metaDataResource);\n\n        if (isCheckconsistency()) {\n            ModuleVersionSelector requested = dependency.getRequested();\n            ModuleVersionIdentifier requestedId = DefaultModuleVersionIdentifier.newId(requested.getGroup(), requested.getName(), requested.getVersion());\n            checkMetadataConsistency(requestedId, moduleVersionMetaData);\n        }\n        return moduleVersionMetaData;\n    }","commit_id":"93fc9bd03facbb391d068214db411f53acc84b49","url":"https://github.com/gradle/gradle"},{"original_method":"protected MutableModuleVersionMetaData getArtifactMetadata(DependencyMetaData dependency, ArtifactIdentifier artifactId, ExternalResource resource) {\n        ExternalResourceResolverDescriptorParseContext context = new ExternalResourceResolverDescriptorParseContext(nestedResolver, this, artifactId.getModuleVersionIdentifier());\n        LocallyAvailableExternalResource cachedResource;\n        try {\n            cachedResource = repositoryCacheManager.downloadAndCacheArtifactFile(artifactId, resourceDownloader, resource);\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n\n        MutableModuleVersionMetaData rawMetaData =  metaDataParser.parseMetaData(context, cachedResource);\n        return processRawMetaData(rawMetaData);\n    }","id":46429,"modified_method":"protected MutableModuleVersionMetaData getArtifactMetadata(DependencyMetaData dependency, ArtifactIdentifier artifactId, ExternalResource resource) {\n        ExternalResourceResolverDescriptorParseContext context = new ExternalResourceResolverDescriptorParseContext(nestedResolver, this, artifactId.getModuleVersionIdentifier());\n        LocallyAvailableExternalResource cachedResource;\n        try {\n            cachedResource = downloadAndCacheResource(artifactId, resource);\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n\n        MutableModuleVersionMetaData rawMetaData =  metaDataParser.parseMetaData(context, cachedResource);\n        return processRawMetaData(rawMetaData);\n    }","commit_id":"93fc9bd03facbb391d068214db411f53acc84b49","url":"https://github.com/gradle/gradle"},{"original_method":"protected File downloadArtifact(ArtifactIdentifier artifactIdentifier, ArtifactResolver artifactResolver) throws IOException {\n        ResolvedArtifact artifactRef = artifactResolver.downloadArtifact(artifactIdentifier);\n        if (artifactRef == null) {\n            return null;\n        }\n\n        return repositoryCacheManager.downloadAndCacheArtifactFile(artifactIdentifier, resourceDownloader, artifactRef.resource).getLocalResource().getFile();\n    }","id":46430,"modified_method":"protected File downloadArtifact(ArtifactIdentifier artifactIdentifier, ArtifactResolver artifactResolver) throws IOException {\n        ExternalResource artifactResource = artifactResolver.resolveArtifact(artifactIdentifier);\n        if (artifactResource == null) {\n            return null;\n        }\n\n        return downloadAndCacheResource(artifactIdentifier, artifactResource).getLocalResource().getFile();\n    }","commit_id":"93fc9bd03facbb391d068214db411f53acc84b49","url":"https://github.com/gradle/gradle"},{"original_method":"protected void checkMetadataConsistency(ModuleVersionIdentifier expectedId, ModuleVersionMetaData metadata,\n                                            ResolvedArtifact ivyRef) throws MetaDataParseException {\n        List<String> errors = new ArrayList<String>();\n        if (!expectedId.getGroup().equals(metadata.getId().getGroup())) {\n            errors.add(\"bad group: expected='\" + expectedId.getGroup() + \"' found='\" + metadata.getId().getGroup() + \"'\");\n        }\n        if (!expectedId.getName().equals(metadata.getId().getName())) {\n            errors.add(\"bad module name: expected='\" + expectedId.getName() + \"' found='\" + metadata.getId().getName() + \"'\");\n        }\n        if (!expectedId.getVersion().equals(metadata.getId().getVersion())) {\n            errors.add(\"bad version: expected='\" + expectedId.getVersion() + \"' found='\" + metadata.getId().getVersion() + \"'\");\n        }\n        if (!metadata.getStatusScheme().contains(metadata.getStatus())) {\n            errors.add(\"bad status: '\" + metadata.getStatus() + \"'; \");\n        }\n        if (errors.size() > 0) {\n            throw new MetaDataParseException(String.format(\"inconsistent module metadata found. Descriptor: %s Errors: %s\",\n                    ivyRef.resource, Joiner.on(SystemProperties.getLineSeparator()).join(errors)));\n        }\n    }","id":46431,"modified_method":"private void checkMetadataConsistency(ModuleVersionIdentifier expectedId, ModuleVersionMetaData metadata) throws MetaDataParseException {\n        List<String> errors = new ArrayList<String>();\n        if (!expectedId.getGroup().equals(metadata.getId().getGroup())) {\n            errors.add(\"bad group: expected='\" + expectedId.getGroup() + \"' found='\" + metadata.getId().getGroup() + \"'\");\n        }\n        if (!expectedId.getName().equals(metadata.getId().getName())) {\n            errors.add(\"bad module name: expected='\" + expectedId.getName() + \"' found='\" + metadata.getId().getName() + \"'\");\n        }\n        if (!expectedId.getVersion().equals(metadata.getId().getVersion())) {\n            errors.add(\"bad version: expected='\" + expectedId.getVersion() + \"' found='\" + metadata.getId().getVersion() + \"'\");\n        }\n        if (!metadata.getStatusScheme().contains(metadata.getStatus())) {\n            errors.add(\"bad status: '\" + metadata.getStatus() + \"'; \");\n        }\n        if (errors.size() > 0) {\n            throw new MetaDataParseException(String.format(\"inconsistent module metadata found. Descriptor: %s Errors: %s\",\n                    metadata.getId(), Joiner.on(SystemProperties.getLineSeparator()).join(errors)));\n        }\n    }","commit_id":"93fc9bd03facbb391d068214db411f53acc84b49","url":"https://github.com/gradle/gradle"},{"original_method":"private DownloadedAndParsedMetaDataArtifact findDefaultArtifact(DependencyMetaData dependency, ArtifactResolver artifactResolver) {\n        MutableModuleVersionMetaData metaData = getDefaultMetaData(dependency);\n\n        ResolvedArtifact artifactRef = findAnyArtifact(metaData, artifactResolver);\n        if (artifactRef == null) {\n            return null;\n        }\n\n        LOGGER.debug(\"No meta-data file found for module '{}' in repository '{}', using default data instead.\", dependency.getRequested(), getName());\n\n        return new DownloadedAndParsedMetaDataArtifact(artifactRef.resource, artifactRef.artifactId, metaData);\n    }","id":46432,"modified_method":"private MutableModuleVersionMetaData findDefaultArtifact(DependencyMetaData dependency, ArtifactResolver artifactResolver) {\n        MutableModuleVersionMetaData metaData = getDefaultMetaData(dependency);\n\n        if (hasArtifacts(metaData, artifactResolver)) {\n            LOGGER.debug(\"No meta-data file found for module '{}' in repository '{}', using default data instead.\", dependency.getRequested(), getName());\n\n            return metaData;\n        }\n        return null;\n    }","commit_id":"93fc9bd03facbb391d068214db411f53acc84b49","url":"https://github.com/gradle/gradle"},{"original_method":"public boolean artifactExists(ModuleVersionArtifactMetaData artifact) {\n        ResolvedArtifact artifactRef = createArtifactResolver().resolveArtifact(artifact.toArtifactIdentifier());\n        return artifactRef != null && artifactRef.resource.exists();\n    }","id":46433,"modified_method":"public boolean artifactExists(ModuleVersionArtifactMetaData artifact) {\n        return createArtifactResolver().artifactExists(artifact.toArtifactIdentifier());\n    }","commit_id":"93fc9bd03facbb391d068214db411f53acc84b49","url":"https://github.com/gradle/gradle"},{"original_method":"private ResolvedArtifact findStaticResourceUsingPatterns(List<String> patternList, ArtifactIdentifier artifactId, boolean forDownload) {\n            for (String pattern : patternList) {\n                ResourcePattern resourcePattern = toResourcePattern(pattern);\n                String resourceName = resourcePattern.toPath(artifactId);\n                LOGGER.debug(\"Loading {}\", resourceName);\n                ExternalResource resource = getResource(resourceName, artifactId, forDownload);\n                if (resource.exists()) {\n                    return new ResolvedArtifact(resource, artifactId);\n                } else {\n                    LOGGER.debug(\"Resource not reachable for {}: res={}\", artifactId, resource);\n                    discardResource(resource);\n                }\n            }\n            return null;\n        }","id":46434,"modified_method":"private ExternalResource findStaticResourceUsingPatterns(List<String> patternList, ArtifactIdentifier artifactId, boolean forDownload) {\n            for (String pattern : patternList) {\n                ResourcePattern resourcePattern = toResourcePattern(pattern);\n                String resourceName = resourcePattern.toPath(artifactId);\n                LOGGER.debug(\"Loading {}\", resourceName);\n                ExternalResource resource = getResource(resourceName, artifactId, forDownload);\n                if (resource.exists()) {\n                    return resource;\n                } else {\n                    LOGGER.debug(\"Resource not reachable for {}: res={}\", artifactId, resource);\n                    discardResource(resource);\n                }\n            }\n            return null;\n        }","commit_id":"93fc9bd03facbb391d068214db411f53acc84b49","url":"https://github.com/gradle/gradle"},{"original_method":"protected final void resolveStaticDependency(DependencyMetaData dependency, BuildableModuleVersionMetaDataResolveResult result, ArtifactResolver artifactResolver) {\n        DownloadedAndParsedMetaDataArtifact metaDataArtifact = findMetaDataArtifact(dependency, artifactResolver);\n\n        if (metaDataArtifact != null) {\n            MutableModuleVersionMetaData moduleVersionMetaData = metaDataArtifact.moduleVersionMetaData;\n            LOGGER.debug(\"Metadata file found for module '{}' in repository '{}'.\", dependency.getRequested(), getName());\n            result.resolved(moduleVersionMetaData, null);\n            return;\n        }\n\n        if (isAllownomd()) {\n            DownloadedAndParsedMetaDataArtifact defaultArtifact = findDefaultArtifact(dependency, artifactResolver);\n            if (defaultArtifact != null) {\n                LOGGER.debug(\"Artifact file found for module '{}' in repository '{}'.\", dependency.getRequested(), getName());\n                result.resolved(defaultArtifact.moduleVersionMetaData, null);\n                return;\n            }\n        }\n\n        LOGGER.debug(\"No meta-data file or artifact found for module '{}' in repository '{}'.\", dependency.getRequested(), getName());\n        result.missing();\n    }","id":46435,"modified_method":"protected final void resolveStaticDependency(DependencyMetaData dependency, BuildableModuleVersionMetaDataResolveResult result, ArtifactResolver artifactResolver) {\n        MutableModuleVersionMetaData metaDataArtifactMetaData = findMetaDataArtifact(dependency, artifactResolver);\n\n        if (metaDataArtifactMetaData != null) {\n            LOGGER.debug(\"Metadata file found for module '{}' in repository '{}'.\", dependency.getRequested(), getName());\n            result.resolved(metaDataArtifactMetaData, null);\n            return;\n        }\n\n        if (isAllownomd()) {\n            MutableModuleVersionMetaData defaultArtifactMetaData = findDefaultArtifact(dependency, artifactResolver);\n            if (defaultArtifactMetaData != null) {\n                LOGGER.debug(\"Artifact file found for module '{}' in repository '{}'.\", dependency.getRequested(), getName());\n                result.resolved(defaultArtifactMetaData, null);\n                return;\n            }\n        }\n\n        LOGGER.debug(\"No meta-data file or artifact found for module '{}' in repository '{}'.\", dependency.getRequested(), getName());\n        result.missing();\n    }","commit_id":"93fc9bd03facbb391d068214db411f53acc84b49","url":"https://github.com/gradle/gradle"},{"original_method":"protected ResolvedArtifact findAnyArtifact(ModuleVersionMetaData metaData, ArtifactResolver artifactResolver) {\n        for (ArtifactIdentifier artifact : getAllArtifacts(metaData)) {\n            ResolvedArtifact artifactRef = artifactResolver.resolveArtifact(artifact);\n            if (artifactRef != null) {\n                return artifactRef;\n            }\n        }\n        return null;\n    }","id":46436,"modified_method":"protected boolean hasArtifacts(ModuleVersionMetaData metaData, ArtifactResolver artifactResolver) {\n        for (ArtifactIdentifier artifact : getAllArtifacts(metaData)) {\n            if (artifactResolver.artifactExists(artifact)) {\n                return true;\n            }\n        }\n        return false;\n    }","commit_id":"93fc9bd03facbb391d068214db411f53acc84b49","url":"https://github.com/gradle/gradle"},{"original_method":"public ResolvedArtifact resolveArtifact(ArtifactIdentifier artifactRevisionId) {\n            return findStaticResourceUsingPatterns(artifactPatterns, artifactRevisionId, false);\n        }","id":46437,"modified_method":"public ExternalResource resolveArtifact(ArtifactIdentifier artifactIdentifier) {\n            return findStaticResourceUsingPatterns(artifactPatterns, artifactIdentifier, true);\n        }","commit_id":"93fc9bd03facbb391d068214db411f53acc84b49","url":"https://github.com/gradle/gradle"},{"original_method":"private boolean isOrphanedPom(DownloadedAndParsedMetaDataArtifact metaDataArtifact, ArtifactResolver artifactResolver) {\n        ModuleVersionMetaData metaData = metaDataArtifact.moduleVersionMetaData;\n        if (!metaData.isMetaDataOnly()) {\n            ResolvedArtifact artifactRef = findAnyArtifact(metaData, artifactResolver);\n            if (artifactRef == null) {\n                LOGGER.debug(\"POM file found for module '{}' in repository '{}' but no artifact found. Ignoring.\", metaData.getId(), getName());\n                return true;\n            }\n        }\n        return false;\n    }","id":46438,"modified_method":"private boolean isOrphanedPom(ModuleVersionMetaData metaData, ArtifactResolver artifactResolver) {\n        if (!metaData.isMetaDataOnly()) {\n            if (!hasArtifacts(metaData, artifactResolver)) {\n                LOGGER.debug(\"POM file found for module '{}' in repository '{}' but no artifact found. Ignoring.\", metaData.getId(), getName());\n                return true;\n            }\n        }\n        return false;\n    }","commit_id":"93fc9bd03facbb391d068214db411f53acc84b49","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n    protected DownloadedAndParsedMetaDataArtifact findMetaDataArtifact(DependencyMetaData dependency, ArtifactResolver artifactResolver) {\n        DownloadedAndParsedMetaDataArtifact metaDataArtifact = super.findMetaDataArtifact(dependency, artifactResolver);\n        if (isOrphanedPom(metaDataArtifact, artifactResolver)) {\n            return null;\n        }\n        return metaDataArtifact;\n    }","id":46439,"modified_method":"@Override\n    protected MutableModuleVersionMetaData findMetaDataArtifact(DependencyMetaData dependency, ArtifactResolver artifactResolver) {\n        MutableModuleVersionMetaData metaData = super.findMetaDataArtifact(dependency, artifactResolver);\n        if (isOrphanedPom(metaData, artifactResolver)) {\n            return null;\n        }\n        return metaData;\n    }","commit_id":"93fc9bd03facbb391d068214db411f53acc84b49","url":"https://github.com/gradle/gradle"},{"original_method":"public Set<ComponentArtifactMetaData> getArtifacts() {\n            return Sets.union(DefaultLocalComponentMetaData.getArtifacts(componentIdentifier, id, getHierarchy(), allArtifacts), artifactsMetaData);\n        }","id":46440,"modified_method":"public Set<ComponentArtifactMetaData> getArtifacts() {\n            return DefaultLocalComponentMetaData.getArtifacts(componentIdentifier, id, getHierarchy(), allArtifacts);\n        }","commit_id":"ea3c19dc2f7283e7e14c5df7c0658ce8e0ffdf1a","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n    public void resolve(DependencyMetaData dependency, final BuildableComponentIdResolveResult result) {\n        if (dependency.getSelector() instanceof LibraryComponentSelector) {\n            LibraryComponentSelector selector = (LibraryComponentSelector) dependency.getSelector();\n            final String selectorProjectPath = selector.getProjectPath();\n            final String libraryName = selector.getLibraryName();\n            final ProjectInternal project = projectLocator.locateProject(selectorProjectPath);\n            LibraryResolutionResult resolutionResult = doResolve(project, libraryName);\n            LibrarySpec selectedLibrary = resolutionResult.getSelectedLibrary();\n            if (selectedLibrary != null) {\n                DefaultTaskDependency buildDependencies = new DefaultTaskDependency();\n                Collection<BinarySpec> variants = selectedLibrary.getBinaries().values();\n                if (variants.size() > 1) {\n                    result.failed(new ModuleVersionResolveException(selector, String.format(\"Multiple binaries available for library '%s' : %s\", libraryName, variants)));\n                } else {\n                    for (BinarySpec spec : variants) {\n                        buildDependencies.add(spec.getBuildTask());\n                        DefaultLibraryLocalComponentMetaData metaData = DefaultLibraryLocalComponentMetaData.newMetaData(selectorProjectPath, selectedLibrary.getName(), spec.getName(), buildDependencies);\n                        ComponentResolveMetaData resolveMetaData = metaData.toResolveMetaData();\n                        result.resolved(resolveMetaData);\n                        BinarySpecToArtifactConverter<BinarySpec> factory = binarySpecToArtifactConverterRegistry.getConverter(spec);\n                        if (factory != null) {\n                            metaData.addArtifact(factory.convertArtifact((LibraryComponentIdentifier) resolveMetaData.getComponentId(), spec));\n                        }\n                    }\n                }\n            }\n            if (!result.hasResult()) {\n                String message = prettyErrorMessage(selector, resolutionResult);\n                ModuleVersionResolveException failure = new ModuleVersionResolveException(selector, new LibraryResolveException(message));\n                result.failed(failure);\n            }\n        }\n    }","id":46441,"modified_method":"@Override\n    public void resolve(DependencyMetaData dependency, final BuildableComponentIdResolveResult result) {\n        if (dependency.getSelector() instanceof LibraryComponentSelector) {\n            LibraryComponentSelector selector = (LibraryComponentSelector) dependency.getSelector();\n            final String selectorProjectPath = selector.getProjectPath();\n            final String libraryName = selector.getLibraryName();\n            final ProjectInternal project = projectLocator.locateProject(selectorProjectPath);\n            LibraryResolutionResult resolutionResult = doResolve(project, libraryName);\n            LibrarySpec selectedLibrary = resolutionResult.getSelectedLibrary();\n            if (selectedLibrary != null) {\n                DefaultTaskDependency buildDependencies = new DefaultTaskDependency();\n                Collection<BinarySpec> variants = selectedLibrary.getBinaries().values();\n                if (variants.size() > 1) {\n                    result.failed(new ModuleVersionResolveException(selector, String.format(\"Multiple binaries available for library '%s' : %s\", libraryName, variants)));\n                } else {\n                    for (BinarySpec spec : variants) {\n                        buildDependencies.add(spec.getBuildTask());\n                        DefaultLibraryLocalComponentMetaData metaData = DefaultLibraryLocalComponentMetaData.newMetaData(selectorProjectPath, selectedLibrary.getName(), spec.getName(), buildDependencies);\n                        ComponentResolveMetaData resolveMetaData = metaData.toResolveMetaData();\n                        result.resolved(resolveMetaData);\n                        if (spec instanceof JvmBinarySpec) {\n                            Jar jar = ((JvmBinarySpec)spec).getTasks().getJar();\n                            PublishArtifact publishArtifact = new ArchivePublishArtifact(jar);\n                            metaData.addArtifacts(LibraryComponentIdentifier.CONFIGURATION_NAME, Collections.singleton(publishArtifact));\n                        }\n                    }\n                }\n            }\n            if (!result.hasResult()) {\n                String message = prettyErrorMessage(selector, resolutionResult);\n                ModuleVersionResolveException failure = new ModuleVersionResolveException(selector, new LibraryResolveException(message));\n                result.failed(failure);\n            }\n        }\n    }","commit_id":"ea3c19dc2f7283e7e14c5df7c0658ce8e0ffdf1a","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n    public void resolveModuleArtifacts(ComponentResolveMetaData component, ComponentUsage usage, BuildableArtifactSetResolveResult result) {\n        ComponentIdentifier componentId = component.getComponentId();\n        if (isLibrary(componentId)) {\n            ConfigurationMetaData configuration = component.getConfiguration(usage.getConfigurationName());\n            if (configuration!=null) {\n                Set<ComponentArtifactMetaData> artifacts = configuration.getArtifacts();\n                if (!artifacts.isEmpty()) {\n                    result.resolved(artifacts);\n                    return;\n                }\n            }\n            doConvertArtifact(result, (LibraryComponentIdentifier) componentId);\n        }\n    }","id":46442,"modified_method":"@Override\n    public void resolveModuleArtifacts(ComponentResolveMetaData component, ComponentUsage usage, BuildableArtifactSetResolveResult result) {\n        ComponentIdentifier componentId = component.getComponentId();\n        if (isLibrary(componentId)) {\n            ConfigurationMetaData configuration = component.getConfiguration(usage.getConfigurationName());\n            if (configuration!=null) {\n                Set<ComponentArtifactMetaData> artifacts = configuration.getArtifacts();\n                result.resolved(artifacts);\n            }\n            if (!result.hasResult()) {\n                result.failed(new ArtifactResolveException(String.format(\"Unable to resolve artifact for %s\", componentId)));\n            }\n        }\n    }","commit_id":"ea3c19dc2f7283e7e14c5df7c0658ce8e0ffdf1a","url":"https://github.com/gradle/gradle"},{"original_method":"public LocalLibraryDependencyResolver(ProjectLocator projectLocator, BinarySpecToArtifactConverterRegistry registry) {\n        this.projectLocator = projectLocator;\n        this.binarySpecToArtifactConverterRegistry = registry;\n    }","id":46443,"modified_method":"public LocalLibraryDependencyResolver(ProjectLocator projectLocator) {\n        this.projectLocator = projectLocator;\n    }","commit_id":"ea3c19dc2f7283e7e14c5df7c0658ce8e0ffdf1a","url":"https://github.com/gradle/gradle"},{"original_method":"LocalLibraryDependencyResolver createLibraryResolver(ProjectLocator projectLocator, BinarySpecToArtifactConverterRegistry registry) {\n            return new LocalLibraryDependencyResolver(projectLocator, registry);\n        }","id":46444,"modified_method":"LocalLibraryDependencyResolver createLibraryResolver(ProjectLocator projectLocator) {\n            return new LocalLibraryDependencyResolver(projectLocator);\n        }","commit_id":"ea3c19dc2f7283e7e14c5df7c0658ce8e0ffdf1a","url":"https://github.com/gradle/gradle"},{"original_method":"public CachingModuleVersionRepository(ModuleVersionRepository delegate, ModuleResolutionCache moduleResolutionCache, ModuleDescriptorCache moduleDescriptorCache,\n                                          CachedArtifactIndex<ArtifactAtRepositoryKey> artifactAtRepositoryCachedResolutionIndex,\n                                          CachePolicy cachePolicy, TimeProvider timeProvider) {\n        this.delegate = delegate;\n        this.moduleDescriptorCache = moduleDescriptorCache;\n        this.moduleResolutionCache = moduleResolutionCache;\n        this.artifactAtRepositoryCachedResolutionIndex = artifactAtRepositoryCachedResolutionIndex;\n        this.timeProvider = timeProvider;\n        this.cachePolicy = cachePolicy;\n    }","id":46445,"modified_method":"public CachingModuleVersionRepository(ModuleVersionRepository delegate, ModuleResolutionCache moduleResolutionCache, ModuleDescriptorCache moduleDescriptorCache,\n                                          CachedArtifactIndex artifactAtRepositoryCachedResolutionIndex,\n                                          CachePolicy cachePolicy, TimeProvider timeProvider) {\n        this.delegate = delegate;\n        this.moduleDescriptorCache = moduleDescriptorCache;\n        this.moduleResolutionCache = moduleResolutionCache;\n        this.artifactAtRepositoryCachedResolutionIndex = artifactAtRepositoryCachedResolutionIndex;\n        this.timeProvider = timeProvider;\n        this.cachePolicy = cachePolicy;\n    }","commit_id":"04cb649aab7a4694cbcbcdc7934b0eca4c52dd3a","url":"https://github.com/gradle/gradle"},{"original_method":"public void resolve(Artifact artifact, BuildableArtifactResolveResult result) {\n        ArtifactAtRepositoryKey resolutionCacheIndexKey = new ArtifactAtRepositoryKey(delegate, artifact.getId());\n        // Look in the cache for this resolver\n        CachedArtifact cached = artifactAtRepositoryCachedResolutionIndex.lookup(resolutionCacheIndexKey);\n\n        final ModuleDescriptorCache.CachedModuleDescriptor cachedModuleDescriptor = moduleDescriptorCache.getCachedModuleDescriptor(delegate, artifact.getModuleRevisionId());\n        final BigInteger descriptorHash = cachedModuleDescriptor == null ? BigInteger.valueOf(-1) : cachedModuleDescriptor.getDescriptorHash();\n        if (cached != null) {\n            ArtifactIdentifier artifactIdentifier = createArtifactIdentifier(artifact);\n            long age = timeProvider.getCurrentTime() - cached.getCachedAt();\n            if (cached.isMissing()) {\n                if (!cachePolicy.mustRefreshArtifact(artifactIdentifier, null, age, descriptorHash.equals(cached.getDescriptorHash()))) {\n                    LOGGER.debug(\"Detected non-existence of artifact '{}' in resolver cache\", artifact.getId());\n                    result.notFound(artifact);\n                    return;\n                }\n            } else {\n                File cachedArtifactFile = cached.getCachedFile();\n                if (!cachePolicy.mustRefreshArtifact(artifactIdentifier, cachedArtifactFile, age, descriptorHash.equals(cached.getDescriptorHash()))) {\n                    LOGGER.debug(\"Found artifact '{}' in resolver cache: {}\", artifact.getId(), cachedArtifactFile);\n                    result.resolved(cachedArtifactFile, null);\n                    return;\n                }\n            }\n        }\n\n        delegate.resolve(artifact, result);\n        LOGGER.debug(\"Downloaded artifact '{}' from resolver: {}\", artifact.getId(), delegate);\n\n        if (result.getFailure() instanceof ArtifactNotFoundException) {\n            artifactAtRepositoryCachedResolutionIndex.storeMissing(resolutionCacheIndexKey, descriptorHash);\n        } else {\n            artifactAtRepositoryCachedResolutionIndex.store(resolutionCacheIndexKey, result.getFile(), descriptorHash);\n        }\n    }","id":46446,"modified_method":"public void resolve(Artifact artifact, BuildableArtifactResolveResult result) {\n        ArtifactAtRepositoryKey resolutionCacheIndexKey = new ArtifactAtRepositoryKey(delegate, artifact.getId());\n        // Look in the cache for this resolver\n        CachedArtifact cached = artifactAtRepositoryCachedResolutionIndex.lookup(resolutionCacheIndexKey);\n\n        final ModuleDescriptorCache.CachedModuleDescriptor cachedModuleDescriptor = moduleDescriptorCache.getCachedModuleDescriptor(delegate, artifact.getModuleRevisionId());\n        final BigInteger descriptorHash = cachedModuleDescriptor == null ? BigInteger.valueOf(-1) : cachedModuleDescriptor.getDescriptorHash();\n        if (cached != null) {\n            ArtifactIdentifier artifactIdentifier = createArtifactIdentifier(artifact);\n            long age = timeProvider.getCurrentTime() - cached.getCachedAt();\n            if (cached.isMissing()) {\n                if (!cachePolicy.mustRefreshArtifact(artifactIdentifier, null, age, descriptorHash.equals(cached.getDescriptorHash()))) {\n                    LOGGER.debug(\"Detected non-existence of artifact '{}' in resolver cache\", artifact.getId());\n                    result.notFound(artifact);\n                    return;\n                }\n            } else {\n                File cachedArtifactFile = cached.getCachedFile();\n                if (!cachePolicy.mustRefreshArtifact(artifactIdentifier, cachedArtifactFile, age, descriptorHash.equals(cached.getDescriptorHash()))) {\n                    LOGGER.debug(\"Found artifact '{}' in resolver cache: {}\", artifact.getId(), cachedArtifactFile);\n                    result.resolved(cachedArtifactFile);\n                    return;\n                }\n            }\n        }\n\n        delegate.resolve(artifact, result);\n        LOGGER.debug(\"Downloaded artifact '{}' from resolver: {}\", artifact.getId(), delegate);\n\n        if (result.getFailure() instanceof ArtifactNotFoundException) {\n            artifactAtRepositoryCachedResolutionIndex.storeMissing(resolutionCacheIndexKey, descriptorHash);\n        } else {\n            artifactAtRepositoryCachedResolutionIndex.store(resolutionCacheIndexKey, result.getFile(), descriptorHash);\n        }\n    }","commit_id":"04cb649aab7a4694cbcbcdc7934b0eca4c52dd3a","url":"https://github.com/gradle/gradle"},{"original_method":"public EnhancedArtifactDownloadReport download(Artifact artifact, ArtifactResourceResolver resourceResolver,\n                                           ResourceDownloader resourceDownloader, CacheDownloadOptions options) {\n        EnhancedArtifactDownloadReport adr = new EnhancedArtifactDownloadReport(artifact);\n\n        DownloadListener listener = options.getListener();\n        if (listener != null) {\n            listener.needArtifact(this, artifact);\n        }\n\n        long start = System.currentTimeMillis();\n        try {\n            ResolvedResource artifactRef = resourceResolver.resolve(artifact);\n            if (artifactRef != null) {\n                ArtifactOriginWithMetaData origin = new ArtifactOriginWithMetaData(artifact, artifactRef.getResource());\n                if (listener != null) {\n                    listener.startArtifactDownload(this, artifactRef, artifact, origin);\n                }\n\n                File artifactFile = downloadArtifactFile(artifact, resourceDownloader, artifactRef);\n\n                adr.setDownloadTimeMillis(System.currentTimeMillis() - start);\n                adr.setSize(artifactFile.length());\n                adr.setDownloadStatus(DownloadStatus.SUCCESSFUL);\n                adr.setArtifactOrigin(origin);\n                adr.setLocalFile(artifactFile);\n            } else {\n                adr.setDownloadTimeMillis(System.currentTimeMillis() - start);\n                adr.setDownloadStatus(DownloadStatus.FAILED);\n                adr.setDownloadDetails(ArtifactDownloadReport.MISSING_ARTIFACT);\n            }\n        } catch (Throwable throwable) {\n            adr.setDownloadTimeMillis(System.currentTimeMillis() - start);\n            adr.failed(throwable);\n        }\n        if (listener != null) {\n            listener.endArtifactDownload(this, artifact, adr, adr.getLocalFile());\n        }\n        return adr;\n    }","id":46447,"modified_method":"public EnhancedArtifactDownloadReport download(Artifact artifact, ArtifactResourceResolver resourceResolver,\n                                                   ResourceDownloader resourceDownloader, CacheDownloadOptions options) {\n        EnhancedArtifactDownloadReport adr = new EnhancedArtifactDownloadReport(artifact);\n\n        DownloadListener listener = options.getListener();\n        if (listener != null) {\n            listener.needArtifact(this, artifact);\n        }\n\n        long start = System.currentTimeMillis();\n        try {\n            ResolvedResource artifactRef = resourceResolver.resolve(artifact);\n            if (artifactRef != null) {\n                final Resource resource = artifactRef.getResource();\n                ArtifactOrigin origin = new ArtifactOrigin(artifact, resource.isLocal(), getLocation(resource));\n                if (listener != null) {\n                    listener.startArtifactDownload(this, artifactRef, artifact, origin);\n                }\n\n                File artifactFile = downloadArtifactFile(artifact, resourceDownloader, artifactRef);\n\n                adr.setDownloadTimeMillis(System.currentTimeMillis() - start);\n                adr.setSize(artifactFile.length());\n                adr.setDownloadStatus(DownloadStatus.SUCCESSFUL);\n                adr.setArtifactOrigin(origin);\n                adr.setLocalFile(artifactFile);\n            } else {\n                adr.setDownloadTimeMillis(System.currentTimeMillis() - start);\n                adr.setDownloadStatus(DownloadStatus.FAILED);\n                adr.setDownloadDetails(ArtifactDownloadReport.MISSING_ARTIFACT);\n            }\n        } catch (Throwable throwable) {\n            adr.setDownloadTimeMillis(System.currentTimeMillis() - start);\n            adr.failed(throwable);\n        }\n        if (listener != null) {\n            listener.endArtifactDownload(this, artifact, adr, adr.getLocalFile());\n        }\n        return adr;\n    }","commit_id":"04cb649aab7a4694cbcbcdc7934b0eca4c52dd3a","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n    public ArtifactOrigin locate(Artifact artifact) {\n        ResolvedResource artifactRef = getArtifactRef(artifact, null, false);\n        if (artifactRef != null && artifactRef.getResource().exists()) {\n            return new ArtifactOriginWithMetaData(artifact, artifactRef.getResource());\n        }\n        return null;\n    }","id":46448,"modified_method":"@Override\n    public ArtifactOrigin locate(Artifact artifact) {\n        ResolvedResource artifactRef = getArtifactRef(artifact, null, false);\n        if (artifactRef != null && artifactRef.getResource().exists()) {\n            final Resource resource = artifactRef.getResource();\n            return new ArtifactOrigin(artifact, resource.isLocal(), resource.getName());\n        }\n        return null;\n    }","commit_id":"04cb649aab7a4694cbcbcdc7934b0eca4c52dd3a","url":"https://github.com/gradle/gradle"},{"original_method":"public void resolve(Artifact artifact, BuildableArtifactResolveResult result) {\n        EnhancedArtifactDownloadReport artifactDownloadReport = resolver.download(artifact);\n        if (downloadFailed(artifactDownloadReport)) {\n            result.failed(new ArtifactResolveException(artifactDownloadReport.getArtifact(), artifactDownloadReport.getFailure()));\n            return;\n        }\n\n        ArtifactOriginWithMetaData artifactOrigin = artifactDownloadReport.getArtifactOrigin();\n\n        File localFile = artifactDownloadReport.getLocalFile();\n        if (localFile != null) {\n            ExternalResourceMetaData metaData = artifactOrigin.getMetaData();\n            result.resolved(localFile, metaData);\n        } else {\n            result.notFound(artifact);\n        }\n    }","id":46449,"modified_method":"public void resolve(Artifact artifact, BuildableArtifactResolveResult result) {\n        EnhancedArtifactDownloadReport artifactDownloadReport = resolver.download(artifact);\n        if (downloadFailed(artifactDownloadReport)) {\n            result.failed(new ArtifactResolveException(artifactDownloadReport.getArtifact(), artifactDownloadReport.getFailure()));\n            return;\n        }\n        File localFile = artifactDownloadReport.getLocalFile();\n        if (localFile != null) {\n            result.resolved(localFile);\n        } else {\n            result.notFound(artifact);\n        }\n    }","commit_id":"04cb649aab7a4694cbcbcdc7934b0eca4c52dd3a","url":"https://github.com/gradle/gradle"},{"original_method":"public void resolve(Artifact artifact, BuildableArtifactResolveResult result) {\n        ArtifactDownloadReport artifactDownloadReport = resolver.download(new Artifact[]{artifact}, downloadOptions).getArtifactReport(artifact);\n        if (downloadFailed(artifactDownloadReport)) {\n            if (artifactDownloadReport instanceof EnhancedArtifactDownloadReport) {\n                EnhancedArtifactDownloadReport enhancedReport = (EnhancedArtifactDownloadReport) artifactDownloadReport;\n                result.failed(new ArtifactResolveException(artifactDownloadReport.getArtifact(), enhancedReport.getFailure()));\n            } else {\n                result.failed(new ArtifactResolveException(artifactDownloadReport.getArtifact(), artifactDownloadReport.getDownloadDetails()));\n            }\n            return;\n        }\n\n        ArtifactOrigin artifactOrigin = artifactDownloadReport.getArtifactOrigin();\n\n        File localFile = artifactDownloadReport.getLocalFile();\n        if (localFile != null) {\n            ExternalResourceMetaData metaData = null;\n            if (artifactOrigin instanceof ArtifactOriginWithMetaData) {\n                metaData = ((ArtifactOriginWithMetaData) artifactOrigin).getMetaData();\n            }\n            result.resolved(localFile, metaData);\n        } else {\n            result.notFound(artifact);\n        }\n    }","id":46450,"modified_method":"public void resolve(Artifact artifact, BuildableArtifactResolveResult result) {\n        ArtifactDownloadReport artifactDownloadReport = resolver.download(new Artifact[]{artifact}, downloadOptions).getArtifactReport(artifact);\n        if (downloadFailed(artifactDownloadReport)) {\n            if (artifactDownloadReport instanceof EnhancedArtifactDownloadReport) {\n                EnhancedArtifactDownloadReport enhancedReport = (EnhancedArtifactDownloadReport) artifactDownloadReport;\n                result.failed(new ArtifactResolveException(artifactDownloadReport.getArtifact(), enhancedReport.getFailure()));\n            } else {\n                result.failed(new ArtifactResolveException(artifactDownloadReport.getArtifact(), artifactDownloadReport.getDownloadDetails()));\n            }\n            return;\n        }\n\n        File localFile = artifactDownloadReport.getLocalFile();\n        if (localFile != null) {\n            result.resolved(localFile);\n        } else {\n            result.notFound(artifact);\n        }\n    }","commit_id":"04cb649aab7a4694cbcbcdc7934b0eca4c52dd3a","url":"https://github.com/gradle/gradle"},{"original_method":"public EnhancedArtifactDownloadReport download(Artifact artifact, ArtifactResourceResolver resourceResolver, ResourceDownloader resourceDownloader, CacheDownloadOptions options) {\n        long start = System.currentTimeMillis();\n        EnhancedArtifactDownloadReport report = new EnhancedArtifactDownloadReport(artifact);\n        ResolvedResource resolvedResource = resourceResolver.resolve(artifact);\n        if (resolvedResource == null) {\n            report.setDownloadStatus(DownloadStatus.FAILED);\n            report.setDownloadDetails(ArtifactDownloadReport.MISSING_ARTIFACT);\n            report.setDownloadTimeMillis(System.currentTimeMillis() - start);\n            return report;\n        }\n        assert resolvedResource.getResource().isLocal();\n        File file = new File(resolvedResource.getResource().getName());\n        assert file.isFile();\n\n        ArtifactOrigin origin = new ArtifactOriginWithMetaData(artifact, true, new DefaultExternalResourceMetaData(file.getAbsolutePath()));\n        report.setDownloadStatus(DownloadStatus.NO);\n        report.setArtifactOrigin(origin);\n        report.setSize(file.length());\n        report.setLocalFile(file);\n        return report;\n    }","id":46451,"modified_method":"public EnhancedArtifactDownloadReport download(Artifact artifact, ArtifactResourceResolver resourceResolver, ResourceDownloader resourceDownloader, CacheDownloadOptions options) {\n        long start = System.currentTimeMillis();\n        EnhancedArtifactDownloadReport report = new EnhancedArtifactDownloadReport(artifact);\n        ResolvedResource resolvedResource = resourceResolver.resolve(artifact);\n        if (resolvedResource == null) {\n            report.setDownloadStatus(DownloadStatus.FAILED);\n            report.setDownloadDetails(ArtifactDownloadReport.MISSING_ARTIFACT);\n            report.setDownloadTimeMillis(System.currentTimeMillis() - start);\n            return report;\n        }\n        assert resolvedResource.getResource().isLocal();\n        File file = new File(resolvedResource.getResource().getName());\n        assert file.isFile();\n\n        ArtifactOrigin origin = new ArtifactOrigin(artifact, true, file.getAbsolutePath());\n        report.setDownloadStatus(DownloadStatus.NO);\n        report.setArtifactOrigin(origin);\n        report.setSize(file.length());\n        report.setLocalFile(file);\n        return report;\n    }","commit_id":"04cb649aab7a4694cbcbcdc7934b0eca4c52dd3a","url":"https://github.com/gradle/gradle"},{"original_method":"public void resolve(Artifact artifact, BuildableArtifactResolveResult result) {\n            String path = artifact.getExtraAttribute(DefaultIvyDependencyPublisher.FILE_ABSOLUTE_PATH_EXTRA_ATTRIBUTE);\n            result.resolved(new File(path), null);\n        }","id":46452,"modified_method":"public void resolve(Artifact artifact, BuildableArtifactResolveResult result) {\n            String path = artifact.getExtraAttribute(DefaultIvyDependencyPublisher.FILE_ABSOLUTE_PATH_EXTRA_ATTRIBUTE);\n            result.resolved(new File(path));\n        }","commit_id":"04cb649aab7a4694cbcbcdc7934b0eca4c52dd3a","url":"https://github.com/gradle/gradle"},{"original_method":"public ResolveIvyFactory(IvyFactory ivyFactory, ResolverProvider resolverProvider, SettingsConverter settingsConverter,\n                             ModuleResolutionCache moduleResolutionCache, ModuleDescriptorCache moduleDescriptorCache,\n                             CachedArtifactIndex<ArtifactAtRepositoryKey> artifactAtRepositoryCachedResolutionIndex,\n                             CacheLockingManager cacheLockingManager, StartParameterResolutionOverride startParameterResolutionOverride,\n                             TimeProvider timeProvider) {\n        this.ivyFactory = ivyFactory;\n        this.resolverProvider = resolverProvider;\n        this.settingsConverter = settingsConverter;\n        this.moduleResolutionCache = moduleResolutionCache;\n        this.moduleDescriptorCache = moduleDescriptorCache;\n        this.artifactAtRepositoryCachedResolutionIndex = artifactAtRepositoryCachedResolutionIndex;\n        this.cacheLockingManager = cacheLockingManager;\n        this.startParameterResolutionOverride = startParameterResolutionOverride;\n        this.timeProvider = timeProvider;\n    }","id":46453,"modified_method":"public ResolveIvyFactory(IvyFactory ivyFactory, ResolverProvider resolverProvider, SettingsConverter settingsConverter,\n                             ModuleResolutionCache moduleResolutionCache, ModuleDescriptorCache moduleDescriptorCache,\n                             CachedArtifactIndex artifactAtRepositoryCachedResolutionIndex,\n                             CacheLockingManager cacheLockingManager, StartParameterResolutionOverride startParameterResolutionOverride,\n                             TimeProvider timeProvider) {\n        this.ivyFactory = ivyFactory;\n        this.resolverProvider = resolverProvider;\n        this.settingsConverter = settingsConverter;\n        this.moduleResolutionCache = moduleResolutionCache;\n        this.moduleDescriptorCache = moduleDescriptorCache;\n        this.artifactAtRepositoryCachedResolutionIndex = artifactAtRepositoryCachedResolutionIndex;\n        this.cacheLockingManager = cacheLockingManager;\n        this.startParameterResolutionOverride = startParameterResolutionOverride;\n        this.timeProvider = timeProvider;\n    }","commit_id":"04cb649aab7a4694cbcbcdc7934b0eca4c52dd3a","url":"https://github.com/gradle/gradle"},{"original_method":"protected Object[] updateUser(\n\t\t\tActionRequest actionRequest, ActionResponse actionResponse)\n\t\tthrows Exception {\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)actionRequest.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tUser user = PortalUtil.getSelectedUser(actionRequest);\n\n\t\tboolean deleteLogo = ParamUtil.getBoolean(actionRequest, \"deleteLogo\");\n\n\t\tif (deleteLogo) {\n\t\t\tUserServiceUtil.deletePortrait(user.getUserId());\n\t\t}\n\n\t\tContact contact = user.getContact();\n\n\t\tString oldPassword = AdminUtil.getUpdateUserPassword(\n\t\t\tactionRequest, user.getUserId());\n\t\tString newPassword1 = actionRequest.getParameter(\"password1\");\n\t\tString newPassword2 = actionRequest.getParameter(\"password2\");\n\t\tboolean passwordReset = ParamUtil.getBoolean(\n\t\t\tactionRequest, \"passwordReset\");\n\n\t\tString reminderQueryQuestion = BeanParamUtil.getString(\n\t\t\tuser, actionRequest, \"reminderQueryQuestion\");\n\n\t\tif (reminderQueryQuestion.equals(UsersAdminUtil.CUSTOM_QUESTION)) {\n\t\t\treminderQueryQuestion = BeanParamUtil.getString(\n\t\t\t\tuser, actionRequest, \"reminderQueryCustomQuestion\");\n\t\t}\n\n\t\tString reminderQueryAnswer = BeanParamUtil.getString(\n\t\t\tuser, actionRequest, \"reminderQueryAnswer\");\n\t\tString oldScreenName = user.getScreenName();\n\t\tString screenName = BeanParamUtil.getString(\n\t\t\tuser, actionRequest, \"screenName\");\n\t\tString oldEmailAddress = user.getEmailAddress();\n\t\tString emailAddress = BeanParamUtil.getString(\n\t\t\tuser, actionRequest, \"emailAddress\");\n\t\tlong facebookId = user.getFacebookId();\n\t\tString openId = BeanParamUtil.getString(user, actionRequest, \"openId\");\n\t\tString oldLanguageId = user.getLanguageId();\n\t\tString languageId = BeanParamUtil.getString(\n\t\t\tuser, actionRequest, \"languageId\");\n\t\tString timeZoneId = BeanParamUtil.getString(\n\t\t\tuser, actionRequest, \"timeZoneId\");\n\t\tString greeting = BeanParamUtil.getString(\n\t\t\tuser, actionRequest, \"greeting\");\n\t\tString firstName = BeanParamUtil.getString(\n\t\t\tuser, actionRequest, \"firstName\");\n\t\tString middleName = BeanParamUtil.getString(\n\t\t\tuser, actionRequest, \"middleName\");\n\t\tString lastName = BeanParamUtil.getString(\n\t\t\tuser, actionRequest, \"lastName\");\n\t\tint prefixId = BeanParamUtil.getInteger(\n\t\t\tcontact, actionRequest, \"prefixId\");\n\t\tint suffixId = BeanParamUtil.getInteger(\n\t\t\tcontact, actionRequest, \"suffixId\");\n\t\tboolean male = BeanParamUtil.getBoolean(\n\t\t\tuser, actionRequest, \"male\", true);\n\n\t\tCalendar birthdayCal = CalendarFactoryUtil.getCalendar();\n\n\t\tbirthdayCal.setTime(contact.getBirthday());\n\n\t\tint birthdayMonth = ParamUtil.getInteger(\n\t\t\tactionRequest, \"birthdayMonth\", birthdayCal.get(Calendar.MONTH));\n\t\tint birthdayDay = ParamUtil.getInteger(\n\t\t\tactionRequest, \"birthdayDay\", birthdayCal.get(Calendar.DATE));\n\t\tint birthdayYear = ParamUtil.getInteger(\n\t\t\tactionRequest, \"birthdayYear\", birthdayCal.get(Calendar.YEAR));\n\t\tString comments = BeanParamUtil.getString(\n\t\t\tuser, actionRequest, \"comments\");\n\t\tString smsSn = BeanParamUtil.getString(contact, actionRequest, \"smsSn\");\n\t\tString aimSn = BeanParamUtil.getString(contact, actionRequest, \"aimSn\");\n\t\tString facebookSn = BeanParamUtil.getString(\n\t\t\tcontact, actionRequest, \"facebookSn\");\n\t\tString icqSn = BeanParamUtil.getString(contact, actionRequest, \"icqSn\");\n\t\tString jabberSn = BeanParamUtil.getString(\n\t\t\tcontact, actionRequest, \"jabberSn\");\n\t\tString msnSn = BeanParamUtil.getString(contact, actionRequest, \"msnSn\");\n\t\tString mySpaceSn = BeanParamUtil.getString(\n\t\t\tcontact, actionRequest, \"mySpaceSn\");\n\t\tString skypeSn = BeanParamUtil.getString(\n\t\t\tcontact, actionRequest, \"skypeSn\");\n\t\tString twitterSn = BeanParamUtil.getString(\n\t\t\tcontact, actionRequest, \"twitterSn\");\n\t\tString ymSn = BeanParamUtil.getString(contact, actionRequest, \"ymSn\");\n\t\tString jobTitle = BeanParamUtil.getString(\n\t\t\tuser, actionRequest, \"jobTitle\");\n\t\tlong[] groupIds = getLongArray(\n\t\t\tactionRequest, \"groupsSearchContainerPrimaryKeys\");\n\t\tlong[] organizationIds = getLongArray(\n\t\t\tactionRequest, \"organizationsSearchContainerPrimaryKeys\");\n\t\tlong[] roleIds = getLongArray(\n\t\t\tactionRequest, \"rolesSearchContainerPrimaryKeys\");\n\n\t\tList<UserGroupRole> userGroupRoles = null;\n\n\t\tif ((actionRequest.getParameter(\"groupRolesGroupIds\") != null) ||\n\t\t\t(actionRequest.getParameter(\"groupRolesRoleIds\") != null)) {\n\n\t\t\tuserGroupRoles = UsersAdminUtil.getUserGroupRoles(actionRequest);\n\t\t}\n\n\t\tlong[] userGroupIds = getLongArray(\n\t\t\tactionRequest, \"userGroupsSearchContainerPrimaryKeys\");\n\n\t\tList<Address> addresses = user.getAddresses();\n\n\t\tif (actionRequest.getParameter(\"addressesIndexes\") != null) {\n\t\t\taddresses = UsersAdminUtil.getAddresses(actionRequest);\n\t\t}\n\n\t\tList<EmailAddress> emailAddresses =\n\t\t\tEmailAddressServiceUtil.getEmailAddresses(\n\t\t\t\tUser.class.getName(), user.getUserId());\n\n\t\tif (actionRequest.getParameter(\"emailAddressesIndexes\") != null) {\n\t\t\temailAddresses = UsersAdminUtil.getEmailAddresses(actionRequest);\n\t\t}\n\n\t\tList<Phone> phones = user.getPhones();\n\n\t\tif (actionRequest.getParameter(\"phonesIndexes\") != null) {\n\t\t\tphones = UsersAdminUtil.getPhones(actionRequest);\n\t\t}\n\n\t\tList<Website> websites = user.getWebsites();\n\n\t\tif (actionRequest.getParameter(\"websitesIndexes\") != null) {\n\t\t\twebsites = UsersAdminUtil.getWebsites(actionRequest);\n\t\t}\n\n\t\tList<AnnouncementsDelivery> announcementsDeliveries =\n\t\t\tAnnouncementsDeliveryLocalServiceUtil.getUserDeliveries(\n\t\t\t\tuser.getUserId());\n\n\t\tif (actionRequest.getParameter(\n\t\t\t\"announcementsType\" + AnnouncementsEntryConstants.TYPES[0] +\n\t\t\t\t\"Email\") != null) {\n\n\t\t\tannouncementsDeliveries = getAnnouncementsDeliveries(actionRequest);\n\t\t}\n\n\t\tServiceContext serviceContext = ServiceContextFactory.getInstance(\n\t\t\tUser.class.getName(), actionRequest);\n\n\t\tif (actionRequest.getParameter(\"assetCategoryNames\") == null ) {\n\t\t\tList<AssetCategory> assetCategories =\n\t\t\t\tAssetCategoryLocalServiceUtil.getCategories(\n\t\t\t\t\tUser.class.getName(), user.getUserId());\n\n\t\t\tlong[] assetCategoryIds = new long[assetCategories.size()];\n\n\t\t\tfor (int i = 0; i < assetCategories.size(); i++) {\n\t\t\t\tAssetCategory assetCategory = assetCategories.get(i);\n\n\t\t\t\tassetCategoryIds[i] = assetCategory.getCategoryId();\n\t\t\t}\n\n\t\t\tserviceContext.setAssetCategoryIds(assetCategoryIds);\n\t\t}\n\n\t\tif (actionRequest.getParameter(\"assetTagNames\") == null ) {\n\t\t\tList<AssetTag> assetTags =\n\t\t\t\tAssetTagLocalServiceUtil.getTags(\n\t\t\t\t\tUser.class.getName(), user.getUserId());\n\n\t\t\tString[] assetTagNames = new String[assetTags.size()];\n\n\t\t\tfor (int i = 0; i < assetTags.size(); i++) {\n\t\t\t\tAssetTag assetTag = assetTags.get(i);\n\n\t\t\t\tassetTagNames[i] = assetTag.getName();\n\t\t\t}\n\n\t\t\tserviceContext.setAssetTagNames(assetTagNames);\n\t\t}\n\n\t\tuser = UserServiceUtil.updateUser(\n\t\t\tuser.getUserId(), oldPassword, newPassword1, newPassword2,\n\t\t\tpasswordReset, reminderQueryQuestion, reminderQueryAnswer,\n\t\t\tscreenName, emailAddress, facebookId, openId, languageId,\n\t\t\ttimeZoneId, greeting, comments, firstName, middleName, lastName,\n\t\t\tprefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear,\n\t\t\tsmsSn, aimSn, facebookSn, icqSn, jabberSn, msnSn, mySpaceSn,\n\t\t\tskypeSn, twitterSn, ymSn, jobTitle, groupIds, organizationIds,\n\t\t\troleIds, userGroupRoles, userGroupIds, addresses, emailAddresses,\n\t\t\tphones, websites, announcementsDeliveries, serviceContext);\n\n\t\tif (oldScreenName.equals(user.getScreenName())) {\n\t\t\toldScreenName = StringPool.BLANK;\n\t\t}\n\n\t\tif (user.getUserId() == themeDisplay.getUserId()) {\n\n\t\t\t// Reset the locale\n\n\t\t\tHttpServletRequest request = PortalUtil.getHttpServletRequest(\n\t\t\t\tactionRequest);\n\t\t\tHttpServletResponse response= PortalUtil.getHttpServletResponse(\n\t\t\t\tactionResponse);\n\t\t\tHttpSession session = request.getSession();\n\n\t\t\tsession.removeAttribute(Globals.LOCALE_KEY);\n\n\t\t\tLocale locale = LocaleUtil.fromLanguageId(languageId);\n\n\t\t\tLanguageUtil.updateCookie(request, response, locale);\n\n\t\t\t// Clear cached portlet responses\n\n\t\t\tPortletSession portletSession = actionRequest.getPortletSession();\n\n\t\t\tInvokerPortletImpl.clearResponses(portletSession);\n\n\t\t\t// Password\n\n\t\t\tif (PropsValues.SESSION_STORE_PASSWORD &&\n\t\t\t\tValidator.isNotNull(newPassword1)) {\n\n\t\t\t\tportletSession.setAttribute(\n\t\t\t\t\tWebKeys.USER_PASSWORD, newPassword1,\n\t\t\t\t\tPortletSession.APPLICATION_SCOPE);\n\t\t\t}\n\t\t}\n\n\t\tString portletId = serviceContext.getPortletId();\n\n\t\tif (!portletId.equals(PortletKeys.MY_ACCOUNT)) {\n\t\t\tlong publicLayoutSetPrototypeId = ParamUtil.getLong(\n\t\t\t\tactionRequest, \"publicLayoutSetPrototypeId\");\n\t\t\tlong privateLayoutSetPrototypeId = ParamUtil.getLong(\n\t\t\t\tactionRequest, \"privateLayoutSetPrototypeId\");\n\t\t\tboolean publicLayoutSetPrototypeLinkEnabled = ParamUtil.getBoolean(\n\t\t\t\tactionRequest, \"publicLayoutSetPrototypeLinkEnabled\");\n\t\t\tboolean privateLayoutSetPrototypeLinkEnabled = ParamUtil.getBoolean(\n\t\t\t\tactionRequest, \"privateLayoutSetPrototypeLinkEnabled\");\n\n\t\t\tSitesUtil.updateLayoutSetPrototypesLinks(\n\t\t\t\tuser.getGroup(), publicLayoutSetPrototypeId,\n\t\t\t\tprivateLayoutSetPrototypeId,\n\t\t\t\tpublicLayoutSetPrototypeLinkEnabled,\n\t\t\t\tprivateLayoutSetPrototypeLinkEnabled);\n\t\t}\n\n\t\tCompany company = PortalUtil.getCompany(actionRequest);\n\n\t\tif (company.isStrangersVerify() &&\n\t\t\t!oldEmailAddress.equalsIgnoreCase(emailAddress)) {\n\n\t\t\tSessionMessages.add(actionRequest, \"verificationEmailSent\");\n\t\t}\n\n\t\treturn new Object[] {user, oldScreenName, oldLanguageId};\n\t}","id":46454,"modified_method":"protected Object[] updateUser(\n\t\t\tActionRequest actionRequest, ActionResponse actionResponse)\n\t\tthrows Exception {\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)actionRequest.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tUser user = PortalUtil.getSelectedUser(actionRequest);\n\n\t\tboolean deleteLogo = ParamUtil.getBoolean(actionRequest, \"deleteLogo\");\n\n\t\tif (deleteLogo) {\n\t\t\tUserServiceUtil.deletePortrait(user.getUserId());\n\t\t}\n\n\t\tContact contact = user.getContact();\n\n\t\tString oldPassword = AdminUtil.getUpdateUserPassword(\n\t\t\tactionRequest, user.getUserId());\n\t\tString newPassword1 = actionRequest.getParameter(\"password1\");\n\t\tString newPassword2 = actionRequest.getParameter(\"password2\");\n\t\tboolean passwordReset = ParamUtil.getBoolean(\n\t\t\tactionRequest, \"passwordReset\");\n\n\t\tString reminderQueryQuestion = BeanParamUtil.getString(\n\t\t\tuser, actionRequest, \"reminderQueryQuestion\");\n\n\t\tif (reminderQueryQuestion.equals(UsersAdminUtil.CUSTOM_QUESTION)) {\n\t\t\treminderQueryQuestion = BeanParamUtil.getString(\n\t\t\t\tuser, actionRequest, \"reminderQueryCustomQuestion\");\n\t\t}\n\n\t\tString reminderQueryAnswer = BeanParamUtil.getString(\n\t\t\tuser, actionRequest, \"reminderQueryAnswer\");\n\t\tString oldScreenName = user.getScreenName();\n\t\tString screenName = BeanParamUtil.getString(\n\t\t\tuser, actionRequest, \"screenName\");\n\t\tString oldEmailAddress = user.getEmailAddress();\n\t\tString emailAddress = BeanParamUtil.getString(\n\t\t\tuser, actionRequest, \"emailAddress\");\n\t\tlong facebookId = user.getFacebookId();\n\t\tString openId = BeanParamUtil.getString(user, actionRequest, \"openId\");\n\t\tString oldLanguageId = user.getLanguageId();\n\t\tString languageId = BeanParamUtil.getString(\n\t\t\tuser, actionRequest, \"languageId\");\n\t\tString timeZoneId = BeanParamUtil.getString(\n\t\t\tuser, actionRequest, \"timeZoneId\");\n\t\tString greeting = BeanParamUtil.getString(\n\t\t\tuser, actionRequest, \"greeting\");\n\t\tString firstName = BeanParamUtil.getString(\n\t\t\tuser, actionRequest, \"firstName\");\n\t\tString middleName = BeanParamUtil.getString(\n\t\t\tuser, actionRequest, \"middleName\");\n\t\tString lastName = BeanParamUtil.getString(\n\t\t\tuser, actionRequest, \"lastName\");\n\t\tint prefixId = BeanParamUtil.getInteger(\n\t\t\tcontact, actionRequest, \"prefixId\");\n\t\tint suffixId = BeanParamUtil.getInteger(\n\t\t\tcontact, actionRequest, \"suffixId\");\n\t\tboolean male = BeanParamUtil.getBoolean(\n\t\t\tuser, actionRequest, \"male\", true);\n\n\t\tCalendar birthdayCal = CalendarFactoryUtil.getCalendar();\n\n\t\tbirthdayCal.setTime(contact.getBirthday());\n\n\t\tint birthdayMonth = ParamUtil.getInteger(\n\t\t\tactionRequest, \"birthdayMonth\", birthdayCal.get(Calendar.MONTH));\n\t\tint birthdayDay = ParamUtil.getInteger(\n\t\t\tactionRequest, \"birthdayDay\", birthdayCal.get(Calendar.DATE));\n\t\tint birthdayYear = ParamUtil.getInteger(\n\t\t\tactionRequest, \"birthdayYear\", birthdayCal.get(Calendar.YEAR));\n\t\tString comments = BeanParamUtil.getString(\n\t\t\tuser, actionRequest, \"comments\");\n\t\tString smsSn = BeanParamUtil.getString(contact, actionRequest, \"smsSn\");\n\t\tString aimSn = BeanParamUtil.getString(contact, actionRequest, \"aimSn\");\n\t\tString facebookSn = BeanParamUtil.getString(\n\t\t\tcontact, actionRequest, \"facebookSn\");\n\t\tString icqSn = BeanParamUtil.getString(contact, actionRequest, \"icqSn\");\n\t\tString jabberSn = BeanParamUtil.getString(\n\t\t\tcontact, actionRequest, \"jabberSn\");\n\t\tString msnSn = BeanParamUtil.getString(contact, actionRequest, \"msnSn\");\n\t\tString mySpaceSn = BeanParamUtil.getString(\n\t\t\tcontact, actionRequest, \"mySpaceSn\");\n\t\tString skypeSn = BeanParamUtil.getString(\n\t\t\tcontact, actionRequest, \"skypeSn\");\n\t\tString twitterSn = BeanParamUtil.getString(\n\t\t\tcontact, actionRequest, \"twitterSn\");\n\t\tString ymSn = BeanParamUtil.getString(contact, actionRequest, \"ymSn\");\n\t\tString jobTitle = BeanParamUtil.getString(\n\t\t\tuser, actionRequest, \"jobTitle\");\n\t\tlong[] groupIds = getLongArray(\n\t\t\tactionRequest, \"groupsSearchContainerPrimaryKeys\");\n\t\tlong[] organizationIds = getLongArray(\n\t\t\tactionRequest, \"organizationsSearchContainerPrimaryKeys\");\n\t\tlong[] roleIds = getLongArray(\n\t\t\tactionRequest, \"rolesSearchContainerPrimaryKeys\");\n\n\t\tList<UserGroupRole> userGroupRoles = null;\n\n\t\tif ((actionRequest.getParameter(\"groupRolesGroupIds\") != null) ||\n\t\t\t(actionRequest.getParameter(\"groupRolesRoleIds\") != null)) {\n\n\t\t\tuserGroupRoles = UsersAdminUtil.getUserGroupRoles(actionRequest);\n\t\t}\n\n\t\tlong[] userGroupIds = getLongArray(\n\t\t\tactionRequest, \"userGroupsSearchContainerPrimaryKeys\");\n\n\t\tList<Address> addresses = null;\n\n\t\tif (actionRequest.getParameter(\"addressesIndexes\") != null) {\n\t\t\taddresses = UsersAdminUtil.getAddresses(actionRequest);\n\t\t}\n\t\telse {\n\t\t\taddresses = user.getAddresses();\n\t\t}\n\n\t\tList<EmailAddress> emailAddresses = null;\n\n\t\tif (actionRequest.getParameter(\"emailAddressesIndexes\") != null) {\n\t\t\temailAddresses = UsersAdminUtil.getEmailAddresses(actionRequest);\n\t\t}\n\t\telse {\n\t\t\temailAddresses = EmailAddressServiceUtil.getEmailAddresses(\n\t\t\t\tUser.class.getName(), user.getUserId());\n\t\t}\n\n\t\tList<Phone> phones = null;\n\n\t\tif (actionRequest.getParameter(\"phonesIndexes\") != null) {\n\t\t\tphones = UsersAdminUtil.getPhones(actionRequest);\n\t\t}\n\t\telse {\n\t\t\tphones = user.getPhones();\n\t\t}\n\n\t\tList<Website> websites = null;\n\n\t\tif (actionRequest.getParameter(\"websitesIndexes\") != null) {\n\t\t\twebsites = UsersAdminUtil.getWebsites(actionRequest);\n\t\t}\n\t\telse {\n\t\t\twebsites = user.getWebsites();\n\t\t}\n\n\t\tList<AnnouncementsDelivery> announcementsDeliveries = null;\n\n\t\tif (actionRequest.getParameter(\n\t\t\t\t\"announcementsType\" + AnnouncementsEntryConstants.TYPES[0] +\n\t\t\t\t\t\"Email\") != null) {\n\n\t\t\tannouncementsDeliveries = getAnnouncementsDeliveries(actionRequest);\n\t\t}\n\t\telse {\n\t\t\tannouncementsDeliveries =\n\t\t\t\tAnnouncementsDeliveryLocalServiceUtil.getUserDeliveries(\n\t\t\t\t\tuser.getUserId());\n\t\t}\n\n\t\tServiceContext serviceContext = ServiceContextFactory.getInstance(\n\t\t\tUser.class.getName(), actionRequest);\n\n\t\tif (actionRequest.getParameter(\"assetCategoryNames\") == null ) {\n\t\t\tlong[] assetCategoryIds =\n\t\t\t\tAssetCategoryLocalServiceUtil.getCategoryIds(\n\t\t\t\t\tUser.class.getName(), user.getUserId());\n\n\t\t\tserviceContext.setAssetCategoryIds(assetCategoryIds);\n\t\t}\n\n\t\tif (actionRequest.getParameter(\"assetTagNames\") == null ) {\n\t\t\tString[] assetTagNames = AssetTagLocalServiceUtil.getTagNames(\n\t\t\t\tUser.class.getName(), user.getUserId());\n\n\t\t\tserviceContext.setAssetTagNames(assetTagNames);\n\t\t}\n\n\t\tuser = UserServiceUtil.updateUser(\n\t\t\tuser.getUserId(), oldPassword, newPassword1, newPassword2,\n\t\t\tpasswordReset, reminderQueryQuestion, reminderQueryAnswer,\n\t\t\tscreenName, emailAddress, facebookId, openId, languageId,\n\t\t\ttimeZoneId, greeting, comments, firstName, middleName, lastName,\n\t\t\tprefixId, suffixId, male, birthdayMonth, birthdayDay, birthdayYear,\n\t\t\tsmsSn, aimSn, facebookSn, icqSn, jabberSn, msnSn, mySpaceSn,\n\t\t\tskypeSn, twitterSn, ymSn, jobTitle, groupIds, organizationIds,\n\t\t\troleIds, userGroupRoles, userGroupIds, addresses, emailAddresses,\n\t\t\tphones, websites, announcementsDeliveries, serviceContext);\n\n\t\tif (oldScreenName.equals(user.getScreenName())) {\n\t\t\toldScreenName = StringPool.BLANK;\n\t\t}\n\n\t\tif (user.getUserId() == themeDisplay.getUserId()) {\n\n\t\t\t// Reset the locale\n\n\t\t\tHttpServletRequest request = PortalUtil.getHttpServletRequest(\n\t\t\t\tactionRequest);\n\t\t\tHttpServletResponse response= PortalUtil.getHttpServletResponse(\n\t\t\t\tactionResponse);\n\t\t\tHttpSession session = request.getSession();\n\n\t\t\tsession.removeAttribute(Globals.LOCALE_KEY);\n\n\t\t\tLocale locale = LocaleUtil.fromLanguageId(languageId);\n\n\t\t\tLanguageUtil.updateCookie(request, response, locale);\n\n\t\t\t// Clear cached portlet responses\n\n\t\t\tPortletSession portletSession = actionRequest.getPortletSession();\n\n\t\t\tInvokerPortletImpl.clearResponses(portletSession);\n\n\t\t\t// Password\n\n\t\t\tif (PropsValues.SESSION_STORE_PASSWORD &&\n\t\t\t\tValidator.isNotNull(newPassword1)) {\n\n\t\t\t\tportletSession.setAttribute(\n\t\t\t\t\tWebKeys.USER_PASSWORD, newPassword1,\n\t\t\t\t\tPortletSession.APPLICATION_SCOPE);\n\t\t\t}\n\t\t}\n\n\t\tString portletId = serviceContext.getPortletId();\n\n\t\tif (!portletId.equals(PortletKeys.MY_ACCOUNT)) {\n\t\t\tlong publicLayoutSetPrototypeId = ParamUtil.getLong(\n\t\t\t\tactionRequest, \"publicLayoutSetPrototypeId\");\n\t\t\tlong privateLayoutSetPrototypeId = ParamUtil.getLong(\n\t\t\t\tactionRequest, \"privateLayoutSetPrototypeId\");\n\t\t\tboolean publicLayoutSetPrototypeLinkEnabled = ParamUtil.getBoolean(\n\t\t\t\tactionRequest, \"publicLayoutSetPrototypeLinkEnabled\");\n\t\t\tboolean privateLayoutSetPrototypeLinkEnabled = ParamUtil.getBoolean(\n\t\t\t\tactionRequest, \"privateLayoutSetPrototypeLinkEnabled\");\n\n\t\t\tSitesUtil.updateLayoutSetPrototypesLinks(\n\t\t\t\tuser.getGroup(), publicLayoutSetPrototypeId,\n\t\t\t\tprivateLayoutSetPrototypeId,\n\t\t\t\tpublicLayoutSetPrototypeLinkEnabled,\n\t\t\t\tprivateLayoutSetPrototypeLinkEnabled);\n\t\t}\n\n\t\tCompany company = PortalUtil.getCompany(actionRequest);\n\n\t\tif (company.isStrangersVerify() &&\n\t\t\t!oldEmailAddress.equalsIgnoreCase(emailAddress)) {\n\n\t\t\tSessionMessages.add(actionRequest, \"verificationEmailSent\");\n\t\t}\n\n\t\treturn new Object[] {user, oldScreenName, oldLanguageId};\n\t}","commit_id":"ae6d96eb6dafe3b4cec1b0c620a6dbd6d51152c3","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected Object[] updateGroup(ActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)actionRequest.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tlong userId = PortalUtil.getUserId(actionRequest);\n\n\t\tlong liveGroupId = ParamUtil.getLong(actionRequest, \"liveGroupId\");\n\n\t\tboolean active;\n\t\tString description = null;\n\t\tString friendlyURL = null;\n\t\tString name = null;\n\t\tint type;\n\n\t\tServiceContext serviceContext = ServiceContextFactory.getInstance(\n\t\t\tGroup.class.getName(), actionRequest);\n\n\t\tGroup liveGroup = null;\n\t\tString oldFriendlyURL = null;\n\t\tString oldStagingFriendlyURL = null;\n\n\t\tif (liveGroupId <= 0) {\n\n\t\t\t// Add group\n\n\t\t\tactive = ParamUtil.getBoolean(actionRequest, \"active\");\n\t\t\tdescription = ParamUtil.getString(actionRequest, \"description\");\n\t\t\tfriendlyURL = ParamUtil.getString(actionRequest, \"friendlyURL\");\n\t\t\tname = ParamUtil.getString(actionRequest, \"name\");\n\t\t\ttype = ParamUtil.getInteger(actionRequest, \"type\");\n\n\t\t\tliveGroup = GroupServiceUtil.addGroup(\n\t\t\t\tname, description, type, friendlyURL, true, active,\n\t\t\t\tserviceContext);\n\n\t\t\tLiveUsers.joinGroup(\n\t\t\t\tthemeDisplay.getCompanyId(), liveGroup.getGroupId(), userId);\n\t\t}\n\t\telse {\n\n\t\t\t// Update group\n\n\t\t\tliveGroup = GroupLocalServiceUtil.getGroup(liveGroupId);\n\n\t\t\tactive = ParamUtil.getBoolean(\n\t\t\t\tactionRequest, \"active\", liveGroup.getActive());\n\t\t\tdescription = ParamUtil.getString(\n\t\t\t\tactionRequest, \"description\", liveGroup.getDescription());\n\t\t\tfriendlyURL = ParamUtil.getString(\n\t\t\t\tactionRequest, \"friendlyURL\", liveGroup.getFriendlyURL());\n\t\t\tname = ParamUtil.getString(\n\t\t\t\tactionRequest, \"name\", liveGroup.getName());\n\t\t\toldFriendlyURL = liveGroup.getFriendlyURL();\n\t\t\ttype = ParamUtil.getInteger(\n\t\t\t\tactionRequest, \"type\", liveGroup.getType());\n\n\t\t\tliveGroup = GroupServiceUtil.updateGroup(\n\t\t\t\tliveGroupId, name, description, type, friendlyURL, active,\n\t\t\t\tserviceContext);\n\n\t\t\tif (type == GroupConstants.TYPE_SITE_OPEN) {\n\t\t\t\tList<MembershipRequest> membershipRequests =\n\t\t\t\t\tMembershipRequestLocalServiceUtil.search(\n\t\t\t\t\t\tliveGroupId, MembershipRequestConstants.STATUS_PENDING,\n\t\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS);\n\n\t\t\t\tfor (MembershipRequest membershipRequest : membershipRequests) {\n\t\t\t\t\tMembershipRequestServiceUtil.updateStatus(\n\t\t\t\t\t\tmembershipRequest.getMembershipRequestId(),\n\t\t\t\t\t\tthemeDisplay.translate(\n\t\t\t\t\t\t\t\"your-membership-has-been-approved\"),\n\t\t\t\t\t\tMembershipRequestConstants.STATUS_APPROVED,\n\t\t\t\t\t\tserviceContext);\n\n\t\t\t\t\tLiveUsers.joinGroup(\n\t\t\t\t\t\tthemeDisplay.getCompanyId(),\n\t\t\t\t\t\tmembershipRequest.getGroupId(),\n\t\t\t\t\t\tnew long[] {membershipRequest.getUserId()});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Settings\n\n\t\tUnicodeProperties typeSettingsProperties =\n\t\t\tliveGroup.getTypeSettingsProperties();\n\n\t\tString customJspServletContextName = ParamUtil.getString(\n\t\t\tactionRequest, \"customJspServletContextName\",\n\t\t\tliveGroup.getTypeSettingsProperty(\"customJspServletContextName\"));\n\n\t\ttypeSettingsProperties.setProperty(\n\t\t\t\"customJspServletContextName\", customJspServletContextName);\n\n\t\tString googleAnalyticsId = ParamUtil.getString(\n\t\t\tactionRequest, \"googleAnalyticsId\",\n\t\t\ttypeSettingsProperties.getProperty(\"googleAnalyticsId\"));\n\n\t\ttypeSettingsProperties.setProperty(\n\t\t\t\"googleAnalyticsId\", googleAnalyticsId);\n\n\t\tString publicRobots = ParamUtil.getString(\n\t\t\tactionRequest, \"publicRobots\");\n\t\tString privateRobots = ParamUtil.getString(\n\t\t\tactionRequest, \"privateRobots\");\n\n\t\ttypeSettingsProperties.setProperty(\"false-robots.txt\", publicRobots);\n\t\ttypeSettingsProperties.setProperty(\"true-robots.txt\", privateRobots);\n\n\t\t// Layout set prototypes\n\n\t\tLayoutSet privateLayoutSet = liveGroup.getPrivateLayoutSet();\n\t\tLayoutSet publicLayoutSet = liveGroup.getPublicLayoutSet();\n\n\t\tString privateVirtualHost = ParamUtil.getString(\n\t\t\tactionRequest, \"privateVirtualHost\",\n\t\t\tprivateLayoutSet.getVirtualHostname());\n\t\tString publicVirtualHost = ParamUtil.getString(\n\t\t\tactionRequest, \"publicVirtualHost\",\n\t\t\tpublicLayoutSet.getVirtualHostname());\n\n\t\tLayoutSetServiceUtil.updateVirtualHost(\n\t\t\tliveGroup.getGroupId(), true, privateVirtualHost);\n\t\tLayoutSetServiceUtil.updateVirtualHost(\n\t\t\tliveGroup.getGroupId(), false, publicVirtualHost);\n\n\t\tif (liveGroup.hasStagingGroup()) {\n\t\t\tGroup stagingGroup = liveGroup.getStagingGroup();\n\n\t\t\toldStagingFriendlyURL = stagingGroup.getFriendlyURL();\n\n\t\t\tLayoutSet stagingPrivateLayoutSet =\n\t\t\t\tstagingGroup.getPrivateLayoutSet();\n\t\t\tLayoutSet stagingPublicLayoutSet =\n\t\t\t\tstagingGroup.getPublicLayoutSet();\n\n\t\t\tfriendlyURL = ParamUtil.getString(\n\t\t\t\tactionRequest, \"stagingFriendlyURL\",\n\t\t\t\tstagingGroup.getFriendlyURL());\n\t\t\tprivateVirtualHost = ParamUtil.getString(\n\t\t\t\tactionRequest, \"stagingPrivateVirtualHost\",\n\t\t\t\tstagingPrivateLayoutSet.getVirtualHostname());\n\t\t\tpublicVirtualHost = ParamUtil.getString(\n\t\t\t\tactionRequest, \"stagingPublicVirtualHost\",\n\t\t\t\tstagingPublicLayoutSet.getVirtualHostname());\n\n\t\t\tLayoutSetServiceUtil.updateVirtualHost(\n\t\t\t\tstagingGroup.getGroupId(), true, privateVirtualHost);\n\t\t\tLayoutSetServiceUtil.updateVirtualHost(\n\t\t\t\tstagingGroup.getGroupId(), false, publicVirtualHost);\n\n\t\t\tGroupServiceUtil.updateFriendlyURL(\n\t\t\t\tstagingGroup.getGroupId(), friendlyURL);\n\t\t}\n\n\t\tliveGroup = GroupServiceUtil.updateGroup(\n\t\t\tliveGroup.getGroupId(), typeSettingsProperties.toString());\n\n\t\tif (!liveGroup.isStaged()) {\n\t\t\tlong privateLayoutSetPrototypeId = ParamUtil.getLong(\n\t\t\t\tactionRequest, \"privateLayoutSetPrototypeId\");\n\t\t\tlong publicLayoutSetPrototypeId = ParamUtil.getLong(\n\t\t\t\tactionRequest, \"publicLayoutSetPrototypeId\");\n\t\t\tboolean privateLayoutSetPrototypeLinkEnabled = ParamUtil.getBoolean(\n\t\t\t\tactionRequest, \"privateLayoutSetPrototypeLinkEnabled\",\n\t\t\t\tprivateLayoutSet.isLayoutSetPrototypeLinkEnabled());\n\t\t\tboolean publicLayoutSetPrototypeLinkEnabled = ParamUtil.getBoolean(\n\t\t\t\tactionRequest, \"publicLayoutSetPrototypeLinkEnabled\",\n\t\t\t\tpublicLayoutSet.isLayoutSetPrototypeLinkEnabled());\n\n\t\t\tif ((privateLayoutSetPrototypeId == 0) &&\n\t\t\t\t(publicLayoutSetPrototypeId == 0) &&\n\t\t\t\t!privateLayoutSetPrototypeLinkEnabled &&\n\t\t\t\t!publicLayoutSetPrototypeLinkEnabled) {\n\n\t\t\t\tlong layoutSetPrototypeId = ParamUtil.getLong(\n\t\t\t\t\tactionRequest, \"layoutSetPrototypeId\");\n\t\t\t\tint layoutSetVisibility = ParamUtil.getInteger(\n\t\t\t\t\tactionRequest, \"layoutSetVisibility\");\n\t\t\t\tboolean layoutSetPrototypeLinkEnabled = ParamUtil.getBoolean(\n\t\t\t\t\tactionRequest, \"layoutSetPrototypeLinkEnabled\",\n\t\t\t\t\t(layoutSetPrototypeId > 0));\n\n\t\t\t\tif (layoutSetVisibility == _LAYOUT_SET_VISIBILITY_PRIVATE) {\n\t\t\t\t\tprivateLayoutSetPrototypeId = layoutSetPrototypeId;\n\n\t\t\t\t\tprivateLayoutSetPrototypeLinkEnabled =\n\t\t\t\t\t\tlayoutSetPrototypeLinkEnabled;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tpublicLayoutSetPrototypeId = layoutSetPrototypeId;\n\n\t\t\t\t\tpublicLayoutSetPrototypeLinkEnabled =\n\t\t\t\t\t\tlayoutSetPrototypeLinkEnabled;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSitesUtil.updateLayoutSetPrototypesLinks(\n\t\t\t\tliveGroup, publicLayoutSetPrototypeId,\n\t\t\t\tprivateLayoutSetPrototypeId,\n\t\t\t\tpublicLayoutSetPrototypeLinkEnabled,\n\t\t\t\tprivateLayoutSetPrototypeLinkEnabled);\n\t\t}\n\n\t\t// Staging\n\n\t\tString redirect = ParamUtil.getString(actionRequest, \"redirect\");\n\n\t\tlong refererPlid = GetterUtil.getLong(\n\t\t\tHttpUtil.getParameter(redirect, \"refererPlid\", false));\n\n\t\tif (!privateLayoutSet.isLayoutSetPrototypeLinkActive() &&\n\t\t\t!publicLayoutSet.isLayoutSetPrototypeLinkActive()) {\n\n\t\t\tif ((refererPlid > 0) && liveGroup.hasStagingGroup() &&\n\t\t\t\t(themeDisplay.getScopeGroupId() != liveGroup.getGroupId())) {\n\n\t\t\t\tLayout firstLayout = LayoutLocalServiceUtil.fetchFirstLayout(\n\t\t\t\t\tliveGroup.getGroupId(), false,\n\t\t\t\t\tLayoutConstants.DEFAULT_PARENT_LAYOUT_ID);\n\n\t\t\t\tif (firstLayout == null) {\n\t\t\t\t\tfirstLayout = LayoutLocalServiceUtil.fetchFirstLayout(\n\t\t\t\t\t\tliveGroup.getGroupId(), true,\n\t\t\t\t\t\tLayoutConstants.DEFAULT_PARENT_LAYOUT_ID);\n\t\t\t\t}\n\n\t\t\t\tif (firstLayout != null) {\n\t\t\t\t\trefererPlid = firstLayout.getPlid();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\trefererPlid = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tStagingUtil.updateStaging(actionRequest, liveGroup);\n\t\t}\n\n\t\treturn new Object[] {\n\t\t\tliveGroup, oldFriendlyURL, oldStagingFriendlyURL, refererPlid};\n\t}","id":46455,"modified_method":"protected Object[] updateGroup(ActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)actionRequest.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tlong userId = PortalUtil.getUserId(actionRequest);\n\n\t\tlong liveGroupId = ParamUtil.getLong(actionRequest, \"liveGroupId\");\n\n\t\tboolean active;\n\t\tString description = null;\n\t\tString friendlyURL = null;\n\t\tString name = null;\n\t\tint type;\n\n\t\tServiceContext serviceContext = ServiceContextFactory.getInstance(\n\t\t\tGroup.class.getName(), actionRequest);\n\n\t\tGroup liveGroup = null;\n\t\tString oldFriendlyURL = null;\n\t\tString oldStagingFriendlyURL = null;\n\n\t\tif (liveGroupId <= 0) {\n\n\t\t\t// Add group\n\n\t\t\tactive = ParamUtil.getBoolean(actionRequest, \"active\");\n\t\t\tdescription = ParamUtil.getString(actionRequest, \"description\");\n\t\t\tfriendlyURL = ParamUtil.getString(actionRequest, \"friendlyURL\");\n\t\t\tname = ParamUtil.getString(actionRequest, \"name\");\n\t\t\ttype = ParamUtil.getInteger(actionRequest, \"type\");\n\n\t\t\tliveGroup = GroupServiceUtil.addGroup(\n\t\t\t\tname, description, type, friendlyURL, true, active,\n\t\t\t\tserviceContext);\n\n\t\t\tLiveUsers.joinGroup(\n\t\t\t\tthemeDisplay.getCompanyId(), liveGroup.getGroupId(), userId);\n\t\t}\n\t\telse {\n\n\t\t\t// Update group\n\n\t\t\tliveGroup = GroupLocalServiceUtil.getGroup(liveGroupId);\n\n\t\t\toldFriendlyURL = liveGroup.getFriendlyURL();\n\n\t\t\tactive = ParamUtil.getBoolean(\n\t\t\t\tactionRequest, \"active\", liveGroup.getActive());\n\t\t\tdescription = ParamUtil.getString(\n\t\t\t\tactionRequest, \"description\", liveGroup.getDescription());\n\t\t\tfriendlyURL = ParamUtil.getString(\n\t\t\t\tactionRequest, \"friendlyURL\", liveGroup.getFriendlyURL());\n\t\t\tname = ParamUtil.getString(\n\t\t\t\tactionRequest, \"name\", liveGroup.getName());\n\t\t\ttype = ParamUtil.getInteger(\n\t\t\t\tactionRequest, \"type\", liveGroup.getType());\n\n\t\t\tliveGroup = GroupServiceUtil.updateGroup(\n\t\t\t\tliveGroupId, name, description, type, friendlyURL, active,\n\t\t\t\tserviceContext);\n\n\t\t\tif (type == GroupConstants.TYPE_SITE_OPEN) {\n\t\t\t\tList<MembershipRequest> membershipRequests =\n\t\t\t\t\tMembershipRequestLocalServiceUtil.search(\n\t\t\t\t\t\tliveGroupId, MembershipRequestConstants.STATUS_PENDING,\n\t\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS);\n\n\t\t\t\tfor (MembershipRequest membershipRequest : membershipRequests) {\n\t\t\t\t\tMembershipRequestServiceUtil.updateStatus(\n\t\t\t\t\t\tmembershipRequest.getMembershipRequestId(),\n\t\t\t\t\t\tthemeDisplay.translate(\n\t\t\t\t\t\t\t\"your-membership-has-been-approved\"),\n\t\t\t\t\t\tMembershipRequestConstants.STATUS_APPROVED,\n\t\t\t\t\t\tserviceContext);\n\n\t\t\t\t\tLiveUsers.joinGroup(\n\t\t\t\t\t\tthemeDisplay.getCompanyId(),\n\t\t\t\t\t\tmembershipRequest.getGroupId(),\n\t\t\t\t\t\tnew long[] {membershipRequest.getUserId()});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Settings\n\n\t\tUnicodeProperties typeSettingsProperties =\n\t\t\tliveGroup.getTypeSettingsProperties();\n\n\t\tString customJspServletContextName = ParamUtil.getString(\n\t\t\tactionRequest, \"customJspServletContextName\",\n\t\t\tliveGroup.getTypeSettingsProperty(\"customJspServletContextName\"));\n\n\t\ttypeSettingsProperties.setProperty(\n\t\t\t\"customJspServletContextName\", customJspServletContextName);\n\n\t\tString googleAnalyticsId = ParamUtil.getString(\n\t\t\tactionRequest, \"googleAnalyticsId\",\n\t\t\ttypeSettingsProperties.getProperty(\"googleAnalyticsId\"));\n\n\t\ttypeSettingsProperties.setProperty(\n\t\t\t\"googleAnalyticsId\", googleAnalyticsId);\n\n\t\tString publicRobots = ParamUtil.getString(\n\t\t\tactionRequest, \"publicRobots\",\n\t\t\tliveGroup.getTypeSettingsProperty(\"false-robots.txt\"));\n\t\tString privateRobots = ParamUtil.getString(\n\t\t\tactionRequest, \"privateRobots\",\n\t\t\tliveGroup.getTypeSettingsProperty(\"true-robots.txt\"));\n\n\t\ttypeSettingsProperties.setProperty(\"false-robots.txt\", publicRobots);\n\t\ttypeSettingsProperties.setProperty(\"true-robots.txt\", privateRobots);\n\n\t\t// Virtual Hosts\n\n\t\tLayoutSet publicLayoutSet = liveGroup.getPublicLayoutSet();\n\t\tLayoutSet privateLayoutSet = liveGroup.getPrivateLayoutSet();\n\n\t\tString publicVirtualHost = ParamUtil.getString(\n\t\t\tactionRequest, \"publicVirtualHost\",\n\t\t\tpublicLayoutSet.getVirtualHostname());\n\t\tString privateVirtualHost = ParamUtil.getString(\n\t\t\tactionRequest, \"privateVirtualHost\",\n\t\t\tprivateLayoutSet.getVirtualHostname());\n\n\t\tLayoutSetServiceUtil.updateVirtualHost(\n\t\t\tliveGroup.getGroupId(), false, publicVirtualHost);\n\n\t\tLayoutSetServiceUtil.updateVirtualHost(\n\t\t\tliveGroup.getGroupId(), true, privateVirtualHost);\n\n\t\t// Staging\n\n\t\tif (liveGroup.hasStagingGroup()) {\n\t\t\tGroup stagingGroup = liveGroup.getStagingGroup();\n\n\t\t\toldStagingFriendlyURL = stagingGroup.getFriendlyURL();\n\n\t\t\tLayoutSet stagingPublicLayoutSet =\n\t\t\t\tstagingGroup.getPublicLayoutSet();\n\t\t\tLayoutSet stagingPrivateLayoutSet =\n\t\t\t\tstagingGroup.getPrivateLayoutSet();\n\n\t\t\tpublicVirtualHost = ParamUtil.getString(\n\t\t\t\tactionRequest, \"stagingPublicVirtualHost\",\n\t\t\t\tstagingPublicLayoutSet.getVirtualHostname());\n\t\t\tprivateVirtualHost = ParamUtil.getString(\n\t\t\t\tactionRequest, \"stagingPrivateVirtualHost\",\n\t\t\t\tstagingPrivateLayoutSet.getVirtualHostname());\n\t\t\tfriendlyURL = ParamUtil.getString(\n\t\t\t\tactionRequest, \"stagingFriendlyURL\",\n\t\t\t\tstagingGroup.getFriendlyURL());\n\n\t\t\tLayoutSetServiceUtil.updateVirtualHost(\n\t\t\t\tstagingGroup.getGroupId(), false, publicVirtualHost);\n\n\t\t\tLayoutSetServiceUtil.updateVirtualHost(\n\t\t\t\tstagingGroup.getGroupId(), true, privateVirtualHost);\n\n\t\t\tGroupServiceUtil.updateFriendlyURL(\n\t\t\t\tstagingGroup.getGroupId(), friendlyURL);\n\t\t}\n\n\t\tliveGroup = GroupServiceUtil.updateGroup(\n\t\t\tliveGroup.getGroupId(), typeSettingsProperties.toString());\n\n\t\t// Layout set prototypes\n\n\t\tif (!liveGroup.isStaged()) {\n\t\t\tlong privateLayoutSetPrototypeId = ParamUtil.getLong(\n\t\t\t\tactionRequest, \"privateLayoutSetPrototypeId\",\n\t\t\t\tprivateLayoutSet.getLayoutSetPrototypeId());\n\t\t\tlong publicLayoutSetPrototypeId = ParamUtil.getLong(\n\t\t\t\tactionRequest, \"publicLayoutSetPrototypeId\",\n\t\t\t\tpublicLayoutSet.getLayoutSetPrototypeId());\n\n\t\t\tboolean privateLayoutSetPrototypeLinkEnabled = ParamUtil.getBoolean(\n\t\t\t\tactionRequest, \"privateLayoutSetPrototypeLinkEnabled\",\n\t\t\t\tprivateLayoutSet.isLayoutSetPrototypeLinkEnabled());\n\t\t\tboolean publicLayoutSetPrototypeLinkEnabled = ParamUtil.getBoolean(\n\t\t\t\tactionRequest, \"publicLayoutSetPrototypeLinkEnabled\",\n\t\t\t\tpublicLayoutSet.isLayoutSetPrototypeLinkEnabled());\n\n\t\t\tif ((privateLayoutSetPrototypeId == 0) &&\n\t\t\t\t(publicLayoutSetPrototypeId == 0) &&\n\t\t\t\t!privateLayoutSetPrototypeLinkEnabled &&\n\t\t\t\t!publicLayoutSetPrototypeLinkEnabled) {\n\n\t\t\t\tlong layoutSetPrototypeId = ParamUtil.getLong(\n\t\t\t\t\tactionRequest, \"layoutSetPrototypeId\");\n\t\t\t\tint layoutSetVisibility = ParamUtil.getInteger(\n\t\t\t\t\tactionRequest, \"layoutSetVisibility\");\n\t\t\t\tboolean layoutSetPrototypeLinkEnabled = ParamUtil.getBoolean(\n\t\t\t\t\tactionRequest, \"layoutSetPrototypeLinkEnabled\",\n\t\t\t\t\t(layoutSetPrototypeId > 0));\n\n\t\t\t\tif (layoutSetVisibility == _LAYOUT_SET_VISIBILITY_PRIVATE) {\n\t\t\t\t\tprivateLayoutSetPrototypeId = layoutSetPrototypeId;\n\n\t\t\t\t\tprivateLayoutSetPrototypeLinkEnabled =\n\t\t\t\t\t\tlayoutSetPrototypeLinkEnabled;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tpublicLayoutSetPrototypeId = layoutSetPrototypeId;\n\n\t\t\t\t\tpublicLayoutSetPrototypeLinkEnabled =\n\t\t\t\t\t\tlayoutSetPrototypeLinkEnabled;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSitesUtil.updateLayoutSetPrototypesLinks(\n\t\t\t\tliveGroup, publicLayoutSetPrototypeId,\n\t\t\t\tprivateLayoutSetPrototypeId,\n\t\t\t\tpublicLayoutSetPrototypeLinkEnabled,\n\t\t\t\tprivateLayoutSetPrototypeLinkEnabled);\n\t\t}\n\n\t\t// Staging\n\n\t\tString redirect = ParamUtil.getString(actionRequest, \"redirect\");\n\n\t\tlong refererPlid = GetterUtil.getLong(\n\t\t\tHttpUtil.getParameter(redirect, \"refererPlid\", false));\n\n\t\tif (!privateLayoutSet.isLayoutSetPrototypeLinkActive() &&\n\t\t\t!publicLayoutSet.isLayoutSetPrototypeLinkActive()) {\n\n\t\t\tif ((refererPlid > 0) && liveGroup.hasStagingGroup() &&\n\t\t\t\t(themeDisplay.getScopeGroupId() != liveGroup.getGroupId())) {\n\n\t\t\t\tLayout firstLayout = LayoutLocalServiceUtil.fetchFirstLayout(\n\t\t\t\t\tliveGroup.getGroupId(), false,\n\t\t\t\t\tLayoutConstants.DEFAULT_PARENT_LAYOUT_ID);\n\n\t\t\t\tif (firstLayout == null) {\n\t\t\t\t\tfirstLayout = LayoutLocalServiceUtil.fetchFirstLayout(\n\t\t\t\t\t\tliveGroup.getGroupId(), true,\n\t\t\t\t\t\tLayoutConstants.DEFAULT_PARENT_LAYOUT_ID);\n\t\t\t\t}\n\n\t\t\t\tif (firstLayout != null) {\n\t\t\t\t\trefererPlid = firstLayout.getPlid();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\trefererPlid = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tStagingUtil.updateStaging(actionRequest, liveGroup);\n\t\t}\n\n\t\treturn new Object[] {\n\t\t\tliveGroup, oldFriendlyURL, oldStagingFriendlyURL, refererPlid};\n\t}","commit_id":"bbc7aad512e6da1b293efc9cc840d244d17dd216","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static ServiceContext getInstance(PortletRequest portletRequest)\n\t\tthrows PortalException, SystemException {\n\n\t\t// Theme display\n\n\t\tServiceContext serviceContext =\n\t\t\tServiceContextThreadLocal.getServiceContext();\n\n\t\tThemeDisplay themeDisplay =\n\t\t\t(ThemeDisplay)portletRequest.getAttribute(WebKeys.THEME_DISPLAY);\n\n\t\tif (serviceContext != null) {\n\t\t\tserviceContext = (ServiceContext)serviceContext.clone();\n\t\t}\n\t\telse {\n\t\t\tserviceContext = new ServiceContext();\n\n\t\t\tserviceContext.setCompanyId(themeDisplay.getCompanyId());\n\t\t\tserviceContext.setLanguageId(themeDisplay.getLanguageId());\n\t\t\tserviceContext.setLayoutFullURL(\n\t\t\t\tPortalUtil.getLayoutFullURL(themeDisplay));\n\t\t\tserviceContext.setLayoutURL(PortalUtil.getLayoutURL(themeDisplay));\n\t\t\tserviceContext.setPathMain(PortalUtil.getPathMain());\n\t\t\tserviceContext.setPlid(themeDisplay.getPlid());\n\t\t\tserviceContext.setPortalURL(\n\t\t\t\tPortalUtil.getPortalURL(portletRequest));\n\t\t\tserviceContext.setSignedIn(themeDisplay.isSignedIn());\n\n\t\t\tUser user = themeDisplay.getUser();\n\n\t\t\tserviceContext.setUserDisplayURL(user.getDisplayURL(themeDisplay));\n\t\t\tserviceContext.setUserId(user.getUserId());\n\t\t}\n\n\t\tserviceContext.setScopeGroupId(themeDisplay.getScopeGroupId());\n\n\t\t// Attributes\n\n\t\tMap<String, Serializable> attributes =\n\t\t\tnew HashMap<String, Serializable>();\n\n\t\tEnumeration<String> enu = portletRequest.getParameterNames();\n\n\t\twhile (enu.hasMoreElements()) {\n\t\t\tString param = enu.nextElement();\n\n\t\t\tString[] values = portletRequest.getParameterValues(param);\n\n\t\t\tif ((values != null) && (values.length > 0)) {\n\t\t\t\tif (values.length == 1) {\n\t\t\t\t\tattributes.put(param, values[0]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tattributes.put(param, values);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tserviceContext.setAttributes(attributes);\n\n\t\t// Command\n\n\t\tString cmd = ParamUtil.getString(portletRequest, Constants.CMD);\n\n\t\tserviceContext.setCommand(cmd);\n\n\t\t// Current URL\n\n\t\tString currentURL = PortalUtil.getCurrentURL(portletRequest);\n\n\t\tserviceContext.setCurrentURL(currentURL);\n\n\t\t// Form date\n\n\t\tlong formDateLong = ParamUtil.getLong(portletRequest, \"formDate\");\n\n\t\tif (formDateLong > 0) {\n\t\t\tDate formDate = new Date(formDateLong);\n\n\t\t\tserviceContext.setFormDate(formDate);\n\t\t}\n\n\t\t// Permissions\n\n\t\tboolean addGroupPermissions = ParamUtil.getBoolean(\n\t\t\tportletRequest, \"addGroupPermissions\");\n\t\tboolean addGuestPermissions = ParamUtil.getBoolean(\n\t\t\tportletRequest, \"addGuestPermissions\");\n\t\tString[] groupPermissions = PortalUtil.getGroupPermissions(\n\t\t\tportletRequest);\n\t\tString[] guestPermissions = PortalUtil.getGuestPermissions(\n\t\t\tportletRequest);\n\n\t\tserviceContext.setAddGroupPermissions(addGroupPermissions);\n\t\tserviceContext.setAddGuestPermissions(addGuestPermissions);\n\t\tserviceContext.setGroupPermissions(groupPermissions);\n\t\tserviceContext.setGuestPermissions(guestPermissions);\n\n\t\t// Portlet preferences ids\n\n\t\tHttpServletRequest request = PortalUtil.getHttpServletRequest(\n\t\t\tportletRequest);\n\n\t\tString portletId = PortalUtil.getPortletId(portletRequest);\n\n\t\tPortletPreferencesIds portletPreferencesIds =\n\t\t\tPortletPreferencesFactoryUtil.getPortletPreferencesIds(\n\t\t\t\trequest, portletId);\n\n\t\tserviceContext.setPortletPreferencesIds(portletPreferencesIds);\n\n\t\t// Request\n\n\t\tMap<String, String> headerMap = new HashMap<String, String>();\n\n\t\tenu = request.getHeaderNames();\n\n\t\twhile (enu.hasMoreElements()) {\n\t\t\tString header = enu.nextElement();\n\n\t\t\tString value = request.getHeader(header);\n\n\t\t\theaderMap.put(header, value);\n\t\t}\n\n\t\tserviceContext.setHeaders(headerMap);\n\n\t\tserviceContext.setRemoteAddr(request.getRemoteAddr());\n\t\tserviceContext.setRemoteHost(request.getRemoteHost());\n\t\tserviceContext.setRequest(request);\n\n\t\t// Asset\n\n\t\tMap<String, String[]> parameterMap = portletRequest.getParameterMap();\n\n\t\tList<Long> assetCategoryIdsList = new ArrayList<Long>();\n\n\t\tString[] assetTagNames = null;\n\t\tlong[] assetCategoryIds = null;\n\n\t\tboolean foundAssetInformation = false;\n\n\t\tfor (Map.Entry<String, String[]> entry : parameterMap.entrySet()) {\n\t\t\tString name = entry.getKey();\n\n\t\t\tif (name.startsWith(\"assetCategoryIds\")) {\n\t\t\t\tlong[] assetVocabularyAssetCategoryIds = StringUtil.split(\n\t\t\t\t\tParamUtil.getString(request, name), 0L);\n\n\t\t\t\tfor (long assetCategoryId : assetVocabularyAssetCategoryIds) {\n\t\t\t\t\tassetCategoryIdsList.add(assetCategoryId);\n\t\t\t\t}\n\n\t\t\t\tassetCategoryIds = ArrayUtil.toArray(\n\t\t\t\t\tassetCategoryIdsList.toArray(\n\t\t\t\t\t\tnew Long[assetCategoryIdsList.size()]));\n\n\t\t\t\tif (foundAssetInformation) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tfoundAssetInformation = true;\n\t\t\t}\n\t\t\telse if (name.startsWith(\"assetTagNames\")) {\n\t\t\t\tassetTagNames = StringUtil.split(\n\t\t\t\t\tParamUtil.getString(request, name));\n\n\t\t\t\tif (foundAssetInformation) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tfoundAssetInformation = true;\n\t\t\t}\n\t\t}\n\n\t\tboolean assetEntryVisible = ParamUtil.getBoolean(\n\t\t\tportletRequest, \"assetEntryVisible\", true);\n\t\tlong[] assetLinkEntryIds = StringUtil.split(\n\t\t\tParamUtil.getString(\n\t\t\t\tportletRequest, \"assetLinksSearchContainerPrimaryKeys\"), 0L);\n\n\t\tserviceContext.setAssetCategoryIds(assetCategoryIds);\n\t\tserviceContext.setAssetEntryVisible(assetEntryVisible);\n\t\tserviceContext.setAssetLinkEntryIds(assetLinkEntryIds);\n\t\tserviceContext.setAssetTagNames(assetTagNames);\n\n\t\t// Workflow\n\n\t\tint workflowAction = ParamUtil.getInteger(\n\t\t\tportletRequest, \"workflowAction\", WorkflowConstants.ACTION_PUBLISH);\n\n\t\tserviceContext.setWorkflowAction(workflowAction);\n\n\t\treturn serviceContext;\n\t}","id":46456,"modified_method":"public static ServiceContext getInstance(PortletRequest portletRequest)\n\t\tthrows PortalException, SystemException {\n\n\t\t// Theme display\n\n\t\tServiceContext serviceContext =\n\t\t\tServiceContextThreadLocal.getServiceContext();\n\n\t\tThemeDisplay themeDisplay =\n\t\t\t(ThemeDisplay)portletRequest.getAttribute(WebKeys.THEME_DISPLAY);\n\n\t\tif (serviceContext != null) {\n\t\t\tserviceContext = (ServiceContext)serviceContext.clone();\n\t\t}\n\t\telse {\n\t\t\tserviceContext = new ServiceContext();\n\n\t\t\tserviceContext.setCompanyId(themeDisplay.getCompanyId());\n\t\t\tserviceContext.setLanguageId(themeDisplay.getLanguageId());\n\t\t\tserviceContext.setLayoutFullURL(\n\t\t\t\tPortalUtil.getLayoutFullURL(themeDisplay));\n\t\t\tserviceContext.setLayoutURL(PortalUtil.getLayoutURL(themeDisplay));\n\t\t\tserviceContext.setPathMain(PortalUtil.getPathMain());\n\t\t\tserviceContext.setPlid(themeDisplay.getPlid());\n\t\t\tserviceContext.setPortalURL(\n\t\t\t\tPortalUtil.getPortalURL(portletRequest));\n\t\t\tserviceContext.setSignedIn(themeDisplay.isSignedIn());\n\n\t\t\tUser user = themeDisplay.getUser();\n\n\t\t\tserviceContext.setUserDisplayURL(user.getDisplayURL(themeDisplay));\n\t\t\tserviceContext.setUserId(user.getUserId());\n\t\t}\n\n\t\tserviceContext.setScopeGroupId(themeDisplay.getScopeGroupId());\n\n\t\t// Attributes\n\n\t\tMap<String, Serializable> attributes =\n\t\t\tnew HashMap<String, Serializable>();\n\n\t\tEnumeration<String> enu = portletRequest.getParameterNames();\n\n\t\twhile (enu.hasMoreElements()) {\n\t\t\tString param = enu.nextElement();\n\n\t\t\tString[] values = portletRequest.getParameterValues(param);\n\n\t\t\tif ((values != null) && (values.length > 0)) {\n\t\t\t\tif (values.length == 1) {\n\t\t\t\t\tattributes.put(param, values[0]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tattributes.put(param, values);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tserviceContext.setAttributes(attributes);\n\n\t\t// Command\n\n\t\tString cmd = ParamUtil.getString(portletRequest, Constants.CMD);\n\n\t\tserviceContext.setCommand(cmd);\n\n\t\t// Current URL\n\n\t\tString currentURL = PortalUtil.getCurrentURL(portletRequest);\n\n\t\tserviceContext.setCurrentURL(currentURL);\n\n\t\t// Form date\n\n\t\tlong formDateLong = ParamUtil.getLong(portletRequest, \"formDate\");\n\n\t\tif (formDateLong > 0) {\n\t\t\tDate formDate = new Date(formDateLong);\n\n\t\t\tserviceContext.setFormDate(formDate);\n\t\t}\n\n\t\t// Permissions\n\n\t\tboolean addGroupPermissions = ParamUtil.getBoolean(\n\t\t\tportletRequest, \"addGroupPermissions\");\n\t\tboolean addGuestPermissions = ParamUtil.getBoolean(\n\t\t\tportletRequest, \"addGuestPermissions\");\n\t\tString[] groupPermissions = PortalUtil.getGroupPermissions(\n\t\t\tportletRequest);\n\t\tString[] guestPermissions = PortalUtil.getGuestPermissions(\n\t\t\tportletRequest);\n\n\t\tserviceContext.setAddGroupPermissions(addGroupPermissions);\n\t\tserviceContext.setAddGuestPermissions(addGuestPermissions);\n\t\tserviceContext.setGroupPermissions(groupPermissions);\n\t\tserviceContext.setGuestPermissions(guestPermissions);\n\n\t\t// Portlet preferences ids\n\n\t\tHttpServletRequest request = PortalUtil.getHttpServletRequest(\n\t\t\tportletRequest);\n\n\t\tString portletId = PortalUtil.getPortletId(portletRequest);\n\n\t\tPortletPreferencesIds portletPreferencesIds =\n\t\t\tPortletPreferencesFactoryUtil.getPortletPreferencesIds(\n\t\t\t\trequest, portletId);\n\n\t\tserviceContext.setPortletPreferencesIds(portletPreferencesIds);\n\n\t\t// Request\n\n\t\tMap<String, String> headerMap = new HashMap<String, String>();\n\n\t\tenu = request.getHeaderNames();\n\n\t\twhile (enu.hasMoreElements()) {\n\t\t\tString header = enu.nextElement();\n\n\t\t\tString value = request.getHeader(header);\n\n\t\t\theaderMap.put(header, value);\n\t\t}\n\n\t\tserviceContext.setHeaders(headerMap);\n\n\t\tserviceContext.setRemoteAddr(request.getRemoteAddr());\n\t\tserviceContext.setRemoteHost(request.getRemoteHost());\n\t\tserviceContext.setRequest(request);\n\n\t\t// Asset\n\n\t\tMap<String, String[]> parameterMap = portletRequest.getParameterMap();\n\n\t\tList<Long> assetCategoryIdsList = new ArrayList<Long>();\n\n\t\tboolean updateAssetCategoryIds = false;\n\n\t\tfor (Map.Entry<String, String[]> entry : parameterMap.entrySet()) {\n\t\t\tString name = entry.getKey();\n\n\t\t\tif (name.startsWith(\"assetCategoryIds\")) {\n\t\t\t\tupdateAssetCategoryIds = true;\n\n\t\t\t\tlong[] assetVocabularyAssetCategoryIds = StringUtil.split(\n\t\t\t\t\tParamUtil.getString(portletRequest, name), 0L);\n\n\t\t\t\tfor (long assetCategoryId : assetVocabularyAssetCategoryIds) {\n\t\t\t\t\tassetCategoryIdsList.add(assetCategoryId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (updateAssetCategoryIds) {\n\t\t\tlong[] assetCategoryIds = ArrayUtil.toArray(\n\t\t\t\tassetCategoryIdsList.toArray(\n\t\t\t\t\tnew Long[assetCategoryIdsList.size()]));\n\n\t\t\tserviceContext.setAssetCategoryIds(assetCategoryIds);\n\t\t}\n\n\t\tboolean assetEntryVisible = ParamUtil.getBoolean(\n\t\t\tportletRequest, \"assetEntryVisible\", true);\n\t\tlong[] assetLinkEntryIds = StringUtil.split(\n\t\t\tParamUtil.getString(\n\t\t\t\tportletRequest, \"assetLinksSearchContainerPrimaryKeys\"), 0L);\n\n\t\tserviceContext.setAssetEntryVisible(assetEntryVisible);\n\t\tserviceContext.setAssetLinkEntryIds(assetLinkEntryIds);\n\n\t\tString assetTagNamesParam = request.getParameter(\"assetTagNames\");\n\n\t\tif (assetTagNamesParam != null) {\n\t\t\tString[] assetTagNames = StringUtil.split(assetTagNamesParam);\n\n\t\t\tserviceContext.setAssetTagNames(assetTagNames);\n\t\t}\n\n\t\t// Workflow\n\n\t\tint workflowAction = ParamUtil.getInteger(\n\t\t\tportletRequest, \"workflowAction\", WorkflowConstants.ACTION_PUBLISH);\n\n\t\tserviceContext.setWorkflowAction(workflowAction);\n\n\t\treturn serviceContext;\n\t}","commit_id":"bbc7aad512e6da1b293efc9cc840d244d17dd216","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static ServiceContext getInstance(HttpServletRequest request)\n\t\tthrows PortalException, SystemException {\n\n\t\tServiceContext serviceContext = new ServiceContext();\n\n\t\t// Theme display\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)request.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tif (themeDisplay != null) {\n\t\t\tserviceContext.setCompanyId(themeDisplay.getCompanyId());\n\t\t\tserviceContext.setLanguageId(themeDisplay.getLanguageId());\n\t\t\tserviceContext.setLayoutFullURL(\n\t\t\t\tPortalUtil.getCanonicalURL(\n\t\t\t\t\tPortalUtil.getLayoutFullURL(themeDisplay), themeDisplay,\n\t\t\t\t\tthemeDisplay.getLayout()));\n\t\t\tserviceContext.setLayoutURL(\n\t\t\t\tPortalUtil.getCanonicalURL(\n\t\t\t\t\tPortalUtil.getLayoutURL(themeDisplay), themeDisplay,\n\t\t\t\t\tthemeDisplay.getLayout()));\n\t\t\tserviceContext.setPathMain(PortalUtil.getPathMain());\n\t\t\tserviceContext.setPlid(themeDisplay.getPlid());\n\t\t\tserviceContext.setPortalURL(PortalUtil.getPortalURL(request));\n\t\t\tserviceContext.setScopeGroupId(themeDisplay.getScopeGroupId());\n\t\t\tserviceContext.setSignedIn(themeDisplay.isSignedIn());\n\n\t\t\tUser user = themeDisplay.getUser();\n\n\t\t\tserviceContext.setUserDisplayURL(user.getDisplayURL(themeDisplay));\n\t\t\tserviceContext.setUserId(user.getUserId());\n\t\t}\n\t\telse {\n\t\t\tlong companyId = PortalUtil.getCompanyId(request);\n\n\t\t\tserviceContext.setCompanyId(companyId);\n\n\t\t\tserviceContext.setPathMain(PortalUtil.getPathMain());\n\n\t\t\tUser user = null;\n\n\t\t\ttry {\n\t\t\t\tuser = PortalUtil.getUser(request);\n\t\t\t}\n\t\t\tcatch (NoSuchUserException nsue) {\n\n\t\t\t\t// LPS-24160\n\n\t\t\t}\n\n\t\t\tif (user != null) {\n\t\t\t\tserviceContext.setSignedIn(!user.isDefaultUser());\n\t\t\t\tserviceContext.setUserId(user.getUserId());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tserviceContext.setSignedIn(false);\n\t\t\t}\n\t\t}\n\n\t\t// Attributes\n\n\t\tMap<String, Serializable> attributes =\n\t\t\tnew HashMap<String, Serializable>();\n\n\t\tMap<String, String[]> parameters = request.getParameterMap();\n\n\t\tfor (Map.Entry<String, String[]> entry : parameters.entrySet()) {\n\t\t\tString name = entry.getKey();\n\t\t\tString[] values = entry.getValue();\n\n\t\t\tif ((values != null) && (values.length > 0)) {\n\t\t\t\tif (values.length == 1) {\n\t\t\t\t\tattributes.put(name, values[0]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tattributes.put(name, values);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tserviceContext.setAttributes(attributes);\n\n\t\t// Command\n\n\t\tString cmd = ParamUtil.getString(request, Constants.CMD);\n\n\t\tserviceContext.setCommand(cmd);\n\n\t\t// Current URL\n\n\t\tString currentURL = PortalUtil.getCurrentURL(request);\n\n\t\tserviceContext.setCurrentURL(currentURL);\n\n\t\t// Form date\n\n\t\tlong formDateLong = ParamUtil.getLong(request, \"formDate\");\n\n\t\tif (formDateLong > 0) {\n\t\t\tDate formDate = new Date(formDateLong);\n\n\t\t\tserviceContext.setFormDate(formDate);\n\t\t}\n\n\t\t// Permissions\n\n\t\tboolean addGroupPermissions = ParamUtil.getBoolean(\n\t\t\trequest, \"addGroupPermissions\");\n\t\tboolean addGuestPermissions = ParamUtil.getBoolean(\n\t\t\trequest, \"addGuestPermissions\");\n\t\tString[] groupPermissions = PortalUtil.getGroupPermissions(request);\n\t\tString[] guestPermissions = PortalUtil.getGuestPermissions(request);\n\n\t\tserviceContext.setAddGroupPermissions(addGroupPermissions);\n\t\tserviceContext.setAddGuestPermissions(addGuestPermissions);\n\t\tserviceContext.setGroupPermissions(groupPermissions);\n\t\tserviceContext.setGuestPermissions(guestPermissions);\n\n\t\t// Portlet preferences ids\n\n\t\tString portletId = PortalUtil.getPortletId(request);\n\n\t\tif (Validator.isNotNull(portletId)) {\n\t\t\tPortletPreferencesIds portletPreferencesIds =\n\t\t\t\tPortletPreferencesFactoryUtil.getPortletPreferencesIds(\n\t\t\t\t\trequest, portletId);\n\n\t\t\tserviceContext.setPortletPreferencesIds(portletPreferencesIds);\n\t\t}\n\n\t\t// Request\n\n\t\tMap<String, String> headerMap = new HashMap<String, String>();\n\n\t\tEnumeration<String> enu = request.getHeaderNames();\n\n\t\twhile (enu.hasMoreElements()) {\n\t\t\tString header = enu.nextElement();\n\n\t\t\tString value = request.getHeader(header);\n\n\t\t\theaderMap.put(header, value);\n\t\t}\n\n\t\tserviceContext.setHeaders(headerMap);\n\n\t\tserviceContext.setRemoteAddr(request.getRemoteAddr());\n\t\tserviceContext.setRemoteHost(request.getRemoteHost());\n\t\tserviceContext.setRequest(request);\n\n\t\t// Asset\n\n\t\tMap<String, String[]> parameterMap = request.getParameterMap();\n\n\t\tList<Long> assetCategoryIdsList = new ArrayList<Long>();\n\n\t\tString[] assetTagNames = null;\n\t\tlong[] assetCategoryIds = null;\n\n\t\tboolean foundAssetInformation = false;\n\n\t\tfor (Map.Entry<String, String[]> entry : parameterMap.entrySet()) {\n\t\t\tString name = entry.getKey();\n\n\t\t\tif (name.startsWith(\"assetCategoryIds\")) {\n\t\t\t\tlong[] assetVocabularyAssetCategoryIds = StringUtil.split(\n\t\t\t\t\tParamUtil.getString(request, name), 0L);\n\n\t\t\t\tfor (long assetCategoryId : assetVocabularyAssetCategoryIds) {\n\t\t\t\t\tassetCategoryIdsList.add(assetCategoryId);\n\t\t\t\t}\n\n\t\t\t\tif (!assetCategoryIdsList.isEmpty()) {\n\t\t\t\t\tassetCategoryIds = ArrayUtil.toArray(\n\t\t\t\t\t\tassetCategoryIdsList.toArray(\n\t\t\t\t\t\t\tnew Long[assetCategoryIdsList.size()]));\n\t\t\t\t}\n\n\t\t\t\tif (foundAssetInformation) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tfoundAssetInformation = true;\n\t\t\t}\n\t\t\telse if (name.startsWith(\"assetTagNames\")) {\n\t\t\t\tassetTagNames = StringUtil.split(\n\t\t\t\t\tParamUtil.getString(request, name));\n\n\t\t\t\tif (foundAssetInformation) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tfoundAssetInformation = true;\n\t\t\t}\n\t\t}\n\n\t\tboolean assetEntryVisible = ParamUtil.getBoolean(\n\t\t\trequest, \"assetEntryVisible\", true);\n\t\tlong[] assetLinkEntryIds = StringUtil.split(\n\t\t\tParamUtil.getString(\n\t\t\t\trequest, \"assetLinksSearchContainerPrimaryKeys\"), 0L);\n\n\t\tserviceContext.setAssetCategoryIds(assetCategoryIds);\n\t\tserviceContext.setAssetEntryVisible(assetEntryVisible);\n\t\tserviceContext.setAssetLinkEntryIds(assetLinkEntryIds);\n\t\tserviceContext.setAssetTagNames(assetTagNames);\n\n\t\t// Workflow\n\n\t\tint workflowAction = ParamUtil.getInteger(\n\t\t\trequest, \"workflowAction\", WorkflowConstants.ACTION_PUBLISH);\n\n\t\tserviceContext.setWorkflowAction(workflowAction);\n\n\t\treturn serviceContext;\n\t}","id":46457,"modified_method":"public static ServiceContext getInstance(HttpServletRequest request)\n\t\tthrows PortalException, SystemException {\n\n\t\tServiceContext serviceContext = new ServiceContext();\n\n\t\t// Theme display\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)request.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tif (themeDisplay != null) {\n\t\t\tserviceContext.setCompanyId(themeDisplay.getCompanyId());\n\t\t\tserviceContext.setLanguageId(themeDisplay.getLanguageId());\n\t\t\tserviceContext.setLayoutFullURL(\n\t\t\t\tPortalUtil.getCanonicalURL(\n\t\t\t\t\tPortalUtil.getLayoutFullURL(themeDisplay), themeDisplay,\n\t\t\t\t\tthemeDisplay.getLayout()));\n\t\t\tserviceContext.setLayoutURL(\n\t\t\t\tPortalUtil.getCanonicalURL(\n\t\t\t\t\tPortalUtil.getLayoutURL(themeDisplay), themeDisplay,\n\t\t\t\t\tthemeDisplay.getLayout()));\n\t\t\tserviceContext.setPathMain(PortalUtil.getPathMain());\n\t\t\tserviceContext.setPlid(themeDisplay.getPlid());\n\t\t\tserviceContext.setPortalURL(PortalUtil.getPortalURL(request));\n\t\t\tserviceContext.setScopeGroupId(themeDisplay.getScopeGroupId());\n\t\t\tserviceContext.setSignedIn(themeDisplay.isSignedIn());\n\n\t\t\tUser user = themeDisplay.getUser();\n\n\t\t\tserviceContext.setUserDisplayURL(user.getDisplayURL(themeDisplay));\n\t\t\tserviceContext.setUserId(user.getUserId());\n\t\t}\n\t\telse {\n\t\t\tlong companyId = PortalUtil.getCompanyId(request);\n\n\t\t\tserviceContext.setCompanyId(companyId);\n\n\t\t\tserviceContext.setPathMain(PortalUtil.getPathMain());\n\n\t\t\tUser user = null;\n\n\t\t\ttry {\n\t\t\t\tuser = PortalUtil.getUser(request);\n\t\t\t}\n\t\t\tcatch (NoSuchUserException nsue) {\n\n\t\t\t\t// LPS-24160\n\n\t\t\t}\n\n\t\t\tif (user != null) {\n\t\t\t\tserviceContext.setSignedIn(!user.isDefaultUser());\n\t\t\t\tserviceContext.setUserId(user.getUserId());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tserviceContext.setSignedIn(false);\n\t\t\t}\n\t\t}\n\n\t\t// Attributes\n\n\t\tMap<String, Serializable> attributes =\n\t\t\tnew HashMap<String, Serializable>();\n\n\t\tMap<String, String[]> parameters = request.getParameterMap();\n\n\t\tfor (Map.Entry<String, String[]> entry : parameters.entrySet()) {\n\t\t\tString name = entry.getKey();\n\t\t\tString[] values = entry.getValue();\n\n\t\t\tif ((values != null) && (values.length > 0)) {\n\t\t\t\tif (values.length == 1) {\n\t\t\t\t\tattributes.put(name, values[0]);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tattributes.put(name, values);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tserviceContext.setAttributes(attributes);\n\n\t\t// Command\n\n\t\tString cmd = ParamUtil.getString(request, Constants.CMD);\n\n\t\tserviceContext.setCommand(cmd);\n\n\t\t// Current URL\n\n\t\tString currentURL = PortalUtil.getCurrentURL(request);\n\n\t\tserviceContext.setCurrentURL(currentURL);\n\n\t\t// Form date\n\n\t\tlong formDateLong = ParamUtil.getLong(request, \"formDate\");\n\n\t\tif (formDateLong > 0) {\n\t\t\tDate formDate = new Date(formDateLong);\n\n\t\t\tserviceContext.setFormDate(formDate);\n\t\t}\n\n\t\t// Permissions\n\n\t\tboolean addGroupPermissions = ParamUtil.getBoolean(\n\t\t\trequest, \"addGroupPermissions\");\n\t\tboolean addGuestPermissions = ParamUtil.getBoolean(\n\t\t\trequest, \"addGuestPermissions\");\n\t\tString[] groupPermissions = PortalUtil.getGroupPermissions(request);\n\t\tString[] guestPermissions = PortalUtil.getGuestPermissions(request);\n\n\t\tserviceContext.setAddGroupPermissions(addGroupPermissions);\n\t\tserviceContext.setAddGuestPermissions(addGuestPermissions);\n\t\tserviceContext.setGroupPermissions(groupPermissions);\n\t\tserviceContext.setGuestPermissions(guestPermissions);\n\n\t\t// Portlet preferences ids\n\n\t\tString portletId = PortalUtil.getPortletId(request);\n\n\t\tif (Validator.isNotNull(portletId)) {\n\t\t\tPortletPreferencesIds portletPreferencesIds =\n\t\t\t\tPortletPreferencesFactoryUtil.getPortletPreferencesIds(\n\t\t\t\t\trequest, portletId);\n\n\t\t\tserviceContext.setPortletPreferencesIds(portletPreferencesIds);\n\t\t}\n\n\t\t// Request\n\n\t\tMap<String, String> headerMap = new HashMap<String, String>();\n\n\t\tEnumeration<String> enu = request.getHeaderNames();\n\n\t\twhile (enu.hasMoreElements()) {\n\t\t\tString header = enu.nextElement();\n\n\t\t\tString value = request.getHeader(header);\n\n\t\t\theaderMap.put(header, value);\n\t\t}\n\n\t\tserviceContext.setHeaders(headerMap);\n\n\t\tserviceContext.setRemoteAddr(request.getRemoteAddr());\n\t\tserviceContext.setRemoteHost(request.getRemoteHost());\n\t\tserviceContext.setRequest(request);\n\n\t\t// Asset\n\n\t\tMap<String, String[]> parameterMap = request.getParameterMap();\n\n\t\tList<Long> assetCategoryIdsList = new ArrayList<Long>();\n\n\t\tboolean updateAssetCategoryIds = false;\n\n\t\tfor (Map.Entry<String, String[]> entry : parameterMap.entrySet()) {\n\t\t\tString name = entry.getKey();\n\n\t\t\tif (name.startsWith(\"assetCategoryIds\")) {\n\t\t\t\tupdateAssetCategoryIds = true;\n\n\t\t\t\tlong[] assetVocabularyAssetCategoryIds = StringUtil.split(\n\t\t\t\t\tParamUtil.getString(request, name), 0L);\n\n\t\t\t\tfor (long assetCategoryId : assetVocabularyAssetCategoryIds) {\n\t\t\t\t\tassetCategoryIdsList.add(assetCategoryId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (updateAssetCategoryIds) {\n\t\t\tlong[] assetCategoryIds = ArrayUtil.toArray(\n\t\t\t\tassetCategoryIdsList.toArray(\n\t\t\t\t\tnew Long[assetCategoryIdsList.size()]));\n\n\t\t\tserviceContext.setAssetCategoryIds(assetCategoryIds);\n\t\t}\n\n\t\tboolean assetEntryVisible = ParamUtil.getBoolean(\n\t\t\trequest, \"assetEntryVisible\", true);\n\t\tlong[] assetLinkEntryIds = StringUtil.split(\n\t\t\tParamUtil.getString(\n\t\t\t\trequest, \"assetLinksSearchContainerPrimaryKeys\"), 0L);\n\n\t\tString assetTagNamesParam = request.getParameter(\"assetTagNames\");\n\n\n\t\tif (assetTagNamesParam != null) {\n\t\t\tString[] assetTagNames = StringUtil.split(assetTagNamesParam);\n\n\t\t\tserviceContext.setAssetTagNames(assetTagNames);\n\t\t}\n\n\t\tserviceContext.setAssetEntryVisible(assetEntryVisible);\n\t\tserviceContext.setAssetLinkEntryIds(assetLinkEntryIds);\n\n\t\t// Workflow\n\n\t\tint workflowAction = ParamUtil.getInteger(\n\t\t\trequest, \"workflowAction\", WorkflowConstants.ACTION_PUBLISH);\n\n\t\tserviceContext.setWorkflowAction(workflowAction);\n\n\t\treturn serviceContext;\n\t}","commit_id":"bbc7aad512e6da1b293efc9cc840d244d17dd216","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void updateStaging(PortletRequest portletRequest, Group liveGroup)\n\t\tthrows Exception {\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)portletRequest.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tPermissionChecker permissionChecker =\n\t\t\tthemeDisplay.getPermissionChecker();\n\n\t\tlong userId = permissionChecker.getUserId();\n\n\t\tGroup scopeGroup = themeDisplay.getScopeGroup();\n\n\t\tif (!GroupPermissionUtil.contains(\n\t\t\t\tpermissionChecker, liveGroup.getGroupId(),\n\t\t\t\tActionKeys.MANAGE_STAGING)) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tint stagingType = SitesAdminUtil.getStagingType(\n\t\t\tliveGroup, portletRequest);\n\n\t\tboolean branchingPrivate = ParamUtil.getBoolean(\n\t\t\tportletRequest, \"branchingPrivate\",\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tliveGroup.getTypeSettingsProperty(\"branchingPrivate\"),\n\t\t\t\tSitesAdmin.DEFAULT_BRANCHING_PRIVATE));\n\t\tboolean branchingPublic = ParamUtil.getBoolean(\n\t\t\tportletRequest, \"branchingPublic\",\n\t\t\tGetterUtil.getBoolean(\n\t\t\t\tliveGroup.getTypeSettingsProperty(\"branchingPublic\"),\n\t\t\t\tSitesAdmin.DEFAULT_BRANCHING_PUBLIC));\n\n\t\tServiceContext serviceContext =\n\t\t\tServiceContextThreadLocal.getServiceContext();\n\n\t\tif (stagingType == StagingConstants.TYPE_NOT_STAGED) {\n\t\t\tif (liveGroup.hasStagingGroup() || liveGroup.isStagedRemotely()) {\n\t\t\t\tdisableStaging(\n\t\t\t\t\tportletRequest, scopeGroup, liveGroup, serviceContext);\n\t\t\t}\n\t\t}\n\t\telse if (stagingType == StagingConstants.TYPE_LOCAL_STAGING) {\n\t\t\tenableLocalStaging(\n\t\t\t\tuserId, scopeGroup, liveGroup, branchingPublic,\n\t\t\t\tbranchingPrivate, serviceContext);\n\t\t}\n\t\telse if (stagingType == StagingConstants.TYPE_REMOTE_STAGING) {\n\t\t\tString remoteAddress = ParamUtil.getString(\n\t\t\t\tportletRequest, \"remoteAddress\",\n\t\t\t\tliveGroup.getTypeSettingsProperty(\"remoteAddress\"));\n\n\t\t\tremoteAddress = stripProtocolFromRemoteAddress(remoteAddress);\n\n\t\t\tlong remoteGroupId = ParamUtil.getLong(\n\t\t\t\tportletRequest, \"remoteGroupId\",\n\t\t\t\tGetterUtil.getLong(\n\t\t\t\t\tliveGroup.getTypeSettingsProperty(\"remoteGroupId\"),\n\t\t\t\t\tSitesAdmin.DEFAULT_REMOTE_GROUP_ID));\n\t\t\tint remotePort = ParamUtil.getInteger(\n\t\t\t\tportletRequest, \"remotePort\",\n\t\t\t\tGetterUtil.getInteger(\n\t\t\t\t\tliveGroup.getTypeSettingsProperty(\"remotePort\"),\n\t\t\t\t\tSitesAdmin.DEFAULT_REMOTE_PORT));\n\t\t\tboolean secureConnection = ParamUtil.getBoolean(\n\t\t\t\tportletRequest, \"secureConnection\",\n\t\t\t\tGetterUtil.getBoolean(\n\t\t\t\t\tliveGroup.getTypeSettingsProperty(\"secureConnection\"),\n\t\t\t\t\tSitesAdmin.DEFAULT_SECURE_CONNECTION));\n\n\t\t\tenableRemoteStaging(\n\t\t\t\tuserId, scopeGroup, liveGroup, branchingPublic,\n\t\t\t\tbranchingPrivate, remoteAddress, remoteGroupId, remotePort,\n\t\t\t\tsecureConnection, serviceContext);\n\t\t}\n\t}","id":46458,"modified_method":"public void updateStaging(PortletRequest portletRequest, Group liveGroup)\n\t\tthrows Exception {\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)portletRequest.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tPermissionChecker permissionChecker =\n\t\t\tthemeDisplay.getPermissionChecker();\n\n\t\tlong userId = permissionChecker.getUserId();\n\n\t\tGroup scopeGroup = themeDisplay.getScopeGroup();\n\n\t\tif (!GroupPermissionUtil.contains(\n\t\t\t\tpermissionChecker, liveGroup.getGroupId(),\n\t\t\t\tActionKeys.MANAGE_STAGING)) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tint stagingType = getStagingType(liveGroup, portletRequest);\n\n\t\tboolean defaultBranchingPublic = GetterUtil.getBoolean(\n\t\t\tliveGroup.getTypeSettingsProperty(\"branchingPublic\"));\n\t\tboolean defaultBranchingPrivate = GetterUtil.getBoolean(\n\t\t\tliveGroup.getTypeSettingsProperty(\"branchingPrivate\"));\n\t\t\n\t\tboolean branchingPublic = ParamUtil.getBoolean(\n\t\t\tportletRequest, \"branchingPublic\", defaultBranchingPublic);\n\t\tboolean branchingPrivate = ParamUtil.getBoolean(\n\t\t\tportletRequest, \"branchingPrivate\", defaultBranchingPrivate);\n\n\t\tServiceContext serviceContext =\n\t\t\tServiceContextThreadLocal.getServiceContext();\n\n\t\tif (stagingType == StagingConstants.TYPE_NOT_STAGED) {\n\t\t\tif (liveGroup.hasStagingGroup() || liveGroup.isStagedRemotely()) {\n\t\t\t\tdisableStaging(\n\t\t\t\t\tportletRequest, scopeGroup, liveGroup, serviceContext);\n\t\t\t}\n\t\t}\n\t\telse if (stagingType == StagingConstants.TYPE_LOCAL_STAGING) {\n\t\t\tenableLocalStaging(\n\t\t\t\tuserId, scopeGroup, liveGroup, branchingPublic,\n\t\t\t\tbranchingPrivate, serviceContext);\n\t\t}\n\t\telse if (stagingType == StagingConstants.TYPE_REMOTE_STAGING) {\n\t\t\tString defaultRemoteAddress = GetterUtil.getString(\n\t\t\t\tliveGroup.getTypeSettingsProperty(\"remoteAddress\"));\n\t\t\t\n\t\t\tString remoteAddress = ParamUtil.getString(\n\t\t\t\tportletRequest, \"remoteAddress\", defaultRemoteAddress);\n\n\t\t\tremoteAddress = stripProtocolFromRemoteAddress(remoteAddress);\n\n\t\t\tlong defaultRemoteGroupId = GetterUtil.getLong(\n\t\t\t\tliveGroup.getTypeSettingsProperty(\"remoteGroupId\"));\n\n\t\t\tlong remoteGroupId = ParamUtil.getLong(\n\t\t\t\tportletRequest, \"remoteGroupId\", defaultRemoteGroupId);\n\n\t\t\tint defaultRemotePort = GetterUtil.getInteger(\n\t\t\t\tliveGroup.getTypeSettingsProperty(\"remotePort\"));\n\n\t\t\tint remotePort = ParamUtil.getInteger(\n\t\t\t\tportletRequest, \"remotePort\", defaultRemotePort);\n\n\t\t\tboolean defaultSecureConnection = GetterUtil.getBoolean(\n\t\t\t\tliveGroup.getTypeSettingsProperty(\"secureConnection\"));\n\n\t\t\tboolean secureConnection = ParamUtil.getBoolean(\n\t\t\t\tportletRequest, \"secureConnection\", defaultSecureConnection);\n\n\t\t\tenableRemoteStaging(\n\t\t\t\tuserId, scopeGroup, liveGroup, branchingPublic,\n\t\t\t\tbranchingPrivate, remoteAddress, remoteGroupId, remotePort,\n\t\t\t\tsecureConnection, serviceContext);\n\t\t}\n\t}","commit_id":"bbc7aad512e6da1b293efc9cc840d244d17dd216","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\r\n\tpublic boolean execute(final OHttpRequest iRequest) throws Exception {\r\n\t\tcheckSyntax(iRequest.url, 1, \"Syntax error: server\");\r\n\r\n\t\tiRequest.data.commandInfo = \"Server status\";\r\n\r\n\t\ttry {\r\n\t\t\tStringWriter jsonBuffer = new StringWriter();\r\n\t\t\tOJSONWriter json = new OJSONWriter(jsonBuffer);\r\n\r\n\t\t\tjson.beginObject();\r\n\r\n\t\t\tjson.beginCollection(1, true, \"connections\");\r\n\r\n\t\t\tString lastCommandOn;\r\n\t\t\tString connectedOn;\r\n\r\n\t\t\tfinal OClientConnection[] conns = OServerMain.server().getManagedServer().getConnections();\r\n\t\t\tfor (OClientConnection c : conns) {\r\n\t\t\t\tfinal ONetworkProtocolData data = c.data;\r\n\r\n\t\t\t\tsynchronized (dateTimeFormat) {\r\n\t\t\t\t\tlastCommandOn = dateTimeFormat.format(new Date(data.lastCommandReceived));\r\n\t\t\t\t\tconnectedOn = dateTimeFormat.format(new Date(c.since));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tjson.beginObject(2);\r\n\t\t\t\twriteField(json, 2, \"connectionId\", c.id);\r\n\t\t\t\twriteField(json, 2, \"remoteAddress\", c.protocol.getChannel() != null ? c.protocol.getChannel().toString() : \"Disconnected\");\r\n\t\t\t\twriteField(json, 2, \"db\", c.database != null ? c.database.getName() : \"-\");\r\n\t\t\t\twriteField(json, 2, \"protocol\", c.protocol.getType());\r\n\t\t\t\twriteField(json, 2, \"protocolVersion\", data.protocolVersion);\r\n\t\t\t\twriteField(json, 2, \"driverName\", data.driverName);\r\n\t\t\t\twriteField(json, 2, \"driverVersion\", data.driverVersion);\r\n\t\t\t\twriteField(json, 2, \"clientId\", data.clientId);\r\n\t\t\t\twriteField(json, 2, \"user\", c.database != null && c.database.getUser() != null ? c.database.getUser().getName() : \"-\");\r\n\t\t\t\twriteField(json, 2, \"totalRequests\", data.totalRequests);\r\n\t\t\t\twriteField(json, 2, \"commandInfo\", data.commandInfo);\r\n\t\t\t\twriteField(json, 2, \"commandDetail\", data.commandDetail);\r\n\t\t\t\twriteField(json, 2, \"lastCommandOn\", lastCommandOn);\r\n\t\t\t\twriteField(json, 2, \"lastCommandInfo\", data.lastCommandInfo);\r\n\t\t\t\twriteField(json, 2, \"lastCommandDetail\", data.lastCommandDetail);\r\n\t\t\t\twriteField(json, 2, \"lastExecutionTime\", data.lastCommandExecutionTime);\r\n\t\t\t\twriteField(json, 2, \"totalWorkingTime\", data.totalCommandExecutionTime);\r\n\t\t\t\twriteField(json, 2, \"connectedOn\", connectedOn);\r\n\t\t\t\tjson.endObject(2);\r\n\t\t\t}\r\n\t\t\tjson.endCollection(1, false);\r\n\r\n\t\t\tjson.beginCollection(1, true, \"dbs\");\r\n\t\t\tMap<String, OResourcePool<String, ODatabaseDocumentTx>> dbPool = OSharedDocumentDatabase.getDatabasePools();\r\n\t\t\tfor (Entry<String, OResourcePool<String, ODatabaseDocumentTx>> entry : dbPool.entrySet()) {\r\n\t\t\t\tfor (ODatabaseDocumentTx db : entry.getValue().getResources()) {\r\n\r\n\t\t\t\t\tjson.beginObject(2);\r\n\t\t\t\t\twriteField(json, 2, \"db\", db.getName());\r\n\t\t\t\t\twriteField(json, 2, \"user\", db.getUser() != null ? db.getUser().getName() : \"-\");\r\n\t\t\t\t\twriteField(json, 2, \"open\", db.isClosed() ? \"closed\" : \"open\");\r\n\t\t\t\t\twriteField(json, 2, \"storage\", db.getStorage().getClass().getSimpleName());\r\n\t\t\t\t\tjson.endObject(2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tjson.endCollection(1, false);\r\n\r\n\t\t\tjson.beginCollection(1, true, \"storages\");\r\n\t\t\tOStorage[] storages = OServerMain.server().getManagedServer().getOpenedStorages();\r\n\t\t\tfor (OStorage s : storages) {\r\n\t\t\t\tjson.beginObject(2);\r\n\t\t\t\twriteField(json, 2, \"name\", s.getName());\r\n\t\t\t\twriteField(json, 2, \"type\", s.getClass().getSimpleName());\r\n\t\t\t\twriteField(json, 2, \"path\", s instanceof OStorageLocal ? ((OStorageLocal) s).getStoragePath().replace('\\\\', '/') : \"\");\r\n\t\t\t\twriteField(json, 2, \"activeUsers\", s.getUsers());\r\n\t\t\t\tjson.endObject(2);\r\n\t\t\t}\r\n\t\t\tjson.endCollection(1, false);\r\n\r\n\t\t\tjson.beginCollection(2, true, \"properties\");\r\n\t\t\tfor (OServerEntryConfiguration entry : OServerMain.server().getConfiguration().properties) {\r\n\t\t\t\tjson.beginObject(3, true, null);\r\n\t\t\t\tjson.writeAttribute(4, false, \"name\", entry.name);\r\n\t\t\t\tjson.writeAttribute(4, false, \"value\", entry.value);\r\n\t\t\t\tjson.endObject(3, true);\r\n\t\t\t}\r\n\t\t\tjson.endCollection(2, true);\r\n\r\n\t\t\tjson.beginObject(1, true, \"profiler\");\r\n\t\t\tjson.beginCollection(2, true, \"hookValues\");\r\n\t\t\tfor (String h : OProfiler.getInstance().getHooks()) {\r\n\t\t\t\tjson.beginObject(3);\r\n\t\t\t\twriteField(json, 3, \"name\", h);\r\n\t\t\t\twriteField(json, 3, \"value\", OProfiler.getInstance().getHookValue(h));\r\n\t\t\t\tjson.endObject(3);\r\n\t\t\t}\r\n\t\t\tjson.endCollection(2, false);\r\n\r\n\t\t\tjson.beginCollection(2, true, \"counters\");\r\n\t\t\tfor (String c : OProfiler.getInstance().getCounters()) {\r\n\t\t\t\tjson.beginObject(3);\r\n\t\t\t\twriteField(json, 3, \"name\", c);\r\n\t\t\t\twriteField(json, 3, \"value\", OProfiler.getInstance().getCounter(c));\r\n\t\t\t\tjson.endObject(3);\r\n\t\t\t}\r\n\t\t\tjson.endCollection(2, false);\r\n\r\n\t\t\tOProfilerEntry pEntry;\r\n\r\n\t\t\tjson.beginCollection(2, true, \"stats\");\r\n\t\t\tfor (String s : OProfiler.getInstance().getStats()) {\r\n\t\t\t\tpEntry = OProfiler.getInstance().getStat(s);\r\n\r\n\t\t\t\tjson.beginObject(3);\r\n\t\t\t\twriteField(json, 3, \"name\", s);\r\n\t\t\t\twriteField(json, 3, \"total\", pEntry.items);\r\n\t\t\t\twriteField(json, 3, \"averageElapsed\", pEntry.average);\r\n\t\t\t\twriteField(json, 3, \"minElapsed\", pEntry.min);\r\n\t\t\t\twriteField(json, 3, \"maxElapsed\", pEntry.max);\r\n\t\t\t\twriteField(json, 3, \"lastElapsed\", pEntry.last);\r\n\t\t\t\twriteField(json, 3, \"totalElapsed\", pEntry.total);\r\n\t\t\t\tjson.endObject(3);\r\n\t\t\t}\r\n\t\t\tjson.endCollection(2, false);\r\n\r\n\t\t\tjson.beginCollection(2, true, \"chronos\");\r\n\t\t\tfor (String c : OProfiler.getInstance().getChronos()) {\r\n\t\t\t\tpEntry = OProfiler.getInstance().getChrono(c);\r\n\r\n\t\t\t\tjson.beginObject(3);\r\n\t\t\t\twriteField(json, 3, \"name\", c);\r\n\t\t\t\twriteField(json, 3, \"total\", pEntry.items);\r\n\t\t\t\twriteField(json, 3, \"averageElapsed\", pEntry.average);\r\n\t\t\t\twriteField(json, 3, \"minElapsed\", pEntry.min);\r\n\t\t\t\twriteField(json, 3, \"maxElapsed\", pEntry.max);\r\n\t\t\t\twriteField(json, 3, \"lastElapsed\", pEntry.last);\r\n\t\t\t\twriteField(json, 3, \"totalElapsed\", pEntry.total);\r\n\t\t\t\tjson.endObject(3);\r\n\t\t\t}\r\n\t\t\tjson.endCollection(2, false);\r\n\t\t\tjson.endObject(1);\r\n\r\n\t\t\tjson.endObject();\r\n\r\n\t\t\tsendTextContent(iRequest, OHttpUtils.STATUS_OK_CODE, \"OK\", null, OHttpUtils.CONTENT_JSON, jsonBuffer.toString());\r\n\r\n\t\t} finally {\r\n\t\t}\r\n\t\treturn false;\r\n\t}","id":46459,"modified_method":"@Override\r\n\tpublic boolean execute(final OHttpRequest iRequest) throws Exception {\r\n\t\tcheckSyntax(iRequest.url, 1, \"Syntax error: server\");\r\n\r\n\t\tiRequest.data.commandInfo = \"Server status\";\r\n\r\n\t\ttry {\r\n\t\t\tStringWriter jsonBuffer = new StringWriter();\r\n\t\t\tOJSONWriter json = new OJSONWriter(jsonBuffer);\r\n\r\n\t\t\tjson.beginObject();\r\n\r\n\t\t\tjson.beginCollection(1, true, \"connections\");\r\n\r\n\t\t\tString lastCommandOn;\r\n\t\t\tString connectedOn;\r\n\r\n\t\t\tfinal OClientConnection[] conns = OServerMain.server().getManagedServer().getConnections();\r\n\t\t\tfor (OClientConnection c : conns) {\r\n\t\t\t\tfinal ONetworkProtocolData data = c.data;\r\n\r\n\t\t\t\tsynchronized (dateTimeFormat) {\r\n\t\t\t\t\tlastCommandOn = dateTimeFormat.format(new Date(data.lastCommandReceived));\r\n\t\t\t\t\tconnectedOn = dateTimeFormat.format(new Date(c.since));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tjson.beginObject(2);\r\n\t\t\t\twriteField(json, 2, \"connectionId\", c.id);\r\n\t\t\t\twriteField(json, 2, \"remoteAddress\", c.protocol.getChannel() != null ? c.protocol.getChannel().toString() : \"Disconnected\");\r\n\t\t\t\twriteField(json, 2, \"db\", c.database != null ? c.database.getName() : \"-\");\r\n\t\t\t\twriteField(json, 2, \"user\", c.database != null && c.database.getUser() != null ? c.database.getUser().getName() : \"-\");\r\n\t\t\t\twriteField(json, 2, \"totalRequests\", data.totalRequests);\r\n\t\t\t\twriteField(json, 2, \"commandInfo\", data.commandInfo);\r\n\t\t\t\twriteField(json, 2, \"commandDetail\", data.commandDetail);\r\n\t\t\t\twriteField(json, 2, \"lastCommandOn\", lastCommandOn);\r\n\t\t\t\twriteField(json, 2, \"lastCommandInfo\", data.lastCommandInfo);\r\n\t\t\t\twriteField(json, 2, \"lastCommandDetail\", data.lastCommandDetail);\r\n\t\t\t\twriteField(json, 2, \"lastExecutionTime\", data.lastCommandExecutionTime);\r\n\t\t\t\twriteField(json, 2, \"totalWorkingTime\", data.totalCommandExecutionTime);\r\n\t\t\t\twriteField(json, 2, \"connectedOn\", connectedOn);\r\n\t\t\t\twriteField(json, 2, \"protocol\", c.protocol.getType());\r\n\t\t\t\twriteField(json, 2, \"clientId\", data.clientId);\r\n\r\n\t\t\t\tfinal StringBuilder driver = new StringBuilder();\r\n\t\t\t\tif (data.driverName != null) {\r\n\t\t\t\t\tdriver.append(data.driverName);\r\n\t\t\t\t\tdriver.append(\" v\");\r\n\t\t\t\t\tdriver.append(data.driverVersion);\r\n\t\t\t\t\tdriver.append(\" Protocol v\");\r\n\t\t\t\t\tdriver.append(data.protocolVersion);\r\n\t\t\t\t}\r\n\r\n\t\t\t\twriteField(json, 2, \"driver\", driver.toString());\r\n\t\t\t\tjson.endObject(2);\r\n\t\t\t}\r\n\t\t\tjson.endCollection(1, false);\r\n\r\n\t\t\tjson.beginCollection(1, true, \"dbs\");\r\n\t\t\tMap<String, OResourcePool<String, ODatabaseDocumentTx>> dbPool = OSharedDocumentDatabase.getDatabasePools();\r\n\t\t\tfor (Entry<String, OResourcePool<String, ODatabaseDocumentTx>> entry : dbPool.entrySet()) {\r\n\t\t\t\tfor (ODatabaseDocumentTx db : entry.getValue().getResources()) {\r\n\r\n\t\t\t\t\tjson.beginObject(2);\r\n\t\t\t\t\twriteField(json, 2, \"db\", db.getName());\r\n\t\t\t\t\twriteField(json, 2, \"user\", db.getUser() != null ? db.getUser().getName() : \"-\");\r\n\t\t\t\t\twriteField(json, 2, \"open\", db.isClosed() ? \"closed\" : \"open\");\r\n\t\t\t\t\twriteField(json, 2, \"storage\", db.getStorage().getClass().getSimpleName());\r\n\t\t\t\t\tjson.endObject(2);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tjson.endCollection(1, false);\r\n\r\n\t\t\tjson.beginCollection(1, true, \"storages\");\r\n\t\t\tOStorage[] storages = OServerMain.server().getManagedServer().getOpenedStorages();\r\n\t\t\tfor (OStorage s : storages) {\r\n\t\t\t\tjson.beginObject(2);\r\n\t\t\t\twriteField(json, 2, \"name\", s.getName());\r\n\t\t\t\twriteField(json, 2, \"type\", s.getClass().getSimpleName());\r\n\t\t\t\twriteField(json, 2, \"path\", s instanceof OStorageLocal ? ((OStorageLocal) s).getStoragePath().replace('\\\\', '/') : \"\");\r\n\t\t\t\twriteField(json, 2, \"activeUsers\", s.getUsers());\r\n\t\t\t\tjson.endObject(2);\r\n\t\t\t}\r\n\t\t\tjson.endCollection(1, false);\r\n\r\n\t\t\tjson.beginCollection(2, true, \"properties\");\r\n\t\t\tfor (OServerEntryConfiguration entry : OServerMain.server().getConfiguration().properties) {\r\n\t\t\t\tjson.beginObject(3, true, null);\r\n\t\t\t\tjson.writeAttribute(4, false, \"name\", entry.name);\r\n\t\t\t\tjson.writeAttribute(4, false, \"value\", entry.value);\r\n\t\t\t\tjson.endObject(3, true);\r\n\t\t\t}\r\n\t\t\tjson.endCollection(2, true);\r\n\r\n\t\t\tjson.beginObject(1, true, \"profiler\");\r\n\t\t\tjson.beginCollection(2, true, \"hookValues\");\r\n\t\t\tfor (String h : OProfiler.getInstance().getHooks()) {\r\n\t\t\t\tjson.beginObject(3);\r\n\t\t\t\twriteField(json, 3, \"name\", h);\r\n\t\t\t\twriteField(json, 3, \"value\", OProfiler.getInstance().getHookValue(h));\r\n\t\t\t\tjson.endObject(3);\r\n\t\t\t}\r\n\t\t\tjson.endCollection(2, false);\r\n\r\n\t\t\tjson.beginCollection(2, true, \"counters\");\r\n\t\t\tfor (String c : OProfiler.getInstance().getCounters()) {\r\n\t\t\t\tjson.beginObject(3);\r\n\t\t\t\twriteField(json, 3, \"name\", c);\r\n\t\t\t\twriteField(json, 3, \"value\", OProfiler.getInstance().getCounter(c));\r\n\t\t\t\tjson.endObject(3);\r\n\t\t\t}\r\n\t\t\tjson.endCollection(2, false);\r\n\r\n\t\t\tOProfilerEntry pEntry;\r\n\r\n\t\t\tjson.beginCollection(2, true, \"stats\");\r\n\t\t\tfor (String s : OProfiler.getInstance().getStats()) {\r\n\t\t\t\tpEntry = OProfiler.getInstance().getStat(s);\r\n\r\n\t\t\t\tjson.beginObject(3);\r\n\t\t\t\twriteField(json, 3, \"name\", s);\r\n\t\t\t\twriteField(json, 3, \"total\", pEntry.items);\r\n\t\t\t\twriteField(json, 3, \"averageElapsed\", pEntry.average);\r\n\t\t\t\twriteField(json, 3, \"minElapsed\", pEntry.min);\r\n\t\t\t\twriteField(json, 3, \"maxElapsed\", pEntry.max);\r\n\t\t\t\twriteField(json, 3, \"lastElapsed\", pEntry.last);\r\n\t\t\t\twriteField(json, 3, \"totalElapsed\", pEntry.total);\r\n\t\t\t\tjson.endObject(3);\r\n\t\t\t}\r\n\t\t\tjson.endCollection(2, false);\r\n\r\n\t\t\tjson.beginCollection(2, true, \"chronos\");\r\n\t\t\tfor (String c : OProfiler.getInstance().getChronos()) {\r\n\t\t\t\tpEntry = OProfiler.getInstance().getChrono(c);\r\n\r\n\t\t\t\tjson.beginObject(3);\r\n\t\t\t\twriteField(json, 3, \"name\", c);\r\n\t\t\t\twriteField(json, 3, \"total\", pEntry.items);\r\n\t\t\t\twriteField(json, 3, \"averageElapsed\", pEntry.average);\r\n\t\t\t\twriteField(json, 3, \"minElapsed\", pEntry.min);\r\n\t\t\t\twriteField(json, 3, \"maxElapsed\", pEntry.max);\r\n\t\t\t\twriteField(json, 3, \"lastElapsed\", pEntry.last);\r\n\t\t\t\twriteField(json, 3, \"totalElapsed\", pEntry.total);\r\n\t\t\t\tjson.endObject(3);\r\n\t\t\t}\r\n\t\t\tjson.endCollection(2, false);\r\n\t\t\tjson.endObject(1);\r\n\r\n\t\t\tjson.endObject();\r\n\r\n\t\t\tsendTextContent(iRequest, OHttpUtils.STATUS_OK_CODE, \"OK\", null, OHttpUtils.CONTENT_JSON, jsonBuffer.toString());\r\n\r\n\t\t} finally {\r\n\t\t}\r\n\t\treturn false;\r\n\t}","commit_id":"502d58638facdab7474a1cc676b75a246e16404a","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"private Object instantiateNewInstance(UnmarshallingContext context, String readResolveValue) {\n        Object currentObject = context.currentObject();\n        if (currentObject != null) {\n            return currentObject;\n        } else if (readResolveValue != null) {\n            return reflectionProvider.newInstance(mapper.realClass(readResolveValue));\n        } else {\n            return reflectionProvider.newInstance(context.getRequiredType());\n        }\n    }","id":46460,"modified_method":"protected Object instantiateNewInstance(HierarchicalStreamReader reader, UnmarshallingContext context) {\n        String readResolveValue = reader.getAttribute(mapper.aliasForAttribute(\"resolves-to\"));\n        Object currentObject = context.currentObject();\n        if (currentObject != null) {\n            return currentObject;\n        } else if (readResolveValue != null) {\n            return reflectionProvider.newInstance(mapper.realClass(readResolveValue));\n        } else {\n            return reflectionProvider.newInstance(context.getRequiredType());\n        }\n    }","commit_id":"5311b5bcb3c0775c4c4fb29472a16a360dd2d4fe","url":"https://github.com/kohsuke/hudson"},{"original_method":"private Class determineWhichClassDefinesField(HierarchicalStreamReader reader) {\n        String definedIn = reader.getAttribute(mapper.attributeForClassDefiningField());\n        return definedIn == null ? null : mapper.realClass(definedIn);\n    }","id":46461,"modified_method":"private Class determineWhichClassDefinesField(HierarchicalStreamReader reader) {\n        String definedIn = reader.getAttribute(mapper.aliasForAttribute(\"defined-in\"));\n        return definedIn == null ? null : mapper.realClass(definedIn);\n    }","commit_id":"5311b5bcb3c0775c4c4fb29472a16a360dd2d4fe","url":"https://github.com/kohsuke/hudson"},{"original_method":"private Class determineType(HierarchicalStreamReader reader, boolean validField, Object result, String fieldName, Class definedInCls) {\n        String classAttribute = reader.getAttribute(mapper.attributeForImplementationClass());\n        if (classAttribute != null) {\n            return mapper.realClass(classAttribute);\n        } else if (!validField) {\n            Class itemType = mapper.getItemTypeForItemFieldName(result.getClass(), fieldName);\n            if (itemType != null) {\n                return itemType;\n            } else {\n                return mapper.realClass(reader.getNodeName());\n            }\n        } else {\n            return mapper.defaultImplementationOf(reflectionProvider.getFieldType(result, fieldName, definedInCls));\n        }\n    }","id":46462,"modified_method":"private Class determineType(HierarchicalStreamReader reader, boolean validField, Object result, String fieldName, Class definedInCls) {\n        String classAttribute = reader.getAttribute(mapper.aliasForAttribute(\"class\"));\n        if (classAttribute != null) {\n            return mapper.realClass(classAttribute);\n        } else if (!validField) {\n            Class itemType = mapper.getItemTypeForItemFieldName(result.getClass(), fieldName);\n            if (itemType != null) {\n                return itemType;\n            } else {\n                return mapper.realClass(reader.getNodeName());\n            }\n        } else {\n            return mapper.defaultImplementationOf(reflectionProvider.getFieldType(result, fieldName, definedInCls));\n        }\n    }","commit_id":"5311b5bcb3c0775c4c4fb29472a16a360dd2d4fe","url":"https://github.com/kohsuke/hudson"},{"original_method":"public void marshal(Object original, final HierarchicalStreamWriter writer, final MarshallingContext context) {\n        final Object source = serializationMethodInvoker.callWriteReplace(original);\n\n        if (source.getClass() != original.getClass()) {\n            writer.addAttribute(mapper.attributeForReadResolveField(), mapper.serializedClass(source.getClass()));\n        }\n\n        final Set seenFields = new HashSet();\n\n        reflectionProvider.visitSerializableFields(source, new ReflectionProvider.Visitor() {\n            public void visit(String fieldName, Class fieldType, Class definedIn, Object newObj) {\n                if (newObj != null) {\n                    Mapper.ImplicitCollectionMapping mapping = mapper.getImplicitCollectionDefForFieldName(source.getClass(), fieldName);\n                    if (mapping != null) {\n                        if (mapping.getItemFieldName() != null) {\n                            ArrayList list = (ArrayList) newObj;\n                            for (Object obj : list) {\n                                writeField(mapping.getItemFieldName(), mapping.getItemType(), definedIn, obj);\n                            }\n                        } else {\n                            context.convertAnother(newObj);\n                        }\n                    } else {\n                        writeField(fieldName, fieldType, definedIn, newObj);\n                        seenFields.add(fieldName);\n                    }\n                }\n            }\n\n            private void writeField(String fieldName, Class fieldType, Class definedIn, Object newObj) {\n                if (!mapper.shouldSerializeMember(definedIn, fieldName)) {\n                    return;\n                }\n                writer.startNode(mapper.serializedMember(definedIn, fieldName));\n\n                Class actualType = newObj.getClass();\n\n                Class defaultType = mapper.defaultImplementationOf(fieldType);\n                if (!actualType.equals(defaultType)) {\n                    writer.addAttribute(mapper.attributeForImplementationClass(), mapper.serializedClass(actualType));\n                }\n\n                if (seenFields.contains(fieldName)) {\n                    writer.addAttribute(mapper.attributeForClassDefiningField(), mapper.serializedClass(definedIn));\n                }\n                context.convertAnother(newObj);\n\n                writer.endNode();\n            }\n\n        });\n    }","id":46463,"modified_method":"public void marshal(Object original, final HierarchicalStreamWriter writer, final MarshallingContext context) {\n        final Object source = serializationMethodInvoker.callWriteReplace(original);\n\n        if (source.getClass() != original.getClass()) {\n            writer.addAttribute(mapper.aliasForAttribute(\"resolves-to\"), mapper.serializedClass(source.getClass()));\n        }\n\n        doMarshal(source, writer, context);\n    }","commit_id":"5311b5bcb3c0775c4c4fb29472a16a360dd2d4fe","url":"https://github.com/kohsuke/hudson"},{"original_method":"public DuplicateFieldException(String msg) {\n            super(msg);\n        }","id":46464,"modified_method":"public DuplicateFieldException(String msg) {\n            super(msg);\n            add(\"duplicate-field\", msg);\n        }","commit_id":"5311b5bcb3c0775c4c4fb29472a16a360dd2d4fe","url":"https://github.com/kohsuke/hudson"},{"original_method":"public Object unmarshal(final HierarchicalStreamReader reader, final UnmarshallingContext context) {\n        final Object result = instantiateNewInstance(context, reader.getAttribute(mapper.attributeForReadResolveField()));\n        final SeenFields seenFields = new SeenFields();\n\n        Map implicitCollectionsForCurrentObject = null;\n        while (reader.hasMoreChildren()) {\n            reader.moveDown();\n\n            String fieldName = mapper.realMember(result.getClass(), reader.getNodeName());\n\n            Class classDefiningField = determineWhichClassDefinesField(reader);\n            boolean fieldExistsInClass = reflectionProvider.fieldDefinedInClass(fieldName, result.getClass());\n\n            try {\n                Class type = determineType(reader, fieldExistsInClass, result, fieldName, classDefiningField);\n                Object value = context.convertAnother(result, type);\n\n                if (fieldExistsInClass) {\n                    reflectionProvider.writeField(result, fieldName, value, classDefiningField);\n                    seenFields.add(classDefiningField, fieldName);\n                } else {\n                    implicitCollectionsForCurrentObject = writeValueToImplicitCollection(context, value, implicitCollectionsForCurrentObject, result, fieldName);\n                }\n            } catch (CannotResolveClassException e) {\n                LOGGER.log(Level.WARNING,\"Skipping a non-existend type\",e);\n            }\n\n            reader.moveUp();\n        }\n\n        return serializationMethodInvoker.callReadResolve(result);\n    }","id":46465,"modified_method":"public Object unmarshal(final HierarchicalStreamReader reader, final UnmarshallingContext context) {\n        Object result = instantiateNewInstance(reader, context);\n        result = doUnmarshal(result, reader, context);\n        return serializationMethodInvoker.callReadResolve(result);\n    }","commit_id":"5311b5bcb3c0775c4c4fb29472a16a360dd2d4fe","url":"https://github.com/kohsuke/hudson"},{"original_method":"private Map writeValueToImplicitCollection(UnmarshallingContext context, Object value, Map implicitCollections, Object result, String itemFieldName) {\n        String fieldName = mapper.getFieldNameForItemTypeAndName(context.getRequiredType(), value.getClass(), itemFieldName);\n        if (fieldName != null) {\n            if (implicitCollections == null) {\n                implicitCollections = new HashMap(); // lazy instantiation\n            }\n            Collection collection = (Collection) implicitCollections.get(fieldName);\n            if (collection == null) {\n                collection = new ArrayList();\n                reflectionProvider.writeField(result, fieldName, collection, null);\n                implicitCollections.put(fieldName, collection);\n            }\n            collection.add(value);\n        }\n        return implicitCollections;\n    }","id":46466,"modified_method":"private Map writeValueToImplicitCollection(UnmarshallingContext context, Object value, Map implicitCollections, Object result, String itemFieldName) {\n        String fieldName = mapper.getFieldNameForItemTypeAndName(context.getRequiredType(), value.getClass(), itemFieldName);\n        if (fieldName != null) {\n            if (implicitCollections == null) {\n                implicitCollections = new HashMap(); // lazy instantiation\n            }\n            Collection collection = (Collection) implicitCollections.get(fieldName);\n            if (collection == null) {\n                Class fieldType = mapper.defaultImplementationOf(reflectionProvider.getFieldType(result, fieldName, null));\n                if (!Collection.class.isAssignableFrom(fieldType)) {\n                    throw new ObjectAccessException(\"Field \" + fieldName + \" of \" + result.getClass().getName() +\n                            \" is configured for an implicit Collection, but field is of type \" + fieldType.getName());\n                }\n                if (pureJavaReflectionProvider == null) {\n                    pureJavaReflectionProvider = new PureJavaReflectionProvider();\n                }\n                collection = (Collection)pureJavaReflectionProvider.newInstance(fieldType);\n                reflectionProvider.writeField(result, fieldName, collection, null);\n                implicitCollections.put(fieldName, collection);\n            }\n            collection.add(value);\n        }\n        return implicitCollections;\n    }","commit_id":"5311b5bcb3c0775c4c4fb29472a16a360dd2d4fe","url":"https://github.com/kohsuke/hudson"},{"original_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        Player controller = game.getPlayer(source.getControllerId());\n        if (controller != null) {\n            return game.getStack().counter(targetPointer.getFirst(game, source), source.getSourceId(), game, Zone.BATTLEFIELD, false, ZoneDetail.NONE);\n        }\n        return false;\n    }","id":46467,"modified_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        Player controller = game.getPlayer(source.getControllerId());\n        if (controller != null) {\n            Spell targetSpell = game.getStack().getSpell(targetPointer.getFirst(game, source));\n            if (targetSpell != null) {                \n                Set<CardType> cardTypes = new HashSet<>(targetSpell.getCardType());\n                if (!cardTypes.isEmpty()) {\n                    //targetPointer.getFirst(game, source)\n                    if (cardTypes.contains(CardType.ARTIFACT) || cardTypes.contains(CardType.CREATURE)) {\n                        return game.getStack().counter(targetSpell.getId(), source.getSourceId(), game, Zone.BATTLEFIELD, false, ZoneDetail.NONE);\n                    } else {\n                        return game.getStack().counter(targetSpell.getId(), source.getSourceId(), game);\n                    }\n                }\n            }\n        }\n        return false;\n    }","commit_id":"e225bb26432e21883a38d828276300b20b6ea0b8","url":"https://github.com/magefree/mage"},{"original_method":"public static String[] getCiphersuites(List<String> cipherSuitesList,\n                                           String[] supportedCipherSuites,\n                                           FiltersType filters,\n                                           Logger log, boolean exclude) {\n        String[] cipherSuites = null;\n        if (!(cipherSuitesList == null || cipherSuitesList.isEmpty())) {\n            cipherSuites = getCiphersFromList(cipherSuitesList, log, exclude);\n            return cipherSuites;\n        }\n        if (!exclude) {\n            cipherSuites = getSystemCiphersuites(log);\n            if (cipherSuites != null) {\n                return cipherSuites;\n            }\n        }\n        LogUtils.log(log, Level.FINE, \"CIPHERSUITES_NOT_SET\");\n        if (filters == null) {\n            LogUtils.log(log, Level.FINE, \"CIPHERSUITE_FILTERS_NOT_SET\");\n        }\n        List<String> filteredCipherSuites = new ArrayList<String>();\n        List<String> excludedCipherSuites = new ArrayList<String>();\n        List<Pattern> includes =\n            filters != null\n                ? compileRegexPatterns(filters.getInclude(), true, log)\n                : compileRegexPatterns(DEFAULT_CIPHERSUITE_FILTERS_INCLUDE, true, log);\n        List<Pattern> excludes =\n            filters != null\n                ? compileRegexPatterns(filters.getExclude(), false, log)\n                : compileRegexPatterns(DEFAULT_CIPHERSUITE_FILTERS_EXCLUDE, true, log);\n        for (int i = 0; i < supportedCipherSuites.length; i++) {\n            if (matchesOneOf(supportedCipherSuites[i], includes)\n                && !matchesOneOf(supportedCipherSuites[i], excludes)) {\n                LogUtils.log(log,\n                             Level.FINE,\n                             \"CIPHERSUITE_INCLUDED\",\n                             supportedCipherSuites[i]);\n                filteredCipherSuites.add(supportedCipherSuites[i]);\n            } else {\n                LogUtils.log(log,\n                             Level.FINE,\n                             \"CIPHERSUITE_EXCLUDED\",\n                             supportedCipherSuites[i]);\n                excludedCipherSuites.add(supportedCipherSuites[i]);\n            }\n        }\n        LogUtils.log(log,\n                     Level.FINE,\n                     \"CIPHERSUITES_FILTERED\",\n                     filteredCipherSuites);\n        LogUtils.log(log,\n                     Level.FINE,\n                     \"CIPHERSUITES_EXCLUDED\",\n                     excludedCipherSuites);\n        if (exclude) {\n            cipherSuites = getCiphersFromList(excludedCipherSuites, log, exclude);\n        } else {\n            cipherSuites = getCiphersFromList(filteredCipherSuites, log, exclude);\n        }\n        return cipherSuites;\n    }","id":46468,"modified_method":"public static String[] getCiphersuites(List<String> cipherSuitesList,\n                                           String[] supportedCipherSuites,\n                                           FiltersType filters,\n                                           Logger log, boolean exclude) {\n        \n        // First check the \"include\" case only. If we have defined explicit \"cipherSuite\"\n        // configuration, then just return these. Otherwise see if we have defined ciphersuites\n        // via a system property.\n        if (!exclude) {\n            if (!(cipherSuitesList == null || cipherSuitesList.isEmpty())) {\n                return getCiphersFromList(cipherSuitesList, log, exclude);\n            } else {\n                String[] cipherSuites = getSystemCiphersuites(log);\n                if (cipherSuites != null) {\n                    return cipherSuites;\n                }\n            }\n        }\n    \n        // Otherwise check the \"include/exclude\" cipherSuiteFilter configuration\n        \n        LogUtils.log(log, Level.FINE, \"CIPHERSUITES_NOT_SET\");\n        if (filters == null) {\n            LogUtils.log(log, Level.FINE, \"CIPHERSUITE_FILTERS_NOT_SET\");\n        }\n        List<String> filteredCipherSuites = new ArrayList<String>();\n        List<String> excludedCipherSuites = new ArrayList<String>();\n        List<Pattern> includes =\n            filters != null\n                ? compileRegexPatterns(filters.getInclude(), true, log)\n                : compileRegexPatterns(DEFAULT_CIPHERSUITE_FILTERS_INCLUDE, true, log);\n        List<Pattern> excludes =\n            filters != null\n                ? compileRegexPatterns(filters.getExclude(), false, log)\n                : compileRegexPatterns(DEFAULT_CIPHERSUITE_FILTERS_EXCLUDE, true, log);\n        for (int i = 0; i < supportedCipherSuites.length; i++) {\n            if (matchesOneOf(supportedCipherSuites[i], includes)\n                && !matchesOneOf(supportedCipherSuites[i], excludes)) {\n                LogUtils.log(log,\n                             Level.FINE,\n                             \"CIPHERSUITE_INCLUDED\",\n                             supportedCipherSuites[i]);\n                filteredCipherSuites.add(supportedCipherSuites[i]);\n            } else {\n                LogUtils.log(log,\n                             Level.FINE,\n                             \"CIPHERSUITE_EXCLUDED\",\n                             supportedCipherSuites[i]);\n                excludedCipherSuites.add(supportedCipherSuites[i]);\n            }\n        }\n        LogUtils.log(log,\n                     Level.FINE,\n                     \"CIPHERSUITES_FILTERED\",\n                     filteredCipherSuites);\n        LogUtils.log(log,\n                     Level.FINE,\n                     \"CIPHERSUITES_EXCLUDED\",\n                     excludedCipherSuites);\n        if (exclude) {\n            return getCiphersFromList(excludedCipherSuites, log, exclude);\n        } else {\n            return getCiphersFromList(filteredCipherSuites, log, exclude);\n        }\n    }","commit_id":"99b13f1da6998678d2af2e928e04ebad8e121fa3","url":"https://github.com/apache/cxf"},{"original_method":"@Override\n    public boolean associateIP(Network network, List<? extends PublicIpAddress> ipAddress, List<? extends VirtualRouter> routers) throws ResourceUnavailableException {\n        if (routers == null || routers.isEmpty()) {\n            s_logger.warn(\"Unable to associate ip addresses, virtual router doesn't exist in the network \" + network.getId());\n            throw new ResourceUnavailableException(\"Unable to assign ip addresses\", DataCenter.class, network.getDataCenterId());\n        }\n\n        boolean result = true;\n        for (VirtualRouter router : routers) {\n            if (router.getState() == State.Running) {\n                Commands cmds = new Commands(OnError.Continue);\n                // Have to resend all already associated ip addresses\n                createAssociateIPCommands(router, ipAddress, cmds, 0);\n\n                result = result && sendCommandsToRouter(router, cmds);\n            } else if (router.getState() != State.Stopped) {\n                s_logger.warn(\"Unable to associate ip addresses, virtual router is not in the right state \" + router.getState());\n                throw new ResourceUnavailableException(\"Unable to assign ip addresses, domR is not in right state \" + router.getState(), DataCenter.class, network.getDataCenterId());\n            }\n\n            //If rules fail to apply on one domR, no need to proceed with the rest\n            if (!result) {\n                throw new ResourceUnavailableException(\"Unable to apply firewall rules on router \", VirtualRouter.class, router.getId());\n            }\n        }\n        return result;\n    }","id":46469,"modified_method":"@Override\n    public boolean associateIP(Network network, List<? extends PublicIpAddress> ipAddress, List<? extends VirtualRouter> routers) throws ResourceUnavailableException {\n        if (routers == null || routers.isEmpty()) {\n            s_logger.warn(\"Unable to associate ip addresses, virtual router doesn't exist in the network \" + network.getId());\n            throw new ResourceUnavailableException(\"Unable to assign ip addresses\", DataCenter.class, network.getDataCenterId());\n        }\n\n        List<VirtualRouter> connectedRouters = new ArrayList<VirtualRouter>();\n        List<VirtualRouter> disconnectedRouters = new ArrayList<VirtualRouter>();\n        boolean result = true;\n        String msg = \"Unable to associate ip addresses on disconnected router \";\n        for (VirtualRouter router : routers) {\n            if (router.getState() == State.Running) {\n                Commands cmds = new Commands(OnError.Continue);\n                // Have to resend all already associated ip addresses\n                createAssociateIPCommands(router, ipAddress, cmds, 0);\n\n                try{\n                    result = sendCommandsToRouter(router, cmds);\n                    connectedRouters.add(router);\n                } catch (AgentUnavailableException e) {\n                    s_logger.warn(msg + router.getInstanceName(), e);\n                    disconnectedRouters.add(router);\n                }\n\n                //If rules fail to apply on one domR, no need to proceed with the rest\n                if (!result) {\n                    throw new ResourceUnavailableException(\"Unable to apply firewall rules on router \", VirtualRouter.class, router.getId());\n                }\n\n            } else if (router.getState() == State.Stopped || router.getState() == State.Stopping) {\n                s_logger.debug(\"Router \" + router.getInstanceName() + \" is in \" + router.getState() +\n                        \", so not sending associate ip address commands to the backend\");\n            } else {\n                s_logger.warn(\"Unable to associate ip addresses, virtual router is not in the right state \" + router.getState());\n                throw new ResourceUnavailableException(\"Unable to assign ip addresses, domR is not in right state \" + router.getState(), DataCenter.class, network.getDataCenterId());\n            }\n        }\n\n        if (!connectedRouters.isEmpty()) {\n            // These disconnected ones are out of sync now, stop them for synchronization\n            stopDisconnectedRouters(disconnectedRouters, true, msg);\n        } else if (!disconnectedRouters.isEmpty()) {\n            for (VirtualRouter router : disconnectedRouters) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(msg + router.getInstanceName() + \"(\" + router.getId() + \")\");\n                }\n            }\n            throw new ResourceUnavailableException(msg, VirtualRouter.class, disconnectedRouters.get(0).getId());\n        }\n        return result;\n    }","commit_id":"4e5ce5690a06d3fbd9e4e62278cbd860320f6d4f","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public boolean applyFirewallRules(Network network, List<? extends FirewallRule> rules, List<? extends VirtualRouter> routers) throws ResourceUnavailableException {\n        if (routers == null || routers.isEmpty()) {\n            s_logger.warn(\"Unable to apply firewall rules, virtual router doesn't exist in the network \" + network.getId());\n            throw new ResourceUnavailableException(\"Unable to apply firewall rules\", DataCenter.class, network.getDataCenterId());\n        }\n\n        boolean result = true;\n        for (VirtualRouter router : routers) {\n            if (router.getState() == State.Running) {\n                if (rules != null && !rules.isEmpty()) {\n                    if (rules.get(0).getPurpose() == Purpose.LoadBalancing) {\n                        // for load balancer we have to resend all lb rules for the network\n                        List<LoadBalancerVO> lbs = _loadBalancerDao.listByNetworkId(network.getId());\n                        List<LoadBalancingRule> lbRules = new ArrayList<LoadBalancingRule>();\n                        for (LoadBalancerVO lb : lbs) {\n                            List<LbDestination> dstList = _lbMgr.getExistingDestinations(lb.getId());\n                            LoadBalancingRule loadBalancing = new LoadBalancingRule(lb, dstList);\n                            lbRules.add(loadBalancing);\n                        }\n                        result = result && applyLBRules(router, lbRules);\n                    } else if (rules.get(0).getPurpose() == Purpose.PortForwarding) {\n                        result = result && applyPortForwardingRules(router, (List<PortForwardingRule>) rules);\n                    } else if (rules.get(0).getPurpose() == Purpose.StaticNat) {\n                        result = result && applyStaticNatRules(router, (List<StaticNatRule>) rules);\n                    } else if (rules.get(0).getPurpose() == Purpose.Firewall) {\n                        result = result && applyFirewallRules(router, (List<FirewallRule>) rules);\n                    }else {\n                        s_logger.warn(\"Unable to apply rules of purpose: \" + rules.get(0).getPurpose());\n                        result = false;\n                    }\n                }\n                \n                //If rules fail to apply on one domR, no need to proceed with the rest\n                if (!result) {\n                    throw new ResourceUnavailableException(\"Unable to apply firewall rules on router \", VirtualRouter.class, router.getId());\n                }\n            } else if (router.getState() == State.Stopped || router.getState() == State.Stopping) {\n                s_logger.debug(\"Router is in \" + router.getState() + \", so not sending apply firewall rules commands to the backend\");\n            } else {\n                s_logger.warn(\"Unable to apply firewall rules, virtual router is not in the right state \" + router.getState());\n                throw new ResourceUnavailableException(\"Unable to apply firewall rules, virtual router is not in the right state\", VirtualRouter.class, router.getId());\n            }\n        }\n        return result;\n    }","id":46470,"modified_method":"@Override\n    public boolean applyFirewallRules(Network network, List<? extends FirewallRule> rules, List<? extends VirtualRouter> routers) throws ResourceUnavailableException {\n        if (routers == null || routers.isEmpty()) {\n            s_logger.warn(\"Unable to apply firewall rules, virtual router doesn't exist in the network \" + network.getId());\n            throw new ResourceUnavailableException(\"Unable to apply firewall rules\", DataCenter.class, network.getDataCenterId());\n        }\n\n        List<VirtualRouter> connectedRouters = new ArrayList<VirtualRouter>();\n        List<VirtualRouter> disconnectedRouters = new ArrayList<VirtualRouter>();\n        String msg = \"Unable to apply firewall rules on disconnected router \";\n        boolean result = true;\n        for (VirtualRouter router : routers) {\n            if (router.getState() == State.Running) {\n                if (rules != null && !rules.isEmpty()) {\n                    try {\n                        if (rules.get(0).getPurpose() == Purpose.LoadBalancing) {\n                            // for load balancer we have to resend all lb rules for the network\n                            List<LoadBalancerVO> lbs = _loadBalancerDao.listByNetworkId(network.getId());\n                            List<LoadBalancingRule> lbRules = new ArrayList<LoadBalancingRule>();\n                            for (LoadBalancerVO lb : lbs) {\n                                List<LbDestination> dstList = _lbMgr.getExistingDestinations(lb.getId());\n                                LoadBalancingRule loadBalancing = new LoadBalancingRule(lb, dstList);\n                                lbRules.add(loadBalancing);\n                            }\n                            result = result && applyLBRules(router, lbRules);\n                        } else if (rules.get(0).getPurpose() == Purpose.PortForwarding) {\n                            result = result && applyPortForwardingRules(router, (List<PortForwardingRule>) rules);\n                        } else if (rules.get(0).getPurpose() == Purpose.StaticNat) {\n                            result = result && applyStaticNatRules(router, (List<StaticNatRule>) rules);\n                        } else if (rules.get(0).getPurpose() == Purpose.Firewall) {\n                            result = result && applyFirewallRules(router, (List<FirewallRule>) rules);\n                        } else {\n                            s_logger.warn(\"Unable to apply rules of purpose: \" + rules.get(0).getPurpose());\n                            result = false;\n                        }\n                        connectedRouters.add(router);\n                    } catch (AgentUnavailableException e) {\n                        s_logger.warn(msg + router.getInstanceName(), e);\n                        disconnectedRouters.add(router);\n                    }\n                }\n\n                //If rules fail to apply on one domR and not due to disconnection, no need to proceed with the rest\n                if (!result) {\n                    throw new ResourceUnavailableException(\"Unable to apply firewall rules on router \", VirtualRouter.class, router.getId());\n                }\n            } else if (router.getState() == State.Stopped || router.getState() == State.Stopping) {\n                s_logger.debug(\"Router \" + router.getInstanceName() + \" is in \" + router.getState() +\n                        \", so not sending apply firewall rules commands to the backend\");\n            } else {\n                s_logger.warn(\"Unable to apply firewall rules, virtual router is not in the right state \" + router.getState());\n                throw new ResourceUnavailableException(\"Unable to apply firewall rules, virtual router is not in the right state\", VirtualRouter.class, router.getId());\n            }\n        }\n        \n        if (!connectedRouters.isEmpty()) {\n            // These disconnected ones are out of sync now, stop them for synchronization\n            stopDisconnectedRouters(disconnectedRouters, true, msg);\n        } else if (!disconnectedRouters.isEmpty()) {\n            for (VirtualRouter router : disconnectedRouters) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(msg + router.getInstanceName() + \"(\" + router.getId() + \")\");\n                }\n            }\n            throw new ResourceUnavailableException(msg, VirtualRouter.class, disconnectedRouters.get(0).getId());\n        }\n        \n        return true;\n    }","commit_id":"4e5ce5690a06d3fbd9e4e62278cbd860320f6d4f","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public boolean applyStaticNats(Network network, List<? extends StaticNat> rules, List<? extends VirtualRouter> routers) throws ResourceUnavailableException {\n        if (routers == null || routers.isEmpty()) {\n            s_logger.warn(\"Unable to create static nat, virtual router doesn't exist in the network \" + network.getId());\n            throw new ResourceUnavailableException(\"Unable to create static nat\", DataCenter.class, network.getDataCenterId());\n        }\n\n        boolean result = true;\n        for (VirtualRouter router : routers) {\n            if (router.getState() == State.Running) {\n                s_logger.debug(\"Applying \" + rules.size() + \" static nat in network \" + network);\n                result = applyStaticNat(router, rules);\n                \n                //If rules fail to apply on one domR, no need to proceed with the rest\n                if (!result) {\n                    throw new ResourceUnavailableException(\"Unable to apply static nat on router \", VirtualRouter.class, router.getId());\n                }\n                \n            } else if (router.getState() == State.Stopped || router.getState() == State.Stopping) {\n                s_logger.debug(\"Router is in \" + router.getState() + \", so not sending apply firewall rules commands to the backend\");\n            } else {\n                s_logger.warn(\"Unable to apply static nat, virtual router is not in the right state \" + router.getState());\n                throw new ResourceUnavailableException(\"Unable to apply static nat, virtual router is not in the right state\", VirtualRouter.class, router.getId());\n            }\n        }\n        \n        return result;\n    }","id":46471,"modified_method":"@Override\n    public boolean applyStaticNats(Network network, List<? extends StaticNat> rules, List<? extends VirtualRouter> routers) throws ResourceUnavailableException {\n        if (routers == null || routers.isEmpty()) {\n            s_logger.warn(\"Unable to create static nat, virtual router doesn't exist in the network \" + network.getId());\n            throw new ResourceUnavailableException(\"Unable to create static nat\", DataCenter.class, network.getDataCenterId());\n        }\n\n        List<VirtualRouter> connectedRouters = new ArrayList<VirtualRouter>();\n        List<VirtualRouter> disconnectedRouters = new ArrayList<VirtualRouter>();\n        boolean result = true;\n        String msg = \"Unable to apply static nat on disconnected router \";\n        for (VirtualRouter router : routers) {\n            if (router.getState() == State.Running) {\n                s_logger.debug(\"Applying \" + rules.size() + \" static nat in network \" + network);\n                try {\n                    result = applyStaticNat(router, rules);\n                    connectedRouters.add(router);\n                } catch (AgentUnavailableException e) {\n                    s_logger.warn(msg + router.getInstanceName(), e);\n                    disconnectedRouters.add(router);\n                }\n\n                //If rules fail to apply on one domR and not due to disconnection, no need to proceed with the rest\n                if (!result) {\n                    throw new ResourceUnavailableException(\"Unable to apply static nat on router \", VirtualRouter.class, router.getId());\n                }\n\n            } else if (router.getState() == State.Stopped || router.getState() == State.Stopping) {\n                s_logger.debug(\"Router \" + router.getInstanceName() + \" is in \" + router.getState() + \", so not sending apply static nat commands to the backend\");\n            } else {\n                s_logger.warn(\"Unable to apply static nat, virtual router is not in the right state \" + router.getState());\n                throw new ResourceUnavailableException(\"Unable to apply static nat, virtual router is not in the right state\", VirtualRouter.class, router.getId());\n            }\n        }\n        \n        if (!connectedRouters.isEmpty()) {\n            // These disconnected ones are out of sync now, stop them for synchronization\n            stopDisconnectedRouters(disconnectedRouters, true, msg);\n        } else if (!disconnectedRouters.isEmpty()) {\n            for (VirtualRouter router : disconnectedRouters) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(msg + router.getInstanceName() + \"(\" + router.getId() + \")\");\n                }\n            }\n            throw new ResourceUnavailableException(msg, VirtualRouter.class, disconnectedRouters.get(0).getId());\n        }\n        \n        return true;\n    }","commit_id":"4e5ce5690a06d3fbd9e4e62278cbd860320f6d4f","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public List<VirtualRouter> addVirtualMachineIntoNetwork(Network network, NicProfile nic, VirtualMachineProfile<UserVm> profile, DeployDestination dest, ReservationContext context, List<DomainRouterVO> routers)\n            throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {\n\n        List<VirtualRouter> rets = new ArrayList<VirtualRouter>(routers.size());\n\n\n        boolean sendPasswordAndVmData = true;\n        boolean sendDnsDhcpData = true;\n        _userVmDao.loadDetails((UserVmVO) profile.getVirtualMachine());\n        \n        DataCenter dc = dest.getDataCenter();\n        String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(profile.getServiceOfferingId()).getDisplayText();\n        String zoneName = _dcDao.findById(network.getDataCenterId()).getName();\n        boolean isZoneBasic = (dc.getNetworkType() == NetworkType.Basic);\n\n        for (DomainRouterVO router : routers) {\n            if (router.getState() != State.Running) {\n                s_logger.warn(\"Unable to add virtual machine \" + profile.getVirtualMachine() + \" to the router \" + router + \" as the router is not in Running state\");\n                continue;\n            }\n            \n            //for basic zone: \n            //1) send vm data/password information only to the dhcp in the same pod\n            //2) send dhcp/dns information to all routers in the cloudstack only when _dnsBasicZoneUpdates is set to \"all\" value\n            Long podId = null;\n            if (isZoneBasic) {\n                podId = dest.getPod().getId();\n                if (router.getPodIdToDeployIn().longValue() != podId.longValue()) {\n                    sendPasswordAndVmData = false;\n                    if (_dnsBasicZoneUpdates.equalsIgnoreCase(\"pod\")) {\n                        sendDnsDhcpData = false;\n                    }\n                }\n            }\n\n            Commands cmds = new Commands(OnError.Stop);\n\n            String routerControlIpAddress = null;\n            List<NicVO> nics = _nicDao.listByVmId(router.getId());\n            for (NicVO n : nics) {\n                NetworkVO nc = _networkDao.findById(n.getNetworkId());\n                if (nc.getTrafficType() == TrafficType.Control) {\n                    routerControlIpAddress = n.getIp4Address();\n                }\n            }\n\n            if (sendDnsDhcpData) {\n                DhcpEntryCommand dhcpCommand = new DhcpEntryCommand(nic.getMacAddress(), nic.getIp4Address(), profile.getVirtualMachine().getHostName());\n                dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_IP, routerControlIpAddress);\n                dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, router.getGuestIpAddress());\n                dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n                \n                dhcpCommand.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dc.getNetworkType().toString());\n                \n                cmds.addCommand(\"dhcp\", dhcpCommand);\n            }\n    \n            if (sendPasswordAndVmData) {\n                String password = (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword);\n                String userData = profile.getVirtualMachine().getUserData();\n                String sshPublicKey = profile.getVirtualMachine().getDetail(\"SSH.PublicKey\");\n                \n                // password should be set only on default network element\n                if (password != null && network.isDefault()) {\n                    final String encodedPassword = PasswordGenerator.rot13(password);\n                    SavePasswordCommand cmd = new SavePasswordCommand(encodedPassword, nic.getIp4Address(), profile.getVirtualMachine().getHostName());\n                    cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, router.getPrivateIpAddress());\n                    cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, router.getGuestIpAddress());\n                    cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n                    cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dc.getNetworkType().toString());\n                    \n                    cmds.addCommand(\"password\", cmd);\n                }\n\n                \n\n                cmds.addCommand(\n                        \"vmdata\",\n                        generateVmDataCommand(router, nic.getIp4Address(), userData, serviceOffering, zoneName, nic.getIp4Address(), profile.getVirtualMachine().getHostName(), profile.getVirtualMachine()\n                                .getInstanceName(), profile.getId(), sshPublicKey));\n            }\n\n            if (cmds.size() > 0) {\n                boolean podLevelException = false;\n                //for user vm in Basic zone we should try to re-deploy vm in a diff pod if it fails to deploy in original pod; so throwing exception with Pod scope\n                if (isZoneBasic && podId != null && profile.getVirtualMachine().getType() == VirtualMachine.Type.User && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == GuestIpType.Direct) {\n                    podLevelException = true;\n                }\n                try {\n                    _agentMgr.send(router.getHostId(), cmds);\n                } catch (OperationTimedoutException e) {\n                    throw new AgentUnavailableException(\"Unable to reach the agent \", router.getHostId(), e);\n                }\n\n                Answer answer = cmds.getAnswer(\"dhcp\");\n                if (!answer.getResult()) {\n                    s_logger.error(\"Unable to set dhcp entry for \" + profile + \" on domR: \" + router.getHostName() + \" due to \" + answer.getDetails());\n                    if (podLevelException) {\n                        throw new ResourceUnavailableException(\"Unable to set dhcp entry for \" + profile + \" due to \" + answer.getDetails(), Pod.class, podId);\n                    }\n                    throw new ResourceUnavailableException(\"Unable to set dhcp entry for \" + profile + \" due to \" + answer.getDetails(), DataCenter.class, router.getDataCenterIdToDeployIn());\n                }\n\n                answer = cmds.getAnswer(\"password\");\n                if (answer != null && !answer.getResult()) {\n                    s_logger.error(\"Unable to set password for \" + profile + \" due to \" + answer.getDetails());\n                    if (podLevelException) {\n                        throw new ResourceUnavailableException(\"Unable to set password due to \" + answer.getDetails(), Pod.class, podId);\n                    }\n                    throw new ResourceUnavailableException(\"Unable to set password due to \" + answer.getDetails(), DataCenter.class, router.getDataCenterIdToDeployIn());\n                }\n\n                answer = cmds.getAnswer(\"vmdata\");\n                if (answer != null && !answer.getResult()) {\n                    s_logger.error(\"Unable to set VM data for \" + profile + \" due to \" + answer.getDetails());\n                    if (podLevelException) {\n                        throw new ResourceUnavailableException(\"Unable to set VM data due to \" + answer.getDetails(), Pod.class, podId);\n                    }\n                    throw new ResourceUnavailableException(\"Unable to set VM data due to \" + answer.getDetails(), DataCenter.class, router.getDataCenterIdToDeployIn());\n                }\n            }\n           \n            rets.add(router);\n        }\n        return rets;\n    }","id":46472,"modified_method":"@Override\n    public List<VirtualRouter> addVirtualMachineIntoNetwork(Network network, NicProfile nic, VirtualMachineProfile<UserVm> profile, DeployDestination dest, ReservationContext context, List<DomainRouterVO> routers)\n            throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {\n\n        List<VirtualRouter> rets = new ArrayList<VirtualRouter>(routers.size());\n\n\n        boolean sendPasswordAndVmData = true;\n        boolean sendDnsDhcpData = true;\n        _userVmDao.loadDetails((UserVmVO) profile.getVirtualMachine());\n        \n        DataCenter dc = dest.getDataCenter();\n        String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(profile.getServiceOfferingId()).getDisplayText();\n        String zoneName = _dcDao.findById(network.getDataCenterId()).getName();\n        boolean isZoneBasic = (dc.getNetworkType() == NetworkType.Basic);\n\n        List<VirtualRouter> connectedRouters = new ArrayList<VirtualRouter>();\n        List<VirtualRouter> disconnectedRouters = new ArrayList<VirtualRouter>();\n        for (DomainRouterVO router : routers) {\n            if (router.getState() != State.Running) {\n                s_logger.warn(\"Unable to add virtual machine \" + profile.getVirtualMachine() + \" to the router \" + router + \" as the router is not in Running state\");\n                continue;\n            }\n            \n            //for basic zone: \n            //1) send vm data/password information only to the dhcp in the same pod\n            //2) send dhcp/dns information to all routers in the cloudstack only when _dnsBasicZoneUpdates is set to \"all\" value\n            Long podId = null;\n            if (isZoneBasic) {\n                podId = dest.getPod().getId();\n                if (router.getPodIdToDeployIn().longValue() != podId.longValue()) {\n                    sendPasswordAndVmData = false;\n                    if (_dnsBasicZoneUpdates.equalsIgnoreCase(\"pod\")) {\n                        sendDnsDhcpData = false;\n                    }\n                }\n            }\n\n            Commands cmds = new Commands(OnError.Stop);\n\n            String routerControlIpAddress = null;\n            List<NicVO> nics = _nicDao.listByVmId(router.getId());\n            for (NicVO n : nics) {\n                NetworkVO nc = _networkDao.findById(n.getNetworkId());\n                if (nc.getTrafficType() == TrafficType.Control) {\n                    routerControlIpAddress = n.getIp4Address();\n                }\n            }\n\n            if (sendDnsDhcpData) {\n                DhcpEntryCommand dhcpCommand = new DhcpEntryCommand(nic.getMacAddress(), nic.getIp4Address(), profile.getVirtualMachine().getHostName());\n                dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_IP, routerControlIpAddress);\n                dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, router.getGuestIpAddress());\n                dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n                \n                dhcpCommand.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dc.getNetworkType().toString());\n                \n                cmds.addCommand(\"dhcp\", dhcpCommand);\n            }\n    \n            if (sendPasswordAndVmData) {\n                String password = (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword);\n                String userData = profile.getVirtualMachine().getUserData();\n                String sshPublicKey = profile.getVirtualMachine().getDetail(\"SSH.PublicKey\");\n                \n                // password should be set only on default network element\n                if (password != null && network.isDefault()) {\n                    final String encodedPassword = PasswordGenerator.rot13(password);\n                    SavePasswordCommand cmd = new SavePasswordCommand(encodedPassword, nic.getIp4Address(), profile.getVirtualMachine().getHostName());\n                    cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, router.getPrivateIpAddress());\n                    cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, router.getGuestIpAddress());\n                    cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n                    cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dc.getNetworkType().toString());\n                    \n                    cmds.addCommand(\"password\", cmd);\n                }\n\n                \n\n                cmds.addCommand(\n                        \"vmdata\",\n                        generateVmDataCommand(router, nic.getIp4Address(), userData, serviceOffering, zoneName, nic.getIp4Address(), profile.getVirtualMachine().getHostName(), profile.getVirtualMachine()\n                                .getInstanceName(), profile.getId(), sshPublicKey));\n            }\n\n            if (cmds.size() > 0) {\n                boolean podLevelException = false;\n                //for user vm in Basic zone we should try to re-deploy vm in a diff pod if it fails to deploy in original pod; so throwing exception with Pod scope\n                if (isZoneBasic && podId != null && profile.getVirtualMachine().getType() == VirtualMachine.Type.User && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == GuestIpType.Direct) {\n                    podLevelException = true;\n                }\n                try {\n                    _agentMgr.send(router.getHostId(), cmds);\n                } catch (AgentUnavailableException e){\n                    s_logger.warn(\"Unable to reach the agent \" + router.getHostId(), e);\n                    disconnectedRouters.add(router);\n                    continue;\n                } catch (OperationTimedoutException e) {\n                    s_logger.warn(\"Connection timeout on host \" + router.getHostId(), e);\n                    disconnectedRouters.add(router);\n                    continue;\n                }\n                connectedRouters.add(router);\n\n                Answer answer = cmds.getAnswer(\"dhcp\");\n                if (!answer.getResult()) {\n                    s_logger.error(\"Unable to set dhcp entry for \" + profile + \" on domR: \" + router.getHostName() + \" due to \" + answer.getDetails());\n                    if (podLevelException) {\n                        throw new ResourceUnavailableException(\"Unable to set dhcp entry for \" + profile + \" due to \" + answer.getDetails(), Pod.class, podId);\n                    }\n                    throw new ResourceUnavailableException(\"Unable to set dhcp entry for \" + profile + \" due to \" + answer.getDetails(), DataCenter.class, router.getDataCenterIdToDeployIn());\n                }\n\n                answer = cmds.getAnswer(\"password\");\n                if (answer != null && !answer.getResult()) {\n                    s_logger.error(\"Unable to set password for \" + profile + \" due to \" + answer.getDetails());\n                    if (podLevelException) {\n                        throw new ResourceUnavailableException(\"Unable to set password due to \" + answer.getDetails(), Pod.class, podId);\n                    }\n                    throw new ResourceUnavailableException(\"Unable to set password due to \" + answer.getDetails(), DataCenter.class, router.getDataCenterIdToDeployIn());\n                }\n\n                answer = cmds.getAnswer(\"vmdata\");\n                if (answer != null && !answer.getResult()) {\n                    s_logger.error(\"Unable to set VM data for \" + profile + \" due to \" + answer.getDetails());\n                    if (podLevelException) {\n                        throw new ResourceUnavailableException(\"Unable to set VM data due to \" + answer.getDetails(), Pod.class, podId);\n                    }\n                    throw new ResourceUnavailableException(\"Unable to set VM data due to \" + answer.getDetails(), DataCenter.class, router.getDataCenterIdToDeployIn());\n                }\n            }\n           \n            rets.add(router);\n        }\n        \n        String msg = \"Unable to add new VM into network on disconnected router \";\n        if (!connectedRouters.isEmpty()) {\n            // These disconnected ones are out of sync now, stop them for synchronization\n            stopDisconnectedRouters(disconnectedRouters, true, msg);\n        } else if (!disconnectedRouters.isEmpty()) {\n            for (VirtualRouter router : disconnectedRouters) {\n                if (s_logger.isDebugEnabled()) {\n                    s_logger.debug(msg + router.getInstanceName() + \"(\" + router.getId() + \")\");\n                }\n            }\n            throw new ResourceUnavailableException(msg, VirtualRouter.class, disconnectedRouters.get(0).getId());\n        }\n        \n        return rets;\n    }","commit_id":"4e5ce5690a06d3fbd9e4e62278cbd860320f6d4f","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public List<DomainRouterVO> deployVirtualRouter(Network guestNetwork, DeployDestination dest, Account owner, Map<Param, Object> params, boolean isRedundant) throws InsufficientCapacityException,\n            ConcurrentOperationException, ResourceUnavailableException {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Starting a router for \" + guestNetwork + \" in \" + dest);\n        }\n\n        assert guestNetwork.getState() == Network.State.Implemented || guestNetwork.getState() == Network.State.Setup || guestNetwork.getState() == Network.State.Implementing : \"Network is not yet fully implemented: \"\n                + guestNetwork;\n        assert guestNetwork.getTrafficType() == TrafficType.Guest;\n\n        List<DomainRouterVO> routers = findOrCreateVirtualRouters(guestNetwork, dest, owner, isRedundant);\n        List<DomainRouterVO> runningRouters = null;\n        \n        if (routers != null) {\n            runningRouters = new ArrayList<DomainRouterVO>();\n        }\n        \n        for (DomainRouterVO router : routers) {\n            boolean skip = false;\n            if (router.getHostId() != null) {\n                HostVO host = _hostDao.findById(router.getHostId());\n                if (host == null || host.getStatus() != Status.Up) {\n                    skip = true;\n                }\n            }\n            if (!skip) {\n                State state = router.getState();\n                if (state != State.Running) {\n                    router = startVirtualRouter(router, _accountService.getSystemUser(), _accountService.getSystemAccount(), params);\n                }\n                if (router != null) {\n                    runningRouters.add(router);\n                }\n            }\n        }\n        return runningRouters;\n    }","id":46473,"modified_method":"@Override\n    public List<DomainRouterVO> deployVirtualRouter(Network guestNetwork, DeployDestination dest, Account owner, Map<Param, Object> params, boolean isRedundant) throws InsufficientCapacityException,\n            ConcurrentOperationException, ResourceUnavailableException {\n        if (s_logger.isDebugEnabled()) {\n            s_logger.debug(\"Starting a router for \" + guestNetwork + \" in \" + dest);\n        }\n\n        assert guestNetwork.getState() == Network.State.Implemented || guestNetwork.getState() == Network.State.Setup || guestNetwork.getState() == Network.State.Implementing : \"Network is not yet fully implemented: \"\n                + guestNetwork;\n        assert guestNetwork.getTrafficType() == TrafficType.Guest;\n\n        List<DomainRouterVO> routers = findOrCreateVirtualRouters(guestNetwork, dest, owner, isRedundant);\n        List<DomainRouterVO> runningRouters = null;\n        \n        if (routers != null) {\n            runningRouters = new ArrayList<DomainRouterVO>();\n        }\n        \n        for (DomainRouterVO router : routers) {\n            boolean skip = false;\n            State state = router.getState();\n            if (router.getHostId() != null && state != State.Running) {\n                HostVO host = _hostDao.findById(router.getHostId());\n                if (host == null || host.getStatus() != Status.Up) {\n                    skip = true;\n                }\n            }\n            if (!skip) {\n                if (state != State.Running) {\n                    router = startVirtualRouter(router, _accountService.getSystemUser(), _accountService.getSystemAccount(), params);\n                }\n                if (router != null) {\n                    runningRouters.add(router);\n                }\n            }\n        }\n        return runningRouters;\n    }","commit_id":"4e5ce5690a06d3fbd9e4e62278cbd860320f6d4f","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public boolean deleteRemoteAccessVpn(Network network, RemoteAccessVpn vpn) throws ResourceUnavailableException {\n        /* FIXME VPN of redundant router */\n        DomainRouterVO router = getRouters(vpn.getAccountId(), network.getDataCenterId()).get(0);\n        if (router == null) {\n            s_logger.warn(\"Failed to delete remote access VPN: no router found for account and zone\");\n            throw new ResourceUnavailableException(\"Failed to delete remote access VPN\", DataCenter.class, network.getDataCenterId());\n        }\n        if (router.getState() != State.Running) {\n            s_logger.warn(\"Failed to delete remote access VPN: domR is not in right state \" + router.getState());\n            throw new ResourceUnavailableException(\"Failed to delete remote access VPN: domR is not in right state \" + router.getState(), DataCenter.class, network.getDataCenterId());\n        }\n        Commands cmds = new Commands(OnError.Continue);\n        IpAddress ip = _networkMgr.getIp(vpn.getServerAddressId());\n\n        RemoteAccessVpnCfgCommand removeVpnCmd = new RemoteAccessVpnCfgCommand(false, ip.getAddress().addr(), vpn.getLocalIp(), vpn.getIpRange(), vpn.getIpsecPresharedKey());\n        removeVpnCmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, router.getPrivateIpAddress());\n        removeVpnCmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n        cmds.addCommand(removeVpnCmd);\n\n        return sendCommandsToRouter(router, cmds);\n    }","id":46474,"modified_method":"@Override\n    public boolean deleteRemoteAccessVpn(Network network, RemoteAccessVpn vpn) throws ResourceUnavailableException {\n        List<DomainRouterVO> routers = getRouters(vpn.getAccountId(), network.getDataCenterId());\n        if (routers.size() == 0) {\n            s_logger.warn(\"Failed to delete remote access VPN: no router found for account and zone\");\n            throw new ResourceUnavailableException(\"Failed to delete remote access VPN\", DataCenter.class, network.getDataCenterId());\n        }\n        \n        boolean result = true;\n        for (DomainRouterVO router : routers) {\n            if (router.getState() != State.Running) {\n                s_logger.warn(\"Failed to delete remote access VPN: domR is not in right state \" + router.getState());\n                throw new ResourceUnavailableException(\"Failed to delete remote access VPN: domR is not in right state \" + router.getState(), DataCenter.class, network.getDataCenterId());\n            }\n            Commands cmds = new Commands(OnError.Continue);\n            IpAddress ip = _networkMgr.getIp(vpn.getServerAddressId());\n\n            RemoteAccessVpnCfgCommand removeVpnCmd = new RemoteAccessVpnCfgCommand(false, ip.getAddress().addr(), vpn.getLocalIp(), vpn.getIpRange(), vpn.getIpsecPresharedKey());\n            removeVpnCmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, router.getPrivateIpAddress());\n            removeVpnCmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            cmds.addCommand(removeVpnCmd);\n\n            result = result && sendCommandsToRouter(router, cmds);\n        }\n        return result;\n    }","commit_id":"1d26d736c96706492f62356c6a7f29c12f36a099","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public boolean startRemoteAccessVpn(Network network, RemoteAccessVpn vpn) throws ResourceUnavailableException {\n\n        /*FIXME: Not support redundant virtual router */\n        DomainRouterVO router = _routerDao.findByNetwork(network.getId()).get(0);\n        \n        if (router == null) {\n            s_logger.warn(\"Failed to start remote access VPN: no router found for account and zone\");\n            throw new ResourceUnavailableException(\"Failed to start remote access VPN: no router found for account and zone\", DataCenter.class, network.getDataCenterId());\n        }\n        if (router.getState() != State.Running) {\n            s_logger.warn(\"Failed to start remote access VPN: router not in right state \" + router.getState());\n            throw new ResourceUnavailableException(\"Failed to start remote access VPN: router not in right state \" + router.getState(), DataCenter.class, network.getDataCenterId());\n        }\n\n        Commands cmds = new Commands(OnError.Stop);\n\n        createApplyVpnCommands(vpn, router, cmds);\n\n        try {\n            _agentMgr.send(router.getHostId(), cmds);\n        } catch (OperationTimedoutException e) {\n            s_logger.debug(\"Failed to start remote access VPN: \", e);\n            throw new AgentUnavailableException(\"Unable to send commands to virtual router \", router.getHostId(), e);\n        }\n        Answer answer = cmds.getAnswer(\"users\");\n        if (!answer.getResult()) {\n            s_logger.error(\"Unable to start vpn: unable add users to vpn in zone \" + router.getDataCenterIdToDeployIn() + \" for account \" + vpn.getAccountId() + \" on domR: \" + router.getInstanceName()\n                    + \" due to \" + answer.getDetails());\n            throw new ResourceUnavailableException(\"Unable to start vpn: Unable to add users to vpn in zone \" + router.getDataCenterIdToDeployIn() + \" for account \" + vpn.getAccountId() + \" on domR: \"\n                    + router.getInstanceName() + \" due to \" + answer.getDetails(), DataCenter.class, router.getDataCenterIdToDeployIn());\n        }\n        answer = cmds.getAnswer(\"startVpn\");\n        if (!answer.getResult()) {\n            s_logger.error(\"Unable to start vpn in zone \" + router.getDataCenterIdToDeployIn() + \" for account \" + vpn.getAccountId() + \" on domR: \" + router.getInstanceName() + \" due to \"\n                    + answer.getDetails());\n            throw new ResourceUnavailableException(\"Unable to start vpn in zone \" + router.getDataCenterIdToDeployIn() + \" for account \" + vpn.getAccountId() + \" on domR: \" + router.getInstanceName()\n                    + \" due to \" + answer.getDetails(), DataCenter.class, router.getDataCenterIdToDeployIn());\n        }\n        return true;\n    }","id":46475,"modified_method":"@Override\n    public boolean startRemoteAccessVpn(Network network, RemoteAccessVpn vpn) throws ResourceUnavailableException {\n        List<DomainRouterVO> routers = _routerDao.findByNetwork(network.getId());\n        if (routers.size() == 0) {\n            s_logger.warn(\"Failed to start remote access VPN: no router found for account and zone\");\n            throw new ResourceUnavailableException(\"Failed to start remote access VPN: no router found for account and zone\", DataCenter.class, network.getDataCenterId());\n        }\n        \n        for (DomainRouterVO router : routers) {\n            if (router.getState() != State.Running) {\n                s_logger.warn(\"Failed to start remote access VPN: router not in right state \" + router.getState());\n                throw new ResourceUnavailableException(\"Failed to start remote access VPN: router not in right state \" + router.getState(), DataCenter.class, network.getDataCenterId());\n            }\n\n            Commands cmds = new Commands(OnError.Stop);\n            createApplyVpnCommands(vpn, router, cmds);\n            \n            try {\n                _agentMgr.send(router.getHostId(), cmds);\n            } catch (OperationTimedoutException e) {\n                s_logger.debug(\"Failed to start remote access VPN: \", e);\n                throw new AgentUnavailableException(\"Unable to send commands to virtual router \", router.getHostId(), e);\n            }\n            Answer answer = cmds.getAnswer(\"users\");\n            if (!answer.getResult()) {\n                s_logger.error(\"Unable to start vpn: unable add users to vpn in zone \" + router.getDataCenterIdToDeployIn() + \" for account \" + vpn.getAccountId() + \" on domR: \" + router.getInstanceName()\n                        + \" due to \" + answer.getDetails());\n                throw new ResourceUnavailableException(\"Unable to start vpn: Unable to add users to vpn in zone \" + router.getDataCenterIdToDeployIn() + \" for account \" + vpn.getAccountId() + \" on domR: \"\n                        + router.getInstanceName() + \" due to \" + answer.getDetails(), DataCenter.class, router.getDataCenterIdToDeployIn());\n            }\n            answer = cmds.getAnswer(\"startVpn\");\n            if (!answer.getResult()) {\n                s_logger.error(\"Unable to start vpn in zone \" + router.getDataCenterIdToDeployIn() + \" for account \" + vpn.getAccountId() + \" on domR: \" + router.getInstanceName() + \" due to \"\n                        + answer.getDetails());\n                throw new ResourceUnavailableException(\"Unable to start vpn in zone \" + router.getDataCenterIdToDeployIn() + \" for account \" + vpn.getAccountId() + \" on domR: \" + router.getInstanceName()\n                        + \" due to \" + answer.getDetails(), DataCenter.class, router.getDataCenterIdToDeployIn());\n            }\n        }\n        return true;\n    }","commit_id":"1d26d736c96706492f62356c6a7f29c12f36a099","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public String[] applyVpnUsers(Network network, List<? extends VpnUser> users) throws ResourceUnavailableException {\n        /*FIXME: VPN for redundant virtual routers */\n        DomainRouterVO router = _routerDao.findByNetwork(network.getId()).get(0);\n        if (router == null) {\n            s_logger.warn(\"Failed to add/remove VPN users: no router found for account and zone\");\n            throw new ResourceUnavailableException(\"Unable to assign ip addresses, domR doesn't exist for network \" + network.getId(), DataCenter.class, network.getDataCenterId());\n        }\n        if (router.getState() != State.Running) {\n            s_logger.warn(\"Failed to add/remove VPN users: router not in running state\");\n            throw new ResourceUnavailableException(\"Unable to assign ip addresses, domR is not in right state \" + router.getState(), DataCenter.class, network.getDataCenterId());\n        }\n\n        Commands cmds = new Commands(OnError.Continue);\n        List<VpnUser> addUsers = new ArrayList<VpnUser>();\n        List<VpnUser> removeUsers = new ArrayList<VpnUser>();\n        for (VpnUser user : users) {\n            if (user.getState() == VpnUser.State.Add || user.getState() == VpnUser.State.Active) {\n                addUsers.add(user);\n            } else if (user.getState() == VpnUser.State.Revoke) {\n                removeUsers.add(user);\n            }\n        }\n\n        VpnUsersCfgCommand cmd = new VpnUsersCfgCommand(addUsers, removeUsers);\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, router.getPrivateIpAddress());\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n        cmds.addCommand(cmd);\n\n        // Currently we receive just one answer from the agent. In the future we have to parse individual answers and set\n        // results accordingly\n        boolean agentResult = sendCommandsToRouter(router, cmds);\n        ;\n        String[] result = new String[users.size()];\n        for (int i = 0; i < result.length; i++) {\n            if (agentResult) {\n                result[i] = null;\n            } else {\n                result[i] = String.valueOf(agentResult);\n            }\n        }\n\n        return result;\n    }","id":46476,"modified_method":"@Override\n    public String[] applyVpnUsers(Network network, List<? extends VpnUser> users) throws ResourceUnavailableException {\n        List<DomainRouterVO> routers = _routerDao.findByNetwork(network.getId());\n        if (routers.size() == 0) {\n            s_logger.warn(\"Failed to add/remove VPN users: no router found for account and zone\");\n            throw new ResourceUnavailableException(\"Unable to assign ip addresses, domR doesn't exist for network \" + network.getId(), DataCenter.class, network.getDataCenterId());\n        }\n        boolean agentResults = true;\n        for (DomainRouterVO router : routers) {\n            if (router.getState() != State.Running) {\n                s_logger.warn(\"Failed to add/remove VPN users: router not in running state\");\n                throw new ResourceUnavailableException(\"Unable to assign ip addresses, domR is not in right state \" + router.getState(), DataCenter.class, network.getDataCenterId());\n            }\n\n            Commands cmds = new Commands(OnError.Continue);\n            List<VpnUser> addUsers = new ArrayList<VpnUser>();\n            List<VpnUser> removeUsers = new ArrayList<VpnUser>();\n            for (VpnUser user : users) {\n                if (user.getState() == VpnUser.State.Add || user.getState() == VpnUser.State.Active) {\n                    addUsers.add(user);\n                } else if (user.getState() == VpnUser.State.Revoke) {\n                    removeUsers.add(user);\n                }\n            }\n\n            VpnUsersCfgCommand cmd = new VpnUsersCfgCommand(addUsers, removeUsers);\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, router.getPrivateIpAddress());\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            cmds.addCommand(cmd);\n\n            // Currently we receive just one answer from the agent. In the future we have to parse individual answers and set\n            // results accordingly\n            boolean agentResult = sendCommandsToRouter(router, cmds);\n            agentResults = agentResults && agentResult;\n        }\n        \n        String[] result = new String[users.size()];\n        for (int i = 0; i < result.length; i++) {\n            if (agentResults) {\n                result[i] = null;\n            } else {\n                result[i] = String.valueOf(agentResults);\n            }\n        }\n\n        return result;\n    }","commit_id":"1d26d736c96706492f62356c6a7f29c12f36a099","url":"https://github.com/apache/cloudstack"},{"original_method":"/**\n     * Validate a Token using the given TokenValidatorParameters.\n     */\n    public TokenValidatorResponse validateToken(TokenValidatorParameters tokenParameters) {\n        LOG.fine(\"Validating SAML Token\");\n        TokenRequirements tokenRequirements = tokenParameters.getTokenRequirements();\n        ReceivedToken validateTarget = tokenRequirements.getValidateTarget();\n        STSPropertiesMBean stsProperties = tokenParameters.getStsProperties();\n        Crypto sigCrypto = stsProperties.getSignatureCrypto();\n        CallbackHandler callbackHandler = stsProperties.getCallbackHandler();\n        \n        TokenValidatorResponse response = new TokenValidatorResponse();\n        response.setValid(false);\n        \n        if (validateTarget == null || !validateTarget.isDOMElement()) {\n            return response;\n        }\n        \n        try {\n            Element validateTargetElement = (Element)validateTarget.getToken();\n            AssertionWrapper assertion = new AssertionWrapper(validateTargetElement);\n            \n            SecurityToken secToken = null;\n            if (tokenParameters.getTokenStore() != null) {\n                int hash = 0;\n                byte[] signatureValue = assertion.getSignatureValue();\n                if (signatureValue != null && signatureValue.length > 0) {\n                    hash = Arrays.hashCode(signatureValue);\n                    secToken = tokenParameters.getTokenStore().getTokenByAssociatedHash(hash);\n                }\n            }\n            if (secToken == null) {\n                if (!assertion.isSigned()) {\n                    LOG.log(Level.WARNING, \"The received assertion is not signed, and therefore not trusted\");\n                    return response;\n                }\n                \n                RequestData requestData = new RequestData();\n                requestData.setSigCrypto(sigCrypto);\n                WSSConfig wssConfig = WSSConfig.getNewInstance();\n                requestData.setWssConfig(wssConfig);\n                requestData.setCallbackHandler(callbackHandler);\n                \n                // Verify the signature\n                assertion.verifySignature(\n                    requestData, new WSDocInfo(validateTargetElement.getOwnerDocument())\n                );\n\n                // Now verify trust on the signature\n                Credential trustCredential = new Credential();\n                SAMLKeyInfo samlKeyInfo = assertion.getSignatureKeyInfo();\n                trustCredential.setPublicKey(samlKeyInfo.getPublicKey());\n                trustCredential.setCertificates(samlKeyInfo.getCerts());\n    \n                validator.validate(trustCredential, requestData);\n\n                // Finally check that subject DN of the signing certificate matches a known constraint\n                X509Certificate cert = null;\n                if (trustCredential.getCertificates() != null) {\n                    cert = trustCredential.getCertificates()[0];\n                }\n                \n                if (!certConstraints.matches(cert)) {\n                    return response;\n                }\n            }\n            \n            // Get the realm of the SAML token\n            String tokenRealm = null;\n            if (samlRealmCodec != null) {\n                tokenRealm = samlRealmCodec.getRealmFromToken(assertion);\n                // verify the realm against the cached token\n                if (secToken != null) {\n                    Properties props = secToken.getProperties();\n                    if (props != null) {\n                        String cachedRealm = props.getProperty(STSConstants.TOKEN_REALM);\n                        if (!tokenRealm.equals(cachedRealm)) {\n                            return response;\n                        }\n                    }\n                }\n            }\n            \n            response.setValid(true);\n            SAMLTokenPrincipal samlPrincipal = new SAMLTokenPrincipal(assertion);\n            response.setPrincipal(samlPrincipal);\n            response.setTokenRealm(tokenRealm);\n        } catch (WSSecurityException ex) {\n            LOG.log(Level.WARNING, \"\", ex);\n        }\n\n        return response;\n    }","id":46477,"modified_method":"/**\n     * Validate a Token using the given TokenValidatorParameters.\n     */\n    public TokenValidatorResponse validateToken(TokenValidatorParameters tokenParameters) {\n        LOG.fine(\"Validating SAML Token\");\n        TokenRequirements tokenRequirements = tokenParameters.getTokenRequirements();\n        ReceivedToken validateTarget = tokenRequirements.getValidateTarget();\n        STSPropertiesMBean stsProperties = tokenParameters.getStsProperties();\n        Crypto sigCrypto = stsProperties.getSignatureCrypto();\n        CallbackHandler callbackHandler = stsProperties.getCallbackHandler();\n        \n        TokenValidatorResponse response = new TokenValidatorResponse();\n        response.setValid(false);\n        \n        if (validateTarget == null || !validateTarget.isDOMElement()) {\n            return response;\n        }\n        \n        try {\n            Element validateTargetElement = (Element)validateTarget.getToken();\n            AssertionWrapper assertion = new AssertionWrapper(validateTargetElement);\n            \n            SecurityToken secToken = null;\n            if (tokenParameters.getTokenStore() != null) {\n                int hash = 0;\n                byte[] signatureValue = assertion.getSignatureValue();\n                if (signatureValue != null && signatureValue.length > 0) {\n                    hash = Arrays.hashCode(signatureValue);\n                    secToken = tokenParameters.getTokenStore().getTokenByAssociatedHash(hash);\n                }\n            }\n            if (secToken == null) {\n                if (!assertion.isSigned()) {\n                    LOG.log(Level.WARNING, \"The received assertion is not signed, and therefore not trusted\");\n                    return response;\n                }\n                \n                RequestData requestData = new RequestData();\n                requestData.setSigCrypto(sigCrypto);\n                WSSConfig wssConfig = WSSConfig.getNewInstance();\n                requestData.setWssConfig(wssConfig);\n                requestData.setCallbackHandler(callbackHandler);\n                \n                // Verify the signature\n                assertion.verifySignature(\n                    requestData, new WSDocInfo(validateTargetElement.getOwnerDocument())\n                );\n\n                // Now verify trust on the signature\n                Credential trustCredential = new Credential();\n                SAMLKeyInfo samlKeyInfo = assertion.getSignatureKeyInfo();\n                trustCredential.setPublicKey(samlKeyInfo.getPublicKey());\n                trustCredential.setCertificates(samlKeyInfo.getCerts());\n    \n                validator.validate(trustCredential, requestData);\n\n                // Finally check that subject DN of the signing certificate matches a known constraint\n                X509Certificate cert = null;\n                if (trustCredential.getCertificates() != null) {\n                    cert = trustCredential.getCertificates()[0];\n                }\n                \n                if (!certConstraints.matches(cert)) {\n                    return response;\n                }\n            }\n            \n            // Get the realm of the SAML token\n            String tokenRealm = null;\n            if (samlRealmCodec != null) {\n                tokenRealm = samlRealmCodec.getRealmFromToken(assertion);\n                // verify the realm against the cached token\n                if (secToken != null) {\n                    Properties props = secToken.getProperties();\n                    if (props != null) {\n                        String cachedRealm = props.getProperty(STSConstants.TOKEN_REALM);\n                        if (!tokenRealm.equals(cachedRealm)) {\n                            return response;\n                        }\n                    }\n                }\n            }\n            \n            SAMLTokenPrincipal samlPrincipal = new SAMLTokenPrincipal(assertion);\n            response.setPrincipal(samlPrincipal);\n            response.setTokenRealm(tokenRealm);\n            response.setValid(true);\n        } catch (WSSecurityException ex) {\n            LOG.log(Level.WARNING, \"\", ex);\n        }\n\n        return response;\n    }","commit_id":"7dc4aad55576567715f9d465bdf93234cf1f488f","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * Validate a Token using the given TokenValidatorParameters.\n     */\n    public TokenValidatorResponse validateToken(TokenValidatorParameters tokenParameters) {\n        LOG.fine(\"Validating SecurityContextToken\");\n        \n        if (tokenParameters.getTokenStore() == null) {\n            LOG.log(Level.FINE, \"A cache must be configured to use the SCTValidator\");\n            TokenValidatorResponse response = new TokenValidatorResponse();\n            response.setValid(false);\n            return response;\n        }\n        \n        TokenRequirements tokenRequirements = tokenParameters.getTokenRequirements();\n        ReceivedToken validateTarget = tokenRequirements.getValidateTarget();\n\n        TokenValidatorResponse response = new TokenValidatorResponse();\n        response.setValid(false);\n        \n        if (validateTarget != null && validateTarget.isDOMElement()) {\n            try {\n                Element validateTargetElement = (Element)validateTarget.getToken();\n                SecurityContextToken sct = new SecurityContextToken(validateTargetElement);\n                String identifier = sct.getIdentifier();\n                SecurityToken token = tokenParameters.getTokenStore().getToken(identifier);\n                if (token == null) {\n                    LOG.fine(\"Identifier: \" + identifier + \" is not found in the cache\");\n                    return response;\n                }\n                byte[] secret = (byte[])token.getSecret();\n                response.setValid(true);\n                Map<String, Object> properties = new HashMap<String, Object>();\n                properties.put(SCT_VALIDATOR_SECRET, secret);\n                response.setAdditionalProperties(properties);\n                response.setPrincipal(token.getPrincipal());\n            } catch (WSSecurityException ex) {\n                LOG.log(Level.WARNING, \"\", ex);\n            }\n        }\n        return response;\n    }","id":46478,"modified_method":"/**\n     * Validate a Token using the given TokenValidatorParameters.\n     */\n    public TokenValidatorResponse validateToken(TokenValidatorParameters tokenParameters) {\n        LOG.fine(\"Validating SecurityContextToken\");\n        \n        if (tokenParameters.getTokenStore() == null) {\n            LOG.log(Level.FINE, \"A cache must be configured to use the SCTValidator\");\n            TokenValidatorResponse response = new TokenValidatorResponse();\n            response.setValid(false);\n            return response;\n        }\n        \n        TokenRequirements tokenRequirements = tokenParameters.getTokenRequirements();\n        ReceivedToken validateTarget = tokenRequirements.getValidateTarget();\n\n        TokenValidatorResponse response = new TokenValidatorResponse();\n        response.setValid(false);\n        \n        if (validateTarget != null && validateTarget.isDOMElement()) {\n            try {\n                Element validateTargetElement = (Element)validateTarget.getToken();\n                SecurityContextToken sct = new SecurityContextToken(validateTargetElement);\n                String identifier = sct.getIdentifier();\n                SecurityToken token = tokenParameters.getTokenStore().getToken(identifier);\n                if (token == null) {\n                    LOG.fine(\"Identifier: \" + identifier + \" is not found in the cache\");\n                    return response;\n                }\n                byte[] secret = (byte[])token.getSecret();\n                Map<String, Object> properties = new HashMap<String, Object>();\n                properties.put(SCT_VALIDATOR_SECRET, secret);\n                response.setAdditionalProperties(properties);\n                response.setPrincipal(token.getPrincipal());\n                \n                Properties props = token.getProperties();\n                if (props != null) {\n                    String realm = props.getProperty(STSConstants.TOKEN_REALM);\n                    response.setTokenRealm(realm);\n                }\n                response.setValid(true);\n            } catch (WSSecurityException ex) {\n                LOG.log(Level.WARNING, \"\", ex);\n            }\n        }\n        return response;\n    }","commit_id":"7dc4aad55576567715f9d465bdf93234cf1f488f","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * Retrieve the size of the list.\n     * This method also needs to be externaly synchronized to\n     * ensure correct publication of changes.\n     * \n     * @return the size of the list.\n     * */\n    public int getSize() {\n        return size;\n    }","id":46479,"modified_method":"/** Initialize empty queue. */\n    public FastRemovalDequeue(int maxSize) {\n        if (maxSize <=1 ) {\n            maxSize = 2;\n        }\n        this.maxSize = maxSize;\n        first = null;\n        last = null;\n        size = 0;\n    }","commit_id":"3b158a6459bc6024edbda70cf5e475e4668ff042","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n     * Removes any element of the list and returns its content.\n     **/\n    public void remove(final Entry element) {\n        if (!element.getValid()) {\n            return;\n        }\n        Entry next = element.getNext();\n        Entry prev = element.getPrevious();\n        if (next != null) {\n            next.setPrevious(prev);\n        } else {\n            last = prev;\n        }\n        if (prev != null) {\n            prev.setNext(next);\n        } else {\n            first = next;\n        }\n        size--;\n    }","id":46480,"modified_method":"/**\n     * Removes any element of the list and returns its content.\n     **/\n    public synchronized void remove(final Entry element) {\n        if (!element.getValid()) {\n            return;\n        }\n        Entry next = element.getNext();\n        Entry prev = element.getPrevious();\n        if (next != null) {\n            next.setPrevious(prev);\n        } else {\n            last = prev;\n        }\n        if (prev != null) {\n            prev.setNext(next);\n        } else {\n            first = next;\n        }\n        size--;\n        element.setValid(false);\n    }","commit_id":"3b158a6459bc6024edbda70cf5e475e4668ff042","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n     * Removes the last element of the list and returns its content.\n     * \n     * @return the content of the last element of the list.\n     **/\n    public T pop() {\n        T content = null;\n        if (last != null) {\n            content = last.getContent();\n            last.setValid(false);\n            last = last.getPrevious();\n            if (last != null) {\n                last.setNext(null);\n            }\n            size--;\n        }\n        return content;\n    }","id":46481,"modified_method":"/**\n     * Removes the last element of the list and returns its content.\n     * \n     * @return the content of the last element of the list.\n     **/\n    public synchronized T pop() {\n        T content = null;\n        if (last != null) {\n            Entry element = last;\n            last = last.getPrevious();\n            content = element.getContent();\n            if (last != null) {\n                last.setNext(null);\n            }\n            size--;\n            element.setValid(false);\n        }\n        return content;\n    }","commit_id":"3b158a6459bc6024edbda70cf5e475e4668ff042","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n     * Adds an object to the start of the list and returns the entry created for\n     * said object. The entry can later be reused for moving the entry.\n     * \n     * @param object the object to prepend to the start of the list.\n     * @return an entry for use when the object should be moved.\n     * */\n    public Entry push(final T object) {\n        Entry entry = new Entry(object);\n        if (first == null) {\n            first = last = entry;\n        } else {\n            first.setPrevious(entry);\n            entry.setNext(first);\n            first = entry;\n        }\n        size++;\n\n        return entry;\n    }","id":46482,"modified_method":"/**\n     * Adds an object to the start of the list and returns the entry created for\n     * said object. The entry can later be reused for moving the entry.\n     * \n     * @param object the object to prepend to the start of the list.\n     * @return an entry for use when the object should be moved.\n     * */\n    public synchronized Entry push(final T object) {\n        Entry entry = new Entry(object);\n        if (size >= maxSize) {\n            entry.setReplaced(pop());\n        }\n        if (first == null) {\n            first = last = entry;\n        } else {\n            first.setPrevious(entry);\n            entry.setNext(first);\n            first = entry;\n        }\n        size++;\n\n        return entry;\n    }","commit_id":"3b158a6459bc6024edbda70cf5e475e4668ff042","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n     * Removes the first element of the list and returns its content.\n     * \n     * @return the content of the first element of the list.\n     **/\n    public T unpush() {\n        T content = null;\n        if (first != null) {\n            content = first.getContent();\n            first.setValid(false);\n            first = first.getNext();\n            if (first != null) {\n                first.setPrevious(null);\n            }\n            size--;\n        }\n        return content;\n    }","id":46483,"modified_method":"/**\n     * Removes the first element of the list and returns its content.\n     * \n     * @return the content of the first element of the list.\n     **/\n    public synchronized T unpush() {\n        T content = null;\n        if (first != null) {\n            Entry element = first;\n            first = first.getNext();\n            content = element.getContent();\n            if (first != null) {\n                first.setPrevious(null);\n            }\n            size--;\n            element.setValid(false);\n        }\n        return content;\n    }","commit_id":"3b158a6459bc6024edbda70cf5e475e4668ff042","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n     * Adds an object to the end of the list and returns the entry created for\n     * said object. The entry can later be reused for moving the entry.\n     * \n     * @param object the object to append to the end of the list.\n     * @return an entry for use when the object should be moved.\n     * */\n    public Entry unpop(final T object) {\n        Entry entry = new Entry(object);\n        if (first == null) {\n            first = last = entry;\n        } else {\n            last.setNext(entry);\n            entry.setPrevious(last);\n            last = entry;\n        }\n        size++;\n\n        return entry;\n    }","id":46484,"modified_method":"/**\n     * Adds an object to the end of the list and returns the entry created for\n     * said object. The entry can later be reused for moving the entry.\n     * \n     * @param object the object to append to the end of the list.\n     * @return an entry for use when the object should be moved.\n     * */\n    public synchronized Entry unpop(final T object) {\n        Entry entry = new Entry(object);\n        if (size >= maxSize) {\n            entry.setReplaced(unpush());\n        }\n        if (first == null) {\n            first = last = entry;\n        } else {\n            last.setNext(entry);\n            entry.setPrevious(last);\n            last = entry;\n        }\n        size++;\n\n        return entry;\n    }","commit_id":"3b158a6459bc6024edbda70cf5e475e4668ff042","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n     * Create a JspRuntimeContext for a web application context.\n     *\n     * Loads in any previously generated dependencies from file.\n     *\n     * @param context ServletContext for web application\n     */\n    public JspRuntimeContext(ServletContext context, Options options) {\n\n        this.context = context;\n        this.options = options;\n\n        // Get the parent class loader\n        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n        if (loader == null) {\n            loader = this.getClass().getClassLoader();\n        }\n\n        if (log.isDebugEnabled()) {\n            if (loader != null) {\n                log.debug(Localizer.getMessage(\"jsp.message.parent_class_loader_is\",\n                                               loader.toString()));\n            } else {\n                log.debug(Localizer.getMessage(\"jsp.message.parent_class_loader_is\",\n                                               \"<none>\"));\n            }\n        }\n\n        parentClassLoader =  loader;\n        classpath = initClassPath();\n\n        if (context instanceof org.apache.jasper.servlet.JspCServletContext) {\n            codeSource = null;\n            permissionCollection = null;\n            return;\n        }\n\n        if (Constants.IS_SECURITY_ENABLED) {\n            SecurityHolder holder = initSecurity();\n            codeSource = holder.cs;\n            permissionCollection = holder.pc;\n        } else {\n            codeSource = null;\n            permissionCollection = null;\n        }\n\n        // If this web application context is running from a\n        // directory, start the background compilation thread\n        String appBase = context.getRealPath(\"/\");         \n        if (!options.getDevelopment()\n                && appBase != null\n                && options.getCheckInterval() > 0) {\n            lastCheck = System.currentTimeMillis();\n        }                                            \n    }","id":46485,"modified_method":"/**\n     * Create a JspRuntimeContext for a web application context.\n     *\n     * Loads in any previously generated dependencies from file.\n     *\n     * @param context ServletContext for web application\n     */\n    public JspRuntimeContext(ServletContext context, Options options) {\n\n        this.context = context;\n        this.options = options;\n\n        // Get the parent class loader\n        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n        if (loader == null) {\n            loader = this.getClass().getClassLoader();\n        }\n\n        if (log.isDebugEnabled()) {\n            if (loader != null) {\n                log.debug(Localizer.getMessage(\"jsp.message.parent_class_loader_is\",\n                                               loader.toString()));\n            } else {\n                log.debug(Localizer.getMessage(\"jsp.message.parent_class_loader_is\",\n                                               \"<none>\"));\n            }\n        }\n\n        parentClassLoader =  loader;\n        classpath = initClassPath();\n\n        if (context instanceof org.apache.jasper.servlet.JspCServletContext) {\n            codeSource = null;\n            permissionCollection = null;\n            return;\n        }\n\n        if (Constants.IS_SECURITY_ENABLED) {\n            SecurityHolder holder = initSecurity();\n            codeSource = holder.cs;\n            permissionCollection = holder.pc;\n        } else {\n            codeSource = null;\n            permissionCollection = null;\n        }\n\n        // If this web application context is running from a\n        // directory, start the background compilation thread\n        String appBase = context.getRealPath(\"/\");         \n        if (!options.getDevelopment()\n                && appBase != null\n                && options.getCheckInterval() > 0) {\n            lastCheck = System.currentTimeMillis();\n        }                                            \n\n        if (options.getMaxLoadedJsps() > 0) {\n            jspQueue = new FastRemovalDequeue<JspServletWrapper>(options.getMaxLoadedJsps());\n        }\n\n    }","commit_id":"3b158a6459bc6024edbda70cf5e475e4668ff042","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n     * Checks whether there is a jsp to unload, if one is found, it is destroyed. \n     * */\n    public boolean unloadJsp() {\n        JspServletWrapper jsw = null;\n        synchronized(jspQueue) {\n            if(jspQueue.getSize() > options.getMaxLoadedJsps()) {\n                jsw = jspQueue.pop();\n            }\n        }\n        if (jsw != null) {\n            removeWrapper(jsw.getJspUri());\n            synchronized(jsw) {\n                jsw.destroy();\n                return true;\n            }\n        }\n        return false;\n    }","id":46486,"modified_method":"/**\n     * Checks whether there is a jsp to unload, if one is found, it is destroyed. \n     * */\n    public boolean unloadJsp() {\n        JspServletWrapper jsw = null;\n        synchronized(jspQueue) {\n            if(jspQueue.getSize() > options.getMaxLoadedJsps()) {\n                jsw = jspQueue.pop();\n            }\n        }\n        if (jsw != null) {\n            unloadJspServletWrapper(jsw);\n            return true;\n        }\n        return false;\n    }","commit_id":"3b158a6459bc6024edbda70cf5e475e4668ff042","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n     * Push a newly compiled JspServletWrapper into the queue at first\n     * execution of jsp.\n     *\n     * @param jsw Servlet wrapper for jsp.\n     * @return a ticket that can be pushed to front of queue at later execution times.\n     * */\n    public FastRemovalDequeue<JspServletWrapper>.Entry push(JspServletWrapper jsw) {\n        synchronized (jspQueue) {\n            return jspQueue.push(jsw);\n        }\n    }","id":46487,"modified_method":"/**\n     * Push a newly compiled JspServletWrapper into the queue at first\n     * execution of jsp. Destroy any JSP the has been replaced in the queue.\n     *\n     * @param jsw Servlet wrapper for jsp.\n     * @return a ticket that can be pushed to front of queue at later execution times.\n     * */\n    public FastRemovalDequeue<JspServletWrapper>.Entry push(JspServletWrapper jsw) {\n        FastRemovalDequeue<JspServletWrapper>.Entry entry = jspQueue.push(jsw);\n        JspServletWrapper replaced = entry.getReplaced();\n        if (replaced != null) {\n            unloadJspServletWrapper(replaced);\n        }\n        return entry;\n    }","commit_id":"3b158a6459bc6024edbda70cf5e475e4668ff042","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n     * Push ticket for JspServletWrapper to front of the queue.\n     *\n     * @param ticket the ticket for the jsp.\n     * */\n    public void makeYoungest(FastRemovalDequeue<JspServletWrapper>.Entry ticket) {\n        synchronized(jspQueue) {\n            jspQueue.moveFirst(ticket);\n        }\n    }","id":46488,"modified_method":"/**\n     * Push ticket for JspServletWrapper to front of the queue.\n     *\n     * @param ticket the ticket for the jsp.\n     * */\n    public void makeYoungest(FastRemovalDequeue<JspServletWrapper>.Entry ticket) {\n        jspQueue.moveFirst(ticket);\n    }","commit_id":"3b158a6459bc6024edbda70cf5e475e4668ff042","url":"https://github.com/apache/tomcat"},{"original_method":"public void service(HttpServletRequest request, \n                        HttpServletResponse response,\n                        boolean precompile)\n            throws ServletException, IOException, FileNotFoundException {\n        \n        try {\n\n            if (ctxt.isRemoved()) {\n                throw new FileNotFoundException(jspUri);\n            }\n\n            if ((available > 0L) && (available < Long.MAX_VALUE)) {\n                if (available > System.currentTimeMillis()) {\n                    response.setDateHeader(\"Retry-After\", available);\n                    response.sendError\n                        (HttpServletResponse.SC_SERVICE_UNAVAILABLE,\n                         Localizer.getMessage(\"jsp.error.unavailable\"));\n                    return;\n                }\n\n                // Wait period has expired. Reset.\n                available = 0;\n            }\n\n            /*\n             * (1) Compile\n             */\n            if (options.getDevelopment() || firstTime ) {\n                synchronized (this) {\n                    firstTime = false;\n\n                    // The following sets reload to true, if necessary\n                    ctxt.compile();\n                }\n            } else {\n                if (compileException != null) {\n                    // Throw cached compilation exception\n                    throw compileException;\n                }\n            }\n\n            /*\n             * (2) (Re)load servlet class file\n             */\n            getServlet();\n\n            // If a page is to be precompiled only, return.\n            if (precompile) {\n                return;\n            }\n\n        } catch (ServletException ex) {\n            if (options.getDevelopment()) {\n                throw handleJspException(ex);\n            }\n            throw ex;\n        } catch (FileNotFoundException fnfe) {\n            // File has been removed. Let caller handle this.\n            throw fnfe;\n        } catch (IOException ex) {\n            if (options.getDevelopment()) {\n                throw handleJspException(ex);\n            }\n            throw ex;\n        } catch (IllegalStateException ex) {\n            if (options.getDevelopment()) {\n                throw handleJspException(ex);\n            }\n            throw ex;\n        } catch (Exception ex) {\n            if (options.getDevelopment()) {\n                throw handleJspException(ex);\n            }\n            throw new JasperException(ex);\n        }\n\n        try {\n            \n            /*\n             * (3) Handle limitation of number of loaded Jsps\n             */\n            if (options.getMaxLoadedJsps() > 0) {\n                synchronized(this) {\n                    if (ticket == null) {\n                        ticket = ctxt.getRuntimeContext().push(this);\n                        ctxt.getRuntimeContext().unloadJsp();\n                    } else {\n                        ctxt.getRuntimeContext().makeYoungest(ticket);\n                    }\n                }\n            }\n            /*\n             * (4) Service request\n             */\n            if (theServlet instanceof SingleThreadModel) {\n               // sync on the wrapper so that the freshness\n               // of the page is determined right before servicing\n               synchronized (this) {\n                   theServlet.service(request, response);\n                }\n            } else {\n                theServlet.service(request, response);\n            }\n        } catch (UnavailableException ex) {\n            String includeRequestUri = (String)\n                request.getAttribute(\"javax.servlet.include.request_uri\");\n            if (includeRequestUri != null) {\n                // This file was included. Throw an exception as\n                // a response.sendError() will be ignored by the\n                // servlet engine.\n                throw ex;\n            }\n\n            int unavailableSeconds = ex.getUnavailableSeconds();\n            if (unavailableSeconds <= 0) {\n                unavailableSeconds = 60;        // Arbitrary default\n            }\n            available = System.currentTimeMillis() +\n                (unavailableSeconds * 1000L);\n            response.sendError\n                (HttpServletResponse.SC_SERVICE_UNAVAILABLE, \n                 ex.getMessage());\n        } catch (ServletException ex) {\n            if(options.getDevelopment()) {\n                throw handleJspException(ex);\n            }\n            throw ex;\n        } catch (IOException ex) {\n            if(options.getDevelopment()) {\n                throw handleJspException(ex);\n            }\n            throw ex;\n        } catch (IllegalStateException ex) {\n            if(options.getDevelopment()) {\n                throw handleJspException(ex);\n            }\n            throw ex;\n        } catch (Exception ex) {\n            if(options.getDevelopment()) {\n                throw handleJspException(ex);\n            }\n            throw new JasperException(ex);\n        }\n    }","id":46489,"modified_method":"public void service(HttpServletRequest request, \n                        HttpServletResponse response,\n                        boolean precompile)\n            throws ServletException, IOException, FileNotFoundException {\n        \n        try {\n\n            if (ctxt.isRemoved()) {\n                throw new FileNotFoundException(jspUri);\n            }\n\n            if ((available > 0L) && (available < Long.MAX_VALUE)) {\n                if (available > System.currentTimeMillis()) {\n                    response.setDateHeader(\"Retry-After\", available);\n                    response.sendError\n                        (HttpServletResponse.SC_SERVICE_UNAVAILABLE,\n                         Localizer.getMessage(\"jsp.error.unavailable\"));\n                    return;\n                }\n\n                // Wait period has expired. Reset.\n                available = 0;\n            }\n\n            /*\n             * (1) Compile\n             */\n            if (options.getDevelopment() || firstTime ) {\n                synchronized (this) {\n                    firstTime = false;\n\n                    // The following sets reload to true, if necessary\n                    ctxt.compile();\n                }\n            } else {\n                if (compileException != null) {\n                    // Throw cached compilation exception\n                    throw compileException;\n                }\n            }\n\n            /*\n             * (2) (Re)load servlet class file\n             */\n            getServlet();\n\n            // If a page is to be precompiled only, return.\n            if (precompile) {\n                return;\n            }\n\n        } catch (ServletException ex) {\n            if (options.getDevelopment()) {\n                throw handleJspException(ex);\n            }\n            throw ex;\n        } catch (FileNotFoundException fnfe) {\n            // File has been removed. Let caller handle this.\n            throw fnfe;\n        } catch (IOException ex) {\n            if (options.getDevelopment()) {\n                throw handleJspException(ex);\n            }\n            throw ex;\n        } catch (IllegalStateException ex) {\n            if (options.getDevelopment()) {\n                throw handleJspException(ex);\n            }\n            throw ex;\n        } catch (Exception ex) {\n            if (options.getDevelopment()) {\n                throw handleJspException(ex);\n            }\n            throw new JasperException(ex);\n        }\n\n        try {\n            \n            /*\n             * (3) Handle limitation of number of loaded Jsps\n             */\n            if (options.getMaxLoadedJsps() > 0) {\n                synchronized(this) {\n                    if (ticket == null) {\n                        ticket = ctxt.getRuntimeContext().push(this);\n                    } else {\n                        ctxt.getRuntimeContext().makeYoungest(ticket);\n                    }\n                }\n            }\n            /*\n             * (4) Service request\n             */\n            if (theServlet instanceof SingleThreadModel) {\n               // sync on the wrapper so that the freshness\n               // of the page is determined right before servicing\n               synchronized (this) {\n                   theServlet.service(request, response);\n                }\n            } else {\n                theServlet.service(request, response);\n            }\n        } catch (UnavailableException ex) {\n            String includeRequestUri = (String)\n                request.getAttribute(\"javax.servlet.include.request_uri\");\n            if (includeRequestUri != null) {\n                // This file was included. Throw an exception as\n                // a response.sendError() will be ignored by the\n                // servlet engine.\n                throw ex;\n            }\n\n            int unavailableSeconds = ex.getUnavailableSeconds();\n            if (unavailableSeconds <= 0) {\n                unavailableSeconds = 60;        // Arbitrary default\n            }\n            available = System.currentTimeMillis() +\n                (unavailableSeconds * 1000L);\n            response.sendError\n                (HttpServletResponse.SC_SERVICE_UNAVAILABLE, \n                 ex.getMessage());\n        } catch (ServletException ex) {\n            if(options.getDevelopment()) {\n                throw handleJspException(ex);\n            }\n            throw ex;\n        } catch (IOException ex) {\n            if(options.getDevelopment()) {\n                throw handleJspException(ex);\n            }\n            throw ex;\n        } catch (IllegalStateException ex) {\n            if(options.getDevelopment()) {\n                throw handleJspException(ex);\n            }\n            throw ex;\n        } catch (Exception ex) {\n            if(options.getDevelopment()) {\n                throw handleJspException(ex);\n            }\n            throw new JasperException(ex);\n        }\n    }","commit_id":"3b158a6459bc6024edbda70cf5e475e4668ff042","url":"https://github.com/apache/tomcat"},{"original_method":"protected DDMFormFieldEvaluationResult evaluateDDMFormFieldValue(\n\t\t\tDDMFormFieldValue ddmFormFieldValue,\n\t\t\tSet<DDMFormFieldValue> ancestorDDMFormFieldValues,\n\t\t\tDDMFormField ddmFormField)\n\t\tthrows PortalException {\n\n\t\tDDMFormFieldEvaluationResult ddmFormFieldEvaluationResult =\n\t\t\tnew DDMFormFieldEvaluationResult(\n\t\t\t\tddmFormFieldValue.getName(), ddmFormFieldValue.getInstanceId());\n\n\t\tDDMFormFieldValidation ddmFormFieldValidation =\n\t\t\tddmFormField.getDDMFormFieldValidation();\n\n\t\tString validationExpression = getValidationExpression(\n\t\t\tddmFormFieldValidation);\n\n\t\tboolean valid = evaluateBooleanExpression(\n\t\t\tvalidationExpression, ancestorDDMFormFieldValues);\n\n\t\tddmFormFieldEvaluationResult.setValid(valid);\n\n\t\tif (!valid) {\n\t\t\tddmFormFieldEvaluationResult.setErrorMessage(\n\t\t\t\tddmFormFieldValidation.getErrorMessage());\n\t\t}\n\n\t\tboolean visible = evaluateBooleanExpression(\n\t\t\tddmFormField.getVisibilityExpression(), ancestorDDMFormFieldValues);\n\n\t\tddmFormFieldEvaluationResult.setVisible(visible);\n\n\t\tList<DDMFormFieldEvaluationResult> nestedDDMFormFieldEvaluationResults =\n\t\t\tevaluateDDMFormFieldValues(\n\t\t\t\tddmFormFieldValue.getNestedDDMFormFieldValues(),\n\t\t\t\tancestorDDMFormFieldValues);\n\n\t\tddmFormFieldEvaluationResult. setNestedDDMFormFieldEvaluationResults(\n\t\t\tnestedDDMFormFieldEvaluationResults);\n\n\t\treturn ddmFormFieldEvaluationResult;\n\t}","id":46490,"modified_method":"protected DDMFormFieldEvaluationResult evaluateDDMFormFieldValue(\n\t\t\tDDMFormFieldValue ddmFormFieldValue,\n\t\t\tSet<DDMFormFieldValue> ancestorDDMFormFieldValues,\n\t\t\tDDMFormField ddmFormField)\n\t\tthrows PortalException {\n\n\t\tDDMFormFieldEvaluationResult ddmFormFieldEvaluationResult =\n\t\t\tnew DDMFormFieldEvaluationResult(\n\t\t\t\tddmFormFieldValue.getName(), ddmFormFieldValue.getInstanceId());\n\n\t\tif (ddmFormField.isRequired() &&\n\t\t\tisDDMFormFieldValueEmpty(ddmFormFieldValue)) {\n\n\t\t\tddmFormFieldEvaluationResult.setErrorMessage(\n\t\t\t\tLanguageUtil.get(_locale, \"this-field-is-required\"));\n\n\t\t\tddmFormFieldEvaluationResult.setValid(false);\n\t\t}\n\t\telse {\n\t\t\tDDMFormFieldValidation ddmFormFieldValidation =\n\t\t\t\tddmFormField.getDDMFormFieldValidation();\n\n\t\t\tString validationExpression = getValidationExpression(\n\t\t\t\tddmFormFieldValidation);\n\n\t\t\tboolean valid = evaluateBooleanExpression(\n\t\t\t\tvalidationExpression, ancestorDDMFormFieldValues);\n\n\t\t\tddmFormFieldEvaluationResult.setValid(valid);\n\n\t\t\tif (!valid) {\n\t\t\t\tddmFormFieldEvaluationResult.setErrorMessage(\n\t\t\t\t\tddmFormFieldValidation.getErrorMessage());\n\t\t\t}\n\t\t}\n\n\t\tboolean visible = evaluateBooleanExpression(\n\t\t\tddmFormField.getVisibilityExpression(), ancestorDDMFormFieldValues);\n\n\t\tddmFormFieldEvaluationResult.setVisible(visible);\n\n\t\tList<DDMFormFieldEvaluationResult> nestedDDMFormFieldEvaluationResults =\n\t\t\tevaluateDDMFormFieldValues(\n\t\t\t\tddmFormFieldValue.getNestedDDMFormFieldValues(),\n\t\t\t\tancestorDDMFormFieldValues);\n\n\t\tddmFormFieldEvaluationResult. setNestedDDMFormFieldEvaluationResults(\n\t\t\tnestedDDMFormFieldEvaluationResults);\n\n\t\treturn ddmFormFieldEvaluationResult;\n\t}","commit_id":"6d6d935824c6986b65754b5c60e852b9cdbeac42","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\n     * Creates the next alignment context from the given state.  Note that this is implemented as a\n     * lazy load method. nextAlignmentContext MUST BE null in order for this method to advance to the\n     * next entry.\n     */\n    private void lazyLoadNextAlignmentContext() {\n        while (nextAlignmentContext == null && readStates.hasNext()) {\n            readStates.collectPendingReads();\n\n            final GenomeLoc location = getLocation();\n            final Map<String, ReadBackedPileupImpl> fullPileup = new HashMap<String, ReadBackedPileupImpl>();\n\n            // TODO: How can you determine here whether the current pileup has been downsampled?\n            boolean hasBeenSampled = false;\n\n            for (final String sample : samples) {\n                final Iterator<AlignmentStateMachine> iterator = readStates.iterator(sample);\n                final List<PileupElement> pile = new ArrayList<PileupElement>(readStates.size(sample));\n\n                while (iterator.hasNext()) {\n                    // state object with the read/offset information\n                    final AlignmentStateMachine state = iterator.next();\n                    final GATKSAMRecord read = (GATKSAMRecord) state.getRead();\n                    final CigarOperator op = state.getCigarOperator();\n\n                    if (op == CigarOperator.N) // N's are never added to any pileup\n                        continue;\n\n                    if (!dontIncludeReadInPileup(read, location.getStart())) {\n                        if ( ! includeReadsWithDeletionAtLoci && op == CigarOperator.D ) {\n                            continue;\n                        }\n\n                        pile.add(state.makePileupElement());\n                    }\n                }\n\n                if (! pile.isEmpty() ) // if this pileup added at least one base, add it to the full pileup\n                    fullPileup.put(sample, new ReadBackedPileupImpl(location, pile));\n            }\n\n            updateReadStates(); // critical - must be called after we get the current state offsets and location\n            if (!fullPileup.isEmpty()) // if we got reads with non-D/N over the current position, we are done\n                nextAlignmentContext = new AlignmentContext(location, new ReadBackedPileupImpl(location, fullPileup), hasBeenSampled);\n        }\n    }","id":46491,"modified_method":"/**\n     * Creates the next alignment context from the given state.  Note that this is implemented as a\n     * lazy load method. nextAlignmentContext MUST BE null in order for this method to advance to the\n     * next entry.\n     */\n    private void lazyLoadNextAlignmentContext() {\n        while (nextAlignmentContext == null && readStates.hasNext()) {\n            readStates.collectPendingReads();\n\n            final GenomeLoc location = getLocation();\n            final Map<String, ReadBackedPileupImpl> fullPileup = new HashMap<String, ReadBackedPileupImpl>();\n\n            for (final Map.Entry<String, ReadStateManager.PerSampleReadStateManager> sampleStatePair : readStates ) {\n                final String sample = sampleStatePair.getKey();\n                final ReadStateManager.PerSampleReadStateManager readState = sampleStatePair.getValue();\n                final Iterator<AlignmentStateMachine> iterator = readState.iterator();\n                final List<PileupElement> pile = new ArrayList<PileupElement>(readState.size());\n\n                while (iterator.hasNext()) {\n                    // state object with the read/offset information\n                    final AlignmentStateMachine state = iterator.next();\n                    final GATKSAMRecord read = state.getRead();\n                    final CigarOperator op = state.getCigarOperator();\n\n                    if (op == CigarOperator.N) // N's are never added to any pileup\n                        continue;\n\n                    if (!dontIncludeReadInPileup(read, location.getStart())) {\n                        if ( ! includeReadsWithDeletionAtLoci && op == CigarOperator.D ) {\n                            continue;\n                        }\n\n                        pile.add(state.makePileupElement());\n                    }\n                }\n\n                if (! pile.isEmpty() ) // if this pileup added at least one base, add it to the full pileup\n                    fullPileup.put(sample, new ReadBackedPileupImpl(location, pile));\n            }\n\n            readStates.updateReadStates(); // critical - must be called after we get the current state offsets and location\n            if (!fullPileup.isEmpty()) // if we got reads with non-D/N over the current position, we are done\n                nextAlignmentContext = new AlignmentContext(location, new ReadBackedPileupImpl(location, fullPileup), false);\n        }\n    }","commit_id":"78998e037a3683d5d84ebd3f63d392f29579c7ef","url":"https://github.com/broadgsa/gatk"},{"original_method":"/**\n     * Returns a iterator over all the reads associated with the given sample.  Note that remove() is implemented\n     * for this iterator; if present, total read states will be decremented.\n     *\n     * @param sample The sample.\n     * @return Iterator over the reads associated with that sample.\n     */\n    public Iterator<AlignmentStateMachine> iterator(final String sample) {\n        // TODO -- why is this wrapped?\n        return new Iterator<AlignmentStateMachine>() {\n            private Iterator<AlignmentStateMachine> wrappedIterator = readStatesBySample.get(sample).iterator();\n\n            public boolean hasNext() {\n                return wrappedIterator.hasNext();\n            }\n\n            public AlignmentStateMachine next() {\n                return wrappedIterator.next();\n            }\n\n            public void remove() {\n                wrappedIterator.remove();\n            }\n        };\n    }","id":46492,"modified_method":"/**\n     * Returns a iterator over all the sample -> per-sample read state managers with each sample in this read state manager.\n     *\n     * The order of iteration is the same as the order of the samples provided upon construction to this\n     * ReadStateManager.\n     *\n     * @return Iterator over sample + per sample read state manager pairs for this read state manager.\n     */\n    @Override\n    public Iterator<Map.Entry<String, ReadStateManager.PerSampleReadStateManager>> iterator() {\n        return readStatesBySample.entrySet().iterator();\n    }","commit_id":"78998e037a3683d5d84ebd3f63d392f29579c7ef","url":"https://github.com/broadgsa/gatk"},{"original_method":"public AlignmentStateMachine getFirst() {\n        for (final String sample : samples) {\n            PerSampleReadStateManager reads = readStatesBySample.get(sample);\n            if (!reads.isEmpty())\n                return reads.peek();\n        }\n        return null;\n    }","id":46493,"modified_method":"public AlignmentStateMachine getFirst() {\n        for ( final PerSampleReadStateManager manager : readStatesBySample.values() ) {\n            if ( ! manager.isEmpty() )\n                return manager.peek();\n        }\n        return null;\n    }","commit_id":"78998e037a3683d5d84ebd3f63d392f29579c7ef","url":"https://github.com/broadgsa/gatk"},{"original_method":"public void collectPendingReads() {\n        if (!iterator.hasNext())\n            return;\n\n        // the next record in the stream, peeked as to not remove it from the stream\n        if ( isEmpty() ) {\n            final int firstContigIndex = iterator.peek().getReferenceIndex();\n            final int firstAlignmentStart = iterator.peek().getAlignmentStart();\n            while (iterator.hasNext() && iterator.peek().getReferenceIndex() == firstContigIndex && iterator.peek().getAlignmentStart() == firstAlignmentStart) {\n                submitRead(iterator.next());\n            }\n        } else {\n            // Fast fail in the case that the read is past the current position.\n            if (readIsPastCurrentPosition(iterator.peek()))\n                return;\n\n            while (iterator.hasNext() && !readIsPastCurrentPosition(iterator.peek())) {\n                submitRead(iterator.next());\n            }\n        }\n\n        samplePartitioner.doneSubmittingReads();\n\n        for (final String sample : samples) {\n            final Collection<GATKSAMRecord> newReads = samplePartitioner.getReadsForSample(sample);\n            PerSampleReadStateManager statesBySample = readStatesBySample.get(sample);\n            addReadsToSample(statesBySample, newReads);\n        }\n\n        samplePartitioner.reset();\n    }","id":46494,"modified_method":"/**\n     * Pull all of the reads off the iterator that overlap the left-most position among all\n     * reads this ReadStateManager\n     */\n    public void collectPendingReads() {\n        if (!iterator.hasNext())\n            return;\n\n        // determine the left-most boundary that determines which reads to keep in this new pileup\n        final int firstContigIndex;\n        final int firstAlignmentStart;\n        if ( isEmpty() ) {\n            // there are no reads here, so our next state is the next read in the stream\n            firstContigIndex = iterator.peek().getReferenceIndex();\n            firstAlignmentStart = iterator.peek().getAlignmentStart();\n        } else {\n            // there's a read in the system, so it's our targeted first read\n            final AlignmentStateMachine firstState = getFirst();\n            firstContigIndex = firstState.getReferenceIndex();\n            // note this isn't the alignment start of the read, but rather the alignment start position\n            firstAlignmentStart = firstState.getGenomePosition();\n        }\n\n        while ( iterator.hasNext() && readStartsAtCurrentPosition(iterator.peek(), firstContigIndex, firstAlignmentStart) ) {\n            submitRead(iterator.next());\n        }\n\n        for (final String sample : samples) {\n            final Collection<GATKSAMRecord> newReads = samplePartitioner.getReadsForSample(sample);\n            PerSampleReadStateManager statesBySample = readStatesBySample.get(sample);\n            addReadsToSample(statesBySample, newReads);\n        }\n\n        samplePartitioner.reset();\n    }","commit_id":"78998e037a3683d5d84ebd3f63d392f29579c7ef","url":"https://github.com/broadgsa/gatk"},{"original_method":"/**\n     * Add reads with the given sample name to the given hanger entry.\n     *\n     * @param readStates The list of read states to add this collection of reads.\n     * @param reads      Reads to add.  Selected reads will be pulled from this source.\n     */\n    private void addReadsToSample(final PerSampleReadStateManager readStates, final Collection<GATKSAMRecord> reads) {\n        if (reads.isEmpty())\n            return;\n\n        Collection<AlignmentStateMachine> newReadStates = new LinkedList<AlignmentStateMachine>();\n\n        for (GATKSAMRecord read : reads) {\n            AlignmentStateMachine state = new AlignmentStateMachine(read);\n            if ( state.stepForwardOnGenome() != null )\n                // explicitly filter out reads that are all insertions / soft clips\n                newReadStates.add(state);\n        }\n\n        readStates.addStatesAtNextAlignmentStart(newReadStates);\n    }","id":46495,"modified_method":"/**\n     * Add reads with the given sample name to the given hanger entry.\n     *\n     * @param readStates The list of read states to add this collection of reads.\n     * @param reads      Reads to add.  Selected reads will be pulled from this source.\n     */\n    private void addReadsToSample(final PerSampleReadStateManager readStates, final Collection<GATKSAMRecord> reads) {\n        if (reads.isEmpty())\n            return;\n\n        final LinkedList<AlignmentStateMachine> newReadStates = new LinkedList<AlignmentStateMachine>();\n\n        for (final GATKSAMRecord read : reads) {\n            final AlignmentStateMachine state = new AlignmentStateMachine(read);\n            if ( state.stepForwardOnGenome() != null ) // todo -- should be an assertion not a skip\n                // explicitly filter out reads that are all insertions / soft clips\n                newReadStates.add(state);\n        }\n\n        readStates.addStatesAtNextAlignmentStart(newReadStates);\n    }","commit_id":"78998e037a3683d5d84ebd3f63d392f29579c7ef","url":"https://github.com/broadgsa/gatk"},{"original_method":"/**\n     * TODO -- this function needs to be optimized\n     *\n     * Notes:\n     * -- the only place where it's called is in a block where we know isEmpty is false\n     * -- getFirst() is quite expensive, and it seems that we could cache this value in the outer\n     *    block, and then pass this in as an argument\n     *\n     * @param read\n     * @return\n     */\n    private boolean readIsPastCurrentPosition(GATKSAMRecord read) {\n        if (isEmpty())\n            return false;\n        else {\n            final AlignmentStateMachine state = getFirst();\n            final GATKSAMRecord ourRead = state.getRead();\n            return read.getReferenceIndex() > ourRead.getReferenceIndex() || read.getAlignmentStart() > state.getGenomePosition();\n        }\n    }","id":46496,"modified_method":"/**\n     * Does read start at the same position as described by currentContextIndex and currentAlignmentStart?\n     *\n     * @param read the read we want to test\n     * @param currentContigIndex the contig index (from the read's getReferenceIndex) of the reads in this state manager\n     * @param currentAlignmentStart the alignment start of the of the left-most position on the\n     *                           genome of the reads in this read state manager\n     * @return true if read has contig index and start equal to the current ones\n     */\n    private boolean readStartsAtCurrentPosition(final GATKSAMRecord read, final int currentContigIndex, final int currentAlignmentStart) {\n        return read.getAlignmentStart() == currentAlignmentStart && read.getReferenceIndex() == currentContigIndex;\n    }","commit_id":"78998e037a3683d5d84ebd3f63d392f29579c7ef","url":"https://github.com/broadgsa/gatk"},{"original_method":"public void addStatesAtNextAlignmentStart(Collection<AlignmentStateMachine> states) {\n            if ( states.isEmpty() ) {\n                return;\n            }\n\n            readStatesByAlignmentStart.add(new LinkedList<AlignmentStateMachine>(states));\n            thisSampleReadStates += states.size();\n            totalReadStates += states.size();\n\n            if ( levelingDownsampler != null ) {\n                levelingDownsampler.submit(readStatesByAlignmentStart);\n                levelingDownsampler.signalEndOfInput();\n\n                thisSampleReadStates -= levelingDownsampler.getNumberOfDiscardedItems();\n                totalReadStates -= levelingDownsampler.getNumberOfDiscardedItems();\n\n                // use returned List directly rather than make a copy, for efficiency's sake\n                readStatesByAlignmentStart = levelingDownsampler.consumeFinalizedItems();\n                levelingDownsampler.reset();\n            }\n        }","id":46497,"modified_method":"/**\n         * Assumes it can just keep the states linked lists without making a copy\n         * @param states\n         */\n        public void addStatesAtNextAlignmentStart(LinkedList<AlignmentStateMachine> states) {\n            if ( states.isEmpty() ) {\n                return;\n            }\n\n            readStatesByAlignmentStart.add(states);\n            thisSampleReadStates += states.size();\n            totalReadStates += states.size();\n\n            if ( levelingDownsampler != null ) {\n                levelingDownsampler.submit(readStatesByAlignmentStart);\n                levelingDownsampler.signalEndOfInput();\n\n                thisSampleReadStates -= levelingDownsampler.getNumberOfDiscardedItems();\n                totalReadStates -= levelingDownsampler.getNumberOfDiscardedItems();\n\n                // use returned List directly rather than make a copy, for efficiency's sake\n                readStatesByAlignmentStart = levelingDownsampler.consumeFinalizedItems();\n                levelingDownsampler.reset();\n            }\n        }","commit_id":"78998e037a3683d5d84ebd3f63d392f29579c7ef","url":"https://github.com/broadgsa/gatk"},{"original_method":"public void run() {\n            final List<String> samples = LocusIteratorByState.sampleListForSAMWithoutReadGroups();\n            final Iterator<GATKSAMRecord> iterator = new LinkedList<GATKSAMRecord>().iterator();\n            ReadStateManager readStateManager = new ReadStateManager(iterator, samples, LIBSDownsamplingInfo.NO_DOWNSAMPLING, false);\n            ReadStateManager.PerSampleReadStateManager perSampleReadStateManager = readStateManager.new PerSampleReadStateManager(LIBSDownsamplingInfo.NO_DOWNSAMPLING);\n\n            makeReads();\n\n            for ( ArrayList<AlignmentStateMachine> stackRecordStates : recordStatesByAlignmentStart ) {\n                perSampleReadStateManager.addStatesAtNextAlignmentStart(stackRecordStates);\n            }\n\n            // read state manager should have the right number of reads\n            Assert.assertEquals(reads.size(), perSampleReadStateManager.size());\n\n            Iterator<SAMRecord> originalReadsIterator = reads.iterator();\n            Iterator<AlignmentStateMachine> recordStateIterator = perSampleReadStateManager.iterator();\n            int recordStateCount = 0;\n            int numReadStatesRemoved = 0;\n\n            // Do a first-pass validation of the record state iteration by making sure we get back everything we\n            // put in, in the same order, doing any requested removals of read states along the way\n            while ( recordStateIterator.hasNext() ) {\n                AlignmentStateMachine readState = recordStateIterator.next();\n                recordStateCount++;\n                SAMRecord readFromPerSampleReadStateManager = readState.getRead();\n\n                Assert.assertTrue(originalReadsIterator.hasNext());\n                SAMRecord originalRead = originalReadsIterator.next();\n\n                // The read we get back should be literally the same read in memory as we put in\n                Assert.assertTrue(originalRead == readFromPerSampleReadStateManager);\n\n                // If requested, remove a read state every removalInterval states\n                if ( removalInterval > 0 && recordStateCount % removalInterval == 0 ) {\n                    recordStateIterator.remove();\n                    numReadStatesRemoved++;\n                }\n            }\n\n            Assert.assertFalse(originalReadsIterator.hasNext());\n\n            // If we removed any read states, do a second pass through the read states to make sure the right\n            // states were removed\n            if ( numReadStatesRemoved > 0 ) {\n                Assert.assertEquals(perSampleReadStateManager.size(), reads.size() - numReadStatesRemoved);\n\n                originalReadsIterator = reads.iterator();\n                recordStateIterator = perSampleReadStateManager.iterator();\n                int readCount = 0;\n                int readStateCount = 0;\n\n                // Match record states with the reads that should remain after removal\n                while ( recordStateIterator.hasNext() ) {\n                    AlignmentStateMachine readState = recordStateIterator.next();\n                    readStateCount++;\n                    SAMRecord readFromPerSampleReadStateManager = readState.getRead();\n\n                    Assert.assertTrue(originalReadsIterator.hasNext());\n\n                    SAMRecord originalRead = originalReadsIterator.next();\n                    readCount++;\n\n                    if ( readCount % removalInterval == 0 ) {\n                        originalRead = originalReadsIterator.next(); // advance to next read, since the previous one should have been discarded\n                        readCount++;\n                    }\n\n                    // The read we get back should be literally the same read in memory as we put in (after accounting for removals)\n                    Assert.assertTrue(originalRead == readFromPerSampleReadStateManager);\n                }\n\n                Assert.assertEquals(readStateCount, reads.size() - numReadStatesRemoved);\n            }\n\n            // Allow memory used by this test to be reclaimed\n            readCountsPerAlignmentStart = null;\n            reads = null;\n            recordStatesByAlignmentStart = null;\n        }","id":46498,"modified_method":"public void run() {\n            final List<String> samples = LocusIteratorByState.sampleListForSAMWithoutReadGroups();\n            final Iterator<GATKSAMRecord> iterator = new LinkedList<GATKSAMRecord>().iterator();\n            ReadStateManager readStateManager = new ReadStateManager(iterator, samples, LIBSDownsamplingInfo.NO_DOWNSAMPLING, false);\n            ReadStateManager.PerSampleReadStateManager perSampleReadStateManager = readStateManager.new PerSampleReadStateManager(LIBSDownsamplingInfo.NO_DOWNSAMPLING);\n\n            makeReads();\n\n            for ( ArrayList<AlignmentStateMachine> stackRecordStates : recordStatesByAlignmentStart ) {\n                perSampleReadStateManager.addStatesAtNextAlignmentStart(new LinkedList<AlignmentStateMachine>(stackRecordStates));\n            }\n\n            // read state manager should have the right number of reads\n            Assert.assertEquals(reads.size(), perSampleReadStateManager.size());\n\n            Iterator<SAMRecord> originalReadsIterator = reads.iterator();\n            Iterator<AlignmentStateMachine> recordStateIterator = perSampleReadStateManager.iterator();\n            int recordStateCount = 0;\n            int numReadStatesRemoved = 0;\n\n            // Do a first-pass validation of the record state iteration by making sure we get back everything we\n            // put in, in the same order, doing any requested removals of read states along the way\n            while ( recordStateIterator.hasNext() ) {\n                AlignmentStateMachine readState = recordStateIterator.next();\n                recordStateCount++;\n                SAMRecord readFromPerSampleReadStateManager = readState.getRead();\n\n                Assert.assertTrue(originalReadsIterator.hasNext());\n                SAMRecord originalRead = originalReadsIterator.next();\n\n                // The read we get back should be literally the same read in memory as we put in\n                Assert.assertTrue(originalRead == readFromPerSampleReadStateManager);\n\n                // If requested, remove a read state every removalInterval states\n                if ( removalInterval > 0 && recordStateCount % removalInterval == 0 ) {\n                    recordStateIterator.remove();\n                    numReadStatesRemoved++;\n                }\n            }\n\n            Assert.assertFalse(originalReadsIterator.hasNext());\n\n            // If we removed any read states, do a second pass through the read states to make sure the right\n            // states were removed\n            if ( numReadStatesRemoved > 0 ) {\n                Assert.assertEquals(perSampleReadStateManager.size(), reads.size() - numReadStatesRemoved);\n\n                originalReadsIterator = reads.iterator();\n                recordStateIterator = perSampleReadStateManager.iterator();\n                int readCount = 0;\n                int readStateCount = 0;\n\n                // Match record states with the reads that should remain after removal\n                while ( recordStateIterator.hasNext() ) {\n                    AlignmentStateMachine readState = recordStateIterator.next();\n                    readStateCount++;\n                    SAMRecord readFromPerSampleReadStateManager = readState.getRead();\n\n                    Assert.assertTrue(originalReadsIterator.hasNext());\n\n                    SAMRecord originalRead = originalReadsIterator.next();\n                    readCount++;\n\n                    if ( readCount % removalInterval == 0 ) {\n                        originalRead = originalReadsIterator.next(); // advance to next read, since the previous one should have been discarded\n                        readCount++;\n                    }\n\n                    // The read we get back should be literally the same read in memory as we put in (after accounting for removals)\n                    Assert.assertTrue(originalRead == readFromPerSampleReadStateManager);\n                }\n\n                Assert.assertEquals(readStateCount, reads.size() - numReadStatesRemoved);\n            }\n\n            // Allow memory used by this test to be reclaimed\n            readCountsPerAlignmentStart = null;\n            reads = null;\n            recordStatesByAlignmentStart = null;\n        }","commit_id":"78998e037a3683d5d84ebd3f63d392f29579c7ef","url":"https://github.com/broadgsa/gatk"},{"original_method":"public synchronized double[] computeReadHaplotypeLikelihoods(ReadBackedPileup pileup, LinkedHashMap<Allele,Haplotype> haplotypeMap,\n                                                                 ReferenceContext ref, int eventLength,\n                                                                 HashMap<PileupElement, LinkedHashMap<Allele,Double>> indelLikelihoodMap){\n\n        int numHaplotypes = haplotypeMap.size();\n        final double readLikelihoods[][] = new double[pileup.size()][numHaplotypes];\n        final int readCounts[] = new int[pileup.size()];\n        int readIdx=0;\n\n        LinkedHashMap<Allele,double[]> gapOpenProbabilityMap = new LinkedHashMap<Allele,double[]>();\n        LinkedHashMap<Allele,double[]> gapContProbabilityMap = new LinkedHashMap<Allele,double[]>();\n\n        // will context dependent probabilities based on homopolymer run. Probabilities are filled based on total complete haplotypes.\n        // todo -- refactor into separate function\n        for (Allele a: haplotypeMap.keySet()) {\n            Haplotype haplotype = haplotypeMap.get(a);\n            byte[] haplotypeBases = haplotype.getBasesAsBytes();\n            double[] contextLogGapOpenProbabilities = new double[haplotypeBases.length];\n            double[] contextLogGapContinuationProbabilities = new double[haplotypeBases.length];\n\n            // get homopolymer length profile for current haplotype\n            int[] hrunProfile = new int[haplotypeBases.length];\n            getContextHomopolymerLength(haplotypeBases,hrunProfile);\n            fillGapProbabilities(hrunProfile, contextLogGapOpenProbabilities, contextLogGapContinuationProbabilities);\n\n            gapOpenProbabilityMap.put(a,contextLogGapOpenProbabilities);\n            gapContProbabilityMap.put(a,contextLogGapContinuationProbabilities);\n\n        }\n\n        for (PileupElement p: pileup) {\n            // > 1 when the read is a consensus read representing multiple independent observations\n            final boolean isReduced = ReadUtils.isReducedRead(p.getRead());\n            readCounts[readIdx] = isReduced ? p.getReducedCount() : 1;\n\n            // check if we've already computed likelihoods for this pileup element (i.e. for this read at this location)\n            if (indelLikelihoodMap.containsKey(p)) {\n                HashMap<Allele,Double> el = indelLikelihoodMap.get(p);\n                int j=0;\n                for (Allele a: haplotypeMap.keySet()) {\n                    readLikelihoods[readIdx][j++] = el.get(a);\n                }\n            }\n            else {\n                //System.out.format(\"%d %s\\n\",p.getRead().getAlignmentStart(), p.getRead().getClass().getName());\n                SAMRecord read = ReadUtils.hardClipAdaptorSequence(p.getRead());\n                if (read == null)\n                    continue;\n\n                if ( isReduced ) {\n                    read = ReadUtils.reducedReadWithReducedQuals(read);\n                }\n\n                if(ReadUtils.is454Read(read)) {\n                    continue;\n                }\n\n                double[] recalQuals = null;\n\n                // get bases of candidate haplotypes that overlap with reads\n                final int trailingBases = 3;\n\n                long readStart = read.getUnclippedStart();\n                long readEnd = read.getUnclippedEnd();\n\n                int numStartSoftClippedBases, numEndSoftClippedBases;\n\n                // see if we want to use soft clipped bases. Aligners may soft clip all bases at insertions because they don't match,\n                // but they're actually consistent with the insertion!\n                // Rule: if a read starts in interval [eventStart-eventLength,eventStart+1] and we are at an insertion, we'll use all soft clipped bases at the beginning.\n                // Conversely, if a read ends at [eventStart,eventStart+eventLength] we'll use all soft clipped bases in the end of the read.\n                long eventStartPos = ref.getLocus().getStart();\n\n                // compute total number of clipped bases (soft or hard clipped)\n                numStartSoftClippedBases = read.getAlignmentStart()- read.getUnclippedStart();\n                numEndSoftClippedBases = read.getUnclippedEnd()- read.getAlignmentEnd();\n\n                // check for hard clips (never consider these bases):\n                Cigar c = read.getCigar();\n                CigarElement first = c.getCigarElement(0);\n                CigarElement last = c.getCigarElement(c.numCigarElements()-1);\n                int numStartHardClippedBases = 0, numEndHardClippedBases = 0;\n\n                if (first.getOperator() == CigarOperator.H) {\n                    numStartHardClippedBases = first.getLength();\n                }\n\n                if (last.getOperator() == CigarOperator.H) {\n                    numEndHardClippedBases = last.getLength();\n                }\n\n                // correct for hard clips\n                numStartSoftClippedBases -= numStartHardClippedBases;\n                numEndSoftClippedBases -= numEndHardClippedBases;\n                readStart += numStartHardClippedBases;\n                readEnd -= numEndHardClippedBases;\n\n                // remove soft clips if necessary\n                if ((read.getAlignmentStart()>=eventStartPos-eventLength && read.getAlignmentStart() <= eventStartPos+1) ||\n                        (read.getAlignmentEnd() >= eventStartPos && read.getAlignmentEnd() <= eventStartPos + eventLength)) {\n                    numStartSoftClippedBases = 0;\n                    numEndSoftClippedBases = 0;\n                }\n\n\n\n                byte[] unclippedReadBases, unclippedReadQuals;\n\n                int numStartClippedBases = numStartSoftClippedBases;\n                int numEndClippedBases = numEndSoftClippedBases;\n                unclippedReadBases = read.getReadBases();\n                unclippedReadQuals = read.getBaseQualities();\n\n                // Do a stricter base clipping than provided by CIGAR string, since this one may be too conservative,\n                // and may leave a string of Q2 bases still hanging off the reads.\n                for (int i=numStartSoftClippedBases; i < unclippedReadBases.length; i++) {\n                    if (unclippedReadQuals[i] < BASE_QUAL_THRESHOLD)\n                        numStartClippedBases++;\n                    else\n                        break;\n\n                }\n                for (int i=unclippedReadBases.length-numEndSoftClippedBases-1; i >= 0; i-- ){\n                    if (unclippedReadQuals[i] < BASE_QUAL_THRESHOLD)\n                        numEndClippedBases++;\n                    else\n                        break;\n                }\n\n                int extraOffset = Math.abs(eventLength);\n\n                long start = Math.max(readStart + numStartClippedBases - trailingBases - ReadUtils.getFirstInsertionOffset(read)-extraOffset, 0);\n                long stop =  readEnd -numEndClippedBases  + trailingBases + ReadUtils.getLastInsertionOffset(read)+extraOffset;\n\n                // Variables start and stop are coordinates (inclusive) where we want to get the haplotype from.\n                int readLength = read.getReadLength()-numStartSoftClippedBases-numEndSoftClippedBases;\n                // check if start of read will be before start of reference context\n                if (start < ref.getWindow().getStart())// read starts before haplotype: read will have to be cut\n                    start = ref.getWindow().getStart();\n\n                // check also if end of read will go beyond reference context\n                if (stop > ref.getWindow().getStop())\n                    stop = ref.getWindow().getStop();\n\n                // if there's an insertion in the read, the read stop position will be less than start + read legnth,\n                // but we want to compute likelihoods in the whole region that a read might overlap\n                if (stop <= start + readLength) {\n                    stop = start + readLength-1;\n                }\n\n                // ok, we now figured out total number of clipped bases on both ends.\n                // Figure out where we want to place the haplotype to score read against\n                /*\n               if (DEBUG)\n                   System.out.format(\"numStartClippedBases: %d numEndClippedBases: %d WinStart:%d WinStop:%d start: %d stop: %d readLength: %d\\n\",\n                           numStartClippedBases, numEndClippedBases, ref.getWindow().getStart(), ref.getWindow().getStop(), start, stop, read.getReadLength());\n                */\n\n\n                LinkedHashMap<Allele,Double> readEl = new LinkedHashMap<Allele,Double>();\n\n                if (numStartClippedBases + numEndClippedBases >= unclippedReadBases.length) {\n                    int j=0;\n                    for (Allele a: haplotypeMap.keySet()) {\n                        readEl.put(a,0.0);\n                        readLikelihoods[readIdx][j++] = 0.0;\n                    }\n\n                }\n                else {\n                    byte[] readBases = Arrays.copyOfRange(unclippedReadBases,numStartClippedBases,\n                            unclippedReadBases.length-numEndClippedBases);\n\n                    byte[] readQuals = Arrays.copyOfRange(unclippedReadQuals,numStartClippedBases,\n                            unclippedReadBases.length-numEndClippedBases);\n\n                    int j=0;\n                    for (Allele a: haplotypeMap.keySet()) {\n\n\n                        Haplotype haplotype = haplotypeMap.get(a);\n                        if (stop > haplotype.getStopPosition())\n                            stop = haplotype.getStopPosition();\n\n                        if (start < haplotype.getStartPosition())\n                            start = haplotype.getStartPosition();\n\n                        // cut haplotype bases\n                        long indStart = start - haplotype.getStartPosition();\n                        long indStop =  stop - haplotype.getStartPosition();\n\n                        byte[] haplotypeBases = Arrays.copyOfRange(haplotype.getBasesAsBytes(),\n                                (int)indStart, (int)indStop);\n\n                        final double[] currentContextGOP = Arrays.copyOfRange(gapOpenProbabilityMap.get(a), (int)indStart, (int)indStop);\n                        final double[] currentContextGCP = Arrays.copyOfRange(gapContProbabilityMap.get(a), (int)indStart, (int)indStop);\n                        final double readLikelihood = computeReadLikelihoodGivenHaplotypeAffineGaps(haplotypeBases, readBases, readQuals,\n                                currentContextGOP, currentContextGCP, eventLength);\n\n                        readEl.put(a,readLikelihood);\n                        readLikelihoods[readIdx][j++] = readLikelihood;\n                    }\n                }\n                indelLikelihoodMap.put(p,readEl);\n            }\n            readIdx++;\n        }\n\n        if (DEBUG) {\n            System.out.println(\"\\nLikelihood summary\");\n            for (readIdx=0; readIdx < pileup.size(); readIdx++) {\n                System.out.format(\"Read Index: %d \",readIdx);\n                for (int i=0; i < readLikelihoods[readIdx].length; i++)\n                    System.out.format(\"L%d: %f \",i,readLikelihoods[readIdx][i]);\n                System.out.println();\n            }\n\n        }\n\n        return getHaplotypeLikelihoods(numHaplotypes, readCounts, readLikelihoods);\n    }","id":46499,"modified_method":"public synchronized double[] computeReadHaplotypeLikelihoods(ReadBackedPileup pileup, LinkedHashMap<Allele,Haplotype> haplotypeMap,\n                                                                 ReferenceContext ref, int eventLength,\n                                                                 HashMap<PileupElement, LinkedHashMap<Allele,Double>> indelLikelihoodMap){\n\n        int numHaplotypes = haplotypeMap.size();\n        final double readLikelihoods[][] = new double[pileup.size()][numHaplotypes];\n        final int readCounts[] = new int[pileup.size()];\n        int readIdx=0;\n\n        LinkedHashMap<Allele,double[]> gapOpenProbabilityMap = new LinkedHashMap<Allele,double[]>();\n        LinkedHashMap<Allele,double[]> gapContProbabilityMap = new LinkedHashMap<Allele,double[]>();\n\n        // will context dependent probabilities based on homopolymer run. Probabilities are filled based on total complete haplotypes.\n        // todo -- refactor into separate function\n        for (Allele a: haplotypeMap.keySet()) {\n            Haplotype haplotype = haplotypeMap.get(a);\n            byte[] haplotypeBases = haplotype.getBasesAsBytes();\n            double[] contextLogGapOpenProbabilities = new double[haplotypeBases.length];\n            double[] contextLogGapContinuationProbabilities = new double[haplotypeBases.length];\n\n            // get homopolymer length profile for current haplotype\n            int[] hrunProfile = new int[haplotypeBases.length];\n            getContextHomopolymerLength(haplotypeBases,hrunProfile);\n            fillGapProbabilities(hrunProfile, contextLogGapOpenProbabilities, contextLogGapContinuationProbabilities);\n\n            gapOpenProbabilityMap.put(a,contextLogGapOpenProbabilities);\n            gapContProbabilityMap.put(a,contextLogGapContinuationProbabilities);\n\n        }\n\n        for (PileupElement p: pileup) {\n            // > 1 when the read is a consensus read representing multiple independent observations\n            final boolean isReduced = ReadUtils.isReducedRead(p.getRead());\n            readCounts[readIdx] = isReduced ? p.getReducedCount() : 1;\n\n            // check if we've already computed likelihoods for this pileup element (i.e. for this read at this location)\n            if (indelLikelihoodMap.containsKey(p)) {\n                HashMap<Allele,Double> el = indelLikelihoodMap.get(p);\n                int j=0;\n                for (Allele a: haplotypeMap.keySet()) {\n                    readLikelihoods[readIdx][j++] = el.get(a);\n                }\n            }\n            else {\n                //System.out.format(\"%d %s\\n\",p.getRead().getAlignmentStart(), p.getRead().getClass().getName());\n                SAMRecord read = ReadUtils.hardClipAdaptorSequence(p.getRead());\n                if (read == null)\n                    continue;\n\n                if(ReadUtils.is454Read(read)) {\n                    continue;\n                }\n\n                double[] recalQuals = null;\n\n                // get bases of candidate haplotypes that overlap with reads\n                final int trailingBases = 3;\n\n                long readStart = read.getUnclippedStart();\n                long readEnd = read.getUnclippedEnd();\n\n                int numStartSoftClippedBases, numEndSoftClippedBases;\n\n                // see if we want to use soft clipped bases. Aligners may soft clip all bases at insertions because they don't match,\n                // but they're actually consistent with the insertion!\n                // Rule: if a read starts in interval [eventStart-eventLength,eventStart+1] and we are at an insertion, we'll use all soft clipped bases at the beginning.\n                // Conversely, if a read ends at [eventStart,eventStart+eventLength] we'll use all soft clipped bases in the end of the read.\n                long eventStartPos = ref.getLocus().getStart();\n\n                // compute total number of clipped bases (soft or hard clipped)\n                numStartSoftClippedBases = read.getAlignmentStart()- read.getUnclippedStart();\n                numEndSoftClippedBases = read.getUnclippedEnd()- read.getAlignmentEnd();\n\n                // check for hard clips (never consider these bases):\n                Cigar c = read.getCigar();\n                CigarElement first = c.getCigarElement(0);\n                CigarElement last = c.getCigarElement(c.numCigarElements()-1);\n                int numStartHardClippedBases = 0, numEndHardClippedBases = 0;\n\n                if (first.getOperator() == CigarOperator.H) {\n                    numStartHardClippedBases = first.getLength();\n                }\n\n                if (last.getOperator() == CigarOperator.H) {\n                    numEndHardClippedBases = last.getLength();\n                }\n\n                // correct for hard clips\n                numStartSoftClippedBases -= numStartHardClippedBases;\n                numEndSoftClippedBases -= numEndHardClippedBases;\n                readStart += numStartHardClippedBases;\n                readEnd -= numEndHardClippedBases;\n\n                // remove soft clips if necessary\n                if ((read.getAlignmentStart()>=eventStartPos-eventLength && read.getAlignmentStart() <= eventStartPos+1) ||\n                        (read.getAlignmentEnd() >= eventStartPos && read.getAlignmentEnd() <= eventStartPos + eventLength)) {\n                    numStartSoftClippedBases = 0;\n                    numEndSoftClippedBases = 0;\n                }\n\n\n\n                byte[] unclippedReadBases, unclippedReadQuals;\n\n                int numStartClippedBases = numStartSoftClippedBases;\n                int numEndClippedBases = numEndSoftClippedBases;\n                unclippedReadBases = read.getReadBases();\n                unclippedReadQuals = read.getBaseQualities();\n\n                // Do a stricter base clipping than provided by CIGAR string, since this one may be too conservative,\n                // and may leave a string of Q2 bases still hanging off the reads.\n                for (int i=numStartSoftClippedBases; i < unclippedReadBases.length; i++) {\n                    if (unclippedReadQuals[i] < BASE_QUAL_THRESHOLD)\n                        numStartClippedBases++;\n                    else\n                        break;\n\n                }\n                for (int i=unclippedReadBases.length-numEndSoftClippedBases-1; i >= 0; i-- ){\n                    if (unclippedReadQuals[i] < BASE_QUAL_THRESHOLD)\n                        numEndClippedBases++;\n                    else\n                        break;\n                }\n\n                int extraOffset = Math.abs(eventLength);\n\n                long start = Math.max(readStart + numStartClippedBases - trailingBases - ReadUtils.getFirstInsertionOffset(read)-extraOffset, 0);\n                long stop =  readEnd -numEndClippedBases  + trailingBases + ReadUtils.getLastInsertionOffset(read)+extraOffset;\n\n                // Variables start and stop are coordinates (inclusive) where we want to get the haplotype from.\n                int readLength = read.getReadLength()-numStartSoftClippedBases-numEndSoftClippedBases;\n                // check if start of read will be before start of reference context\n                if (start < ref.getWindow().getStart())// read starts before haplotype: read will have to be cut\n                    start = ref.getWindow().getStart();\n\n                // check also if end of read will go beyond reference context\n                if (stop > ref.getWindow().getStop())\n                    stop = ref.getWindow().getStop();\n\n                // if there's an insertion in the read, the read stop position will be less than start + read legnth,\n                // but we want to compute likelihoods in the whole region that a read might overlap\n                if (stop <= start + readLength) {\n                    stop = start + readLength-1;\n                }\n\n                // ok, we now figured out total number of clipped bases on both ends.\n                // Figure out where we want to place the haplotype to score read against\n                /*\n               if (DEBUG)\n                   System.out.format(\"numStartClippedBases: %d numEndClippedBases: %d WinStart:%d WinStop:%d start: %d stop: %d readLength: %d\\n\",\n                           numStartClippedBases, numEndClippedBases, ref.getWindow().getStart(), ref.getWindow().getStop(), start, stop, read.getReadLength());\n                */\n\n\n                LinkedHashMap<Allele,Double> readEl = new LinkedHashMap<Allele,Double>();\n\n                if (numStartClippedBases + numEndClippedBases >= unclippedReadBases.length) {\n                    int j=0;\n                    for (Allele a: haplotypeMap.keySet()) {\n                        readEl.put(a,0.0);\n                        readLikelihoods[readIdx][j++] = 0.0;\n                    }\n\n                }\n                else {\n                    byte[] readBases = Arrays.copyOfRange(unclippedReadBases,numStartClippedBases,\n                            unclippedReadBases.length-numEndClippedBases);\n\n                    byte[] readQuals = Arrays.copyOfRange(unclippedReadQuals,numStartClippedBases,\n                            unclippedReadBases.length-numEndClippedBases);\n\n                    int j=0;\n                    for (Allele a: haplotypeMap.keySet()) {\n\n\n                        Haplotype haplotype = haplotypeMap.get(a);\n                        if (stop > haplotype.getStopPosition())\n                            stop = haplotype.getStopPosition();\n\n                        if (start < haplotype.getStartPosition())\n                            start = haplotype.getStartPosition();\n\n                        // cut haplotype bases\n                        long indStart = start - haplotype.getStartPosition();\n                        long indStop =  stop - haplotype.getStartPosition();\n\n                        byte[] haplotypeBases = Arrays.copyOfRange(haplotype.getBasesAsBytes(),\n                                (int)indStart, (int)indStop);\n\n                        final double[] currentContextGOP = Arrays.copyOfRange(gapOpenProbabilityMap.get(a), (int)indStart, (int)indStop);\n                        final double[] currentContextGCP = Arrays.copyOfRange(gapContProbabilityMap.get(a), (int)indStart, (int)indStop);\n                        final double readLikelihood = computeReadLikelihoodGivenHaplotypeAffineGaps(haplotypeBases, readBases, readQuals,\n                                currentContextGOP, currentContextGCP, eventLength);\n\n                        readEl.put(a,readLikelihood);\n                        readLikelihoods[readIdx][j++] = readLikelihood;\n                    }\n                }\n                indelLikelihoodMap.put(p,readEl);\n            }\n            readIdx++;\n        }\n\n        if (DEBUG) {\n            System.out.println(\"\\nLikelihood summary\");\n            for (readIdx=0; readIdx < pileup.size(); readIdx++) {\n                System.out.format(\"Read Index: %d \",readIdx);\n                for (int i=0; i < readLikelihoods[readIdx].length; i++)\n                    System.out.format(\"L%d: %f \",i,readLikelihoods[readIdx][i]);\n                System.out.println();\n            }\n\n        }\n\n        return getHaplotypeLikelihoods(numHaplotypes, readCounts, readLikelihoods);\n    }","commit_id":"98ecaf8aa0c0507f3f6774cc3065604648e210d6","url":"https://github.com/broadgsa/gatk"},{"original_method":"public int getReducedCount() {\n        if ( ! isReducedRead() ) throw new IllegalArgumentException(\"Cannot get reduced count for non-reduced read \" + getRead().getReadName());\n        return (int)getQual();\n    }","id":46500,"modified_method":"public int getReducedCount() {\n        if ( ! isReducedRead() ) throw new IllegalArgumentException(\"Cannot get reduced count for non-reduced read \" + getRead().getReadName());\n        return ReadUtils.getReducedCount(getRead(), offset);\n    }","commit_id":"98ecaf8aa0c0507f3f6774cc3065604648e210d6","url":"https://github.com/broadgsa/gatk"},{"original_method":"public byte getReducedQual() {\n        return (byte)(int)ReadUtils.getReducedReadQualityTagValue(getRead());\n    }","id":46501,"modified_method":"public byte getReducedQual() {\n        if ( ! isReducedRead() ) throw new IllegalArgumentException(\"Cannot get reduced qual for non-reduced read \" + getRead().getReadName());\n        return ReadUtils.getReducedQual(getRead(), offset);\n    }","commit_id":"98ecaf8aa0c0507f3f6774cc3065604648e210d6","url":"https://github.com/broadgsa/gatk"},{"original_method":"public final static SAMRecord reducedReadWithReducedQuals(final SAMRecord read) {\n        if ( ! isReducedRead(read) ) throw new IllegalArgumentException(\"read must be a reduced read\");\n        try {\n            SAMRecord newRead = (SAMRecord)read.clone();\n            byte reducedQual = (byte)(int)getReducedReadQualityTagValue(read);\n            byte[] newQuals = new byte[read.getBaseQualities().length];\n            Arrays.fill(newQuals, reducedQual);\n            newRead.setBaseQualities(newQuals);\n            return newRead;\n        } catch ( CloneNotSupportedException e ) {\n            throw new ReviewedStingException(\"SAMRecord no longer supports clone\", e);\n        }\n    }","id":46502,"modified_method":"public final static SAMRecord reducedReadWithReducedQuals(final SAMRecord read) {\n        if ( ! isReducedRead(read) ) throw new IllegalArgumentException(\"read must be a reduced read\");\n        return read;\n//        try {\n//            SAMRecord newRead = (SAMRecord)read.clone();\n//            byte reducedQual = (byte)(int)getReducedReadQualityTagValue(read);\n//            byte[] newQuals = new byte[read.getBaseQualities().length];\n//            Arrays.fill(newQuals, reducedQual);\n//            newRead.setBaseQualities(newQuals);\n//            return newRead;\n//        } catch ( CloneNotSupportedException e ) {\n//            throw new ReviewedStingException(\"SAMRecord no longer supports clone\", e);\n//        }\n    }","commit_id":"98ecaf8aa0c0507f3f6774cc3065604648e210d6","url":"https://github.com/broadgsa/gatk"},{"original_method":"public final static Integer getReducedReadQualityTagValue(final SAMRecord read) {\n        return read.getIntegerAttribute(ReadUtils.REDUCED_READ_QUALITY_TAG);\n    }","id":46503,"modified_method":"public final static byte[] getReducedReadQualityTagValue(final SAMRecord read) {\n        return read.getByteArrayAttribute(ReadUtils.REDUCED_READ_QUALITY_TAG);\n    }","commit_id":"98ecaf8aa0c0507f3f6774cc3065604648e210d6","url":"https://github.com/broadgsa/gatk"},{"original_method":"@Test\n    public void testReducedReads() {\n        Assert.assertFalse(ReadUtils.isReducedRead(read), \"isReducedRead is false for normal read\");\n        Assert.assertEquals(ReadUtils.getReducedReadQualityTagValue(read), null, \"No reduced read tag in normal read\");\n\n        Assert.assertTrue(ReadUtils.isReducedRead(reducedRead), \"isReducedRead is true for reduced read\");\n        Assert.assertEquals((int) ReadUtils.getReducedReadQualityTagValue(reducedRead), REDUCED_READ_QUAL, \"Reduced read tag is set to expected value\");\n    }","id":46504,"modified_method":"@Test\n    public void testReducedReads() {\n        Assert.assertFalse(ReadUtils.isReducedRead(read), \"isReducedRead is false for normal read\");\n        Assert.assertEquals(ReadUtils.getReducedReadQualityTagValue(read), null, \"No reduced read tag in normal read\");\n\n        Assert.assertTrue(ReadUtils.isReducedRead(reducedRead), \"isReducedRead is true for reduced read\");\n        for ( int i = 0; i < reducedRead.getReadLength(); i++) {\n            Assert.assertEquals(ReadUtils.getReducedQual(reducedRead, i), read.getBaseQualities()[i], \"Reduced read quality not set to the expected value at \" + i);\n            Assert.assertEquals(ReadUtils.getReducedCount(reducedRead, i), REDUCED_READ_COUNTS[i], \"Reduced read count not set to the expected value at \" + i);\n        }\n    }","commit_id":"98ecaf8aa0c0507f3f6774cc3065604648e210d6","url":"https://github.com/broadgsa/gatk"},{"original_method":"@BeforeTest\n    public void init() {\n        SAMFileHeader header = ArtificialSAMUtils.createArtificialSamHeader(1,1,1000);\n        read = ArtificialSAMUtils.createArtificialRead(header, \"read1\", 0, 1, BASES.length());\n        read.setReadUnmappedFlag(true);\n        read.setReadBases(new String(BASES).getBytes());\n        read.setBaseQualityString(new String(QUALS));\n\n        reducedRead = ArtificialSAMUtils.createArtificialRead(header, \"reducedRead\", 0, 1, BASES.length());\n        reducedRead.setReadBases(BASES.getBytes());\n        reducedRead.setBaseQualityString(QUALS);\n        reducedRead.setAttribute(ReadUtils.REDUCED_READ_QUALITY_TAG, REDUCED_READ_QUAL);\n    }","id":46505,"modified_method":"@BeforeTest\n    public void init() {\n        SAMFileHeader header = ArtificialSAMUtils.createArtificialSamHeader(1,1,1000);\n        read = ArtificialSAMUtils.createArtificialRead(header, \"read1\", 0, 1, BASES.length());\n        read.setReadUnmappedFlag(true);\n        read.setReadBases(new String(BASES).getBytes());\n        read.setBaseQualityString(new String(QUALS));\n\n        reducedRead = ArtificialSAMUtils.createArtificialRead(header, \"reducedRead\", 0, 1, BASES.length());\n        reducedRead.setReadBases(BASES.getBytes());\n        reducedRead.setBaseQualityString(QUALS);\n        reducedRead.setAttribute(ReadUtils.REDUCED_READ_QUALITY_TAG, REDUCED_READ_COUNTS);\n    }","commit_id":"98ecaf8aa0c0507f3f6774cc3065604648e210d6","url":"https://github.com/broadgsa/gatk"},{"original_method":"@Test\n    public void testReducedReadPileupElement() {\n        PileupElement readp = new PileupElement(read,0);\n        PileupElement reducedreadp = new PileupElement(reducedRead,0);\n\n        Assert.assertFalse(readp.isReducedRead());\n\n        Assert.assertTrue(reducedreadp.isReducedRead());\n        Assert.assertEquals(reducedreadp.getReducedCount(), 0);\n        Assert.assertEquals(reducedreadp.getReducedQual(), REDUCED_READ_QUAL);\n\n    }","id":46506,"modified_method":"@Test\n    public void testReducedReadPileupElement() {\n        PileupElement readp = new PileupElement(read,0);\n        PileupElement reducedreadp = new PileupElement(reducedRead,0);\n\n        Assert.assertFalse(readp.isReducedRead());\n\n        Assert.assertTrue(reducedreadp.isReducedRead());\n        Assert.assertEquals(reducedreadp.getReducedCount(), REDUCED_READ_COUNTS[0]);\n        Assert.assertEquals(reducedreadp.getReducedQual(), readp.getQual());\n    }","commit_id":"98ecaf8aa0c0507f3f6774cc3065604648e210d6","url":"https://github.com/broadgsa/gatk"},{"original_method":"private void callRScripts() {\n        int numReadGroups = 0;\n\n        // for each read group\n        for( Object readGroupKey : dataManager.getCollapsedTable(0).data.keySet() ) {\n            if(++numReadGroups <= NUM_READ_GROUPS_TO_PROCESS || NUM_READ_GROUPS_TO_PROCESS == -1) {\n\n                String readGroup = readGroupKey.toString();\n                logger.info(\"Analyzing read group: \" + readGroup);\n\n                // for each covariate\n                for( int iii = 1; iii < requestedCovariates.size(); iii++ ) {\n                    Covariate cov = requestedCovariates.get(iii);\n                    final File outputFile = new File(OUTPUT_DIR, readGroup + \".\" + cov.getClass().getSimpleName()+ \".dat\");\n                    if (DO_INDEL_QUALITY) {\n                        RScriptExecutor executor = new RScriptExecutor();\n                        executor.addScript(new Resource(PLOT_INDEL_QUALITY_RSCRIPT, AnalyzeCovariates.class));\n                        // The second argument is the name of the covariate in order to make the plots look nice\n                        executor.addArgs(outputFile, cov.getClass().getSimpleName().split(\"Covariate\")[0]);\n                        executor.exec();\n                    }   else {\n                        if( iii == 1 ) {\n                            // Analyze reported quality\n                            RScriptExecutor executor = new RScriptExecutor();\n                            executor.addScript(new Resource(PLOT_RESDIUAL_ERROR_QUALITY_SCORE_COVARIATE, AnalyzeCovariates.class));\n                            // The second argument is the Q scores that should be turned pink in the plot because they were ignored\n                            executor.addArgs(outputFile, IGNORE_QSCORES_LESS_THAN, MAX_QUALITY_SCORE, MAX_HISTOGRAM_VALUE);\n                            executor.exec();\n                        } else { // Analyze all other covariates\n                            RScriptExecutor executor = new RScriptExecutor();\n                            executor.addScript(new Resource(PLOT_RESDIUAL_ERROR_OTHER_COVARIATE, AnalyzeCovariates.class));\n                            // The second argument is the name of the covariate in order to make the plots look nice\n                            executor.addArgs(outputFile, cov.getClass().getSimpleName().split(\"Covariate\")[0]);\n                            executor.exec();\n                        }\n                    }\n                }\n            } else { // at the maximum number of read groups so break out\n                break;\n            }\n        }\n    }","id":46507,"modified_method":"private void callRScripts() {\n        int numReadGroups = 0;\n\n        // for each read group\n        for( Object readGroupKey : dataManager.getCollapsedTable(0).data.keySet() ) {\n            if(++numReadGroups <= NUM_READ_GROUPS_TO_PROCESS || NUM_READ_GROUPS_TO_PROCESS == -1) {\n\n                String readGroup = readGroupKey.toString();\n                logger.info(\"Analyzing read group: \" + readGroup);\n\n                // for each covariate\n                for( int iii = 1; iii < requestedCovariates.size(); iii++ ) {\n                    final Covariate cov = requestedCovariates.get(iii);\n                    final File outputFile = new File(OUTPUT_DIR, readGroup + \".\" + cov.getClass().getSimpleName()+ \".dat\");\n                    if (DO_INDEL_QUALITY) {\n                        RScriptExecutor executor = new RScriptExecutor();\n                        executor.addScript(new Resource(PLOT_INDEL_QUALITY_RSCRIPT, AnalyzeCovariates.class));\n                        // The second argument is the name of the covariate in order to make the plots look nice\n                        executor.addArgs(outputFile, cov.getClass().getSimpleName().split(\"Covariate\")[0]);\n                        executor.exec();\n                    } else {\n                        if( iii == 1 ) {\n                            // Analyze reported quality\n                            RScriptExecutor executor = new RScriptExecutor();\n                            executor.addScript(new Resource(PLOT_RESDIUAL_ERROR_QUALITY_SCORE_COVARIATE, AnalyzeCovariates.class));\n                            // The second argument is the Q scores that should be turned pink in the plot because they were ignored\n                            executor.addArgs(outputFile, IGNORE_QSCORES_LESS_THAN, MAX_QUALITY_SCORE, MAX_HISTOGRAM_VALUE);\n                            executor.exec();\n                        } else { // Analyze all other covariates\n                            RScriptExecutor executor = new RScriptExecutor();\n                            executor.addScript(new Resource(PLOT_RESDIUAL_ERROR_OTHER_COVARIATE, AnalyzeCovariates.class));\n                            // The second argument is the name of the covariate in order to make the plots look nice\n                            executor.addArgs(outputFile, cov.getClass().getSimpleName().split(\"Covariate\")[0]);\n                            executor.exec();\n                        }\n                    }\n                }\n            } else { // at the maximum number of read groups so break out\n                break;\n            }\n        }\n    }","commit_id":"894d3340be2a95a15c6c91f4785e8d8f1ef5776b","url":"https://github.com/broadgsa/gatk"},{"original_method":"/**\n     * For each read at this locus get the various covariate values and increment that location in the map based on\n     *   whether or not the base matches the reference at this particular location\n     * @param tracker The reference metadata tracker\n     * @param ref The reference context\n     * @param context The alignment context\n     * @return Returns 1, but this value isn't used in the reduce step\n     */\n    public CountedData map( RefMetaDataTracker tracker, ReferenceContext ref, AlignmentContext context ) {\n        // Only use data from non-dbsnp sites\n        // Assume every mismatch at a non-dbsnp site is indicative of poor quality\n        CountedData counter = new CountedData();\n        if( tracker.getValues(knownSites).size() == 0 ) { // If something here is in one of the knownSites tracks then skip over it, otherwise proceed\n            // For each read at this locus\n            for( final PileupElement p : context.getBasePileup() ) {\n                final GATKSAMRecord gatkRead = (GATKSAMRecord) p.getRead();\n                int offset = p.getOffset();\n\n                if( gatkRead.containsTemporaryAttribute( SKIP_RECORD_ATTRIBUTE ) ) {\n                    continue;\n                }\n\n                if( !gatkRead.containsTemporaryAttribute( SEEN_ATTRIBUTE ) )\n                {\n                    gatkRead.setTemporaryAttribute( SEEN_ATTRIBUTE, true );\n                    RecalDataManager.parseSAMRecord( gatkRead, RAC );\n\n                    // Skip over reads with no calls in the color space if the user requested it\n                    if( !(RAC.SOLID_NOCALL_STRATEGY == RecalDataManager.SOLID_NOCALL_STRATEGY.THROW_EXCEPTION) && RecalDataManager.checkNoCallColorSpace( gatkRead ) ) {\n                        gatkRead.setTemporaryAttribute( SKIP_RECORD_ATTRIBUTE, true);\n                        continue;\n                    }\n\n                    RecalDataManager.parseColorSpace( gatkRead );\n                    gatkRead.setTemporaryAttribute( COVARS_ATTRIBUTE,\n                            RecalDataManager.computeCovariates( gatkRead, requestedCovariates ));\n                }\n\n                // Skip this position if base quality is zero\n                if( gatkRead.getBaseQualities()[offset] > 0 ) {\n\n                    byte[] bases = gatkRead.getReadBases();\n                    byte refBase = ref.getBase();\n\n                    // Skip if this base is an 'N' or etc.\n                    if( BaseUtils.isRegularBase( bases[offset] ) ) {\n\n                        // SOLID bams have inserted the reference base into the read if the color space in inconsistent with the read base so skip it\n                        if( !gatkRead.getReadGroup().getPlatform().toUpperCase().contains(\"SOLID\") || RAC.SOLID_RECAL_MODE == RecalDataManager.SOLID_RECAL_MODE.DO_NOTHING ||\n                            !RecalDataManager.isInconsistentColorSpace( gatkRead, offset ) ) {\n\n                            // This base finally passed all the checks for a good base, so add it to the big data hashmap\n                            updateDataFromRead( counter, gatkRead, offset, refBase );\n\n                        } else { // calculate SOLID reference insertion rate\n                            if( refBase == bases[offset] ) {\n                                counter.solidInsertedReferenceBases++;\n                            } else {\n                                counter.otherColorSpaceInconsistency++;\n                            }\n                        }\n                    }\n                }\n            }\n            counter.countedSites++;\n        } else { // We skipped over the dbSNP site, and we are only processing every Nth locus\n            counter.skippedSites++;\n            updateMismatchCounts(counter, context, ref.getBase()); // For sanity check to ensure novel mismatch rate vs dnsnp mismatch rate is reasonable\n        }\n\n        return counter;\n    }","id":46508,"modified_method":"/**\n     * For each read at this locus get the various covariate values and increment that location in the map based on\n     *   whether or not the base matches the reference at this particular location\n     * @param tracker The reference metadata tracker\n     * @param ref The reference context\n     * @param context The alignment context\n     * @return Returns 1, but this value isn't used in the reduce step\n     */\n    public CountedData map( RefMetaDataTracker tracker, ReferenceContext ref, AlignmentContext context ) {\n        // Only use data from non-dbsnp sites\n        // Assume every mismatch at a non-dbsnp site is indicative of poor quality\n        CountedData counter = new CountedData();\n        if( tracker.getValues(knownSites).size() == 0 ) { // If something here is in one of the knownSites tracks then skip over it, otherwise proceed\n            // For each read at this locus\n            for( final PileupElement p : context.getBasePileup() ) {\n                final GATKSAMRecord gatkRead = p.getRead();\n                int offset = p.getOffset();\n\n                if( gatkRead.containsTemporaryAttribute( SKIP_RECORD_ATTRIBUTE ) ) {\n                    continue;\n                }\n\n                if( !gatkRead.containsTemporaryAttribute( SEEN_ATTRIBUTE ) )\n                {\n                    gatkRead.setTemporaryAttribute( SEEN_ATTRIBUTE, true );\n                    RecalDataManager.parseSAMRecord( gatkRead, RAC );\n\n                    // Skip over reads with no calls in the color space if the user requested it\n                    if( !(RAC.SOLID_NOCALL_STRATEGY == RecalDataManager.SOLID_NOCALL_STRATEGY.THROW_EXCEPTION) && RecalDataManager.checkNoCallColorSpace( gatkRead ) ) {\n                        gatkRead.setTemporaryAttribute( SKIP_RECORD_ATTRIBUTE, true);\n                        continue;\n                    }\n\n                    RecalDataManager.parseColorSpace( gatkRead );\n                    gatkRead.setTemporaryAttribute( COVARS_ATTRIBUTE,\n                            RecalDataManager.computeCovariates( gatkRead, requestedCovariates ));\n                }\n\n                // Skip this position if base quality is zero\n                if( gatkRead.getBaseQualities()[offset] > 0 ) {\n\n                    byte[] bases = gatkRead.getReadBases();\n                    byte refBase = ref.getBase();\n\n                    // Skip if this base is an 'N' or etc.\n                    if( BaseUtils.isRegularBase( bases[offset] ) ) {\n\n                        // SOLID bams have inserted the reference base into the read if the color space in inconsistent with the read base so skip it\n                        if( !gatkRead.getReadGroup().getPlatform().toUpperCase().contains(\"SOLID\") || RAC.SOLID_RECAL_MODE == RecalDataManager.SOLID_RECAL_MODE.DO_NOTHING ||\n                            !RecalDataManager.isInconsistentColorSpace( gatkRead, offset ) ) {\n\n                            // This base finally passed all the checks for a good base, so add it to the big data hashmap\n                            updateDataFromRead( counter, gatkRead, offset, refBase );\n\n                        } else { // calculate SOLID reference insertion rate\n                            if( refBase == bases[offset] ) {\n                                counter.solidInsertedReferenceBases++;\n                            } else {\n                                counter.otherColorSpaceInconsistency++;\n                            }\n                        }\n                    }\n                }\n            }\n            counter.countedSites++;\n        } else { // We skipped over the dbSNP site, and we are only processing every Nth locus\n            counter.skippedSites++;\n            updateMismatchCounts(counter, context, ref.getBase()); // For sanity check to ensure novel mismatch rate vs dnsnp mismatch rate is reasonable\n        }\n\n        return counter;\n    }","commit_id":"894d3340be2a95a15c6c91f4785e8d8f1ef5776b","url":"https://github.com/broadgsa/gatk"},{"original_method":"/**\n     * For each base in the read calculate a new recalibrated quality score and replace the quality scores in the read\n     *\n     * @param refBases References bases over the length of the read\n     * @param read The read to be recalibrated\n     * @return The read with quality scores replaced\n     */\n    public SAMRecord map( ReferenceContext refBases, GATKSAMRecord read, ReadMetaDataTracker metaDataTracker  ) {\n\n        if( read.getReadLength() == 0 ) { // Some reads have '*' as the SEQ field and samtools returns length zero. We don't touch these reads.\n            return read;\n        }\n\n        RecalDataManager.parseSAMRecord( read, RAC );\n\n        byte[] originalQuals = read.getBaseQualities();\n        final byte[] recalQuals = originalQuals.clone();\n\n        final String platform = read.getReadGroup().getPlatform();\n        if( platform.toUpperCase().contains(\"SOLID\") && !(RAC.SOLID_RECAL_MODE == RecalDataManager.SOLID_RECAL_MODE.DO_NOTHING) ) {\n            if( !(RAC.SOLID_NOCALL_STRATEGY == RecalDataManager.SOLID_NOCALL_STRATEGY.THROW_EXCEPTION) ) {\n                final boolean badColor = RecalDataManager.checkNoCallColorSpace( read );\n                if( badColor ) {\n                    numReadsWithMalformedColorSpace++;\n                    if( RAC.SOLID_NOCALL_STRATEGY == RecalDataManager.SOLID_NOCALL_STRATEGY.LEAVE_READ_UNRECALIBRATED ) {\n                        return read; // can't recalibrate a SOLiD read with no calls in the color space, and the user wants to skip over them\n                    } else if ( RAC.SOLID_NOCALL_STRATEGY == RecalDataManager.SOLID_NOCALL_STRATEGY.PURGE_READ ) {\n                        read.setReadFailsVendorQualityCheckFlag(true);\n                        return read;\n                    }\n                }\n            }\n            originalQuals = RecalDataManager.calcColorSpace( read, originalQuals, RAC.SOLID_RECAL_MODE, refBases == null ? null : refBases.getBases() );\n        }\n\n        //compute all covariate values for this read\n        final Comparable[][] covariateValues_offset_x_covar =\n            RecalDataManager.computeCovariates((GATKSAMRecord) read, requestedCovariates);\n\n        // For each base in the read\n        for( int offset = 0; offset < read.getReadLength(); offset++ ) {\n\n            final Object[] fullCovariateKey = covariateValues_offset_x_covar[offset];\n\n            Byte qualityScore = (Byte) qualityScoreByFullCovariateKey.get(fullCovariateKey);\n            if(qualityScore == null)\n            {\n                qualityScore = performSequentialQualityCalculation( fullCovariateKey );\n                qualityScoreByFullCovariateKey.put(qualityScore, fullCovariateKey);\n            }\n\n            recalQuals[offset] = qualityScore;\n        }\n\n        preserveQScores( originalQuals, recalQuals ); // Overwrite the work done if original quality score is too low\n\n        read.setBaseQualities( recalQuals ); // Overwrite old qualities with new recalibrated qualities\n        if ( !DO_NOT_WRITE_OQ && read.getAttribute(RecalDataManager.ORIGINAL_QUAL_ATTRIBUTE_TAG) == null ) { // Save the old qualities if the tag isn't already taken in the read\n            read.setAttribute(RecalDataManager.ORIGINAL_QUAL_ATTRIBUTE_TAG, SAMUtils.phredToFastq(originalQuals));\n        }\n\n        if (! skipUQUpdate && refBases != null && read.getAttribute(SAMTag.UQ.name()) != null) {\n            read.setAttribute(SAMTag.UQ.name(), SequenceUtil.sumQualitiesOfMismatches(read, refBases.getBases(), read.getAlignmentStart() - 1, false));\n        }\n\n        if (RAC.SOLID_RECAL_MODE == RecalDataManager.SOLID_RECAL_MODE.SET_Q_ZERO_BASE_N && refBases != null && read.getAttribute(SAMTag.NM.name()) != null) {\n            read.setAttribute(SAMTag.NM.name(), SequenceUtil.calculateSamNmTag(read, refBases.getBases(), read.getAlignmentStart() - 1, false));\n        }\n\n        return read;\n    }","id":46509,"modified_method":"/**\n     * For each base in the read calculate a new recalibrated quality score and replace the quality scores in the read\n     *\n     * @param refBases References bases over the length of the read\n     * @param read The read to be recalibrated\n     * @return The read with quality scores replaced\n     */\n    public SAMRecord map( ReferenceContext refBases, GATKSAMRecord read, ReadMetaDataTracker metaDataTracker  ) {\n\n        if( read.getReadLength() == 0 ) { // Some reads have '*' as the SEQ field and samtools returns length zero. We don't touch these reads.\n            return read;\n        }\n\n        RecalDataManager.parseSAMRecord( read, RAC );\n\n        byte[] originalQuals = read.getBaseQualities();\n        final byte[] recalQuals = originalQuals.clone();\n\n        final String platform = read.getReadGroup().getPlatform();\n        if( platform.toUpperCase().contains(\"SOLID\") && !(RAC.SOLID_RECAL_MODE == RecalDataManager.SOLID_RECAL_MODE.DO_NOTHING) ) {\n            if( !(RAC.SOLID_NOCALL_STRATEGY == RecalDataManager.SOLID_NOCALL_STRATEGY.THROW_EXCEPTION) ) {\n                final boolean badColor = RecalDataManager.checkNoCallColorSpace( read );\n                if( badColor ) {\n                    numReadsWithMalformedColorSpace++;\n                    if( RAC.SOLID_NOCALL_STRATEGY == RecalDataManager.SOLID_NOCALL_STRATEGY.LEAVE_READ_UNRECALIBRATED ) {\n                        return read; // can't recalibrate a SOLiD read with no calls in the color space, and the user wants to skip over them\n                    } else if ( RAC.SOLID_NOCALL_STRATEGY == RecalDataManager.SOLID_NOCALL_STRATEGY.PURGE_READ ) {\n                        read.setReadFailsVendorQualityCheckFlag(true);\n                        return read;\n                    }\n                }\n            }\n            originalQuals = RecalDataManager.calcColorSpace( read, originalQuals, RAC.SOLID_RECAL_MODE, refBases == null ? null : refBases.getBases() );\n        }\n\n        //compute all covariate values for this read\n        final Comparable[][] covariateValues_offset_x_covar =\n            RecalDataManager.computeCovariates(read, requestedCovariates);\n\n        // For each base in the read\n        for( int offset = 0; offset < read.getReadLength(); offset++ ) {\n\n            final Object[] fullCovariateKey = covariateValues_offset_x_covar[offset];\n\n            Byte qualityScore = (Byte) qualityScoreByFullCovariateKey.get(fullCovariateKey);\n            if(qualityScore == null)\n            {\n                qualityScore = performSequentialQualityCalculation( fullCovariateKey );\n                qualityScoreByFullCovariateKey.put(qualityScore, fullCovariateKey);\n            }\n\n            recalQuals[offset] = qualityScore;\n        }\n\n        preserveQScores( originalQuals, recalQuals ); // Overwrite the work done if original quality score is too low\n\n        read.setBaseQualities( recalQuals ); // Overwrite old qualities with new recalibrated qualities\n        if ( !DO_NOT_WRITE_OQ && read.getAttribute(RecalDataManager.ORIGINAL_QUAL_ATTRIBUTE_TAG) == null ) { // Save the old qualities if the tag isn't already taken in the read\n            read.setAttribute(RecalDataManager.ORIGINAL_QUAL_ATTRIBUTE_TAG, SAMUtils.phredToFastq(originalQuals));\n        }\n\n        if (! skipUQUpdate && refBases != null && read.getAttribute(SAMTag.UQ.name()) != null) {\n            read.setAttribute(SAMTag.UQ.name(), SequenceUtil.sumQualitiesOfMismatches(read, refBases.getBases(), read.getAlignmentStart() - 1, false));\n        }\n\n        if (RAC.SOLID_RECAL_MODE == RecalDataManager.SOLID_RECAL_MODE.SET_Q_ZERO_BASE_N && refBases != null && read.getAttribute(SAMTag.NM.name()) != null) {\n            read.setAttribute(SAMTag.NM.name(), SequenceUtil.calculateSamNmTag(read, refBases.getBases(), read.getAlignmentStart() - 1, false));\n        }\n\n        return read;\n    }","commit_id":"894d3340be2a95a15c6c91f4785e8d8f1ef5776b","url":"https://github.com/broadgsa/gatk"},{"original_method":"@Override\n    public T traverse( final ActiveRegionWalker<M,T> walker,\n                       final LocusShardDataProvider dataProvider,\n                       T sum) {\n        logger.debug(String.format(\"TraverseActiveRegion.traverse: Shard is %s\", dataProvider));\n\n        final LocusView locusView = getLocusView( walker, dataProvider );\n        final GenomeLocSortedSet initialIntervals = engine.getIntervals(); // BUGBUG: unfortunate inefficiency that needs to be removed\n\n        final LocusReferenceView referenceView = new LocusReferenceView( walker, dataProvider );\n        final int activeRegionExtension = walker.getClass().getAnnotation(ActiveRegionExtension.class).extension();\n\n        if ( locusView.hasNext() ) { // trivial optimization to avoid unnecessary processing when there's nothing here at all\n\n            int minStart = Integer.MAX_VALUE;\n            final ArrayList<Double> isActiveList = new ArrayList<Double>();\n            GenomeLoc firstIsActiveStart = null;\n\n            //ReferenceOrderedView referenceOrderedDataView = new ReferenceOrderedView( dataProvider );\n            ReferenceOrderedView referenceOrderedDataView = null;\n            if ( WalkerManager.getWalkerDataSource(walker) != DataSource.REFERENCE_ORDERED_DATA )\n                referenceOrderedDataView = new ManagingReferenceOrderedView( dataProvider );\n            else\n                referenceOrderedDataView = (RodLocusView)locusView;\n\n            // We keep processing while the next reference location is within the interval\n            GenomeLoc prevLoc = null;\n            while( locusView.hasNext() ) {\n                final AlignmentContext locus = locusView.next();\n                GenomeLoc location = locus.getLocation();\n                if(prevLoc != null) {\n                    for(int iii = prevLoc.getStart() + 1; iii < location.getStart(); iii++ ) {       \n                        final GenomeLoc fakeLoc = engine.getGenomeLocParser().createGenomeLoc(prevLoc.getContig(), iii, iii);\n                        if( initialIntervals.overlaps( fakeLoc ) ) {\n                            final double isActiveProb = ( walker.presetActiveRegions == null ? walker.isActive( null, null, null )\n                                    : ( walker.presetActiveRegions.overlaps(fakeLoc) ? 1.0 : 0.0 ) );\n                            isActiveList.add( isActiveProb );\n                            if( firstIsActiveStart == null ) {\n                                firstIsActiveStart = fakeLoc;\n                            }\n                        }\n                    }\n                }\n\n                dataProvider.getShard().getReadMetrics().incrementNumIterations();\n\n                // create reference context. Note that if we have a pileup of \"extended events\", the context will\n                // hold the (longest) stretch of deleted reference bases (if deletions are present in the pileup).\n                final ReferenceContext refContext = referenceView.getReferenceContext(location);\n\n                // Iterate forward to get all reference ordered data covering this location\n                final RefMetaDataTracker tracker = referenceOrderedDataView.getReferenceOrderedDataAtLocus(locus.getLocation(), refContext);\n\n                // Call the walkers isActive function for this locus and add them to the list to be integrated later\n                if( initialIntervals.overlaps( location ) ) {\n                    final double isActiveProb = ( walker.presetActiveRegions == null ? walker.isActive( tracker, refContext, locus )\n                                                                                     : ( walker.presetActiveRegions.overlaps(location) ? 1.0 : 0.0 ) );\n                    isActiveList.add( isActiveProb );\n                    if( firstIsActiveStart == null ) {\n                        firstIsActiveStart = location;\n                    }\n                }\n\n                // Grab all the previously unseen reads from this pileup and add them to the massive read list\n                for( final PileupElement p : locus.getBasePileup() ) {\n                    final SAMRecord read = p.getRead();\n                    if( !myReads.contains(read) ) {\n                        myReads.add(read);\n                    }\n                }\n\n                // If this is the last pileup for this shard calculate the minimum alignment start so that we know \n                //   which active regions in the work queue are now safe to process\n                if( !locusView.hasNext() ) {\n                    for( final PileupElement p : locus.getBasePileup() ) {\n                        final SAMRecord read = p.getRead();\n                        if( !myReads.contains(read) ) {\n                            myReads.add(read);\n                        }\n                        if( read.getAlignmentStart() < minStart ) { minStart = read.getAlignmentStart(); }\n                    }\n                }\n                prevLoc = location;\n                printProgress(dataProvider.getShard(), locus.getLocation());\n            }\n\n            // Take the individual isActive calls and integrate them into contiguous active regions and\n            // add these blocks of work to the work queue\n            final ArrayList<ActiveRegion> activeRegions = integrateActiveList( isActiveList, firstIsActiveStart, activeRegionExtension, walker.presetActiveRegions != null );\n            logger.debug(\"Integrated \" + isActiveList.size() + \" isActive calls into \" + activeRegions.size() + \" regions.\" );\n            if( walker.activeRegionOutStream == null ) { \n                workQueue.addAll( activeRegions ); \n            } else { // Just want to output the active regions to a file, not actually process them\n                for( final ActiveRegion activeRegion : activeRegions ) {\n                    if( activeRegion.isActive ) {\n                        walker.activeRegionOutStream.println( activeRegion.getLocation() );\n                    }\n                }\n            }\n\n            // Since we've sufficiently past this point (or this contig!) in the workQueue we can unload those regions and process them\n            while( workQueue.peek() != null && (workQueue.peek().getExtendedLoc().getStop() < minStart || !workQueue.peek().getExtendedLoc().getContig().equals(dataProvider.getLocus().getContig())) ) {\n                final ActiveRegion activeRegion = workQueue.remove();\n                sum = processActiveRegion( activeRegion, myReads, workQueue, sum, walker );\n            }\n        }\n\n        return sum;\n    }","id":46510,"modified_method":"@Override\n    public T traverse( final ActiveRegionWalker<M,T> walker,\n                       final LocusShardDataProvider dataProvider,\n                       T sum) {\n        logger.debug(String.format(\"TraverseActiveRegion.traverse: Shard is %s\", dataProvider));\n\n        final LocusView locusView = getLocusView( walker, dataProvider );\n        final GenomeLocSortedSet initialIntervals = engine.getIntervals(); // BUGBUG: unfortunate inefficiency that needs to be removed\n\n        final LocusReferenceView referenceView = new LocusReferenceView( walker, dataProvider );\n        final int activeRegionExtension = walker.getClass().getAnnotation(ActiveRegionExtension.class).extension();\n\n        if ( locusView.hasNext() ) { // trivial optimization to avoid unnecessary processing when there's nothing here at all\n\n            int minStart = Integer.MAX_VALUE;\n            final ArrayList<Double> isActiveList = new ArrayList<Double>();\n            GenomeLoc firstIsActiveStart = null;\n\n            //ReferenceOrderedView referenceOrderedDataView = new ReferenceOrderedView( dataProvider );\n            ReferenceOrderedView referenceOrderedDataView = null;\n            if ( WalkerManager.getWalkerDataSource(walker) != DataSource.REFERENCE_ORDERED_DATA )\n                referenceOrderedDataView = new ManagingReferenceOrderedView( dataProvider );\n            else\n                referenceOrderedDataView = (RodLocusView)locusView;\n\n            // We keep processing while the next reference location is within the interval\n            GenomeLoc prevLoc = null;\n            while( locusView.hasNext() ) {\n                final AlignmentContext locus = locusView.next();\n                GenomeLoc location = locus.getLocation();\n                if(prevLoc != null) {\n                    for(int iii = prevLoc.getStart() + 1; iii < location.getStart(); iii++ ) {       \n                        final GenomeLoc fakeLoc = engine.getGenomeLocParser().createGenomeLoc(prevLoc.getContig(), iii, iii);\n                        if( initialIntervals.overlaps( fakeLoc ) ) {\n                            final double isActiveProb = ( walker.presetActiveRegions == null ? walker.isActive( null, null, null )\n                                    : ( walker.presetActiveRegions.overlaps(fakeLoc) ? 1.0 : 0.0 ) );\n                            isActiveList.add( isActiveProb );\n                            if( firstIsActiveStart == null ) {\n                                firstIsActiveStart = fakeLoc;\n                            }\n                        }\n                    }\n                }\n\n                dataProvider.getShard().getReadMetrics().incrementNumIterations();\n\n                // create reference context. Note that if we have a pileup of \"extended events\", the context will\n                // hold the (longest) stretch of deleted reference bases (if deletions are present in the pileup).\n                final ReferenceContext refContext = referenceView.getReferenceContext(location);\n\n                // Iterate forward to get all reference ordered data covering this location\n                final RefMetaDataTracker tracker = referenceOrderedDataView.getReferenceOrderedDataAtLocus(locus.getLocation(), refContext);\n\n                // Call the walkers isActive function for this locus and add them to the list to be integrated later\n                if( initialIntervals.overlaps( location ) ) {\n                    final double isActiveProb = ( walker.presetActiveRegions == null ? walker.isActive( tracker, refContext, locus )\n                                                                                     : ( walker.presetActiveRegions.overlaps(location) ? 1.0 : 0.0 ) );\n                    isActiveList.add( isActiveProb );\n                    if( firstIsActiveStart == null ) {\n                        firstIsActiveStart = location;\n                    }\n                }\n\n                // Grab all the previously unseen reads from this pileup and add them to the massive read list\n                for( final PileupElement p : locus.getBasePileup() ) {\n                    final GATKSAMRecord read = p.getRead();\n                    if( !myReads.contains(read) ) {\n                        myReads.add(read);\n                    }\n                }\n\n                // If this is the last pileup for this shard calculate the minimum alignment start so that we know \n                //   which active regions in the work queue are now safe to process\n                if( !locusView.hasNext() ) {\n                    for( final PileupElement p : locus.getBasePileup() ) {\n                        final GATKSAMRecord read = p.getRead();\n                        if( !myReads.contains(read) ) {\n                            myReads.add(read);\n                        }\n                        if( read.getAlignmentStart() < minStart ) { minStart = read.getAlignmentStart(); }\n                    }\n                }\n                prevLoc = location;\n                printProgress(dataProvider.getShard(), locus.getLocation());\n            }\n\n            // Take the individual isActive calls and integrate them into contiguous active regions and\n            // add these blocks of work to the work queue\n            final ArrayList<ActiveRegion> activeRegions = integrateActiveList( isActiveList, firstIsActiveStart, activeRegionExtension, walker.presetActiveRegions != null );\n            logger.debug(\"Integrated \" + isActiveList.size() + \" isActive calls into \" + activeRegions.size() + \" regions.\" );\n            if( walker.activeRegionOutStream == null ) { \n                workQueue.addAll( activeRegions ); \n            } else { // Just want to output the active regions to a file, not actually process them\n                for( final ActiveRegion activeRegion : activeRegions ) {\n                    if( activeRegion.isActive ) {\n                        walker.activeRegionOutStream.println( activeRegion.getLocation() );\n                    }\n                }\n            }\n\n            // Since we've sufficiently past this point (or this contig!) in the workQueue we can unload those regions and process them\n            while( workQueue.peek() != null && (workQueue.peek().getExtendedLoc().getStop() < minStart || !workQueue.peek().getExtendedLoc().getContig().equals(dataProvider.getLocus().getContig())) ) {\n                final ActiveRegion activeRegion = workQueue.remove();\n                sum = processActiveRegion( activeRegion, myReads, workQueue, sum, walker );\n            }\n        }\n\n        return sum;\n    }","commit_id":"894d3340be2a95a15c6c91f4785e8d8f1ef5776b","url":"https://github.com/broadgsa/gatk"},{"original_method":"private T processActiveRegion( final ActiveRegion activeRegion, final LinkedHashSet<SAMRecord> reads, final Queue<ActiveRegion> workQueue, final T sum, final ActiveRegionWalker<M,T> walker ) {\n        final ArrayList<SAMRecord> placedReads = new ArrayList<SAMRecord>();\n        for( final SAMRecord read : reads ) {\n            final GenomeLoc readLoc = this.engine.getGenomeLocParser().createGenomeLoc( read );\n            if( activeRegion.getLocation().overlapsP( readLoc ) ) {\n                // The region which the highest amount of overlap is chosen as the primary region for the read (tie breaking is done as right most region)\n                long maxOverlap = activeRegion.getLocation().sizeOfOverlap( readLoc );\n                ActiveRegion bestRegion = activeRegion;\n                for( final ActiveRegion otherRegionToTest : workQueue ) {\n                    if( otherRegionToTest.getLocation().sizeOfOverlap(readLoc) >= maxOverlap ) {\n                        maxOverlap = otherRegionToTest.getLocation().sizeOfOverlap( readLoc );\n                        bestRegion = otherRegionToTest;\n                    }\n                }\n                bestRegion.add( (GATKSAMRecord) read );\n\n                // The read is also added to all other regions in which it overlaps but marked as non-primary\n                if( walker.wantsNonPrimaryReads() ) {\n                    if( !bestRegion.equals(activeRegion) ) {\n                        activeRegion.add( (GATKSAMRecord) read );\n                    }\n                    for( final ActiveRegion otherRegionToTest : workQueue ) {\n                        if( !bestRegion.equals(otherRegionToTest) && otherRegionToTest.getExtendedLoc().overlapsP( readLoc ) ) {\n                            otherRegionToTest.add( (GATKSAMRecord) read );\n                        }\n                    }\n                }\n                placedReads.add( read );\n            } else if( activeRegion.getExtendedLoc().overlapsP( readLoc ) && walker.wantsNonPrimaryReads() ) {\n                activeRegion.add( (GATKSAMRecord) read );\n            }\n        }\n        reads.removeAll( placedReads ); // remove all the reads which have been placed into their active region\n\n        logger.debug(\">> Map call with \" + activeRegion.getReads().size() + \" \" + (activeRegion.isActive ? \"active\" : \"inactive\") + \" reads @ \" + activeRegion.getLocation() + \" with full extent: \" + activeRegion.getReferenceLoc());\n        final M x = walker.map( activeRegion, null ); // BUGBUG: tracker needs to be filled in and passed to the walker\n        return walker.reduce( x, sum );\n    }","id":46511,"modified_method":"private T processActiveRegion( final ActiveRegion activeRegion, final LinkedHashSet<GATKSAMRecord> reads, final Queue<ActiveRegion> workQueue, final T sum, final ActiveRegionWalker<M,T> walker ) {\n        final ArrayList<GATKSAMRecord> placedReads = new ArrayList<GATKSAMRecord>();\n        for( final GATKSAMRecord read : reads ) {\n            final GenomeLoc readLoc = this.engine.getGenomeLocParser().createGenomeLoc( read );\n            if( activeRegion.getLocation().overlapsP( readLoc ) ) {\n                // The region which the highest amount of overlap is chosen as the primary region for the read (tie breaking is done as right most region)\n                long maxOverlap = activeRegion.getLocation().sizeOfOverlap( readLoc );\n                ActiveRegion bestRegion = activeRegion;\n                for( final ActiveRegion otherRegionToTest : workQueue ) {\n                    if( otherRegionToTest.getLocation().sizeOfOverlap(readLoc) >= maxOverlap ) {\n                        maxOverlap = otherRegionToTest.getLocation().sizeOfOverlap( readLoc );\n                        bestRegion = otherRegionToTest;\n                    }\n                }\n                bestRegion.add( read );\n\n                // The read is also added to all other regions in which it overlaps but marked as non-primary\n                if( walker.wantsNonPrimaryReads() ) {\n                    if( !bestRegion.equals(activeRegion) ) {\n                        activeRegion.add( read );\n                    }\n                    for( final ActiveRegion otherRegionToTest : workQueue ) {\n                        if( !bestRegion.equals(otherRegionToTest) && otherRegionToTest.getExtendedLoc().overlapsP( readLoc ) ) {\n                            otherRegionToTest.add( read );\n                        }\n                    }\n                }\n                placedReads.add( read );\n            } else if( activeRegion.getExtendedLoc().overlapsP( readLoc ) && walker.wantsNonPrimaryReads() ) {\n                activeRegion.add( read );\n            }\n        }\n        reads.removeAll( placedReads ); // remove all the reads which have been placed into their active region\n\n        logger.debug(\">> Map call with \" + activeRegion.getReads().size() + \" \" + (activeRegion.isActive ? \"active\" : \"inactive\") + \" reads @ \" + activeRegion.getLocation() + \" with full extent: \" + activeRegion.getReferenceLoc());\n        final M x = walker.map( activeRegion, null ); // BUGBUG: tracker needs to be filled in and passed to the walker\n        return walker.reduce( x, sum );\n    }","commit_id":"894d3340be2a95a15c6c91f4785e8d8f1ef5776b","url":"https://github.com/broadgsa/gatk"},{"original_method":"/**\n   * @return Length of the generated label.\n   */\n  @SuppressWarnings({\"HardCodedStringLiteral\"})\n  public static int generateType(StringBuilder buffer, PsiType type, PsiElement context, boolean generateLink) {\n    if (type instanceof PsiPrimitiveType) {\n      String text = type.getCanonicalText();\n      buffer.append(text);\n      return text.length();\n    }\n\n    if (type instanceof PsiArrayType) {\n      int rest = generateType(buffer, ((PsiArrayType)type).getComponentType(), context, generateLink);\n      if ((type instanceof PsiEllipsisType)) {\n        buffer.append(\"...\");\n        return rest + 3;\n      }\n      else {\n        buffer.append(\"[]\");\n        return rest + 2;\n      }\n    }\n\n    if (type instanceof PsiCapturedWildcardType) {\n      type = ((PsiCapturedWildcardType)type).getWildcard();\n    }\n\n    if (type instanceof PsiWildcardType){\n      PsiWildcardType wt = ((PsiWildcardType)type);\n\n      buffer.append(\"?\");\n\n      PsiType bound = wt.getBound();\n\n      if (bound != null){\n        final String keyword = wt.isExtends() ? \" extends \" : \" super \";\n        buffer.append(keyword);\n        return generateType(buffer, bound, context, generateLink) + 1 + keyword.length();\n      }\n\n      return 1;\n    }\n\n    if (type instanceof PsiClassType) {\n      PsiClassType.ClassResolveResult result = ((PsiClassType)type).resolveGenerics();\n      PsiClass psiClass = result.getElement();\n      PsiSubstitutor psiSubst = result.getSubstitutor();\n\n      if (psiClass == null) {\n        String text = \"<font color=red>\" + type.getCanonicalText() + \"<\/font>\";\n        buffer.append(text);\n        return text.length();\n      }\n\n      String qName = psiClass.getQualifiedName();\n\n      if (qName == null || psiClass instanceof PsiTypeParameter) {\n        String text = type.getCanonicalText();\n        buffer.append(text);\n        return text.length();\n      }\n\n      int length;\n      if (generateLink) {\n        length = generateLink(buffer, qName, null, context, false);\n      }\n      else {\n        buffer.append(qName);\n        length = buffer.length();\n      }\n\n      if (psiClass.hasTypeParameters()) {\n        StringBuilder subst = new StringBuilder();\n        boolean goodSubst = true;\n\n        PsiTypeParameter[] params = psiClass.getTypeParameters();\n\n        subst.append(\"&lt;\");\n        for (int i = 0; i < params.length; i++) {\n          PsiType t = psiSubst.substitute(params[i]);\n\n          if (t == null) {\n            goodSubst = false;\n            break;\n          }\n\n          length += generateType(subst, t, context, generateLink);\n\n          if (i < params.length - 1) {\n            subst.append(\", \");\n          }\n        }\n\n        subst.append(\"&gt;\");\n        if (goodSubst) {\n          String text = subst.toString();\n\n          buffer.append(text);\n        }\n      }\n\n      return length;\n    }\n\n    if (type instanceof PsiDisjunctionType) {\n      if (!generateLink) {\n        final String text = type.getCanonicalText();\n        buffer.append(text);\n        return text.length();\n      }\n      else {\n        int length = 0;\n        for (PsiType psiType : ((PsiDisjunctionType)type).getDisjunctions()) {\n          if (length > 0) {\n            buffer.append(\" | \");\n            length += 3;\n          }\n          length += generateType(buffer, psiType, context, generateLink);\n        }\n        return length;\n      }\n    }\n\n    return 0;\n  }","id":46512,"modified_method":"/**\n   * @return Length of the generated label.\n   */\n  @SuppressWarnings({\"HardCodedStringLiteral\"})\n  public static int generateType(StringBuilder buffer, PsiType type, PsiElement context, boolean generateLink) {\n    if (type instanceof PsiPrimitiveType) {\n      String text = StringUtil.escapeXml(type.getCanonicalText());\n      buffer.append(text);\n      return text.length();\n    }\n\n    if (type instanceof PsiArrayType) {\n      int rest = generateType(buffer, ((PsiArrayType)type).getComponentType(), context, generateLink);\n      if ((type instanceof PsiEllipsisType)) {\n        buffer.append(\"...\");\n        return rest + 3;\n      }\n      else {\n        buffer.append(\"[]\");\n        return rest + 2;\n      }\n    }\n\n    if (type instanceof PsiCapturedWildcardType) {\n      type = ((PsiCapturedWildcardType)type).getWildcard();\n    }\n\n    if (type instanceof PsiWildcardType){\n      PsiWildcardType wt = ((PsiWildcardType)type);\n\n      buffer.append(\"?\");\n\n      PsiType bound = wt.getBound();\n\n      if (bound != null){\n        final String keyword = wt.isExtends() ? \" extends \" : \" super \";\n        buffer.append(keyword);\n        return generateType(buffer, bound, context, generateLink) + 1 + keyword.length();\n      }\n\n      return 1;\n    }\n\n    if (type instanceof PsiClassType) {\n      PsiClassType.ClassResolveResult result = ((PsiClassType)type).resolveGenerics();\n      PsiClass psiClass = result.getElement();\n      PsiSubstitutor psiSubst = result.getSubstitutor();\n\n      if (psiClass == null) {\n        String text = \"<font color=red>\" + StringUtil.escapeXml(type.getCanonicalText()) + \"<\/font>\";\n        buffer.append(text);\n        return text.length();\n      }\n\n      String qName = psiClass.getQualifiedName();\n\n      if (qName == null || psiClass instanceof PsiTypeParameter) {\n        String text = StringUtil.escapeXml(type.getCanonicalText());\n        buffer.append(text);\n        return text.length();\n      }\n\n      int length;\n      if (generateLink) {\n        length = generateLink(buffer, qName, null, context, false);\n      }\n      else {\n        buffer.append(qName);\n        length = buffer.length();\n      }\n\n      if (psiClass.hasTypeParameters()) {\n        StringBuilder subst = new StringBuilder();\n        boolean goodSubst = true;\n\n        PsiTypeParameter[] params = psiClass.getTypeParameters();\n\n        subst.append(\"&lt;\");\n        for (int i = 0; i < params.length; i++) {\n          PsiType t = psiSubst.substitute(params[i]);\n\n          if (t == null) {\n            goodSubst = false;\n            break;\n          }\n\n          length += generateType(subst, t, context, generateLink);\n\n          if (i < params.length - 1) {\n            subst.append(\", \");\n          }\n        }\n\n        subst.append(\"&gt;\");\n        if (goodSubst) {\n          String text = subst.toString();\n\n          buffer.append(text);\n        }\n      }\n\n      return length;\n    }\n\n    if (type instanceof PsiDisjunctionType) {\n      if (!generateLink) {\n        final String text = StringUtil.escapeXml(type.getCanonicalText());\n        buffer.append(text);\n        return text.length();\n      }\n      else {\n        int length = 0;\n        for (PsiType psiType : ((PsiDisjunctionType)type).getDisjunctions()) {\n          if (length > 0) {\n            buffer.append(\" | \");\n            length += 3;\n          }\n          length += generateType(buffer, psiType, context, generateLink);\n        }\n        return length;\n      }\n    }\n\n    return 0;\n  }","commit_id":"6551a3645986b277ff302af561be61e21e093472","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public String getQuickNavigateInfo(PsiElement element, PsiElement originalElement) {\n    String navigateInfo = null;\n    if (element instanceof PsiClass) {\n      navigateInfo = generateClassInfo((PsiClass)element);\n    }\n    else if (element instanceof PsiMethod) {\n      navigateInfo = generateMethodInfo((PsiMethod)element, calcSubstitutor(originalElement));\n    }\n    else if (element instanceof PsiField) {\n      navigateInfo = generateFieldInfo((PsiField)element, calcSubstitutor(originalElement));\n    }\n    else if (element instanceof PsiVariable) {\n      navigateInfo = generateVariableInfo((PsiVariable)element);\n    }\n    else if (element instanceof PsiPackage) {\n      navigateInfo = generatePackageInfo((PsiPackage)element);\n    }\n    else if (element instanceof BeanPropertyElement) {\n      navigateInfo = generateMethodInfo(((BeanPropertyElement) element).getMethod(), PsiSubstitutor.EMPTY);\n    }\n    return StringUtil.escapeXml(StringUtil.unescapeXml(navigateInfo));\n  }","id":46513,"modified_method":"@Override\n  public String getQuickNavigateInfo(PsiElement element, PsiElement originalElement) {\n    if (element instanceof PsiClass) {\n      return generateClassInfo((PsiClass)element);\n    }\n    else if (element instanceof PsiMethod) {\n      return generateMethodInfo((PsiMethod)element, calcSubstitutor(originalElement));\n    }\n    else if (element instanceof PsiField) {\n      return generateFieldInfo((PsiField)element, calcSubstitutor(originalElement));\n    }\n    else if (element instanceof PsiVariable) {\n      return generateVariableInfo((PsiVariable)element);\n    }\n    else if (element instanceof PsiPackage) {\n      return generatePackageInfo((PsiPackage)element);\n    }\n    else if (element instanceof BeanPropertyElement) {\n      return generateMethodInfo(((BeanPropertyElement) element).getMethod(), PsiSubstitutor.EMPTY);\n    }\n    return null;\n  }","commit_id":"6551a3645986b277ff302af561be61e21e093472","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public String getQuickNavigateInfo(PsiElement element, PsiElement originalElement) {\n    if (element instanceof PsiClass) {\n      return generateClassInfo((PsiClass)element);\n    }\n    else if (element instanceof PsiMethod) {\n      return generateMethodInfo((PsiMethod)element, calcSubstitutor(originalElement));\n    }\n    else if (element instanceof PsiField) {\n      return generateFieldInfo((PsiField)element, calcSubstitutor(originalElement));\n    }\n    else if (element instanceof PsiVariable) {\n      return generateVariableInfo((PsiVariable)element);\n    }\n    else if (element instanceof PsiPackage) {\n      return generatePackageInfo((PsiPackage)element);\n    }\n    else if (element instanceof BeanPropertyElement) {\n      return generateMethodInfo(((BeanPropertyElement) element).getMethod(), PsiSubstitutor.EMPTY);\n    }\n    return null;\n  }","id":46514,"modified_method":"@Override\n  public String getQuickNavigateInfo(PsiElement element, PsiElement originalElement) {\n    String navigateInfo = null;\n    if (element instanceof PsiClass) {\n      navigateInfo = generateClassInfo((PsiClass)element);\n    }\n    else if (element instanceof PsiMethod) {\n      navigateInfo = generateMethodInfo((PsiMethod)element, calcSubstitutor(originalElement));\n    }\n    else if (element instanceof PsiField) {\n      navigateInfo = generateFieldInfo((PsiField)element, calcSubstitutor(originalElement));\n    }\n    else if (element instanceof PsiVariable) {\n      navigateInfo = generateVariableInfo((PsiVariable)element);\n    }\n    else if (element instanceof PsiPackage) {\n      navigateInfo = generatePackageInfo((PsiPackage)element);\n    }\n    else if (element instanceof BeanPropertyElement) {\n      navigateInfo = generateMethodInfo(((BeanPropertyElement) element).getMethod(), PsiSubstitutor.EMPTY);\n    }\n    return StringUtil.escapeXml(StringUtil.unescapeXml(navigateInfo));\n  }","commit_id":"523a16503802b1d08fb2ebda37e8bd6302fcced3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void deploy() throws Exception  {\n\t\ttry {\n\t\t\tFile[] files = FileUtil.sortFiles(new File(baseDir).listFiles());\n\n\t\t\tfor (int i = 0; i < files.length; i++) {\n\t\t\t\tFile srcFile = files[i];\n\n\t\t\t\tString fileName = srcFile.getName().toLowerCase();\n\n\t\t\t\tboolean deploy = false;\n\n\t\t\t\tif (fileName.endsWith(\".war\") || fileName.endsWith(\".zip\")) {\n\t\t\t\t\tdeploy = true;\n\n\t\t\t\t\tif ((wars.size() > 0) && (!wars.contains(fileName))) {\n\t\t\t\t\t\tdeploy = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (deploy) {\n\t\t\t\t\tdeployFile(srcFile);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}","id":46515,"modified_method":"protected void deploy() throws Exception  {\n\t\ttry {\n\t\t\tFile[] files = FileUtil.sortFiles(new File(baseDir).listFiles());\n\n\t\t\tfor (int i = 0; i < files.length; i++) {\n\t\t\t\tFile srcFile = files[i];\n\n\t\t\t\tString fileName = srcFile.getName().toLowerCase();\n\n\t\t\t\tboolean deploy = false;\n\n\t\t\t\tif (fileName.endsWith(\".war\") || fileName.endsWith(\".zip\")) {\n\t\t\t\t\tdeploy = true;\n\n\t\t\t\t\tif ((wars.size() > 0) &&\n\t\t\t\t\t\t(!wars.contains(srcFile.getName()))) {\n\t\t\t\t\t\tdeploy = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (deploy) {\n\t\t\t\t\tdeployFile(srcFile);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}","commit_id":"625eaf7cf34624181ef79e5c355817138ed54603","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void main(String[] args) {\n\t\tList wars = new ArrayList();\n\t\tList jars = new ArrayList();\n\n\t\tfor (int i = 0; i < args.length; i++) {\n\t\t\tif (args[i].endsWith(\".war\")) {\n\t\t\t\twars.add(args[i]);\n\t\t\t}\n\t\t\telse if (args[i].endsWith(\".jar\")) {\n\t\t\t\tjars.add(args[i]);\n\t\t\t}\n\t\t}\n\n\t\tnew BaseDeployer(wars, jars);\n\t}","id":46516,"modified_method":"public static void main(String[] args) {\n\t\tList wars = new ArrayList();\n\t\tList jars = new ArrayList();\n\n\t\tfor (int i = 0; i < args.length; i++) {\n\t\t\tString fileName = args[i].toLowerCase();\n\n\t\t\tif (fileName.endsWith(\".war\")) {\n\t\t\t\twars.add(args[i]);\n\t\t\t}\n\t\t\telse if (fileName.endsWith(\".jar\")) {\n\t\t\t\tjars.add(args[i]);\n\t\t\t}\n\t\t}\n\n\t\tnew BaseDeployer(wars, jars);\n\t}","commit_id":"625eaf7cf34624181ef79e5c355817138ed54603","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void scanDirectory() {\n\t\tFile[] files = _deployDir.listFiles();\n\n\t\tfor (int i = 0; i < files.length; i++) {\n\t\t\tFile file = files[i];\n\n\t\t\tString fileName = file.getName();\n\n\t\t\tif (file.isFile() && fileName.endsWith(\".war\") ||\n\t\t\t\tfileName.endsWith(\".xml\")) {\n\n\t\t\t\tprocessFile(file);\n\t\t\t}\n\t\t}\n\t}","id":46517,"modified_method":"protected void scanDirectory() {\n\t\tFile[] files = _deployDir.listFiles();\n\n\t\tfor (int i = 0; i < files.length; i++) {\n\t\t\tFile file = files[i];\n\n\t\t\tString fileName = file.getName().toLowerCase();\n\n\t\t\tif ((file.isFile()) &&\n\t\t\t\t(fileName.endsWith(\".war\") || fileName.endsWith(\".zip\") ||\n\t\t\t\t fileName.endsWith(\".xml\"))) {\n\n\t\t\t\tprocessFile(file);\n\t\t\t}\n\t\t}\n\t}","commit_id":"b3d0962df9467ac111ecf5d1e16247581669556b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public boolean isMatchingFileExtension(File file) {\n\t\tif (file.getName().endsWith(\".war\")) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(file.getPath() + \" has a matching extension\");\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\tfile.getPath() + \" does not have a matching extension\");\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t}","id":46518,"modified_method":"public boolean isMatchingFileExtension(File file) {\n\t\tString fileName = file.getName().toLowerCase();\n\n\t\tif (fileName.endsWith(\".war\") || fileName.endsWith(\".zip\")) {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(file.getPath() + \" has a matching extension\");\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t_log.debug(\n\t\t\t\t\tfile.getPath() + \" does not have a matching extension\");\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t}","commit_id":"b3d0962df9467ac111ecf5d1e16247581669556b","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public boolean visit(NumberLiteral node) {\n      if (!node.getToken().endsWith(\"f\") && !node.getToken().endsWith(\"d\")) {\n        for (int i = 0; i < node.getToken().length(); i++) {\n          if (node.getToken().charAt(i) == '.') {\n            String s = node.getToken() + \"f\";\n            node.setToken(s);\n            break;\n          }\n        }\n      }\n      return true;\n    }","id":46519,"modified_method":"public boolean visit(NumberLiteral node) {\n      // Need to handle both 1.0F and 1.0D cases\n      // https://github.com/processing/processing/issues/3707\n      String lower = node.getToken().toLowerCase();\n      if (!lower.endsWith(\"f\") && !lower.endsWith(\"d\")) {\n        for (int i = 0; i < node.getToken().length(); i++) {\n          if (node.getToken().charAt(i) == '.') {\n            String s = node.getToken() + \"f\";\n            node.setToken(s);\n            break;\n          }\n        }\n      }\n      return true;\n    }","commit_id":"607d7b15e4f00dfd71db589ec6c22b27191775cd","url":"https://github.com/processing/processing"},{"original_method":"public DequeueResult(final QueueEntryPointer pointer, final byte [] value) {\n    this.pointer = pointer;\n    this.value = value;\n  }","id":46520,"modified_method":"private DequeueResult(final DequeueStatus status,\n      final QueueEntryPointer pointer, final byte [] value) {\n    this.status = status;\n    this.pointer = pointer;\n    this.value = value;\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public String toString() {\n    return Objects.toStringHelper(this)\n        .add(\"entryPointer\", this.pointer)\n        .add(\"value.length\", this.value != null ? this.value.length : 0)\n        .toString();\n  }","id":46521,"modified_method":"@Override\n  public String toString() {\n    return Objects.toStringHelper(this)\n        .add(\"status\", this.status)\n        .add(\"entryPointer\", this.pointer)\n        .add(\"value.length\", this.value != null ? this.value.length : 0)\n        .toString();\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"public OmidTransactionException(String msg) {\n    super(msg);\n  }","id":46522,"modified_method":"public OmidTransactionException(int status, String msg) {\n    super(status, msg);\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public QueueMeta execute(GetQueueMeta getQueueMeta) {\n    initialize();\n    requestMetric(\"GetQueueMeta\");\n    long begin = begin();\n    TTQueueTable table = getQueueTable(getQueueMeta.getQueueName());\n    QueueMeta queueMeta = table.getQueueMeta(getQueueMeta.getQueueName());\n    end(\"GetQueueMeta\", begin);\n    return queueMeta;\n  }","id":46523,"modified_method":"@Override\n  public OperationResult<QueueMeta> execute(GetQueueMeta getQueueMeta) {\n    initialize();\n    requestMetric(\"GetQueueMeta\");\n    long begin = begin();\n    TTQueueTable table = getQueueTable(getQueueMeta.getQueueName());\n    QueueMeta queueMeta = table.getQueueMeta(getQueueMeta.getQueueName());\n    end(\"GetQueueMeta\", begin);\n    return new OperationResult<QueueMeta>(queueMeta);\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public OperationResult<byte[]> execute(ReadKey read) {\n    initialize();\n    requestMetric(\"ReadKey\");\n    long begin = begin();\n    byte [] result = read(read, this.oracle.getReadPointer());\n    end(\"ReadKey\", begin);\n    if (result != null) {\n      return new OperationResult<byte[]>(result);\n    } else {\n      // TODO this should distinguish between key vs column not found\n      return new OperationResult<byte[]>(StatusCode.KEY_NOT_FOUND);\n    }\n  }","id":46524,"modified_method":"@Override\n  public OperationResult<byte[]> execute(ReadKey read) {\n    initialize();\n    requestMetric(\"ReadKey\");\n    long begin = begin();\n    OperationResult<byte[]> result = read(read, this.oracle.getReadPointer());\n    end(\"ReadKey\", begin);\n    return result;\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public BatchOperationResult execute(List<WriteOperation> writes)\n      throws OmidTransactionException {\n    initialize();\n    requestMetric(\"WriteOperationBatch\");\n    long begin = begin();\n    cmetric.meter(METRIC_PREFIX + \"WriteOperationBatch_NumReqs\", writes.size());\n    BatchOperationResult result = execute(writes, startTransaction());\n    end(\"WriteOperationBatch\", begin);\n    return result;\n  }","id":46525,"modified_method":"@Override\n  public void execute(List<WriteOperation> writes)\n      throws OmidTransactionException {\n    initialize();\n    requestMetric(\"WriteOperationBatch\");\n    long begin = begin();\n    cmetric.meter(METRIC_PREFIX + \"WriteOperationBatch_NumReqs\", writes.size());\n    execute(writes, startTransaction());\n    end(\"WriteOperationBatch\", begin);\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public List<byte[]> execute(ReadAllKeys readKeys) {\n    initialize();\n    requestMetric(\"ReadAllKeys\");\n    long begin = begin();\n    List<byte[]> result = this.randomTable.getKeys(readKeys.getLimit(),\n        readKeys.getOffset(), this.oracle.getReadPointer());\n    end(\"ReadKey\", begin);\n    return result;\n  }","id":46526,"modified_method":"@Override\n  public OperationResult<List<byte[]>> execute(ReadAllKeys readKeys) {\n    initialize();\n    requestMetric(\"ReadAllKeys\");\n    long begin = begin();\n    List<byte[]> result = this.randomTable.getKeys(readKeys.getLimit(),\n        readKeys.getOffset(), this.oracle.getReadPointer());\n    end(\"ReadKey\", begin);\n    return new OperationResult<List<byte[]>>(result);\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public boolean execute(QueueEnqueue enqueue) {\n    try {\n      return executeAsBatch(enqueue);\n    } catch (OmidTransactionException e) {\n      e.printStackTrace();\n      throw new RuntimeException(e);\n    }\n  }","id":46527,"modified_method":"@Override\n  public void execute(QueueEnqueue enqueue) throws OmidTransactionException {\n    executeAsBatch(enqueue);\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public Map<byte[], byte[]> execute(ReadColumnRange readColumnRange) {\n    initialize();\n    requestMetric(\"ReadColumnRange\");\n    long begin = begin();\n    Map<byte[],byte[]> result = this.randomTable.get(readColumnRange.getKey(),\n        readColumnRange.getStartColumn(), readColumnRange.getStopColumn(),\n        this.oracle.getReadPointer());\n    end(\"ReadColumnRange\", begin);\n    return result;\n  }","id":46528,"modified_method":"@Override\n  public OperationResult<Map<byte[], byte[]>>\n  execute(ReadColumnRange readColumnRange) {\n    initialize();\n    requestMetric(\"ReadColumnRange\");\n    long begin = begin();\n    OperationResult<Map<byte[], byte[]>> result = this.randomTable.get(\n        readColumnRange.getKey(), readColumnRange.getStartColumn(),\n        readColumnRange.getStopColumn(), this.oracle.getReadPointer());\n    end(\"ReadColumnRange\", begin);\n    return result;\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"WriteTransactionResult(boolean success) {\n      this(success, new ArrayList<Delete>());\n    }","id":46529,"modified_method":"WriteTransactionResult(int status, String message) {\n      this(false, status, message, noDeletes, null);\n    }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"public WriteTransactionResult(boolean success,\n        QueueInvalidate invalidate) {\n      this(success, new ArrayList<Delete>(), invalidate);\n    }","id":46530,"modified_method":"WriteTransactionResult(QueueInvalidate invalidate) {\n      this(true, StatusCode.OK, null, noDeletes, invalidate);\n    }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"WriteTransactionResult write(CompareAndSwap write,\n      ImmutablePair<ReadPointer,Long> pointer) {\n    initialize();\n    requestMetric(\"CompareAndSwap\");\n    long begin = begin();\n    try {\n      boolean casReturn = this.randomTable.compareAndSwap(write.getKey(),\n          write.getColumn(), write.getExpectedValue(), write.getNewValue(),\n          pointer.getFirst(), pointer.getSecond());\n    } catch (OperationException e) {\n      e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.\n    }\n    end(\"CompareAndSwap\", begin);\n    return new WriteTransactionResult(casReturn,\n        new Delete(write.getKey(), write.getColumn()));\n  }","id":46531,"modified_method":"WriteTransactionResult write(CompareAndSwap write,\n      ImmutablePair<ReadPointer,Long> pointer) {\n    initialize();\n    requestMetric(\"CompareAndSwap\");\n    long begin = begin();\n    try {\n      this.randomTable.compareAndSwap(write.getKey(),\n          write.getColumn(), write.getExpectedValue(), write.getNewValue(),\n          pointer.getFirst(), pointer.getSecond());\n    } catch (OperationException e) {\n      return new WriteTransactionResult(e.getStatus(), e.getMessage());\n    }\n    end(\"CompareAndSwap\", begin);\n    return new WriteTransactionResult(\n        new Delete(write.getKey(), write.getColumn()));\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"BatchOperationResult execute(List<WriteOperation> writes,\n      ImmutablePair<ReadPointer,Long> pointer)\n          throws OmidTransactionException {\n\n    if (writes.isEmpty()) return new BatchOperationResult(true, \"Empty query\");\n\n    // Re-order operations (create a copy for now)\n    List<WriteOperation> orderedWrites = new ArrayList<WriteOperation>(writes);\n    Collections.sort(orderedWrites, new WriteOperationComparator());\n\n    // Execute operations\n    RowSet rows = new MemoryRowSet();\n    List<Delete> deletes = new ArrayList<Delete>(writes.size());\n    List<QueueInvalidate> invalidates = new ArrayList<QueueInvalidate>();\n    for (WriteOperation write : orderedWrites) {\n      WriteTransactionResult writeTxReturn = dispatchWrite(write, pointer);\n      if (!writeTxReturn.success) {\n        // Write operation failed\n        cmetric.meter(METRIC_PREFIX + \"WriteOperationBatch_FailedWrites\", 1);\n        abortTransaction(pointer, deletes, invalidates);\n        return new BatchOperationResult(false,\n            \"A write operation failed, transaction aborted\");\n      } else {\n        // Write was successful.  Store delete if we need to abort and continue\n        deletes.addAll(writeTxReturn.deletes);\n        if (writeTxReturn.invalidate != null) {\n          // Queue operation\n          invalidates.add(writeTxReturn.invalidate);\n        } else {\n          // Normal write operation\n          rows.addRow(write.getKey());\n        }\n      }\n    }\n\n    // All operations completed successfully, commit transaction\n    if (!commitTransaction(pointer, rows)) {\n      // Commit failed, abort\n      cmetric.meter(METRIC_PREFIX + \"WriteOperationBatch_FailedCommits\", 1);\n      abortTransaction(pointer, deletes, invalidates);\n      return new BatchOperationResult(false,\n          \"Commit of transaction failed, transaction aborted\");\n    }\n\n    // If last operation was an ack, finalize it\n    if (orderedWrites.get(orderedWrites.size() - 1) instanceof QueueAck) {\n      QueueAck ack = (QueueAck)orderedWrites.get(orderedWrites.size() - 1);\n      QueueFinalize finalize = new QueueFinalize(ack.getKey(),\n          ack.getEntryPointer(), ack.getConsumer(), ack.getNumGroups());\n      finalize.execute(getQueueTable(ack.getKey()), pointer);\n    }\n\n    // Transaction was successfully committed\n    cmetric.meter(METRIC_PREFIX + \"WriteOperationBatch_SuccessfulTransactions\",\n        1);\n    return new BatchOperationResult(true);\n  }","id":46532,"modified_method":"void execute(List<WriteOperation> writes,\n               ImmutablePair<ReadPointer,Long> pointer)\n          throws OmidTransactionException {\n\n    if (writes.isEmpty()) return;\n\n    // Re-order operations (create a copy for now)\n    List<WriteOperation> orderedWrites = new ArrayList<WriteOperation>(writes);\n    Collections.sort(orderedWrites, new WriteOperationComparator());\n\n    // Execute operations\n    RowSet rows = new MemoryRowSet();\n    List<Delete> deletes = new ArrayList<Delete>(writes.size());\n    List<QueueInvalidate> invalidates = new ArrayList<QueueInvalidate>();\n\n    for (WriteOperation write : orderedWrites) {\n      WriteTransactionResult writeTxReturn = dispatchWrite(write, pointer);\n      if (!writeTxReturn.success) {\n        // Write operation failed\n        cmetric.meter(METRIC_PREFIX + \"WriteOperationBatch_FailedWrites\", 1);\n        abortTransaction(pointer, deletes, invalidates);\n        throw new OmidTransactionException(\n            writeTxReturn.statusCode, writeTxReturn.message);\n      } else {\n        // Write was successful.  Store delete if we need to abort and continue\n        deletes.addAll(writeTxReturn.deletes);\n        if (writeTxReturn.invalidate != null) {\n          // Queue operation\n          invalidates.add(writeTxReturn.invalidate);\n        } else {\n          // Normal write operation\n          rows.addRow(write.getKey());\n        }\n      }\n    }\n\n    // All operations completed successfully, commit transaction\n    if (!commitTransaction(pointer, rows)) {\n      // Commit failed, abort\n      cmetric.meter(METRIC_PREFIX + \"WriteOperationBatch_FailedCommits\", 1);\n      abortTransaction(pointer, deletes, invalidates);\n      throw new OmidTransactionException(StatusCode.WRITE_CONFLICT,\n          \"Commit of transaction failed, transaction aborted\");\n    }\n\n    // If last operation was an ack, finalize it\n    if (orderedWrites.get(orderedWrites.size() - 1) instanceof QueueAck) {\n      QueueAck ack = (QueueAck)orderedWrites.get(orderedWrites.size() - 1);\n      QueueFinalize finalize = new QueueFinalize(ack.getKey(),\n          ack.getEntryPointer(), ack.getConsumer(), ack.getNumGroups());\n      finalize.execute(getQueueTable(ack.getKey()), pointer);\n    }\n\n    // Transaction was successfully committed\n    cmetric.meter(\n        METRIC_PREFIX + \"WriteOperationBatch_SuccessfulTransactions\", 1);\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public boolean execute(CompareAndSwap cas) {\n    try {\n      return executeAsBatch(cas);\n    } catch (OmidTransactionException e) {\n      e.printStackTrace();\n      throw new RuntimeException(e);\n    }\n  }","id":46533,"modified_method":"@Override\n  public void execute(CompareAndSwap cas) throws OmidTransactionException {\n    executeAsBatch(cas);\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Actually perform the various write operations.\n   * @param write\n   * @param pointer\n   * @return\n   */\n  private WriteTransactionResult dispatchWrite(\n      WriteOperation write, ImmutablePair<ReadPointer,Long> pointer) {\n    if (write instanceof Write) {\n      return write((Write)write, pointer);\n    } else if (write instanceof Delete) {\n      return write((Delete)write, pointer);\n    } else if (write instanceof Increment) {\n      return write((Increment)write, pointer);\n    } else if (write instanceof CompareAndSwap) {\n      return write((CompareAndSwap)write, pointer);\n    } else if (write instanceof QueueEnqueue) {\n      return write((QueueEnqueue)write, pointer);\n    } else if (write instanceof QueueAck) {\n      return write((QueueAck)write, pointer);\n    }\n    return new WriteTransactionResult(false);\n  }","id":46534,"modified_method":"/**\n   * Actually perform the various write operations.\n   */\n  private WriteTransactionResult dispatchWrite(\n      WriteOperation write, ImmutablePair<ReadPointer,Long> pointer) {\n    if (write instanceof Write) {\n      return write((Write)write, pointer);\n    } else if (write instanceof Delete) {\n      return write((Delete)write, pointer);\n    } else if (write instanceof Increment) {\n      return write((Increment)write, pointer);\n    } else if (write instanceof CompareAndSwap) {\n      return write((CompareAndSwap)write, pointer);\n    } else if (write instanceof QueueEnqueue) {\n      return write((QueueEnqueue)write, pointer);\n    } else if (write instanceof QueueAck) {\n      return write((QueueAck)write, pointer);\n    }\n    return new WriteTransactionResult(StatusCode.INTERNAL_ERROR,\n        \"Unknown write operation \" + write.getClass().getName());\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * A utility method that ensures this class is properly initialized before\n   * it can be used. This currently entails creating real objects for all\n   * our table handlers.\n   */\n  private synchronized void initialize() {\n\n    if (this.randomTable == null) {\n\n      this.randomTable = this.tableHandle.getTable(Bytes.toBytes(\"random\"));\n      this.orderedTable = this.tableHandle.getTable(Bytes.toBytes(\"ordered\"));\n      this.queueTable = this.tableHandle.getQueueTable(Bytes.toBytes(\"queues\"));\n      this.streamTable = this.tableHandle.getStreamTable(Bytes.toBytes(\"streams\"));\n    }\n  }","id":46535,"modified_method":"/**\n   * A utility method that ensures this class is properly initialized before\n   * it can be used. This currently entails creating real objects for all\n   * our table handlers.\n   */\n  private synchronized void initialize() {\n\n    if (this.randomTable == null) {\n\n      this.randomTable = this.tableHandle.getTable(Bytes.toBytes(\"random\"));\n      this.queueTable = this.tableHandle.getQueueTable(Bytes.toBytes(\"queues\"));\n      this.streamTable = this.tableHandle.getStreamTable(Bytes.toBytes(\"streams\"));\n    }\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"private boolean executeAsBatch(WriteOperation write)\n      throws OmidTransactionException {\n    List<WriteOperation> writes = Arrays.asList(write);\n    return execute(writes).isSuccess();\n  }","id":46536,"modified_method":"private void executeAsBatch(WriteOperation write)\n      throws OmidTransactionException {\n    execute(Collections.singletonList(write));\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public Map<byte[], byte[]> execute(Read read) {\n    initialize();\n    requestMetric(\"Read\");\n    long begin = begin();\n    Map<byte[],byte[]> result = this.randomTable.get(read.getKey(),\n        read.getColumns(), this.oracle.getReadPointer());\n    end(\"Read\", begin);\n    return result;\n  }","id":46537,"modified_method":"@Override\n  public OperationResult<Map<byte[], byte[]>> execute(Read read) {\n    initialize();\n    requestMetric(\"Read\");\n    long begin = begin();\n    OperationResult<Map<byte[], byte[]>> result = this.randomTable.get(\n        read.getKey(), read.getColumns(), this.oracle.getReadPointer());\n    end(\"Read\", begin);\n    return result;\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public long execute(GetGroupID getGroupId) {\n    initialize();\n    requestMetric(\"GetGroupID\");\n    long begin = begin();\n    TTQueueTable table = getQueueTable(getGroupId.getQueueName());\n    long groupid = table.getGroupID(getGroupId.getQueueName());\n    end(\"GetGroupID\", begin);\n    return groupid;\n  }","id":46538,"modified_method":"@Override\n  public OperationResult<Long> execute(GetGroupID getGroupId) {\n    initialize();\n    requestMetric(\"GetGroupID\");\n    long begin = begin();\n    TTQueueTable table = getQueueTable(getGroupId.getQueueName());\n    long groupid = table.getGroupID(getGroupId.getQueueName());\n    end(\"GetGroupID\", begin);\n    return new OperationResult<Long>(groupid);\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public boolean execute(Increment inc) {\n    try {\n      return executeAsBatch(inc);\n    } catch (OmidTransactionException e) {\n      e.printStackTrace();\n      throw new RuntimeException(e);\n    }\n  }","id":46539,"modified_method":"@Override\n  public void execute(Increment inc) throws OmidTransactionException {\n    executeAsBatch(inc);\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public boolean execute(QueueAck ack) {\n    try {\n      return executeAsBatch(ack);\n    } catch (OmidTransactionException e) {\n      e.printStackTrace();\n      throw new RuntimeException(e);\n    }\n  }","id":46540,"modified_method":"@Override\n  public void execute(QueueAck ack) throws OmidTransactionException {\n    executeAsBatch(ack);\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public boolean execute(Write write) {\n    try {\n      return executeAsBatch(write);\n    } catch (OmidTransactionException e) {\n      e.printStackTrace();\n      throw new RuntimeException(e);\n    }\n  }","id":46541,"modified_method":"@Override\n  public void execute(Write write) throws OmidTransactionException {\n    executeAsBatch(write);\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"WriteTransactionResult write(Increment increment,\n      ImmutablePair<ReadPointer,Long> pointer) {\n    initialize();\n    requestMetric(\"Increment\");\n    long begin = begin();\n    @SuppressWarnings(\"unused\")\n    Map<byte[],Long> map = this.randomTable.increment(increment.getKey(),\n        increment.getColumns(), increment.getAmounts(),\n        pointer.getFirst(), pointer.getSecond());\n    List<Delete> deletes = new ArrayList<Delete>(1);\n    deletes.add(new Delete(increment.getKey(), increment.getColumns()));\n    end(\"Increment\", begin);\n    return new WriteTransactionResult(true, deletes);\n  }","id":46542,"modified_method":"WriteTransactionResult write(Increment increment,\n      ImmutablePair<ReadPointer,Long> pointer) {\n    initialize();\n    requestMetric(\"Increment\");\n    long begin = begin();\n    try {\n      @SuppressWarnings(\"unused\")\n      Map<byte[],Long> map = this.randomTable.increment(increment.getKey(),\n          increment.getColumns(), increment.getAmounts(),\n          pointer.getFirst(), pointer.getSecond());\n    } catch (OperationException e) {\n      return new WriteTransactionResult(e.getStatus(), e.getMessage());\n    }\n    end(\"Increment\", begin);\n    return new WriteTransactionResult(\n        new Delete(increment.getKey(), increment.getColumns()));\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Enqueue operations always succeed but can be rolled back.\n   *\n   * They are rolled back with an invalidate.\n   *\n   * @param pointer\n   * @return\n   */\n  WriteTransactionResult write(QueueEnqueue enqueue,\n      ImmutablePair<ReadPointer, Long> pointer) {\n    initialize();\n    requestMetric(\"QueueEnqueue\");\n    long begin = begin();\n    EnqueueResult result = getQueueTable(enqueue.getKey()).enqueue(\n        enqueue.getKey(), enqueue.getData(), pointer.getSecond());\n    end(\"QueueEnqueue\", begin);\n    return new WriteTransactionResult(true,\n        new QueueUnenqueue(enqueue.getKey(), result.getEntryPointer()));\n  }","id":46543,"modified_method":"/**\n   * Enqueue operations always succeed but can be rolled back.\n   *\n   * They are rolled back with an invalidate.\n   */\n  WriteTransactionResult write(QueueEnqueue enqueue,\n      ImmutablePair<ReadPointer, Long> pointer) {\n    initialize();\n    requestMetric(\"QueueEnqueue\");\n    long begin = begin();\n    EnqueueResult result = getQueueTable(enqueue.getKey()).enqueue(\n        enqueue.getKey(), enqueue.getData(), pointer.getSecond());\n    end(\"QueueEnqueue\", begin);\n    return new WriteTransactionResult(\n        new QueueUnenqueue(enqueue.getKey(), result.getEntryPointer()));\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public DequeueResult execute(QueueDequeue dequeue) {\n    initialize();\n    requestMetric(\"QueueDequeue\");\n    long begin = begin();\n    int retries = 0;\n    long start = System.currentTimeMillis();\n    TTQueueTable queueTable = getQueueTable(dequeue.getKey());\n    while (retries < MAX_DEQUEUE_RETRIES) {\n      DequeueResult result = queueTable.dequeue(dequeue.getKey(),\n          dequeue.getConsumer(), dequeue.getConfig(),\n          this.oracle.getReadPointer());\n      if (result.shouldRetry()) {\n        retries++;\n        try {\n          if (DEQUEUE_RETRY_SLEEP > 0) Thread.sleep(DEQUEUE_RETRY_SLEEP);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n          // continue in loop\n        }\n        continue;\n      }\n      end(\"QueueDequeue\", begin);\n      return result;\n    }\n    long end = System.currentTimeMillis();\n    end(\"QueueDequeue\", begin);\n    return new DequeueResult(DequeueStatus.FAILURE,\n        \"Maximum retries (retried \" + retries + \" times over \" + (end-start) +\n        \" millis\");\n  }","id":46544,"modified_method":"@Override\n  public DequeueResult execute(QueueDequeue dequeue)\n      throws OperationException {\n    initialize();\n    requestMetric(\"QueueDequeue\");\n    long begin = begin();\n    int retries = 0;\n    long start = System.currentTimeMillis();\n    TTQueueTable queueTable = getQueueTable(dequeue.getKey());\n    while (retries < MAX_DEQUEUE_RETRIES) {\n      DequeueResult result = queueTable.dequeue(dequeue.getKey(),\n          dequeue.getConsumer(), dequeue.getConfig(),\n          this.oracle.getReadPointer());\n      if (result.shouldRetry()) {\n        retries++;\n        try {\n          if (DEQUEUE_RETRY_SLEEP > 0) Thread.sleep(DEQUEUE_RETRY_SLEEP);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n          // continue in loop\n        }\n        continue;\n      }\n      end(\"QueueDequeue\", begin);\n      return result;\n    }\n    long end = System.currentTimeMillis();\n    end(\"QueueDequeue\", begin);\n    throw new OperationException(StatusCode.TOO_MANY_RETRIES,\n        \"Maximum retries (retried \" + retries + \" times over \" + (end-start) +\n        \" millis\");\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"WriteTransactionResult write(Write write,\n      ImmutablePair<ReadPointer,Long> pointer) {\n    initialize();\n    requestMetric(\"Write\");\n    long begin = begin();\n    this.randomTable.put(write.getKey(), write.getColumns(),\n        pointer.getSecond(), write.getValues());\n    end(\"Write\", begin);\n    return new WriteTransactionResult(true,\n        new Delete(write.getKey(), write.getColumns()));\n  }","id":46545,"modified_method":"WriteTransactionResult write(Write write,\n      ImmutablePair<ReadPointer,Long> pointer) {\n    initialize();\n    requestMetric(\"Write\");\n    long begin = begin();\n    this.randomTable.put(write.getKey(), write.getColumns(),\n        pointer.getSecond(), write.getValues());\n    end(\"Write\", begin);\n    return new WriteTransactionResult(\n        new Delete(write.getKey(), write.getColumns()));\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"WriteTransactionResult(boolean success, List<Delete> deletes,\n        QueueInvalidate invalidate) {\n      this.success = success;\n      this.deletes = deletes;\n      this.invalidate = invalidate;\n    }","id":46546,"modified_method":"WriteTransactionResult(boolean success, int status, String message,\n                           List<Delete> deletes, QueueInvalidate invalidate) {\n      this.success = success;\n      this.statusCode = status;\n      this.message = message;\n      this.deletes = deletes;\n      this.invalidate = invalidate;\n    }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"WriteTransactionResult(boolean success, Delete delete) {\n      this(success, Arrays.asList(new Delete [] { delete } ));\n    }","id":46547,"modified_method":"WriteTransactionResult(Delete delete) {\n      this(true, StatusCode.OK, null, Collections.singletonList(delete), null);\n    }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public boolean execute(Delete delete) {\n    try {\n      return executeAsBatch(delete);\n    } catch (OmidTransactionException e) {\n      e.printStackTrace();\n      throw new RuntimeException(e);\n    }\n  }","id":46548,"modified_method":"@Override\n  public void execute(Delete delete) throws OmidTransactionException {\n    executeAsBatch(delete);\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"WriteTransactionResult write(Delete delete,\n      ImmutablePair<ReadPointer, Long> pointer) {\n    initialize();\n    requestMetric(\"Delete\");\n    long begin = begin();\n    this.randomTable.deleteAll(delete.getKey(), delete.getColumns(),\n        pointer.getSecond());\n    end(\"Delete\", begin);\n    return new WriteTransactionResult(true,\n        new Undelete(delete.getKey(), delete.getColumns()));\n  }","id":46549,"modified_method":"WriteTransactionResult write(Delete delete,\n      ImmutablePair<ReadPointer, Long> pointer) {\n    initialize();\n    requestMetric(\"Delete\");\n    long begin = begin();\n    this.randomTable.deleteAll(delete.getKey(), delete.getColumns(),\n        pointer.getSecond());\n    end(\"Delete\", begin);\n    return new WriteTransactionResult(\n        new Undelete(delete.getKey(), delete.getColumns()));\n  }","commit_id":"0e57ef87bb53065c4452376b2bda93b6c2804775","url":"https://github.com/caskdata/cdap"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    //CHECKSTYLE:OFF\n    public static AuthnRequest createAuthnRequest(\n        String serviceURL,\n        boolean forceAuthn,\n        boolean isPassive,\n        String protocolBinding,\n        SAMLVersion version,\n        Issuer issuer,\n        NameIDPolicy nameIDPolicy,\n        RequestedAuthnContext requestedAuthnCtx\n    ) {\n    //CHECKSTYLE:ON    \n        if (authnRequestBuilder == null) {\n            authnRequestBuilder = (SAMLObjectBuilder<AuthnRequest>)\n                builderFactory.getBuilder(AuthnRequest.DEFAULT_ELEMENT_NAME);\n        }\n        AuthnRequest authnRequest = authnRequestBuilder.buildObject();\n        authnRequest.setAssertionConsumerServiceURL(serviceURL);\n        authnRequest.setForceAuthn(forceAuthn);\n        authnRequest.setID(UUID.randomUUID().toString());\n        authnRequest.setIsPassive(isPassive);\n        authnRequest.setIssueInstant(new DateTime());\n        authnRequest.setProtocolBinding(protocolBinding);\n        authnRequest.setVersion(version);\n        \n        authnRequest.setIssuer(issuer);\n        authnRequest.setNameIDPolicy(nameIDPolicy);\n        authnRequest.setRequestedAuthnContext(requestedAuthnCtx);\n        \n        return authnRequest;\n    }","id":46550,"modified_method":"@SuppressWarnings(\"unchecked\")\n    //CHECKSTYLE:OFF\n    public static AuthnRequest createAuthnRequest(\n        String serviceURL,\n        boolean forceAuthn,\n        boolean isPassive,\n        String protocolBinding,\n        SAMLVersion version,\n        Issuer issuer,\n        NameIDPolicy nameIDPolicy,\n        RequestedAuthnContext requestedAuthnCtx\n    ) {\n    //CHECKSTYLE:ON    \n        if (authnRequestBuilder == null) {\n            authnRequestBuilder = (SAMLObjectBuilder<AuthnRequest>)\n                builderFactory.getBuilder(AuthnRequest.DEFAULT_ELEMENT_NAME);\n        }\n        AuthnRequest authnRequest = authnRequestBuilder.buildObject();\n        authnRequest.setAssertionConsumerServiceURL(serviceURL);\n        authnRequest.setForceAuthn(forceAuthn);\n        authnRequest.setID(\"_\" + UUID.randomUUID());\n        authnRequest.setIsPassive(isPassive);\n        authnRequest.setIssueInstant(new DateTime());\n        authnRequest.setProtocolBinding(protocolBinding);\n        authnRequest.setVersion(version);\n        \n        authnRequest.setIssuer(issuer);\n        authnRequest.setNameIDPolicy(nameIDPolicy);\n        authnRequest.setRequestedAuthnContext(requestedAuthnCtx);\n        \n        return authnRequest;\n    }","commit_id":"e510d3e8df6c1e4129cc6d867095734b1f862259","url":"https://github.com/apache/cxf"},{"original_method":"private HealthCheckServiceProxyImpl(String uid) {\n            this.uid = uid;\n        }","id":46551,"modified_method":"private HealthCheckServiceProxyImpl(UUID uid) {\n            this.uid = uid;\n        }","commit_id":"ece027897039236c67ff03038847a1371bd07f53","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n    public HealthCheckServiceProxy register(Class T) {\n        if (T == null) {\n            throw new IllegalArgumentException(\"Registering Class\");\n        }\n        Map<String, HealthCheckReport> reportMap = new HashMap<>();\n        Long rand = UUID.randomUUID().getMostSignificantBits();\n        String uid = T.getName() + \":\" + rand.toString(); // TODO: Decide whether or not to tie each UID to a specific class\n        reports.put(uid, reportMap);\n        return new HealthCheckServiceProxyImpl(uid);\n    }","id":46552,"modified_method":"@Override\n    public HealthCheckServiceProxy register() {\n        Map<String, HealthCheckReport> reportMap = new HashMap<>();\n        UUID rand = UUID.randomUUID();\n        reports.put(rand, reportMap);\n        return new HealthCheckServiceProxyImpl(rand);\n    }","commit_id":"ece027897039236c67ff03038847a1371bd07f53","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n    public boolean isHealthy() {\n\n        for (Map.Entry<String, Map<String, HealthCheckReport>> stringMapEntry : reports.entrySet()) {\n            for (Map.Entry<String, HealthCheckReport> entry : stringMapEntry.getValue().entrySet()) {\n\n                if (entry.getValue().getLevel().equals(Severity.BROKEN)) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }","id":46553,"modified_method":"private boolean isHealthy() {\n        for (Map.Entry<UUID, Map<String, HealthCheckReport>> stringMapEntry : reports.entrySet()) {\n            for (Map.Entry<String, HealthCheckReport> entry : stringMapEntry.getValue().entrySet()) {\n\n                if (entry.getValue().getLevel().equals(Severity.BROKEN)) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }","commit_id":"ece027897039236c67ff03038847a1371bd07f53","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n    public void reportIssue(String uid, String rid, HealthCheckReport report) {\n        reports.get(uid).put(rid, report);\n    }","id":46554,"modified_method":"private void reportIssue(UUID uid, String rid, HealthCheckReport report) {\n        reports.get(uid).put(rid, report);\n    }","commit_id":"ece027897039236c67ff03038847a1371bd07f53","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n    public void resolveIssue(String uid, String id) {\n        resolveIssue(id, reports.get(uid));\n    }","id":46555,"modified_method":"private void resolveIssue(UUID uid, String id) {\n        resolveIssue(id, reports.get(uid));\n    }","commit_id":"ece027897039236c67ff03038847a1371bd07f53","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n    public Set<String> getReportIds(String uid) {\n        return reports.get(uid).keySet();\n    }","id":46556,"modified_method":"private Set<String> getReportIds(UUID uid) {\n        return reports.get(uid).keySet();\n    }","commit_id":"ece027897039236c67ff03038847a1371bd07f53","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n    public Map<String, HealthCheckReport> getReports(String uid) {\n        return reports.get(uid);\n    }","id":46557,"modified_method":"private Map<String, HealthCheckReport> getReports(UUID uid) {\n        return reports.get(uid);\n    }","commit_id":"ece027897039236c67ff03038847a1371bd07f53","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n    public HealthCheckReport getDiagnosis(String uid, String id) {\n        return reports.get(uid).get(id);\n    }","id":46558,"modified_method":"private HealthCheckReport getDiagnosis(UUID uid, String id) {\n        return reports.get(uid).get(id);\n    }","commit_id":"ece027897039236c67ff03038847a1371bd07f53","url":"https://github.com/rackerlabs/repose"},{"original_method":"private Map<String, Object> nodeSummary(Node node) {\n        Map<String, Object> m  = Maps.newHashMap();\n\n        m.put(\"node_id\", node.getNodeId());\n        m.put(\"is_master\", node.isMaster());\n        m.put(\"hostname\", Tools.getLocalCanonicalHostname());\n        m.put(\"transport_address\", node.getTransportAddress());\n        m.put(\"last_seen\", Tools.getISO8601String(node.getLastSeen()));\n\n        return m;\n    }","id":46559,"modified_method":"private Map<String, Object> nodeSummary(Node node) {\n        Map<String, Object> m  = Maps.newHashMap();\n\n        m.put(\"node_id\", node.getNodeId());\n        m.put(\"is_master\", node.isMaster());\n        m.put(\"hostname\", Tools.getLocalCanonicalHostname());\n        m.put(\"transport_address\", node.getTransportAddress());\n        m.put(\"last_seen\", Tools.getISO8601String(node.getLastSeen()));\n\n        // Only meant to be used for representation. Not a real ID.\n        m.put(\"short_node_id\", node.getShortNodeId());\n\n        return m;\n    }","commit_id":"0e4497a3caff04015f09ce0870e2cf1ee6fb3857","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public static String generateServerId() {\n        return UUID.randomUUID().toString();\n    }","id":46560,"modified_method":"public static String generateServerId() {\n        UUID id = UUID.randomUUID();\n\n        return getLocalHostname() + \"-\" + id.toString();\n    }","commit_id":"0e4497a3caff04015f09ce0870e2cf1ee6fb3857","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public static String generateServerId() {\n        UUID id = UUID.randomUUID();\n\n        return getLocalHostname() + \"-\" + id.toString();\n    }","id":46561,"modified_method":"public static String generateServerId() {\n        return UUID.randomUUID().toString();\n    }","commit_id":"0d342d32847a229498c94547c36aee941b9c1c79","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"@Test\n    public void testGenerateServerId() {\n        String id = Tools.generateServerId();\n        \n        assertTrue(id.startsWith(Tools.getLocalHostname() + \"-\"));\n        assertTrue(id.length() > (Tools.getLocalHostname() + \"-\").length());\n    }","id":46562,"modified_method":"@Test\n    public void testGenerateServerId() {\n        String id = Tools.generateServerId();\n\n        /*\n         * Make sure it has dashes in it. We need that to build a short ID later.\n         * Short version: Everything falls apart if this is not an UUID-style ID.\n         */\n        assertTrue(id.contains(\"-\"));\n    }","commit_id":"0d342d32847a229498c94547c36aee941b9c1c79","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"/** {@inheritDoc} **/\r\n\t@Override\r\n\tpublic void onComponentTag(Component component, ComponentTag tag)\r\n\t{\r\n\t\t// get the path\r\n\t\tfinal String path = contextRelativePath.getObject();\r\n\r\n\t\t// generate prefix that will make path context relative\r\n\t\tfinal String prefix = component.getRequest().getRelativePathPrefixToContextRoot();\r\n\r\n\t\tfinal String contextRelativePath;\r\n\t\tif (!Strings.isEmpty(prefix))\r\n\t\t{\r\n\t\t\t// join the two path pieces\r\n\t\t\tcontextRelativePath = Strings.join(\"/\", prefix, path);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tcontextRelativePath = path;\r\n\t\t}\r\n\r\n\t\ttag.put(\"src\", contextRelativePath);\r\n\t}","id":46563,"modified_method":"/** {@inheritDoc} **/\r\n\t@Override\r\n\tpublic void onComponentTag(Component component, ComponentTag tag)\r\n\t{\r\n\t\t// get path\r\n\t\tfinal String path = contextRelativePath.getObject();\r\n\r\n\t\tfinal String rewritten = component.getRequestCycle()\r\n\t\t\t.getProcessor()\r\n\t\t\t.getRequestCodingStrategy()\r\n\t\t\t.rewriteStaticRelativeUrl(path);\r\n\r\n\t\ttag.put(\"src\", rewritten);\r\n\t}","commit_id":"bc137abf028ad201cb40d506d00064155e15aa21","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Processes the component tag.\n\t * \n\t * @param tag\n\t *            Tag to modify\n\t * @see org.apache.wicket.Component#onComponentTag(org.apache.wicket.markup.ComponentTag)\n\t */\n\t@Override\n\tprotected void onComponentTag(ComponentTag tag)\n\t{\n\t\tsuper.onComponentTag(tag);\n\n\t\tif (isLinkEnabled() == false)\n\t\t{\n\t\t\tdisableLink(tag);\n\t\t}\n\t\telse if (getDefaultModel() != null)\n\t\t{\n\t\t\tObject hrefValue = getDefaultModelObject();\n\t\t\tif (hrefValue != null)\n\t\t\t{\n\t\t\t\tString url = hrefValue.toString();\n\n\t\t\t\tif (contextRelative)\n\t\t\t\t{\n\t\t\t\t\tif (url.length() > 0 && url.charAt(0) == '/')\n\t\t\t\t\t{\n\t\t\t\t\t\turl = url.substring(1);\n\t\t\t\t\t}\n\t\t\t\t\turl = RequestCycle.get().getRequest().getRelativePathPrefixToContextRoot() +\n\t\t\t\t\t\turl;\n\t\t\t\t}\n\n\t\t\t\t// if the tag is an anchor proper\n\t\t\t\tif (tag.getName().equalsIgnoreCase(\"a\") || tag.getName().equalsIgnoreCase(\"link\") ||\n\t\t\t\t\ttag.getName().equalsIgnoreCase(\"area\"))\n\t\t\t\t{\n\t\t\t\t\t// generate the href attribute\n\t\t\t\t\ttag.put(\"href\", Strings.replaceAll(url, \"&\", \"&amp;\"));\n\n\t\t\t\t\t// Add any popup script\n\t\t\t\t\tif (popupSettings != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// NOTE: don't encode to HTML as that is not valid\n\t\t\t\t\t\t// JavaScript\n\t\t\t\t\t\ttag.put(\"onclick\", popupSettings.getPopupJavaScript());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// generate a popup script by asking popup settings for one\n\t\t\t\t\tif (popupSettings != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpopupSettings.setTarget(\"'\" + url + \"'\");\n\t\t\t\t\t\tString popupScript = popupSettings.getPopupJavaScript();\n\t\t\t\t\t\ttag.put(\"onclick\", popupScript);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// or generate an onclick JS handler directly\n\t\t\t\t\t\ttag.put(\"onclick\", \"window.location.href='\" + url + \"';return false;\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (popupSettings != null)\n\t\t\t{\n\t\t\t\tIPageMap popupPageMap = popupSettings.getPageMap(this);\n\t\t\t\tif (popupPageMap != null && popupPageMap.getName() != null)\n\t\t\t\t{\n\t\t\t\t\ttag.put(\"target\", popupPageMap.getName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":46564,"modified_method":"/**\n\t * Processes the component tag.\n\t * \n\t * @param tag\n\t *            Tag to modify\n\t * @see org.apache.wicket.Component#onComponentTag(org.apache.wicket.markup.ComponentTag)\n\t */\n\t@Override\n\tprotected void onComponentTag(ComponentTag tag)\n\t{\n\t\tsuper.onComponentTag(tag);\n\n\t\tif (isLinkEnabled() == false)\n\t\t{\n\t\t\tdisableLink(tag);\n\t\t}\n\t\telse if (getDefaultModel() != null)\n\t\t{\n\t\t\tObject hrefValue = getDefaultModelObject();\n\t\t\tif (hrefValue != null)\n\t\t\t{\n\t\t\t\tString url = hrefValue.toString();\n\n\t\t\t\tif (contextRelative)\n\t\t\t\t{\n\t\t\t\t\tif (url.length() > 0 && url.charAt(0) == '/')\n\t\t\t\t\t{\n\t\t\t\t\t\turl = url.substring(1);\n\t\t\t\t\t}\n\t\t\t\t\turl = RequestCycle.get()\n\t\t\t\t\t\t.getProcessor()\n\t\t\t\t\t\t.getRequestCodingStrategy()\n\t\t\t\t\t\t.rewriteStaticRelativeUrl(url);\n\t\t\t\t}\n\n\t\t\t\t// if the tag is an anchor proper\n\t\t\t\tif (tag.getName().equalsIgnoreCase(\"a\") || tag.getName().equalsIgnoreCase(\"link\") ||\n\t\t\t\t\ttag.getName().equalsIgnoreCase(\"area\"))\n\t\t\t\t{\n\t\t\t\t\t// generate the href attribute\n\t\t\t\t\ttag.put(\"href\", Strings.replaceAll(url, \"&\", \"&amp;\"));\n\n\t\t\t\t\t// Add any popup script\n\t\t\t\t\tif (popupSettings != null)\n\t\t\t\t\t{\n\t\t\t\t\t\t// NOTE: don't encode to HTML as that is not valid\n\t\t\t\t\t\t// JavaScript\n\t\t\t\t\t\ttag.put(\"onclick\", popupSettings.getPopupJavaScript());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// generate a popup script by asking popup settings for one\n\t\t\t\t\tif (popupSettings != null)\n\t\t\t\t\t{\n\t\t\t\t\t\tpopupSettings.setTarget(\"'\" + url + \"'\");\n\t\t\t\t\t\tString popupScript = popupSettings.getPopupJavaScript();\n\t\t\t\t\t\ttag.put(\"onclick\", popupScript);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// or generate an onclick JS handler directly\n\t\t\t\t\t\ttag.put(\"onclick\", \"window.location.href='\" + url + \"';return false;\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (popupSettings != null)\n\t\t\t{\n\t\t\t\tIPageMap popupPageMap = popupSettings.getPageMap(this);\n\t\t\t\tif (popupPageMap != null && popupPageMap.getName() != null)\n\t\t\t\t{\n\t\t\t\t\ttag.put(\"target\", popupPageMap.getName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"bc137abf028ad201cb40d506d00064155e15aa21","url":"https://github.com/apache/wicket"},{"original_method":"private static final String returnRelativePath(String location)\n\t{\n\t\t// WICKET-59 allow external URLs, WICKET-612 allow absolute URLs.\n\t\tif (location.startsWith(\"http://\") || location.startsWith(\"https://\") ||\n\t\t\tlocation.startsWith(\"/\"))\n\t\t{\n\t\t\treturn location;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn RequestCycle.get().getRequest().getRelativePathPrefixToContextRoot() + location;\n\t\t}\n\t}","id":46565,"modified_method":"private static final String returnRelativePath(String location)\n\t{\n\t\t// WICKET-59 allow external URLs, WICKET-612 allow absolute URLs.\n\t\tif (location.startsWith(\"http://\") || location.startsWith(\"https://\") ||\n\t\t\tlocation.startsWith(\"/\"))\n\t\t{\n\t\t\treturn location;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn RequestCycle.get()\n\t\t\t\t.getProcessor()\n\t\t\t\t.getRequestCodingStrategy()\n\t\t\t\t.rewriteStaticRelativeUrl(location);\n\t\t}\n\t}","commit_id":"bc137abf028ad201cb40d506d00064155e15aa21","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @see org.apache.wicket.IRequestTarget#respond(org.apache.wicket.RequestCycle)\n\t */\n\tpublic void respond(RequestCycle requestCycle)\n\t{\n\t\tResponse response = requestCycle.getResponse();\n\t\tresponse.reset();\n\t\tif (redirectUrl.startsWith(\"/\"))\n\t\t{\n\t\t\t// context-absolute url\n\n\t\t\tRequestContext rc = RequestContext.get();\n\t\t\tString continueTo = null;\n\t\t\tif (rc.isPortletRequest() && ((PortletRequestContext)rc).isEmbedded())\n\t\t\t{\n\t\t\t\tresponse.redirect(redirectUrl);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tString location = RequestCycle.get() \n\t\t\t\t\t\t.getRequest() \n\t\t\t\t\t\t.getRelativePathPrefixToContextRoot() + \n\t\t\t\t\t\tthis.redirectUrl.substring(1); \n\t\t\t\tif (location.startsWith(\"./\"))\n\t\t\t\t{ \n\t\t\t\t\tlocation = location.substring(2); \n\t\t\t\t} \n\t\t\t\tresponse.redirect(location); \n\t\t\t}\n\t\t}\n\t\telse if (redirectUrl.contains(\"://\"))\n\t\t{\n\t\t\t// absolute url\n\t\t\tresponse.redirect(redirectUrl);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// relative url\n\t\t\tresponse.redirect(RequestCycle.get()\n\t\t\t\t.getRequest()\n\t\t\t\t.getRelativePathPrefixToWicketHandler() +\n\t\t\t\tredirectUrl);\n\t\t}\n\t}","id":46566,"modified_method":"/**\n\t * @see org.apache.wicket.IRequestTarget#respond(org.apache.wicket.RequestCycle)\n\t */\n\tpublic void respond(RequestCycle requestCycle)\n\t{\n\t\tResponse response = requestCycle.getResponse();\n\t\tresponse.reset();\n\t\tif (redirectUrl.startsWith(\"/\"))\n\t\t{\n\t\t\t// context-absolute url\n\n\t\t\tRequestContext rc = RequestContext.get();\n\t\t\tString continueTo = null;\n\t\t\tif (rc.isPortletRequest() && ((PortletRequestContext)rc).isEmbedded())\n\t\t\t{\n\t\t\t\tresponse.redirect(redirectUrl);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tString location = RequestCycle.get()\n\t\t\t\t\t.getProcessor()\n\t\t\t\t\t.getRequestCodingStrategy()\n\t\t\t\t\t.rewriteStaticRelativeUrl(redirectUrl.substring(1));\n\t\t\t\tif (location.startsWith(\"./\"))\n\t\t\t\t{\n\t\t\t\t\tlocation = location.substring(2);\n\t\t\t\t}\n\t\t\t\tresponse.redirect(location);\n\t\t\t}\n\t\t}\n\t\telse if (redirectUrl.contains(\"://\"))\n\t\t{\n\t\t\t// absolute url\n\t\t\tresponse.redirect(redirectUrl);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// relative url\n\t\t\tresponse.redirect(RequestCycle.get()\n\t\t\t\t.getRequest()\n\t\t\t\t.getRelativePathPrefixToWicketHandler() +\n\t\t\t\tredirectUrl);\n\t\t}\n\t}","commit_id":"bc137abf028ad201cb40d506d00064155e15aa21","url":"https://github.com/apache/wicket"},{"original_method":"/**\n   * Sets up all dependencies before a test runs.\n   */\n  @Before\n  public void before() throws Exception {\n    Journal journal = new ReadWriteJournal(mTestFolder.newFolder().getAbsolutePath());\n    mFileSystemMaster = Mockito.mock(FileSystemMaster.class);\n    ThreadFactory threadPool = ThreadFactoryUtils.build(\"LineageMasterTest-%d\", true);\n    mExecutorService = Executors.newFixedThreadPool(2, threadPool);\n    mLineageMaster = new LineageMaster(mFileSystemMaster, journal, mExecutorService);\n    mLineageMaster.start(true);\n    mJob = new CommandLineJob(\"test\", new JobConf(\"output\"));\n  }","id":46567,"modified_method":"/**\n   * Sets up all dependencies before a test runs.\n   */\n  @Before\n  public void before() throws Exception {\n    Journal journal = new ReadWriteJournal(mTestFolder.newFolder().getAbsolutePath());\n    mFileSystemMaster = Mockito.mock(FileSystemMaster.class);\n    ThreadFactory threadPool = ThreadFactoryUtils.build(\"LineageMasterTest-%d\", true);\n    mExecutorService = Executors.newFixedThreadPool(2, threadPool);\n    mLineageMaster = new LineageMaster(mFileSystemMaster, journal, mExecutorService);\n    mJob = new CommandLineJob(\"test\", new JobConf(\"output\"));\n  }","commit_id":"866364200e911bfd3f27dc5eccb0b981d38777ea","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void stop() throws Exception {\n    mLineageMaster.stop();\n    Assert.assertTrue(mExecutorService.isShutdown());\n    Assert.assertTrue(mExecutorService.isTerminated());\n  }","id":46568,"modified_method":"@Test\n  public void stop() throws Exception {\n    mLineageMaster.start(true);\n    mLineageMaster.stop();\n    Assert.assertTrue(mExecutorService.isShutdown());\n    Assert.assertTrue(mExecutorService.isTerminated());\n  }","commit_id":"866364200e911bfd3f27dc5eccb0b981d38777ea","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests the {@link LineageMaster#reinitializeFile(String, long, long)} method.\n   */\n  @Test\n  public void reinitializeFile() throws Exception {\n    mLineageMaster.createLineage(new ArrayList<AlluxioURI>(),\n        Lists.newArrayList(new AlluxioURI(\"/test1\")), mJob);\n    FileInfo fileInfo = new FileInfo();\n    fileInfo.setCompleted(false);\n    Mockito.doReturn(fileInfo).when(mFileSystemMaster).getFileInfo(Mockito.any(Long.class));\n    mLineageMaster.reinitializeFile(\"/test1\", 500L, 10L);\n    Mockito.verify(mFileSystemMaster).reinitializeFile(new AlluxioURI(\"/test1\"), 500L, 10L);\n  }","id":46569,"modified_method":"/**\n   * Tests the {@link LineageMaster#reinitializeFile(String, long, long)} method.\n   */\n  @Test\n  public void reinitializeFile() throws Exception {\n    FileInfo fileInfo = new FileInfo();\n    fileInfo.setCompleted(false);\n    Mockito.when(mFileSystemMaster.getFileInfo(Mockito.any(Long.class))).thenReturn(fileInfo);\n    mLineageMaster.start(true);\n    mLineageMaster.createLineage(new ArrayList<AlluxioURI>(),\n        Lists.newArrayList(new AlluxioURI(\"/test1\")), mJob);\n    mLineageMaster.reinitializeFile(\"/test1\", 500L, 10L);\n    Mockito.verify(mFileSystemMaster).reinitializeFile(new AlluxioURI(\"/test1\"), 500L, 10L);\n  }","commit_id":"866364200e911bfd3f27dc5eccb0b981d38777ea","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests the {@link LineageMaster#getLineageInfoList()} method.\n   */\n  @Test\n  public void listLineages() throws Exception {\n    mLineageMaster.createLineage(new ArrayList<AlluxioURI>(),\n        Lists.newArrayList(new AlluxioURI(\"/test1\")), mJob);\n    mLineageMaster.createLineage(Lists.newArrayList(new AlluxioURI(\"/test1\")),\n        Lists.newArrayList(new AlluxioURI(\"/test2\")), mJob);\n    Mockito.doReturn(new AlluxioURI(\"test\")).when(mFileSystemMaster).getPath(Mockito.anyLong());\n    List<LineageInfo> info = mLineageMaster.getLineageInfoList();\n    Assert.assertEquals(2, info.size());\n  }","id":46570,"modified_method":"/**\n   * Tests the {@link LineageMaster#getLineageInfoList()} method.\n   */\n  @Test\n  public void listLineages() throws Exception {\n    Mockito.when(mFileSystemMaster.getPath(Mockito.anyLong())).thenReturn(new AlluxioURI(\"test\"));\n    mLineageMaster.start(true);\n    mLineageMaster.createLineage(new ArrayList<AlluxioURI>(),\n        Lists.newArrayList(new AlluxioURI(\"/test1\")), mJob);\n    mLineageMaster.createLineage(Lists.newArrayList(new AlluxioURI(\"/test1\")),\n        Lists.newArrayList(new AlluxioURI(\"/test2\")), mJob);\n    List<LineageInfo> info = mLineageMaster.getLineageInfoList();\n    Assert.assertEquals(2, info.size());\n  }","commit_id":"866364200e911bfd3f27dc5eccb0b981d38777ea","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests that an exception is thrown when trying to delete a non-existing lineage via the\n   * {@link LineageMaster#deleteLineage(long, boolean)} method.\n   */\n  @Test\n  public void deleteNonexistingLineage() throws Exception {\n    long id = 1L;\n    try {\n      mLineageMaster.deleteLineage(id, false);\n      Assert.fail();\n    } catch (LineageDoesNotExistException e) {\n      Assert.assertEquals(ExceptionMessage.LINEAGE_DOES_NOT_EXIST.getMessage(id), e.getMessage());\n    }\n  }","id":46571,"modified_method":"/**\n   * Tests that an exception is thrown when trying to delete a non-existing lineage via the\n   * {@link LineageMaster#deleteLineage(long, boolean)} method.\n   */\n  @Test\n  public void deleteNonexistingLineage() throws Exception {\n    mLineageMaster.start(true);\n    long id = 1L;\n    try {\n      mLineageMaster.deleteLineage(id, false);\n      Assert.fail();\n    } catch (LineageDoesNotExistException e) {\n      Assert.assertEquals(ExceptionMessage.LINEAGE_DOES_NOT_EXIST.getMessage(id), e.getMessage());\n    }\n  }","commit_id":"866364200e911bfd3f27dc5eccb0b981d38777ea","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests that an exception is thrown when trying to create a lineage for a non-existing file via\n   * the {@link LineageMaster#createLineage(List, List, Job)} method.\n   */\n  @Test\n  public void createLineageWithNonExistingFile() throws Exception {\n    AlluxioURI missingInput = new AlluxioURI(\"/test1\");\n    Mockito.doReturn(-1L).when(mFileSystemMaster).getFileId(missingInput);\n    // try catch block used because ExpectedExceptionRule conflicts with Powermock\n    try {\n      mLineageMaster.createLineage(Lists.newArrayList(missingInput),\n          Lists.newArrayList(new AlluxioURI(\"/test2\")), mJob);\n      Assert.fail();\n    } catch (FileDoesNotExistException e) {\n      Assert.assertEquals(ExceptionMessage.LINEAGE_INPUT_FILE_NOT_EXIST.getMessage(\"/test1\"),\n          e.getMessage());\n    }\n  }","id":46572,"modified_method":"/**\n   * Tests that an exception is thrown when trying to create a lineage for a non-existing file via\n   * the {@link LineageMaster#createLineage(List, List, Job)} method.\n   */\n  @Test\n  public void createLineageWithNonExistingFile() throws Exception {\n    AlluxioURI missingInput = new AlluxioURI(\"/test1\");\n    Mockito.when(mFileSystemMaster.getFileId(missingInput)).thenReturn(IdUtils.INVALID_FILE_ID);\n    mLineageMaster.start(true);\n    // try catch block used because ExpectedExceptionRule conflicts with Powermock\n    try {\n      mLineageMaster.createLineage(Lists.newArrayList(missingInput),\n          Lists.newArrayList(new AlluxioURI(\"/test2\")), mJob);\n      Assert.fail();\n    } catch (FileDoesNotExistException e) {\n      Assert.assertEquals(ExceptionMessage.LINEAGE_INPUT_FILE_NOT_EXIST.getMessage(\"/test1\"),\n          e.getMessage());\n    }\n  }","commit_id":"866364200e911bfd3f27dc5eccb0b981d38777ea","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests that an exception is thrown when trying to delete a lineage with children via the\n   * {@link LineageMaster#deleteLineage(long, boolean)} without setting the {@code cascade} flag to\n   * {@code true}.\n   */\n  @Test\n  public void deleteLineageWithChildren() throws Exception {\n    long l1 = mLineageMaster.createLineage(new ArrayList<AlluxioURI>(),\n        Lists.newArrayList(new AlluxioURI(\"/test1\")), mJob);\n    mLineageMaster.createLineage(Lists.newArrayList(new AlluxioURI(\"/test1\")),\n        Lists.newArrayList(new AlluxioURI(\"/test2\")), mJob);\n    try {\n      mLineageMaster.deleteLineage(l1, false);\n      Assert.fail();\n    } catch (LineageDeletionException e) {\n      Assert.assertEquals(ExceptionMessage.DELETE_LINEAGE_WITH_CHILDREN.getMessage(l1),\n          e.getMessage());\n    }\n  }","id":46573,"modified_method":"/**\n   * Tests that an exception is thrown when trying to delete a lineage with children via the\n   * {@link LineageMaster#deleteLineage(long, boolean)} without setting the {@code cascade} flag to\n   * {@code true}.\n   */\n  @Test\n  public void deleteLineageWithChildren() throws Exception {\n    mLineageMaster.start(true);\n    long l1 = mLineageMaster.createLineage(new ArrayList<AlluxioURI>(),\n        Lists.newArrayList(new AlluxioURI(\"/test1\")), mJob);\n    mLineageMaster.createLineage(Lists.newArrayList(new AlluxioURI(\"/test1\")),\n        Lists.newArrayList(new AlluxioURI(\"/test2\")), mJob);\n    try {\n      mLineageMaster.deleteLineage(l1, false);\n      Assert.fail();\n    } catch (LineageDeletionException e) {\n      Assert.assertEquals(ExceptionMessage.DELETE_LINEAGE_WITH_CHILDREN.getMessage(l1),\n          e.getMessage());\n    }\n  }","commit_id":"866364200e911bfd3f27dc5eccb0b981d38777ea","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests the {@link LineageMaster#deleteLineage(long, boolean)} method.\n   */\n  @Test\n  public void deleteLineage() throws Exception {\n    long l1 = mLineageMaster.createLineage(new ArrayList<AlluxioURI>(),\n        Lists.newArrayList(new AlluxioURI(\"/test1\")), mJob);\n    mLineageMaster.createLineage(Lists.newArrayList(new AlluxioURI(\"/test1\")),\n        Lists.newArrayList(new AlluxioURI(\"/test2\")), mJob);\n    mLineageMaster.deleteLineage(l1, true);\n    List<LineageInfo> info = mLineageMaster.getLineageInfoList();\n    Assert.assertEquals(0, info.size());\n  }","id":46574,"modified_method":"/**\n   * Tests the {@link LineageMaster#deleteLineage(long, boolean)} method.\n   */\n  @Test\n  public void deleteLineage() throws Exception {\n    mLineageMaster.start(true);\n    long l1 = mLineageMaster.createLineage(new ArrayList<AlluxioURI>(),\n        Lists.newArrayList(new AlluxioURI(\"/test1\")), mJob);\n    mLineageMaster.createLineage(Lists.newArrayList(new AlluxioURI(\"/test1\")),\n        Lists.newArrayList(new AlluxioURI(\"/test2\")), mJob);\n    mLineageMaster.deleteLineage(l1, true);\n    List<LineageInfo> info = mLineageMaster.getLineageInfoList();\n    Assert.assertEquals(0, info.size());\n  }","commit_id":"866364200e911bfd3f27dc5eccb0b981d38777ea","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests that completing a file asynchronously works.\n   */\n  @Test\n  public void asyncCompleteFile() throws Exception {\n    AlluxioURI file = new AlluxioURI(\"/test1\");\n    mLineageMaster.createLineage(new ArrayList<AlluxioURI>(), Lists.newArrayList(file), mJob);\n    mFileSystemMaster.completeFile(file, CompleteFileOptions.defaults());\n    Mockito.verify(mFileSystemMaster).completeFile(Mockito.eq(file),\n        Mockito.any(CompleteFileOptions.class));\n  }","id":46575,"modified_method":"/**\n   * Tests that completing a file asynchronously works.\n   */\n  @Test\n  public void asyncCompleteFile() throws Exception {\n    mLineageMaster.start(true);\n    AlluxioURI file = new AlluxioURI(\"/test1\");\n    mLineageMaster.createLineage(new ArrayList<AlluxioURI>(), Lists.newArrayList(file), mJob);\n    mFileSystemMaster.completeFile(file, CompleteFileOptions.defaults());\n    Mockito.verify(mFileSystemMaster).completeFile(Mockito.eq(file),\n        Mockito.any(CompleteFileOptions.class));\n  }","commit_id":"866364200e911bfd3f27dc5eccb0b981d38777ea","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests that an exception is thrown when trying to create a lineage for a non-existing file via\n   * the {@link LineageMaster#createLineage(List, List, Job)} method.\n   */\n  @Test\n  public void createLineageWithNonExistingFileTest() throws Exception {\n    AlluxioURI missingInput = new AlluxioURI(\"/test1\");\n    Mockito.when(mFileSystemMaster.getFileId(missingInput)).thenReturn(-1L);\n    // try catch block used because ExpectedExceptionRule conflicts with Powermock\n    try {\n      mLineageMaster.createLineage(Lists.newArrayList(missingInput),\n          Lists.newArrayList(new AlluxioURI(\"/test2\")), mJob);\n      Assert.fail();\n    } catch (FileDoesNotExistException e) {\n      Assert.assertEquals(ExceptionMessage.LINEAGE_INPUT_FILE_NOT_EXIST.getMessage(\"/test1\"),\n          e.getMessage());\n    }\n  }","id":46576,"modified_method":"/**\n   * Tests that an exception is thrown when trying to create a lineage for a non-existing file via\n   * the {@link LineageMaster#createLineage(List, List, Job)} method.\n   */\n  @Test\n  public void createLineageWithNonExistingFileTest() throws Exception {\n    AlluxioURI missingInput = new AlluxioURI(\"/test1\");\n    Mockito.doReturn(-1L).when(mFileSystemMaster).getFileId(missingInput);\n    // try catch block used because ExpectedExceptionRule conflicts with Powermock\n    try {\n      mLineageMaster.createLineage(Lists.newArrayList(missingInput),\n          Lists.newArrayList(new AlluxioURI(\"/test2\")), mJob);\n      Assert.fail();\n    } catch (FileDoesNotExistException e) {\n      Assert.assertEquals(ExceptionMessage.LINEAGE_INPUT_FILE_NOT_EXIST.getMessage(\"/test1\"),\n          e.getMessage());\n    }\n  }","commit_id":"c6eb1951c53d695dfe8bed0eb30e80ab702bb07e","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests the {@link LineageMaster#reinitializeFile(String, long, long)} method.\n   */\n  @Test\n  public void reinitializeFileTest() throws Exception {\n    mLineageMaster.createLineage(new ArrayList<AlluxioURI>(),\n        Lists.newArrayList(new AlluxioURI(\"/test1\")), mJob);\n    FileInfo fileInfo = new FileInfo();\n    fileInfo.setCompleted(false);\n    Mockito.when(mFileSystemMaster.getFileInfo(Mockito.any(Long.class))).thenReturn(fileInfo);\n    mLineageMaster.reinitializeFile(\"/test1\", 500L, 10L);\n    Mockito.verify(mFileSystemMaster).reinitializeFile(new AlluxioURI(\"/test1\"), 500L, 10L);\n  }","id":46577,"modified_method":"/**\n   * Tests the {@link LineageMaster#reinitializeFile(String, long, long)} method.\n   */\n  @Test\n  public void reinitializeFileTest() throws Exception {\n    mLineageMaster.createLineage(new ArrayList<AlluxioURI>(),\n        Lists.newArrayList(new AlluxioURI(\"/test1\")), mJob);\n    FileInfo fileInfo = new FileInfo();\n    fileInfo.setCompleted(false);\n    Mockito.doReturn(fileInfo).when(mFileSystemMaster).getFileInfo(Mockito.any(Long.class));\n    mLineageMaster.reinitializeFile(\"/test1\", 500L, 10L);\n    Mockito.verify(mFileSystemMaster).reinitializeFile(new AlluxioURI(\"/test1\"), 500L, 10L);\n  }","commit_id":"c6eb1951c53d695dfe8bed0eb30e80ab702bb07e","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests the {@link LineageMaster#getLineageInfoList()} method.\n   */\n  @Test\n  public void listLineagesTest() throws Exception {\n    mLineageMaster.createLineage(new ArrayList<AlluxioURI>(),\n        Lists.newArrayList(new AlluxioURI(\"/test1\")), mJob);\n    mLineageMaster.createLineage(Lists.newArrayList(new AlluxioURI(\"/test1\")),\n        Lists.newArrayList(new AlluxioURI(\"/test2\")), mJob);\n    Mockito.when(mFileSystemMaster.getPath(Mockito.anyLong())).thenReturn(new AlluxioURI(\"test\"));\n    List<LineageInfo> info = mLineageMaster.getLineageInfoList();\n    Assert.assertEquals(2, info.size());\n  }","id":46578,"modified_method":"/**\n   * Tests the {@link LineageMaster#getLineageInfoList()} method.\n   */\n  @Test\n  public void listLineagesTest() throws Exception {\n    mLineageMaster.createLineage(new ArrayList<AlluxioURI>(),\n        Lists.newArrayList(new AlluxioURI(\"/test1\")), mJob);\n    mLineageMaster.createLineage(Lists.newArrayList(new AlluxioURI(\"/test1\")),\n        Lists.newArrayList(new AlluxioURI(\"/test2\")), mJob);\n    Mockito.doReturn(new AlluxioURI(\"test\")).when(mFileSystemMaster).getPath(Mockito.anyLong());\n    List<LineageInfo> info = mLineageMaster.getLineageInfoList();\n    Assert.assertEquals(2, info.size());\n  }","commit_id":"c6eb1951c53d695dfe8bed0eb30e80ab702bb07e","url":"https://github.com/amplab/tachyon"},{"original_method":"public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            // In java 6, proxiesHeaderValue should be declared as a java.util.Deque\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            // loop on remoteIpHeaderValue to find the first trusted remote ip and to build the proxies chain\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    // do nothing, internalProxies IPs are not appended to the\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; // decrement idx because break statement doesn't do it\n                    break;\n                }\n            }\n            // continue to loop on remoteIpHeaderValue to build the new value of the remoteIpHeader\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    // don't modify the secure,scheme and serverPort attributes of the request\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, response);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }","id":46579,"modified_method":"public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {\n\n        if (internalProxies != null &&\n                internalProxies.matcher(request.getRemoteAddr()).matches()) {\n            String remoteIp = null;\n            // In java 6, proxiesHeaderValue should be declared as a java.util.Deque\n            LinkedList<String> proxiesHeaderValue = new LinkedList<>();\n            StringBuilder concatRemoteIpHeaderValue = new StringBuilder();\n\n            for (Enumeration<String> e = request.getHeaders(remoteIpHeader); e.hasMoreElements();) {\n                if (concatRemoteIpHeaderValue.length() > 0) {\n                    concatRemoteIpHeaderValue.append(\", \");\n                }\n\n                concatRemoteIpHeaderValue.append(e.nextElement());\n            }\n\n            String[] remoteIpHeaderValue = commaDelimitedListToStringArray(concatRemoteIpHeaderValue.toString());\n            int idx;\n            // loop on remoteIpHeaderValue to find the first trusted remote ip and to build the proxies chain\n            for (idx = remoteIpHeaderValue.length - 1; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                remoteIp = currentRemoteIp;\n                if (internalProxies.matcher(currentRemoteIp).matches()) {\n                    // do nothing, internalProxies IPs are not appended to the\n                } else if (trustedProxies != null &&\n                        trustedProxies.matcher(currentRemoteIp).matches()) {\n                    proxiesHeaderValue.addFirst(currentRemoteIp);\n                } else {\n                    idx--; // decrement idx because break statement doesn't do it\n                    break;\n                }\n            }\n            // continue to loop on remoteIpHeaderValue to build the new value of the remoteIpHeader\n            LinkedList<String> newRemoteIpHeaderValue = new LinkedList<>();\n            for (; idx >= 0; idx--) {\n                String currentRemoteIp = remoteIpHeaderValue[idx];\n                newRemoteIpHeaderValue.addFirst(currentRemoteIp);\n            }\n\n            XForwardedRequest xRequest = new XForwardedRequest(request);\n            if (remoteIp != null) {\n\n                xRequest.setRemoteAddr(remoteIp);\n                xRequest.setRemoteHost(remoteIp);\n\n                if (proxiesHeaderValue.size() == 0) {\n                    xRequest.removeHeader(proxiesHeader);\n                } else {\n                    String commaDelimitedListOfProxies = listToCommaDelimitedString(proxiesHeaderValue);\n                    xRequest.setHeader(proxiesHeader, commaDelimitedListOfProxies);\n                }\n                if (newRemoteIpHeaderValue.size() == 0) {\n                    xRequest.removeHeader(remoteIpHeader);\n                } else {\n                    String commaDelimitedRemoteIpHeaderValue = listToCommaDelimitedString(newRemoteIpHeaderValue);\n                    xRequest.setHeader(remoteIpHeader, commaDelimitedRemoteIpHeaderValue);\n                }\n            }\n\n            if (protocolHeader != null) {\n                String protocolHeaderValue = request.getHeader(protocolHeader);\n                if (protocolHeaderValue == null) {\n                    // don't modify the secure,scheme and serverPort attributes of the request\n                } else if (protocolHeaderHttpsValue.equalsIgnoreCase(protocolHeaderValue)) {\n                    xRequest.setSecure(true);\n                    xRequest.setScheme(\"https\");\n                    setPorts(xRequest, httpsServerPort);\n                } else {\n                    xRequest.setSecure(false);\n                    xRequest.setScheme(\"http\");\n                    setPorts(xRequest, httpServerPort);\n                }\n            }\n\n            HttpServletResponse xResponse;\n            if (xRequest.getScheme() != request.getScheme() ||\n                    xRequest.getServerPort() != request.getServerPort()) {\n                xResponse = new XForwardedResponse(response, xRequest.getScheme(), xRequest.getServerPort());\n            } else {\n                xResponse = response;\n            }\n\n            if (log.isDebugEnabled()) {\n                log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIpHeader + \"]='\"\n                        + concatRemoteIpHeaderValue + \"', original[\" + protocolHeader + \"]='\"\n                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIpHeader + \"]='\"\n                        + xRequest.getHeader(remoteIpHeader) + \"', new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n            }\n            if (requestAttributesEnabled) {\n                request.setAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(Globals.REMOTE_ADDR_ATTRIBUTE,\n                        xRequest.getRemoteAddr());\n                request.setAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE,\n                        xRequest.getRemoteHost());\n                request.setAttribute(AccessLog.PROTOCOL_ATTRIBUTE,\n                        xRequest.getProtocol());\n                request.setAttribute(AccessLog.SERVER_PORT_ATTRIBUTE,\n                        Integer.valueOf(xRequest.getServerPort()));\n            }\n            chain.doFilter(xRequest, xResponse);\n        } else {\n            if (log.isDebugEnabled()) {\n                log.debug(\"Skip RemoteIpFilter for request \" + request.getRequestURI() + \" with originalRemoteAddr '\"\n                        + request.getRemoteAddr() + \"'\");\n            }\n            chain.doFilter(request, response);\n        }\n\n    }","commit_id":"4921e131879a1aa4a77db51ae2ac3a226176f619","url":"https://github.com/apache/tomcat"},{"original_method":"@Test\n    public void testInvokeAllProxiesAreTrustedAndRemoteAddrMatchRegexp() throws Exception {\n\n        // PREPARE\n        FilterDef filterDef = new FilterDef();\n        filterDef.addInitParameter(\"internalProxies\", \"127\\\\.0\\\\.0\\\\.1|192\\\\.168\\\\..*|another-internal-proxy\");\n        filterDef.addInitParameter(\"trustedProxies\", \"proxy1|proxy2|proxy3\");\n        filterDef.addInitParameter(\"remoteIpHeader\", \"x-forwarded-for\");\n        filterDef.addInitParameter(\"proxiesHeader\", \"x-forwarded-by\");\n\n        MockHttpServletRequest request = new MockHttpServletRequest();\n        request.setRemoteAddr(\"192.168.0.10\");\n        request.setRemoteHost(\"remote-host-original-value\");\n        request.addHeader(\"x-forwarded-for\", \"140.211.11.130\");\n        request.addHeader(\"x-forwarded-for\", \"proxy1\");\n        request.addHeader(\"x-forwarded-for\", \"proxy2\");\n\n        // TEST\n        HttpServletRequest actualRequest = testRemoteIpFilter(filterDef, request);\n\n        // VERIFY\n        String actualXForwardedFor = actualRequest.getHeader(\"x-forwarded-for\");\n        assertNull(\"all proxies are trusted, x-forwarded-for must be null\", actualXForwardedFor);\n\n        String actualXForwardedBy = actualRequest.getHeader(\"x-forwarded-by\");\n        assertEquals(\"all proxies are trusted, they must appear in x-forwarded-by\", \"proxy1, proxy2\", actualXForwardedBy);\n\n        String actualRemoteAddr = actualRequest.getRemoteAddr();\n        assertEquals(\"remoteAddr\", \"140.211.11.130\", actualRemoteAddr);\n\n        String actualRemoteHost = actualRequest.getRemoteHost();\n        assertEquals(\"remoteHost\", \"140.211.11.130\", actualRemoteHost);\n    }","id":46580,"modified_method":"@Test\n    public void testInvokeAllProxiesAreTrustedAndRemoteAddrMatchRegexp() throws Exception {\n\n        // PREPARE\n        FilterDef filterDef = new FilterDef();\n        filterDef.addInitParameter(\"internalProxies\", \"127\\\\.0\\\\.0\\\\.1|192\\\\.168\\\\..*|another-internal-proxy\");\n        filterDef.addInitParameter(\"trustedProxies\", \"proxy1|proxy2|proxy3\");\n        filterDef.addInitParameter(\"remoteIpHeader\", \"x-forwarded-for\");\n        filterDef.addInitParameter(\"proxiesHeader\", \"x-forwarded-by\");\n\n        MockHttpServletRequest request = new MockHttpServletRequest();\n        request.setRemoteAddr(\"192.168.0.10\");\n        request.setRemoteHost(\"remote-host-original-value\");\n        request.addHeader(\"x-forwarded-for\", \"140.211.11.130\");\n        request.addHeader(\"x-forwarded-for\", \"proxy1\");\n        request.addHeader(\"x-forwarded-for\", \"proxy2\");\n\n        // TEST\n        HttpServletRequest actualRequest = testRemoteIpFilter(filterDef, request).getRequest();\n\n        // VERIFY\n        String actualXForwardedFor = actualRequest.getHeader(\"x-forwarded-for\");\n        assertNull(\"all proxies are trusted, x-forwarded-for must be null\", actualXForwardedFor);\n\n        String actualXForwardedBy = actualRequest.getHeader(\"x-forwarded-by\");\n        assertEquals(\"all proxies are trusted, they must appear in x-forwarded-by\", \"proxy1, proxy2\", actualXForwardedBy);\n\n        String actualRemoteAddr = actualRequest.getRemoteAddr();\n        assertEquals(\"remoteAddr\", \"140.211.11.130\", actualRemoteAddr);\n\n        String actualRemoteHost = actualRequest.getRemoteHost();\n        assertEquals(\"remoteHost\", \"140.211.11.130\", actualRemoteHost);\n    }","commit_id":"4921e131879a1aa4a77db51ae2ac3a226176f619","url":"https://github.com/apache/tomcat"},{"original_method":"@Override\n        public void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException {\n            this.request = (HttpServletRequest) request;\n        }","id":46581,"modified_method":"@Override\n        public void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException {\n            this.request = (HttpServletRequest) request;\n            this.response = (HttpServletResponse) response;\n        }","commit_id":"4921e131879a1aa4a77db51ae2ac3a226176f619","url":"https://github.com/apache/tomcat"},{"original_method":"@Test\n    public void testInvokeAllowedRemoteAddrWithNullRemoteIpHeader() throws Exception {\n        // PREPARE\n        FilterDef filterDef = new FilterDef();\n        filterDef.addInitParameter(\"internalProxies\", \"192\\\\.168\\\\.0\\\\.10|192\\\\.168\\\\.0\\\\.11\");\n        filterDef.addInitParameter(\"trustedProxies\", \"proxy1|proxy2|proxy3\");\n        filterDef.addInitParameter(\"remoteIpHeader\", \"x-forwarded-for\");\n        filterDef.addInitParameter(\"proxiesHeader\", \"x-forwarded-by\");\n\n        MockHttpServletRequest request = new MockHttpServletRequest();\n        request.setRemoteAddr(\"192.168.0.10\");\n        request.setRemoteHost(\"remote-host-original-value\");\n\n        // TEST\n        HttpServletRequest actualRequest = testRemoteIpFilter(filterDef, request);\n\n        // VERIFY\n        String actualXForwardedFor = request.getHeader(\"x-forwarded-for\");\n        assertNull(\"x-forwarded-for must be null\", actualXForwardedFor);\n\n        String actualXForwardedBy = request.getHeader(\"x-forwarded-by\");\n        assertNull(\"x-forwarded-by must be null\", actualXForwardedBy);\n\n        String actualRemoteAddr = actualRequest.getRemoteAddr();\n        assertEquals(\"remoteAddr\", \"192.168.0.10\", actualRemoteAddr);\n\n        String actualRemoteHost = actualRequest.getRemoteHost();\n        assertEquals(\"remoteHost\", \"remote-host-original-value\", actualRemoteHost);\n\n    }","id":46582,"modified_method":"@Test\n    public void testInvokeAllowedRemoteAddrWithNullRemoteIpHeader() throws Exception {\n        // PREPARE\n        FilterDef filterDef = new FilterDef();\n        filterDef.addInitParameter(\"internalProxies\", \"192\\\\.168\\\\.0\\\\.10|192\\\\.168\\\\.0\\\\.11\");\n        filterDef.addInitParameter(\"trustedProxies\", \"proxy1|proxy2|proxy3\");\n        filterDef.addInitParameter(\"remoteIpHeader\", \"x-forwarded-for\");\n        filterDef.addInitParameter(\"proxiesHeader\", \"x-forwarded-by\");\n\n        MockHttpServletRequest request = new MockHttpServletRequest();\n        request.setRemoteAddr(\"192.168.0.10\");\n        request.setRemoteHost(\"remote-host-original-value\");\n\n        // TEST\n        HttpServletRequest actualRequest = testRemoteIpFilter(filterDef, request).getRequest();\n\n        // VERIFY\n        String actualXForwardedFor = request.getHeader(\"x-forwarded-for\");\n        assertNull(\"x-forwarded-for must be null\", actualXForwardedFor);\n\n        String actualXForwardedBy = request.getHeader(\"x-forwarded-by\");\n        assertNull(\"x-forwarded-by must be null\", actualXForwardedBy);\n\n        String actualRemoteAddr = actualRequest.getRemoteAddr();\n        assertEquals(\"remoteAddr\", \"192.168.0.10\", actualRemoteAddr);\n\n        String actualRemoteHost = actualRequest.getRemoteHost();\n        assertEquals(\"remoteHost\", \"remote-host-original-value\", actualRemoteHost);\n    }","commit_id":"4921e131879a1aa4a77db51ae2ac3a226176f619","url":"https://github.com/apache/tomcat"},{"original_method":"@Test\n    public void testIncomingRequestIsSecuredButProtocolHeaderSaysItIsNotWithCustomValues() throws Exception {\n        // PREPARE\n        FilterDef filterDef = new FilterDef();\n        filterDef.addInitParameter(\"protocolHeader\", \"x-forwarded-proto\");\n        filterDef.addInitParameter(\"remoteIpHeader\", \"x-my-forwarded-for\");\n        filterDef.addInitParameter(\"httpServerPort\", \"8080\");\n\n        MockHttpServletRequest request = new MockHttpServletRequest();\n        request.setRemoteAddr(\"192.168.0.10\");\n        request.setSecure(true);\n        request.setScheme(\"https\");\n        request.setHeader(\"x-my-forwarded-for\", \"140.211.11.130\");\n        request.setHeader(\"x-forwarded-proto\", \"http\");\n\n        // TEST\n        HttpServletRequest actualRequest = testRemoteIpFilter(filterDef, request);\n\n        // VERIFY\n        boolean actualSecure = actualRequest.isSecure();\n        assertFalse(\"request must be unsecured as header x-forwarded-proto said it is http\", actualSecure);\n\n        String actualScheme = actualRequest.getScheme();\n        assertEquals(\"scheme must be http as header x-forwarded-proto said it is http\", \"http\", actualScheme);\n\n        int actualServerPort = actualRequest.getServerPort();\n        assertEquals(\"wrong http server port\", 8080, actualServerPort);\n\n        String actualRemoteAddr = actualRequest.getRemoteAddr();\n        assertEquals(\"remoteAddr\", \"140.211.11.130\", actualRemoteAddr);\n\n        String actualRemoteHost = actualRequest.getRemoteHost();\n        assertEquals(\"remoteHost\", \"140.211.11.130\", actualRemoteHost);\n    }","id":46583,"modified_method":"@Test\n    public void testIncomingRequestIsSecuredButProtocolHeaderSaysItIsNotWithCustomValues() throws Exception {\n        // PREPARE\n        FilterDef filterDef = new FilterDef();\n        filterDef.addInitParameter(\"protocolHeader\", \"x-forwarded-proto\");\n        filterDef.addInitParameter(\"remoteIpHeader\", \"x-my-forwarded-for\");\n        filterDef.addInitParameter(\"httpServerPort\", \"8080\");\n\n        MockHttpServletRequest request = new MockHttpServletRequest();\n        request.setRemoteAddr(\"192.168.0.10\");\n        request.setSecure(true);\n        request.setScheme(\"https\");\n        request.setHeader(\"x-my-forwarded-for\", \"140.211.11.130\");\n        request.setHeader(\"x-forwarded-proto\", \"http\");\n\n        // TEST\n        HttpServletRequest actualRequest = testRemoteIpFilter(filterDef, request).getRequest();\n\n        // VERIFY\n        boolean actualSecure = actualRequest.isSecure();\n        assertFalse(\"request must be unsecured as header x-forwarded-proto said it is http\", actualSecure);\n\n        String actualScheme = actualRequest.getScheme();\n        assertEquals(\"scheme must be http as header x-forwarded-proto said it is http\", \"http\", actualScheme);\n\n        int actualServerPort = actualRequest.getServerPort();\n        assertEquals(\"wrong http server port\", 8080, actualServerPort);\n\n        String actualRemoteAddr = actualRequest.getRemoteAddr();\n        assertEquals(\"remoteAddr\", \"140.211.11.130\", actualRemoteAddr);\n\n        String actualRemoteHost = actualRequest.getRemoteHost();\n        assertEquals(\"remoteHost\", \"140.211.11.130\", actualRemoteHost);\n    }","commit_id":"4921e131879a1aa4a77db51ae2ac3a226176f619","url":"https://github.com/apache/tomcat"},{"original_method":"@Test\n    public void testRequestAttributesForAccessLog() throws Exception {\n        // PREPARE\n        FilterDef filterDef = new FilterDef();\n        filterDef.addInitParameter(\"protocolHeader\", \"x-forwarded-proto\");\n        filterDef.addInitParameter(\"remoteIpHeader\", \"x-my-forwarded-for\");\n        filterDef.addInitParameter(\"httpServerPort\", \"8080\");\n\n        MockHttpServletRequest request = new MockHttpServletRequest();\n        request.setRemoteAddr(\"192.168.0.10\");\n        request.setHeader(\"x-my-forwarded-for\", \"140.211.11.130\");\n        request.setHeader(\"x-forwarded-proto\", \"http\");\n\n        // TEST\n        HttpServletRequest actualRequest =\n                testRemoteIpFilter(filterDef, request);\n\n        // VERIFY\n        Assert.assertEquals(\"org.apache.catalina.AccessLog.ServerPort\",\n                Integer.valueOf(8080),\n                actualRequest.getAttribute(AccessLog.SERVER_PORT_ATTRIBUTE));\n\n        Assert.assertEquals(\"org.apache.catalina.AccessLog.RemoteAddr\",\n                \"140.211.11.130\",\n                actualRequest.getAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE));\n\n        Assert.assertEquals(\"org.apache.catalina.AccessLog.RemoteHost\",\n                \"140.211.11.130\",\n                actualRequest.getAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE));\n    }","id":46584,"modified_method":"@Test\n    public void testRequestAttributesForAccessLog() throws Exception {\n        // PREPARE\n        FilterDef filterDef = new FilterDef();\n        filterDef.addInitParameter(\"protocolHeader\", \"x-forwarded-proto\");\n        filterDef.addInitParameter(\"remoteIpHeader\", \"x-my-forwarded-for\");\n        filterDef.addInitParameter(\"httpServerPort\", \"8080\");\n\n        MockHttpServletRequest request = new MockHttpServletRequest();\n        request.setRemoteAddr(\"192.168.0.10\");\n        request.setHeader(\"x-my-forwarded-for\", \"140.211.11.130\");\n        request.setHeader(\"x-forwarded-proto\", \"http\");\n\n        // TEST\n        HttpServletRequest actualRequest = testRemoteIpFilter(filterDef, request).getRequest();\n\n        // VERIFY\n        Assert.assertEquals(\"org.apache.catalina.AccessLog.ServerPort\",\n                Integer.valueOf(8080),\n                actualRequest.getAttribute(AccessLog.SERVER_PORT_ATTRIBUTE));\n\n        Assert.assertEquals(\"org.apache.catalina.AccessLog.RemoteAddr\",\n                \"140.211.11.130\",\n                actualRequest.getAttribute(AccessLog.REMOTE_ADDR_ATTRIBUTE));\n\n        Assert.assertEquals(\"org.apache.catalina.AccessLog.RemoteHost\",\n                \"140.211.11.130\",\n                actualRequest.getAttribute(AccessLog.REMOTE_HOST_ATTRIBUTE));\n    }","commit_id":"4921e131879a1aa4a77db51ae2ac3a226176f619","url":"https://github.com/apache/tomcat"},{"original_method":"@Test\n    public void testInvokeNotAllowedRemoteAddr() throws Exception {\n        // PREPARE\n        FilterDef filterDef = new FilterDef();\n        filterDef.addInitParameter(\"internalProxies\", \"192\\\\.168\\\\.0\\\\.10|192\\\\.168\\\\.0\\\\.11\");\n        filterDef.addInitParameter(\"trustedProxies\", \"proxy1|proxy2|proxy3\");\n        filterDef.addInitParameter(\"remoteIpHeader\", \"x-forwarded-for\");\n        filterDef.addInitParameter(\"proxiesHeader\", \"x-forwarded-by\");\n\n        MockHttpServletRequest request = new MockHttpServletRequest();\n\n        request.setRemoteAddr(\"not-allowed-internal-proxy\");\n        request.setRemoteHost(\"not-allowed-internal-proxy-host\");\n        request.setHeader(\"x-forwarded-for\", \"140.211.11.130, proxy1, proxy2\");\n\n        // TEST\n        HttpServletRequest actualRequest = testRemoteIpFilter(filterDef, request);\n\n        // VERIFY\n        String actualXForwardedFor = actualRequest.getHeader(\"x-forwarded-for\");\n        assertEquals(\"x-forwarded-for must be unchanged\", \"140.211.11.130, proxy1, proxy2\", actualXForwardedFor);\n\n        String actualXForwardedBy = actualRequest.getHeader(\"x-forwarded-by\");\n        assertNull(\"x-forwarded-by must be null\", actualXForwardedBy);\n\n        String actualRemoteAddr = actualRequest.getRemoteAddr();\n        assertEquals(\"remoteAddr\", \"not-allowed-internal-proxy\", actualRemoteAddr);\n\n        String actualRemoteHost = actualRequest.getRemoteHost();\n        assertEquals(\"remoteHost\", \"not-allowed-internal-proxy-host\", actualRemoteHost);\n    }","id":46585,"modified_method":"@Test\n    public void testInvokeNotAllowedRemoteAddr() throws Exception {\n        // PREPARE\n        FilterDef filterDef = new FilterDef();\n        filterDef.addInitParameter(\"internalProxies\", \"192\\\\.168\\\\.0\\\\.10|192\\\\.168\\\\.0\\\\.11\");\n        filterDef.addInitParameter(\"trustedProxies\", \"proxy1|proxy2|proxy3\");\n        filterDef.addInitParameter(\"remoteIpHeader\", \"x-forwarded-for\");\n        filterDef.addInitParameter(\"proxiesHeader\", \"x-forwarded-by\");\n\n        MockHttpServletRequest request = new MockHttpServletRequest();\n\n        request.setRemoteAddr(\"not-allowed-internal-proxy\");\n        request.setRemoteHost(\"not-allowed-internal-proxy-host\");\n        request.setHeader(\"x-forwarded-for\", \"140.211.11.130, proxy1, proxy2\");\n\n        // TEST\n        HttpServletRequest actualRequest = testRemoteIpFilter(filterDef, request).getRequest();\n\n        // VERIFY\n        String actualXForwardedFor = actualRequest.getHeader(\"x-forwarded-for\");\n        assertEquals(\"x-forwarded-for must be unchanged\", \"140.211.11.130, proxy1, proxy2\", actualXForwardedFor);\n\n        String actualXForwardedBy = actualRequest.getHeader(\"x-forwarded-by\");\n        assertNull(\"x-forwarded-by must be null\", actualXForwardedBy);\n\n        String actualRemoteAddr = actualRequest.getRemoteAddr();\n        assertEquals(\"remoteAddr\", \"not-allowed-internal-proxy\", actualRemoteAddr);\n\n        String actualRemoteHost = actualRequest.getRemoteHost();\n        assertEquals(\"remoteHost\", \"not-allowed-internal-proxy-host\", actualRemoteHost);\n    }","commit_id":"4921e131879a1aa4a77db51ae2ac3a226176f619","url":"https://github.com/apache/tomcat"},{"original_method":"@Test\n    public void testInvokeAllProxiesAreTrusted() throws Exception {\n\n        // PREPARE\n        RemoteIpFilter remoteIpFilter = new RemoteIpFilter();\n        FilterDef filterDef = new FilterDef();\n        filterDef.addInitParameter(\"internalProxies\", \"192\\\\.168\\\\.0\\\\.10|192\\\\.168\\\\.0\\\\.11\");\n        filterDef.addInitParameter(\"trustedProxies\", \"proxy1|proxy2|proxy3\");\n        filterDef.addInitParameter(\"remoteIpHeader\", \"x-forwarded-for\");\n        filterDef.addInitParameter(\"proxiesHeader\", \"x-forwarded-by\");\n\n        filterDef.setFilter(remoteIpFilter);\n        MockHttpServletRequest request = new MockHttpServletRequest();\n\n        request.setRemoteAddr(\"192.168.0.10\");\n        request.setRemoteHost(\"remote-host-original-value\");\n        request.setHeader(\"x-forwarded-for\", \"140.211.11.130, proxy1, proxy2\");\n\n        // TEST\n        HttpServletRequest actualRequest = testRemoteIpFilter(filterDef, request);\n\n        // VERIFY\n        String actualXForwardedFor = actualRequest.getHeader(\"x-forwarded-for\");\n        assertNull(\"all proxies are trusted, x-forwarded-for must be null\", actualXForwardedFor);\n\n        String actualXForwardedBy = actualRequest.getHeader(\"x-forwarded-by\");\n        assertEquals(\"all proxies are trusted, they must appear in x-forwarded-by\", \"proxy1, proxy2\", actualXForwardedBy);\n\n        String actualRemoteAddr = actualRequest.getRemoteAddr();\n        assertEquals(\"remoteAddr\", \"140.211.11.130\", actualRemoteAddr);\n\n        String actualRemoteHost = actualRequest.getRemoteHost();\n        assertEquals(\"remoteHost\", \"140.211.11.130\", actualRemoteHost);\n    }","id":46586,"modified_method":"@Test\n    public void testInvokeAllProxiesAreTrusted() throws Exception {\n\n        // PREPARE\n        RemoteIpFilter remoteIpFilter = new RemoteIpFilter();\n        FilterDef filterDef = new FilterDef();\n        filterDef.addInitParameter(\"internalProxies\", \"192\\\\.168\\\\.0\\\\.10|192\\\\.168\\\\.0\\\\.11\");\n        filterDef.addInitParameter(\"trustedProxies\", \"proxy1|proxy2|proxy3\");\n        filterDef.addInitParameter(\"remoteIpHeader\", \"x-forwarded-for\");\n        filterDef.addInitParameter(\"proxiesHeader\", \"x-forwarded-by\");\n\n        filterDef.setFilter(remoteIpFilter);\n        MockHttpServletRequest request = new MockHttpServletRequest();\n\n        request.setRemoteAddr(\"192.168.0.10\");\n        request.setRemoteHost(\"remote-host-original-value\");\n        request.setHeader(\"x-forwarded-for\", \"140.211.11.130, proxy1, proxy2\");\n\n        // TEST\n        HttpServletRequest actualRequest = testRemoteIpFilter(filterDef, request).getRequest();\n\n        // VERIFY\n        String actualXForwardedFor = actualRequest.getHeader(\"x-forwarded-for\");\n        assertNull(\"all proxies are trusted, x-forwarded-for must be null\", actualXForwardedFor);\n\n        String actualXForwardedBy = actualRequest.getHeader(\"x-forwarded-by\");\n        assertEquals(\"all proxies are trusted, they must appear in x-forwarded-by\", \"proxy1, proxy2\", actualXForwardedBy);\n\n        String actualRemoteAddr = actualRequest.getRemoteAddr();\n        assertEquals(\"remoteAddr\", \"140.211.11.130\", actualRemoteAddr);\n\n        String actualRemoteHost = actualRequest.getRemoteHost();\n        assertEquals(\"remoteHost\", \"140.211.11.130\", actualRemoteHost);\n    }","commit_id":"4921e131879a1aa4a77db51ae2ac3a226176f619","url":"https://github.com/apache/tomcat"},{"original_method":"@Test\n    public void testInvokeUntrustedProxyInTheChain() throws Exception {\n        // PREPARE\n        FilterDef filterDef = new FilterDef();\n        filterDef.addInitParameter(\"internalProxies\", \"192\\\\.168\\\\.0\\\\.10|192\\\\.168\\\\.0\\\\.11\");\n        filterDef.addInitParameter(\"trustedProxies\", \"proxy1|proxy2|proxy3\");\n        filterDef.addInitParameter(\"remoteIpHeader\", \"x-forwarded-for\");\n        filterDef.addInitParameter(\"proxiesHeader\", \"x-forwarded-by\");\n\n        MockHttpServletRequest request = new MockHttpServletRequest();\n\n        request.setRemoteAddr(\"192.168.0.10\");\n        request.setRemoteHost(\"remote-host-original-value\");\n        request.setHeader(\"x-forwarded-for\", \"140.211.11.130, proxy1, untrusted-proxy, proxy2\");\n\n        // TEST\n        HttpServletRequest actualRequest = testRemoteIpFilter(filterDef, request);\n\n        // VERIFY\n        String actualXForwardedFor = actualRequest.getHeader(\"x-forwarded-for\");\n        assertEquals(\"ip/host before untrusted-proxy must appear in x-forwarded-for\", \"140.211.11.130, proxy1\", actualXForwardedFor);\n\n        String actualXForwardedBy = actualRequest.getHeader(\"x-forwarded-by\");\n        assertEquals(\"ip/host after untrusted-proxy must appear in  x-forwarded-by\", \"proxy2\", actualXForwardedBy);\n\n        String actualRemoteAddr = actualRequest.getRemoteAddr();\n        assertEquals(\"remoteAddr\", \"untrusted-proxy\", actualRemoteAddr);\n\n        String actualRemoteHost = actualRequest.getRemoteHost();\n        assertEquals(\"remoteHost\", \"untrusted-proxy\", actualRemoteHost);\n    }","id":46587,"modified_method":"@Test\n    public void testInvokeUntrustedProxyInTheChain() throws Exception {\n        // PREPARE\n        FilterDef filterDef = new FilterDef();\n        filterDef.addInitParameter(\"internalProxies\", \"192\\\\.168\\\\.0\\\\.10|192\\\\.168\\\\.0\\\\.11\");\n        filterDef.addInitParameter(\"trustedProxies\", \"proxy1|proxy2|proxy3\");\n        filterDef.addInitParameter(\"remoteIpHeader\", \"x-forwarded-for\");\n        filterDef.addInitParameter(\"proxiesHeader\", \"x-forwarded-by\");\n\n        MockHttpServletRequest request = new MockHttpServletRequest();\n\n        request.setRemoteAddr(\"192.168.0.10\");\n        request.setRemoteHost(\"remote-host-original-value\");\n        request.setHeader(\"x-forwarded-for\", \"140.211.11.130, proxy1, untrusted-proxy, proxy2\");\n\n        // TEST\n        HttpServletRequest actualRequest = testRemoteIpFilter(filterDef, request).getRequest();\n\n        // VERIFY\n        String actualXForwardedFor = actualRequest.getHeader(\"x-forwarded-for\");\n        assertEquals(\"ip/host before untrusted-proxy must appear in x-forwarded-for\", \"140.211.11.130, proxy1\", actualXForwardedFor);\n\n        String actualXForwardedBy = actualRequest.getHeader(\"x-forwarded-by\");\n        assertEquals(\"ip/host after untrusted-proxy must appear in  x-forwarded-by\", \"proxy2\", actualXForwardedBy);\n\n        String actualRemoteAddr = actualRequest.getRemoteAddr();\n        assertEquals(\"remoteAddr\", \"untrusted-proxy\", actualRemoteAddr);\n\n        String actualRemoteHost = actualRequest.getRemoteHost();\n        assertEquals(\"remoteHost\", \"untrusted-proxy\", actualRemoteHost);\n    }","commit_id":"4921e131879a1aa4a77db51ae2ac3a226176f619","url":"https://github.com/apache/tomcat"},{"original_method":"private HttpServletRequest testRemoteIpFilter(FilterDef filterDef, Request request) throws LifecycleException, IOException,\n            ServletException {\n        Tomcat tomcat = getTomcatInstance();\n        Context root = tomcat.addContext(\"\", TEMP_DIR);\n\n        RemoteIpFilter remoteIpFilter = new RemoteIpFilter();\n        filterDef.setFilterClass(RemoteIpFilter.class.getName());\n        filterDef.setFilter(remoteIpFilter);\n        filterDef.setFilterName(RemoteIpFilter.class.getName());\n        root.addFilterDef(filterDef);\n\n        FilterMap filterMap = new FilterMap();\n        filterMap.setFilterName(RemoteIpFilter.class.getName());\n        filterMap.addURLPattern(\"*\");\n        root.addFilterMap(filterMap);\n\n        getTomcatInstance().start();\n\n        MockFilterChain filterChain = new MockFilterChain();\n\n        // TEST\n        remoteIpFilter.doFilter(request, new Response(), filterChain);\n        return filterChain.getRequest();\n    }","id":46588,"modified_method":"private MockFilterChain testRemoteIpFilter(FilterDef filterDef, Request request)\n            throws LifecycleException, IOException, ServletException {\n        Tomcat tomcat = getTomcatInstance();\n        Context root = tomcat.addContext(\"\", TEMP_DIR);\n\n        RemoteIpFilter remoteIpFilter = new RemoteIpFilter();\n        filterDef.setFilterClass(RemoteIpFilter.class.getName());\n        filterDef.setFilter(remoteIpFilter);\n        filterDef.setFilterName(RemoteIpFilter.class.getName());\n        root.addFilterDef(filterDef);\n\n        FilterMap filterMap = new FilterMap();\n        filterMap.setFilterName(RemoteIpFilter.class.getName());\n        filterMap.addURLPattern(\"*\");\n        root.addFilterMap(filterMap);\n\n        getTomcatInstance().start();\n\n        MockFilterChain filterChain = new MockFilterChain();\n\n        // TEST\n        TesterResponse response = new TesterResponse();\n        response.setRequest(request);\n        remoteIpFilter.doFilter(request, response, filterChain);\n        return filterChain;\n    }","commit_id":"4921e131879a1aa4a77db51ae2ac3a226176f619","url":"https://github.com/apache/tomcat"},{"original_method":"@Test\n    public void testInvokeAllProxiesAreInternal() throws Exception {\n\n        // PREPARE\n        FilterDef filterDef = new FilterDef();\n        filterDef.addInitParameter(\"internalProxies\", \"192\\\\.168\\\\.0\\\\.10|192\\\\.168\\\\.0\\\\.11\");\n        filterDef.addInitParameter(\"trustedProxies\", \"proxy1|proxy2|proxy3\");\n        filterDef.addInitParameter(\"remoteIpHeader\", \"x-forwarded-for\");\n        filterDef.addInitParameter(\"proxiesHeader\", \"x-forwarded-by\");\n\n        MockHttpServletRequest request = new MockHttpServletRequest();\n        request.setRemoteAddr(\"192.168.0.10\");\n        request.setRemoteHost(\"remote-host-original-value\");\n        request.addHeader(\"x-forwarded-for\", \"140.211.11.130, 192.168.0.10, 192.168.0.11\");\n\n        // TEST\n        HttpServletRequest actualRequest = testRemoteIpFilter(filterDef, request);\n\n        // VERIFY\n        String actualXForwardedFor = actualRequest.getHeader(\"x-forwarded-for\");\n        assertNull(\"all proxies are internal, x-forwarded-for must be null\", actualXForwardedFor);\n\n        String actualXForwardedBy = actualRequest.getHeader(\"x-forwarded-by\");\n        assertNull(\"all proxies are internal, x-forwarded-by must be null\", actualXForwardedBy);\n\n        String actualRemoteAddr = actualRequest.getRemoteAddr();\n        assertEquals(\"remoteAddr\", \"140.211.11.130\", actualRemoteAddr);\n\n        String actualRemoteHost = actualRequest.getRemoteHost();\n        assertEquals(\"remoteHost\", \"140.211.11.130\", actualRemoteHost);\n    }","id":46589,"modified_method":"@Test\n    public void testInvokeAllProxiesAreInternal() throws Exception {\n\n        // PREPARE\n        FilterDef filterDef = new FilterDef();\n        filterDef.addInitParameter(\"internalProxies\", \"192\\\\.168\\\\.0\\\\.10|192\\\\.168\\\\.0\\\\.11\");\n        filterDef.addInitParameter(\"trustedProxies\", \"proxy1|proxy2|proxy3\");\n        filterDef.addInitParameter(\"remoteIpHeader\", \"x-forwarded-for\");\n        filterDef.addInitParameter(\"proxiesHeader\", \"x-forwarded-by\");\n\n        MockHttpServletRequest request = new MockHttpServletRequest();\n        request.setRemoteAddr(\"192.168.0.10\");\n        request.setRemoteHost(\"remote-host-original-value\");\n        request.addHeader(\"x-forwarded-for\", \"140.211.11.130, 192.168.0.10, 192.168.0.11\");\n\n        // TEST\n        HttpServletRequest actualRequest = testRemoteIpFilter(filterDef, request).getRequest();\n\n        // VERIFY\n        String actualXForwardedFor = actualRequest.getHeader(\"x-forwarded-for\");\n        assertNull(\"all proxies are internal, x-forwarded-for must be null\", actualXForwardedFor);\n\n        String actualXForwardedBy = actualRequest.getHeader(\"x-forwarded-by\");\n        assertNull(\"all proxies are internal, x-forwarded-by must be null\", actualXForwardedBy);\n\n        String actualRemoteAddr = actualRequest.getRemoteAddr();\n        assertEquals(\"remoteAddr\", \"140.211.11.130\", actualRemoteAddr);\n\n        String actualRemoteHost = actualRequest.getRemoteHost();\n        assertEquals(\"remoteHost\", \"140.211.11.130\", actualRemoteHost);\n    }","commit_id":"4921e131879a1aa4a77db51ae2ac3a226176f619","url":"https://github.com/apache/tomcat"},{"original_method":"@Test\n    public void testIncomingRequestIsSecuredButProtocolHeaderSaysItIsNotWithDefaultValues() throws Exception {\n        // PREPARE\n        FilterDef filterDef = new FilterDef();\n        filterDef.addInitParameter(\"protocolHeader\", \"x-forwarded-proto\");\n\n        MockHttpServletRequest request = new MockHttpServletRequest();\n        request.setRemoteAddr(\"192.168.0.10\");\n        request.setSecure(true);\n        request.setScheme(\"https\");\n        request.setHeader(\"x-forwarded-for\", \"140.211.11.130\");\n        request.setHeader(\"x-forwarded-proto\", \"http\");\n\n        // TEST\n        HttpServletRequest actualRequest = testRemoteIpFilter(filterDef, request);\n\n        // VERIFY\n        boolean actualSecure = actualRequest.isSecure();\n        assertFalse(\"request must be unsecured as header x-forwarded-proto said it is http\", actualSecure);\n\n        String actualScheme = actualRequest.getScheme();\n        assertEquals(\"scheme must be http as header x-forwarded-proto said it is http\", \"http\", actualScheme);\n\n        String actualRemoteAddr = actualRequest.getRemoteAddr();\n        assertEquals(\"remoteAddr\", \"140.211.11.130\", actualRemoteAddr);\n\n        String actualRemoteHost = actualRequest.getRemoteHost();\n        assertEquals(\"remoteHost\", \"140.211.11.130\", actualRemoteHost);\n\n    }","id":46590,"modified_method":"@Test\n    public void testIncomingRequestIsSecuredButProtocolHeaderSaysItIsNotWithDefaultValues() throws Exception {\n        // PREPARE\n        FilterDef filterDef = new FilterDef();\n        filterDef.addInitParameter(\"protocolHeader\", \"x-forwarded-proto\");\n\n        MockHttpServletRequest request = new MockHttpServletRequest();\n        request.setRemoteAddr(\"192.168.0.10\");\n        request.setSecure(true);\n        request.setScheme(\"https\");\n        request.setHeader(\"x-forwarded-for\", \"140.211.11.130\");\n        request.setHeader(\"x-forwarded-proto\", \"http\");\n\n        // TEST\n        HttpServletRequest actualRequest = testRemoteIpFilter(filterDef, request).getRequest();\n\n        // VERIFY\n        boolean actualSecure = actualRequest.isSecure();\n        assertFalse(\"request must be unsecured as header x-forwarded-proto said it is http\", actualSecure);\n\n        String actualScheme = actualRequest.getScheme();\n        assertEquals(\"scheme must be http as header x-forwarded-proto said it is http\", \"http\", actualScheme);\n\n        String actualRemoteAddr = actualRequest.getRemoteAddr();\n        assertEquals(\"remoteAddr\", \"140.211.11.130\", actualRemoteAddr);\n\n        String actualRemoteHost = actualRequest.getRemoteHost();\n        assertEquals(\"remoteHost\", \"140.211.11.130\", actualRemoteHost);\n\n    }","commit_id":"4921e131879a1aa4a77db51ae2ac3a226176f619","url":"https://github.com/apache/tomcat"},{"original_method":"@Test\n    public void testInvokeAllProxiesAreTrustedOrInternal() throws Exception {\n\n        // PREPARE\n        FilterDef filterDef = new FilterDef();\n        filterDef.addInitParameter(\"internalProxies\", \"192\\\\.168\\\\.0\\\\.10|192\\\\.168\\\\.0\\\\.11\");\n        filterDef.addInitParameter(\"trustedProxies\", \"proxy1|proxy2|proxy3\");\n        filterDef.addInitParameter(\"remoteIpHeader\", \"x-forwarded-for\");\n        filterDef.addInitParameter(\"proxiesHeader\", \"x-forwarded-by\");\n\n        MockHttpServletRequest request = new MockHttpServletRequest();\n\n        request.setRemoteAddr(\"192.168.0.10\");\n        request.setRemoteHost(\"remote-host-original-value\");\n        request.setHeader(\"x-forwarded-for\", \"140.211.11.130, proxy1, proxy2, 192.168.0.10, 192.168.0.11\");\n\n        // TEST\n        HttpServletRequest actualRequest = testRemoteIpFilter(filterDef, request);\n\n        // VERIFY\n        String actualXForwardedFor = actualRequest.getHeader(\"x-forwarded-for\");\n        assertNull(\"all proxies are trusted, x-forwarded-for must be null\", actualXForwardedFor);\n\n        String actualXForwardedBy = actualRequest.getHeader(\"x-forwarded-by\");\n        assertEquals(\"all proxies are trusted, they must appear in x-forwarded-by\", \"proxy1, proxy2\", actualXForwardedBy);\n\n        String actualRemoteAddr = actualRequest.getRemoteAddr();\n        assertEquals(\"remoteAddr\", \"140.211.11.130\", actualRemoteAddr);\n\n        String actualRemoteHost = actualRequest.getRemoteHost();\n        assertEquals(\"remoteHost\", \"140.211.11.130\", actualRemoteHost);\n    }","id":46591,"modified_method":"@Test\n    public void testInvokeAllProxiesAreTrustedOrInternal() throws Exception {\n\n        // PREPARE\n        FilterDef filterDef = new FilterDef();\n        filterDef.addInitParameter(\"internalProxies\", \"192\\\\.168\\\\.0\\\\.10|192\\\\.168\\\\.0\\\\.11\");\n        filterDef.addInitParameter(\"trustedProxies\", \"proxy1|proxy2|proxy3\");\n        filterDef.addInitParameter(\"remoteIpHeader\", \"x-forwarded-for\");\n        filterDef.addInitParameter(\"proxiesHeader\", \"x-forwarded-by\");\n\n        MockHttpServletRequest request = new MockHttpServletRequest();\n\n        request.setRemoteAddr(\"192.168.0.10\");\n        request.setRemoteHost(\"remote-host-original-value\");\n        request.setHeader(\"x-forwarded-for\", \"140.211.11.130, proxy1, proxy2, 192.168.0.10, 192.168.0.11\");\n\n        // TEST\n        HttpServletRequest actualRequest = testRemoteIpFilter(filterDef, request).getRequest();\n\n        // VERIFY\n        String actualXForwardedFor = actualRequest.getHeader(\"x-forwarded-for\");\n        assertNull(\"all proxies are trusted, x-forwarded-for must be null\", actualXForwardedFor);\n\n        String actualXForwardedBy = actualRequest.getHeader(\"x-forwarded-by\");\n        assertEquals(\"all proxies are trusted, they must appear in x-forwarded-by\", \"proxy1, proxy2\", actualXForwardedBy);\n\n        String actualRemoteAddr = actualRequest.getRemoteAddr();\n        assertEquals(\"remoteAddr\", \"140.211.11.130\", actualRemoteAddr);\n\n        String actualRemoteHost = actualRequest.getRemoteHost();\n        assertEquals(\"remoteHost\", \"140.211.11.130\", actualRemoteHost);\n    }","commit_id":"4921e131879a1aa4a77db51ae2ac3a226176f619","url":"https://github.com/apache/tomcat"},{"original_method":"public <T> T invokeSuper(Class<T> returnType, SNode node, String callerConceptFqName, String methodName, Class[] parametersTypes, Object... parameters) {\n    return ConceptRegistry.getInstance().getConceptDescriptorForInstanceNode(node).invokeSuper(returnType, node, callerConceptFqName, methodName, parametersTypes, parameters);\n  }","id":46592,"modified_method":"public <T> T invokeSuper(Class<T> returnType, SNode node, String callerConceptFqName, String methodName, Class[] parametersTypes, Object... parameters) {\n    return ConceptRegistry.getInstance().getConceptDescriptorForInstanceNode(node).behavior().invokeSuper(returnType, node, callerConceptFqName, methodName, parametersTypes, parameters);\n  }","commit_id":"263f8341500b092abd8bf9e28b7032a2d521ff57","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static <T> T staticInvoke(Class<T> returnType, SNode node, String methodName, Class[] parametersTypes, Object... parameters) {\n    return ConceptRegistry.getInstance().getConceptDescriptorForInstanceNode(node).invoke(returnType, node, methodName, parametersTypes, parameters);\n  }","id":46593,"modified_method":"public static <T> T staticInvoke(Class<T> returnType, SNode node, String methodName, Class[] parametersTypes, Object... parameters) {\n    return ConceptRegistry.getInstance().getConceptDescriptorForInstanceNode(node).behavior().invoke(returnType, node, methodName, parametersTypes, parameters);\n  }","commit_id":"263f8341500b092abd8bf9e28b7032a2d521ff57","url":"https://github.com/JetBrains/MPS"},{"original_method":"public <T> T invoke(Class<T> returnType, SNode node, String methodName, Class[] parametersTypes, Object... parameters) {\n    return ConceptRegistry.getInstance().getConceptDescriptorForInstanceNode(node).invoke(returnType, node, methodName, parametersTypes, parameters);\n  }","id":46594,"modified_method":"public <T> T invoke(Class<T> returnType, SNode node, String methodName, Class[] parametersTypes, Object... parameters) {\n    return ConceptRegistry.getInstance().getConceptDescriptorForInstanceNode(node).behavior().invoke(returnType, node, methodName, parametersTypes, parameters);\n  }","commit_id":"263f8341500b092abd8bf9e28b7032a2d521ff57","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void initNode(SNode node) {\n    ConceptRegistry.getInstance().getConceptDescriptorForInstanceNode(node).initNode(node);\n  }","id":46595,"modified_method":"public void initNode(SNode node) {\n    ConceptRegistry.getInstance().getConceptDescriptorForInstanceNode(node).behavior().initNode(node);\n  }","commit_id":"263f8341500b092abd8bf9e28b7032a2d521ff57","url":"https://github.com/JetBrains/MPS"},{"original_method":"public ConceptDescriptor getConceptDescriptor(String fqName) {\n    if (descriptors.containsKey(fqName)) {\n      return descriptors.get(fqName);\n    } else {\n      ConceptDescriptor descriptor = conceptDescriptorProvider.getConceptDescriptor(fqName);\n      descriptors.put(fqName, descriptor);\n      return descriptor;\n    }\n  }","id":46596,"modified_method":"public ConceptDescriptor getConceptDescriptor(String fqName) {\n    if (descriptors.containsKey(fqName)) {\n      return descriptors.get(fqName);\n    } else {\n      ConceptDescriptor descriptor = conceptDescriptorProvider.getDescriptor(fqName);\n      descriptors.put(fqName, descriptor);\n      return descriptor;\n    }\n  }","commit_id":"263f8341500b092abd8bf9e28b7032a2d521ff57","url":"https://github.com/JetBrains/MPS"},{"original_method":"public ConceptDescriptor getConceptDescriptorForInstanceNode(SNode instanceNode) {\n    return instanceNode != null ? getConceptDescriptor(instanceNode.getConceptFqName()) : NullConceptDescriptor.INSTANCE;\n  }","id":46597,"modified_method":"public ConceptDescriptor getConceptDescriptorForInstanceNode(SNode instanceNode) {\n    return instanceNode != null ? getConceptDescriptor(instanceNode.getConceptFqName()) : NullNodeConceptDescriptor.INSTANCE;\n  }","commit_id":"263f8341500b092abd8bf9e28b7032a2d521ff57","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static ImmutableSet<String> getAncestors(String conceptName, Set<String> parents) {\n    List<String> result = new ArrayList<String>();\n\n    result.add(conceptName);\n    ConceptRegistry conceptRegistry = ConceptRegistry.getInstance();\n    for (String parent : parents) {\n      result.addAll(conceptRegistry.getConceptDescriptor(parent).getAncestorsNames());\n    }\n\n    return ImmutableSet.copyOf(result);\n  }","id":46598,"modified_method":"public static ImmutableSet<String> getAncestors(String conceptName, Set<String> parents) {\n    List<String> result = new ArrayList<String>();\n\n    result.add(conceptName);\n    ConceptRegistry conceptRegistry = ConceptRegistry.getInstance();\n    for (String parent : parents) {\n      result.addAll(conceptRegistry.getConceptDescriptor(parent).structure().getAncestorsNames());\n    }\n\n    return ImmutableSet.copyOf(result);\n  }","commit_id":"263f8341500b092abd8bf9e28b7032a2d521ff57","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static boolean isAssignable(String fromConceptFqName, String toConceptFqName) {\n    return ConceptRegistry.getInstance().getConceptDescriptor(fromConceptFqName).isAssignableTo(toConceptFqName);\n  }","id":46599,"modified_method":"public static boolean isAssignable(String fromConceptFqName, String toConceptFqName) {\n    return ConceptRegistry.getInstance().getConceptDescriptor(fromConceptFqName).structure().isAssignableTo(toConceptFqName);\n  }","commit_id":"263f8341500b092abd8bf9e28b7032a2d521ff57","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static Set<String> getAncestorsNames(final String conceptFqName) {\n    return ConceptRegistry.getInstance().getConceptDescriptor(conceptFqName).getAncestorsNames();\n  }","id":46600,"modified_method":"public static Set<String> getAncestorsNames(final String conceptFqName) {\n    return ConceptRegistry.getInstance().getConceptDescriptor(conceptFqName).structure().getAncestorsNames();\n  }","commit_id":"263f8341500b092abd8bf9e28b7032a2d521ff57","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static Set<String> getParentsNames(String conceptFqName) {\n    return ConceptRegistry.getInstance().getConceptDescriptor(conceptFqName).getParentsNames();\n  }","id":46601,"modified_method":"public static Set<String> getParentsNames(String conceptFqName) {\n    return ConceptRegistry.getInstance().getConceptDescriptor(conceptFqName).structure().getParentsNames();\n  }","commit_id":"263f8341500b092abd8bf9e28b7032a2d521ff57","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public ConceptDescriptor getConceptDescriptor(String fqName) {\n    for (ConceptDescriptorProvider provider : providers) {\n      ConceptDescriptor descriptor = provider.getConceptDescriptor(fqName);\n\n      if (descriptor != null) {\n        return descriptor;\n      }\n    }\n\n    return null;\n  }","id":46602,"modified_method":"@Override\n  public T getDescriptor(String fqName) {\n    for (DescriptorProvider<T> provider : providers) {\n      T descriptor = provider.getDescriptor(fqName);\n\n      if (descriptor != null) {\n        return descriptor;\n      }\n    }\n\n    return null;\n  }","commit_id":"263f8341500b092abd8bf9e28b7032a2d521ff57","url":"https://github.com/JetBrains/MPS"},{"original_method":"public MixedDescriptorProvider(ConceptDescriptorProvider... providers) {\n    this.providers = ImmutableList.copyOf(providers);\n  }","id":46603,"modified_method":"public MixedDescriptorProvider(DescriptorProvider<T>... providers) {\n    this.providers = ImmutableList.copyOf(providers);\n  }","commit_id":"263f8341500b092abd8bf9e28b7032a2d521ff57","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n   * Frees a block from Tachyon managed space.\n   *\n   * @param userId The id of the client\n   * @param blockId The id of the block to be freed\n   * @return true if successful, false otherwise\n   * @throws IOException if an error occurs when removing the block\n   */\n  // TODO: This may be better as void, we should avoid throwing IOException\n  public boolean freeBlock(long userId, long blockId) throws IOException {\n    Optional<Long> optLock = mBlockStore.lockBlock(userId, blockId, BlockLock.BlockLockType.WRITE);\n    if (!optLock.isPresent()) {\n      return false;\n    }\n    Long lockId = optLock.get();\n    mBlockStore.removeBlock(userId, blockId, lockId);\n    mBlockStore.unlockBlock(lockId);\n    return true;\n  }","id":46604,"modified_method":"/**\n   * Frees a block from Tachyon managed space.\n   *\n   * @param userId The id of the client\n   * @param blockId The id of the block to be freed\n   * @return true if successful, false otherwise\n   * @throws IOException if an error occurs when removing the block\n   */\n  // TODO: This may be better as void, we should avoid throwing IOException\n  public boolean freeBlock(long userId, long blockId) throws IOException {\n    return mBlockStore.removeBlock(userId, blockId);\n  }","commit_id":"de2b587f4234077fc4ac82af83c14ba705843ca9","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Moves a block from its current location to a target location, currently only tier level\n   * moves are supported\n   * @param userId The id of the client\n   * @param blockId The id of the block to move\n   * @param tier The tier to move the block to\n   * @return true if successful, false otherwise\n   * @throws IOException if an error occurs during locking or move\n   */\n  // TODO: This may be better as void, we should avoid throwing IOException\n  public boolean moveBlock(long userId, long blockId, int tier) throws IOException {\n    Optional<Long> optLock = mBlockStore.lockBlock(userId, blockId, BlockLock.BlockLockType.WRITE);\n    // TODO: Define this behavior\n    if (!optLock.isPresent()) {\n      return false;\n    }\n    Long lockId = optLock.get();\n    BlockStoreLocation dst = BlockStoreLocation.anyDirInTier(tier);\n    boolean result = mBlockStore.moveBlock(userId, blockId, lockId, dst);\n    mBlockStore.unlockBlock(lockId);\n    return result;\n  }","id":46605,"modified_method":"/**\n   * Moves a block from its current location to a target location, currently only tier level\n   * moves are supported\n   * @param userId The id of the client\n   * @param blockId The id of the block to move\n   * @param tier The tier to move the block to\n   * @return true if successful, false otherwise\n   * @throws IOException if an error occurs during move\n   */\n  // TODO: This may be better as void, we should avoid throwing IOException\n  public boolean moveBlock(long userId, long blockId, int tier) throws IOException {\n    BlockStoreLocation dst = BlockStoreLocation.anyDirInTier(tier);\n    return mBlockStore.moveBlock(userId, blockId, dst);\n  }","commit_id":"de2b587f4234077fc4ac82af83c14ba705843ca9","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n    public void testSetPolicy() throws Exception {\n        // TODO\n    }","id":46606,"modified_method":"@Ignore(\"OAK-396\")\n    @Test\n    public void testSetPolicy() throws Exception {\n        ACL acl = getApplicablePolicy(testPath);\n        acl.addAccessControlEntry(testPrincipal, testPrivileges);\n        acl.addEntry(EveryonePrincipal.getInstance(), testPrivileges, false, getGlobRestriction(\"*/something\"));\n\n        acMgr.setPolicy(testPath, acl);\n        root.commit();\n\n        Root root2 = adminSession.getLatestRoot();\n        AccessControlPolicy[] policies = getAccessControlManager(root2).getPolicies(testPath);\n        assertNotNull(policies);\n        assertEquals(1, policies.length);\n\n        ACL acl2 = (ACL) policies[0];\n        assertArrayEquals(acl.getAccessControlEntries(), acl2.getAccessControlEntries());\n    }","commit_id":"2ece16e3b4cbdb2e155302947ab29bcdffde5512","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private AccessControlPolicy getApplicablePolicy(String path) throws RepositoryException {\n        AccessControlPolicyIterator itr = acMgr.getApplicablePolicies(path);\n        if (itr.hasNext()) {\n            return itr.nextAccessControlPolicy();\n        } else {\n            throw new RepositoryException(\"No applicable policy found.\");\n        }\n    }","id":46607,"modified_method":"private ACL getApplicablePolicy(String path) throws RepositoryException {\n        AccessControlPolicyIterator itr = acMgr.getApplicablePolicies(path);\n        if (itr.hasNext()) {\n            return (ACL) itr.nextAccessControlPolicy();\n        } else {\n            throw new RepositoryException(\"No applicable policy found.\");\n        }\n    }","commit_id":"2ece16e3b4cbdb2e155302947ab29bcdffde5512","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Test\n    public void testGetPolicyWithInvalidPrincipal() throws Exception {\n        ACL policy = (ACL) getApplicablePolicy(testPath);\n        policy.addEntry(testPrincipal, testPrivileges, true, Collections.singletonMap(REP_GLOB, valueFactory.createValue(\"*\")));\n        acMgr.setPolicy(testPath, policy);\n\n        NodeUtil aclNode = new NodeUtil(root.getTree(testPath + '/' + REP_POLICY));\n        NodeUtil aceNode = aclNode.addChild(\"testACE\", NT_REP_DENY_ACE);\n        aceNode.setString(REP_PRINCIPAL_NAME, \"invalidPrincipal\");\n        aceNode.setNames(REP_PRIVILEGES, PrivilegeConstants.JCR_READ);\n\n        // reading policies with unknown principal name should not fail.\n        AccessControlPolicy[] policies = acMgr.getPolicies(testPath);\n        assertNotNull(policies);\n        assertEquals(1, policies.length);\n\n        ACL acl = (ACL) policies[0];\n        List<String> principalNames = new ArrayList<String>();\n        for (AccessControlEntry ace :acl.getEntries()) {\n            principalNames.add(ace.getPrincipal().getName());\n        }\n        assertTrue(principalNames.remove(\"invalidPrincipal\"));\n        assertTrue(principalNames.remove(testPrincipal.getName()));\n        assertTrue(principalNames.isEmpty());\n    }","id":46608,"modified_method":"@Test\n    public void testGetPolicyWithInvalidPrincipal() throws Exception {\n        ACL policy = getApplicablePolicy(testPath);\n        policy.addEntry(testPrincipal, testPrivileges, true, getGlobRestriction(\"*\"));\n        acMgr.setPolicy(testPath, policy);\n\n        NodeUtil aclNode = new NodeUtil(root.getTree(testPath + '/' + REP_POLICY));\n        NodeUtil aceNode = aclNode.addChild(\"testACE\", NT_REP_DENY_ACE);\n        aceNode.setString(REP_PRINCIPAL_NAME, \"invalidPrincipal\");\n        aceNode.setNames(REP_PRIVILEGES, PrivilegeConstants.JCR_READ);\n\n        // reading policies with unknown principal name should not fail.\n        AccessControlPolicy[] policies = acMgr.getPolicies(testPath);\n        assertNotNull(policies);\n        assertEquals(1, policies.length);\n\n        ACL acl = (ACL) policies[0];\n        List<String> principalNames = new ArrayList<String>();\n        for (AccessControlEntry ace :acl.getEntries()) {\n            principalNames.add(ace.getPrincipal().getName());\n        }\n        assertTrue(principalNames.remove(\"invalidPrincipal\"));\n        assertTrue(principalNames.remove(testPrincipal.getName()));\n        assertTrue(principalNames.isEmpty());\n    }","commit_id":"2ece16e3b4cbdb2e155302947ab29bcdffde5512","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Test\n    public void testAccessControlContentPaths() throws Exception {\n        ACL policy = (ACL) getApplicablePolicy(testPath);\n        policy.addEntry(testPrincipal, testPrivileges, true, Collections.singletonMap(REP_GLOB, valueFactory.createValue(\"*\")));\n        acMgr.setPolicy(testPath, policy);\n\n        String aclPath = testPath + '/' + REP_POLICY;\n        Tree acl = root.getTree(aclPath);\n        assertNotNull(acl);\n        Iterator<Tree> aces = acl.getChildren().iterator();\n        assertTrue(aces.hasNext());\n        Tree ace = aces.next();\n        assertNotNull(ace);\n\n        List<String> accessControlledPaths = new ArrayList<String>();\n        accessControlledPaths.add(aclPath);\n        accessControlledPaths.add(ace.getPath());\n\n        Tree rest = ace.getChild(REP_RESTRICTIONS);\n        if (rest != null) {\n            accessControlledPaths.add(rest.getPath());\n        }\n\n        for (String path : accessControlledPaths) {\n            try {\n                acMgr.getApplicablePolicies(path);\n                fail(\"Getting applicable policies for access control content should fail.\");\n            } catch (AccessControlException e) {\n                // success\n            }\n\n            try {\n                acMgr.getPolicies(path);\n                fail(\"Getting policies for access control content should fail.\");\n            } catch (AccessControlException e) {\n                // success\n            }\n\n            try {\n                acMgr.getEffectivePolicies(path);\n                fail(\"Getting effective policies for access control content should fail.\");\n            } catch (AccessControlException e) {\n                // success\n            }\n        }\n    }","id":46609,"modified_method":"@Test\n    public void testAccessControlContentPaths() throws Exception {\n        ACL policy = getApplicablePolicy(testPath);\n        policy.addEntry(testPrincipal, testPrivileges, true, getGlobRestriction(\"*\"));\n        acMgr.setPolicy(testPath, policy);\n\n        String aclPath = testPath + '/' + REP_POLICY;\n        Tree acl = root.getTree(aclPath);\n        assertNotNull(acl);\n        Iterator<Tree> aces = acl.getChildren().iterator();\n        assertTrue(aces.hasNext());\n        Tree ace = aces.next();\n        assertNotNull(ace);\n\n        List<String> accessControlledPaths = new ArrayList<String>();\n        accessControlledPaths.add(aclPath);\n        accessControlledPaths.add(ace.getPath());\n\n        Tree rest = ace.getChild(REP_RESTRICTIONS);\n        if (rest != null) {\n            accessControlledPaths.add(rest.getPath());\n        }\n\n        for (String path : accessControlledPaths) {\n            try {\n                acMgr.getApplicablePolicies(path);\n                fail(\"Getting applicable policies for access control content should fail.\");\n            } catch (AccessControlException e) {\n                // success\n            }\n\n            try {\n                acMgr.getPolicies(path);\n                fail(\"Getting policies for access control content should fail.\");\n            } catch (AccessControlException e) {\n                // success\n            }\n\n            try {\n                acMgr.getEffectivePolicies(path);\n                fail(\"Getting effective policies for access control content should fail.\");\n            } catch (AccessControlException e) {\n                // success\n            }\n        }\n    }","commit_id":"2ece16e3b4cbdb2e155302947ab29bcdffde5512","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private void setupPolicy(String path) throws RepositoryException {\n        ACL policy = (ACL) getApplicablePolicy(path);\n        if (path == null) {\n            policy.addAccessControlEntry(testPrincipal, testPrivileges);\n        } else {\n            policy.addEntry(testPrincipal, testPrivileges, true, Collections.singletonMap(REP_GLOB, valueFactory.createValue(\"*\")));\n        }\n        acMgr.setPolicy(path, policy);\n    }","id":46610,"modified_method":"private void setupPolicy(String path) throws RepositoryException {\n        ACL policy = getApplicablePolicy(path);\n        if (path == null) {\n            policy.addAccessControlEntry(testPrincipal, testPrivileges);\n        } else {\n            policy.addEntry(testPrincipal, testPrivileges, true, getGlobRestriction(\"*\"));\n        }\n        acMgr.setPolicy(path, policy);\n    }","commit_id":"2ece16e3b4cbdb2e155302947ab29bcdffde5512","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Test\n    public void testInvalidPrivilege() {\n        NodeUtil acl = createAcl();\n\n        String privName = \"invalidPrivilegeName\";\n        createACE(acl, \"invalid\", NT_REP_GRANT_ACE, testPrincipal.getName(), privName);\n        try {\n            root.commit();\n            fail(\"Creating an ACE with invalid privilege should fail.\");\n        } catch (CommitFailedException e) {\n            // success\n            assertTrue(e.getCause() instanceof AccessControlException);\n        }\n    }","id":46611,"modified_method":"@Test\n    public void testInvalidPrivilege() {\n        NodeUtil acl = createAcl();\n\n        String privName = \"invalidPrivilegeName\";\n        createACE(acl, \"invalid\", NT_REP_GRANT_ACE, testPrincipal2.getName(), privName);\n        try {\n            root.commit();\n            fail(\"Creating an ACE with invalid privilege should fail.\");\n        } catch (CommitFailedException e) {\n            // success\n            assertTrue(e.getCause() instanceof AccessControlException);\n        }\n    }","commit_id":"2ece16e3b4cbdb2e155302947ab29bcdffde5512","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Before\n    public void before() throws Exception {\n        super.before();\n\n        NodeUtil rootNode = new NodeUtil(root.getTree(\"/\"), getNamePathMapper());\n        rootNode.addChild(testName, JcrConstants.NT_UNSTRUCTURED);\n\n        root.commit();\n\n        // TODO\n        testPrincipal = new PrincipalImpl(\"testPrincipal\");\n    }","id":46612,"modified_method":"@Before\n    public void before() throws Exception {\n        super.before();\n\n        NodeUtil rootNode = new NodeUtil(root.getTree(\"/\"), getNamePathMapper());\n        rootNode.addChild(testName, JcrConstants.NT_UNSTRUCTURED);\n\n        root.commit();\n\n        // TODO\n        testPrincipal = new PrincipalImpl(\"testPrincipal\");\n        testPrincipal2 = new PrincipalImpl(\"anotherPrincipal\");\n    }","commit_id":"2ece16e3b4cbdb2e155302947ab29bcdffde5512","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Test\n    public void testAbstractPrivilege() throws Exception {\n        PrivilegeManager pMgr = getSecurityProvider().getPrivilegeConfiguration().getPrivilegeManager(root, getNamePathMapper());\n        pMgr.registerPrivilege(\"abstractPrivilege\", true, new String[0]);\n\n        NodeUtil acl = createAcl();\n        createACE(acl, \"invalid\", NT_REP_GRANT_ACE, testPrincipal.getName(), \"abstractPrivilege\");\n        try {\n            root.commit();\n            fail(\"Creating an ACE with an abstract privilege should fail.\");\n        } catch (CommitFailedException e) {\n            // success\n            assertTrue(e.getCause() instanceof AccessControlException);\n        }\n    }","id":46613,"modified_method":"@Test\n    public void testAbstractPrivilege() throws Exception {\n        PrivilegeManager pMgr = getSecurityProvider().getPrivilegeConfiguration().getPrivilegeManager(root, getNamePathMapper());\n        pMgr.registerPrivilege(\"abstractPrivilege\", true, new String[0]);\n\n        NodeUtil acl = createAcl();\n        createACE(acl, \"invalid\", NT_REP_GRANT_ACE, testPrincipal2.getName(), \"abstractPrivilege\");\n        try {\n            root.commit();\n            fail(\"Creating an ACE with an abstract privilege should fail.\");\n        } catch (CommitFailedException e) {\n            // success\n            assertTrue(e.getCause() instanceof AccessControlException);\n        }\n    }","commit_id":"2ece16e3b4cbdb2e155302947ab29bcdffde5512","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public void writeRestrictions(String oakPath, Tree aceTree, Set<Restriction> restrictions) throws AccessControlException {\n        // validation of the restrictions is delegated to the commit hook\n        // see #validateRestrictions below\n        NodeUtil aceNode = new NodeUtil(aceTree);\n        NodeUtil rNode = aceNode.getOrAddChild(REP_RESTRICTIONS, NT_REP_RESTRICTIONS);\n        for (Restriction restriction : restrictions) {\n            rNode.getTree().setProperty(restriction.getProperty());\n        }\n    }","id":46614,"modified_method":"@Override\n    public void writeRestrictions(String oakPath, Tree aceTree, Set<Restriction> restrictions) throws AccessControlException {\n        // validation of the restrictions is delegated to the commit hook\n        // see #validateRestrictions below\n        if (!restrictions.isEmpty()) {\n            NodeUtil aceNode = new NodeUtil(aceTree);\n            NodeUtil rNode = aceNode.getOrAddChild(REP_RESTRICTIONS, NT_REP_RESTRICTIONS);\n            for (Restriction restriction : restrictions) {\n                rNode.getTree().setProperty(restriction.getProperty());\n            }\n        }\n    }","commit_id":"2ece16e3b4cbdb2e155302947ab29bcdffde5512","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n  public String getEditorTabTitle(Project project, VirtualFile file) {\n    if (!UISettings.getInstance().SHOW_DIRECTORY_FOR_NON_UNIQUE_FILENAMES || DumbService.isDumb(project)) {\n      return null;\n    }\n    return UniqueVFilePathBuilder.getInstance().getUniqueVirtualFilePath(project, file);\n  }","id":46615,"modified_method":"@Override\n  public String getEditorTabTitle(Project project, VirtualFile file) {\n    if (!UISettings.getInstance().SHOW_DIRECTORY_FOR_NON_UNIQUE_FILENAMES || DumbService.isDumb(project)) {\n      return null;\n    }\n    final String uniqueName = UniqueVFilePathBuilder.getInstance().getUniqueVirtualFilePath(project, file);\n    return uniqueName.equals(file.getName()) ? null : uniqueName;\n  }","commit_id":"763eba0f106f84a7501f1ffb1581d5410e362ec4","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  @Override\n  public String getUniqueVirtualFilePath(Project project, VirtualFile file) {\n    final Collection<VirtualFile> filesWithSameName = FilenameIndex.getVirtualFilesByName(project, file.getName(),\n                                                                                          ProjectScope.getProjectScope(project));\n    if (filesWithSameName.size() > 1) {\n      String path = project.getBasePath();\n      path = path == null ? \"\" : FileUtil.toSystemIndependentName(path);\n      UniqueNameBuilder<VirtualFile> builder = new UniqueNameBuilder<VirtualFile>(path, File.separator, 25);\n      for (VirtualFile virtualFile: filesWithSameName) {\n        builder.addPath(virtualFile, virtualFile.getPath());\n      }\n      return builder.getShortPath(file);\n    }\n    return file.getName();\n  }","id":46616,"modified_method":"@NotNull\n  @Override\n  public String getUniqueVirtualFilePath(Project project, VirtualFile file) {\n    final Collection<VirtualFile> filesWithSameName = FilenameIndex.getVirtualFilesByName(project, file.getName(),\n                                                                                          ProjectScope.getProjectScope(project));\n    if (filesWithSameName.size() > 1 && filesWithSameName.contains(file)) {\n      String path = project.getBasePath();\n      path = path == null ? \"\" : FileUtil.toSystemIndependentName(path);\n      UniqueNameBuilder<VirtualFile> builder = new UniqueNameBuilder<VirtualFile>(path, File.separator, 25);\n      for (VirtualFile virtualFile: filesWithSameName) {\n        builder.addPath(virtualFile, virtualFile.getPath());\n      }\n      return builder.getShortPath(file);\n    }\n    return file.getName();\n  }","commit_id":"763eba0f106f84a7501f1ffb1581d5410e362ec4","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void customizeCellRenderer(JList list, Object value, int index, boolean selected, boolean hasFocus) {\n      if (value instanceof FileInfo) {\n        VirtualFile virtualFile = ((FileInfo)value).getFirst();\n        String name = UniqueVFilePathBuilder.getInstance().getUniqueVirtualFilePath(myProject, virtualFile);\n        setIcon(IconUtil.getIcon(virtualFile, Iconable.ICON_FLAG_READ_STATUS, myProject));\n\n        FileStatus fileStatus = FileStatusManager.getInstance(myProject).getStatus(virtualFile);\n        TextAttributes attributes = new TextAttributes(fileStatus.getColor(), null , null, EffectType.LINE_UNDERSCORE,\n                                                       Font.PLAIN);\n        append(name, SimpleTextAttributes.fromTextAttributes(attributes));\n\n        if (!selected &&  myPinned && FileEditorManager.getInstance(myProject).isFileOpen(virtualFile)) {\n          setBackground(LightColors.SLIGHTLY_GREEN);\n        }\n      }\n    }","id":46617,"modified_method":"protected void customizeCellRenderer(JList list, Object value, int index, boolean selected, boolean hasFocus) {\n      if (value instanceof FileInfo) {\n        VirtualFile virtualFile = ((FileInfo)value).getFirst();\n        String name = UISettings.getInstance().SHOW_DIRECTORY_FOR_NON_UNIQUE_FILENAMES\n                      ? UniqueVFilePathBuilder.getInstance().getUniqueVirtualFilePath(myProject, virtualFile)\n                      : virtualFile.getName();\n        setIcon(IconUtil.getIcon(virtualFile, Iconable.ICON_FLAG_READ_STATUS, myProject));\n\n        FileStatus fileStatus = FileStatusManager.getInstance(myProject).getStatus(virtualFile);\n        TextAttributes attributes = new TextAttributes(fileStatus.getColor(), null , null, EffectType.LINE_UNDERSCORE,\n                                                       Font.PLAIN);\n        append(name, SimpleTextAttributes.fromTextAttributes(attributes));\n\n        if (!selected &&  myPinned && FileEditorManager.getInstance(myProject).isFileOpen(virtualFile)) {\n          setBackground(LightColors.SLIGHTLY_GREEN);\n        }\n      }\n    }","commit_id":"c81e91d66c665ae8ade20b8a710395a02f55d9dc","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public String getEditorTabTitle(Project project, VirtualFile file) {\n    if (!UISettings.getInstance().SHOW_DIRECTORY_FOR_NON_UNIQUE_FILENAMES || DumbService.isDumb(project)) {\n      return null;\n    }\n    // Even though this is a 'tab title provider' it is used also when tabs are not shown, namely for building IDE frame title.\n    final String uniqueName = UniqueVFilePathBuilder.getInstance().getUniqueVirtualFilePath(project, file);\n    return uniqueName.equals(file.getName()) ? null : uniqueName;\n  }","id":46618,"modified_method":"@Override\n  public String getEditorTabTitle(Project project, VirtualFile file) {\n    if (!UISettings.getInstance().SHOW_DIRECTORY_FOR_NON_UNIQUE_FILENAMES || DumbService.isDumb(project)) {\n      return null;\n    }\n    // Even though this is a 'tab title provider' it is used also when tabs are not shown, namely for building IDE frame title.\n    final String uniqueName = UISettings.getInstance().EDITOR_TAB_PLACEMENT == UISettings.TABS_NONE ? \n                              UniqueVFilePathBuilder.getInstance().getUniqueVirtualFilePath(project, file) : \n                              UniqueVFilePathBuilder.getInstance().getUniqueVirtualFilePathWithinOpenedFileEditors(project, file);\n    return uniqueName.equals(file.getName()) ? null : uniqueName;\n  }","commit_id":"5842f99c76719eabf7a6d8750c65d053f21f6d04","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static String getUniqueVirtualFilePath(Project project, VirtualFile file, boolean skipNonOpenedFiles) {\n    String fileName = file.getName();\n    Collection<VirtualFile> filesWithSameName = skipNonOpenedFiles ? Collections.<VirtualFile>emptySet() :\n                                                FilenameIndex.getVirtualFilesByName(project, fileName, ProjectScope.getProjectScope(project));\n    THashSet<VirtualFile> setOfFilesWithTheSameName = new THashSet<VirtualFile>(filesWithSameName);\n    // add open files out of project scope\n    for(VirtualFile openFile: FileEditorManager.getInstance(project).getOpenFiles()) {\n      if (openFile.getName().equals(fileName)) {\n        setOfFilesWithTheSameName.add(openFile);\n      }\n    }\n\n    filesWithSameName = setOfFilesWithTheSameName;\n\n    if (filesWithSameName.size() > 1 && filesWithSameName.contains(file)) {\n      if (file instanceof VirtualFilePathWrapper) {\n        return ((VirtualFilePathWrapper)file).getPresentablePath();\n      }\n      String path = project.getBasePath();\n      path = path == null ? \"\" : FileUtil.toSystemIndependentName(path);\n      UniqueNameBuilder<VirtualFile> builder = new UniqueNameBuilder<VirtualFile>(path, File.separator, 25);\n      for (VirtualFile virtualFile: filesWithSameName) {\n        builder.addPath(virtualFile, virtualFile.getPath());\n      }\n      return getEditorTabText(file, builder, UISettings.getInstance().HIDE_KNOWN_EXTENSION_IN_TABS);\n    }\n    return file.getPresentableName();\n  }","id":46619,"modified_method":"private static String getUniqueVirtualFilePath(Project project, VirtualFile file, boolean skipNonOpenedFiles) {\n    String fileName = file.getName();\n    Collection<VirtualFile> filesWithSameName = skipNonOpenedFiles ? Collections.<VirtualFile>emptySet() :\n                                                FilenameIndex.getVirtualFilesByName(project, fileName, ProjectScope.getProjectScope(project));\n    THashSet<VirtualFile> setOfFilesWithTheSameName = new THashSet<VirtualFile>(filesWithSameName);\n    // add open files out of project scope\n    for(VirtualFile openFile: FileEditorManager.getInstance(project).getOpenFiles()) {\n      if (openFile.getName().equals(fileName)) {\n        setOfFilesWithTheSameName.add(openFile);\n      }\n    }\n    for (VirtualFile recentlyEditedFile : IdeDocumentHistory.getInstance(project).getChangedFiles()) {\n      if (recentlyEditedFile.getName().equals(fileName)) {\n        setOfFilesWithTheSameName.add(recentlyEditedFile);\n      }\n    }\n\n    filesWithSameName = setOfFilesWithTheSameName;\n\n    if (filesWithSameName.size() > 1 && filesWithSameName.contains(file)) {\n      if (file instanceof VirtualFilePathWrapper) {\n        return ((VirtualFilePathWrapper)file).getPresentablePath();\n      }\n      String path = project.getBasePath();\n      path = path == null ? \"\" : FileUtil.toSystemIndependentName(path);\n      UniqueNameBuilder<VirtualFile> builder = new UniqueNameBuilder<VirtualFile>(path, File.separator, 25);\n      for (VirtualFile virtualFile: filesWithSameName) {\n        builder.addPath(virtualFile, virtualFile.getPath());\n      }\n      return getEditorTabText(file, builder, UISettings.getInstance().HIDE_KNOWN_EXTENSION_IN_TABS);\n    }\n    return file.getPresentableName();\n  }","commit_id":"5842f99c76719eabf7a6d8750c65d053f21f6d04","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n\t * Start the server.\n\t * \n\t * @param config the server \n\t * @throws ServerStartException\n\t */\n\tvoid start(final Standalone config) throws ServerStartException {\n\t\tif(config == null)  {\n\t\t\tthrow new IllegalArgumentException(\"null standalone config\");\n\t\t}\n\t\tthis.config = config;\n\t\tlog.infof(\"Starting server '%s'\", config.getServerName());\n        serviceContainer = ServiceContainer.Factory.create();\n        final BatchBuilder batchBuilder = serviceContainer.batchBuilder();\n        final ServerStartupListener listener = new ServerStartupListener(createListenerCallback());\n        batchBuilder.addListener(listener);\n\n        final ServerStartBatchBuilder serverStartBatchBuilder = new ServerStartBatchBuilder(batchBuilder, listener);\n\n        try {\n            final ServiceActivatorContext serviceActivatorContext = new ServiceActivatorContextImpl(serverStartBatchBuilder);\n            // Activate\n            config.activate(serviceActivatorContext);\n            batchBuilder.install();\n            listener.finishBatch();\n        } catch (Throwable t) {\n            throw new ServerStartException(\"Failed to start server\", t);\n        }\n\t}","id":46620,"modified_method":"/**\n\t * Start the server.\n\t *\n\t * @param config the server\n\t * @throws ServerStartException\n\t */\n\tvoid start(final Standalone config) throws ServerStartException {\n\t\tif(config == null)  {\n\t\t\tthrow new IllegalArgumentException(\"null standalone config\");\n\t\t}\n\t\tthis.config = config;\n\t\tlog.infof(\"Starting server '%s'\", config.getServerName());\n        serviceContainer = ServiceContainer.Factory.create();\n\n        final ServerStartupListener listener = new ServerStartupListener(createListenerCallback());\n\n        try {\n            // Activate subsystems\n            final ServerStartBatchBuilder subsystemBatchBuilder = new ServerStartBatchBuilder(serviceContainer.batchBuilder(), listener);\n            subsystemBatchBuilder.addListener(listener);\n            final ServiceActivatorContext subsystemActivatorContext = new ServiceActivatorContextImpl(subsystemBatchBuilder);\n            config.activateSubsystems(subsystemActivatorContext);\n            listener.startBatch(new Runnable() {\n                @Override\n                public void run() {\n                    // Activate deployments once the first batch is complete.\n                    final ServerStartBatchBuilder deploymentBatchBuilder = new ServerStartBatchBuilder(serviceContainer.batchBuilder(), listener);\n                    deploymentBatchBuilder.addListener(listener);\n                    final ServiceActivatorContext deploymentActivatorContext = new ServiceActivatorContextImpl(deploymentBatchBuilder);\n                    listener.startBatch(null);\n                    config.activateDeployments(deploymentActivatorContext);\n                    listener.finish(); // We have finished adding everything for the server start\n                    try {\n                        deploymentBatchBuilder.install();\n                        listener.finishBatch();\n                    } catch (ServiceRegistryException e) {\n                        throw new RuntimeException(e); // TODO: better exception handling.\n                    }\n                }\n            });\n            subsystemBatchBuilder.install();\n            listener.finishBatch();\n        } catch (Throwable t) {\n            throw new ServerStartException(\"Failed to start server\", t);\n        }\n\t}","commit_id":"29ede470e9bb99c590841400166ba5f8fe17a109","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Activate the services required for service deployments.\n     * \n     * @param context The service activator context\n     */\n    public void activate(final ServiceActivatorContext context) {\n        final DeploymentChain deploymentChain = new DeploymentChainImpl(\"deployment.chain.jar\");\n        deploymentChain.addProcessor(new AnnotationIndexProcessor(), AnnotationIndexProcessor.PRIORITY);\n        deploymentChain.addProcessor(new ManagedBeanDependencyProcessor(), ManagedBeanDependencyProcessor.PRIORITY);\n        deploymentChain.addProcessor(new ModuleDependencyProcessor(), ModuleDependencyProcessor.PRIORITY);\n        deploymentChain.addProcessor(new ModuleConfigProcessor(), ModuleConfigProcessor.PRIORITY);\n        deploymentChain.addProcessor(new DeploymentModuleLoaderProcessor(), DeploymentModuleLoaderProcessor.PRIORITY);\n        deploymentChain.addProcessor(new ModuleDeploymentProcessor(), ModuleDeploymentProcessor.PRIORITY);\n        deploymentChain.addProcessor(new ManagedBeanAnnotationProcessor(), ManagedBeanAnnotationProcessor.PRIORITY);\n        deploymentChain.addProcessor(new ServiceDeploymentParsingProcessor(), ServiceDeploymentParsingProcessor.PRIORITY);\n        deploymentChain.addProcessor(new ModuleContextProcessor(), ModuleContextProcessor.PRIORITY);\n        deploymentChain.addProcessor(new ParsedServiceDeploymentProcessor(), ParsedServiceDeploymentProcessor.PRIORITY);\n        deploymentChain.addProcessor(new ManagedBeanDeploymentProcessor(), ManagedBeanDeploymentProcessor.PRIORITY);\n        DeploymentChainProvider.INSTANCE.addDeploymentChain(deploymentChain, new JarDeploymentChainSelector(), SERVICE_DEPLOYMENT_CHAIN_PRIORITY);\n    }","id":46621,"modified_method":"/**\n     * Activate the services required for service deployments.\n     * \n     * @param context The service activator context\n     */\n    public void activate(final ServiceActivatorContext context) {\n        final BatchBuilder batchBuilder = context.getBatchBuilder();\n        batchBuilder.addServiceValueIfNotExist(DeploymentChainProviderService.SERVICE_NAME, new DeploymentChainProviderService());\n\n        final Value<DeploymentChain> deploymentChainValue = Values.immediateValue((DeploymentChain)new DeploymentChainImpl(JAR_DEPLOYMENT_CHAIN_SERVICE_NAME.toString()))   ;\n        final DeploymentChainService deploymentChainService = new DeploymentChainService(deploymentChainValue);\n        batchBuilder.addService(JAR_DEPLOYMENT_CHAIN_SERVICE_NAME, deploymentChainService)\n            .addDependency(DeploymentChainProviderService.SERVICE_NAME, DeploymentChainProvider.class, new DeploymentChainProviderInjector<DeploymentChain>(deploymentChainValue, new JarDeploymentChainSelector(), JAR_DEPLOYMENT_CHAIN_PRIORITY));\n\n        addDeploymentProcessor(batchBuilder, new AnnotationIndexProcessor(), AnnotationIndexProcessor.PRIORITY);\n        addDeploymentProcessor(batchBuilder, new ManagedBeanDependencyProcessor(), ManagedBeanDependencyProcessor.PRIORITY);\n        addDeploymentProcessor(batchBuilder, new ModuleDependencyProcessor(), ModuleDependencyProcessor.PRIORITY);\n        addDeploymentProcessor(batchBuilder, new ModuleConfigProcessor(), ModuleConfigProcessor.PRIORITY);\n        addDeploymentProcessor(batchBuilder, new DeploymentModuleLoaderProcessor(), DeploymentModuleLoaderProcessor.PRIORITY);\n        addDeploymentProcessor(batchBuilder, new ModuleDeploymentProcessor(), ModuleDeploymentProcessor.PRIORITY);\n        addDeploymentProcessor(batchBuilder, new ManagedBeanAnnotationProcessor(), ManagedBeanAnnotationProcessor.PRIORITY);\n        addDeploymentProcessor(batchBuilder, new ServiceDeploymentParsingProcessor(), ServiceDeploymentParsingProcessor.PRIORITY);\n        addDeploymentProcessor(batchBuilder, new ModuleContextProcessor(), ModuleContextProcessor.PRIORITY);\n        addDeploymentProcessor(batchBuilder, new ParsedServiceDeploymentProcessor(), ParsedServiceDeploymentProcessor.PRIORITY);\n        addDeploymentProcessor(batchBuilder, new ManagedBeanDeploymentProcessor(), ManagedBeanDeploymentProcessor.PRIORITY);\n    }","commit_id":"29ede470e9bb99c590841400166ba5f8fe17a109","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void activate(final ServiceActivatorContext context) {\n        final String deploymentName = key.getName().replace('.', '_');\n        log.info(\"Activating server group deployment: \" + deploymentName);\n\n        final VirtualFile deploymentRoot = VFS.getChild(getFullyQualifiedDeploymentPath(key.getName()));\n        if (!deploymentRoot.exists())\n            throw new RuntimeException(\"Deployment root does not exist.\" + deploymentRoot);\n\n        Closeable handle = null;\n        try {\n            // Mount virtual file\n            try {\n                if(deploymentRoot.isFile())\n                    handle = VFS.mountZip(deploymentRoot, deploymentRoot, TempFileProviderService.provider());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Failed to mount deployment archive\", e);\n            }\n\n            final BatchBuilder batchBuilder = context.getBatchBuilder();\n            // Create deployment service\n            final ServiceName deploymentServiceName = DeploymentService.SERVICE_NAME.append(deploymentName);\n            batchBuilder.addService(deploymentServiceName, new DeploymentService());\n\n            // Create a sub-batch for this deployment\n            final BatchBuilder deploymentSubBatch = batchBuilder.subBatchBuilder();\n\n            // Setup a batch level dependency on deployment service\n            deploymentSubBatch.addDependency(deploymentServiceName);\n\n            // Add a deployment failure listener to the batch\n            deploymentSubBatch.addListener(new DeploymentFailureListener(deploymentServiceName));\n\n            // Create the deployment unit context\n            final DeploymentUnitContextImpl deploymentUnitContext = new DeploymentUnitContextImpl(deploymentName, deploymentSubBatch);\n            attachVirtualFile(deploymentUnitContext, deploymentRoot);\n            deploymentUnitContext.putAttachment(MountHandle.ATTACHMENT_KEY, new MountHandle(handle));\n\n            // Execute the deployment chain\n            final DeploymentChainProvider deploymentChainProvider = DeploymentChainProvider.INSTANCE;\n            final DeploymentChain deploymentChain = deploymentChainProvider.determineDeploymentChain(deploymentRoot);\n            if(deploymentChain == null)\n                throw new RuntimeException(\"Failed determine the deployment chain for deployment root: \" + deploymentRoot);\n            try {\n                deploymentChain.processDeployment(deploymentUnitContext);\n            } catch (DeploymentUnitProcessingException e) {\n                throw new RuntimeException(\"Failed to process deployment chain.\", e);\n            }\n        } catch(Throwable t) {\n            VFSUtils.safeClose(handle);\n            throw new RuntimeException(\"Failed to activate deployment unit \" + key.getName(), t);\n        }\n    }","id":46622,"modified_method":"@Override\n    public void activate(final ServiceActivatorContext context) {\n        final String deploymentName = key.getName().replace('.', '_');\n        log.info(\"Activating deployment: \" + key.getName());\n\n        final VirtualFile deploymentRoot = VFS.getChild(getFullyQualifiedDeploymentPath(key.getName()));\n        if (!deploymentRoot.exists())\n            throw new RuntimeException(\"Deployment root does not exist.\" + deploymentRoot);\n\n        Closeable handle = null;\n        try {\n            // Mount virtual file\n            try {\n                if(deploymentRoot.isFile())\n                    handle = VFS.mountZip(deploymentRoot, deploymentRoot, TempFileProviderService.provider());\n            } catch (IOException e) {\n                throw new RuntimeException(\"Failed to mount deployment archive\", e);\n            }\n\n            final BatchBuilder batchBuilder = context.getBatchBuilder();\n            // Create deployment service\n            final ServiceName deploymentServiceName = DeploymentService.SERVICE_NAME.append(deploymentName);\n            batchBuilder.addService(deploymentServiceName, new DeploymentService());\n\n            // Create a sub-batch for this deployment\n            final BatchBuilder deploymentSubBatch = batchBuilder.subBatchBuilder();\n\n            // Setup a batch level dependency on deployment service\n            deploymentSubBatch.addDependency(deploymentServiceName);\n\n            // Add a deployment failure listener to the batch\n            deploymentSubBatch.addListener(new DeploymentFailureListener(deploymentServiceName));\n\n            // Create the deployment unit context\n            final DeploymentUnitContextImpl deploymentUnitContext = new DeploymentUnitContextImpl(deploymentName, deploymentSubBatch);\n            attachVirtualFile(deploymentUnitContext, deploymentRoot);\n            deploymentUnitContext.putAttachment(MountHandle.ATTACHMENT_KEY, new MountHandle(handle));\n\n            // Execute the deployment chain\n            final DeploymentChainProvider deploymentChainProvider = DeploymentChainProvider.INSTANCE;\n            final DeploymentChain deploymentChain = deploymentChainProvider.determineDeploymentChain(deploymentRoot);\n            if(deploymentChain == null)\n                throw new RuntimeException(\"Failed determine the deployment chain for deployment root: \" + deploymentRoot);\n            try {\n                deploymentChain.processDeployment(deploymentUnitContext);\n            } catch (DeploymentUnitProcessingException e) {\n                throw new RuntimeException(\"Failed to process deployment chain.\", e);\n            }\n        } catch(Throwable t) {\n            VFSUtils.safeClose(handle);\n            throw new RuntimeException(\"Failed to activate deployment unit \" + key.getName(), t);\n        }\n    }","commit_id":"29ede470e9bb99c590841400166ba5f8fe17a109","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Call when all services in this group have been added.\n     */\n    public void finishBatch() {\n        if (countUpdater.decrementAndGet(this) == 0) {\n            batchComplete();\n        }\n    }","id":46623,"modified_method":"public void finishBatch() {\n        if (countUpdater.decrementAndGet(this) == 0) {\n            batchComplete();\n        }\n    }","commit_id":"29ede470e9bb99c590841400166ba5f8fe17a109","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void batchComplete() {\n        final long end = System.currentTimeMillis();\n        if(finishCallback != null) {\n            finishCallback.run(serviceFailures, end - start, totalServices, expectedOnDemandServices.size(), startedServices);\n        }\n    }","id":46624,"modified_method":"private void batchComplete() {\n        boolean finished = this.finished.get(); // Check first in case the batch callback invokes finish, which would not be valid for this batch.\n        if(batchCallback != null) {\n            batchCallback.run();\n        }\n        if(finished && callbackRan.compareAndSet(false, true)) {\n            new Exception().printStackTrace();\n            final long end = System.currentTimeMillis();\n            finishCallback.run(serviceFailures, end - start, totalServices, expectedOnDemandServices.size(), startedServices);\n        }\n    }","commit_id":"29ede470e9bb99c590841400166ba5f8fe17a109","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Activate the standalone server.  Starts up all the services and deployments in this server.\n     *\n     * @param context the service activator context\n     */\n    public void activate(final ServiceActivatorContext context) {\n        final BatchBuilder batchBuilder = context.getBatchBuilder();\n        // Activate extensions\n        final Map<String, ExtensionElement> extensionsCopy;\n        synchronized (this.extensions) {\n            extensionsCopy = new TreeMap<String,ExtensionElement>(this.extensions);\n        }\n        for(Map.Entry<String, ExtensionElement> extensionEntry : extensionsCopy.entrySet()) {\n            final ExtensionElement extensionElement = extensionEntry.getValue();\n            final String moduleSpec = extensionElement.getModule();\n            try {\n                for (Extension extension : Module.loadService(moduleSpec, Extension.class)) {\n                    extension.activate(context);\n                }\n            } catch(ModuleLoadException e) {\n                throw new RuntimeException(\"Failed activate subsystem: \" + extensionEntry.getKey(), e);\n            }\n        }\n\n        // Activate profile\n        profile.activate(context);\n\n        // Activate Interfaces\n        final Map<String, InterfaceElement> interfaces;\n        synchronized (this.interfaces) {\n            interfaces = new TreeMap<String, InterfaceElement>(this.interfaces);\n        }\n        for(InterfaceElement interfaceElement : interfaces.values()) {\n            interfaceElement.activate(context);\n        }\n\n        // TODO move service binding manager to somewhere else?\n        batchBuilder.addService(SocketBindingManager.SOCKET_BINDING_MANAGER,\n        \t\tnew SocketBindingManagerService(portOffset)).setInitialMode(Mode.ON_DEMAND);\n        \n        // Activate socket bindings\n        socketBindings.activate(context);\n\n        // Activate deployments\n        new JarDeploymentActivator().activate(context); // TODO:  This doesn't belong here.\n        final Map<DeploymentUnitKey, ServerGroupDeploymentElement> deployments;\n        synchronized (this.deployments) {\n            deployments = new TreeMap<DeploymentUnitKey, ServerGroupDeploymentElement>(this.deployments);\n        }\n        for(ServerGroupDeploymentElement deploymentElement : deployments.values()) {\n            try {\n                deploymentElement.activate(context);\n            } catch(Throwable t) {\n                // TODO: Rollback deployments services added before failure?\n                log.error(\"Failed to activate deployment \" + deploymentElement.getName(), t);\n            }\n        }\n    }","id":46625,"modified_method":"/**\n     * Activate the standalone server.  Starts up all the services and deployments in this server.\n     *\n     * @param context the service activator context\n     */\n    public void activateSubsystems(final ServiceActivatorContext context) {\n        final BatchBuilder batchBuilder = context.getBatchBuilder();\n\n        // Activate extensions\n        final Map<String, ExtensionElement> extensionsCopy;\n        synchronized (this.extensions) {\n            extensionsCopy = new TreeMap<String,ExtensionElement>(this.extensions);\n        }\n        for(Map.Entry<String, ExtensionElement> extensionEntry : extensionsCopy.entrySet()) {\n            final ExtensionElement extensionElement = extensionEntry.getValue();\n            final String moduleSpec = extensionElement.getModule();\n            try {\n                for (Extension extension : Module.loadService(moduleSpec, Extension.class)) {\n                    extension.activate(context);\n                }\n            } catch(ModuleLoadException e) {\n                throw new RuntimeException(\"Failed activate subsystem: \" + extensionEntry.getKey(), e);\n            }\n        }\n\n        // Activate profile\n        profile.activate(context);\n\n        // Activate Interfaces\n        final Map<String, InterfaceElement> interfaces;\n        synchronized (this.interfaces) {\n            interfaces = new TreeMap<String, InterfaceElement>(this.interfaces);\n        }\n        for(InterfaceElement interfaceElement : interfaces.values()) {\n            interfaceElement.activate(context);\n        }\n\n        // TODO move service binding manager to somewhere else?\n        batchBuilder.addService(SocketBindingManager.SOCKET_BINDING_MANAGER,\n        \t\tnew SocketBindingManagerService(portOffset)).setInitialMode(Mode.ON_DEMAND);\n\n        // Activate socket bindings\n        socketBindings.activate(context);\n\n        // Activate deployments\n        new JarDeploymentActivator().activate(context); // TODO:  This doesn't belong here.\n    }","commit_id":"29ede470e9bb99c590841400166ba5f8fe17a109","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void start(StartContext context) throws StartException {\n        final ServiceContainer serviceContainer = context.getController().getServiceContainer();\n\n        final ServerStartBatchBuilder batchBuilder = new ServerStartBatchBuilder(serviceContainer.batchBuilder(), serverStartupListener);\n        batchBuilder.addListener(serverStartupListener);\n\n        final BootUpdateContext updateContext = new BootUpdateContext() {\n            public BatchBuilder getBatchBuilder() {\n                return batchBuilder;\n            }\n\n            public ServiceContainer getServiceContainer() {\n                return serviceContainer;\n            }\n\n            public void addDeploymentProcessor(DeploymentUnitProcessor processor, long priority) {\n                throw new UnsupportedOperationException(\"Deployments are not allowed to add deployment unit processors\");\n            }\n        };\n\n        // Deployment chain should be configured now..\n        for (AbstractServerModelUpdate<?> update : updates) {\n            if(update.isDeploymentUpdate()) {\n                update.applyUpdateBootAction(updateContext);\n            }\n        }\n\n        try {\n            batchBuilder.install();\n            serverStartupListener.finish();\n        } catch (ServiceRegistryException e) {\n            throw new IllegalStateException(\"Failed to install deployment services\", e);\n        }\n    }","id":46626,"modified_method":"public void start(StartContext context) throws StartException {\n        final ServiceContainer serviceContainer = context.getController().getServiceContainer();\n\n        final BatchBuilder batchBuilder = serviceContainer.batchBuilder();\n        batchBuilder.addListener(serverStartupListener);\n\n        final BootUpdateContext updateContext = new BootUpdateContext() {\n            public BatchBuilder getBatchBuilder() {\n                return batchBuilder;\n            }\n\n            public ServiceContainer getServiceContainer() {\n                return serviceContainer;\n            }\n\n            public void addDeploymentProcessor(DeploymentUnitProcessor processor, long priority) {\n                throw new UnsupportedOperationException(\"Deployments are not allowed to add deployment unit processors\");\n            }\n        };\n\n        // Deployment chain should be configured now..\n        for (AbstractServerModelUpdate<?> update : updates) {\n            if(update.isDeploymentUpdate()) {\n                update.applyUpdateBootAction(updateContext);\n            }\n        }\n\n        try {\n            batchBuilder.install();\n            serverStartupListener.finish();\n        } catch (ServiceRegistryException e) {\n            throw new IllegalStateException(\"Failed to install deployment services\", e);\n        }\n    }","commit_id":"7d67a766db321655f0fc4805920e8ab04e294fa2","url":"https://github.com/wildfly/wildfly"},{"original_method":"static final void addService(final BatchBuilder batchBuilder, final List<AbstractServerModelUpdate<?>> updates, final ServerStartupListener serverStartupListener) {\n        batchBuilder.addService(SERVICE_NAME, new DeploymentUpdateService(updates, serverStartupListener))\n            .addDependency(ServerDeploymentRepository.SERVICE_NAME);\n    }","id":46627,"modified_method":"static final void addService(final BatchBuilder batchBuilder, final List<AbstractServerModelUpdate<?>> updates, final ServerStartupListener serverStartupListener) {\n        ServiceBuilder<Void> serviceBuilder = batchBuilder.addService(SERVICE_NAME, new DeploymentUpdateService(updates, serverStartupListener));\n        serviceBuilder.addDependency(ServerDeploymentRepository.SERVICE_NAME);\n        serviceBuilder.install();\n    }","commit_id":"7d67a766db321655f0fc4805920e8ab04e294fa2","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void run(final List<ServiceActivator> runServices) {\n        if (serverName != null) {\n            MDC.put(\"process\", \"server-\" + serverName);\n\n            log.infof(\"Starting server \\\"%s\\\"\", serverName);\n        }\n        else {\n            MDC.put(\"process\", \"standalone-server\");\n\n            log.infof(\"Starting standalone server\");\n        }\n        final ServiceContainer container = ServiceContainer.Factory.create();\n        final int threads = Runtime.getRuntime().availableProcessors();\n        container.setExecutor(new ThreadPoolExecutor(threads, threads, Long.MAX_VALUE, TimeUnit.NANOSECONDS, new LinkedBlockingQueue<Runnable>()));\n\n        final ServerStartupListener serverStartupListener = new ServerStartupListener(createListenerCallback());\n        final ServerStartBatchBuilder batchBuilder = new ServerStartBatchBuilder(container.batchBuilder(), serverStartupListener);\n        batchBuilder.addListener(serverStartupListener);\n\n        // First-stage (boot) services\n\n        final ServiceActivatorContext serviceActivatorContext = new ServiceActivatorContext() {\n            public BatchBuilder getBatchBuilder() {\n                return batchBuilder;\n            }\n        };\n\n        // Root service\n        final ServiceBuilder<Void> builder = batchBuilder.addService(AS_SERVER_SERVICE_NAME, Service.NULL);\n        builder.setInitialMode(ServiceController.Mode.ACTIVE);\n\n        // Services specified by the creator of this object\n        for (ServiceActivator service : this.startServices) {\n            service.activate(serviceActivatorContext);\n        }\n\n        // Services specified to this method\n        for (ServiceActivator service : runServices) {\n            service.activate(serviceActivatorContext);\n        }\n\n        // Next-stage services\n\n        // Initial model\n        final ServerModel serverModel = new ServerModel(serverName, portOffset);\n\n        final Properties systemProperties = System.getProperties();\n        final ServerEnvironment environment = providedEnvironment != null\n                        ? providedEnvironment\n                        : new ServerEnvironment(systemProperties, serverName, false);\n\n        log.info(\"Activating core services\");\n\n        // The server controller\n        // TODO make ServerConfigurationPersister internal\n        // TODO share thread pool\n        ServerControllerImpl serverController = new ServerControllerImpl(serverModel, container, environment.isStandalone());\n        batchBuilder.addService(ServerController.SERVICE_NAME, serverController)\n            .addDependency(ServerConfigurationPersister.SERVICE_NAME, ServerConfigurationPersister.class, serverController.getConfigurationPersisterValue())\n            .addInjection(serverController.getExecutorValue(), Executors.newCachedThreadPool());\n\n        // Server environment services\n        ServerEnvironmentServices.addServices(environment, batchBuilder);\n\n        // Deployment repository\n        ServerDeploymentRepositoryImpl.addService(batchBuilder);\n\n        // Graceful shutdown\n        ShutdownHandlerImpl.addService(batchBuilder);\n\n        // Server model service - TODO: replace with ServerController\n        ServerModelService.addService(serverModel, batchBuilder);\n\n        // Server deployment manager - TODO: move into startServices, only start in standalone mode\n        ServerDeploymentManagerImpl.addService(serverModel, container, batchBuilder);\n\n        // Server configuration persister - TODO: move into startServices, only start in standalone mode\n        ServerConfigurationPersisterImpl.addService(serverModel, batchBuilder);\n\n        // Server deployment scanner factory\n        DeploymentScannerFactoryService.addService(batchBuilder);\n\n        batchBuilder.addService(SocketBindingManager.SOCKET_BINDING_MANAGER,\n                new SocketBindingManagerService(portOffset)).setInitialMode(ServiceController.Mode.ON_DEMAND);\n\n        // Activate deployment module loader\n        batchBuilder.addService(ClassifyingModuleLoaderService.SERVICE_NAME, new ClassifyingModuleLoaderService());\n\n        // todo move elsewhere...\n        final DeploymentChain deploymentChain = new DeploymentChainImpl();\n        deploymentChain.addProcessor(new DeploymentModuleLoaderProcessor(new DeploymentModuleLoaderImpl()), Phase.DEPLOYMENT_MODULE_LOADER_PROCESSOR);\n        batchBuilder.addService(DeploymentChain.SERVICE_NAME, new DeploymentChainService(deploymentChain))\n            .setInitialMode(ServiceController.Mode.ACTIVE);\n\n        new JarDeploymentActivator().activate(deploymentChain);\n\n        for (AbstractServerModelUpdate<?> update : updates) {\n            try {\n                serverModel.update(update);\n            } catch (UpdateFailedException e) {\n                throw new IllegalStateException(\"Failed to start server\", e);\n            }\n        }\n\n        final BootUpdateContext context = new BootUpdateContext() {\n            public BatchBuilder getBatchBuilder() {\n                return batchBuilder;\n            }\n\n            public ServiceContainer getServiceContainer() {\n                return container;\n            }\n\n            public void addDeploymentProcessor(DeploymentUnitProcessor processor, long priority) {\n                deploymentChain.addProcessor(processor, priority);\n            }\n        };\n\n        for (AbstractServerModelUpdate<?> update : updates) {\n            if(!update.isDeploymentUpdate()) {\n                update.applyUpdateBootAction(context);\n            }\n        }\n\n        DeploymentUpdateService.addService(batchBuilder, updates, serverStartupListener);\n\n        StandaloneServerManagementServices.addServices(serverModel, container, batchBuilder);\n\n        try {\n            batchBuilder.install();\n        } catch (ServiceRegistryException e) {\n            throw new IllegalStateException(\"Failed to install boot services\", e);\n        }\n    }","id":46628,"modified_method":"public void run(final List<ServiceActivator> runServices) {\n        if (serverName != null) {\n            MDC.put(\"process\", \"server-\" + serverName);\n\n            log.infof(\"Starting server \\\"%s\\\"\", serverName);\n        }\n        else {\n            MDC.put(\"process\", \"standalone-server\");\n\n            log.infof(\"Starting standalone server\");\n        }\n        final ServiceContainer container = ServiceContainer.Factory.create();\n        final int threads = Runtime.getRuntime().availableProcessors();\n        container.setExecutor(new ThreadPoolExecutor(threads, threads, Long.MAX_VALUE, TimeUnit.NANOSECONDS, new LinkedBlockingQueue<Runnable>()));\n\n        final ServerStartupListener serverStartupListener = new ServerStartupListener(createListenerCallback());\n        final BatchBuilder batchBuilder = container.batchBuilder();\n        batchBuilder.addListener(serverStartupListener);\n\n        // First-stage (boot) services\n\n        final ServiceActivatorContext serviceActivatorContext = new ServiceActivatorContext() {\n            public ServiceTarget getServiceTarget() {\n                return container;\n            }\n\n            public ServiceRegistry getServiceRegistry() {\n                return container;\n            }\n        };\n\n        // Root service\n        final ServiceBuilder<Void> builder = batchBuilder.addService(AS_SERVER_SERVICE_NAME, Service.NULL);\n        builder.setInitialMode(ServiceController.Mode.ACTIVE);\n\n        // Services specified by the creator of this object\n        for (ServiceActivator service : startServices) {\n            service.activate(serviceActivatorContext);\n        }\n\n        // Next-stage services\n\n        // Initial model\n        final ServerModel serverModel = new ServerModel(serverName, portOffset);\n\n        final Properties systemProperties = System.getProperties();\n        final ServerEnvironment environment = providedEnvironment != null\n                        ? providedEnvironment\n                        : new ServerEnvironment(systemProperties, serverName, false);\n\n        log.info(\"Activating core services\");\n\n        // The server controller\n        // TODO make ServerConfigurationPersister internal\n        // TODO share thread pool\n        ServerControllerImpl serverController = new ServerControllerImpl(serverModel, container, environment.isStandalone());\n        batchBuilder.addService(ServerController.SERVICE_NAME, serverController)\n            .addDependency(ServerConfigurationPersister.SERVICE_NAME, ServerConfigurationPersister.class, serverController.getConfigurationPersisterValue())\n            .addInjection(serverController.getExecutorValue(), Executors.newCachedThreadPool());\n\n        // Server environment services\n        ServerEnvironmentServices.addServices(environment, batchBuilder);\n\n        // Deployment repository\n        ServerDeploymentRepositoryImpl.addService(batchBuilder);\n\n        // Graceful shutdown\n        ShutdownHandlerImpl.addService(batchBuilder);\n\n        // Server model service - TODO: replace with ServerController\n        ServerModelService.addService(serverModel, batchBuilder);\n\n        // Server deployment manager - TODO: move into startServices, only start in standalone mode\n        ServerDeploymentManagerImpl.addService(serverModel, container, batchBuilder);\n\n        // Server configuration persister - TODO: move into startServices, only start in standalone mode\n        ServerConfigurationPersisterImpl.addService(serverModel, batchBuilder);\n\n        // Server deployment scanner factory\n        DeploymentScannerFactoryService.addService(batchBuilder);\n\n        batchBuilder.addService(SocketBindingManager.SOCKET_BINDING_MANAGER,\n                new SocketBindingManagerService(portOffset)).setInitialMode(ServiceController.Mode.ON_DEMAND);\n\n        // Activate deployment module loader\n        batchBuilder.addService(ClassifyingModuleLoaderService.SERVICE_NAME, new ClassifyingModuleLoaderService());\n\n        // todo move elsewhere...\n        final DeploymentChain deploymentChain = new DeploymentChainImpl();\n        deploymentChain.addProcessor(new DeploymentModuleLoaderProcessor(new DeploymentModuleLoaderImpl()), Phase.DEPLOYMENT_MODULE_LOADER_PROCESSOR);\n        batchBuilder.addService(DeploymentChain.SERVICE_NAME, new DeploymentChainService(deploymentChain))\n            .setInitialMode(ServiceController.Mode.ACTIVE);\n\n        new JarDeploymentActivator().activate(deploymentChain);\n\n        for (AbstractServerModelUpdate<?> update : updates) {\n            try {\n                serverModel.update(update);\n            } catch (UpdateFailedException e) {\n                throw new IllegalStateException(\"Failed to start server\", e);\n            }\n        }\n\n        final BootUpdateContext context = new BootUpdateContext() {\n            public BatchBuilder getBatchBuilder() {\n                return batchBuilder;\n            }\n\n            public ServiceContainer getServiceContainer() {\n                return container;\n            }\n\n            public void addDeploymentProcessor(DeploymentUnitProcessor processor, long priority) {\n                deploymentChain.addProcessor(processor, priority);\n            }\n        };\n\n        for (AbstractServerModelUpdate<?> update : updates) {\n            if(!update.isDeploymentUpdate()) {\n                update.applyUpdateBootAction(context);\n            }\n        }\n\n        DeploymentUpdateService.addService(batchBuilder, updates, serverStartupListener);\n\n        StandaloneServerManagementServices.addServices(serverModel, container, batchBuilder);\n\n        try {\n            batchBuilder.install();\n        } catch (ServiceRegistryException e) {\n            throw new IllegalStateException(\"Failed to install boot services\", e);\n        }\n    }","commit_id":"e5bc8086c51638001c41d0465e86811c645229e2","url":"https://github.com/wildfly/wildfly"},{"original_method":"public String[] getKeys() {\n\t\tObject[] keyObjects = _velocityContext.getKeys();\n\t\tObject[] innerKeyObjects =\n\t\t\t_velocityContext.getChainedContext().getKeys();\n\n\t\tString[] keys = new String[keyObjects.length + innerKeyObjects.length];\n\n\t\tArrayUtil.combine(keyObjects, innerKeyObjects, keys);\n\n\t\treturn keys;\n\t}","id":46629,"modified_method":"public String[] getKeys() {\n\t\tObject[] keyObjects = _velocityContext.getKeys();\n\n\t\tContext context = _velocityContext.getChainedContext();\n\n\t\tObject[] innerKeyObjects = context.getKeys();\n\n\t\tString[] keys = new String[keyObjects.length + innerKeyObjects.length];\n\n\t\tArrayUtil.combine(keyObjects, innerKeyObjects, keys);\n\n\t\treturn keys;\n\t}","commit_id":"c1d5fc9c1255dddd0d023415be57ded9269b8d83","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public Map<String, TemplateVariableGroup> getTemplateVariableGroups(\n\t\t\tString language) {\n\n\t\tMap<String, TemplateVariableGroup> templateVariableGroups =\n\t\t\tnew LinkedHashMap<String, TemplateVariableGroup>();\n\n\t\tTemplateVariableGroup fieldsTemplateVariableGroup =\n\t\t\tnew TemplateVariableGroup(\"fields\");\n\n\t\tfieldsTemplateVariableGroup.addCollectionVariable(\n\t\t\t\"entries\", List.class, PortletDisplayTemplateConstants.ENTRIES,\n\t\t\t\"entries-item\", null, \"curEntry\");\n\t\tfieldsTemplateVariableGroup.addVariable(\n\t\t\t\"entry\", null, PortletDisplayTemplateConstants.ENTRY);\n\n\t\ttemplateVariableGroups.put(\"fields\", fieldsTemplateVariableGroup);\n\n\t\tTemplateVariableGroup generalVariablesTemplateVariableGroup =\n\t\t\tnew TemplateVariableGroup(\"general-variables\");\n\n\t\tgeneralVariablesTemplateVariableGroup.addVariable(\n\t\t\t\"current-url\", String.class,\n\t\t\tPortletDisplayTemplateConstants.CURRENT_URL);\n\t\tgeneralVariablesTemplateVariableGroup.addVariable(\n\t\t\t\"locale\", Locale.class, PortletDisplayTemplateConstants.LOCALE);\n\t\tgeneralVariablesTemplateVariableGroup.addVariable(\n\t\t\t\"portlet-preferences\", Map.class,\n\t\t\tPortletDisplayTemplateConstants.PORTLET_PREFERENCES);\n\t\tgeneralVariablesTemplateVariableGroup.addVariable(\n\t\t\t\"template-id\", null,\n\t\t\tPortletDisplayTemplateConstants.DDM_TEMPLATE_ID);\n\t\tgeneralVariablesTemplateVariableGroup.addVariable(\n\t\t\t\"theme-display\", ThemeDisplay.class,\n\t\t\tPortletDisplayTemplateConstants.THEME_DISPLAY);\n\n\t\ttemplateVariableGroups.put(\n\t\t\t\"general-variables\", generalVariablesTemplateVariableGroup);\n\n\t\tTemplateVariableGroup utilTemplateVariableGroup =\n\t\t\tnew TemplateVariableGroup(\"util\");\n\n\t\tutilTemplateVariableGroup.addVariable(\n\t\t\t\"http-request\", HttpServletRequest.class,\n\t\t\tPortletDisplayTemplateConstants.REQUEST);\n\t\tutilTemplateVariableGroup.addVariable(\n\t\t\t\"render-request\", RenderRequest.class,\n\t\t\tPortletDisplayTemplateConstants.RENDER_REQUEST);\n\t\tutilTemplateVariableGroup.addVariable(\n\t\t\t\"render-response\", RenderResponse.class,\n\t\t\tPortletDisplayTemplateConstants.RENDER_RESPONSE);\n\n\t\tif (language.equals(TemplateConstants.LANG_TYPE_VM)) {\n\t\t\tutilTemplateVariableGroup.addVariable(\n\t\t\t\t\"liferay-taglib\", VelocityTaglib.class,\n\t\t\t\tPortletDisplayTemplateConstants.TAGLIB_LIFERAY);\n\t\t}\n\n\t\ttemplateVariableGroups.put(\"util\", utilTemplateVariableGroup);\n\n\t\treturn templateVariableGroups;\n\t}","id":46630,"modified_method":"public Map<String, TemplateVariableGroup> getTemplateVariableGroups(\n\t\tString language) {\n\n\t\tMap<String, TemplateVariableGroup> templateVariableGroups =\n\t\t\tnew LinkedHashMap<String, TemplateVariableGroup>();\n\n\t\tTemplateVariableGroup fieldsTemplateVariableGroup =\n\t\t\tnew TemplateVariableGroup(\"fields\");\n\n\t\tfieldsTemplateVariableGroup.addCollectionVariable(\n\t\t\t\"entries\", List.class, PortletDisplayTemplateConstants.ENTRIES,\n\t\t\t\"entries-item\", null, \"curEntry\");\n\t\tfieldsTemplateVariableGroup.addVariable(\n\t\t\t\"entry\", null, PortletDisplayTemplateConstants.ENTRY);\n\n\t\ttemplateVariableGroups.put(\"fields\", fieldsTemplateVariableGroup);\n\n\t\tTemplateVariableGroup generalVariablesTemplateVariableGroup =\n\t\t\tnew TemplateVariableGroup(\"general-variables\");\n\n\t\tgeneralVariablesTemplateVariableGroup.addVariable(\n\t\t\t\"current-url\", String.class,\n\t\t\tPortletDisplayTemplateConstants.CURRENT_URL);\n\t\tgeneralVariablesTemplateVariableGroup.addVariable(\n\t\t\t\"locale\", Locale.class, PortletDisplayTemplateConstants.LOCALE);\n\t\tgeneralVariablesTemplateVariableGroup.addVariable(\n\t\t\t\"portlet-preferences\", Map.class,\n\t\t\tPortletDisplayTemplateConstants.PORTLET_PREFERENCES);\n\t\tgeneralVariablesTemplateVariableGroup.addVariable(\n\t\t\t\"template-id\", null,\n\t\t\tPortletDisplayTemplateConstants.DDM_TEMPLATE_ID);\n\t\tgeneralVariablesTemplateVariableGroup.addVariable(\n\t\t\t\"theme-display\", ThemeDisplay.class,\n\t\t\tPortletDisplayTemplateConstants.THEME_DISPLAY);\n\n\t\ttemplateVariableGroups.put(\n\t\t\t\"general-variables\", generalVariablesTemplateVariableGroup);\n\n\t\tTemplateVariableGroup utilTemplateVariableGroup =\n\t\t\tnew TemplateVariableGroup(\"util\");\n\n\t\tutilTemplateVariableGroup.addVariable(\n\t\t\t\"http-request\", HttpServletRequest.class,\n\t\t\tPortletDisplayTemplateConstants.REQUEST);\n\n\t\tif (language.equals(TemplateConstants.LANG_TYPE_VM)) {\n\t\t\tutilTemplateVariableGroup.addVariable(\n\t\t\t\t\"liferay-taglib\", VelocityTaglib.class,\n\t\t\t\tPortletDisplayTemplateConstants.TAGLIB_LIFERAY);\n\t\t}\n\n\t\tutilTemplateVariableGroup.addVariable(\n\t\t\t\"render-request\", RenderRequest.class,\n\t\t\tPortletDisplayTemplateConstants.RENDER_REQUEST);\n\t\tutilTemplateVariableGroup.addVariable(\n\t\t\t\"render-response\", RenderResponse.class,\n\t\t\tPortletDisplayTemplateConstants.RENDER_RESPONSE);\n\n\t\ttemplateVariableGroups.put(\"util\", utilTemplateVariableGroup);\n\n\t\treturn templateVariableGroups;\n\t}","commit_id":"e1e174caa983e2ea410ccd528908e72f852f2e9c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public String[] getKeys() {\n\t\tObject[] keyObjects = _velocityContext.getKeys();\n\t\tObject[] innerKeyObjects =\n\t\t\t_velocityContext.getChainedContext().getKeys();\n\n\t\tString[] keys = new String[keyObjects.length + innerKeyObjects.length];\n\n\t\tArrayUtil.combine(keyObjects, innerKeyObjects, keys);\n\n\t\treturn keys;\n\t}","id":46631,"modified_method":"public String[] getKeys() {\n\t\tContext context = _velocityContext.getChainedContext();\n\n\t\treturn ArrayUtil.append(\n\t\t\t(String[])_velocityContext.getKeys(), (String[])context.getKeys());\n\t}","commit_id":"e1e174caa983e2ea410ccd528908e72f852f2e9c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public String[] getKeys() {\n\t\tContext context = _velocityContext.getChainedContext();\n\n\t\treturn ArrayUtil.append(\n\t\t\t(String[])_velocityContext.getKeys(), (String[])context.getKeys());\n\t}","id":46632,"modified_method":"public String[] getKeys() {\n\t\tObject[] keyObjects = _velocityContext.getKeys();\n\t\tObject[] innerKeyObjects =\n\t\t\t_velocityContext.getChainedContext().getKeys();\n\n\t\tString[] keys = new String[keyObjects.length + innerKeyObjects.length];\n\n\t\tArrayUtil.combine(keyObjects, innerKeyObjects, keys);\n\n\t\treturn keys;\n\t}","commit_id":"22a1f1526e9ffd4b9d3cafc52ae0b3267aef817a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\n\t * Method to trigger a thread to retrieve a file. A new thread is created to get the file.\n\t * This method displays a message about the file to retrieve in the preview pane and displays\n\t * the text of the file when the download is complete.\n\t * \n\t * @param name Name of the file to retrieve\n\t */\n\n\tpublic void retrieveFromRepo(String name) {\n\n\t\thtmlPane.setText(\"Retrieving content... \"+name);\n\n\t\tHTMLPaneContentRetriever retriever = new HTMLPaneContentRetriever(_handle, htmlPane, name);\n\n\t\tThread t = new Thread(retriever);\n\t\tt.start();\n\t}","id":46633,"modified_method":"/**\n\t * Method to trigger a thread to retrieve a file. A new thread is created to get the file.\n\t * This method displays a message about the file to retrieve in the preview pane and displays\n\t * the text of the file when the download is complete.\n\t * \n\t * @param name Name of the file to retrieve\n\t */\n\n\tpublic void retrieveFromRepo(String name) {\n\t\tretrieveFromRepo(name, false);\n\t}","commit_id":"e0c80fcd7281f7d61e92752ece054916fb591085","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Method to get the node selected with the SelectionListener\n\t * \n\t * @param fnode Name node to select\n\t * @return String the full name for the selected node\n\t */\n\tpublic String getNodes(Name fnode) {\n\t\tif (fnode.path == null)\n\t\t\tLog.finer(\"the path is null\");\n\t\telse\n\t\t\tLog.finer(\"fnode: \" + new String(fnode.name) + \" path: \" + fnode.path.toString());\n\t\tContentName toExpand = null;\n\t\tif (fnode.path == null)\n\t\t\ttoExpand = new ContentName();\n\t\telse\n\t\t\ttoExpand = ContentName.fromNative(fnode.path, fnode.name);\n\n\t\tString p = toExpand.toString();\n\t\tLog.finer(\"toExpand: \" + toExpand + \" p: \" + p);\n\n\t\tif (fnode.name != null && (new String(fnode.name).endsWith(\".txt\") || new String(fnode.name).endsWith(\".text\"))) {\n\t\t\t// get the file from the repo\n\t\t\tLog.fine(\"Retrieve from Repo: \" + p);\n\t\t\tretrieveFromRepo(p);\n\n\t\t\treturn p;\n\t\t} else {\n\t\t\t// this is a directory that we want to enumerate...\n\t\t\tif (fnode.path == null)\n\t\t\t\tLog.finer(\"the path is null\");\n\t\t\telse\n\t\t\t\tLog.finer(\"this is the path: \" + fnode.path.toString()\n\t\t\t\t\t\t+ \" this is the name: \" + new String(fnode.name));\n\t\t\tLog.info(\"Registering Prefix: \" + p);\n\t\t\tregisterPrefix(p);\n\n\t\t\tinitHelp();\n\t\t\treturn p;\n\t\t}\n\n\t}","id":46634,"modified_method":"/**\n\t * Method to get the node selected with the SelectionListener\n\t * \n\t * @param fnode Name node to select\n\t * @return String the full name for the selected node\n\t */\n\tpublic String getNodes(Name fnode) {\n\t\tif (fnode.path == null)\n\t\t\tLog.finer(\"the path is null\");\n\t\telse\n\t\t\tLog.finer(\"fnode: \" + ContentName.fromNative(new ContentName(), fnode.name) + \" path: \" + fnode.path.toString());\n\t\tContentName toExpand = null;\n\t\tif (fnode.path == null)\n\t\t\ttoExpand = new ContentName();\n\t\telse\n\t\t\ttoExpand = ContentName.fromNative(fnode.path, fnode.name);\n\n\t\tString p = toExpand.toString();\n\t\tLog.finer(\"toExpand: \" + toExpand + \" p: \" + p);\n\n\t\tif (fnode.name != null && (ContentName.fromNative(new ContentName(), fnode.name).toString().endsWith(\".txt\") || ContentName.fromNative(new ContentName(), fnode.name).toString().endsWith(\".text\"))) {\n\t\t\t// get the file from the repo\n\t\t\tLog.fine(\"Retrieve from Repo: \" + p);\n\t\t\tretrieveFromRepo(p);\n\t\t}\n\t\t\n\t\t// this is a directory that we want to enumerate...  if it is a text file, we will still want to get the versions\n\t\tif (fnode.path == null)\n\t\t\tLog.finer(\"the path is null\");\n\t\telse\n\t\t\tLog.finer(\"this is the path: \" + fnode.path.toString() + \" this is the name: \" + ContentName.fromNative(new ContentName(), fnode.name));\n\t\tLog.info(\"Registering Prefix: \" + p);\n\t\tregisterPrefix(p);\n\n\t\tinitHelp();\n\t\treturn p;\n\t}","commit_id":"e0c80fcd7281f7d61e92752ece054916fb591085","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t\t * Method to handle tree collapse events.  When a tree is collapsed, all name enumerations under\n\t\t * the collapsed node are canceled.\n\t\t * \n\t\t * @param event TreeExpansionEvent object for the event\n\t\t * \n\t\t * @return void\n\t\t */\n\t\tpublic void treeCollapsed(TreeExpansionEvent event) {\n\t\t\tfinal DefaultMutableTreeNode node = getTreeNode(event.getPath());\n\t\t\tName nodeName = getNameNode(node);\n\t\t\tLog.finer(\"nodeName: \" + nodeName.toString());\n\t\t\tContentName prefixToCancel = new ContentName();\n\t\t\tif (nodeName.path == null) {\n\t\t\t\tLog.fine(\"collapsed the tree at the root\");\n\t\t\t} else {\n\t\t\t\tprefixToCancel = ContentName.fromNative(nodeName.path, nodeName.name);\n\t\t\t\tLog.fine(\"tree collapsed at: \" + prefixToCancel.toString());\n\t\t\t}\n\t\t\tLog.fine(\"cancelling prefix: \" + prefixToCancel);\n\t\t\t_nameEnumerator.cancelEnumerationsWithPrefix(prefixToCancel);\n\t\t}","id":46635,"modified_method":"/**\n\t\t * Method to handle tree collapse events.  When a tree is collapsed, all name enumerations under\n\t\t * the collapsed node are canceled.\n\t\t * \n\t\t * @param event TreeExpansionEvent object for the event\n\t\t * \n\t\t * @return void\n\t\t */\n\t\tpublic void treeCollapsed(TreeExpansionEvent event) {\n\t\t\tDefaultMutableTreeNode node = getTreeNode(event.getPath());\n\t\t\tName nodeName = getNameNode(node);\n\t\t\tLog.finer(\"nodeName: \" + nodeName.toString());\n\t\t\tContentName prefixToCancel = new ContentName();\n\t\t\tif (nodeName.path == null) {\n\t\t\t\tLog.fine(\"collapsed the tree at the root\");\n\t\t\t} else {\n\t\t\t\tprefixToCancel = ContentName.fromNative(nodeName.path, nodeName.name);\n\t\t\t\tLog.fine(\"tree collapsed at: \" + prefixToCancel.toString());\n\t\t\t}\n\t\t\tLog.fine(\"cancelling prefix: \" + prefixToCancel);\n\t\t\t_nameEnumerator.cancelEnumerationsWithPrefix(prefixToCancel);\n\t\t\t\n\t\t}","commit_id":"e0c80fcd7281f7d61e92752ece054916fb591085","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t\t * Method to expand a tree node and display the children in the GUI.\n\t\t * \n\t\t * @param event Swing TreeExpansionEvent object\n\t\t * @return void\n\t\t */\n\t\tpublic void treeExpanded(TreeExpansionEvent event) {\n\n\t\t\tfinal DefaultMutableTreeNode node = getTreeNode(event.getPath());\n\n\t\t\tThread runner = new Thread() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\tName fnode = getNameNode(node);\n\t\t\t\t\tif (fnode != null) {\n\t\t\t\t\t\tLog.finer(\"In the tree expansion listener with node: \" + node.toString());\n\t\t\t\t\t\tgetNodes(fnode);\n\t\t\t\t\t\tm_model.reload(node);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// selected top component, switch to top usable node\n\t\t\t\t\t\tLog.finer(\"In the tree expansion listener with null node and \" + node.toString());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\trunner.start();\n\t\t}","id":46636,"modified_method":"/**\n\t\t * Method called when a tree node is expanded, currently not used.\n\t\t * \n\t\t * @param event Swing TreeExpansionEvent object\n\t\t * @return void\n\t\t */\n\t\tpublic void treeExpanded(TreeExpansionEvent event) {\n\t\t\tDefaultMutableTreeNode node = getTreeNode(event.getPath());\n\t\t\tName fnode = getNameNode(node);\n            if (fnode != null) {\n            \tgetNodes(fnode);\n            \tm_model.reload(node);\n            }\n\t\t}","commit_id":"e0c80fcd7281f7d61e92752ece054916fb591085","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Constructor for ContentExplorer application.  This sets up the swing elements and listeners for the GUI.\n\t * The constructor also initializes the CCNHandle and name enumeration.\n\t */\n\tpublic ContentExplorer() {\n\t\tsuper(\"CCN Content Explorer\");\n\n\t\tsetupNameEnumerator();\n\n\t\tsetSize(400, 300);\n\n\t\tContentName slash = null;\n\t\ttry {\n\t\t\tslash = ContentName.fromNative(\"/\");\n\t\t\tslash = new ContentName();\n\t\t} catch (MalformedContentNameStringException e1) {\n\t\t\tLog.logException(\"could not create slash (\\\"/\\\") content name\", e1);\n\t\t\tLog.exitApplication();\n\t\t}\n\n\t\tDefaultMutableTreeNode top = new DefaultMutableTreeNode(new IconData(\n\t\t\t\tICON_FOLDER, null, new Name(slash.component(0), null, true)));\n\n\t\tDefaultMutableTreeNode node = top;\n\t\tDefaultMutableTreeNode newNode = null;\n\t\t// add each component of the root\n\t\tLog.fine(\"root = \" + root.toString());\n\t\tfor (int i = 0; i < root.count(); i++) {\n\t\t\tLog.finer(\"adding component: \" + root.stringComponent(i));\n\t\t\t// add each component to the tree\n\t\t\tnewNode = new DefaultMutableTreeNode(new IconData(ICON_FOLDER,\n\t\t\t\t\tnull, new Name(root.component(i), root.copy(i), true)));\n\t\t\tif (top == null) {\n\t\t\t\ttop = newNode;\n\t\t\t} else {\n\t\t\t\tnode.add(newNode);\n\t\t\t}\n\t\t\t// usableRoot = node;\n\t\t\tnode = newNode;\n\t\t}\n\n\t\tif (top == null) {\n\t\t\ttop = new DefaultMutableTreeNode(new IconData(ICON_FOLDER, null,\n\t\t\t\t\tnew Name(root.component(0), null, true)));\n\t\t\tnewNode = top;\n\t\t\tnode = top;\n\t\t}\n\n\t\tusableRoot = top;\n\n\t\tm_model = new DefaultTreeModel(top);\n\t\ttree = new JTree(m_model);\n\n\t\ttree.putClientProperty(\"JTree.lineStyle\", \"Angled\");\n\n\t\tTreeCellRenderer renderer = new IconCellRenderer();\n\t\ttree.setCellRenderer(renderer);\n\n\t\ttree.addTreeExpansionListener(new DirExpansionListener());\n\t\ttree.addTreeSelectionListener(new DirSelectionListener());\n\n\t\tMouseListener ml = new MouseAdapter() {\n\t\t\t/**\n\t\t\t * Class to handle mouse events.  This includes a single click to begin enumeration for folders.\n\t\t\t * If the selected item is a .txt or .text file, it will preview in the lower pane.\n\t\t\t * @param e MouseEvent\n\t\t\t */\n\t\t\tpublic void mousePressed(MouseEvent e) {\n\t\t\t\tint selRow = tree.getRowForLocation(e.getX(), e.getY());\n\t\t\t\tTreePath selPath = tree.getPathForLocation(e.getX(), e.getY());\n\n\t\t\t\tif (selRow != -1) {\n\t\t\t\t\tif (e.getClickCount() == 2) {\n\t\t\t\t\t\tmyDoubleClick(selRow, selPath);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Double click action.  If a .txt or .text file is double clicked, it will open in a separate window.\n\t\t\t * The file is obtained through CCN.  If the file is no longer available, a message will appear in\n\t\t\t * the preview pane.\n\t\t\t * \n\t\t\t * @param selRow Swing row selection\n\t\t\t * @param selPath Path selected\n\t\t\t */\n\t\t\tprivate void myDoubleClick(int selRow, TreePath selPath) {\n\t\t\t\tfinal Name node = getNameNode((DefaultMutableTreeNode) selPath.getLastPathComponent());\n\n\t\t\t\tString name = new String(node.name);\n\n\t\t\t\tif (name.toLowerCase().endsWith(\".txt\")\t|| name.toLowerCase().endsWith(\".text\")) {\n\t\t\t\t\tif (node.path.count() == 0)\n\t\t\t\t\t\tretrieveFromRepo(\"/\" + name);\n\t\t\t\t\telse\n\t\t\t\t\t\tretrieveFromRepo(node.path.toString() + \"/\" + name);\n\t\t\t\t\tEventQueue.invokeLater(new Runnable() {\n\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tShowTextDialog dialog = new ShowTextDialog(node, _handle);\n\t\t\t\t\t\t\t\tdialog.setVisible(true);\n\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\tLog.logException(\"Could not display the file\", e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// Can't handle filetype\n\t\t\t\t\tJOptionPane.showMessageDialog(ContentExplorer.this, \"Cannot Open file \"\n\t\t\t\t\t\t\t\t\t+ name + \" Currently only opens .txt and .text files.\",\n\t\t\t\t\t\t\t\t\t\"Only handles .txt and .text files at this time.\",\n\t\t\t\t\t\t\t\t\tJOptionPane.ERROR_MESSAGE);\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\t\ttree.addMouseListener(ml);\n\n\t\ttree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);\n\t\ttree.setShowsRootHandles(true);\n\t\ttree.setEditable(false);\n\n\t\tString filename = \"~/\";\n\t\tJFileChooser fc = new JFileChooser(new File(filename));\n\n\t\tclass OpenFileAction extends AbstractAction {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\tJFrame frame;\n\n\t\t\tJFileChooser chooser;\n\n\t\t\tOpenFileAction(JFrame frame, JFileChooser chooser) {\n\t\t\t\tsuper(\"Send to Repo...\");\n\t\t\t\tthis.chooser = chooser;\n\t\t\t\tthis.frame = frame;\n\t\t\t}\n\n\t\t\tpublic void actionPerformed(ActionEvent evt) {\n\n\t\t\t\t// if we don't have a file then we should show a file chooser\n\t\t\t\t// otherwise give an error message \"Please select a folder\"\n\n\t\t\t\tif (((selectedPrefix.toString()).split(\"\\\\.\")).length > 2) {\n\t\t\t\t\tJOptionPane.showMessageDialog(this.frame,\n\t\t\t\t\t\t\t\"Please Select a Directory to add a file\",\n\t\t\t\t\t\t\t\"Select Directory\", JOptionPane.ERROR_MESSAGE);\n\t\t\t\t} else {\n\t\t\t\t\t// Show dialog; this method does not return until dialog is\n\t\t\t\t\t// closed\n\n\t\t\t\t\tint returnVal = chooser.showOpenDialog(frame);\n\n\t\t\t\t\t// Get the selected file\n\t\t\t\t\tFile file = chooser.getSelectedFile();\n\t\t\t\t\tif (file == null || file.getName().equals(\"\")) {\n\t\t\t\t\t\tLog.fine(\"the user did not select a file\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// what if the user hits cancel...\n\t\t\t\t\tif (returnVal != JFileChooser.APPROVE_OPTION) {\n\t\t\t\t\t\tLog.fine(\"user cancelled the send to repo option...  returning\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tLog.info(\"Writing a file to the repo \" + file.getAbsolutePath() + \" \" + file.getName());\n\t\t\t\t\tLog.fine(\"Selected Node is \" + selectedPrefix);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tContentName contentName = ContentName.fromURI(selectedPrefix);\n\t\t\t\t\t\tcontentName = ContentName.fromURI(contentName, file.getName());\n\n\t\t\t\t\t\tsendFile(file, contentName);\n\t\t\t\t\t} catch (MalformedContentNameStringException e) {\n\t\t\t\t\t\tLog.logException(\"could not create content name for selected file: \"+file.getName(), e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t;\n\n\t\tAction openAction = new OpenFileAction(this, fc);\n\t\tJButton openButton = new JButton(openAction);\n\n\t\topenACL = new JButton(\"Manage Permissions\");\n\t\topenACL.addActionListener(this);\n\n\t\topenGroup = new JButton(\"Open Group Manager\");\n\t\topenGroup.addActionListener(this);\n\n\t\t// Create the scroll pane and add the tree to it.\n\t\tJScrollPane treeView = new JScrollPane(tree);\n\n\t\t// Create the HTML viewing pane.\n\t\thtmlPane = new JEditorPane();\n\t\thtmlPane.setEditable(false);\n\t\tinitHelp();\n\t\tJScrollPane htmlView = new JScrollPane(htmlPane);\n\n\t\t// Add the scroll panes to a split pane.\n\t\tJSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT);\n\t\tsplitPane.setContinuousLayout(true);\n\t\tsplitPane.setOneTouchExpandable(true);\n\t\tsplitPane.setTopComponent(treeView);\n\t\tsplitPane.setBottomComponent(htmlView);\n\t\tDimension minimumSize = new Dimension(100, 300);\n\t\thtmlView.setMinimumSize(minimumSize);\n\t\ttreeView.setMinimumSize(minimumSize);\n\t\tsplitPane.setDividerLocation(200);\n\t\tsplitPane.setPreferredSize(new Dimension(500, 300));\n\n\t\tsetLayout(new GridBagLayout());\n\t\tGridBagConstraints c = new GridBagConstraints();\n\n\t\tc.fill = GridBagConstraints.BOTH;\n\t\tc.gridx = 0;\n\t\tc.gridy = 1;\n\t\tif (accessControlOn)\n\t\t\tgetContentPane().add(openACL, c);\n\n\t\tc.fill = GridBagConstraints.BOTH;\n\t\tc.gridx = 1;\n\t\tc.gridy = 1;\n\t\tif (accessControlOn)\n\t\t\tgetContentPane().add(openGroup, c);\n\n\t\tc.fill = GridBagConstraints.BOTH;\n\t\tc.gridwidth = 2;\n\t\tc.gridx = 0;\n\t\tc.gridy = 0;\n\t\tgetContentPane().add(openButton, c);\n\n\t\tc.weightx = 1;\n\t\tc.weighty = 1;\n\t\tc.fill = GridBagConstraints.BOTH;\n\t\tc.gridwidth = 2;\n\t\tc.gridx = 0;\n\t\tc.gridy = 2;\n\t\tgetContentPane().add(splitPane, c);\n\n\t\tpack();\n\n\t\tLog.fine(\"setting selectionPath: \" + node.getPath()+ \" node: \" + node.toString());\n\t\ttree.expandPath(new TreePath(node.getPath()));\n\t\ttree.setSelectionPath(new TreePath(node.getPath()));\n\n\t\t// POPUP Related - not working currently\n\t\tm_popup = new JPopupMenu();\n\t\tm_action = new AbstractAction() {\n\n\t\t\tprivate static final long serialVersionUID = -3875007136742502632L;\n\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\tif (m_clickedPath == null)\n\t\t\t\t\treturn;\n\t\t\t\tif (tree.isExpanded(m_clickedPath)) {\n\t\t\t\t\ttree.collapsePath(m_clickedPath);\n\t\t\t\t\tTreePath[] p = (TreePath[]) m_clickedPath.getPath();\n\t\t\t\t\tLog.fine(\"collapsed path: \" + p.toString());\n\t\t\t\t} else\n\t\t\t\t\ttree.expandPath(m_clickedPath);\n\t\t\t}\n\t\t};\n\t\tm_popup.add(m_action);\n\t\tm_popup.addSeparator();\n\n\t\tAction a1 = new AbstractAction(\"Delete\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\ttree.repaint();\n\t\t\t\tJOptionPane.showMessageDialog(ContentExplorer.this,\n\t\t\t\t\t\t\"Delete option is not implemented\", \"Info\",\n\t\t\t\t\t\tJOptionPane.INFORMATION_MESSAGE);\n\t\t\t}\n\t\t};\n\t\tm_popup.add(a1);\n\n\t\tAction a2 = new AbstractAction(\"Rename\") {\n\t\t\tprivate static final long serialVersionUID = 1L;\n\n\t\t\tpublic void actionPerformed(ActionEvent e) {\n\t\t\t\ttree.repaint();\n\t\t\t\tJOptionPane.showMessageDialog(ContentExplorer.this,\n\t\t\t\t\t\t\"Rename option is not implemented\", \"Info\",\n\t\t\t\t\t\tJOptionPane.INFORMATION_MESSAGE);\n\t\t\t}\n\t\t};\n\t\tm_popup.add(a2);\n\t\ttree.add(m_popup);\n\t\ttree.addMouseListener(new PopupTrigger());\n\n\t\tWindowListener wndCloser = new WindowAdapter() {\n\t\t\tpublic void windowClosing(WindowEvent e) {\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\t\t};\n\t\taddWindowListener(wndCloser);\n\n\t\tsetVisible(true);\n\n\t}","id":46637,"modified_method":"/**\n\t * Constructor for ContentExplorer application.  This sets up the swing elements and listeners for the GUI.\n\t * The constructor also initializes the CCNHandle and name enumeration.\n\t */\n\tpublic ContentExplorer() {\n\t\tsuper(\"CCN Content Explorer\");\n\n\t\tsetupNameEnumerator();\n\n\t\tsetSize(400, 300);\n\n\t\tContentName slash = null;\n\t\ttry {\n\t\t\tslash = ContentName.fromNative(\"/\");\n\t\t\tslash = new ContentName();\n\t\t} catch (MalformedContentNameStringException e1) {\n\t\t\tLog.logException(\"could not create slash (\\\"/\\\") content name\", e1);\n\t\t\tLog.exitApplication();\n\t\t}\n\n\t\tDefaultMutableTreeNode top = new DefaultMutableTreeNode(new IconData(\n\t\t\t\tICON_FOLDER, null, new Name(slash.component(0), null, true)));\n\n\t\tDefaultMutableTreeNode node = top;\n\t\tDefaultMutableTreeNode newNode = null;\n\t\t// add each component of the root\n\t\tLog.fine(\"root = \" + root.toString());\n\t\tfor (int i = 0; i < root.count(); i++) {\n\t\t\tLog.finer(\"adding component: \" + root.stringComponent(i));\n\t\t\t// add each component to the tree\n\t\t\tnewNode = new DefaultMutableTreeNode(new IconData(ICON_FOLDER,\n\t\t\t\t\tnull, new Name(root.component(i), root.copy(i), true)));\n\t\t\tif (top == null) {\n\t\t\t\ttop = newNode;\n\t\t\t} else {\n\t\t\t\tnode.add(newNode);\n\t\t\t}\n\t\t\t// usableRoot = node;\n\t\t\tnode = newNode;\n\t\t}\n\n\t\tif (top == null) {\n\t\t\ttop = new DefaultMutableTreeNode(new IconData(ICON_FOLDER, null,\n\t\t\t\t\tnew Name(root.component(0), null, true)));\n\t\t\tnewNode = top;\n\t\t\tnode = top;\n\t\t}\n\n\t\tusableRoot = top;\n\n\t\tm_model = new DefaultTreeModel(top);\n\t\ttree = new JTree(m_model);\n\n\t\ttree.putClientProperty(\"JTree.lineStyle\", \"Angled\");\n\n\t\tTreeCellRenderer renderer = new IconCellRenderer();\n\t\ttree.setCellRenderer(renderer);\n\n\t\tdirExpansionListener = new DirExpansionListener();\n\t\ttree.addTreeExpansionListener(dirExpansionListener);\n\t\tdirSelectionListener = new DirSelectionListener();\n\t\ttree.addTreeSelectionListener(dirSelectionListener);\n\n\t\ttree_popup = new JPopupMenu();\n\t\ttree_popupaction = new AbstractAction() {\n\n\t\t\tprivate static final long serialVersionUID = 9114007083621952181L;\n\n\t\t\tpublic void actionPerformed(ActionEvent e){\n\t\t\t\tTreePath p = (TreePath)(tree_popupaction.getValue(\"PATH\"));\n\t\t\t\tif(p==null) {\n\t\t\t\t\t//System.err.println(\"path is null\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\telse if(tree.isExpanded(p)) {\n\t\t\t\t\ttree.collapsePath(p);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (e.getActionCommand().equals(\"Expand\")) {\n\t\t\t\t\t\tTreeExpansionEvent t = new TreeExpansionEvent(tree, p);\n\t\t\t\t\t\tdirExpansionListener.treeExpanded(t);\n\t\t\t\t\t\ttree.expandPath(p);\n\t\t\t\t\t} else if (e.getActionCommand().equals(\"Select\")) {\n\t\t\t\t\t\ttree.setSelectionPath(p);\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t};\n\t\ttree_popup.add(tree_popupaction);\n\t\ttree_popup.addSeparator();\n\t\t\n\t\t\n\t\tAction displayName = new AbstractAction(\"Display Full Prefix\") {\n\n\t\t\tprivate static final long serialVersionUID = 6373543410642021178L;\n\n\t\t\tpublic void actionPerformed(ActionEvent e){\n\t\t\t\ttree.repaint();\n\t\t\t\t\n\t\t\t\tTreePath p = (TreePath)(tree_popupaction.getValue(\"PATH\"));\n\n\t\t\t\tName node = getNameNode((DefaultMutableTreeNode) p.getLastPathComponent());\n\t\t\t\t\n\t\t\t\tContentName n = new ContentName(node.path, node.name);\n\t\t\t\thtmlPane.setText(n.toString());\n\t\t\t}\n\t\t};\n\t\t\n\t\ttree_popup.add(displayName);\n\t\t\n\t\tAction saveFile = new AbstractAction(\"Save File\") {\n\n\t\t\tprivate static final long serialVersionUID = -3770094703319020441L;\n\n\t\t\tpublic void actionPerformed(ActionEvent e){\n\t\t\t\ttree.repaint();\n\t\t\t\thtmlPane.setText(\"save file to local machine not implemented yet\");\n\t\t\t\t\n\t\t\t}\n\t\t};\n\t\t\n\t\ttree_popup.add(saveFile);\n\t\t\n\t\tAction playFile = new AbstractAction(\"Play File\") {\n\n\t\t\tprivate static final long serialVersionUID = -2932828512965050415L;\n\n\t\t\tpublic void actionPerformed(ActionEvent e){\n\t\t\t\ttree.repaint();\n\t\t\t\thtmlPane.setText(\"play file with VLC not implemented yet\");\n\t\t\t\t\n\t\t\t}\n\t\t};\n\t\t\n\t\ttree_popup.add(playFile);\n\t\t\n\t\tAction showVersions = new AbstractAction(\"Show Versions\") {\n\n\t\t\tprivate static final long serialVersionUID = -827879841202976452L;\n\n\t\t\tpublic void actionPerformed(ActionEvent e){\n\t\t\t\ttree.repaint();\n\t\t\t\thtmlPane.setText(\"display versions of file not implemented yet\");\n\t\t\t\tString toDisplay = \"\";\n\t\t\t\tTreePath p = (TreePath)(tree_popupaction.getValue(\"PATH\"));\n\n\t\t\t\tName node = getNameNode((DefaultMutableTreeNode) p.getLastPathComponent());\n\t\t\t\tSet<ContentName> versions = node.getVersions();\n\t\t\t\tsynchronized(versions) {\n\t\t\t\t\tfor(ContentName c: versions) {\n\t\t\t\t\t\ttoDisplay = toDisplay+c.toString()+\"\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (toDisplay.equals(\"\")) {\n\t\t\t\t\thtmlPane.setText(\"Version numbers are currently not available for this name. \\nThis can occur if the node was not previously selected.\");\n\t\t\t\t} else {\n\t\t\t\t\thtmlPane.setText(toDisplay);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\ttree_popup.add(showVersions);\n\t\t\n\t\ttree.add(tree_popup);\n\t\t\n\t\ttree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);\n\t\ttree.setShowsRootHandles(true);\n\t\ttree.setEditable(false);\n\n\t\tString filename = \"~/\";\n\t\tJFileChooser fc = new JFileChooser(new File(filename));\n\n\t\tclass OpenFileAction extends AbstractAction {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\tJFrame frame;\n\n\t\t\tJFileChooser chooser;\n\n\t\t\tOpenFileAction(JFrame frame, JFileChooser chooser) {\n\t\t\t\tsuper(\"Send to Repo...\");\n\t\t\t\tthis.chooser = chooser;\n\t\t\t\tthis.frame = frame;\n\t\t\t}\n\n\t\t\tpublic void actionPerformed(ActionEvent evt) {\n\n\t\t\t\t// if we don't have a file then we should show a file chooser\n\t\t\t\t// otherwise give an error message \"Please select a folder\"\n\n\t\t\t\tif (((selectedPrefix.toString()).split(\"\\\\.\")).length > 2) {\n\t\t\t\t\tJOptionPane.showMessageDialog(this.frame,\n\t\t\t\t\t\t\t\"Please Select a Directory to add a file\",\n\t\t\t\t\t\t\t\"Select Directory\", JOptionPane.ERROR_MESSAGE);\n\t\t\t\t} else {\n\t\t\t\t\t// Show dialog; this method does not return until dialog is\n\t\t\t\t\t// closed\n\n\t\t\t\t\tint returnVal = chooser.showOpenDialog(frame);\n\n\t\t\t\t\t// Get the selected file\n\t\t\t\t\tFile file = chooser.getSelectedFile();\n\t\t\t\t\tif (file == null || file.getName().equals(\"\")) {\n\t\t\t\t\t\tLog.fine(\"the user did not select a file\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// what if the user hits cancel...\n\t\t\t\t\tif (returnVal != JFileChooser.APPROVE_OPTION) {\n\t\t\t\t\t\tLog.fine(\"user cancelled the send to repo option...  returning\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tLog.info(\"Writing a file to the repo \" + file.getAbsolutePath() + \" \" + file.getName());\n\t\t\t\t\tLog.fine(\"Selected Node is \" + selectedPrefix);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tContentName contentName = ContentName.fromURI(selectedPrefix);\n\t\t\t\t\t\tcontentName = ContentName.fromURI(contentName, file.getName());\n\n\t\t\t\t\t\tsendFile(file, contentName);\n\t\t\t\t\t} catch (MalformedContentNameStringException e) {\n\t\t\t\t\t\tLog.logException(\"could not create content name for selected file: \"+file.getName(), e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t;\n\n\t\tAction openAction = new OpenFileAction(this, fc);\n\t\tJButton openButton = new JButton(openAction);\n\n\t\topenACL = new JButton(\"Manage Permissions\");\n\t\topenACL.addActionListener(this);\n\n\t\topenGroup = new JButton(\"Open Group Manager\");\n\t\topenGroup.addActionListener(this);\n\n\t\t// Create the scroll pane and add the tree to it.\n\t\tJScrollPane treeView = new JScrollPane(tree);\n\n\t\t// Create the HTML viewing pane.\n\t\thtmlPane = new JEditorPane();\n\t\thtmlPane.setEditable(false);\n\t\tinitHelp();\n\t\tJScrollPane htmlView = new JScrollPane(htmlPane);\n\n\t\ttextArea = new JTextField();\n\t\ttextArea.setEditable(false);\n\t\ttextArea.setText(\"here is where names will appear\");\n\t\t\n\t\t//Component c1 = new ExplorerPanel();\n\t\t//Component c2 = new TextPanel();\n\t\t\n\t\t// Add the scroll panes to a split pane.\n\t\tJSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT);\n\t\tsplitPane.setContinuousLayout(true);\n\t\tsplitPane.setOneTouchExpandable(true);\n\t\tsplitPane.setTopComponent(treeView);\n\t\tsplitPane.setBottomComponent(htmlView);\n\t\t//splitPane.setBottomComponent(textArea);\n\t\tDimension minimumSize = new Dimension(100, 50);\n\t\thtmlView.setMinimumSize(minimumSize);\n\t\ttreeView.setMinimumSize(minimumSize);\n\t\tsplitPane.setDividerLocation(250);\n\t\tsplitPane.setPreferredSize(new Dimension(500, 300));\n\n\t\tsetLayout(new GridBagLayout());\n\t\tGridBagConstraints c = new GridBagConstraints();\n\n\t\tc.fill = GridBagConstraints.BOTH;\n\t\tc.gridx = 0;\n\t\tc.gridy = 1;\n\t\tif (accessControlOn)\n\t\t\tgetContentPane().add(openACL, c);\n\n\t\tc.fill = GridBagConstraints.BOTH;\n\t\tc.gridx = 1;\n\t\tc.gridy = 1;\n\t\tif (accessControlOn)\n\t\t\tgetContentPane().add(openGroup, c);\n\n\t\tc.fill = GridBagConstraints.BOTH;\n\t\tc.gridwidth = 2;\n\t\tc.gridx = 0;\n\t\tc.gridy = 0;\n\t\tgetContentPane().add(openButton, c);\n\n\t\tc.weightx = 1;\n\t\tc.weighty = 1;\n\t\tc.fill = GridBagConstraints.BOTH;\n\t\tc.gridwidth = 2;\n\t\tc.gridx = 0;\n\t\tc.gridy = 2;\n\t\tgetContentPane().add(splitPane, c);\n\n\t\tpack();\n\n\t\tLog.fine(\"setting selectionPath: \" + node.getPath()+ \" node: \" + node.toString());\n\t\ttree.expandPath(new TreePath(node.getPath()));\n\t\ttree.setSelectionPath(new TreePath(node.getPath()));\n\n\t\ttree.addMouseListener(new MouseActions());\n\n\t\tWindowListener wndCloser = new WindowAdapter() {\n\t\t\tpublic void windowClosing(WindowEvent e) {\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\t\t};\n\t\taddWindowListener(wndCloser);\n\n\t\tsetVisible(true);\n\n\t}","commit_id":"e0c80fcd7281f7d61e92752ece054916fb591085","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Method to handle CCNNameEnumeration callbacks.  This implementation assumes the application will handle duplicates.\n\t * \n\t * @param prefix ContentName of the prefix for returned names\n\t * @param n ArrayList<ContentNames> of children returned by enumeration.\n\t */\n\tpublic int handleNameEnumerator(ContentName prefix, ArrayList<ContentName> n) {\n\n\t\tLog.fine(\"got a callback!\");\n\t\tthis.names = n;\n\t\tLog.fine(\"here are the returned names: \");\n\t\tfor (ContentName cn : this.names) {\n\t\t\tif (!prefix.equals(new ContentName()))\n\t\t\t\tLog.fine(cn.toString() + \" (\" + prefix.toString() + cn.toString() + \")\");\n\t\t\telse\n\t\t\t\tLog.fine(cn.toString() + \" (\" + cn.toString() + \")\");\n\t\t}\n\t\tthis.addTreeNodes(n, prefix);\n\n\t\treturn 0;\n\n\t}","id":46638,"modified_method":"/**\n\t * Method to handle CCNNameEnumeration callbacks.  This implementation assumes the\n\t * application handles duplicates. This method creates an instance of the Runnable\n\t * AddChildren class to process the names returned through CCNNameEnumeration.\n\t * \n\t * @param prefix ContentName of the prefix for returned names\n\t * @param n ArrayList<ContentNames> of children returned by enumeration.\n\t */\n\tpublic int handleNameEnumerator(ContentName prefix, ArrayList<ContentName> n) {\n\n\t\tif (Log.getLevel()==Level.FINE) {\n\t\t\tLog.fine(\"got a callback! Here are the returned names: \");\n\t\t\tfor (ContentName cn : n) {\n\t\t\t\tif (!prefix.equals(new ContentName()))\n\t\t\t\t\tLog.fine(cn.toString() + \" (\" + prefix.toString() + cn.toString() + \")\");\n\t\t\t\telse\n\t\t\t\t\tLog.fine(cn.toString() + \" (\" + cn.toString() + \")\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tAddChildren adder = new AddChildren(this, n, prefix);\n\t\tThread t = new Thread(adder);\n\t\tt.start();\n\t\t\n\t\treturn 0;\n\t}","commit_id":"e0c80fcd7281f7d61e92752ece054916fb591085","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t\t * Method to handle selection events.  If a node is selected for the first time and is a folder,\n\t\t * name enumeration will begin under that prefix.  This event is also triggered as the tree is collapsed.\n\t\t * In this case, we do not want to reselect nodes that were already canceled since\n\t\t * enumeration will be started again.  To avoid this, the method checks if the path has any parent collapsed,\n\t\t * if so, the event is not processed so name enumeration will not be restarted.\n\t\t * \n\t\t * @param event TreeSelectionEvent object to handle.\n\t\t * @return void\n\t\t */\n\t\tpublic void valueChanged(TreeSelectionEvent event) {\n\n\t\t\tfinal DefaultMutableTreeNode node = getTreeNode(event.getPath());\n\n\t\t\t// if the tree is not collapsed already, it is already being\n\t\t\t// enumerated, so we don't need to reselect it\n\t\t\t// if the row is -1, that means a parent is collapsed and this node\n\t\t\t// is being\n\t\t\t// selected as part of a collapse, so we don't want to re-register\n\t\t\t// it for enumerating\n\t\t\tif (tree.getRowForPath(event.getPath()) > -1) {\n\t\t\t\tThread runner = new Thread() {\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tLog.fine(\"getting name node: \" + node.toString());\n\t\t\t\t\t\tName fnode = getNameNode(node);\n\n\t\t\t\t\t\tif (fnode == null) {\n\t\t\t\t\t\t\tLog.fine(\"fnode path is null...\");\n\t\t\t\t\t\t\t// selected top component, switch to top\n\t\t\t\t\t\t\t// usable node\n\t\t\t\t\t\t\tfnode = getNameNode(usableRoot);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tLog.fine(\"In the tree selection listener with \"\t+ fnode.name + \" and \" + node.toString());\n\t\t\t\t\t\tString p = getNodes(fnode);\n\t\t\t\t\t\tselectedPath = p;\n\t\t\t\t\t\tselectedPrefix = p;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\trunner.start();\n\t\t\t}\n\t\t}","id":46639,"modified_method":"/**\n\t\t * Method to handle selection events.  If a node is selected for the first time and is a folder,\n\t\t * name enumeration will begin under that prefix.  This event is also triggered as the tree is collapsed.\n\t\t * In this case, we do not want to reselect nodes that were already canceled since\n\t\t * enumeration will be started again.  To avoid this, the method checks if the path has any parent collapsed,\n\t\t * if so, the event is not processed so name enumeration will not be restarted.\n\t\t * \n\t\t * @param event TreeSelectionEvent object to handle.\n\t\t * @return void\n\t\t */\n\t\tpublic void valueChanged(TreeSelectionEvent event) {\n\n\t\t\tfinal DefaultMutableTreeNode node = getTreeNode(event.getPath());\n\n\t\t\t// if the tree is not collapsed already, it is already being\n\t\t\t// enumerated, so we don't need to reselect it\n\t\t\t// if the row is -1, that means a parent is collapsed and this node\n\t\t\t// is being\n\t\t\t// selected as part of a collapse, so we don't want to re-register\n\t\t\t// it for enumerating\n\t\t\t\n\t\t\tif (tree.getRowForPath(event.getPath()) > -1) {\n\t\t\t\ttree.setSelectionPath(event.getPath());\n\t\t\t\tThread runner = new Thread() {\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tLog.fine(\"getting name node: \" + node.toString());\n\t\t\t\t\t\tName fnode = getNameNode(node);\n\n\t\t\t\t\t\tif (fnode == null) {\n\t\t\t\t\t\t\tLog.fine(\"fnode path is null...\");\n\t\t\t\t\t\t\t// selected top component, switch to top\n\t\t\t\t\t\t\t// usable node\n\t\t\t\t\t\t\tfnode = getNameNode(usableRoot);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tLog.fine(\"In the tree selection listener with \"\t+ fnode.name + \" and \" + node.toString());\n\t\t\t\t\t\tString p = getNodes(fnode);\n\t\t\t\t\t\tselectedPath = p;\n\t\t\t\t\t\tselectedPrefix = p;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\trunner.start();\n\t\t\t}\n\t\t}","commit_id":"e0c80fcd7281f7d61e92752ece054916fb591085","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Run method for the thread that will be used to download the content.\n\t * As bytes for the object are retrieved, they will be displayed in the\n\t * preview pane.\n\t * \n\t * @return void\n\t * \n\t * @see CCNFileInputStream\n\t */\n\tpublic void run() {\n\t\t\n\t\tif (name == null) {\n\t\t\tSystem.err.println(\"Must set file name for retrieval\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (htmlPane == null) {\n\t\t\tSystem.err.println(\"Must set htmlPane\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (handle == null) {\n\t\t\tSystem.err.println(\"Must set CCNHandle\");\n\t\t\treturn;\n\t\t}\n\t\t\t\n\n\t\ttry{\n\t\t\t//get the file name as a ContentName\n\t\t\tContentName fileName = ContentName.fromURI(name);\n\n\t\t\tCCNFileInputStream fis = new CCNFileInputStream(fileName, handle);\n\t\t\t\t\n\t\t\thtmlPane.read(fis, fileName);\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Could not retrieve file: \"+name);\n\t\t\thtmlPane.setText(name + \" is not available at this time.\");\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}","id":46640,"modified_method":"/**\n\t * Run method for the thread that will be used to download the content.\n\t * As bytes for the object are retrieved, they will be displayed in the\n\t * preview pane.\n\t * \n\t * @return void\n\t * \n\t * @see CCNFileInputStream\n\t */\n\tpublic void run() {\n\t\t\n\t\tif (name == null) {\n\t\t\tSystem.err.println(\"Must set file name for retrieval\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (htmlPane == null) {\n\t\t\tSystem.err.println(\"Must set htmlPane\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (handle == null) {\n\t\t\tSystem.err.println(\"Must set CCNHandle\");\n\t\t\treturn;\n\t\t}\n\t\t\t\n\t\tContentName fileName = null;\n\t\t\n\t\ttry{\n\t\t\t//get the file name as a ContentName\n\t\t\tfileName = ContentName.fromURI(name);\n\n\t\t\tCCNFileInputStream fis = new CCNFileInputStream(fileName, handle);\n\t\t\t\t\n\t\t\thtmlPane.read(fis, fileName);\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Could not retrieve file: \"+name);\n\t\t\thtmlPane.setText(name + \" is not available at this time.\");\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\tif (txtpopup && fileName!=null) {\n\t\t\ttry {\n\t\t\t\t//System.out.println(\"attempting to open: \"+fileName);\n\t\t\t\tShowTextDialog dialog = new ShowTextDialog(fileName, handle);\n\t\t\t\tdialog.displayText();\n\t\t\t\tdialog.setVisible(true);\n\t\t\t} catch (Exception e) {\n\t\t\t\t//Log.logException(\"Could not display the file\", e);\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\n\t}","commit_id":"e0c80fcd7281f7d61e92752ece054916fb591085","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public String toString() {\n\t\tif(name==null)\n\t\t\treturn new String(\"/\");\n        return new String(name);\n    }","id":46641,"modified_method":"public String toString() {\n\t\tif(name==null)\n\t\t\treturn new String(\"/\");\n\t\tContentName n = new ContentName(new ContentName(),name);\n        return n.toString().replaceFirst(\"/\", \"\");\n    }","commit_id":"e0c80fcd7281f7d61e92752ece054916fb591085","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public Name(byte[] cn, ContentName prefix, boolean type) {\n        name = cn;\n        path = prefix;\n        isDirectory = type;\n        //fileURL = getClass().getResource(filename);\n//        if (fileURL == null) {\n//            System.err.println(\"Couldn't find file: \"\n//                               + filename);\n//        }\n    }","id":46642,"modified_method":"public Name(byte[] cn, ContentName prefix, boolean type) {\n        name = cn;\n        path = prefix;\n        isDirectory = type;\n        //versions = new ArrayList<ContentName>();\n        versions = new HashSet<ContentName>();\n    }","commit_id":"e0c80fcd7281f7d61e92752ece054916fb591085","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public ShowTextDialog(Name name,CCNHandle handle) {\t\n\t\tsuper();\n\t\t\n\t\t\n\t\tgetContentPane().setLayout(null);\n\t\tthis.nodeSelected = name;\n\t\tthis.setBounds(100, 100, 500, 500);\n\t\tfinal JLabel label = new JLabel();\n\t\tlabel.setBounds(0, 0, 490, 51);\n\t\tlabel.setText(\"Displaying File: \" + new String(nodeSelected.name));\n\t\tgetContentPane().add(label);\n\t\t\n\n\t\tfinal JScrollPane scrollPane = new JScrollPane();\n\t\tscrollPane.setBounds(0, 40, 490, 378);\n\t\tgetContentPane().add(scrollPane);\n\n\t\tthis.editorPane = new JEditorPane();\n\t\tscrollPane.setViewportView(editorPane);\n\t\t\n\t\tSystem.out.println(\"File Name is \"+ name);\n\t\t\n\t\t//get the file name as a ContentName\n\t\t//write the content to the content pane to be displayed in the UI\n\t\tContentName fileName = null;\n\t\ttry {\n\t\t\tif(name.path.count() < 1)\n\t\t\t\tfileName = ContentName.fromNative(\"/\"+new String(name.name));\n\t\t\telse\n\t\t\t\tfileName = ContentName.fromNative(name.path.toString()+\"/\"+new String(name.name));\n\t\t\tdisplayText(fileName, handle);\n\t\t} catch (MalformedContentNameStringException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\tfinishedButton = new JButton();\n\t\tfinishedButton.setName(\"buttonDone\");\n\t\tfinishedButton.setBounds(215, 424, 112, 36);\n\t\tfinishedButton.setText(\"Finished\");\n\t\tfinishedButton.addActionListener(this);\n\t\tgetContentPane().add(finishedButton);\n\n\t\t\n\t}","id":46643,"modified_method":"public ShowTextDialog(ContentName name, CCNHandle h) {\t\n\t\t\n\t\tif (name==null) {\n\t\t\tSystem.err.println(\"null filename, returning\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (h==null) {\n\t\t\tSystem.err.println(\"CCNHandle is null, returning\");\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t\n\t\tcontentname = name;\n\t\thandle = h;\n\t\t\n\t\tgetContentPane().setLayout(null);\n\t\tthis.setBounds(100, 100, 500, 500);\n\t\tfinal JLabel label = new JLabel();\n\t\tlabel.setBounds(0, 0, 490, 51);\n\t\tlabel.setText(\"Displaying File: \" + contentname);\n\t\tgetContentPane().add(label);\n\t\t\n\n\t\tfinal JScrollPane scrollPane = new JScrollPane();\n\t\tscrollPane.setBounds(0, 40, 490, 378);\n\t\tgetContentPane().add(scrollPane);\n\n\t\tthis.editorPane = new JEditorPane();\n\t\tscrollPane.setViewportView(editorPane);\n\t\t\t\n\t\tfinishedButton = new JButton();\n\t\tfinishedButton.setName(\"buttonDone\");\n\t\tfinishedButton.setBounds(215, 424, 112, 36);\n\t\tfinishedButton.setText(\"Finished\");\n\t\tfinishedButton.addActionListener(this);\n\t\tgetContentPane().add(finishedButton);\n\n\t\t\n\t}","commit_id":"e0c80fcd7281f7d61e92752ece054916fb591085","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Register a standing interest filter with callback to receive any \n\t * matching interests seen. Any interests whose prefix completely matches \"filter\" will\n\t * be delivered to the listener. Also if this filter matches no currently registered\n\t * prefixes, register its prefix with ccnd.\n\t *\n\t * @param caller \tmust not be null\n\t * @param filter\tContentName containing prefix of interests to match\n\t * @param callbackListener a CCNFilterListener\n\t * @param registrationFlags to use for this registration.\n\t * @throws IOException \n\t */\n\tpublic void setInterestFilter(Object caller, ContentName filter, CCNFilterListener callbackListener,\n\t\t\tInteger registrationFlags) throws IOException {\n\n\t\tif( Log.isLoggable(Log.FAC_NETMANAGER, Level.FINE) )\n\t\t\tLog.fine(Log.FAC_NETMANAGER, formatMessage(\"setInterestFilter: {0}\"), filter);\n\t\tif ((null == _keyManager) || (!_keyManager.initialized() || (null == _keyManager.getDefaultKeyID()))) {\n\t\t\tLog.warning(Log.FAC_NETMANAGER, formatMessage(\"Cannot set interest filter -- key manager not ready!\"));\n\t\t\tthrow new IOException(formatMessage(\"Cannot set interest filter -- key manager not ready!\"));\n\t\t}\n\t\t// TODO - use of \"caller\" should be reviewed - don't believe this is currently serving\n\t\t// serving any useful purpose.\n\t\tsetupTimers();\n\t\tif (_usePrefixReg) {\n\t\t\ttry {\n\t\t\t\tif (null == _prefixMgr) {\n\t\t\t\t\t_prefixMgr = new PrefixRegistrationManager(this);\n\t\t\t\t}\n\t\t\t\tsynchronized(_registeredPrefixes) {\n\t\t\t\t\tRegisteredPrefix oldPrefix = getRegisteredPrefix(filter);\n\t\t\t\t\tif (null != oldPrefix) {\n\t\t\t\t\t\tboolean wasClosing = oldPrefix._closing;\n\t\t\t\t\t\twhile (oldPrefix._closing) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t_registeredPrefixes.wait();\n\t\t\t\t\t\t\t} catch (InterruptedException e) {}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (wasClosing) {\n\t\t\t\t\t\t\toldPrefix = getRegisteredPrefix(filter);\t// Need to recheck in case someone else already registered us\n\t\t\t\t\t\t\tif (null == oldPrefix) {\n\t\t\t\t\t\t\t\t_registeredPrefixes.remove(filter);\n\t\t\t\t\t\t\t\tregisterPrefix(filter, registrationFlags);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toldPrefix._refCount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tregisterPrefix(filter, registrationFlags);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (CCNDaemonException e) {\n\t\t\t\tLog.warning(Log.FAC_NETMANAGER, formatMessage(\"setInterestFilter: unexpected CCNDaemonException: \" + e.getMessage()));\n\t\t\t\tthrow new IOException(e.getMessage());\n\t\t\t}\n\t\t}\n\n\t\tFilter newOne = new Filter(this, filter, callbackListener, caller);\n\t\tsynchronized (_myFilters) {\n\t\t\t_myFilters.add(filter, newOne);\n\t\t}\n\t}","id":46644,"modified_method":"/**\n\t * Register a standing interest filter with callback to receive any \n\t * matching interests seen. Any interests whose prefix completely matches \"filter\" will\n\t * be delivered to the listener. Also if this filter matches no currently registered\n\t * prefixes, register its prefix with ccnd.\n\t *\n\t * @param caller \tmust not be null\n\t * @param filter\tContentName containing prefix of interests to match\n\t * @param callbackListener a CCNFilterListener\n\t * @param registrationFlags to use for this registration.\n\t * @throws IOException \n\t */\n\tpublic void setInterestFilter(Object caller, ContentName filter, CCNFilterListener callbackListener,\n\t\t\tInteger registrationFlags) throws IOException {\n\n\t\tif( Log.isLoggable(Log.FAC_NETMANAGER, Level.FINE) )\n\t\t\tLog.fine(Log.FAC_NETMANAGER, formatMessage(\"setInterestFilter: {0}\"), filter);\n\t\tif ((null == _keyManager) || (!_keyManager.initialized() || (null == _keyManager.getDefaultKeyID()))) {\n\t\t\tLog.warning(Log.FAC_NETMANAGER, formatMessage(\"Cannot set interest filter -- key manager not ready!\"));\n\t\t\tthrow new IOException(formatMessage(\"Cannot set interest filter -- key manager not ready!\"));\n\t\t}\n\t\t// TODO - use of \"caller\" should be reviewed - don't believe this is currently serving\n\t\t// serving any useful purpose.\n\t\tsetupTimers();\n\t\tif (_usePrefixReg) {\n\t\t\ttry {\n\t\t\t\tif (null == _prefixMgr) {\n\t\t\t\t\t_prefixMgr = new PrefixRegistrationManager(this);\n\t\t\t\t}\n\t\t\t\tsynchronized(_registeredPrefixes) {\n\t\t\t\t\t// Determine whether we need to register our prefix with ccnd\n\t\t\t\t\t// We do if either its not registered now, or the one registered now is being\n\t\t\t\t\t// cancelled but its still in the process of getting deregistered. In the second\n\t\t\t\t\t// case (closing) we need to wait until the prefix has been deregistered before\n\t\t\t\t\t// we go ahead and register it. And of course, someone else could have registered it\n\t\t\t\t\t// before we got to it so check for that also. If its already registered, just bump\n\t\t\t\t\t// its use count.\n\t\t\t\t\tRegisteredPrefix prefix = getRegisteredPrefix(filter);\n\t\t\t\t\tif (null != prefix) {\n\t\t\t\t\t\tboolean wasClosing = prefix._closing;\n\t\t\t\t\t\twhile (prefix._closing) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t_registeredPrefixes.wait();\n\t\t\t\t\t\t\t} catch (InterruptedException e) {}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (wasClosing) {\n\t\t\t\t\t\t\tprefix = getRegisteredPrefix(filter);\t// Need to recheck in case someone else already registered us\n\t\t\t\t\t\t\tif (null == prefix) {\n\t\t\t\t\t\t\t\tprefix = registerPrefix(filter, registrationFlags);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprefix = registerPrefix(filter, registrationFlags);\n\t\t\t\t\t}\n\t\t\t\t\tprefix._refCount++;\n\t\t\t\t}\n\t\t\t} catch (CCNDaemonException e) {\n\t\t\t\tLog.warning(Log.FAC_NETMANAGER, formatMessage(\"setInterestFilter: unexpected CCNDaemonException: \" + e.getMessage()));\n\t\t\t\tthrow new IOException(e.getMessage());\n\t\t\t}\n\t\t}\n\n\t\tFilter newOne = new Filter(this, filter, callbackListener, caller);\n\t\tsynchronized (_myFilters) {\n\t\t\t_myFilters.add(filter, newOne);\n\t\t}\n\t}","commit_id":"d6a5afeee103837c1c880c51dcf1c871abb51090","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Must be called with _registeredPrefixes locked\n\t * \n\t * @param filter\n\t * @param registrationFlags\n\t * @throws CCNDaemonException\n\t */\n    private void registerPrefix(ContentName filter, Integer registrationFlags) throws CCNDaemonException {\n    \tForwardingEntry entry;\n    \tif (null == registrationFlags) {\n\t\t\tentry = _prefixMgr.selfRegisterPrefix(filter);\n\t\t} else {\n\t\t\tentry = _prefixMgr.selfRegisterPrefix(filter, null, registrationFlags, Integer.MAX_VALUE);\n\t\t}\n\t\tRegisteredPrefix newPrefix = new RegisteredPrefix(entry);\n\t\t_registeredPrefixes.put(filter, newPrefix);\n\t\t// FIXME: The lifetime of a prefix is returned in seconds, not milliseconds.  The refresh code needs\n\t\t// to understand this.  This isn't a problem for now because the lifetime we request when we register a \n\t\t// prefix we use Integer.MAX_VALUE as the requested lifetime.\n\t\tif( Log.isLoggable(Log.FAC_NETMANAGER, Level.FINE) )\n\t\t\tLog.fine(Log.FAC_NETMANAGER, \"registerPrefix for {0}: entry.lifetime: {1} entry.faceID: {2}\", filter, entry.getLifetime(), entry.getFaceID());\n    }","id":46645,"modified_method":"/**\n\t * Must be called with _registeredPrefixes locked\n\t * \n\t * @param filter\n\t * @param registrationFlags\n\t * @throws CCNDaemonException\n\t */\n    private RegisteredPrefix registerPrefix(ContentName filter, Integer registrationFlags) throws CCNDaemonException {\n    \tForwardingEntry entry;\n    \tif (null == registrationFlags) {\n\t\t\tentry = _prefixMgr.selfRegisterPrefix(filter);\n\t\t} else {\n\t\t\tentry = _prefixMgr.selfRegisterPrefix(filter, null, registrationFlags, Integer.MAX_VALUE);\n\t\t}\n\t\tRegisteredPrefix newPrefix = new RegisteredPrefix(entry);\n\t\t_registeredPrefixes.put(filter, newPrefix);\n\t\t// FIXME: The lifetime of a prefix is returned in seconds, not milliseconds.  The refresh code needs\n\t\t// to understand this.  This isn't a problem for now because the lifetime we request when we register a \n\t\t// prefix we use Integer.MAX_VALUE as the requested lifetime.\n\t\tif( Log.isLoggable(Log.FAC_NETMANAGER, Level.FINE) )\n\t\t\tLog.fine(Log.FAC_NETMANAGER, \"registerPrefix for {0}: entry.lifetime: {1} entry.faceID: {2}\", filter, entry.getLifetime(), entry.getFaceID());\n\t\treturn newPrefix;\n    }","commit_id":"d6a5afeee103837c1c880c51dcf1c871abb51090","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public QueueItem txnPollReserve() {\n        QueueItem item = getItemQueue().poll();\n        if (item == null) {\n            return null;\n        }\n        if (store.isEnabled() && item.getData() == null) {\n            try {\n                load(item);\n            } catch (Exception e) {\n                throw new HazelcastException(e);\n            }\n        }\n        txMap.put(item.getItemId(), item);\n        return new QueueItem(null, item.getItemId(), item.getData());\n    }","id":46646,"modified_method":"public QueueItem txnPollReserve(long reservedOfferId) {\n        QueueItem item = getItemQueue().poll();\n        if (item == null) {\n            item = txMap.remove(reservedOfferId);\n            return item;\n        }\n        if (store.isEnabled() && item.getData() == null) {\n            try {\n                load(item);\n            } catch (Exception e) {\n                throw new HazelcastException(e);\n            }\n        }\n        txMap.put(item.getItemId(), item);\n        return new QueueItem(null, item.getItemId(), item.getData());\n    }","commit_id":"d05dc1a9e94f702089e847e1d30fc4cff505d4b3","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void removeTransactionLog(Object key){\n        TransactionLog removed = txLogMap.remove(key);\n        txLogs.remove(removed);\n    }","id":46647,"modified_method":"public void removeTransactionLog(Object key){\n        TransactionLog removed = txLogMap.remove(key);\n        if (removed != null){\n            txLogs.remove(removed);\n        }\n    }","commit_id":"d05dc1a9e94f702089e847e1d30fc4cff505d4b3","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"@Test\n    public void testQueueWithMap() throws Exception {\n        Config config = new Config();\n        final int insCount = 4;\n        final String queueName = \"defQueue\";\n        final String mapName = \"defMap\";\n        TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(insCount);\n        final HazelcastInstance[] instances = factory.newInstances(config);\n        instances[0].getMap(mapName).lock(\"lock1\");\n\n        try {\n            instances[1].executeTransaction(new TransactionOptions().setTimeout(5, TimeUnit.SECONDS)\n                    .setTransactionType(TransactionOptions.TransactionType.LOCAL),\n                    new TransactionalTask<Object>() {\n                        public Object execute(TransactionalTaskContext context) throws TransactionException {\n                            boolean offered = context.getQueue(queueName).offer(\"item1\");\n                            assertTrue(offered);\n                            context.getMap(mapName).put(\"lock1\", \"value1\");\n                            fail();\n                            return null;\n                        }\n                    });\n        } catch (TransactionException ex) {\n            // expected\n        }\n        assertEquals(0, instances[0].getQueue(queueName).size());\n        assertNull(instances[0].getMap(mapName).get(\"lock1\"));\n    }","id":46648,"modified_method":"@Test\n    public void testQueueWithMap() throws Exception {\n        Config config = new Config();\n        final int insCount = 4;\n        final String queueName = \"defQueue\";\n        final String mapName = \"defMap\";\n        TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(insCount);\n        final HazelcastInstance[] instances = factory.newInstances(config);\n        instances[0].getMap(mapName).lock(\"lock1\");\n\n        try {\n            final TransactionContext context = instances[1].newTransactionContext(new TransactionOptions().setTimeout(5, TimeUnit.SECONDS));\n            context.beginTransaction();\n\n            boolean offered = context.getQueue(queueName).offer(\"item1\");\n            assertTrue(offered);\n            context.getMap(mapName).put(\"lock1\", \"value1\");\n            fail();\n\n        } catch (TransactionException ex) {\n            // expected\n        }\n        assertEquals(0, instances[0].getQueue(queueName).size());\n        assertNull(instances[0].getMap(mapName).get(\"lock1\"));\n    }","commit_id":"d05dc1a9e94f702089e847e1d30fc4cff505d4b3","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"@Test\n    public void testTransactionalOfferPoll1() throws Exception {\n        Config config = new Config();\n        final int insCount = 4;\n        final String name = \"defQueue\";\n        TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(insCount);\n        final HazelcastInstance[] instances = factory.newInstances(config);\n\n        boolean b = instances[0].executeTransaction(new TransactionOptions().setTransactionType(TransactionOptions.TransactionType.LOCAL),\n                new TransactionalTask<Boolean>() {\n                    public Boolean execute(TransactionalTaskContext context) throws TransactionException {\n                        TransactionalQueue<String> q = context.getQueue(name);\n                        assertTrue(q.offer(\"ali\"));\n                        String s = q.poll();\n                        assertNull(s);\n                        return true;\n                    }\n                });\n        assertTrue(b);\n        assertEquals(1, getQueue(instances, name).size());\n    }","id":46649,"modified_method":"@Test\n    public void testTransactionalOfferPoll1() throws Exception {\n        Config config = new Config();\n        final int insCount = 4;\n        final String name = \"defQueue\";\n        TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(insCount);\n        final HazelcastInstance[] instances = factory.newInstances(config);\n\n\n        final TransactionContext context = instances[0].newTransactionContext();\n        context.beginTransaction();\n        TransactionalQueue<String> q = context.getQueue(name);\n        assertTrue(q.offer(\"ali\"));\n        String s = q.poll();\n        assertEquals(\"ali\",s);\n        context.commitTransaction();\n        assertEquals(0, getQueue(instances, name).size());\n    }","commit_id":"d05dc1a9e94f702089e847e1d30fc4cff505d4b3","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"@Test\n    public void testTransactionalOfferPoll2() throws Exception {\n        Config config = new Config();\n        final int insCount = 4;\n        final String name0 = \"defQueue0\";\n        final String name1 = \"defQueue1\";\n        TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(insCount);\n        final HazelcastInstance[] instances = factory.newInstances(config);\n        final CountDownLatch latch = new CountDownLatch(1);\n        new Thread() {\n            public void run() {\n                try {\n                    latch.await(5, TimeUnit.SECONDS);\n                    sleep(3000);\n                    getQueue(instances, name0).offer(\"item0\");\n                } catch (InterruptedException ignored) {\n                }\n            }\n        }.start();\n\n        boolean b = instances[0].executeTransaction(new TransactionOptions().setTransactionType(TransactionOptions.TransactionType.LOCAL),\n                new TransactionalTask<Boolean>() {\n                    public Boolean execute(TransactionalTaskContext context) throws TransactionException {\n                        TransactionalQueue<String> q0 = context.getQueue(name0);\n                        TransactionalQueue<String> q1 = context.getQueue(name1);\n                        String s = null;\n                        latch.countDown();\n                        try {\n                            s = q0.poll(10, TimeUnit.SECONDS);\n                        } catch (InterruptedException e) {\n                            e.printStackTrace();\n                            fail(e.getMessage());\n                        }\n                        assertEquals(\"item0\", s);\n                        q1.offer(s);\n                        return true;\n                    }\n                });\n        assertTrue(b);\n        assertEquals(0, getQueue(instances, name0).size());\n        assertEquals(\"item0\", getQueue(instances, name1).poll());\n    }","id":46650,"modified_method":"@Test\n    public void testTransactionalOfferPoll2() throws Exception {\n        Config config = new Config();\n        final int insCount = 4;\n        final String name0 = \"defQueue0\";\n        final String name1 = \"defQueue1\";\n        TestHazelcastInstanceFactory factory = createHazelcastInstanceFactory(insCount);\n        final HazelcastInstance[] instances = factory.newInstances(config);\n        final CountDownLatch latch = new CountDownLatch(1);\n        new Thread() {\n            public void run() {\n                try {\n                    latch.await(5, TimeUnit.SECONDS);\n                    sleep(3000);\n                    getQueue(instances, name0).offer(\"item0\");\n                } catch (InterruptedException ignored) {\n                }\n            }\n        }.start();\n\n        final TransactionContext context = instances[0].newTransactionContext();\n        context.beginTransaction();\n        TransactionalQueue<String> q0 = context.getQueue(name0);\n        TransactionalQueue<String> q1 = context.getQueue(name1);\n        String s = null;\n        latch.countDown();\n        try {\n            s = q0.poll(10, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n            fail(e.getMessage());\n        }\n        assertEquals(\"item0\", s);\n        q1.offer(s);\n        context.commitTransaction();\n\n        assertEquals(0, getQueue(instances, name0).size());\n        assertEquals(\"item0\", getQueue(instances, name1).poll());\n    }","commit_id":"d05dc1a9e94f702089e847e1d30fc4cff505d4b3","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public boolean offerInternal(Data data, long timeout){\n        throwExceptionIfNull(data);\n        TxnReserveOfferOperation operation = new TxnReserveOfferOperation(name, timeout);\n        try {\n            Invocation invocation = getNodeEngine().getOperationService().createInvocationBuilder(QueueService.SERVICE_NAME, operation, partitionId).build();\n            Future<Long> f = invocation.invoke();\n            Long itemId = f.get();\n            if (itemId != null){\n                if(!itemIdSet.add(itemId)){\n                    throw new TransactionException(\"Duplicate itemId: \" + itemId);\n                }\n                tx.addTransactionLog(new QueueTransactionLog(itemId, name, partitionId, new TxnOfferOperation(name, itemId, data)));\n                return true;\n            }\n        } catch (Throwable t) {\n            ExceptionUtil.rethrow(t);\n        }\n        return false;\n    }","id":46651,"modified_method":"public boolean offerInternal(Data data, long timeout){\n        throwExceptionIfNull(data);\n        TxnReserveOfferOperation operation = new TxnReserveOfferOperation(name, timeout, offerIdQueue.size());\n        try {\n            Invocation invocation = getNodeEngine().getOperationService().createInvocationBuilder(QueueService.SERVICE_NAME, operation, partitionId).build();\n            Future<Long> f = invocation.invoke();\n            Long itemId = f.get();\n            if (itemId != null){\n                if(offerIdQueue.contains(itemId) || pollIdQueue.contains(itemId)){\n                    throw new TransactionException(\"Duplicate itemId: \" + itemId);\n                }\n                offerIdQueue.offer(new QueueItem(null, itemId, data));\n                tx.addTransactionLog(new QueueTransactionLog(itemId, name, partitionId, new TxnOfferOperation(name, itemId, data)));\n                return true;\n            }\n        } catch (Throwable t) {\n            ExceptionUtil.rethrow(t);\n        }\n        return false;\n    }","commit_id":"d05dc1a9e94f702089e847e1d30fc4cff505d4b3","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"protected TransactionalQueueProxySupport(NodeEngine nodeEngine, QueueService service, String name, Transaction tx) {\n        super(nodeEngine, service);\n        this.name = name;\n        this.tx = tx;\n        partitionId = nodeEngine.getPartitionService().getPartitionId(name);\n    }","id":46652,"modified_method":"protected TransactionalQueueProxySupport(NodeEngine nodeEngine, QueueService service, String name, Transaction tx) {\n        super(nodeEngine, service);\n        this.name = name;\n        this.tx = tx;\n        partitionId = nodeEngine.getPartitionService().getPartitionId(name);\n        config = nodeEngine.getConfig().getQueueConfig(name);\n    }","commit_id":"d05dc1a9e94f702089e847e1d30fc4cff505d4b3","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public Data pollInternal(long timeout){\n        TxnReservePollOperation operation = new TxnReservePollOperation(name, timeout);\n        try {\n            Invocation invocation = getNodeEngine().getOperationService().createInvocationBuilder(QueueService.SERVICE_NAME, operation, partitionId).build();\n            Future<QueueItem> f = invocation.invoke();\n            QueueItem item = f.get();\n            if (item != null){\n                if(!itemIdSet.add(item.getItemId())){\n                    throw new TransactionException(\"Duplicate itemId: \" + item.getItemId());\n                }\n                tx.addTransactionLog(new QueueTransactionLog(item.getItemId(), name, partitionId, new TxnPollOperation(name, item.getItemId())));\n                return item.getData();\n            }\n        } catch (Throwable t) {\n            ExceptionUtil.rethrow(t);\n        }\n        return null;\n    }","id":46653,"modified_method":"public Data pollInternal(long timeout){\n        QueueItem reservedOffer = offerIdQueue.peek();\n        TxnReservePollOperation operation = new TxnReservePollOperation(name, timeout, reservedOffer == null ? -1 : reservedOffer.getItemId());\n        try {\n            Invocation invocation = getNodeEngine().getOperationService().createInvocationBuilder(QueueService.SERVICE_NAME, operation, partitionId).build();\n            Future<QueueItem> f = invocation.invoke();\n            QueueItem item = f.get();\n            if (item != null){\n                if (reservedOffer != null && item.getItemId() == reservedOffer.getItemId()){\n                    offerIdQueue.poll();\n                    tx.removeTransactionLog(reservedOffer.getItemId());\n                    return reservedOffer.getData();\n                }\n                if(pollIdQueue.contains(item.getItemId()) || offerIdQueue.contains(item.getItemId())){\n                    throw new TransactionException(\"Duplicate itemId: \" + item.getItemId());\n                }\n                pollIdQueue.offer(item.getItemId());\n                tx.addTransactionLog(new QueueTransactionLog(item.getItemId(), name, partitionId, new TxnPollOperation(name, item.getItemId())));\n                return item.getData();\n            }\n        } catch (Throwable t) {\n            ExceptionUtil.rethrow(t);\n        }\n        return null;\n    }","commit_id":"d05dc1a9e94f702089e847e1d30fc4cff505d4b3","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public boolean shouldWait() {\n        QueueContainer container = getOrCreateContainer();\n        return getWaitTimeoutMillis() != 0 && !container.hasEnoughCapacity();\n    }","id":46654,"modified_method":"public boolean shouldWait() {\n        QueueContainer container = getOrCreateContainer();\n        return getWaitTimeoutMillis() != 0 && !container.hasEnoughCapacity(txSize+1);\n    }","commit_id":"d05dc1a9e94f702089e847e1d30fc4cff505d4b3","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void run() throws Exception {\n        QueueContainer container = getOrCreateContainer();\n        if (container.hasEnoughCapacity()) {\n            response = container.txnOfferReserve();\n        }\n    }","id":46655,"modified_method":"public void run() throws Exception {\n        QueueContainer container = getOrCreateContainer();\n        if (container.hasEnoughCapacity(txSize+1)) {\n            response = container.txnOfferReserve();\n        }\n    }","commit_id":"d05dc1a9e94f702089e847e1d30fc4cff505d4b3","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public TxnReserveOfferOperation(String name, long timeoutMillis) {\n        super(name, timeoutMillis);\n    }","id":46656,"modified_method":"public TxnReserveOfferOperation(String name, long timeoutMillis, int txSize) {\n        super(name, timeoutMillis);\n        this.txSize = txSize;\n    }","commit_id":"d05dc1a9e94f702089e847e1d30fc4cff505d4b3","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public TxnReservePollOperation(String name, long timeoutMillis) {\n        super(name, timeoutMillis);\n    }","id":46657,"modified_method":"public TxnReservePollOperation(String name, long timeoutMillis, long reservedOfferId) {\n        super(name, timeoutMillis);\n        this.reservedOfferId = reservedOfferId;\n    }","commit_id":"d05dc1a9e94f702089e847e1d30fc4cff505d4b3","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void run() throws Exception {\n        response = getOrCreateContainer().txnPollReserve();\n    }","id":46658,"modified_method":"public void run() throws Exception {\n        response = getOrCreateContainer().txnPollReserve(reservedOfferId);\n    }","commit_id":"d05dc1a9e94f702089e847e1d30fc4cff505d4b3","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"@CheckForNull\n  private Action getAction(final String actionKey) {\n    return Iterables.find(actions, new Predicate<Action>() {\n      @Override\n      public boolean apply(Action action) {\n        return action.key().equals(actionKey);\n      }\n    }, null);\n  }","id":46659,"modified_method":"@CheckForNull\n  private Action getAction(final String actionKey) {\n    return Iterables.find(actions.list(), new Predicate<Action>() {\n      @Override\n      public boolean apply(Action action) {\n        return action.key().equals(actionKey);\n      }\n    }, null);\n  }","commit_id":"f39271bce5a3a175885d98ba3630932471b580c4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public ActionService(DefaultIssueFinder finder, IssueStorage issueStorage, IssueUpdater updater, Settings settings, PropertiesDao propertiesDao) {\n    this(finder, issueStorage, updater, settings, propertiesDao, Collections.<Action>emptyList());\n  }","id":46660,"modified_method":"public ActionService(DefaultIssueFinder finder, IssueStorage issueStorage, IssueUpdater updater, Settings settings, PropertiesDao propertiesDao, Actions actions) {\n    this.finder = finder;\n    this.issueStorage = issueStorage;\n    this.updater = updater;\n    this.settings = settings;\n    this.propertiesDao = propertiesDao;\n    this.actions = actions;\n  }","commit_id":"f39271bce5a3a175885d98ba3630932471b580c4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public List<Action> listAvailableActions(final Issue issue) {\n    return newArrayList(Iterables.filter(actions, new Predicate<Action>() {\n      @Override\n      public boolean apply(Action action) {\n        return action.supports(issue);\n      }\n    }));\n  }","id":46661,"modified_method":"public List<Action> listAvailableActions(final Issue issue) {\n    return newArrayList(Iterables.filter(actions.list(), new Predicate<Action>() {\n      @Override\n      public boolean apply(Action action) {\n        return action.supports(issue);\n      }\n    }));\n  }","commit_id":"f39271bce5a3a175885d98ba3630932471b580c4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_return_no_action() {\n    Issue issue = new DefaultIssue().setKey(\"ABCD\");\n    IssueQueryResult issueQueryResult = new DefaultIssueQueryResult(newArrayList(issue));\n    when(finder.find(any(IssueQuery.class))).thenReturn(issueQueryResult);\n\n    actionService = new ActionService(finder, issueStorage, updater, settings, propertiesDao);\n    assertThat(actionService.listAvailableActions(\"ABCD\")).isEmpty();\n  }","id":46662,"modified_method":"@Test\n  public void should_return_no_action() {\n    Issue issue = new DefaultIssue().setKey(\"ABCD\");\n    IssueQueryResult issueQueryResult = new DefaultIssueQueryResult(newArrayList(issue));\n    when(finder.find(any(IssueQuery.class))).thenReturn(issueQueryResult);\n\n    assertThat(actionService.listAvailableActions(\"ABCD\")).isEmpty();\n  }","commit_id":"f39271bce5a3a175885d98ba3630932471b580c4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_execute_function_if_action_not_found() {\n    Function function = mock(Function.class);\n\n    Issue issue = new DefaultIssue().setKey(\"ABCD\");\n    IssueQueryResult issueQueryResult = new DefaultIssueQueryResult(newArrayList(issue));\n    when(finder.find(any(IssueQuery.class))).thenReturn(issueQueryResult);\n\n    actions.add(Action.builder(\"link-to-jira\").conditions(new AlwaysMatch()).functions(function).build());\n    try {\n      actionService.execute(\"ABCD\", \"tweet\", mock(UserSession.class));\n    } catch (Exception e){\n      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Action is not found : tweet\");\n    }\n    verifyZeroInteractions(function);\n  }","id":46663,"modified_method":"@Test\n  public void should_not_execute_function_if_action_not_found() {\n    Function function = mock(Function.class);\n\n    Issue issue = new DefaultIssue().setKey(\"ABCD\");\n    IssueQueryResult issueQueryResult = new DefaultIssueQueryResult(newArrayList(issue));\n    when(finder.find(any(IssueQuery.class))).thenReturn(issueQueryResult);\n\n    actions.add(\"link-to-jira\").setConditions(new AlwaysMatch()).setFunctions(function);\n    try {\n      actionService.execute(\"ABCD\", \"tweet\", mock(UserSession.class));\n    } catch (Exception e){\n      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Action is not found : tweet\");\n    }\n    verifyZeroInteractions(function);\n  }","commit_id":"f39271bce5a3a175885d98ba3630932471b580c4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_execute_function_if_issue_not_found() {\n    Function function = mock(Function.class);\n\n    IssueQueryResult issueQueryResult = new DefaultIssueQueryResult(Collections.<Issue>emptyList());\n    when(finder.find(any(IssueQuery.class))).thenReturn(issueQueryResult);\n\n    actions.add(Action.builder(\"link-to-jira\").conditions(new AlwaysMatch()).functions(function).build());\n    try {\n    actionService.execute(\"ABCD\", \"link-to-jira\", mock(UserSession.class));\n    } catch (Exception e){\n      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Issue is not found : ABCD\");\n    }\n    verifyZeroInteractions(function);\n  }","id":46664,"modified_method":"@Test\n  public void should_not_execute_function_if_issue_not_found() {\n    Function function = mock(Function.class);\n\n    IssueQueryResult issueQueryResult = new DefaultIssueQueryResult(Collections.<Issue>emptyList());\n    when(finder.find(any(IssueQuery.class))).thenReturn(issueQueryResult);\n\n    actions.add(\"link-to-jira\").setConditions(new AlwaysMatch()).setFunctions(function);\n    try {\n    actionService.execute(\"ABCD\", \"link-to-jira\", mock(UserSession.class));\n    } catch (Exception e){\n      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Issue is not found : ABCD\");\n    }\n    verifyZeroInteractions(function);\n  }","commit_id":"f39271bce5a3a175885d98ba3630932471b580c4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_execute_functions() {\n    Function function1 = mock(Function.class);\n    Function function2 = mock(Function.class);\n\n    Issue issue = new DefaultIssue().setKey(\"ABCD\");\n    IssueQueryResult issueQueryResult = mock(DefaultIssueQueryResult.class);\n    when(issueQueryResult.first()).thenReturn(issue);\n\n    Component project = mock(Component.class);\n    when(issueQueryResult.component(issue)).thenReturn(project);\n    when(finder.find(any(IssueQuery.class))).thenReturn(issueQueryResult);\n\n    actions.add(Action.builder(\"link-to-jira\").conditions(new AlwaysMatch()).functions(function1, function2).build());\n\n    assertThat(actionService.execute(\"ABCD\", \"link-to-jira\", mock(UserSession.class))).isNotNull();\n\n    verify(function1).execute(any(Function.Context.class));\n    verify(function2).execute(any(Function.Context.class));\n    verifyNoMoreInteractions(function1, function2);\n  }","id":46665,"modified_method":"@Test\n  public void should_execute_functions() {\n    Function function1 = mock(Function.class);\n    Function function2 = mock(Function.class);\n\n    Issue issue = new DefaultIssue().setKey(\"ABCD\");\n    IssueQueryResult issueQueryResult = mock(DefaultIssueQueryResult.class);\n    when(issueQueryResult.first()).thenReturn(issue);\n\n    Component project = mock(Component.class);\n    when(issueQueryResult.component(issue)).thenReturn(project);\n    when(finder.find(any(IssueQuery.class))).thenReturn(issueQueryResult);\n\n    actions.add(\"link-to-jira\").setConditions(new AlwaysMatch()).setFunctions(function1, function2);\n\n    assertThat(actionService.execute(\"ABCD\", \"link-to-jira\", mock(UserSession.class))).isNotNull();\n\n    verify(function1).execute(any(Function.Context.class));\n    verify(function2).execute(any(Function.Context.class));\n    verifyNoMoreInteractions(function1, function2);\n  }","commit_id":"f39271bce5a3a175885d98ba3630932471b580c4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_list_available_supported_actions() {\n    Issue issue = new DefaultIssue().setKey(\"ABCD\");\n    IssueQueryResult issueQueryResult = new DefaultIssueQueryResult(newArrayList(issue));\n    when(finder.find(any(IssueQuery.class))).thenReturn(issueQueryResult);\n\n    Action action1 = Action.builder(\"link-to-jira\").conditions(new AlwaysMatch()).build();\n    actions.add(action1);\n    Action action2 = Action.builder(\"tweet\").conditions(new NeverMatch()).build();\n    actions.add(action2);\n    assertThat(actionService.listAvailableActions(\"ABCD\")).containsOnly(action1);\n  }","id":46666,"modified_method":"@Test\n  public void should_list_available_supported_actions() {\n    Issue issue = new DefaultIssue().setKey(\"ABCD\");\n    IssueQueryResult issueQueryResult = new DefaultIssueQueryResult(newArrayList(issue));\n    when(finder.find(any(IssueQuery.class))).thenReturn(issueQueryResult);\n\n    actions.add(\"link-to-jira\").setConditions(new AlwaysMatch());\n    actions.add(\"tweet\").setConditions(new NeverMatch());\n    assertThat(actionService.listAvailableActions(\"ABCD\")).hasSize(1);\n  }","commit_id":"f39271bce5a3a175885d98ba3630932471b580c4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_list_available_actions_throw_exception_if_issue_not_found() {\n    IssueQueryResult issueQueryResult = new DefaultIssueQueryResult(Collections.<Issue>emptyList());\n    when(finder.find(any(IssueQuery.class))).thenReturn(issueQueryResult);\n\n    actions.add(Action.builder(\"link-to-jira\").conditions(new AlwaysMatch()).build());\n    actions.add(Action.builder(\"tweet\").conditions(new NeverMatch()).build());\n    try {\n      actionService.listAvailableActions(\"ABCD\");\n      fail();\n    } catch (Exception e){\n      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Issue is not found : ABCD\");\n    }\n  }","id":46667,"modified_method":"@Test\n  public void should_list_available_actions_throw_exception_if_issue_not_found() {\n    IssueQueryResult issueQueryResult = new DefaultIssueQueryResult(Collections.<Issue>emptyList());\n    when(finder.find(any(IssueQuery.class))).thenReturn(issueQueryResult);\n\n    actions.add(\"link-to-jira\").setConditions(new AlwaysMatch());\n    actions.add(\"tweet\").setConditions(new NeverMatch());\n    try {\n      actionService.listAvailableActions(\"ABCD\");\n      fail();\n    } catch (Exception e){\n      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Issue is not found : ABCD\");\n    }\n  }","commit_id":"f39271bce5a3a175885d98ba3630932471b580c4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_modify_issue_when_executing_a_function() {\n    Function function = new TweetFunction();\n\n    UserSession userSession = mock(UserSession.class);\n    when(userSession.login()).thenReturn(\"arthur\");\n\n    DefaultIssue issue = new DefaultIssue().setKey(\"ABCD\");\n    IssueQueryResult issueQueryResult = mock(DefaultIssueQueryResult.class);\n    when(issueQueryResult.first()).thenReturn(issue);\n    Component project = mock(Component.class);\n    when(issueQueryResult.component(issue)).thenReturn(project);\n\n    when(finder.find(any(IssueQuery.class))).thenReturn(issueQueryResult);\n\n    actions.add(Action.builder(\"link-to-jira\").conditions(new AlwaysMatch()).functions(function).build());\n    assertThat(actionService.execute(\"ABCD\", \"link-to-jira\", userSession)).isNotNull();\n\n    verify(updater).addComment(eq(issue), eq(\"New tweet on issue ABCD\"), any(IssueChangeContext.class));\n    verify(updater).setAttribute(eq(issue), eq(\"tweet\"), eq(\"tweet sent\"), any(IssueChangeContext.class));\n  }","id":46668,"modified_method":"@Test\n  public void should_modify_issue_when_executing_a_function() {\n    Function function = new TweetFunction();\n\n    UserSession userSession = mock(UserSession.class);\n    when(userSession.login()).thenReturn(\"arthur\");\n\n    DefaultIssue issue = new DefaultIssue().setKey(\"ABCD\");\n    IssueQueryResult issueQueryResult = mock(DefaultIssueQueryResult.class);\n    when(issueQueryResult.first()).thenReturn(issue);\n    Component project = mock(Component.class);\n    when(issueQueryResult.component(issue)).thenReturn(project);\n\n    when(finder.find(any(IssueQuery.class))).thenReturn(issueQueryResult);\n\n    actions.add(\"link-to-jira\").setConditions(new AlwaysMatch()).setFunctions(function);\n    assertThat(actionService.execute(\"ABCD\", \"link-to-jira\", userSession)).isNotNull();\n\n    verify(updater).addComment(eq(issue), eq(\"New tweet on issue ABCD\"), any(IssueChangeContext.class));\n    verify(updater).setAttribute(eq(issue), eq(\"tweet\"), eq(\"tweet sent\"), any(IssueChangeContext.class));\n  }","commit_id":"f39271bce5a3a175885d98ba3630932471b580c4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void before(){\n    finder = mock(DefaultIssueFinder.class);\n    issueStorage = mock(IssueStorage.class);\n    updater = mock(IssueUpdater.class);\n    propertiesDao = mock(PropertiesDao.class);\n    settings = new Settings();\n    actions = newArrayList();\n    actionService = new ActionService(finder, issueStorage, updater, settings, propertiesDao, actions);\n  }","id":46669,"modified_method":"@Before\n  public void before(){\n    finder = mock(DefaultIssueFinder.class);\n    issueStorage = mock(IssueStorage.class);\n    updater = mock(IssueUpdater.class);\n    propertiesDao = mock(PropertiesDao.class);\n    settings = new Settings();\n    actions = new Actions();\n    actionService = new ActionService(finder, issueStorage, updater, settings, propertiesDao, actions);\n  }","commit_id":"f39271bce5a3a175885d98ba3630932471b580c4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_execute_function_if_action_is_not_supported() {\n    Function function = mock(Function.class);\n\n    Issue issue = new DefaultIssue().setKey(\"ABCD\");\n    IssueQueryResult issueQueryResult = new DefaultIssueQueryResult(newArrayList(issue));\n    when(finder.find(any(IssueQuery.class))).thenReturn(issueQueryResult);\n\n    actions.add(Action.builder(\"link-to-jira\").conditions(new NeverMatch()).functions(function).build());\n    try {\n      actionService.execute(\"ABCD\", \"link-to-jira\", mock(UserSession.class));\n    } catch (Exception e){\n      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"A condition is not respected\");\n    }\n    verifyZeroInteractions(function);\n  }","id":46670,"modified_method":"@Test\n  public void should_not_execute_function_if_action_is_not_supported() {\n    Function function = mock(Function.class);\n\n    Issue issue = new DefaultIssue().setKey(\"ABCD\");\n    IssueQueryResult issueQueryResult = new DefaultIssueQueryResult(newArrayList(issue));\n    when(finder.find(any(IssueQuery.class))).thenReturn(issueQueryResult);\n\n    actions.add(\"link-to-jira\").setConditions(new NeverMatch()).setFunctions(function);\n    try {\n      actionService.execute(\"ABCD\", \"link-to-jira\", mock(UserSession.class));\n    } catch (Exception e){\n      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"A condition is not respected\");\n    }\n    verifyZeroInteractions(function);\n  }","commit_id":"f39271bce5a3a175885d98ba3630932471b580c4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void test_toString() throws Exception {\n    Action t1 = Action.create(\"link-to-jira\");\n    assertThat(t1.toString()).isEqualTo(\"link-to-jira\");\n  }","id":46671,"modified_method":"@Test\n  public void test_toString() throws Exception {\n    Action t1 = new Action(\"link-to-jira\");\n    assertThat(t1.toString()).isEqualTo(\"link-to-jira\");\n  }","commit_id":"f39271bce5a3a175885d98ba3630932471b580c4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_verify_conditions() throws Exception {\n    DefaultIssue issue = new DefaultIssue();\n    Action transition = Action.builder(\"link-to-jira\")\n      .conditions(condition1, condition2)\n      .build();\n\n    when(condition1.matches(issue)).thenReturn(true);\n    when(condition2.matches(issue)).thenReturn(false);\n    assertThat(transition.supports(issue)).isFalse();\n\n    when(condition1.matches(issue)).thenReturn(true);\n    when(condition2.matches(issue)).thenReturn(true);\n    assertThat(transition.supports(issue)).isTrue();\n  }","id":46672,"modified_method":"@Test\n  public void should_verify_conditions() throws Exception {\n    DefaultIssue issue = new DefaultIssue();\n    Action action = new Action(\"link-to-jira\")\n      .setConditions(condition1, condition2);\n\n    when(condition1.matches(issue)).thenReturn(true);\n    when(condition2.matches(issue)).thenReturn(false);\n    assertThat(action.supports(issue)).isFalse();\n\n    when(condition1.matches(issue)).thenReturn(true);\n    when(condition2.matches(issue)).thenReturn(true);\n    assertThat(action.supports(issue)).isTrue();\n  }","commit_id":"f39271bce5a3a175885d98ba3630932471b580c4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void test_equals_and_hashCode() throws Exception {\n    Action t1 = Action.create(\"link-to-jira\");\n    Action t2 = Action.create(\"link-to-jira\");\n    Action t3 = Action.create(\"comment\");\n\n    assertThat(t1).isEqualTo(t1);\n    assertThat(t1).isEqualTo(t2);\n    assertThat(t1).isNotEqualTo(t3);\n\n    assertThat(t1.hashCode()).isEqualTo(t1.hashCode());\n  }","id":46673,"modified_method":"@Test\n  public void test_equals_and_hashCode() throws Exception {\n    Action t1 = new Action(\"link-to-jira\");\n    Action t2 = new Action(\"link-to-jira\");\n    Action t3 = new Action(\"comment\");\n\n    assertThat(t1).isEqualTo(t1);\n    assertThat(t1).isEqualTo(t2);\n    assertThat(t1).isNotEqualTo(t3);\n\n    assertThat(t1.hashCode()).isEqualTo(t1.hashCode());\n  }","commit_id":"f39271bce5a3a175885d98ba3630932471b580c4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void key_should_be_set() throws Exception {\n    try {\n      Action.builder(\"\").build();\n      fail();\n    } catch (Exception e) {\n      assertThat(e).hasMessage(\"Action key must be set\");\n    }\n  }","id":46674,"modified_method":"@Test\n  public void key_should_be_set() throws Exception {\n    try {\n      new Action(\"\");\n      fail();\n    } catch (Exception e) {\n      assertThat(e).hasMessage(\"Action key must be set\");\n    }\n  }","commit_id":"f39271bce5a3a175885d98ba3630932471b580c4","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Handler\n   public void onPackratBundle() {\n      dependencyManager_.withDependencies(\n         \n         \"Packrat\",\n         \n         \"packrat::bundle()\",\n         \n         new Dependency[] {\n            Dependency.embeddedPackage(\"packrat\")\n         },\n         \n         new Command() {\n            \n            @Override\n            public void execute() {\n               \n               fileDialogs_.saveFile(\n                  \"Save Bundled Packrat Project...\",\n                  fsContext_,\n                  workbenchContext_.getCurrentWorkingDir(),\n                  \"zip\",\n                  false,\n                  new ProgressOperationWithInput<FileSystemItem>() {\n\n                     @Override\n                     public void execute(FileSystemItem input,\n                                         ProgressIndicator indicator) {\n\n                        if (input == null)\n                           return;\n\n                        indicator.onCompleted();\n\n                        String bundleFile = input.getPath();\n                        if (bundleFile == null)\n                           return;\n\n                        StringBuilder cmd = new StringBuilder();\n                        // We use 'overwrite = TRUE' since the UI dialog will prompt\n                        // us if we want to overwrite\n                        cmd\n                        .append(\"packrat::bundle(file = '\")\n                        .append(bundleFile)\n                        .append(\"', overwrite = TRUE)\")\n                        ;\n\n                        eventBus_.fireEvent(\n                           new SendToConsoleEvent(\n                              cmd.toString(),\n                              true,\n                              false\n                           )\n                        );\n\n                     }\n\n                  });\n\n            }\n\n         });\n\n   }","id":46675,"modified_method":"@Handler\n   public void onPackratBundle() {\n      dependencyManager_.withDependencies(\n         \n         \"Packrat\",\n         \n         \"packrat::bundle()\",\n         \n         new Dependency[] {\n            Dependency.embeddedPackage(\"packrat\")\n         },\n         \n         new Command() {\n            \n            @Override\n            public void execute() {\n               bundlePackratProject();\n            }\n\n         });\n\n   }","commit_id":"37a0067f3651688e1f0807f35deadf56db5c36f5","url":"https://github.com/rstudio/rstudio"},{"original_method":"private void ifDependenciesSatisifed(JsArray<Dependency> dependencies,\n                                        boolean silentEmbeddedUpdate,\n                                        final Command onInstalled)\n   {\n      server_.unsatisfiedDependencies(\n        dependencies, silentEmbeddedUpdate, \n        new SimpleRequestCallback<JsArray<Dependency>>() {\n           \n           @Override\n           public void onResponseReceived(JsArray<Dependency> dependencies)\n           {\n              if (dependencies.length() == 0)\n                 onInstalled.execute();\n           }\n        });\n   }","id":46676,"modified_method":"private void ifDependenciesSatisifed(JsArray<Dependency> dependencies,\n                                boolean silentEmbeddedUpdate,\n                                final CommandWithArg<Boolean> onComplete)\n   {\n      server_.unsatisfiedDependencies(\n        dependencies, silentEmbeddedUpdate, \n        new ServerRequestCallback<JsArray<Dependency>>() {\n           \n           @Override\n           public void onResponseReceived(JsArray<Dependency> dependencies)\n           {\n              onComplete.execute(dependencies.length() == 0);\n           }\n\n           @Override\n           public void onError(ServerError error)\n           {\n              Debug.logError(error);\n              globalDisplay_.showErrorMessage(\n                    \"Could not determine available packages\",\n                    error.getUserMessage());\n              onComplete.execute(false);\n           }\n        });\n   }","commit_id":"9e25c0ed5758dcf7b55bf3db13039a292788f739","url":"https://github.com/rstudio/rstudio"},{"original_method":"private void installDependencies(final JsArray<Dependency> dependencies,\n                                    final boolean silentEmbeddedUpdate,\n                                    final Command onSuccess)\n   {\n      server_.installDependencies(\n         dependencies, \n         new SimpleRequestCallback<ConsoleProcess>() {\n   \n            @Override\n            public void onResponseReceived(ConsoleProcess proc)\n            {   \n               final ConsoleProgressDialog dialog = \n                     new ConsoleProgressDialog(proc, server_);\n               dialog.showModal();\n   \n               proc.addProcessExitHandler(\n                  new ProcessExitEvent.Handler()\n                  {\n                     @Override\n                     public void onProcessExit(ProcessExitEvent event)\n                     {\n                        ifDependenciesSatisifed(dependencies, \n                              silentEmbeddedUpdate, new Command(){\n                           @Override\n                           public void execute()\n                           {\n                              dialog.hide();\n                              onSuccess.execute();\n                           }\n                        });     \n                     }\n                  }); \n            } \n         });\n   }","id":46677,"modified_method":"private void installDependencies(final JsArray<Dependency> dependencies,\n                                    final boolean silentEmbeddedUpdate,\n                                    final CommandWithArg<Boolean> onComplete)\n   {\n      server_.installDependencies(\n         dependencies, \n         new ServerRequestCallback<ConsoleProcess>() {\n   \n            @Override\n            public void onResponseReceived(ConsoleProcess proc)\n            {   \n               final ConsoleProgressDialog dialog = \n                     new ConsoleProgressDialog(proc, server_);\n               dialog.showModal();\n   \n               proc.addProcessExitHandler(\n                  new ProcessExitEvent.Handler()\n                  {\n                     @Override\n                     public void onProcessExit(ProcessExitEvent event)\n                     {\n                        ifDependenciesSatisifed(dependencies, \n                              silentEmbeddedUpdate, \n                              new CommandWithArg<Boolean>(){\n                           @Override\n                           public void execute(Boolean succeeded)\n                           {\n                              dialog.hide();\n                              onComplete.execute(succeeded);\n                           }\n                        });     \n                     }\n                  }); \n            } \n\n            @Override\n            public void onError(ServerError error)\n            {\n               Debug.logError(error);\n               globalDisplay_.showErrorMessage(\n                     \"Dependency installation failed\",\n                     error.getUserMessage());\n               onComplete.execute(false);\n            }\n         });\n   }","commit_id":"9e25c0ed5758dcf7b55bf3db13039a292788f739","url":"https://github.com/rstudio/rstudio"},{"original_method":"public void withShiny(final String userAction, final Command command)\n   {\n      // create user prompt command\n      CommandWith2Args<String, Command> userPrompt =\n            new CommandWith2Args<String, Command>() {\n         @Override\n         public void execute(final String unmetDeps, final Command yesCommand)\n         {\n            globalDisplay_.showYesNoMessage(\n              MessageDialog.QUESTION,\n              \"Install Shiny Package\", \n              userAction + \" requires installation of an updated version \" +\n              \"of the shiny package.\\n\\nDo you want to install shiny now?\",\n                  new Operation() {\n\n                     @Override\n                     public void execute()\n                     {\n                        yesCommand.execute();\n                     }\n                  },\n                  true);\n          }\n       };\n       \n       // perform dependency resolution \n       withDependencies(\n          \"Checking installed packages\",\n          userPrompt,\n          new Dependency[] {\n            Dependency.cranPackage(\"httpuv\", \"1.3.3\"),\n            Dependency.cranPackage(\"mime\", \"0.3\"),\n            Dependency.cranPackage(\"jsonlite\", \"0.9.16\"),\n            Dependency.cranPackage(\"xtable\", \"1.7\"),\n            Dependency.cranPackage(\"digest\", \"0.6\"),\n            Dependency.cranPackage(\"htmltools\", \"0.2.6\"),\n            Dependency.cranPackage(\"R6\", \"2.0\"),\n            Dependency.cranPackage(\"shiny\", \"0.11.0\", true)\n          }, \n          true,\n          command\n       ); \n   }","id":46678,"modified_method":"public void withShiny(final String userAction, final Command command)\n   {\n      // create user prompt command\n      CommandWith2Args<String, Command> userPrompt =\n            new CommandWith2Args<String, Command>() {\n         @Override\n         public void execute(final String unmetDeps, final Command yesCommand)\n         {\n            globalDisplay_.showYesNoMessage(\n              MessageDialog.QUESTION,\n              \"Install Shiny Package\", \n              userAction + \" requires installation of an updated version \" +\n              \"of the shiny package.\\n\\nDo you want to install shiny now?\",\n                  new Operation() {\n\n                     @Override\n                     public void execute()\n                     {\n                        yesCommand.execute();\n                     }\n                  },\n                  true);\n          }\n       };\n       \n       // perform dependency resolution \n       withDependencies(\n          \"Checking installed packages\",\n          userPrompt,\n          new Dependency[] {\n            Dependency.cranPackage(\"httpuv\", \"1.3.3\"),\n            Dependency.cranPackage(\"mime\", \"0.3\"),\n            Dependency.cranPackage(\"jsonlite\", \"0.9.16\"),\n            Dependency.cranPackage(\"xtable\", \"1.7\"),\n            Dependency.cranPackage(\"digest\", \"0.6\"),\n            Dependency.cranPackage(\"htmltools\", \"0.2.6\"),\n            Dependency.cranPackage(\"R6\", \"2.0\"),\n            Dependency.cranPackage(\"shiny\", \"0.11.0\", true)\n          }, \n          true,\n          new CommandWithArg<Boolean>()\n          {\n            @Override\n            public void execute(Boolean succeeded)\n            {\n               if (succeeded)\n                  command.execute();\n            }\n          }\n       ); \n   }","commit_id":"9e25c0ed5758dcf7b55bf3db13039a292788f739","url":"https://github.com/rstudio/rstudio"},{"original_method":"private void confirmPackageInstallation(\n      String userAction, \n      final JsArray<Dependency> dependencies,\n      final Command onConfirmed)\n   {\n      String msg = null;\n      if (dependencies.length() == 1)\n      {\n         msg = \"requires an updated version of the \" + \n               dependencies.get(0).getName() + \" package. \" +\n               \"\\n\\nDo you want to install this package now?\";\n      }\n      else\n      {\n         \n         msg = \"requires updated versions of the following packages: \" + \n               describeDepPkgs(dependencies) + \". \" +\n               \"\\n\\nDo you want to install these packages now?\";\n      }\n      \n      if (userAction != null)\n      {\n         globalDisplay_.showYesNoMessage(\n            MessageDialog.QUESTION,\n            \"Install Required Packages\", \n            userAction + \" \" + msg,\n            new Operation() {\n   \n               @Override\n               public void execute()\n               {\n                  onConfirmed.execute();\n               }\n            },\n            true);\n      }\n      else\n      {\n         onConfirmed.execute();\n      }\n   }","id":46679,"modified_method":"private void confirmPackageInstallation(\n      String userAction, \n      final JsArray<Dependency> dependencies,\n      final CommandWithArg<Boolean> onComplete)\n   {\n      String msg = null;\n      if (dependencies.length() == 1)\n      {\n         msg = \"requires an updated version of the \" + \n               dependencies.get(0).getName() + \" package. \" +\n               \"\\n\\nDo you want to install this package now?\";\n      }\n      else\n      {\n         \n         msg = \"requires updated versions of the following packages: \" + \n               describeDepPkgs(dependencies) + \". \" +\n               \"\\n\\nDo you want to install these packages now?\";\n      }\n      \n      if (userAction != null)\n      {\n         globalDisplay_.showYesNoMessage(\n            MessageDialog.QUESTION,\n            \"Install Required Packages\", \n            userAction + \" \" + msg,\n            false,\n            new Operation() {\n               @Override\n               public void execute()\n               {\n                  onComplete.execute(true);\n               }\n            },\n            new Operation() {\n               @Override\n               public void execute()\n               {\n                  onComplete.execute(false);\n               }\n            },\n            true);\n      }\n      else\n      {\n         onComplete.execute(true);\n      }\n   }","commit_id":"9e25c0ed5758dcf7b55bf3db13039a292788f739","url":"https://github.com/rstudio/rstudio"},{"original_method":"private void withDependencies(String progressCaption,\n                                 final String userAction,\n                                 final CommandWith2Args<String,Command> userPrompt,\n                                 Dependency[] dependencies, \n                                 final boolean silentEmbeddedUpdate,\n                                 final Command command)\n   {\n      // convert dependencies to JsArray\n      JsArray<Dependency> deps = JsArray.createArray().cast();\n      deps.setLength(dependencies.length);\n      for (int i = 0; i<deps.length(); i++)\n         deps.set(i, dependencies[i]);\n      \n      // create progress indicator\n      final ProgressIndicator progress = new GlobalProgressDelayer(\n            globalDisplay_,\n            250,\n            progressCaption + \"...\").getIndicator();\n      \n      // query for unsatisfied dependencies\n      server_.unsatisfiedDependencies(\n            deps, silentEmbeddedUpdate, \n            new ServerRequestCallback<JsArray<Dependency>>() {\n\n         @Override\n         public void onResponseReceived(\n                              final JsArray<Dependency> unsatisfiedDeps)\n         {\n            progress.onCompleted();\n            \n            // if we've satisfied all dependencies then execute the command\n            if (unsatisfiedDeps.length() == 0)\n            {\n               command.execute();\n               return;\n            }\n            \n            // check to see if we can satisfy the version requirement for all\n            // dependencies\n            String unsatisfiedVersions = \"\";\n            for (int i = 0; i < unsatisfiedDeps.length(); i++)\n            {\n               if (!unsatisfiedDeps.get(i).getVersionSatisfied())\n               {\n                  unsatisfiedVersions += unsatisfiedDeps.get(i).getName() + \n                       \" \" + unsatisfiedDeps.get(i).getVersion();\n                  String version = unsatisfiedDeps.get(i).getAvailableVersion();\n                  if (version.isEmpty())\n                     unsatisfiedVersions += \" is not available\\n\";\n                  else\n                     unsatisfiedVersions += \" is required but \" + version + \n                        \" is available\\n\";\n               }\n            }\n            \n            if (!unsatisfiedVersions.isEmpty())\n            {\n               // error if we can't satisfy requirements\n               globalDisplay_.showErrorMessage(userAction, \n                     \"Required package versions could not be found:\\n\\n\" +\n                     unsatisfiedVersions + \"\\n\" +\n                     \"Check that getOption(\\\"repos\\\") refers to a CRAN \" + \n                     \"repository that contains the needed package versions.\");\n            }\n            else\n            {\n               // otherwise ask the user if they want to install the \n               // unsatisifed dependencies\n               Command installCommand = new Command() {\n                  @Override\n                  public void execute()\n                  {\n                     // the incoming JsArray from the server may not serialize\n                     // as expected when this code is executed from a satellite\n                     // (see RemoteServer.sendRequestViaMainWorkbench), so we\n                     // clone it before passing to the dependency installer\n                     JsArray<Dependency> newArray = JsArray.createArray().cast();\n                     newArray.setLength(unsatisfiedDeps.length());\n                     for (int i = 0; i < unsatisfiedDeps.length(); i++)\n                     {\n                        newArray.set(i, unsatisfiedDeps.get(i));\n                     }\n                     installDependencies(\n                           newArray, \n                           silentEmbeddedUpdate, command);\n                  }\n               };\n               \n               if (userPrompt != null)\n               {\n                  userPrompt.execute(describeDepPkgs(unsatisfiedDeps), \n                                     installCommand);\n               }\n               else\n               {\n                  confirmPackageInstallation(userAction, \n                                             unsatisfiedDeps,\n                                             installCommand);                           \n               }\n            }\n         }\n         \n         @Override\n         public void onError(ServerError error)\n         {\n            progress.onError(error.getUserMessage());\n            \n         }\n      });\n      \n   }","id":46680,"modified_method":"private void withDependencies(String progressCaption,\n                                 final String userAction,\n                                 final CommandWith2Args<String,Command> userPrompt,\n                                 Dependency[] dependencies, \n                                 final boolean silentEmbeddedUpdate,\n                                 final CommandWithArg<Boolean> onComplete)\n   {\n      // convert dependencies to JsArray\n      JsArray<Dependency> deps = JsArray.createArray().cast();\n      deps.setLength(dependencies.length);\n      for (int i = 0; i<deps.length(); i++)\n         deps.set(i, dependencies[i]);\n      \n      // create progress indicator\n      final ProgressIndicator progress = new GlobalProgressDelayer(\n            globalDisplay_,\n            250,\n            progressCaption + \"...\").getIndicator();\n      \n      // query for unsatisfied dependencies\n      server_.unsatisfiedDependencies(\n            deps, silentEmbeddedUpdate, \n            new ServerRequestCallback<JsArray<Dependency>>() {\n\n         @Override\n         public void onResponseReceived(\n                              final JsArray<Dependency> unsatisfiedDeps)\n         {\n            progress.onCompleted();\n            \n            // if we've satisfied all dependencies then execute the command\n            if (unsatisfiedDeps.length() == 0)\n            {\n               onComplete.execute(true);\n               return;\n            }\n            \n            // check to see if we can satisfy the version requirement for all\n            // dependencies\n            String unsatisfiedVersions = \"\";\n            for (int i = 0; i < unsatisfiedDeps.length(); i++)\n            {\n               if (!unsatisfiedDeps.get(i).getVersionSatisfied())\n               {\n                  unsatisfiedVersions += unsatisfiedDeps.get(i).getName() + \n                       \" \" + unsatisfiedDeps.get(i).getVersion();\n                  String version = unsatisfiedDeps.get(i).getAvailableVersion();\n                  if (version.isEmpty())\n                     unsatisfiedVersions += \" is not available\\n\";\n                  else\n                     unsatisfiedVersions += \" is required but \" + version + \n                        \" is available\\n\";\n               }\n            }\n            \n            if (!unsatisfiedVersions.isEmpty())\n            {\n               // error if we can't satisfy requirements\n               globalDisplay_.showErrorMessage(userAction, \n                     \"Required package versions could not be found:\\n\\n\" +\n                     unsatisfiedVersions + \"\\n\" +\n                     \"Check that getOption(\\\"repos\\\") refers to a CRAN \" + \n                     \"repository that contains the needed package versions.\");\n               onComplete.execute(false);\n            }\n            else\n            {\n               // otherwise ask the user if they want to install the \n               // unsatisifed dependencies\n               final CommandWithArg<Boolean> installCommand = \n                  new CommandWithArg<Boolean>() {\n                  @Override\n                  public void execute(Boolean confirmed)\n                  {\n                     // bail if \n                     if (!confirmed)\n                     {\n                        onComplete.execute(false);\n                        return;\n                     }\n\n                     // the incoming JsArray from the server may not serialize\n                     // as expected when this code is executed from a satellite\n                     // (see RemoteServer.sendRequestViaMainWorkbench), so we\n                     // clone it before passing to the dependency installer\n                     JsArray<Dependency> newArray = JsArray.createArray().cast();\n                     newArray.setLength(unsatisfiedDeps.length());\n                     for (int i = 0; i < unsatisfiedDeps.length(); i++)\n                     {\n                        newArray.set(i, unsatisfiedDeps.get(i));\n                     }\n                     installDependencies(\n                           newArray, \n                           silentEmbeddedUpdate, \n                           onComplete);\n                  }\n               };\n               \n               if (userPrompt != null)\n               {\n                  userPrompt.execute(describeDepPkgs(unsatisfiedDeps), \n                         new Command()\n                         {\n                           @Override\n                           public void execute()\n                           {\n                              installCommand.execute(true);\n                           }\n                         });\n               }\n               else\n               {\n                  confirmPackageInstallation(userAction, \n                                             unsatisfiedDeps,\n                                             installCommand);\n               }\n            }\n         }\n         \n         @Override\n         public void onError(ServerError error)\n         {\n            progress.onError(error.getUserMessage());\n            onComplete.execute(false);\n         }\n      });\n      \n   }","commit_id":"9e25c0ed5758dcf7b55bf3db13039a292788f739","url":"https://github.com/rstudio/rstudio"},{"original_method":"public void withDependencies(String progressCaption,\n                                CommandWith2Args<String,Command> userPrompt,\n                                Dependency[] dependencies, \n                                boolean silentEmbeddedUpdate,\n                                Command command)\n   {\n      withDependencies(progressCaption,\n                       null,\n                       userPrompt,\n                       dependencies,\n                       silentEmbeddedUpdate,\n                       command);\n   }","id":46681,"modified_method":"public void withDependencies(String progressCaption,\n                                CommandWith2Args<String,Command> userPrompt,\n                                Dependency[] dependencies, \n                                boolean silentEmbeddedUpdate,\n                                CommandWithArg<Boolean> onComplete)\n   {\n      withDependencies(progressCaption,\n                       null,\n                       userPrompt,\n                       dependencies,\n                       silentEmbeddedUpdate,\n                       onComplete);\n   }","commit_id":"9e25c0ed5758dcf7b55bf3db13039a292788f739","url":"https://github.com/rstudio/rstudio"},{"original_method":"public void withRSConnect(String userAction, \n         boolean requiresRmarkdown,\n         CommandWith2Args<String, Command> userPrompt, \n         final Command command)\n   {\n      // build dependency array\n      ArrayList<Dependency> deps = new ArrayList<Dependency>();\n      deps.add(Dependency.cranPackage(\"digest\", \"0.6\"));\n      deps.add(Dependency.cranPackage(\"RCurl\", \"1.95\"));\n      deps.add(Dependency.cranPackage(\"RJSONIO\", \"1.0\"));\n      deps.add(Dependency.cranPackage(\"PKI\", \"0.1\"));\n      deps.add(Dependency.cranPackage(\"rstudioapi\", \"0.2\"));\n      deps.add(Dependency.cranPackage(\"yaml\", \"2.1.5\"));\n      if (requiresRmarkdown)\n         deps.addAll(rmarkdownDependencies());\n      deps.add(Dependency.cranPackage(\"packrat\", \"0.4.6\", true));\n      deps.add(Dependency.embeddedPackage(\"rsconnect\"));\n      \n      withDependencies(\n        \"Publishing\",\n        userAction,\n        userPrompt,\n        deps.toArray(new Dependency[deps.size()]),\n        true, // we want the embedded rsconnect package to be updated if needed\n        command\n      );\n   }","id":46682,"modified_method":"public void withRSConnect(String userAction, \n         boolean requiresRmarkdown,\n         CommandWith2Args<String, Command> userPrompt, \n         final CommandWithArg<Boolean> onCompleted)\n   {\n      // build dependency array\n      ArrayList<Dependency> deps = new ArrayList<Dependency>();\n      deps.add(Dependency.cranPackage(\"digest\", \"0.6\"));\n      deps.add(Dependency.cranPackage(\"RCurl\", \"1.95\"));\n      deps.add(Dependency.cranPackage(\"RJSONIO\", \"1.0\"));\n      deps.add(Dependency.cranPackage(\"PKI\", \"0.1\"));\n      deps.add(Dependency.cranPackage(\"rstudioapi\", \"0.2\"));\n      deps.add(Dependency.cranPackage(\"yaml\", \"2.1.5\"));\n      if (requiresRmarkdown)\n         deps.addAll(rmarkdownDependencies());\n      deps.add(Dependency.cranPackage(\"packrat\", \"0.4.6\", true));\n      deps.add(Dependency.embeddedPackage(\"rsconnect\"));\n      \n      withDependencies(\n        \"Publishing\",\n        userAction,\n        userPrompt,\n        deps.toArray(new Dependency[deps.size()]),\n        true, // we want the embedded rsconnect package to be updated if needed\n        onCompleted\n      );\n   }","commit_id":"9e25c0ed5758dcf7b55bf3db13039a292788f739","url":"https://github.com/rstudio/rstudio"},{"original_method":"public void withDependencies(String progressCaption,\n                                String userAction,\n                                Dependency[] dependencies, \n                                boolean silentEmbeddedUpdate,\n                                final Command command)\n   {\n      withDependencies(progressCaption, \n                       userAction, \n                       null, \n                       dependencies, \n                       silentEmbeddedUpdate,\n                       command);\n   }","id":46683,"modified_method":"public void withDependencies(String progressCaption,\n                                String userAction,\n                                Dependency[] dependencies, \n                                boolean silentEmbeddedUpdate,\n                                final CommandWithArg<Boolean> onComplete)\n   {\n      withDependencies(progressCaption, \n                       userAction, \n                       null, \n                       dependencies, \n                       silentEmbeddedUpdate,\n                       onComplete);\n   }","commit_id":"9e25c0ed5758dcf7b55bf3db13039a292788f739","url":"https://github.com/rstudio/rstudio"},{"original_method":"public void withRMarkdown(String userAction, final Command command)\n   {\n     withDependencies(   \n        \"R Markdown\",\n        userAction, \n        rmarkdownDependenciesArray(), \n        false,\n        command\n     );\n   }","id":46684,"modified_method":"public void withRMarkdown(String userAction, final Command command)\n   {\n     withDependencies(   \n        \"R Markdown\",\n        userAction, \n        rmarkdownDependenciesArray(), \n        false,\n        new CommandWithArg<Boolean>()\n        {\n         @Override\n         public void execute(Boolean succeeded)\n         {\n            if (succeeded)\n               command.execute();\n         }\n        }\n     );\n   }","commit_id":"9e25c0ed5758dcf7b55bf3db13039a292788f739","url":"https://github.com/rstudio/rstudio"},{"original_method":"public void withPackrat(String userAction, final Command command)\n   {\n      withDependencies(\n         \"Packrat\",\n         userAction,\n         new Dependency[] {\n            Dependency.cranPackage(\"packrat\", \"0.4.6\", true)\n         },\n         false,\n         command);\n   }","id":46685,"modified_method":"public void withPackrat(String userAction, final Command command)\n   {\n      withDependencies(\n         \"Packrat\",\n         userAction,\n         new Dependency[] {\n            Dependency.cranPackage(\"packrat\", \"0.4.6\", true)\n         },\n         false,\n         new CommandWithArg<Boolean>()\n         {\n            @Override\n            public void execute(Boolean succeeded)\n            {\n               if (succeeded)\n                  command.execute();\n            }\n         });\n   }","commit_id":"9e25c0ed5758dcf7b55bf3db13039a292788f739","url":"https://github.com/rstudio/rstudio"},{"original_method":"@Inject\n   public PublishingPreferencesPane(GlobalDisplay globalDisplay,\n                                    RSConnectServerOperations server,\n                                    RSAccountConnector connector,\n                                    UIPrefs prefs,\n                                    DependencyManager deps)\n   {\n      reloadRequired_ = false;\n      display_ = globalDisplay;\n      uiPrefs_ = prefs;\n      server_ = server;\n      connector_ = connector;\n      deps_ = deps;\n      \n      VerticalPanel accountPanel = new VerticalPanel();\n      Label accountLabel = headerLabel(\"Publishing Accounts\");\n      HorizontalPanel hpanel = new HorizontalPanel();\n      \n      accountPanel.add(accountLabel);\n      \n      accountList_ = new RSConnectAccountList(server, globalDisplay, true, \n            true);\n      accountList_.setHeight(\"200px\");\n      accountList_.setWidth(\"300px\");\n      accountList_.getElement().getStyle().setMarginBottom(15, Unit.PX);\n      accountList_.getElement().getStyle().setMarginLeft(3, Unit.PX);\n      hpanel.add(accountList_);\n      \n      accountList_.setOnRefreshCompleted(new Operation() \n      {\n         @Override\n         public void execute()\n         {\n            setButtonEnabledState();\n         }\n      });\n      accountList_.addChangeHandler(new ChangeHandler()\n      {\n         @Override\n         public void onChange(ChangeEvent arg0)\n         {\n            setButtonEnabledState();\n         }\n      });\n      \n      VerticalPanel vpanel = new VerticalPanel();\n      hpanel.add(vpanel);\n\n      connectButton_ = new ThemedButton(\"Connect...\");\n      connectButton_.getElement().getStyle().setMarginBottom(5, Unit.PX);\n      connectButton_.setWidth(\"100%\");\n      connectButton_.setWrapperWidth(\"100%\");\n      connectButton_.addClickHandler(new ClickHandler()\n      {\n         @Override\n         public void onClick(ClickEvent event)\n         {\n            onConnect();\n         }\n      });\n      vpanel.add(connectButton_);\n\n      reconnectButton_ = new ThemedButton(\"Reconnect...\");\n      reconnectButton_.getElement().getStyle().setMarginBottom(5, Unit.PX);\n      reconnectButton_.setWidth(\"100%\");\n      reconnectButton_.setWrapperWidth(\"100%\");\n      reconnectButton_.addClickHandler(new ClickHandler()\n      {\n         @Override\n         public void onClick(ClickEvent event)\n         {\n            onReconnect();\n         }\n      });\n      vpanel.add(reconnectButton_);\n      \n      disconnectButton_ = new ThemedButton(\"Disconnect\");\n      disconnectButton_.setWidth(\"100%\");\n      disconnectButton_.setWrapperWidth(\"100%\");\n      disconnectButton_.addClickHandler(new ClickHandler()\n      {\n         @Override\n         public void onClick(ClickEvent event)\n         {\n            onDisconnect();\n         }\n      });\n      vpanel.add(disconnectButton_);\n      \n      setButtonEnabledState();\n\n      accountPanel.add(hpanel);\n      add(accountPanel);\n      \n      // special UI to show when we detect that there are account records but\n      // the RSConnect package isn't installed\n      final VerticalPanel missingPkgPanel = new VerticalPanel();\n      missingPkgPanel.setVisible(false);\n      missingPkgPanel.add(new Label(\n            \"Account records appear to exist, but cannot be viewed because a \" +\n            \"required package is not installed.\"));\n      ThemedButton installPkgs = new ThemedButton(\"Install Missing Packages\");\n      installPkgs.addClickHandler(new ClickHandler()\n      {\n         @Override\n         public void onClick(ClickEvent arg0)\n         {\n            deps_.withRSConnect(\"Viewing publish accounts\", false, null, new Command() \n            {\n               @Override\n               public void execute()\n               {\n                  // refresh the account list to show the accounts\n                  accountList_.refreshAccountList();\n                  \n                  // remove the \"missing package\" UI\n                  missingPkgPanel.setVisible(false);\n               }\n            });\n         }\n      });\n      installPkgs.getElement().getStyle().setMarginLeft(0, Unit.PX);\n      installPkgs.getElement().getStyle().setMarginTop(10, Unit.PX);\n      missingPkgPanel.add(installPkgs);\n      missingPkgPanel.getElement().getStyle().setMarginBottom(20, Unit.PX);\n      add(missingPkgPanel);\n      \n      final CheckBox chkEnableRSConnect = checkboxPref(\"Enable publishing to RStudio Connect (Beta)\",\n            uiPrefs_.enableRStudioConnect());\n      final HorizontalPanel rsconnectPanel = checkBoxWithHelp(chkEnableRSConnect, \n                                                        \"rstudio_connect\");\n      lessSpaced(rsconnectPanel);\n      \n      add(headerLabel(\"Settings\"));\n      CheckBox chkEnablePublishing = checkboxPref(\"Enable publishing documents and apps\", \n            uiPrefs_.showPublishUi());\n      chkEnablePublishing.addValueChangeHandler(new ValueChangeHandler<Boolean>(){\n         @Override\n         public void onValueChange(ValueChangeEvent<Boolean> event)\n         {\n            reloadRequired_ = true;\n            rsconnectPanel.setVisible(\n                  RSConnect.showRSConnectUI() && event.getValue());\n         }\n      });\n      add(chkEnablePublishing);\n      \n      if (RSConnect.showRSConnectUI())\n         add(rsconnectPanel);\n      \n      server_.hasOrphanedAccounts(new ServerRequestCallback<Int>()\n      {\n         @Override\n         public void onResponseReceived(Int numOrphans)\n         {\n            missingPkgPanel.setVisible(numOrphans.getValue() > 0);\n         }\n\n         @Override\n         public void onError(ServerError error)\n         {\n            // if we can't determine whether orphans exist, presume that they\n            // don't (this state is recoverable as we'll attempt to install\n            // rsconnect if necessary and refresh the account list when the user\n            // tries to interact with it)\n         }\n      });\n   }","id":46686,"modified_method":"@Inject\n   public PublishingPreferencesPane(GlobalDisplay globalDisplay,\n                                    RSConnectServerOperations server,\n                                    RSAccountConnector connector,\n                                    UIPrefs prefs,\n                                    DependencyManager deps)\n   {\n      reloadRequired_ = false;\n      display_ = globalDisplay;\n      uiPrefs_ = prefs;\n      server_ = server;\n      connector_ = connector;\n      deps_ = deps;\n      \n      VerticalPanel accountPanel = new VerticalPanel();\n      Label accountLabel = headerLabel(\"Publishing Accounts\");\n      HorizontalPanel hpanel = new HorizontalPanel();\n      \n      accountPanel.add(accountLabel);\n      \n      accountList_ = new RSConnectAccountList(server, globalDisplay, true, \n            true);\n      accountList_.setHeight(\"200px\");\n      accountList_.setWidth(\"300px\");\n      accountList_.getElement().getStyle().setMarginBottom(15, Unit.PX);\n      accountList_.getElement().getStyle().setMarginLeft(3, Unit.PX);\n      hpanel.add(accountList_);\n      \n      accountList_.setOnRefreshCompleted(new Operation() \n      {\n         @Override\n         public void execute()\n         {\n            setButtonEnabledState();\n         }\n      });\n      accountList_.addChangeHandler(new ChangeHandler()\n      {\n         @Override\n         public void onChange(ChangeEvent arg0)\n         {\n            setButtonEnabledState();\n         }\n      });\n      \n      VerticalPanel vpanel = new VerticalPanel();\n      hpanel.add(vpanel);\n\n      connectButton_ = new ThemedButton(\"Connect...\");\n      connectButton_.getElement().getStyle().setMarginBottom(5, Unit.PX);\n      connectButton_.setWidth(\"100%\");\n      connectButton_.setWrapperWidth(\"100%\");\n      connectButton_.addClickHandler(new ClickHandler()\n      {\n         @Override\n         public void onClick(ClickEvent event)\n         {\n            onConnect();\n         }\n      });\n      vpanel.add(connectButton_);\n\n      reconnectButton_ = new ThemedButton(\"Reconnect...\");\n      reconnectButton_.getElement().getStyle().setMarginBottom(5, Unit.PX);\n      reconnectButton_.setWidth(\"100%\");\n      reconnectButton_.setWrapperWidth(\"100%\");\n      reconnectButton_.addClickHandler(new ClickHandler()\n      {\n         @Override\n         public void onClick(ClickEvent event)\n         {\n            onReconnect();\n         }\n      });\n      vpanel.add(reconnectButton_);\n      \n      disconnectButton_ = new ThemedButton(\"Disconnect\");\n      disconnectButton_.setWidth(\"100%\");\n      disconnectButton_.setWrapperWidth(\"100%\");\n      disconnectButton_.addClickHandler(new ClickHandler()\n      {\n         @Override\n         public void onClick(ClickEvent event)\n         {\n            onDisconnect();\n         }\n      });\n      vpanel.add(disconnectButton_);\n      \n      setButtonEnabledState();\n\n      accountPanel.add(hpanel);\n      add(accountPanel);\n      \n      // special UI to show when we detect that there are account records but\n      // the RSConnect package isn't installed\n      final VerticalPanel missingPkgPanel = new VerticalPanel();\n      missingPkgPanel.setVisible(false);\n      missingPkgPanel.add(new Label(\n            \"Account records appear to exist, but cannot be viewed because a \" +\n            \"required package is not installed.\"));\n      ThemedButton installPkgs = new ThemedButton(\"Install Missing Packages\");\n      installPkgs.addClickHandler(new ClickHandler()\n      {\n         @Override\n         public void onClick(ClickEvent arg0)\n         {\n            deps_.withRSConnect(\"Viewing publish accounts\", false, null, \n                                new CommandWithArg<Boolean>() \n            {\n               @Override\n               public void execute(Boolean succeeded)\n               {\n                  if (succeeded)\n                  {\n                     // refresh the account list to show the accounts\n                     accountList_.refreshAccountList();\n                     \n                     // remove the \"missing package\" UI\n                     missingPkgPanel.setVisible(false);\n                  }\n               }\n            });\n         }\n      });\n      installPkgs.getElement().getStyle().setMarginLeft(0, Unit.PX);\n      installPkgs.getElement().getStyle().setMarginTop(10, Unit.PX);\n      missingPkgPanel.add(installPkgs);\n      missingPkgPanel.getElement().getStyle().setMarginBottom(20, Unit.PX);\n      add(missingPkgPanel);\n      \n      final CheckBox chkEnableRSConnect = checkboxPref(\"Enable publishing to RStudio Connect (Beta)\",\n            uiPrefs_.enableRStudioConnect());\n      final HorizontalPanel rsconnectPanel = checkBoxWithHelp(chkEnableRSConnect, \n                                                        \"rstudio_connect\");\n      lessSpaced(rsconnectPanel);\n      \n      add(headerLabel(\"Settings\"));\n      CheckBox chkEnablePublishing = checkboxPref(\"Enable publishing documents and apps\", \n            uiPrefs_.showPublishUi());\n      chkEnablePublishing.addValueChangeHandler(new ValueChangeHandler<Boolean>(){\n         @Override\n         public void onValueChange(ValueChangeEvent<Boolean> event)\n         {\n            reloadRequired_ = true;\n            rsconnectPanel.setVisible(\n                  RSConnect.showRSConnectUI() && event.getValue());\n         }\n      });\n      add(chkEnablePublishing);\n      \n      if (RSConnect.showRSConnectUI())\n         add(rsconnectPanel);\n      \n      server_.hasOrphanedAccounts(new ServerRequestCallback<Int>()\n      {\n         @Override\n         public void onResponseReceived(Int numOrphans)\n         {\n            missingPkgPanel.setVisible(numOrphans.getValue() > 0);\n         }\n\n         @Override\n         public void onError(ServerError error)\n         {\n            // if we can't determine whether orphans exist, presume that they\n            // don't (this state is recoverable as we'll attempt to install\n            // rsconnect if necessary and refresh the account list when the user\n            // tries to interact with it)\n         }\n      });\n   }","commit_id":"9e25c0ed5758dcf7b55bf3db13039a292788f739","url":"https://github.com/rstudio/rstudio"},{"original_method":"private void onConnect()\n   {\n      // if there's already at least one account connected, the requisite\n      // packages must be installed\n      if (accountList_.getAccountCount() > 0)\n      {\n         showAccountWizard();\n      }\n      else\n      {\n         deps_.withRSConnect(\"Connecting a publishing account\", false, null, new Command() \n         {\n            @Override\n            public void execute()\n            {\n               // refresh the account list in case there are accounts already on\n               // the system (e.g. package was installed at one point and some\n               // metadata remains)\n               accountList_.refreshAccountList();\n\n               showAccountWizard();\n            }\n         });\n      }\n   }","id":46687,"modified_method":"private void onConnect()\n   {\n      // if there's already at least one account connected, the requisite\n      // packages must be installed\n      if (accountList_.getAccountCount() > 0)\n      {\n         showAccountWizard();\n      }\n      else\n      {\n         deps_.withRSConnect(\"Connecting a publishing account\", false, null,\n                             new CommandWithArg<Boolean>() \n         {\n            @Override\n            public void execute(Boolean succeeded)\n            {\n               // refresh the account list in case there are accounts already on\n               // the system (e.g. package was installed at one point and some\n               // metadata remains)\n               accountList_.refreshAccountList();\n\n               showAccountWizard();\n            }\n         });\n      }\n   }","commit_id":"9e25c0ed5758dcf7b55bf3db13039a292788f739","url":"https://github.com/rstudio/rstudio"},{"original_method":"private void showAccountTypeWizard(\n         boolean forFirstAccount,\n         boolean withCloudOption,\n         final OperationWithInput<Boolean> onCompleted)\n   {\n      RSConnectAccountWizard wizard = new RSConnectAccountWizard(\n            server_,\n            display_,\n            forFirstAccount,\n            withCloudOption && \n               SessionUtils.showExternalPublishUi(session_, pUiPrefs_.get()),\n            new ProgressOperationWithInput<NewRSConnectAccountResult>()\n      {\n         @Override\n         public void execute(NewRSConnectAccountResult input,\n               final ProgressIndicator indicator)\n         {\n            processDialogResult(input, indicator, onCompleted);\n         }\n      });\n      wizard.showModal();\n      closeAuthWindowWhenFinished(wizard);\n   }","id":46688,"modified_method":"private void showAccountTypeWizard(\n         boolean forFirstAccount,\n         boolean withCloudOption,\n         final OperationWithInput<Boolean> onCompleted)\n   {\n      // ignore if wizard is already up\n      if (showingWizard_)\n         return;\n      \n      RSConnectAccountWizard wizard = new RSConnectAccountWizard(\n            server_,\n            display_,\n            forFirstAccount,\n            withCloudOption && \n               SessionUtils.showExternalPublishUi(session_, pUiPrefs_.get()),\n            new ProgressOperationWithInput<NewRSConnectAccountResult>()\n      {\n         @Override\n         public void execute(NewRSConnectAccountResult input,\n               final ProgressIndicator indicator)\n         {\n            processDialogResult(input, indicator, onCompleted);\n         }\n      });\n      wizard.setGlassEnabled(true);\n      wizard.showModal();\n      \n      // remember whether wizard is showing\n      showingWizard_ = true;\n      wizard.addCloseHandler(new CloseHandler<PopupPanel>()\n      {\n         @Override\n         public void onClose(CloseEvent<PopupPanel> arg0)\n         {\n            showingWizard_ = false;\n         }\n      });\n\n      closeAuthWindowWhenFinished(wizard);\n   }","commit_id":"9e25c0ed5758dcf7b55bf3db13039a292788f739","url":"https://github.com/rstudio/rstudio"},{"original_method":"@Override\n   public void onRSConnectAction(final RSConnectActionEvent event)\n   {\n      // see if we have the requisite R packages\n      dependencyManager_.withRSConnect(\n         \"Publishing content\", \n         event.getContentType() == CONTENT_TYPE_DOCUMENT,\n         null, new Command() {\n            @Override\n            public void execute()\n            {\n               handleRSConnectAction(event); \n            }\n         });  \n   }","id":46689,"modified_method":"@Override\n   public void onRSConnectAction(final RSConnectActionEvent event)\n   {\n      // ignore if we're already waiting for a dependency check \n      if (depsPending_)\n         return;\n      \n      // see if we have the requisite R packages\n      depsPending_ = true; \n      dependencyManager_.withRSConnect(\n         \"Publishing content\", \n         event.getContentType() == CONTENT_TYPE_DOCUMENT,\n         null, new CommandWithArg<Boolean>() {\n            @Override\n            public void execute(Boolean succeeded)\n            {\n               if (succeeded)\n                  handleRSConnectAction(event); \n               \n               depsPending_ = false;\n            }\n         });  \n   }","commit_id":"9e25c0ed5758dcf7b55bf3db13039a292788f739","url":"https://github.com/rstudio/rstudio"},{"original_method":"private void renderThenPublish(final String target,\n         final RSConnectDeploymentRecord previous)\n   {\n      final Command renderCommand = new Command() \n      {\n         @Override\n         public void execute()\n         {\n            publishAfterRmdRender_ = previous;\n            rmdRenderPending_ = true;\n            anyRmdRenderPending_ = true;\n            commands_.knitDocument().execute();\n         }\n      };\n\n      rmdServer_.getRmdOutputInfo(target, \n            new ServerRequestCallback<RmdOutputInfo>()\n      {\n         @Override\n         public void onResponseReceived(RmdOutputInfo response)\n         {\n            if (response.isCurrent())\n            {\n               RenderedDocPreview preview = new RenderedDocPreview(\n                     target, response.getOutputFile(), true);\n               events_.fireEvent(RSConnectActionEvent.DeployDocEvent(\n                     preview, previous));\n            }\n            else\n            {\n               renderCommand.execute();\n            }\n         }\n\n         @Override\n         public void onError(ServerError error)\n         {\n            // if we failed to figure out whether we need to do a re-render, \n            // assume one is necessary\n            Debug.logError(error);\n            renderCommand.execute();\n         }\n      });\n   }","id":46690,"modified_method":"private void renderThenPublish(final String target,\n         final RSConnectDeploymentRecord previous)\n   {\n      // prevent re-entrancy\n      if (rmdInfoPending_)\n         return;\n      \n      final Command renderCommand = new Command() \n      {\n         @Override\n         public void execute()\n         {\n            publishAfterRmdRender_ = previous;\n            rmdRenderPending_ = true;\n            anyRmdRenderPending_ = true;\n            commands_.knitDocument().execute();\n         }\n      };\n      \n      rmdInfoPending_ = true;\n      rmdServer_.getRmdOutputInfo(target, \n            new ServerRequestCallback<RmdOutputInfo>()\n      {\n         @Override\n         public void onResponseReceived(RmdOutputInfo response)\n         {\n            if (response.isCurrent())\n            {\n               RenderedDocPreview preview = new RenderedDocPreview(\n                     target, response.getOutputFile(), true);\n               events_.fireEvent(RSConnectActionEvent.DeployDocEvent(\n                     preview, previous));\n            }\n            else\n            {\n               renderCommand.execute();\n            }\n            rmdInfoPending_ = false;\n         }\n\n         @Override\n         public void onError(ServerError error)\n         {\n            // if we failed to figure out whether we need to do a re-render, \n            // assume one is necessary\n            Debug.logError(error);\n            renderCommand.execute();\n            rmdInfoPending_ = false;\n         }\n      });\n   }","commit_id":"9e25c0ed5758dcf7b55bf3db13039a292788f739","url":"https://github.com/rstudio/rstudio"},{"original_method":"public void withRMarkdown(String userAction, final Command command)\n   {\n     withDependencies(   \n        \"R Markdown\",\n        userAction, \n        new Dependency[] {\n          Dependency.cranPackage(\"knitr\", \"1.6\"),\n          Dependency.cranPackage(\"yaml\", \"2.1.5\"),\n          Dependency.cranPackage(\"htmltools\", \"0.2.4\"),\n          Dependency.cranPackage(\"caTools\", \"1.14\"),\n          Dependency.cranPackage(\"bitops\", \"1.0-6\"),\n          Dependency.embeddedPackage(\"rmarkdown\")\n        }, \n        false,\n        command\n     );\n   }","id":46691,"modified_method":"public void withRMarkdown(String userAction, final Command command)\n   {\n     withDependencies(   \n        \"R Markdown\",\n        userAction, \n        rmarkdownDependenciesArray(), \n        false,\n        command\n     );\n   }","commit_id":"ac3cc19086dcef879d1c87f6c22eacbda97c7304","url":"https://github.com/rstudio/rstudio"},{"original_method":"public void withRSConnect(String userAction, \n         CommandWith2Args<String, Command> userPrompt, \n         final Command command)\n   {\n      withDependencies(\n        \"Publishing\",\n        userAction,\n        userPrompt,\n        new Dependency[] {\n          Dependency.cranPackage(\"digest\", \"0.6\"),\n          Dependency.cranPackage(\"RCurl\", \"1.95\"),\n          Dependency.cranPackage(\"RJSONIO\", \"1.0\"),\n          Dependency.cranPackage(\"PKI\", \"0.1\"),\n          Dependency.cranPackage(\"packrat\", \"0.4.3\"),\n          Dependency.cranPackage(\"rstudioapi\", \"0.2\"),\n          Dependency.cranPackage(\"yaml\", \"2.1.5\"),\n          Dependency.embeddedPackage(\"rsconnect\")\n        },\n        true, // we want the embedded rsconnect package to be updated if needed\n        command\n      );\n   }","id":46692,"modified_method":"public void withRSConnect(String userAction, \n         boolean requiresRmarkdown,\n         CommandWith2Args<String, Command> userPrompt, \n         final Command command)\n   {\n      // build dependency array\n      ArrayList<Dependency> deps = new ArrayList<Dependency>();\n      deps.add(Dependency.cranPackage(\"digest\", \"0.6\"));\n      deps.add(Dependency.cranPackage(\"RCurl\", \"1.95\"));\n      deps.add(Dependency.cranPackage(\"RJSONIO\", \"1.0\"));\n      deps.add(Dependency.cranPackage(\"PKI\", \"0.1\"));\n      deps.add(Dependency.cranPackage(\"packrat\", \"0.4.3\"));\n      deps.add(Dependency.cranPackage(\"rstudioapi\", \"0.2\"));\n      deps.add(Dependency.cranPackage(\"yaml\", \"2.1.5\"));\n      if (requiresRmarkdown)\n         deps.addAll(rmarkdownDependencies());\n      deps.add(Dependency.embeddedPackage(\"rsconnect\"));\n      \n      withDependencies(\n        \"Publishing\",\n        userAction,\n        userPrompt,\n        deps.toArray(new Dependency[deps.size()]),\n        true, // we want the embedded rsconnect package to be updated if needed\n        command\n      );\n   }","commit_id":"ac3cc19086dcef879d1c87f6c22eacbda97c7304","url":"https://github.com/rstudio/rstudio"},{"original_method":"private void onConnect()\n   {\n      // if there's already at least one account connected, the requisite\n      // packages must be installed\n      if (accountList_.getAccountCount() > 0)\n      {\n         showAccountWizard();\n      }\n      else\n      {\n         deps_.withRSConnect(\"Connecting a publishing account\", null, new Command() \n         {\n            @Override\n            public void execute()\n            {\n               // refresh the account list in case there are accounts already on\n               // the system (e.g. package was installed at one point and some\n               // metadata remains)\n               accountList_.refreshAccountList();\n\n               showAccountWizard();\n            }\n         });\n      }\n   }","id":46693,"modified_method":"private void onConnect()\n   {\n      // if there's already at least one account connected, the requisite\n      // packages must be installed\n      if (accountList_.getAccountCount() > 0)\n      {\n         showAccountWizard();\n      }\n      else\n      {\n         deps_.withRSConnect(\"Connecting a publishing account\", false, null, new Command() \n         {\n            @Override\n            public void execute()\n            {\n               // refresh the account list in case there are accounts already on\n               // the system (e.g. package was installed at one point and some\n               // metadata remains)\n               accountList_.refreshAccountList();\n\n               showAccountWizard();\n            }\n         });\n      }\n   }","commit_id":"ac3cc19086dcef879d1c87f6c22eacbda97c7304","url":"https://github.com/rstudio/rstudio"},{"original_method":"@Inject\n   public PublishingPreferencesPane(GlobalDisplay globalDisplay,\n                                    RSConnectServerOperations server,\n                                    RSAccountConnector connector,\n                                    UIPrefs prefs,\n                                    DependencyManager deps)\n   {\n      reloadRequired_ = false;\n      display_ = globalDisplay;\n      uiPrefs_ = prefs;\n      server_ = server;\n      connector_ = connector;\n      deps_ = deps;\n      \n      VerticalPanel accountPanel = new VerticalPanel();\n      Label accountLabel = headerLabel(\"Publishing Accounts\");\n      HorizontalPanel hpanel = new HorizontalPanel();\n      \n      accountPanel.add(accountLabel);\n      \n      accountList_ = new RSConnectAccountList(server, globalDisplay, true, \n            true);\n      accountList_.setHeight(\"200px\");\n      accountList_.setWidth(\"300px\");\n      accountList_.getElement().getStyle().setMarginBottom(15, Unit.PX);\n      accountList_.getElement().getStyle().setMarginLeft(3, Unit.PX);\n      hpanel.add(accountList_);\n      \n      accountList_.setOnRefreshCompleted(new Operation() \n      {\n         @Override\n         public void execute()\n         {\n            setButtonEnabledState();\n         }\n      });\n      accountList_.addChangeHandler(new ChangeHandler()\n      {\n         @Override\n         public void onChange(ChangeEvent arg0)\n         {\n            setButtonEnabledState();\n         }\n      });\n      \n      VerticalPanel vpanel = new VerticalPanel();\n      hpanel.add(vpanel);\n\n      connectButton_ = new ThemedButton(\"Connect...\");\n      connectButton_.getElement().getStyle().setMarginBottom(5, Unit.PX);\n      connectButton_.setWidth(\"100%\");\n      connectButton_.setWrapperWidth(\"100%\");\n      connectButton_.addClickHandler(new ClickHandler()\n      {\n         @Override\n         public void onClick(ClickEvent event)\n         {\n            onConnect();\n         }\n      });\n      vpanel.add(connectButton_);\n\n      reconnectButton_ = new ThemedButton(\"Reconnect...\");\n      reconnectButton_.getElement().getStyle().setMarginBottom(5, Unit.PX);\n      reconnectButton_.setWidth(\"100%\");\n      reconnectButton_.setWrapperWidth(\"100%\");\n      reconnectButton_.addClickHandler(new ClickHandler()\n      {\n         @Override\n         public void onClick(ClickEvent event)\n         {\n            onReconnect();\n         }\n      });\n      vpanel.add(reconnectButton_);\n      \n      disconnectButton_ = new ThemedButton(\"Disconnect\");\n      disconnectButton_.setWidth(\"100%\");\n      disconnectButton_.setWrapperWidth(\"100%\");\n      disconnectButton_.addClickHandler(new ClickHandler()\n      {\n         @Override\n         public void onClick(ClickEvent event)\n         {\n            onDisconnect();\n         }\n      });\n      vpanel.add(disconnectButton_);\n      \n      setButtonEnabledState();\n\n      accountPanel.add(hpanel);\n      add(accountPanel);\n      \n      // special UI to show when we detect that there are account records but\n      // the RSConnect package isn't installed\n      final VerticalPanel missingPkgPanel = new VerticalPanel();\n      missingPkgPanel.setVisible(false);\n      missingPkgPanel.add(new Label(\n            \"Account records appear to exist, but cannot be viewed because a \" +\n            \"required package is not installed.\"));\n      ThemedButton installPkgs = new ThemedButton(\"Install Missing Packages\");\n      installPkgs.addClickHandler(new ClickHandler()\n      {\n         @Override\n         public void onClick(ClickEvent arg0)\n         {\n            deps_.withRSConnect(\"Viewing publish accounts\", null, new Command() \n            {\n               @Override\n               public void execute()\n               {\n                  // refresh the account list to show the accounts\n                  accountList_.refreshAccountList();\n                  \n                  // remove the \"missing package\" UI\n                  missingPkgPanel.setVisible(false);\n               }\n            });\n         }\n      });\n      installPkgs.getElement().getStyle().setMarginLeft(0, Unit.PX);\n      installPkgs.getElement().getStyle().setMarginTop(10, Unit.PX);\n      missingPkgPanel.add(installPkgs);\n      missingPkgPanel.getElement().getStyle().setMarginBottom(20, Unit.PX);\n      add(missingPkgPanel);\n      \n      add(headerLabel(\"Settings\"));\n      CheckBox chkEnablePublishing = checkboxPref(\"Enable publishing apps and documents\", \n            uiPrefs_.showPublishUi());\n      chkEnablePublishing.addValueChangeHandler(new ValueChangeHandler<Boolean>(){\n         @Override\n         public void onValueChange(ValueChangeEvent<Boolean> event)\n         {\n            reloadRequired_ = true;\n         }\n      });\n      add(chkEnablePublishing);\n      \n      server_.hasOrphanedAccounts(new ServerRequestCallback<Int>()\n      {\n         @Override\n         public void onResponseReceived(Int numOrphans)\n         {\n            missingPkgPanel.setVisible(numOrphans.getValue() > 0);\n         }\n\n         @Override\n         public void onError(ServerError error)\n         {\n            // if we can't determine whether orphans exist, presume that they\n            // don't (this state is recoverable as we'll attempt to install\n            // rsconnect if necessary and refresh the account list when the user\n            // tries to interact with it)\n         }\n      });\n   }","id":46694,"modified_method":"@Inject\n   public PublishingPreferencesPane(GlobalDisplay globalDisplay,\n                                    RSConnectServerOperations server,\n                                    RSAccountConnector connector,\n                                    UIPrefs prefs,\n                                    DependencyManager deps)\n   {\n      reloadRequired_ = false;\n      display_ = globalDisplay;\n      uiPrefs_ = prefs;\n      server_ = server;\n      connector_ = connector;\n      deps_ = deps;\n      \n      VerticalPanel accountPanel = new VerticalPanel();\n      Label accountLabel = headerLabel(\"Publishing Accounts\");\n      HorizontalPanel hpanel = new HorizontalPanel();\n      \n      accountPanel.add(accountLabel);\n      \n      accountList_ = new RSConnectAccountList(server, globalDisplay, true, \n            true);\n      accountList_.setHeight(\"200px\");\n      accountList_.setWidth(\"300px\");\n      accountList_.getElement().getStyle().setMarginBottom(15, Unit.PX);\n      accountList_.getElement().getStyle().setMarginLeft(3, Unit.PX);\n      hpanel.add(accountList_);\n      \n      accountList_.setOnRefreshCompleted(new Operation() \n      {\n         @Override\n         public void execute()\n         {\n            setButtonEnabledState();\n         }\n      });\n      accountList_.addChangeHandler(new ChangeHandler()\n      {\n         @Override\n         public void onChange(ChangeEvent arg0)\n         {\n            setButtonEnabledState();\n         }\n      });\n      \n      VerticalPanel vpanel = new VerticalPanel();\n      hpanel.add(vpanel);\n\n      connectButton_ = new ThemedButton(\"Connect...\");\n      connectButton_.getElement().getStyle().setMarginBottom(5, Unit.PX);\n      connectButton_.setWidth(\"100%\");\n      connectButton_.setWrapperWidth(\"100%\");\n      connectButton_.addClickHandler(new ClickHandler()\n      {\n         @Override\n         public void onClick(ClickEvent event)\n         {\n            onConnect();\n         }\n      });\n      vpanel.add(connectButton_);\n\n      reconnectButton_ = new ThemedButton(\"Reconnect...\");\n      reconnectButton_.getElement().getStyle().setMarginBottom(5, Unit.PX);\n      reconnectButton_.setWidth(\"100%\");\n      reconnectButton_.setWrapperWidth(\"100%\");\n      reconnectButton_.addClickHandler(new ClickHandler()\n      {\n         @Override\n         public void onClick(ClickEvent event)\n         {\n            onReconnect();\n         }\n      });\n      vpanel.add(reconnectButton_);\n      \n      disconnectButton_ = new ThemedButton(\"Disconnect\");\n      disconnectButton_.setWidth(\"100%\");\n      disconnectButton_.setWrapperWidth(\"100%\");\n      disconnectButton_.addClickHandler(new ClickHandler()\n      {\n         @Override\n         public void onClick(ClickEvent event)\n         {\n            onDisconnect();\n         }\n      });\n      vpanel.add(disconnectButton_);\n      \n      setButtonEnabledState();\n\n      accountPanel.add(hpanel);\n      add(accountPanel);\n      \n      // special UI to show when we detect that there are account records but\n      // the RSConnect package isn't installed\n      final VerticalPanel missingPkgPanel = new VerticalPanel();\n      missingPkgPanel.setVisible(false);\n      missingPkgPanel.add(new Label(\n            \"Account records appear to exist, but cannot be viewed because a \" +\n            \"required package is not installed.\"));\n      ThemedButton installPkgs = new ThemedButton(\"Install Missing Packages\");\n      installPkgs.addClickHandler(new ClickHandler()\n      {\n         @Override\n         public void onClick(ClickEvent arg0)\n         {\n            deps_.withRSConnect(\"Viewing publish accounts\", false, null, new Command() \n            {\n               @Override\n               public void execute()\n               {\n                  // refresh the account list to show the accounts\n                  accountList_.refreshAccountList();\n                  \n                  // remove the \"missing package\" UI\n                  missingPkgPanel.setVisible(false);\n               }\n            });\n         }\n      });\n      installPkgs.getElement().getStyle().setMarginLeft(0, Unit.PX);\n      installPkgs.getElement().getStyle().setMarginTop(10, Unit.PX);\n      missingPkgPanel.add(installPkgs);\n      missingPkgPanel.getElement().getStyle().setMarginBottom(20, Unit.PX);\n      add(missingPkgPanel);\n      \n      add(headerLabel(\"Settings\"));\n      CheckBox chkEnablePublishing = checkboxPref(\"Enable publishing apps and documents\", \n            uiPrefs_.showPublishUi());\n      chkEnablePublishing.addValueChangeHandler(new ValueChangeHandler<Boolean>(){\n         @Override\n         public void onValueChange(ValueChangeEvent<Boolean> event)\n         {\n            reloadRequired_ = true;\n         }\n      });\n      add(chkEnablePublishing);\n      \n      server_.hasOrphanedAccounts(new ServerRequestCallback<Int>()\n      {\n         @Override\n         public void onResponseReceived(Int numOrphans)\n         {\n            missingPkgPanel.setVisible(numOrphans.getValue() > 0);\n         }\n\n         @Override\n         public void onError(ServerError error)\n         {\n            // if we can't determine whether orphans exist, presume that they\n            // don't (this state is recoverable as we'll attempt to install\n            // rsconnect if necessary and refresh the account list when the user\n            // tries to interact with it)\n         }\n      });\n   }","commit_id":"ac3cc19086dcef879d1c87f6c22eacbda97c7304","url":"https://github.com/rstudio/rstudio"},{"original_method":"@Override\n   public void onRSConnectAction(final RSConnectActionEvent event)\n   {\n      // see if we have the requisite R packages\n      dependencyManager_.withRSConnect(\n         \"Publishing content\", null, new Command() {\n            @Override\n            public void execute()\n            {\n               handleRSConnectAction(event); \n            }\n         });  \n   }","id":46695,"modified_method":"@Override\n   public void onRSConnectAction(final RSConnectActionEvent event)\n   {\n      // see if we have the requisite R packages\n      dependencyManager_.withRSConnect(\n         \"Publishing content\", \n         event.getContentType() == CONTENT_TYPE_DOCUMENT,\n         null, new Command() {\n            @Override\n            public void execute()\n            {\n               handleRSConnectAction(event); \n            }\n         });  \n   }","commit_id":"ac3cc19086dcef879d1c87f6c22eacbda97c7304","url":"https://github.com/rstudio/rstudio"},{"original_method":"protected void exportMessageFlag(\n\t\t\tPortletDataContext context, Element messageFlagsEl,\n\t\t\tMBMessageFlag messageFlag)\n\t\tthrows SystemException {\n\n\t\tString path = getMessageFlagPath(context, messageFlag);\n\n\t\tif (!context.isPathNotProcessed(path)) {\n\t\t\treturn;\n\t\t}\n\n\t\tElement messageFlagEl = messageFlagsEl.addElement(\"message-flag\");\n\n\t\tmessageFlagEl.addAttribute(\"path\", path);\n\n\t\tmessageFlag.setUserUuid(messageFlag.getUserUuid());\n\n\t\tcontext.addZipEntry(path, messageFlag);\n\t}","id":46696,"modified_method":"protected void exportMessageFlag(\n\t\t\tPortletDataContext context, Element messageFlagsElement,\n\t\t\tMBMessageFlag messageFlag)\n\t\tthrows Exception {\n\n\t\tString path = getMessageFlagPath(context, messageFlag);\n\n\t\tif (!context.isPathNotProcessed(path)) {\n\t\t\treturn;\n\t\t}\n\n\t\tElement messageFlagElement = messageFlagsElement.addElement(\n\t\t\t\"message-flag\");\n\n\t\tmessageFlagElement.addAttribute(\"path\", path);\n\n\t\tmessageFlag.setUserUuid(messageFlag.getUserUuid());\n\n\t\tcontext.addZipEntry(path, messageFlag);\n\t}","commit_id":"630a6377399cd47878a228d387afd6c33a897140","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void exportUserBan(\n\t\t\tPortletDataContext context, Element userBansEl, MBBan ban)\n\t\tthrows SystemException {\n\n\t\tif (!context.isWithinDateRange(ban.getModifiedDate())) {\n\t\t\treturn;\n\t\t}\n\n\t\tString path = getUserBanPath(context, ban);\n\n\t\tif (!context.isPathNotProcessed(path)) {\n\t\t\treturn;\n\t\t}\n\n\t\tElement userBanEl = userBansEl.addElement(\"user-ban\");\n\n\t\tuserBanEl.addAttribute(\"path\", path);\n\n\t\tban.setBanUserUuid(ban.getBanUserUuid());\n\t\tban.setUserUuid(ban.getUserUuid());\n\n\t\tcontext.addZipEntry(path, ban);\n\t}","id":46697,"modified_method":"protected void exportBan(\n\t\t\tPortletDataContext context, Element userBansElement, MBBan ban)\n\t\tthrows Exception {\n\n\t\tif (!context.isWithinDateRange(ban.getModifiedDate())) {\n\t\t\treturn;\n\t\t}\n\n\t\tString path = getUserBanPath(context, ban);\n\n\t\tif (!context.isPathNotProcessed(path)) {\n\t\t\treturn;\n\t\t}\n\n\t\tElement userBanElement = userBansElement.addElement(\"user-ban\");\n\n\t\tuserBanElement.addAttribute(\"path\", path);\n\n\t\tban.setBanUserUuid(ban.getBanUserUuid());\n\t\tban.setUserUuid(ban.getUserUuid());\n\n\t\tcontext.addZipEntry(path, ban);\n\t}","commit_id":"630a6377399cd47878a228d387afd6c33a897140","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public PortletPreferences deleteData(\n\t\t\tPortletDataContext context, String portletId,\n\t\t\tPortletPreferences preferences)\n\t\tthrows PortletDataException {\n\n\t\ttry {\n\t\t\tif (!context.addPrimaryKey(\n\t\t\t\t\tMBPortletDataHandlerImpl.class, \"deleteData\")) {\n\n\t\t\t\tMBCategoryLocalServiceUtil.deleteCategories(\n\t\t\t\t\tcontext.getScopeGroupId());\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new PortletDataException(e);\n\t\t}\n\t}","id":46698,"modified_method":"protected PortletPreferences doDeleteData(\n\t\t\tPortletDataContext context, String portletId,\n\t\t\tPortletPreferences preferences)\n\t\tthrows Exception {\n\n\t\tif (!context.addPrimaryKey(\n\t\t\t\tMBPortletDataHandlerImpl.class, \"deleteData\")) {\n\n\t\t\tMBCategoryLocalServiceUtil.deleteCategories(\n\t\t\t\tcontext.getScopeGroupId());\n\t\t}\n\n\t\treturn null;\n\t}","commit_id":"630a6377399cd47878a228d387afd6c33a897140","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void importFlag(\n\t\t\tPortletDataContext context, Map<Long, Long> messagePKs,\n\t\t\tMBMessageFlag flag)\n\t\tthrows Exception {\n\n\t\tlong userId = context.getUserId(flag.getUserUuid());\n\t\tlong messageId = MapUtil.getLong(\n\t\t\tmessagePKs, flag.getMessageId(), flag.getMessageId());\n\n\t\ttry {\n\t\t\tMBMessage message = MBMessageUtil.findByPrimaryKey(messageId);\n\n\t\t\tMBThread thread = message.getThread();\n\n\t\t\tMBMessageFlagLocalServiceUtil.addReadFlags(userId, thread);\n\t\t}\n\t\tcatch (NoSuchMessageException nsme) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find the message for flag \" +\n\t\t\t\t\tflag.getMessageFlagId());\n\t\t}\n\t}","id":46699,"modified_method":"protected void importMessageFlag(\n\t\t\tPortletDataContext context, MBMessageFlag flag)\n\t\tthrows Exception {\n\n\t\tlong userId = context.getUserId(flag.getUserUuid());\n\n\t\tMap<Long, Long> messagePKs =\n\t\t\t(Map<Long, Long>)context.getNewPrimaryKeysMap(MBMessage.class);\n\n\t\tlong messageId = MapUtil.getLong(\n\t\t\tmessagePKs, flag.getMessageId(), flag.getMessageId());\n\n\t\tMBMessage message = MBMessageUtil.findByPrimaryKey(messageId);\n\n\t\tMBThread thread = message.getThread();\n\n\t\tMBMessageFlagLocalServiceUtil.addReadFlags(userId, thread);\n\t}","commit_id":"630a6377399cd47878a228d387afd6c33a897140","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public PortletDataHandlerControl[] getImportControls() {\n\t\treturn new PortletDataHandlerControl[] {\n\t\t\t_categoriesAndMessages, _attachments, _userBans, _flags, _ratings,\n\t\t\t_tags\n\t\t};\n\t}","id":46700,"modified_method":"public PortletDataHandlerControl[] getImportControls() {\n\t\treturn new PortletDataHandlerControl[] {\n\t\t\t_categoriesAndMessages, _attachments, _messageFlags, _ratings,\n\t\t\t_tags, _userBans\n\t\t};\n\t}","commit_id":"630a6377399cd47878a228d387afd6c33a897140","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void exportMessage(\n\t\t\tPortletDataContext context, Element categoriesEl,\n\t\t\tElement messagesEl, Element messageFlagsEl, MBMessage message)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (!context.isWithinDateRange(message.getModifiedDate())) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (message.getStatus() != WorkflowConstants.STATUS_APPROVED) {\n\t\t\treturn;\n\t\t}\n\n\t\texportParentCategory(context, categoriesEl, message.getCategoryId());\n\n\t\tString path = getMessagePath(context, message);\n\n\t\tif (context.isPathNotProcessed(path)) {\n\t\t\tElement messageEl = messagesEl.addElement(\"message\");\n\n\t\t\tmessageEl.addAttribute(\"path\", path);\n\n\t\t\tmessage.setUserUuid(message.getUserUuid());\n\t\t\tmessage.setPriority(message.getPriority());\n\n\t\t\tcontext.addPermissions(MBMessage.class, message.getMessageId());\n\n\t\t\tcontext.addLocks(\n\t\t\t\tMBThread.class, String.valueOf(message.getThreadId()));\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"ratings\")) {\n\t\t\t\tcontext.addRatingsEntries(\n\t\t\t\t\tMBMessage.class, message.getMessageId());\n\t\t\t}\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"tags\")) {\n\t\t\t\tcontext.addAssetTags(MBMessage.class, message.getMessageId());\n\t\t\t}\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"attachments\") &&\n\t\t\t\tmessage.isAttachments()) {\n\n\t\t\t\tfor (String attachment : message.getAttachmentsFiles()) {\n\t\t\t\t\tint pos = attachment.lastIndexOf(StringPool.FORWARD_SLASH);\n\n\t\t\t\t\tString name = attachment.substring(pos + 1);\n\t\t\t\t\tString binPath = getMessageAttachementBinPath(\n\t\t\t\t\t\tcontext, message, name);\n\n\t\t\t\t\tElement attachmentEl = messageEl.addElement(\"attachment\");\n\n\t\t\t\t\tattachmentEl.addAttribute(\"name\", name);\n\t\t\t\t\tattachmentEl.addAttribute(\"bin-path\", binPath);\n\n\t\t\t\t\tbyte[] bytes = DLServiceUtil.getFile(\n\t\t\t\t\t\tcontext.getCompanyId(), CompanyConstants.SYSTEM,\n\t\t\t\t\t\tattachment);\n\n\t\t\t\t\tcontext.addZipEntry(binPath, bytes);\n\t\t\t\t}\n\n\t\t\t\tmessage.setAttachmentsDir(message.getAttachmentsDir());\n\t\t\t}\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"flags\")) {\n\t\t\t\tList<MBMessageFlag> messageFlags =\n\t\t\t\t\tMBMessageFlagUtil.findByMessageId(\n\t\t\t\t\t\tmessage.getMessageId());\n\n\t\t\t\tfor (MBMessageFlag messageFlag : messageFlags) {\n\t\t\t\t\texportMessageFlag(context, messageFlagsEl, messageFlag);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcontext.addZipEntry(path, message);\n\t\t}\n\t}","id":46701,"modified_method":"protected void exportMessage(\n\t\t\tPortletDataContext context, Element categoriesElement,\n\t\t\tElement messagesElement, Element messageFlagsElement,\n\t\t\tMBMessage message)\n\t\tthrows Exception {\n\n\t\tif (!context.isWithinDateRange(message.getModifiedDate())) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (message.getStatus() != WorkflowConstants.STATUS_APPROVED) {\n\t\t\treturn;\n\t\t}\n\n\t\texportParentCategory(\n\t\t\tcontext, categoriesElement, message.getCategoryId());\n\n\t\tString path = getMessagePath(context, message);\n\n\t\tif (context.isPathNotProcessed(path)) {\n\t\t\tElement messageElement = messagesElement.addElement(\"message\");\n\n\t\t\tmessageElement.addAttribute(\"path\", path);\n\n\t\t\tmessage.setUserUuid(message.getUserUuid());\n\t\t\tmessage.setPriority(message.getPriority());\n\n\t\t\tcontext.addPermissions(MBMessage.class, message.getMessageId());\n\n\t\t\tcontext.addLocks(\n\t\t\t\tMBThread.class, String.valueOf(message.getThreadId()));\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"ratings\")) {\n\t\t\t\tcontext.addRatingsEntries(\n\t\t\t\t\tMBMessage.class, message.getMessageId());\n\t\t\t}\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"tags\")) {\n\t\t\t\tcontext.addAssetTags(MBMessage.class, message.getMessageId());\n\t\t\t}\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"attachments\") &&\n\t\t\t\tmessage.isAttachments()) {\n\n\t\t\t\tfor (String attachment : message.getAttachmentsFiles()) {\n\t\t\t\t\tint pos = attachment.lastIndexOf(StringPool.FORWARD_SLASH);\n\n\t\t\t\t\tString name = attachment.substring(pos + 1);\n\t\t\t\t\tString binPath = getMessageAttachementBinPath(\n\t\t\t\t\t\tcontext, message, name);\n\n\t\t\t\t\tElement attachmentElement = messageElement.addElement(\n\t\t\t\t\t\t\"attachment\");\n\n\t\t\t\t\tattachmentElement.addAttribute(\"name\", name);\n\t\t\t\t\tattachmentElement.addAttribute(\"bin-path\", binPath);\n\n\t\t\t\t\tbyte[] bytes = DLServiceUtil.getFile(\n\t\t\t\t\t\tcontext.getCompanyId(), CompanyConstants.SYSTEM,\n\t\t\t\t\t\tattachment);\n\n\t\t\t\t\tcontext.addZipEntry(binPath, bytes);\n\t\t\t\t}\n\n\t\t\t\tmessage.setAttachmentsDir(message.getAttachmentsDir());\n\t\t\t}\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"message-flags\")) {\n\t\t\t\tList<MBMessageFlag> messageFlags =\n\t\t\t\t\tMBMessageFlagUtil.findByMessageId(message.getMessageId());\n\n\t\t\t\tfor (MBMessageFlag messageFlag : messageFlags) {\n\t\t\t\t\texportMessageFlag(\n\t\t\t\t\t\tcontext, messageFlagsElement, messageFlag);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcontext.addZipEntry(path, message);\n\t\t}\n\t}","commit_id":"630a6377399cd47878a228d387afd6c33a897140","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void importMessage(\n\t\t\tPortletDataContext context, Map<Long, Long> categoryPKs,\n\t\t\tMap<Long, Long> threadPKs, Map<Long, Long> messagePKs,\n\t\t\tElement messageEl, MBMessage message)\n\t\tthrows Exception {\n\n\t\tlong userId = context.getUserId(message.getUserUuid());\n\t\tString userName = message.getUserName();\n\t\tlong categoryId = MapUtil.getLong(\n\t\t\tcategoryPKs, message.getCategoryId(), message.getCategoryId());\n\t\tlong threadId = MapUtil.getLong(\n\t\t\tthreadPKs, message.getThreadId(), message.getThreadId());\n\t\tlong parentMessageId = MapUtil.getLong(\n\t\t\tmessagePKs, message.getParentMessageId(),\n\t\t\tmessage.getParentMessageId());\n\n\t\tList<ObjectValuePair<String, byte[]>> files =\n\t\t\tnew ArrayList<ObjectValuePair<String, byte[]>>();\n\t\tList<String> existingFiles = new ArrayList<String>();\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"attachments\") &&\n\t\t\tmessage.isAttachments()) {\n\n\t\t\tList<Element> attachmentEls = messageEl.elements(\"attachment\");\n\n\t\t\tfor (Element attachmentEl : attachmentEls) {\n\t\t\t\tString name = attachmentEl.attributeValue(\"name\");\n\t\t\t\tString binPath = attachmentEl.attributeValue(\"bin-path\");\n\n\t\t\t\tbyte[] bytes = context.getZipEntryAsByteArray(binPath);\n\n\t\t\t\tfiles.add(new ObjectValuePair<String, byte[]>(name, bytes));\n\t\t\t}\n\n\t\t\tif (files.size() <= 0) {\n\t\t\t\t_log.error(\n\t\t\t\t\t\"Could not find attachments for message \" +\n\t\t\t\t\t\tmessage.getMessageId());\n\t\t\t}\n\t\t}\n\n\t\tString[] assetTagNames = null;\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"tags\")) {\n\t\t\tassetTagNames = context.getAssetTagNames(\n\t\t\t\tMBMessage.class, message.getMessageId());\n\t\t}\n\n\t\tServiceContext serviceContext = new ServiceContext();\n\n\t\tserviceContext.setAddCommunityPermissions(true);\n\t\tserviceContext.setAddGuestPermissions(true);\n\t\tserviceContext.setAssetTagNames(assetTagNames);\n\t\tserviceContext.setCreateDate(message.getCreateDate());\n\t\tserviceContext.setModifiedDate(message.getModifiedDate());\n\t\tserviceContext.setScopeGroupId(context.getScopeGroupId());\n\n\t\tif (message.getStatus() != WorkflowConstants.STATUS_APPROVED) {\n\t\t\tserviceContext.setWorkflowAction(\n\t\t\t\tWorkflowConstants.ACTION_SAVE_DRAFT);\n\t\t}\n\n\t\tif ((categoryId != MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) &&\n\t\t\t(categoryId != MBCategoryConstants.DISCUSSION_CATEGORY_ID) &&\n\t\t\t(categoryId == message.getCategoryId())) {\n\n\t\t\tString path = getImportCategoryPath(context, categoryId);\n\n\t\t\tMBCategory category = (MBCategory)context.getZipEntryAsObject(path);\n\n\t\t\timportCategory(context, categoryPKs, category);\n\n\t\t\tcategoryId = MapUtil.getLong(\n\t\t\t\tcategoryPKs, message.getCategoryId(), message.getCategoryId());\n\t\t}\n\n\t\tMBMessage importedMessage = null;\n\n\t\ttry {\n\t\t\tif ((categoryId !=\n\t\t\t\t\tMBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) &&\n\t\t\t\t(categoryId != MBCategoryConstants.DISCUSSION_CATEGORY_ID)) {\n\n\t\t\t\tMBCategoryUtil.findByPrimaryKey(categoryId);\n\t\t\t}\n\n\t\t\tif (parentMessageId !=\n\t\t\t\t\tMBMessageConstants.DEFAULT_PARENT_MESSAGE_ID) {\n\n\t\t\t\tMBMessageUtil.findByPrimaryKey(parentMessageId);\n\t\t\t\tMBThreadUtil.findByPrimaryKey(threadId);\n\t\t\t}\n\n\t\t\tif (context.isDataStrategyMirror()) {\n\t\t\t\tMBMessage existingMessage = MBMessageUtil.fetchByUUID_G(\n\t\t\t\t\tmessage.getUuid(), context.getScopeGroupId());\n\n\t\t\t\tif (existingMessage == null) {\n\t\t\t\t\tserviceContext.setUuid(message.getUuid());\n\n\t\t\t\t\timportedMessage = MBMessageLocalServiceUtil.addMessage(\n\t\t\t\t\t\tuserId, userName, context.getScopeGroupId(), categoryId,\n\t\t\t\t\t\tthreadId, parentMessageId, message.getSubject(),\n\t\t\t\t\t\tmessage.getBody(), files, message.getAnonymous(),\n\t\t\t\t\t\tmessage.getPriority(), message.getAllowPingbacks(),\n\t\t\t\t\t\tserviceContext);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\timportedMessage = MBMessageLocalServiceUtil.updateMessage(\n\t\t\t\t\t\tuserId, existingMessage.getMessageId(),\n\t\t\t\t\t\tmessage.getSubject(), message.getBody(), files,\n\t\t\t\t\t\texistingFiles, message.getPriority(),\n\t\t\t\t\t\tmessage.getAllowPingbacks(), serviceContext);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedMessage = MBMessageLocalServiceUtil.addMessage(\n\t\t\t\t\tuserId, userName, context.getScopeGroupId(), categoryId,\n\t\t\t\t\tthreadId, parentMessageId, message.getSubject(),\n\t\t\t\t\tmessage.getBody(), files, message.getAnonymous(),\n\t\t\t\t\tmessage.getPriority(), message.getAllowPingbacks(),\n\t\t\t\t\tserviceContext);\n\t\t\t}\n\n\t\t\tthreadPKs.put(message.getThreadId(), importedMessage.getThreadId());\n\t\t\tmessagePKs.put(\n\t\t\t\tmessage.getMessageId(), importedMessage.getMessageId());\n\n\t\t\tcontext.importLocks(\n\t\t\t\tMBThread.class, String.valueOf(message.getThreadId()),\n\t\t\t\tString.valueOf(importedMessage.getThreadId()));\n\n\t\t\tcontext.importPermissions(\n\t\t\t\tMBMessage.class, message.getMessageId(),\n\t\t\t\timportedMessage.getMessageId());\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"ratings\")) {\n\t\t\t\tcontext.importRatingsEntries(\n\t\t\t\t\tMBMessage.class, message.getMessageId(),\n\t\t\t\t\timportedMessage.getMessageId());\n\t\t\t}\n\t\t}\n\t\tcatch (NoSuchCategoryException nsce) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find the parent category for message \" +\n\t\t\t\t\tmessage.getMessageId());\n\t\t}\n\t\tcatch (NoSuchMessageException nsme) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find the parent message for message \" +\n\t\t\t\t\tmessage.getMessageId());\n\t\t}\n\t\tcatch (NoSuchThreadException nste) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find the thread for message \" +\n\t\t\t\t\tmessage.getMessageId());\n\t\t}\n\t}","id":46702,"modified_method":"protected void importMessage(\n\t\t\tPortletDataContext context, Element messageElement,\n\t\t\tMBMessage message)\n\t\tthrows Exception {\n\n\t\tlong userId = context.getUserId(message.getUserUuid());\n\t\tString userName = message.getUserName();\n\n\t\tMap<Long, Long> categoryPKs =\n\t\t\t(Map<Long, Long>)context.getNewPrimaryKeysMap(MBCategory.class);\n\n\t\tlong categoryId = MapUtil.getLong(\n\t\t\tcategoryPKs, message.getCategoryId(), message.getCategoryId());\n\n\t\tMap<Long, Long> threadPKs =\n\t\t\t(Map<Long, Long>)context.getNewPrimaryKeysMap(MBThread.class);\n\n\t\tlong threadId = MapUtil.getLong(\n\t\t\tthreadPKs, message.getThreadId(), message.getThreadId());\n\n\t\tMap<Long, Long> messagePKs =\n\t\t\t(Map<Long, Long>)context.getNewPrimaryKeysMap(MBMessage.class);\n\n\t\tlong parentMessageId = MapUtil.getLong(\n\t\t\tmessagePKs, message.getParentMessageId(),\n\t\t\tmessage.getParentMessageId());\n\n\t\tList<ObjectValuePair<String, byte[]>> files =\n\t\t\tnew ArrayList<ObjectValuePair<String, byte[]>>();\n\t\tList<String> existingFiles = new ArrayList<String>();\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"attachments\") &&\n\t\t\tmessage.isAttachments()) {\n\n\t\t\tList<Element> attachmentElements = messageElement.elements(\n\t\t\t\t\"attachment\");\n\n\t\t\tfor (Element attachmentElement : attachmentElements) {\n\t\t\t\tString name = attachmentElement.attributeValue(\"name\");\n\t\t\t\tString binPath = attachmentElement.attributeValue(\"bin-path\");\n\n\t\t\t\tbyte[] bytes = context.getZipEntryAsByteArray(binPath);\n\n\t\t\t\tfiles.add(new ObjectValuePair<String, byte[]>(name, bytes));\n\t\t\t}\n\n\t\t\tif (files.size() <= 0) {\n\t\t\t\t_log.error(\n\t\t\t\t\t\"Could not find attachments for message \" +\n\t\t\t\t\t\tmessage.getMessageId());\n\t\t\t}\n\t\t}\n\n\t\tString[] assetTagNames = null;\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"tags\")) {\n\t\t\tassetTagNames = context.getAssetTagNames(\n\t\t\t\tMBMessage.class, message.getMessageId());\n\t\t}\n\n\t\tServiceContext serviceContext = new ServiceContext();\n\n\t\tserviceContext.setAddCommunityPermissions(true);\n\t\tserviceContext.setAddGuestPermissions(true);\n\t\tserviceContext.setAssetTagNames(assetTagNames);\n\t\tserviceContext.setCreateDate(message.getCreateDate());\n\t\tserviceContext.setModifiedDate(message.getModifiedDate());\n\t\tserviceContext.setScopeGroupId(context.getScopeGroupId());\n\n\t\tif (message.getStatus() != WorkflowConstants.STATUS_APPROVED) {\n\t\t\tserviceContext.setWorkflowAction(\n\t\t\t\tWorkflowConstants.ACTION_SAVE_DRAFT);\n\t\t}\n\n\t\tif ((categoryId != MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) &&\n\t\t\t(categoryId != MBCategoryConstants.DISCUSSION_CATEGORY_ID) &&\n\t\t\t(categoryId == message.getCategoryId())) {\n\n\t\t\tString path = getImportCategoryPath(context, categoryId);\n\n\t\t\tMBCategory category = (MBCategory)context.getZipEntryAsObject(path);\n\n\t\t\timportCategory(context, category);\n\n\t\t\tcategoryId = MapUtil.getLong(\n\t\t\t\tcategoryPKs, message.getCategoryId(), message.getCategoryId());\n\t\t}\n\n\t\tMBMessage importedMessage = null;\n\n\t\tif (context.isDataStrategyMirror()) {\n\t\t\tMBMessage existingMessage = MBMessageUtil.fetchByUUID_G(\n\t\t\t\tmessage.getUuid(), context.getScopeGroupId());\n\n\t\t\tif (existingMessage == null) {\n\t\t\t\tserviceContext.setUuid(message.getUuid());\n\n\t\t\t\timportedMessage = MBMessageLocalServiceUtil.addMessage(\n\t\t\t\t\tuserId, userName, context.getScopeGroupId(), categoryId,\n\t\t\t\t\tthreadId, parentMessageId, message.getSubject(),\n\t\t\t\t\tmessage.getBody(), files, message.getAnonymous(),\n\t\t\t\t\tmessage.getPriority(), message.getAllowPingbacks(),\n\t\t\t\t\tserviceContext);\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedMessage = MBMessageLocalServiceUtil.updateMessage(\n\t\t\t\t\tuserId, existingMessage.getMessageId(),\n\t\t\t\t\tmessage.getSubject(), message.getBody(), files,\n\t\t\t\t\texistingFiles, message.getPriority(),\n\t\t\t\t\tmessage.getAllowPingbacks(), serviceContext);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\timportedMessage = MBMessageLocalServiceUtil.addMessage(\n\t\t\t\tuserId, userName, context.getScopeGroupId(), categoryId,\n\t\t\t\tthreadId, parentMessageId, message.getSubject(),\n\t\t\t\tmessage.getBody(), files, message.getAnonymous(),\n\t\t\t\tmessage.getPriority(), message.getAllowPingbacks(),\n\t\t\t\tserviceContext);\n\t\t}\n\n\t\tthreadPKs.put(message.getThreadId(), importedMessage.getThreadId());\n\t\tmessagePKs.put(message.getMessageId(), importedMessage.getMessageId());\n\n\t\tcontext.importLocks(\n\t\t\tMBThread.class, String.valueOf(message.getThreadId()),\n\t\t\tString.valueOf(importedMessage.getThreadId()));\n\n\t\tcontext.importPermissions(\n\t\t\tMBMessage.class, message.getMessageId(),\n\t\t\timportedMessage.getMessageId());\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"ratings\")) {\n\t\t\tcontext.importRatingsEntries(\n\t\t\t\tMBMessage.class, message.getMessageId(),\n\t\t\t\timportedMessage.getMessageId());\n\t\t}\n\t}","commit_id":"630a6377399cd47878a228d387afd6c33a897140","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public String exportData(\n\t\t\tPortletDataContext context, String portletId,\n\t\t\tPortletPreferences preferences)\n\t\tthrows PortletDataException {\n\n\t\ttry {\n\t\t\tcontext.addPermissions(\n\t\t\t\t\"com.liferay.portlet.messageboards\", context.getScopeGroupId());\n\n\t\t\tDocument doc = SAXReaderUtil.createDocument();\n\n\t\t\tElement root = doc.addElement(\"message-boards-data\");\n\n\t\t\troot.addAttribute(\n\t\t\t\t\"group-id\", String.valueOf(context.getScopeGroupId()));\n\n\t\t\tElement categoriesEl = root.addElement(\"categories\");\n\t\t\tElement messagesEl = root.addElement(\"messages\");\n\t\t\tElement messageFlagsEl = root.addElement(\"message-flags\");\n\t\t\tElement userBansEl = root.addElement(\"user-bans\");\n\n\t\t\tList<MBCategory> categories = MBCategoryUtil.findByGroupId(\n\t\t\t\tcontext.getScopeGroupId());\n\n\t\t\tfor (MBCategory category : categories) {\n\t\t\t\texportCategory(\n\t\t\t\t\tcontext, categoriesEl, messagesEl, messageFlagsEl,\n\t\t\t\t\tcategory);\n\t\t\t}\n\n\t\t\tList<MBMessage> messages = MBMessageUtil.findByG_C(\n\t\t\t\tcontext.getScopeGroupId(),\n\t\t\t\tMBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID);\n\n\t\t\tfor (MBMessage message : messages) {\n\t\t\t\texportMessage(\n\t\t\t\t\tcontext, categoriesEl, messagesEl, messageFlagsEl, message);\n\t\t\t}\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"user-bans\")) {\n\t\t\t\tList<MBBan> bans = MBBanUtil.findByGroupId(\n\t\t\t\t\tcontext.getScopeGroupId());\n\n\t\t\t\tfor (MBBan ban : bans) {\n\t\t\t\t\texportUserBan(context, userBansEl, ban);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn doc.formattedString();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new PortletDataException(e);\n\t\t}\n\t}","id":46703,"modified_method":"protected String doExportData(\n\t\t\tPortletDataContext context, String portletId,\n\t\t\tPortletPreferences preferences)\n\t\tthrows Exception {\n\n\t\tcontext.addPermissions(\n\t\t\t\"com.liferay.portlet.messageboards\", context.getScopeGroupId());\n\n\t\tDocument document = SAXReaderUtil.createDocument();\n\n\t\tElement rootElement = document.addElement(\"message-boards-data\");\n\n\t\trootElement.addAttribute(\n\t\t\t\"group-id\", String.valueOf(context.getScopeGroupId()));\n\n\t\tElement categoriesElement = rootElement.addElement(\"categories\");\n\t\tElement messagesElement = rootElement.addElement(\"messages\");\n\t\tElement messageFlagsElement = rootElement.addElement(\"message-flags\");\n\t\tElement userBansElement = rootElement.addElement(\"user-bans\");\n\n\t\tList<MBCategory> categories = MBCategoryUtil.findByGroupId(\n\t\t\tcontext.getScopeGroupId());\n\n\t\tfor (MBCategory category : categories) {\n\t\t\texportCategory(\n\t\t\t\tcontext, categoriesElement, messagesElement,\n\t\t\t\tmessageFlagsElement, category);\n\t\t}\n\n\t\tList<MBMessage> messages = MBMessageUtil.findByG_C(\n\t\t\tcontext.getScopeGroupId(),\n\t\t\tMBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID);\n\n\t\tfor (MBMessage message : messages) {\n\t\t\texportMessage(\n\t\t\t\tcontext, categoriesElement, messagesElement,\n\t\t\t\tmessageFlagsElement, message);\n\t\t}\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"user-bans\")) {\n\t\t\tList<MBBan> bans = MBBanUtil.findByGroupId(\n\t\t\t\tcontext.getScopeGroupId());\n\n\t\t\tfor (MBBan ban : bans) {\n\t\t\t\texportBan(context, userBansElement, ban);\n\t\t\t}\n\t\t}\n\n\t\treturn document.formattedString();\n\t}","commit_id":"630a6377399cd47878a228d387afd6c33a897140","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void exportParentCategory(\n\t\t\tPortletDataContext context, Element categoriesEl, long categoryId)\n\t\tthrows PortalException, SystemException {\n\n\t\tif ((!context.hasDateRange()) ||\n\t\t\t(categoryId == MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) ||\n\t\t\t(categoryId == MBCategoryConstants.DISCUSSION_CATEGORY_ID)) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tMBCategory category = MBCategoryUtil.findByPrimaryKey(categoryId);\n\n\t\texportParentCategory(\n\t\t\tcontext, categoriesEl, category.getParentCategoryId());\n\n\t\tString path = getCategoryPath(context, category);\n\n\t\tif (context.isPathNotProcessed(path)) {\n\t\t\tElement categoryEl = categoriesEl.addElement(\"category\");\n\n\t\t\tcategoryEl.addAttribute(\"path\", path);\n\n\t\t\tcategory.setUserUuid(category.getUserUuid());\n\n\t\t\tcontext.addPermissions(MBCategory.class, category.getCategoryId());\n\n\t\t\tcontext.addZipEntry(path, category);\n\t\t}\n\t}","id":46704,"modified_method":"protected void exportParentCategory(\n\t\t\tPortletDataContext context, Element categoriesElement,\n\t\t\tlong categoryId)\n\t\tthrows Exception {\n\n\t\tif ((!context.hasDateRange()) ||\n\t\t\t(categoryId == MBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) ||\n\t\t\t(categoryId == MBCategoryConstants.DISCUSSION_CATEGORY_ID)) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tMBCategory category = MBCategoryUtil.findByPrimaryKey(categoryId);\n\n\t\texportParentCategory(\n\t\t\tcontext, categoriesElement, category.getParentCategoryId());\n\n\t\tString path = getCategoryPath(context, category);\n\n\t\tif (context.isPathNotProcessed(path)) {\n\t\t\tElement categoryElement = categoriesElement.addElement(\"category\");\n\n\t\t\tcategoryElement.addAttribute(\"path\", path);\n\n\t\t\tcategory.setUserUuid(category.getUserUuid());\n\n\t\t\tcontext.addPermissions(MBCategory.class, category.getCategoryId());\n\n\t\t\tcontext.addZipEntry(path, category);\n\t\t}\n\t}","commit_id":"630a6377399cd47878a228d387afd6c33a897140","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void exportCategory(\n\t\t\tPortletDataContext context, Element categoriesEl,\n\t\t\tElement messagesEl, Element messageFlagsEl, MBCategory category)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (context.isWithinDateRange(category.getModifiedDate())) {\n\t\t\texportParentCategory(\n\t\t\t\tcontext, categoriesEl, category.getParentCategoryId());\n\n\t\t\tString path = getCategoryPath(context, category);\n\n\t\t\tif (context.isPathNotProcessed(path)) {\n\t\t\t\tElement categoryEl = categoriesEl.addElement(\"category\");\n\n\t\t\t\tcategoryEl.addAttribute(\"path\", path);\n\n\t\t\t\tcategory.setUserUuid(category.getUserUuid());\n\n\t\t\t\tcontext.addPermissions(\n\t\t\t\t\tMBCategory.class, category.getCategoryId());\n\n\t\t\t\tcontext.addZipEntry(path, category);\n\t\t\t}\n\t\t}\n\n\t\tList<MBMessage> messages = MBMessageUtil.findByG_C(\n\t\t\tcategory.getGroupId(), category.getCategoryId());\n\n\t\tfor (MBMessage message : messages) {\n\t\t\texportMessage(\n\t\t\t\tcontext, categoriesEl, messagesEl, messageFlagsEl, message);\n\t\t}\n\t}","id":46705,"modified_method":"protected void exportCategory(\n\t\t\tPortletDataContext context, Element categoriesElement,\n\t\t\tElement messagesElement, Element messageFlagsElement,\n\t\t\tMBCategory category)\n\t\tthrows Exception {\n\n\t\tif (context.isWithinDateRange(category.getModifiedDate())) {\n\t\t\texportParentCategory(\n\t\t\t\tcontext, categoriesElement, category.getParentCategoryId());\n\n\t\t\tString path = getCategoryPath(context, category);\n\n\t\t\tif (context.isPathNotProcessed(path)) {\n\t\t\t\tElement categoryElement = categoriesElement.addElement(\n\t\t\t\t\t\"category\");\n\n\t\t\t\tcategoryElement.addAttribute(\"path\", path);\n\n\t\t\t\tcategory.setUserUuid(category.getUserUuid());\n\n\t\t\t\tcontext.addPermissions(\n\t\t\t\t\tMBCategory.class, category.getCategoryId());\n\n\t\t\t\tcontext.addZipEntry(path, category);\n\t\t\t}\n\t\t}\n\n\t\tList<MBMessage> messages = MBMessageUtil.findByG_C(\n\t\t\tcategory.getGroupId(), category.getCategoryId());\n\n\t\tfor (MBMessage message : messages) {\n\t\t\texportMessage(\n\t\t\t\tcontext, categoriesElement, messagesElement,\n\t\t\t\tmessageFlagsElement, message);\n\t\t}\n\t}","commit_id":"630a6377399cd47878a228d387afd6c33a897140","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public PortletDataHandlerControl[] getExportControls() {\n\t\treturn new PortletDataHandlerControl[] {\n\t\t\t_categoriesAndMessages, _attachments, _userBans, _flags, _ratings,\n\t\t\t_tags\n\t\t};\n\t}","id":46706,"modified_method":"public PortletDataHandlerControl[] getExportControls() {\n\t\treturn new PortletDataHandlerControl[] {\n\t\t\t_categoriesAndMessages, _attachments, _messageFlags, _ratings,\n\t\t\t_tags, _userBans\n\t\t};\n\t}","commit_id":"630a6377399cd47878a228d387afd6c33a897140","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public PortletPreferences importData(\n\t\t\tPortletDataContext context, String portletId,\n\t\t\tPortletPreferences preferences, String data)\n\t\tthrows PortletDataException {\n\n\t\ttry {\n\t\t\tcontext.importPermissions(\n\t\t\t\t\"com.liferay.portlet.messageboards\", context.getSourceGroupId(),\n\t\t\t\tcontext.getScopeGroupId());\n\n\t\t\tDocument doc = SAXReaderUtil.read(data);\n\n\t\t\tElement root = doc.getRootElement();\n\n\t\t\tList<Element> categoryEls = root.element(\"categories\").elements(\n\t\t\t\t\"category\");\n\n\t\t\tMap<Long, Long> categoryPKs =\n\t\t\t\t(Map<Long, Long>)context.getNewPrimaryKeysMap(MBCategory.class);\n\n\t\t\tfor (Element categoryEl : categoryEls) {\n\t\t\t\tString path = categoryEl.attributeValue(\"path\");\n\n\t\t\t\tif (!context.isPathNotProcessed(path)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tMBCategory category = (MBCategory)context.getZipEntryAsObject(\n\t\t\t\t\tpath);\n\n\t\t\t\timportCategory(context, categoryPKs, category);\n\t\t\t}\n\n\t\t\tList<Element> messageEls = root.element(\"messages\").elements(\n\t\t\t\t\"message\");\n\n\t\t\tMap<Long, Long> threadPKs =\n\t\t\t\t(Map<Long, Long>)context.getNewPrimaryKeysMap(MBThread.class);\n\t\t\tMap<Long, Long> messagePKs =\n\t\t\t\t(Map<Long, Long>)context.getNewPrimaryKeysMap(MBMessage.class);\n\n\t\t\tfor (Element messageEl : messageEls) {\n\t\t\t\tString path = messageEl.attributeValue(\"path\");\n\n\t\t\t\tif (!context.isPathNotProcessed(path)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tMBMessage message = (MBMessage)context.getZipEntryAsObject(\n\t\t\t\t\tpath);\n\n\t\t\t\timportMessage(\n\t\t\t\t\tcontext, categoryPKs, threadPKs, messagePKs, messageEl,\n\t\t\t\t\tmessage);\n\t\t\t}\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"flags\")) {\n\t\t\t\tList<Element> flagEls = root.element(\"message-flags\").elements(\n\t\t\t\t\t\"flag\");\n\n\t\t\t\tfor (Element flagEl : flagEls) {\n\t\t\t\t\tString path = flagEl.attributeValue(\"path\");\n\n\t\t\t\t\tif (!context.isPathNotProcessed(path)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tMBMessageFlag flag =\n\t\t\t\t\t\t(MBMessageFlag)context.getZipEntryAsObject(path);\n\n\t\t\t\t\timportFlag(context, messagePKs, flag);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"user-bans\")) {\n\t\t\t\tList<Element> banEls = root.element(\"user-bans\").elements(\n\t\t\t\t\t\"user-ban\");\n\n\t\t\t\tfor (Element banEl : banEls) {\n\t\t\t\t\tString path = banEl.attributeValue(\"path\");\n\n\t\t\t\t\tif (!context.isPathNotProcessed(path)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tMBBan ban = (MBBan)context.getZipEntryAsObject(path);\n\n\t\t\t\t\timportBan(context, ban);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new PortletDataException(e);\n\t\t}\n\t}","id":46707,"modified_method":"protected PortletPreferences doImportData(\n\t\t\tPortletDataContext context, String portletId,\n\t\t\tPortletPreferences preferences, String data)\n\t\tthrows Exception {\n\n\t\tcontext.importPermissions(\n\t\t\t\"com.liferay.portlet.messageboards\", context.getSourceGroupId(),\n\t\t\tcontext.getScopeGroupId());\n\n\t\tDocument document = SAXReaderUtil.read(data);\n\n\t\tElement rootElement = document.getRootElement();\n\n\t\tElement categoriesElement = rootElement.element(\"categories\");\n\n\t\tfor (Element categoryElement : categoriesElement.elements(\"category\")) {\n\t\t\tString path = categoryElement.attributeValue(\"path\");\n\n\t\t\tif (!context.isPathNotProcessed(path)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tMBCategory category = (MBCategory)context.getZipEntryAsObject(path);\n\n\t\t\timportCategory(context, category);\n\t\t}\n\n\t\tElement messagesElement = rootElement.element(\"messages\");\n\n\t\tfor (Element messageElement : messagesElement.elements(\"message\")) {\n\t\t\tString path = messageElement.attributeValue(\"path\");\n\n\t\t\tif (!context.isPathNotProcessed(path)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tMBMessage message = (MBMessage)context.getZipEntryAsObject(\n\t\t\t\tpath);\n\n\t\t\timportMessage(context, messageElement, message);\n\t\t}\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"message-flags\")) {\n\t\t\tElement messageFlagsElement = rootElement.element(\"message-flags\");\n\n\t\t\tfor (Element messageFlagElement :\n\t\t\t\t\tmessageFlagsElement.elements(\"message-flag\")) {\n\n\t\t\t\tString path = messageFlagElement.attributeValue(\"path\");\n\n\t\t\t\tif (!context.isPathNotProcessed(path)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tMBMessageFlag flag = (MBMessageFlag)context.getZipEntryAsObject(\n\t\t\t\t\tpath);\n\n\t\t\t\timportMessageFlag(context, flag);\n\t\t\t}\n\t\t}\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"user-bans\")) {\n\t\t\tElement userBansElement = rootElement.element(\"user-bans\");\n\n\t\t\tfor (Element userBanElement :\n\t\t\t\t\tuserBansElement.elements(\"user-ban\")) {\n\n\t\t\t\tString path = userBanElement.attributeValue(\"path\");\n\n\t\t\t\tif (!context.isPathNotProcessed(path)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tMBBan ban = (MBBan)context.getZipEntryAsObject(path);\n\n\t\t\t\timportBan(context, ban);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}","commit_id":"630a6377399cd47878a228d387afd6c33a897140","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void importCategory(\n\t\t\tPortletDataContext context, Map<Long, Long> categoryPKs,\n\t\t\tMBCategory category)\n\t\tthrows Exception {\n\n\t\tlong userId = context.getUserId(category.getUserUuid());\n\t\tlong parentCategoryId = MapUtil.getLong(\n\t\t\tcategoryPKs, category.getParentCategoryId(),\n\t\t\tcategory.getParentCategoryId());\n\n\t\tString emailAddress = null;\n\t\tString inProtocol = null;\n\t\tString inServerName = null;\n\t\tint inServerPort = 0;\n\t\tboolean inUseSSL = false;\n\t\tString inUserName = null;\n\t\tString inPassword = null;\n\t\tint inReadInterval = 0;\n\t\tString outEmailAddress = null;\n\t\tboolean outCustom = false;\n\t\tString outServerName = null;\n\t\tint outServerPort = 0;\n\t\tboolean outUseSSL = false;\n\t\tString outUserName = null;\n\t\tString outPassword = null;\n\t\tboolean mailingListActive = false;\n\n\t\tServiceContext serviceContext = new ServiceContext();\n\n\t\tserviceContext.setAddCommunityPermissions(true);\n\t\tserviceContext.setAddGuestPermissions(true);\n\t\tserviceContext.setCreateDate(category.getCreateDate());\n\t\tserviceContext.setModifiedDate(category.getModifiedDate());\n\t\tserviceContext.setScopeGroupId(context.getScopeGroupId());\n\n\t\tif ((parentCategoryId !=\n\t\t\t\tMBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) &&\n\t\t\t(parentCategoryId != MBCategoryConstants.DISCUSSION_CATEGORY_ID) &&\n\t\t\t(parentCategoryId == category.getParentCategoryId())) {\n\n\t\t\tString path = getImportCategoryPath(context, parentCategoryId);\n\n\t\t\tMBCategory parentCategory =\n\t\t\t\t(MBCategory)context.getZipEntryAsObject(path);\n\n\t\t\timportCategory(context, categoryPKs, parentCategory);\n\n\t\t\tparentCategoryId = MapUtil.getLong(\n\t\t\t\tcategoryPKs, category.getParentCategoryId(),\n\t\t\t\tcategory.getParentCategoryId());\n\t\t}\n\n\t\tMBCategory importedCategory = null;\n\n\t\ttry {\n\t\t\tif ((parentCategoryId !=\n\t\t\t\t\tMBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) &&\n\t\t\t\t(parentCategoryId !=\n\t\t\t\t\tMBCategoryConstants.DISCUSSION_CATEGORY_ID)) {\n\n\t\t\t\tMBCategoryUtil.findByPrimaryKey(parentCategoryId);\n\t\t\t}\n\n\t\t\tif (context.isDataStrategyMirror()) {\n\t\t\t\tMBCategory existingCategory = MBCategoryUtil.fetchByUUID_G(\n\t\t\t\t\tcategory.getUuid(), context.getScopeGroupId());\n\n\t\t\t\tif (existingCategory == null) {\n\t\t\t\t\tserviceContext.setUuid(category.getUuid());\n\n\t\t\t\t\timportedCategory = MBCategoryLocalServiceUtil.addCategory(\n\t\t\t\t\t\tuserId, parentCategoryId, category.getName(),\n\t\t\t\t\t\tcategory.getDescription(), emailAddress, inProtocol,\n\t\t\t\t\t\tinServerName, inServerPort, inUseSSL, inUserName,\n\t\t\t\t\t\tinPassword, inReadInterval, outEmailAddress, outCustom,\n\t\t\t\t\t\toutServerName, outServerPort, outUseSSL, outUserName,\n\t\t\t\t\t\toutPassword, mailingListActive, serviceContext);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\timportedCategory =\n\t\t\t\t\t\tMBCategoryLocalServiceUtil.updateCategory(\n\t\t\t\t\t\t\texistingCategory.getCategoryId(), parentCategoryId,\n\t\t\t\t\t\t\tcategory.getName(), category.getDescription(),\n\t\t\t\t\t\t\temailAddress, inProtocol, inServerName,\n\t\t\t\t\t\t\tinServerPort, inUseSSL, inUserName, inPassword,\n\t\t\t\t\t\t\tinReadInterval, outEmailAddress, outCustom,\n\t\t\t\t\t\t\toutServerName, outServerPort, outUseSSL,\n\t\t\t\t\t\t\toutUserName, outPassword, mailingListActive, false,\n\t\t\t\t\t\t\tserviceContext);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedCategory = MBCategoryLocalServiceUtil.addCategory(\n\t\t\t\t\tuserId, parentCategoryId, category.getName(),\n\t\t\t\t\tcategory.getDescription(), emailAddress, inProtocol,\n\t\t\t\t\tinServerName, inServerPort, inUseSSL, inUserName,\n\t\t\t\t\tinPassword, inReadInterval, outEmailAddress, outCustom,\n\t\t\t\t\toutServerName, outServerPort, outUseSSL, outUserName,\n\t\t\t\t\toutPassword, mailingListActive, serviceContext);\n\t\t\t}\n\n\t\t\tcategoryPKs.put(\n\t\t\t\tcategory.getCategoryId(), importedCategory.getCategoryId());\n\n\t\t\tcontext.importPermissions(\n\t\t\t\tMBCategory.class, category.getCategoryId(),\n\t\t\t\timportedCategory.getCategoryId());\n\t\t}\n\t\tcatch (NoSuchCategoryException nsce) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find the parent category for category \" +\n\t\t\t\t\tcategory.getCategoryId());\n\t\t}\n\t}","id":46708,"modified_method":"protected void importCategory(\n\t\t\tPortletDataContext context, MBCategory category)\n\t\tthrows Exception {\n\n\t\tlong userId = context.getUserId(category.getUserUuid());\n\n\t\tMap<Long, Long> categoryPKs =\n\t\t\t(Map<Long, Long>)context.getNewPrimaryKeysMap(MBCategory.class);\n\n\t\tlong parentCategoryId = MapUtil.getLong(\n\t\t\tcategoryPKs, category.getParentCategoryId(),\n\t\t\tcategory.getParentCategoryId());\n\n\t\tString emailAddress = null;\n\t\tString inProtocol = null;\n\t\tString inServerName = null;\n\t\tint inServerPort = 0;\n\t\tboolean inUseSSL = false;\n\t\tString inUserName = null;\n\t\tString inPassword = null;\n\t\tint inReadInterval = 0;\n\t\tString outEmailAddress = null;\n\t\tboolean outCustom = false;\n\t\tString outServerName = null;\n\t\tint outServerPort = 0;\n\t\tboolean outUseSSL = false;\n\t\tString outUserName = null;\n\t\tString outPassword = null;\n\t\tboolean mailingListActive = false;\n\n\t\tServiceContext serviceContext = new ServiceContext();\n\n\t\tserviceContext.setAddCommunityPermissions(true);\n\t\tserviceContext.setAddGuestPermissions(true);\n\t\tserviceContext.setCreateDate(category.getCreateDate());\n\t\tserviceContext.setModifiedDate(category.getModifiedDate());\n\t\tserviceContext.setScopeGroupId(context.getScopeGroupId());\n\n\t\tif ((parentCategoryId !=\n\t\t\t\tMBCategoryConstants.DEFAULT_PARENT_CATEGORY_ID) &&\n\t\t\t(parentCategoryId != MBCategoryConstants.DISCUSSION_CATEGORY_ID) &&\n\t\t\t(parentCategoryId == category.getParentCategoryId())) {\n\n\t\t\tString path = getImportCategoryPath(context, parentCategoryId);\n\n\t\t\tMBCategory parentCategory =\n\t\t\t\t(MBCategory)context.getZipEntryAsObject(path);\n\n\t\t\timportCategory(context, parentCategory);\n\n\t\t\tparentCategoryId = MapUtil.getLong(\n\t\t\t\tcategoryPKs, category.getParentCategoryId(),\n\t\t\t\tcategory.getParentCategoryId());\n\t\t}\n\n\t\tMBCategory importedCategory = null;\n\n\t\tif (context.isDataStrategyMirror()) {\n\t\t\tMBCategory existingCategory = MBCategoryUtil.fetchByUUID_G(\n\t\t\t\tcategory.getUuid(), context.getScopeGroupId());\n\n\t\t\tif (existingCategory == null) {\n\t\t\t\tserviceContext.setUuid(category.getUuid());\n\n\t\t\t\timportedCategory = MBCategoryLocalServiceUtil.addCategory(\n\t\t\t\t\tuserId, parentCategoryId, category.getName(),\n\t\t\t\t\tcategory.getDescription(), emailAddress, inProtocol,\n\t\t\t\t\tinServerName, inServerPort, inUseSSL, inUserName,\n\t\t\t\t\tinPassword, inReadInterval, outEmailAddress, outCustom,\n\t\t\t\t\toutServerName, outServerPort, outUseSSL, outUserName,\n\t\t\t\t\toutPassword, mailingListActive, serviceContext);\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedCategory = MBCategoryLocalServiceUtil.updateCategory(\n\t\t\t\t\texistingCategory.getCategoryId(), parentCategoryId,\n\t\t\t\t\tcategory.getName(), category.getDescription(), emailAddress,\n\t\t\t\t\tinProtocol, inServerName, inServerPort, inUseSSL,\n\t\t\t\t\tinUserName, inPassword, inReadInterval, outEmailAddress,\n\t\t\t\t\toutCustom, outServerName, outServerPort, outUseSSL,\n\t\t\t\t\toutUserName, outPassword, mailingListActive, false,\n\t\t\t\t\tserviceContext);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\timportedCategory = MBCategoryLocalServiceUtil.addCategory(\n\t\t\t\tuserId, parentCategoryId, category.getName(),\n\t\t\t\tcategory.getDescription(), emailAddress, inProtocol,\n\t\t\t\tinServerName, inServerPort, inUseSSL, inUserName, inPassword,\n\t\t\t\tinReadInterval, outEmailAddress, outCustom, outServerName,\n\t\t\t\toutServerPort, outUseSSL, outUserName, outPassword,\n\t\t\t\tmailingListActive, serviceContext);\n\t\t}\n\n\t\tcategoryPKs.put(\n\t\t\tcategory.getCategoryId(), importedCategory.getCategoryId());\n\n\t\tcontext.importPermissions(\n\t\t\tMBCategory.class, category.getCategoryId(),\n\t\t\timportedCategory.getCategoryId());\n\t}","commit_id":"630a6377399cd47878a228d387afd6c33a897140","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public MBPortletDataHandler() {\n\t\tsetExportControls(\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"categories-and-messages\", true, true),\n\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"thread-flags\"),\n\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"user-bans\"));\n\t\tsetExportMetadataControls(\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"message-board-messages\", true,\n\t\t\t\tnew PortletDataHandlerControl[] {\n\t\t\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"attachments\"),\n\t\t\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"ratings\"),\n\t\t\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"tags\")\n\t\t\t\t}));\n\t\tsetPublishToLiveByDefault(\n\t\t\tPropsValues.MESSAGE_BOARDS_PUBLISH_TO_LIVE_BY_DEFAULT);\n\t}","id":46709,"modified_method":"public MBPortletDataHandler() {\n\t\tsetExportControls(\n\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"messages\"),\n\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"thread-flags\"),\n\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"user-bans\"));\n\t\tsetExportMetadataControls(\n\t\t\tnew PortletDataHandlerBoolean(\n\t\t\t\tNAMESPACE, \"message-board-messages\", true,\n\t\t\t\tnew PortletDataHandlerControl[] {\n\t\t\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"attachments\"),\n\t\t\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"ratings\"),\n\t\t\t\t\tnew PortletDataHandlerBoolean(NAMESPACE, \"tags\")\n\t\t\t\t}));\n\t\tsetPublishToLiveByDefault(\n\t\t\tPropsValues.MESSAGE_BOARDS_PUBLISH_TO_LIVE_BY_DEFAULT);\n\t}","commit_id":"62be1b790c72db9a6cf9b6abfe675cc9bf9e2b3e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected PortletPreferences doImportData(\n\t\t\tPortletDataContext portletDataContext, String portletId,\n\t\t\tPortletPreferences portletPreferences, String data)\n\t\tthrows Exception {\n\n\t\tportletDataContext.importPermissions(\n\t\t\tMBPermission.RESOURCE_NAME, portletDataContext.getSourceGroupId(),\n\t\t\tportletDataContext.getScopeGroupId());\n\n\t\tElement categoriesElement =\n\t\t\tportletDataContext.getImportDataGroupElement(MBCategory.class);\n\n\t\tList<Element> categoryElements = categoriesElement.elements();\n\n\t\tfor (Element categoryElement : categoryElements) {\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, categoryElement);\n\t\t}\n\n\t\tElement messagesElement = portletDataContext.getImportDataGroupElement(\n\t\t\tMBMessage.class);\n\n\t\tList<Element> messageElements = messagesElement.elements();\n\n\t\tfor (Element messageElement : messageElements) {\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, messageElement);\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"thread-flags\")) {\n\t\t\tElement threadFlagsElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(\n\t\t\t\t\tMBThreadFlag.class);\n\n\t\t\tList<Element> threadFlagElements = threadFlagsElement.elements();\n\n\t\t\tfor (Element threadFlagElement : threadFlagElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, threadFlagElement);\n\t\t\t}\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"user-bans\")) {\n\t\t\tElement userBansElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(MBBan.class);\n\n\t\t\tList<Element> userBanElements = userBansElement.elements();\n\n\t\t\tfor (Element userBanElement : userBanElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, userBanElement);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}","id":46710,"modified_method":"@Override\n\tprotected PortletPreferences doImportData(\n\t\t\tPortletDataContext portletDataContext, String portletId,\n\t\t\tPortletPreferences portletPreferences, String data)\n\t\tthrows Exception {\n\n\t\tportletDataContext.importPermissions(\n\t\t\tMBPermission.RESOURCE_NAME, portletDataContext.getSourceGroupId(),\n\t\t\tportletDataContext.getScopeGroupId());\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"messages\")) {\n\t\t\tElement categoriesElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(MBCategory.class);\n\n\t\t\tList<Element> categoryElements = categoriesElement.elements();\n\n\t\t\tfor (Element categoryElement : categoryElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, categoryElement);\n\t\t\t}\n\n\t\t\tElement messagesElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(MBMessage.class);\n\n\t\t\tList<Element> messageElements = messagesElement.elements();\n\n\t\t\tfor (Element messageElement : messageElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, messageElement);\n\t\t\t}\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"thread-flags\")) {\n\t\t\tElement threadFlagsElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(\n\t\t\t\t\tMBThreadFlag.class);\n\n\t\t\tList<Element> threadFlagElements = threadFlagsElement.elements();\n\n\t\t\tfor (Element threadFlagElement : threadFlagElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, threadFlagElement);\n\t\t\t}\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"user-bans\")) {\n\t\t\tElement userBansElement =\n\t\t\t\tportletDataContext.getImportDataGroupElement(MBBan.class);\n\n\t\t\tList<Element> userBanElements = userBansElement.elements();\n\n\t\t\tfor (Element userBanElement : userBanElements) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, userBanElement);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}","commit_id":"62be1b790c72db9a6cf9b6abfe675cc9bf9e2b3e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected String doExportData(\n\t\t\tfinal PortletDataContext portletDataContext, String portletId,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows Exception {\n\n\t\tportletDataContext.addPermissions(\n\t\t\tMBPermission.RESOURCE_NAME, portletDataContext.getScopeGroupId());\n\n\t\tElement rootElement = addExportDataRootElement(portletDataContext);\n\n\t\trootElement.addAttribute(\n\t\t\t\"group-id\", String.valueOf(portletDataContext.getScopeGroupId()));\n\n\t\tActionableDynamicQuery categoryActionableDynamicQuery =\n\t\t\tnew MBCategoryExportActionableDynamicQuery(portletDataContext);\n\n\t\tcategoryActionableDynamicQuery.performActions();\n\n\t\tActionableDynamicQuery messageActionableDynamicQuery =\n\t\t\tnew MBMessageExportActionableDynamicQuery(portletDataContext);\n\n\t\tmessageActionableDynamicQuery.performActions();\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"thread-flags\")) {\n\t\t\tActionableDynamicQuery threadFlagActionableDynamicQuery =\n\t\t\t\tnew MBThreadFlagExportActionableDynamicQuery(\n\t\t\t\t\tportletDataContext);\n\n\t\t\tthreadFlagActionableDynamicQuery.performActions();\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"user-bans\")) {\n\t\t\tActionableDynamicQuery banActionableDynamicQuery =\n\t\t\t\tnew MBBanExportActionableDynamicQuery(portletDataContext);\n\n\t\t\tbanActionableDynamicQuery.performActions();\n\t\t}\n\n\t\treturn getExportDataRootElementString(rootElement);\n\t}","id":46711,"modified_method":"@Override\n\tprotected String doExportData(\n\t\t\tfinal PortletDataContext portletDataContext, String portletId,\n\t\t\tPortletPreferences portletPreferences)\n\t\tthrows Exception {\n\n\t\tportletDataContext.addPermissions(\n\t\t\tMBPermission.RESOURCE_NAME, portletDataContext.getScopeGroupId());\n\n\t\tElement rootElement = addExportDataRootElement(portletDataContext);\n\n\t\trootElement.addAttribute(\n\t\t\t\"group-id\", String.valueOf(portletDataContext.getScopeGroupId()));\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"messages\")) {\n\t\t\tActionableDynamicQuery categoryActionableDynamicQuery =\n\t\t\t\tnew MBCategoryExportActionableDynamicQuery(portletDataContext);\n\n\t\t\tcategoryActionableDynamicQuery.performActions();\n\n\t\t\tActionableDynamicQuery messageActionableDynamicQuery =\n\t\t\t\tnew MBMessageExportActionableDynamicQuery(portletDataContext);\n\n\t\t\tmessageActionableDynamicQuery.performActions();\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"thread-flags\")) {\n\t\t\tActionableDynamicQuery threadFlagActionableDynamicQuery =\n\t\t\t\tnew MBThreadFlagExportActionableDynamicQuery(\n\t\t\t\t\tportletDataContext);\n\n\t\t\tthreadFlagActionableDynamicQuery.performActions();\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"user-bans\")) {\n\t\t\tActionableDynamicQuery banActionableDynamicQuery =\n\t\t\t\tnew MBBanExportActionableDynamicQuery(portletDataContext);\n\n\t\t\tbanActionableDynamicQuery.performActions();\n\t\t}\n\n\t\treturn getExportDataRootElementString(rootElement);\n\t}","commit_id":"62be1b790c72db9a6cf9b6abfe675cc9bf9e2b3e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public PortletPreferences deleteData(\n\t\t\tPortletDataContext context, String portletId,\n\t\t\tPortletPreferences preferences)\n\t\tthrows PortletDataException {\n\n\t\ttry {\n\t\t\tpreferences.setValue(\"rootFolderId\", StringPool.BLANK);\n\t\t\tpreferences.setValue(\"showBreadcrumbs\", StringPool.BLANK);\n\t\t\tpreferences.setValue(\"showFoldersSearch\", StringPool.BLANK);\n\t\t\tpreferences.setValue(\"showSubfolders\", StringPool.BLANK);\n\t\t\tpreferences.setValue(\"foldersPerPage\", StringPool.BLANK);\n\t\t\tpreferences.setValue(\"folderColumns\", StringPool.BLANK);\n\t\t\tpreferences.setValue(\"showFileEntriesSearch\", StringPool.BLANK);\n\t\t\tpreferences.setValue(\"fileEntriesPerPage\", StringPool.BLANK);\n\t\t\tpreferences.setValue(\"fileEntryColumns\", StringPool.BLANK);\n\t\t\tpreferences.setValue(\"enable-comment-ratings\", StringPool.BLANK);\n\n\t\t\treturn preferences;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new PortletDataException(e);\n\t\t}\n\t}","id":46712,"modified_method":"protected PortletPreferences doDeleteData(\n\t\t\tPortletDataContext context, String portletId,\n\t\t\tPortletPreferences preferences)\n\t\tthrows Exception {\n\n\t\tpreferences.setValue(\"rootFolderId\", StringPool.BLANK);\n\t\tpreferences.setValue(\"showBreadcrumbs\", StringPool.BLANK);\n\t\tpreferences.setValue(\"showFoldersSearch\", StringPool.BLANK);\n\t\tpreferences.setValue(\"showSubfolders\", StringPool.BLANK);\n\t\tpreferences.setValue(\"foldersPerPage\", StringPool.BLANK);\n\t\tpreferences.setValue(\"folderColumns\", StringPool.BLANK);\n\t\tpreferences.setValue(\"showFileEntriesSearch\", StringPool.BLANK);\n\t\tpreferences.setValue(\"fileEntriesPerPage\", StringPool.BLANK);\n\t\tpreferences.setValue(\"fileEntryColumns\", StringPool.BLANK);\n\t\tpreferences.setValue(\"enable-comment-ratings\", StringPool.BLANK);\n\n\t\treturn preferences;\n\t}","commit_id":"92cd0e123dd2d3d0f3030fcf2fc1a802d1498263","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public String exportData(\n\t\t\tPortletDataContext context, String portletId,\n\t\t\tPortletPreferences preferences)\n\t\tthrows PortletDataException {\n\n\t\ttry {\n\t\t\tcontext.addPermissions(\n\t\t\t\t\"com.liferay.portlet.documentlibrary\",\n\t\t\t\tcontext.getScopeGroupId());\n\n\t\t\tlong rootFolderId = GetterUtil.getLong(\n\t\t\t\tpreferences.getValue(\"rootFolderId\", null));\n\n\t\t\tDocument doc = SAXReaderUtil.createDocument();\n\n\t\t\tElement root = doc.addElement(\"documentlibrary-display-data\");\n\n\t\t\tElement foldersEl = root.addElement(\"folders\");\n\t\t\tElement fileEntriesEl = root.addElement(\"file-entries\");\n\t\t\tElement fileShortcutsEl = root.addElement(\"file-shortcuts\");\n\t\t\tElement fileRanksEl = root.addElement(\"file-ranks\");\n\n\t\t\tif (rootFolderId == DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\t\t\t\tList<DLFolder> folders = DLFolderUtil.findByGroupId(\n\t\t\t\t\tcontext.getScopeGroupId());\n\n\t\t\t\tfor (DLFolder folder : folders) {\n\t\t\t\t\tDLPortletDataHandlerImpl.exportFolder(\n\t\t\t\t\t\tcontext, foldersEl, fileEntriesEl, fileShortcutsEl,\n\t\t\t\t\t\tfileRanksEl, folder);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tDLFolder folder = DLFolderUtil.findByPrimaryKey(rootFolderId);\n\n\t\t\t\troot.addAttribute(\n\t\t\t\t\t\"root-folder-id\", String.valueOf(folder.getFolderId()));\n\n\t\t\t\tDLPortletDataHandlerImpl.exportFolder(\n\t\t\t\t\tcontext, foldersEl, fileEntriesEl, fileShortcutsEl,\n\t\t\t\t\tfileRanksEl, folder);\n\t\t\t}\n\n\t\t\treturn doc.formattedString();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new PortletDataException(e);\n\t\t}\n\t}","id":46713,"modified_method":"protected String doExportData(\n\t\t\tPortletDataContext context, String portletId,\n\t\t\tPortletPreferences preferences)\n\t\tthrows Exception {\n\n\t\tcontext.addPermissions(\n\t\t\t\"com.liferay.portlet.documentlibrary\", context.getScopeGroupId());\n\n\t\tlong rootFolderId = GetterUtil.getLong(\n\t\t\tpreferences.getValue(\"rootFolderId\", null));\n\n\t\tDocument document = SAXReaderUtil.createDocument();\n\n\t\tElement rootElement = document.addElement(\n\t\t\t\"documentlibrary-display-data\");\n\n\t\tElement foldersElement = rootElement.addElement(\"folders\");\n\t\tElement fileEntriesElement = rootElement.addElement(\"file-entries\");\n\t\tElement fileShortcutsElement = rootElement.addElement(\"file-shortcuts\");\n\t\tElement fileRanksElement = rootElement.addElement(\"file-ranks\");\n\n\t\tif (rootFolderId == DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\t\t\tList<DLFolder> folders = DLFolderUtil.findByGroupId(\n\t\t\t\tcontext.getScopeGroupId());\n\n\t\t\tfor (DLFolder folder : folders) {\n\t\t\t\tDLPortletDataHandlerImpl.exportFolder(\n\t\t\t\t\tcontext, foldersElement, fileEntriesElement,\n\t\t\t\t\tfileShortcutsElement, fileRanksElement, folder);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tDLFolder folder = DLFolderUtil.findByPrimaryKey(rootFolderId);\n\n\t\t\trootElement.addAttribute(\n\t\t\t\t\"root-folder-id\", String.valueOf(folder.getFolderId()));\n\n\t\t\tDLPortletDataHandlerImpl.exportFolder(\n\t\t\t\tcontext, foldersElement, fileEntriesElement,\n\t\t\t\tfileShortcutsElement, fileRanksElement, folder);\n\t\t}\n\n\t\treturn document.formattedString();\n\t}","commit_id":"92cd0e123dd2d3d0f3030fcf2fc1a802d1498263","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public PortletPreferences importData(\n\t\t\tPortletDataContext context, String portletId,\n\t\t\tPortletPreferences preferences, String data)\n\t\tthrows PortletDataException {\n\n\t\ttry {\n\t\t\tcontext.importPermissions(\n\t\t\t\t\"com.liferay.portlet.documentlibrary\",\n\t\t\t\tcontext.getSourceGroupId(), context.getScopeGroupId());\n\n\t\t\tDocument doc = SAXReaderUtil.read(data);\n\n\t\t\tElement root = doc.getRootElement();\n\n\t\t\tList<Element> folderEls = root.element(\"folders\").elements(\n\t\t\t\t\"folder\");\n\n\t\t\tfor (Element folderEl : folderEls) {\n\t\t\t\tDLPortletDataHandlerImpl.importFolder(context, folderEl);\n\t\t\t}\n\n\t\t\tList<Element> fileEntryEls = root.element(\"file-entries\").elements(\n\t\t\t\t\"file-entry\");\n\n\t\t\tfor (Element fileEntryEl : fileEntryEls) {\n\t\t\t\tDLPortletDataHandlerImpl.importFileEntry(context, fileEntryEl);\n\t\t\t}\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"shortcuts\")) {\n\t\t\t\tList<Element> fileShortcutEls = root.element(\n\t\t\t\t\t\"file-shortcuts\").elements(\"file-shortcut\");\n\n\t\t\t\tfor (Element fileShortcutEl : fileShortcutEls) {\n\t\t\t\t\tDLPortletDataHandlerImpl.importFileShortcut(\n\t\t\t\t\t\tcontext, fileShortcutEl);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"ranks\")) {\n\t\t\t\tList<Element> fileRankEls = root.element(\"file-ranks\").elements(\n\t\t\t\t\t\"file-rank\");\n\n\t\t\t\tfor (Element fileRankEl : fileRankEls) {\n\t\t\t\t\tDLPortletDataHandlerImpl.importFileRank(\n\t\t\t\t\t\tcontext, fileRankEl);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlong rootFolderId = GetterUtil.getLong(\n\t\t\t\troot.attributeValue(\"root-folder-id\"));\n\n\t\t\tif (Validator.isNotNull(rootFolderId)) {\n\t\t\t\tMap<Long, Long> folderPKs =\n\t\t\t\t\t(Map<Long, Long>)context.getNewPrimaryKeysMap(\n\t\t\t\t\t\tDLFolder.class);\n\n\t\t\t\trootFolderId = MapUtil.getLong(\n\t\t\t\t\tfolderPKs, rootFolderId, rootFolderId);\n\n\t\t\t\tpreferences.setValue(\n\t\t\t\t\t\"rootFolderId\", String.valueOf(rootFolderId));\n\t\t\t}\n\n\t\t\treturn preferences;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new PortletDataException(e);\n\t\t}\n\t}","id":46714,"modified_method":"protected PortletPreferences doImportData(\n\t\t\tPortletDataContext context, String portletId,\n\t\t\tPortletPreferences preferences, String data)\n\t\tthrows Exception {\n\n\t\tcontext.importPermissions(\n\t\t\t\"com.liferay.portlet.documentlibrary\",\n\t\t\tcontext.getSourceGroupId(), context.getScopeGroupId());\n\n\t\tDocument document = SAXReaderUtil.read(data);\n\n\t\tElement rootElement = document.getRootElement();\n\n\t\tElement foldersElement = rootElement.element(\"folders\");\n\n\t\tList<Element> folderElements = foldersElement.elements(\"folder\");\n\n\t\tfor (Element folderElement : folderElements) {\n\t\t\tDLPortletDataHandlerImpl.importFolder(context, folderElement);\n\t\t}\n\n\t\tElement fileEntriesElement = rootElement.element(\"file-entries\");\n\n\t\tList<Element> fileEntryElements = fileEntriesElement.elements(\n\t\t\t\"file-entry\");\n\n\t\tfor (Element fileEntryElement : fileEntryElements) {\n\t\t\tDLPortletDataHandlerImpl.importFileEntry(context, fileEntryElement);\n\t\t}\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"shortcuts\")) {\n\t\t\tList<Element> fileShortcutElements = rootElement.element(\n\t\t\t\t\"file-shortcuts\").elements(\"file-shortcut\");\n\n\t\t\tfor (Element fileShortcutElement : fileShortcutElements) {\n\t\t\t\tDLPortletDataHandlerImpl.importFileShortcut(\n\t\t\t\t\tcontext, fileShortcutElement);\n\t\t\t}\n\t\t}\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"ranks\")) {\n\t\t\tElement fileRanksElement = rootElement.element(\"file-ranks\");\n\n\t\t\tList<Element> fileRankElements = fileRanksElement.elements(\n\t\t\t\t\"file-rank\");\n\n\t\t\tfor (Element fileRankElement : fileRankElements) {\n\t\t\t\tDLPortletDataHandlerImpl.importFileRank(\n\t\t\t\t\tcontext, fileRankElement);\n\t\t\t}\n\t\t}\n\n\t\tlong rootFolderId = GetterUtil.getLong(\n\t\t\trootElement.attributeValue(\"root-folder-id\"));\n\n\t\tif (Validator.isNotNull(rootFolderId)) {\n\t\t\tMap<Long, Long> folderPKs =\n\t\t\t\t(Map<Long, Long>)context.getNewPrimaryKeysMap(DLFolder.class);\n\n\t\t\trootFolderId = MapUtil.getLong(\n\t\t\t\tfolderPKs, rootFolderId, rootFolderId);\n\n\t\t\tpreferences.setValue(\"rootFolderId\", String.valueOf(rootFolderId));\n\t\t}\n\n\t\treturn preferences;\n\t}","commit_id":"92cd0e123dd2d3d0f3030fcf2fc1a802d1498263","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void importFileEntry(\n\t\t\tPortletDataContext context, Element fileEntryEl)\n\t\tthrows Exception {\n\n\t\tString path = fileEntryEl.attributeValue(\"path\");\n\n\t\tif (!context.isPathNotProcessed(path)) {\n\t\t\treturn;\n\t\t}\n\n\t\tDLFileEntry fileEntry =\n\t\t\t(DLFileEntry)context.getZipEntryAsObject(path);\n\n\t\tString binPath = fileEntryEl.attributeValue(\"bin-path\");\n\n\t\tlong userId = context.getUserId(fileEntry.getUserUuid());\n\t\tlong groupId = context.getScopeGroupId();\n\n\t\tMap<Long, Long> folderPKs =\n\t\t\t(Map<Long, Long>)context.getNewPrimaryKeysMap(\n\t\t\t\tDLFolder.class);\n\n\t\tlong folderId = MapUtil.getLong(\n\t\t\tfolderPKs, fileEntry.getFolderId(), fileEntry.getFolderId());\n\n\t\tlong[] assetCategoryIds = null;\n\t\tString[] assetTagNames = null;\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"categories\")) {\n\t\t\tassetCategoryIds = context.getAssetCategoryIds(\n\t\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\t\t}\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"tags\")) {\n\t\t\tassetTagNames = context.getAssetTagNames(\n\t\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\t\t}\n\n\t\tServiceContext serviceContext = new ServiceContext();\n\n\t\tserviceContext.setAddCommunityPermissions(true);\n\t\tserviceContext.setAddGuestPermissions(true);\n\t\tserviceContext.setAssetCategoryIds(assetCategoryIds);\n\t\tserviceContext.setAssetTagNames(assetTagNames);\n\t\tserviceContext.setCreateDate(fileEntry.getCreateDate());\n\t\tserviceContext.setModifiedDate(fileEntry.getModifiedDate());\n\t\tserviceContext.setScopeGroupId(groupId);\n\n\t\tInputStream is = context.getZipEntryAsInputStream(binPath);\n\n\t\tif ((folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) &&\n\t\t\t(folderId == fileEntry.getFolderId())) {\n\n\t\t\tString folderPath = getImportFolderPath(context, folderId);\n\n\t\t\tDLFolder folder = (DLFolder)context.getZipEntryAsObject(folderPath);\n\n\t\t\timportFolder(context, folder);\n\n\t\t\tfolderId = MapUtil.getLong(\n\t\t\t\tfolderPKs, fileEntry.getFolderId(), fileEntry.getFolderId());\n\t\t}\n\n\t\tDLFileEntry importedFileEntry = null;\n\n\t\ttry {\n\t\t\tif ((folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) &&\n\t\t\t\t(folderId > 0)) {\n\n\t\t\t\tDLFolderUtil.findByPrimaryKey(folderId);\n\t\t\t}\n\n\t\t\tif (context.isDataStrategyMirror()) {\n\t\t\t\tDLFileEntry existingFileEntry = DLFileEntryUtil.fetchByUUID_G(\n\t\t\t\t\tfileEntry.getUuid(), groupId);\n\n\t\t\t\tif (existingFileEntry == null) {\n\t\t\t\t\tserviceContext.setUuid(fileEntry.getUuid());\n\n\t\t\t\t\timportedFileEntry =\n\t\t\t\t\t\tDLFileEntryLocalServiceUtil.addFileEntry(\n\t\t\t\t\t\t\tuserId, groupId, folderId, fileEntry.getName(),\n\t\t\t\t\t\t\tfileEntry.getTitle(), fileEntry.getDescription(),\n\t\t\t\t\t\t\tnull, fileEntry.getExtraSettings(), is,\n\t\t\t\t\t\t\tfileEntry.getSize(), serviceContext);\n\t\t\t\t}\n\t\t\t\telse if (!isDuplicateFileEntry(fileEntry, existingFileEntry)) {\n\t\t\t\t\tDLFileEntryLocalServiceUtil.updateFileEntry(\n\t\t\t\t\t\tuserId, groupId, existingFileEntry.getFolderId(),\n\t\t\t\t\t\texistingFileEntry.getName(), fileEntry.getTitle(),\n\t\t\t\t\t\tfileEntry.getTitle(), fileEntry.getDescription(), null,\n\t\t\t\t\t\ttrue, fileEntry.getExtraSettings(), is,\n\t\t\t\t\t\tfileEntry.getSize(), serviceContext);\n\n\t\t\t\t\timportedFileEntry =\n\t\t\t\t\t\tDLFileEntryLocalServiceUtil.moveFileEntry(\n\t\t\t\t\t\t\tuserId, groupId, existingFileEntry.getFolderId(),\n\t\t\t\t\t\t\tfolderId, existingFileEntry.getName(),\n\t\t\t\t\t\t\tserviceContext);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tDLFileVersion latestFileVersion =\n\t\t\t\t\t\tDLFileVersionLocalServiceUtil.getLatestFileVersion(\n\t\t\t\t\t\t\tgroupId, folderId, existingFileEntry.getName());\n\n\t\t\t\t\tDLFileEntryLocalServiceUtil.updateAsset(\n\t\t\t\t\t\tuserId, existingFileEntry, latestFileVersion,\n\t\t\t\t\t\tassetCategoryIds, assetTagNames);\n\n\t\t\t\t\tIndexer indexer = IndexerRegistryUtil.getIndexer(\n\t\t\t\t\t\tDLFileEntry.class);\n\n\t\t\t\t\tindexer.reindex(existingFileEntry);\n\n\t\t\t\t\timportedFileEntry = existingFileEntry;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tString title = fileEntry.getTitle();\n\n\t\t\t\ttry {\n\t\t\t\t\timportedFileEntry =\n\t\t\t\t\t\tDLFileEntryLocalServiceUtil.addFileEntry(\n\t\t\t\t\t\t\tuserId, groupId, folderId, fileEntry.getName(),\n\t\t\t\t\t\t\ttitle, fileEntry.getDescription(), null,\n\t\t\t\t\t\t\tfileEntry.getExtraSettings(), is,\n\t\t\t\t\t\t\tfileEntry.getSize(), serviceContext);\n\t\t\t\t}\n\t\t\t\tcatch (DuplicateFileException dfe) {\n\t\t\t\t\tString[] titleParts = title.split(\"\\\\.\", 2);\n\n\t\t\t\t\ttitle = titleParts[0] + PwdGenerator.getPassword();\n\n\t\t\t\t\tif (titleParts.length > 1) {\n\t\t\t\t\t\ttitle += StringPool.PERIOD + titleParts[1];\n\t\t\t\t\t}\n\n\t\t\t\t\timportedFileEntry =\n\t\t\t\t\t\tDLFileEntryLocalServiceUtil.addFileEntry(\n\t\t\t\t\t\t\tuserId, groupId, folderId, fileEntry.getName(),\n\t\t\t\t\t\t\ttitle, fileEntry.getDescription(), null,\n\t\t\t\t\t\t\tfileEntry.getExtraSettings(), is,\n\t\t\t\t\t\t\tfileEntry.getSize(), serviceContext);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tMap<Long, Long> fileEntryPKs =\n\t\t\t\t(Map<Long, Long>)context.getNewPrimaryKeysMap(\n\t\t\t\t\tDLFileEntry.class);\n\n\t\t\tfileEntryPKs.put(\n\t\t\t\tfileEntry.getFileEntryId(), importedFileEntry.getFileEntryId());\n\n\t\t\tMap<String, String> fileEntryNames =\n\t\t\t\t(Map<String, String>)context.getNewPrimaryKeysMap(\n\t\t\t\t\tDLFileEntry.class.getName() + \".name\");\n\n\t\t\tfileEntryNames.put(\n\t\t\t\tfileEntry.getName(), importedFileEntry.getName());\n\n\t\t\tString lockKey = DLUtil.getLockId(\n\t\t\t\tfileEntry.getGroupId(), fileEntry.getFolderId(),\n\t\t\t\tfileEntry.getName());\n\n\t\t\tString newLockKey = DLUtil.getLockId(\n\t\t\t\timportedFileEntry.getGroupId(), importedFileEntry.getFolderId(),\n\t\t\t\timportedFileEntry.getName());\n\n\t\t\tcontext.importLocks(DLFileEntry.class, lockKey, newLockKey);\n\n\t\t\tcontext.importPermissions(\n\t\t\t\tDLFileEntry.class, fileEntry.getFileEntryId(),\n\t\t\t\timportedFileEntry.getFileEntryId());\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"comments\")) {\n\t\t\t\tcontext.importComments(\n\t\t\t\t\tDLFileEntry.class, fileEntry.getFileEntryId(),\n\t\t\t\t\timportedFileEntry.getFileEntryId(), groupId);\n\t\t\t}\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"ratings\")) {\n\t\t\t\tcontext.importRatingsEntries(\n\t\t\t\t\tDLFileEntry.class, fileEntry.getFileEntryId(),\n\t\t\t\t\timportedFileEntry.getFileEntryId());\n\t\t\t}\n\t\t}\n\t\tcatch (NoSuchFolderException nsfe) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find the parent folder for entry \" +\n\t\t\t\t\tfileEntry.getFileEntryId());\n\t\t}\n\t}","id":46715,"modified_method":"public static void importFileEntry(\n\t\t\tPortletDataContext context, Element fileEntryElement)\n\t\tthrows Exception {\n\n\t\tString path = fileEntryElement.attributeValue(\"path\");\n\n\t\tif (!context.isPathNotProcessed(path)) {\n\t\t\treturn;\n\t\t}\n\n\t\tDLFileEntry fileEntry = (DLFileEntry)context.getZipEntryAsObject(path);\n\n\t\tString binPath = fileEntryElement.attributeValue(\"bin-path\");\n\n\t\tlong userId = context.getUserId(fileEntry.getUserUuid());\n\n\t\tMap<Long, Long> folderPKs =\n\t\t\t(Map<Long, Long>)context.getNewPrimaryKeysMap(DLFolder.class);\n\n\t\tlong folderId = MapUtil.getLong(\n\t\t\tfolderPKs, fileEntry.getFolderId(), fileEntry.getFolderId());\n\n\t\tlong[] assetCategoryIds = null;\n\t\tString[] assetTagNames = null;\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"categories\")) {\n\t\t\tassetCategoryIds = context.getAssetCategoryIds(\n\t\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\t\t}\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"tags\")) {\n\t\t\tassetTagNames = context.getAssetTagNames(\n\t\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\t\t}\n\n\t\tServiceContext serviceContext = new ServiceContext();\n\n\t\tserviceContext.setAddCommunityPermissions(true);\n\t\tserviceContext.setAddGuestPermissions(true);\n\t\tserviceContext.setAssetCategoryIds(assetCategoryIds);\n\t\tserviceContext.setAssetTagNames(assetTagNames);\n\t\tserviceContext.setCreateDate(fileEntry.getCreateDate());\n\t\tserviceContext.setModifiedDate(fileEntry.getModifiedDate());\n\t\tserviceContext.setScopeGroupId(context.getScopeGroupId());\n\n\t\tInputStream is = context.getZipEntryAsInputStream(binPath);\n\n\t\tif ((folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) &&\n\t\t\t(folderId == fileEntry.getFolderId())) {\n\n\t\t\tString folderPath = getImportFolderPath(context, folderId);\n\n\t\t\tDLFolder folder = (DLFolder)context.getZipEntryAsObject(folderPath);\n\n\t\t\timportFolder(context, folder);\n\n\t\t\tfolderId = MapUtil.getLong(\n\t\t\t\tfolderPKs, fileEntry.getFolderId(), fileEntry.getFolderId());\n\t\t}\n\n\t\tDLFileEntry importedFileEntry = null;\n\n\t\tif (context.isDataStrategyMirror()) {\n\t\t\tDLFileEntry existingFileEntry = DLFileEntryUtil.fetchByUUID_G(\n\t\t\t\tfileEntry.getUuid(), context.getScopeGroupId());\n\n\t\t\tif (existingFileEntry == null) {\n\t\t\t\tserviceContext.setUuid(fileEntry.getUuid());\n\n\t\t\t\timportedFileEntry =\n\t\t\t\t\tDLFileEntryLocalServiceUtil.addFileEntry(\n\t\t\t\t\t\tuserId, context.getScopeGroupId(), folderId,\n\t\t\t\t\t\tfileEntry.getName(), fileEntry.getTitle(),\n\t\t\t\t\t\tfileEntry.getDescription(), null,\n\t\t\t\t\t\tfileEntry.getExtraSettings(), is, fileEntry.getSize(),\n\t\t\t\t\t\tserviceContext);\n\t\t\t}\n\t\t\telse if (!isDuplicateFileEntry(fileEntry, existingFileEntry)) {\n\t\t\t\tDLFileEntryLocalServiceUtil.updateFileEntry(\n\t\t\t\t\tuserId, context.getScopeGroupId(),\n\t\t\t\t\texistingFileEntry.getFolderId(),\n\t\t\t\t\texistingFileEntry.getName(), fileEntry.getTitle(),\n\t\t\t\t\tfileEntry.getTitle(), fileEntry.getDescription(), null,\n\t\t\t\t\ttrue, fileEntry.getExtraSettings(), is, fileEntry.getSize(),\n\t\t\t\t\tserviceContext);\n\n\t\t\t\timportedFileEntry =\n\t\t\t\t\tDLFileEntryLocalServiceUtil.moveFileEntry(\n\t\t\t\t\t\tuserId, context.getScopeGroupId(),\n\t\t\t\t\t\texistingFileEntry.getFolderId(), folderId,\n\t\t\t\t\t\texistingFileEntry.getName(), serviceContext);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tDLFileVersion latestFileVersion =\n\t\t\t\t\tDLFileVersionLocalServiceUtil.getLatestFileVersion(\n\t\t\t\t\t\tcontext.getScopeGroupId(), folderId,\n\t\t\t\t\t\texistingFileEntry.getName());\n\n\t\t\t\tDLFileEntryLocalServiceUtil.updateAsset(\n\t\t\t\t\tuserId, existingFileEntry, latestFileVersion,\n\t\t\t\t\tassetCategoryIds, assetTagNames);\n\n\t\t\t\tIndexer indexer = IndexerRegistryUtil.getIndexer(\n\t\t\t\t\tDLFileEntry.class);\n\n\t\t\t\tindexer.reindex(existingFileEntry);\n\n\t\t\t\timportedFileEntry = existingFileEntry;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tString title = fileEntry.getTitle();\n\n\t\t\ttry {\n\t\t\t\timportedFileEntry =\n\t\t\t\t\tDLFileEntryLocalServiceUtil.addFileEntry(\n\t\t\t\t\t\tuserId, context.getScopeGroupId(), folderId,\n\t\t\t\t\t\tfileEntry.getName(), title, fileEntry.getDescription(),\n\t\t\t\t\t\tnull, fileEntry.getExtraSettings(), is,\n\t\t\t\t\t\tfileEntry.getSize(), serviceContext);\n\t\t\t}\n\t\t\tcatch (DuplicateFileException dfe) {\n\t\t\t\tString[] titleParts = title.split(\"\\\\.\", 2);\n\n\t\t\t\ttitle = titleParts[0] + PwdGenerator.getPassword();\n\n\t\t\t\tif (titleParts.length > 1) {\n\t\t\t\t\ttitle += StringPool.PERIOD + titleParts[1];\n\t\t\t\t}\n\n\t\t\t\timportedFileEntry =\n\t\t\t\t\tDLFileEntryLocalServiceUtil.addFileEntry(\n\t\t\t\t\t\tuserId, context.getScopeGroupId(), folderId,\n\t\t\t\t\t\tfileEntry.getName(), title, fileEntry.getDescription(),\n\t\t\t\t\t\tnull, fileEntry.getExtraSettings(), is,\n\t\t\t\t\t\tfileEntry.getSize(), serviceContext);\n\t\t\t}\n\t\t}\n\n\t\tMap<Long, Long> fileEntryPKs =\n\t\t\t(Map<Long, Long>)context.getNewPrimaryKeysMap(DLFileEntry.class);\n\n\t\tfileEntryPKs.put(\n\t\t\tfileEntry.getFileEntryId(), importedFileEntry.getFileEntryId());\n\n\t\tMap<String, String> fileEntryNames =\n\t\t\t(Map<String, String>)context.getNewPrimaryKeysMap(\n\t\t\t\tDLFileEntry.class.getName() + \".name\");\n\n\t\tfileEntryNames.put(fileEntry.getName(), importedFileEntry.getName());\n\n\t\tString lockKey = DLUtil.getLockId(\n\t\t\tfileEntry.getGroupId(), fileEntry.getFolderId(),\n\t\t\tfileEntry.getName());\n\n\t\tString newLockKey = DLUtil.getLockId(\n\t\t\timportedFileEntry.getGroupId(), importedFileEntry.getFolderId(),\n\t\t\timportedFileEntry.getName());\n\n\t\tcontext.importLocks(DLFileEntry.class, lockKey, newLockKey);\n\n\t\tcontext.importPermissions(\n\t\t\tDLFileEntry.class, fileEntry.getFileEntryId(),\n\t\t\timportedFileEntry.getFileEntryId());\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"comments\")) {\n\t\t\tcontext.importComments(\n\t\t\t\tDLFileEntry.class, fileEntry.getFileEntryId(),\n\t\t\t\timportedFileEntry.getFileEntryId(), context.getScopeGroupId());\n\t\t}\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"ratings\")) {\n\t\t\tcontext.importRatingsEntries(\n\t\t\t\tDLFileEntry.class, fileEntry.getFileEntryId(),\n\t\t\t\timportedFileEntry.getFileEntryId());\n\t\t}\n\t}","commit_id":"92cd0e123dd2d3d0f3030fcf2fc1a802d1498263","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void exportFolder(\n\t\t\tPortletDataContext context, Element foldersEl,\n\t\t\tElement fileEntriesEl, Element fileShortcutsEl, Element fileRanksEl,\n\t\t\tDLFolder folder)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (context.isWithinDateRange(folder.getModifiedDate())) {\n\t\t\texportParentFolder(context, foldersEl, folder.getParentFolderId());\n\n\t\t\tString path = getFolderPath(context, folder);\n\n\t\t\tif (context.isPathNotProcessed(path)) {\n\t\t\t\tElement folderEl = foldersEl.addElement(\"folder\");\n\n\t\t\t\tfolderEl.addAttribute(\"path\", path);\n\n\t\t\t\tfolder.setUserUuid(folder.getUserUuid());\n\n\t\t\t\tcontext.addPermissions(DLFolder.class, folder.getFolderId());\n\n\t\t\t\tcontext.addZipEntry(path, folder);\n\t\t\t}\n\t\t}\n\n\t\tList<DLFileEntry> fileEntries = DLFileEntryUtil.findByG_F(\n\t\t\tfolder.getGroupId(), folder.getFolderId());\n\n\t\tfor (DLFileEntry fileEntry : fileEntries) {\n\t\t\texportFileEntry(\n\t\t\t\tcontext, foldersEl, fileEntriesEl, fileRanksEl, fileEntry);\n\t\t}\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"shortcuts\")) {\n\t\t\tList<DLFileShortcut> fileShortcuts = DLFileShortcutUtil.findByG_F(\n\t\t\t\tfolder.getGroupId(), folder.getFolderId());\n\n\t\t\tfor (DLFileShortcut fileShortcut : fileShortcuts) {\n\t\t\t\texportFileShortcut(\n\t\t\t\t\tcontext, foldersEl, fileShortcutsEl, fileShortcut);\n\t\t\t}\n\t\t}\n\t}","id":46716,"modified_method":"protected static void exportFolder(\n\t\t\tPortletDataContext context, Element foldersElement,\n\t\t\tElement fileEntriesElement, Element fileShortcutsElement,\n\t\t\tElement fileRanksElement, DLFolder folder)\n\t\tthrows Exception {\n\n\t\tif (context.isWithinDateRange(folder.getModifiedDate())) {\n\t\t\texportParentFolder(\n\t\t\t\tcontext, foldersElement, folder.getParentFolderId());\n\n\t\t\tString path = getFolderPath(context, folder);\n\n\t\t\tif (context.isPathNotProcessed(path)) {\n\t\t\t\tElement folderElement = foldersElement.addElement(\"folder\");\n\n\t\t\t\tfolderElement.addAttribute(\"path\", path);\n\n\t\t\t\tfolder.setUserUuid(folder.getUserUuid());\n\n\t\t\t\tcontext.addPermissions(DLFolder.class, folder.getFolderId());\n\n\t\t\t\tcontext.addZipEntry(path, folder);\n\t\t\t}\n\t\t}\n\n\t\tList<DLFileEntry> fileEntries = DLFileEntryUtil.findByG_F(\n\t\t\tfolder.getGroupId(), folder.getFolderId());\n\n\t\tfor (DLFileEntry fileEntry : fileEntries) {\n\t\t\texportFileEntry(\n\t\t\t\tcontext, foldersElement, fileEntriesElement, fileRanksElement,\n\t\t\t\tfileEntry);\n\t\t}\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"shortcuts\")) {\n\t\t\tList<DLFileShortcut> fileShortcuts = DLFileShortcutUtil.findByG_F(\n\t\t\t\tfolder.getGroupId(), folder.getFolderId());\n\n\t\t\tfor (DLFileShortcut fileShortcut : fileShortcuts) {\n\t\t\t\texportFileShortcut(\n\t\t\t\t\tcontext, foldersElement, fileShortcutsElement,\n\t\t\t\t\tfileShortcut);\n\t\t\t}\n\t\t}\n\t}","commit_id":"92cd0e123dd2d3d0f3030fcf2fc1a802d1498263","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void importFileShortcut(\n\t\t\tPortletDataContext context, Element fileShortcutEl)\n\t\tthrows Exception {\n\n\t\tString path = fileShortcutEl.attributeValue(\"path\");\n\n\t\tif (!context.isPathNotProcessed(path)) {\n\t\t\treturn;\n\t\t}\n\n\t\tDLFileShortcut fileShortcut =\n\t\t\t(DLFileShortcut)context.getZipEntryAsObject(path);\n\n\t\timportFileShortcut(context, fileShortcut);\n\t}","id":46717,"modified_method":"protected static void importFileShortcut(\n\t\t\tPortletDataContext context, Element fileShortcutElement)\n\t\tthrows Exception {\n\n\t\tString path = fileShortcutElement.attributeValue(\"path\");\n\n\t\tif (!context.isPathNotProcessed(path)) {\n\t\t\treturn;\n\t\t}\n\n\t\tDLFileShortcut fileShortcut =\n\t\t\t(DLFileShortcut)context.getZipEntryAsObject(path);\n\n\t\timportFileShortcut(context, fileShortcut);\n\t}","commit_id":"92cd0e123dd2d3d0f3030fcf2fc1a802d1498263","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void importFileRank(\n\t\t\tPortletDataContext context, Element fileRankEl)\n\t\tthrows Exception {\n\n\t\tString path = fileRankEl.attributeValue(\"path\");\n\n\t\tif (!context.isPathNotProcessed(path)) {\n\t\t\treturn;\n\t\t}\n\n\t\tDLFileRank fileRank =\n\t\t\t(DLFileRank)context.getZipEntryAsObject(path);\n\n\t\timportFileRank(context, fileRank);\n\t}","id":46718,"modified_method":"public static void importFileRank(\n\t\t\tPortletDataContext context, Element fileRankElement)\n\t\tthrows Exception {\n\n\t\tString path = fileRankElement.attributeValue(\"path\");\n\n\t\tif (!context.isPathNotProcessed(path)) {\n\t\t\treturn;\n\t\t}\n\n\t\tDLFileRank fileRank =\n\t\t\t(DLFileRank)context.getZipEntryAsObject(path);\n\n\t\timportFileRank(context, fileRank);\n\t}","commit_id":"92cd0e123dd2d3d0f3030fcf2fc1a802d1498263","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected static String getFolderName(\n\t\t\tlong companyId, long groupId, long parentFolderId, String name,\n\t\t\tint count)\n\t\tthrows SystemException {\n\n\t\tDLFolder folder = DLFolderUtil.fetchByG_P_N(\n\t\t\tgroupId, parentFolderId, name);\n\n\t\tif (folder == null) {\n\t\t\treturn name;\n\t\t}\n\n\t\tif (Pattern.matches(\".* \\\\(\\\\d+\\\\)\", name)) {\n\t\t\tint pos = name.lastIndexOf(\" (\");\n\n\t\t\tname = name.substring(0, pos);\n\t\t}\n\n\t\tStringBundler sb = new StringBundler(5);\n\n\t\tsb.append(name);\n\t\tsb.append(StringPool.SPACE);\n\t\tsb.append(StringPool.OPEN_PARENTHESIS);\n\t\tsb.append(count);\n\t\tsb.append(StringPool.CLOSE_PARENTHESIS);\n\n\t\tname = sb.toString();\n\n\t\treturn getFolderName(companyId, groupId, parentFolderId, name, ++count);\n\t}","id":46719,"modified_method":"protected static String getFolderName(\n\t\t\tlong companyId, long groupId, long parentFolderId, String name,\n\t\t\tint count)\n\t\tthrows Exception {\n\n\t\tDLFolder folder = DLFolderUtil.fetchByG_P_N(\n\t\t\tgroupId, parentFolderId, name);\n\n\t\tif (folder == null) {\n\t\t\treturn name;\n\t\t}\n\n\t\tif (Pattern.matches(\".* \\\\(\\\\d+\\\\)\", name)) {\n\t\t\tint pos = name.lastIndexOf(\" (\");\n\n\t\t\tname = name.substring(0, pos);\n\t\t}\n\n\t\tStringBundler sb = new StringBundler(5);\n\n\t\tsb.append(name);\n\t\tsb.append(StringPool.SPACE);\n\t\tsb.append(StringPool.OPEN_PARENTHESIS);\n\t\tsb.append(count);\n\t\tsb.append(StringPool.CLOSE_PARENTHESIS);\n\n\t\tname = sb.toString();\n\n\t\treturn getFolderName(companyId, groupId, parentFolderId, name, ++count);\n\t}","commit_id":"92cd0e123dd2d3d0f3030fcf2fc1a802d1498263","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void importFileRank(\n\t\t\tPortletDataContext context, DLFileRank rank)\n\t\tthrows Exception {\n\n\t\tlong userId = context.getUserId(rank.getUserUuid());\n\n\t\tMap<Long, Long> folderPKs =\n\t\t\t(Map<Long, Long>)context.getNewPrimaryKeysMap(\n\t\t\t\tDLFolder.class);\n\n\t\tlong folderId = MapUtil.getLong(\n\t\t\tfolderPKs, rank.getFolderId(), rank.getFolderId());\n\n\t\tMap<String, String> fileEntryNames =\n\t\t\t(Map<String, String>)context.getNewPrimaryKeysMap(\n\t\t\t\tDLFileEntry.class.getName() + \".name\");\n\n\t\tString name = fileEntryNames.get(rank.getName());\n\n\t\tif (name == null) {\n\t\t\tname = rank.getName();\n\t\t}\n\n\t\tServiceContext serviceContext = new ServiceContext();\n\n\t\tserviceContext.setCreateDate(rank.getCreateDate());\n\n\t\tif ((folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) &&\n\t\t\t(folderId == rank.getFolderId())) {\n\n\t\t\tString path = getImportFolderPath(context, folderId);\n\n\t\t\tDLFolder folder = (DLFolder)context.getZipEntryAsObject(path);\n\n\t\t\timportFolder(context, folder);\n\n\t\t\tfolderId = MapUtil.getLong(\n\t\t\t\tfolderPKs, rank.getFolderId(), rank.getFolderId());\n\t\t}\n\n\t\ttry {\n\t\t\tDLFolderUtil.findByPrimaryKey(folderId);\n\n\t\t\tDLFileRankLocalServiceUtil.updateFileRank(\n\t\t\t\tcontext.getScopeGroupId(), context.getCompanyId(), userId,\n\t\t\t\tfolderId, name, serviceContext);\n\t\t}\n\t\tcatch (NoSuchFolderException nsfe) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find the folder for rank \" + rank.getFileRankId());\n\t\t}\n\t}","id":46720,"modified_method":"protected static void importFileRank(\n\t\t\tPortletDataContext context, DLFileRank rank)\n\t\tthrows Exception {\n\n\t\tlong userId = context.getUserId(rank.getUserUuid());\n\n\t\tMap<Long, Long> folderPKs =\n\t\t\t(Map<Long, Long>)context.getNewPrimaryKeysMap(\n\t\t\t\tDLFolder.class);\n\n\t\tlong folderId = MapUtil.getLong(\n\t\t\tfolderPKs, rank.getFolderId(), rank.getFolderId());\n\n\t\tMap<String, String> fileEntryNames =\n\t\t\t(Map<String, String>)context.getNewPrimaryKeysMap(\n\t\t\t\tDLFileEntry.class.getName() + \".name\");\n\n\t\tString name = fileEntryNames.get(rank.getName());\n\n\t\tif (name == null) {\n\t\t\tname = rank.getName();\n\t\t}\n\n\t\tServiceContext serviceContext = new ServiceContext();\n\n\t\tserviceContext.setCreateDate(rank.getCreateDate());\n\n\t\tif ((folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) &&\n\t\t\t(folderId == rank.getFolderId())) {\n\n\t\t\tString path = getImportFolderPath(context, folderId);\n\n\t\t\tDLFolder folder = (DLFolder)context.getZipEntryAsObject(path);\n\n\t\t\timportFolder(context, folder);\n\n\t\t\tfolderId = MapUtil.getLong(\n\t\t\t\tfolderPKs, rank.getFolderId(), rank.getFolderId());\n\t\t}\n\n\t\tDLFileRankLocalServiceUtil.updateFileRank(\n\t\t\tcontext.getScopeGroupId(), context.getCompanyId(), userId, folderId,\n\t\t\tname, serviceContext);\n\t}","commit_id":"92cd0e123dd2d3d0f3030fcf2fc1a802d1498263","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public PortletPreferences deleteData(\n\t\t\tPortletDataContext context, String portletId,\n\t\t\tPortletPreferences preferences)\n\t\tthrows PortletDataException {\n\n\t\ttry {\n\t\t\tif (!context.addPrimaryKey(\n\t\t\t\t\tDLPortletDataHandlerImpl.class, \"deleteData\")) {\n\n\t\t\t\tDLFolderLocalServiceUtil.deleteFolders(\n\t\t\t\t\tcontext.getScopeGroupId());\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new PortletDataException(e);\n\t\t}\n\t}","id":46721,"modified_method":"protected PortletPreferences doDeleteData(\n\t\t\tPortletDataContext context, String portletId,\n\t\t\tPortletPreferences preferences)\n\t\tthrows Exception {\n\n\t\tif (!context.addPrimaryKey(\n\t\t\t\tDLPortletDataHandlerImpl.class, \"deleteData\")) {\n\n\t\t\tDLFolderLocalServiceUtil.deleteFolders(context.getScopeGroupId());\n\t\t}\n\n\t\treturn null;\n\t}","commit_id":"92cd0e123dd2d3d0f3030fcf2fc1a802d1498263","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected static void exportFileShortcut(\n\t\t\tPortletDataContext context, Element foldersEl,\n\t\t\tElement fileShortcutsEl, DLFileShortcut fileShortcut)\n\t\tthrows PortalException, SystemException {\n\n\t\texportParentFolder(context, foldersEl, fileShortcut.getFolderId());\n\n\t\tString path = getFileShortcutPath(context, fileShortcut);\n\n\t\tif (context.isPathNotProcessed(path)) {\n\t\t\tElement fileShortcutEl = fileShortcutsEl.addElement(\n\t\t\t\t\"file-shortcut\");\n\n\t\t\tfileShortcutEl.addAttribute(\"path\", path);\n\n\t\t\tfileShortcut.setUserUuid(fileShortcut.getUserUuid());\n\n\t\t\tcontext.addPermissions(\n\t\t\t\tDLFileShortcut.class, fileShortcut.getFileShortcutId());\n\n\t\t\tcontext.addZipEntry(path, fileShortcut);\n\t\t}\n\t}","id":46722,"modified_method":"protected static void exportFileShortcut(\n\t\t\tPortletDataContext context, Element foldersElement,\n\t\t\tElement fileShortcutsElement, DLFileShortcut fileShortcut)\n\t\tthrows Exception {\n\n\t\texportParentFolder(context, foldersElement, fileShortcut.getFolderId());\n\n\t\tString path = getFileShortcutPath(context, fileShortcut);\n\n\t\tif (context.isPathNotProcessed(path)) {\n\t\t\tElement fileShortcutElement = fileShortcutsElement.addElement(\n\t\t\t\t\"file-shortcut\");\n\n\t\t\tfileShortcutElement.addAttribute(\"path\", path);\n\n\t\t\tfileShortcut.setUserUuid(fileShortcut.getUserUuid());\n\n\t\t\tcontext.addPermissions(\n\t\t\t\tDLFileShortcut.class, fileShortcut.getFileShortcutId());\n\n\t\t\tcontext.addZipEntry(path, fileShortcut);\n\t\t}\n\t}","commit_id":"92cd0e123dd2d3d0f3030fcf2fc1a802d1498263","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void exportFileEntry(\n\t\t\tPortletDataContext context, Element foldersEl,\n\t\t\tElement fileEntriesEl, Element fileRanksEl, DLFileEntry fileEntry)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (!context.isWithinDateRange(fileEntry.getModifiedDate())) {\n\t\t\treturn;\n\t\t}\n\n\t\tDLFileVersion fileVersion =\n\t\t\tDLFileVersionLocalServiceUtil.getFileVersion(\n\t\t\t\tcontext.getScopeGroupId(), fileEntry.getFolderId(),\n\t\t\t\tfileEntry.getName(), fileEntry.getVersion());\n\n\t\tif (fileVersion.getStatus() != WorkflowConstants.STATUS_APPROVED) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (foldersEl != null) {\n\t\t\texportParentFolder(context, foldersEl, fileEntry.getFolderId());\n\t\t}\n\n\t\tString path = getFileEntryPath(context, fileEntry);\n\n\t\tif (context.isPathNotProcessed(path)) {\n\t\t\tElement fileEntryEl = fileEntriesEl.addElement(\"file-entry\");\n\n\t\t\tfileEntryEl.addAttribute(\"path\", path);\n\n\t\t\tString binPath = getFileEntryBinPath(context, fileEntry);\n\n\t\t\tfileEntryEl.addAttribute(\"bin-path\", binPath);\n\n\t\t\tfileEntry.setUserUuid(fileEntry.getUserUuid());\n\n\t\t\tcontext.addLocks(\n\t\t\t\tDLFileEntry.class,\n\t\t\t\tDLUtil.getLockId(\n\t\t\t\t\tfileEntry.getGroupId(), fileEntry.getFolderId(),\n\t\t\t\t\tfileEntry.getName()));\n\n\t\t\tcontext.addPermissions(\n\t\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"categories\")) {\n\t\t\t\tcontext.addAssetCategories(\n\t\t\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\t\t\t}\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"comments\")) {\n\t\t\t\tcontext.addComments(\n\t\t\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\t\t\t}\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"ratings\")) {\n\t\t\t\tcontext.addRatingsEntries(\n\t\t\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\t\t\t}\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"tags\")) {\n\t\t\t\tcontext.addAssetTags(\n\t\t\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\t\t\t}\n\n\t\t\tlong repositoryId = getRepositoryId(\n\t\t\t\tfileEntry.getGroupId(), fileEntry.getFolderId());\n\n\t\t\tInputStream is = DLLocalServiceUtil.getFileAsStream(\n\t\t\t\tfileEntry.getCompanyId(), repositoryId, fileEntry.getName(),\n\t\t\t\tfileEntry.getVersion());\n\n\t\t\tif (is == null) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(\n\t\t\t\t\t\t\"No file found for file entry \" +\n\t\t\t\t\t\t\tfileEntry.getFileEntryId());\n\t\t\t\t}\n\n\t\t\t\tfileEntryEl.detach();\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcontext.addZipEntry(\n\t\t\t\t\tgetFileEntryBinPath(context, fileEntry), is);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\ttry {\n\t\t\t\t\tis.close();\n\t\t\t\t}\n\t\t\t\tcatch (IOException ioe) {\n\t\t\t\t\t_log.error(ioe, ioe);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcontext.addZipEntry(path, fileEntry);\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"ranks\")) {\n\t\t\t\tList<DLFileRank> fileRanks = DLFileRankUtil.findByF_N(\n\t\t\t\t\tfileEntry.getFolderId(), fileEntry.getName());\n\n\t\t\t\tfor (DLFileRank fileRank : fileRanks) {\n\t\t\t\t\texportFileRank(context, fileRanksEl, fileRank);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":46723,"modified_method":"public static void exportFileEntry(\n\t\t\tPortletDataContext context, Element foldersElement,\n\t\t\tElement fileEntriesElement, Element fileRanksElement,\n\t\t\tDLFileEntry fileEntry)\n\t\tthrows Exception {\n\n\t\tif (!context.isWithinDateRange(fileEntry.getModifiedDate())) {\n\t\t\treturn;\n\t\t}\n\n\t\tDLFileVersion fileVersion =\n\t\t\tDLFileVersionLocalServiceUtil.getFileVersion(\n\t\t\t\tcontext.getScopeGroupId(), fileEntry.getFolderId(),\n\t\t\t\tfileEntry.getName(), fileEntry.getVersion());\n\n\t\tif (fileVersion.getStatus() != WorkflowConstants.STATUS_APPROVED) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (foldersElement != null) {\n\t\t\texportParentFolder(\n\t\t\t\tcontext, foldersElement, fileEntry.getFolderId());\n\t\t}\n\n\t\tString path = getFileEntryPath(context, fileEntry);\n\n\t\tif (context.isPathNotProcessed(path)) {\n\t\t\tElement fileEntryElement = fileEntriesElement.addElement(\n\t\t\t\t\"file-entry\");\n\n\t\t\tfileEntryElement.addAttribute(\"path\", path);\n\n\t\t\tString binPath = getFileEntryBinPath(context, fileEntry);\n\n\t\t\tfileEntryElement.addAttribute(\"bin-path\", binPath);\n\n\t\t\tfileEntry.setUserUuid(fileEntry.getUserUuid());\n\n\t\t\tcontext.addLocks(\n\t\t\t\tDLFileEntry.class,\n\t\t\t\tDLUtil.getLockId(\n\t\t\t\t\tfileEntry.getGroupId(), fileEntry.getFolderId(),\n\t\t\t\t\tfileEntry.getName()));\n\n\t\t\tcontext.addPermissions(\n\t\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"categories\")) {\n\t\t\t\tcontext.addAssetCategories(\n\t\t\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\t\t\t}\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"comments\")) {\n\t\t\t\tcontext.addComments(\n\t\t\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\t\t\t}\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"ratings\")) {\n\t\t\t\tcontext.addRatingsEntries(\n\t\t\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\t\t\t}\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"tags\")) {\n\t\t\t\tcontext.addAssetTags(\n\t\t\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\t\t\t}\n\n\t\t\tlong repositoryId = getRepositoryId(\n\t\t\t\tfileEntry.getGroupId(), fileEntry.getFolderId());\n\n\t\t\tInputStream is = DLLocalServiceUtil.getFileAsStream(\n\t\t\t\tfileEntry.getCompanyId(), repositoryId, fileEntry.getName(),\n\t\t\t\tfileEntry.getVersion());\n\n\t\t\tif (is == null) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(\n\t\t\t\t\t\t\"No file found for file entry \" +\n\t\t\t\t\t\t\tfileEntry.getFileEntryId());\n\t\t\t\t}\n\n\t\t\t\tfileEntryElement.detach();\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcontext.addZipEntry(\n\t\t\t\t\tgetFileEntryBinPath(context, fileEntry), is);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\ttry {\n\t\t\t\t\tis.close();\n\t\t\t\t}\n\t\t\t\tcatch (IOException ioe) {\n\t\t\t\t\t_log.error(ioe, ioe);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcontext.addZipEntry(path, fileEntry);\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"ranks\")) {\n\t\t\t\tList<DLFileRank> fileRanks = DLFileRankUtil.findByF_N(\n\t\t\t\t\tfileEntry.getFolderId(), fileEntry.getName());\n\n\t\t\t\tfor (DLFileRank fileRank : fileRanks) {\n\t\t\t\t\texportFileRank(context, fileRanksElement, fileRank);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"92cd0e123dd2d3d0f3030fcf2fc1a802d1498263","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void importFolder(\n\t\t\tPortletDataContext context, Element folderEl)\n\t\tthrows Exception {\n\n\t\tString path = folderEl.attributeValue(\"path\");\n\n\t\tif (!context.isPathNotProcessed(path)) {\n\t\t\treturn;\n\t\t}\n\n\t\tDLFolder folder = (DLFolder)context.getZipEntryAsObject(path);\n\n\t\timportFolder(context, folder);\n\t}","id":46724,"modified_method":"public static void importFolder(\n\t\t\tPortletDataContext context, Element folderElement)\n\t\tthrows Exception {\n\n\t\tString path = folderElement.attributeValue(\"path\");\n\n\t\tif (!context.isPathNotProcessed(path)) {\n\t\t\treturn;\n\t\t}\n\n\t\tDLFolder folder = (DLFolder)context.getZipEntryAsObject(path);\n\n\t\timportFolder(context, folder);\n\t}","commit_id":"92cd0e123dd2d3d0f3030fcf2fc1a802d1498263","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public PortletPreferences importData(\n\t\t\tPortletDataContext context, String portletId,\n\t\t\tPortletPreferences preferences, String data)\n\t\tthrows PortletDataException {\n\n\t\ttry {\n\t\t\tcontext.importPermissions(\n\t\t\t\t\"com.liferay.portlet.documentlibrary\",\n\t\t\t\tcontext.getSourceGroupId(), context.getScopeGroupId());\n\n\t\t\tDocument doc = SAXReaderUtil.read(data);\n\n\t\t\tElement root = doc.getRootElement();\n\n\t\t\tList<Element> folderEls = root.element(\"folders\").elements(\n\t\t\t\t\"folder\");\n\n\t\t\tfor (Element folderEl : folderEls) {\n\t\t\t\timportFolder(context, folderEl);\n\t\t\t}\n\n\t\t\tList<Element> fileEntryEls = root.element(\"file-entries\").elements(\n\t\t\t\t\"file-entry\");\n\n\t\t\tfor (Element fileEntryEl : fileEntryEls) {\n\t\t\t\timportFileEntry(context, fileEntryEl);\n\t\t\t}\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"shortcuts\")) {\n\t\t\t\tList<Element> fileShortcutEls = root.element(\n\t\t\t\t\t\"file-shortcuts\").elements(\"file-shortcut\");\n\n\t\t\t\tfor (Element fileShortcutEl : fileShortcutEls) {\n\t\t\t\t\timportFileShortcut(context, fileShortcutEl);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"ranks\")) {\n\t\t\t\tList<Element> fileRankEls = root.element(\"file-ranks\").elements(\n\t\t\t\t\t\"file-rank\");\n\n\t\t\t\tfor (Element fileRankEl : fileRankEls) {\n\t\t\t\t\timportFileRank(context, fileRankEl);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new PortletDataException(e);\n\t\t}\n\t}","id":46725,"modified_method":"protected PortletPreferences doImportData(\n\t\t\tPortletDataContext context, String portletId,\n\t\t\tPortletPreferences preferences, String data)\n\t\tthrows Exception {\n\n\t\tcontext.importPermissions(\n\t\t\t\"com.liferay.portlet.documentlibrary\",\n\t\t\tcontext.getSourceGroupId(), context.getScopeGroupId());\n\n\t\tDocument document = SAXReaderUtil.read(data);\n\n\t\tElement rootElement = document.getRootElement();\n\n\t\tElement foldersElement = rootElement.element(\"folders\");\n\n\t\tList<Element> folderElements = foldersElement.elements(\"folder\");\n\n\t\tfor (Element folderElement : folderElements) {\n\t\t\timportFolder(context, folderElement);\n\t\t}\n\n\t\tElement fileEntriesElement = rootElement.element(\"file-entries\");\n\n\t\tList<Element> fileEntryElements = fileEntriesElement.elements(\n\t\t\t\"file-entry\");\n\n\t\tfor (Element fileEntryElement : fileEntryElements) {\n\t\t\timportFileEntry(context, fileEntryElement);\n\t\t}\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"shortcuts\")) {\n\t\t\tList<Element> fileShortcutElements = rootElement.element(\n\t\t\t\t\"file-shortcuts\").elements(\"file-shortcut\");\n\n\t\t\tfor (Element fileShortcutElement : fileShortcutElements) {\n\t\t\t\timportFileShortcut(context, fileShortcutElement);\n\t\t\t}\n\t\t}\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"ranks\")) {\n\t\t\tElement fileRanksElement = rootElement.element(\"file-ranks\");\n\n\t\t\tList<Element> fileRankElements = fileRanksElement.elements(\n\t\t\t\t\"file-rank\");\n\n\t\t\tfor (Element fileRankElement : fileRankElements) {\n\t\t\t\timportFileRank(context, fileRankElement);\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}","commit_id":"92cd0e123dd2d3d0f3030fcf2fc1a802d1498263","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected static boolean isDuplicateFileEntry(\n\t\tDLFileEntry fileEntry1, DLFileEntry fileEntry2) {\n\n\t\ttry {\n\t\t\tDLFolder folder1 = fileEntry1.getFolder();\n\t\t\tDLFolder folder2 = fileEntry2.getFolder();\n\n\t\t\tif ((folder1.getUuid().equals(folder2.getUuid())) &&\n\t\t\t\t(fileEntry1.getSize() == fileEntry2.getSize()) &&\n\t\t\t\t(DLUtil.compareVersions(\n\t\t\t\t\tfileEntry1.getVersion(), fileEntry2.getVersion()) == 0) &&\n\t\t\t\t(fileEntry1.getVersionUserUuid().equals(\n\t\t\t\t\tfileEntry2.getVersionUserUuid()))) {\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tcatch (SystemException se) {\n\t\t\treturn false;\n\t\t}\n\t}","id":46726,"modified_method":"protected static boolean isDuplicateFileEntry(\n\t\tDLFileEntry fileEntry1, DLFileEntry fileEntry2) {\n\n\t\ttry {\n\t\t\tDLFolder folder1 = fileEntry1.getFolder();\n\t\t\tDLFolder folder2 = fileEntry2.getFolder();\n\n\t\t\tif ((folder1.getUuid().equals(folder2.getUuid())) &&\n\t\t\t\t(fileEntry1.getSize() == fileEntry2.getSize()) &&\n\t\t\t\t(DLUtil.compareVersions(\n\t\t\t\t\tfileEntry1.getVersion(), fileEntry2.getVersion()) == 0) &&\n\t\t\t\t(fileEntry1.getVersionUserUuid().equals(\n\t\t\t\t\tfileEntry2.getVersionUserUuid()))) {\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\treturn false;\n\t\t}\n\t}","commit_id":"92cd0e123dd2d3d0f3030fcf2fc1a802d1498263","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected static void exportFileRank(\n\t\t\tPortletDataContext context, Element fileRanksEl,\n\t\t\tDLFileRank fileRank)\n\t\tthrows SystemException {\n\n\t\tString path = getFileRankPath(context, fileRank);\n\n\t\tif (!context.isPathNotProcessed(path)) {\n\t\t\treturn;\n\t\t}\n\n\t\tElement fileRankEl = fileRanksEl.addElement(\"file-rank\");\n\n\t\tfileRankEl.addAttribute(\"path\", path);\n\n\t\tfileRank.setUserUuid(fileRank.getUserUuid());\n\n\t\tcontext.addZipEntry(path, fileRank);\n\t}","id":46727,"modified_method":"protected static void exportFileRank(\n\t\t\tPortletDataContext context, Element fileRanksElement,\n\t\t\tDLFileRank fileRank)\n\t\tthrows Exception {\n\n\t\tString path = getFileRankPath(context, fileRank);\n\n\t\tif (!context.isPathNotProcessed(path)) {\n\t\t\treturn;\n\t\t}\n\n\t\tElement fileRankElement = fileRanksElement.addElement(\"file-rank\");\n\n\t\tfileRankElement.addAttribute(\"path\", path);\n\n\t\tfileRank.setUserUuid(fileRank.getUserUuid());\n\n\t\tcontext.addZipEntry(path, fileRank);\n\t}","commit_id":"92cd0e123dd2d3d0f3030fcf2fc1a802d1498263","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void importFolder(\n\t\t\tPortletDataContext context, DLFolder folder)\n\t\tthrows Exception {\n\n\t\tlong userId = context.getUserId(folder.getUserUuid());\n\t\tlong groupId = context.getScopeGroupId();\n\n\t\tMap<Long, Long> folderPKs =\n\t\t\t(Map<Long, Long>)context.getNewPrimaryKeysMap(DLFolder.class);\n\n\t\tlong parentFolderId = MapUtil.getLong(\n\t\t\tfolderPKs, folder.getParentFolderId(),\n\t\t\tfolder.getParentFolderId());\n\n\t\tServiceContext serviceContext = new ServiceContext();\n\n\t\tserviceContext.setAddCommunityPermissions(true);\n\t\tserviceContext.setAddGuestPermissions(true);\n\t\tserviceContext.setCreateDate(folder.getCreateDate());\n\t\tserviceContext.setModifiedDate(folder.getModifiedDate());\n\n\t\tif ((parentFolderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) &&\n\t\t\t(parentFolderId == folder.getParentFolderId())) {\n\n\t\t\tString path = getImportFolderPath(context, parentFolderId);\n\n\t\t\tDLFolder parentFolder = (DLFolder)context.getZipEntryAsObject(path);\n\n\t\t\timportFolder(context, parentFolder);\n\n\t\t\tparentFolderId = MapUtil.getLong(\n\t\t\t\tfolderPKs, folder.getParentFolderId(),\n\t\t\t\tfolder.getParentFolderId());\n\t\t}\n\n\t\tDLFolder importedFolder = null;\n\n\t\ttry {\n\t\t\tif (parentFolderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\t\t\t\tDLFolderUtil.findByPrimaryKey(parentFolderId);\n\t\t\t}\n\n\t\t\tif (context.isDataStrategyMirror()) {\n\t\t\t\tDLFolder existingFolder = DLFolderUtil.fetchByUUID_G(\n\t\t\t\t\tfolder.getUuid(), groupId);\n\n\t\t\t\tif (existingFolder == null) {\n\t\t\t\t\tString name = getFolderName(\n\t\t\t\t\t\tcontext.getCompanyId(), groupId, parentFolderId,\n\t\t\t\t\t\tfolder.getName(), 2);\n\n\t\t\t\t\tserviceContext.setUuid(folder.getUuid());\n\n\t\t\t\t\timportedFolder = DLFolderLocalServiceUtil.addFolder(\n\t\t\t\t\t\tuserId, groupId, parentFolderId, name,\n\t\t\t\t\t\tfolder.getDescription(), serviceContext);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\timportedFolder = DLFolderLocalServiceUtil.updateFolder(\n\t\t\t\t\t\texistingFolder.getFolderId(), parentFolderId,\n\t\t\t\t\t\tfolder.getName(), folder.getDescription(),\n\t\t\t\t\t\tserviceContext);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tString name = getFolderName(\n\t\t\t\t\tcontext.getCompanyId(), groupId, parentFolderId,\n\t\t\t\t\tfolder.getName(), 2);\n\n\t\t\t\timportedFolder = DLFolderLocalServiceUtil.addFolder(\n\t\t\t\t\tuserId, groupId, parentFolderId, name,\n\t\t\t\t\tfolder.getDescription(), serviceContext);\n\t\t\t}\n\n\t\t\tfolderPKs.put(folder.getFolderId(), importedFolder.getFolderId());\n\n\t\t\tcontext.importPermissions(\n\t\t\t\tDLFolder.class, folder.getFolderId(),\n\t\t\t\timportedFolder.getFolderId());\n\t\t}\n\t\tcatch (NoSuchFolderException nsfe) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find the parent folder for folder \" +\n\t\t\t\t\tfolder.getFolderId());\n\t\t}\n\t}","id":46728,"modified_method":"protected static void importFolder(\n\t\t\tPortletDataContext context, DLFolder folder)\n\t\tthrows Exception {\n\n\t\tlong userId = context.getUserId(folder.getUserUuid());\n\n\t\tMap<Long, Long> folderPKs =\n\t\t\t(Map<Long, Long>)context.getNewPrimaryKeysMap(DLFolder.class);\n\n\t\tlong parentFolderId = MapUtil.getLong(\n\t\t\tfolderPKs, folder.getParentFolderId(), folder.getParentFolderId());\n\n\t\tServiceContext serviceContext = new ServiceContext();\n\n\t\tserviceContext.setAddCommunityPermissions(true);\n\t\tserviceContext.setAddGuestPermissions(true);\n\t\tserviceContext.setCreateDate(folder.getCreateDate());\n\t\tserviceContext.setModifiedDate(folder.getModifiedDate());\n\n\t\tif ((parentFolderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) &&\n\t\t\t(parentFolderId == folder.getParentFolderId())) {\n\n\t\t\tString path = getImportFolderPath(context, parentFolderId);\n\n\t\t\tDLFolder parentFolder = (DLFolder)context.getZipEntryAsObject(path);\n\n\t\t\timportFolder(context, parentFolder);\n\n\t\t\tparentFolderId = MapUtil.getLong(\n\t\t\t\tfolderPKs, folder.getParentFolderId(),\n\t\t\t\tfolder.getParentFolderId());\n\t\t}\n\n\t\tDLFolder importedFolder = null;\n\n\t\tif (context.isDataStrategyMirror()) {\n\t\t\tDLFolder existingFolder = DLFolderUtil.fetchByUUID_G(\n\t\t\t\tfolder.getUuid(), context.getScopeGroupId());\n\n\t\t\tif (existingFolder == null) {\n\t\t\t\tString name = getFolderName(\n\t\t\t\t\tcontext.getCompanyId(), context.getScopeGroupId(),\n\t\t\t\t\tparentFolderId, folder.getName(), 2);\n\n\t\t\t\tserviceContext.setUuid(folder.getUuid());\n\n\t\t\t\timportedFolder = DLFolderLocalServiceUtil.addFolder(\n\t\t\t\t\tuserId, context.getScopeGroupId(), parentFolderId, name,\n\t\t\t\t\tfolder.getDescription(), serviceContext);\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedFolder = DLFolderLocalServiceUtil.updateFolder(\n\t\t\t\t\texistingFolder.getFolderId(), parentFolderId,\n\t\t\t\t\tfolder.getName(), folder.getDescription(), serviceContext);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tString name = getFolderName(\n\t\t\t\tcontext.getCompanyId(), context.getScopeGroupId(),\n\t\t\t\tparentFolderId, folder.getName(), 2);\n\n\t\t\timportedFolder = DLFolderLocalServiceUtil.addFolder(\n\t\t\t\tuserId, context.getScopeGroupId(), parentFolderId, name,\n\t\t\t\tfolder.getDescription(), serviceContext);\n\t\t}\n\n\t\tfolderPKs.put(folder.getFolderId(), importedFolder.getFolderId());\n\n\t\tcontext.importPermissions(\n\t\t\tDLFolder.class, folder.getFolderId(), importedFolder.getFolderId());\n\t}","commit_id":"92cd0e123dd2d3d0f3030fcf2fc1a802d1498263","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public String exportData(\n\t\t\tPortletDataContext context, String portletId,\n\t\t\tPortletPreferences preferences)\n\t\tthrows PortletDataException {\n\n\t\ttry {\n\t\t\tlong groupId = context.getScopeGroupId();\n\n\t\t\tcontext.addPermissions(\n\t\t\t\t\"com.liferay.portlet.documentlibrary\", groupId);\n\n\t\t\tDocument doc = SAXReaderUtil.createDocument();\n\n\t\t\tElement root = doc.addElement(\"documentlibrary-data\");\n\n\t\t\troot.addAttribute(\"group-id\", String.valueOf(groupId));\n\n\t\t\tElement foldersEl = root.addElement(\"folders\");\n\t\t\tElement fileEntriesEl = root.addElement(\"file-entries\");\n\t\t\tElement fileShortcutsEl = root.addElement(\"file-shortcuts\");\n\t\t\tElement fileRanksEl = root.addElement(\"file-ranks\");\n\n\t\t\tList<DLFolder> folders = DLFolderUtil.findByGroupId(groupId);\n\n\t\t\tfor (DLFolder folder : folders) {\n\t\t\t\texportFolder(\n\t\t\t\t\tcontext, foldersEl, fileEntriesEl, fileShortcutsEl,\n\t\t\t\t\tfileRanksEl, folder);\n\t\t\t}\n\n\t\t\tList<DLFileEntry> fileEntries = DLFileEntryUtil.findByG_F(\n\t\t\t\tgroupId, DLFolderConstants.DEFAULT_PARENT_FOLDER_ID);\n\n\t\t\tfor (DLFileEntry fileEntry : fileEntries) {\n\t\t\t\texportFileEntry(\n\t\t\t\t\tcontext, foldersEl, fileEntriesEl, fileRanksEl, fileEntry);\n\t\t\t}\n\n\t\t\treturn doc.formattedString();\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new PortletDataException(e);\n\t\t}\n\t}","id":46729,"modified_method":"protected String doExportData(\n\t\t\tPortletDataContext context, String portletId,\n\t\t\tPortletPreferences preferences)\n\t\tthrows Exception {\n\n\t\tcontext.addPermissions(\n\t\t\t\"com.liferay.portlet.documentlibrary\", context.getScopeGroupId());\n\n\t\tDocument document = SAXReaderUtil.createDocument();\n\n\t\tElement rootElement = document.addElement(\"documentlibrary-data\");\n\n\t\trootElement.addAttribute(\n\t\t\t\"group-id\", String.valueOf(context.getScopeGroupId()));\n\n\t\tElement foldersElement = rootElement.addElement(\"folders\");\n\t\tElement fileEntriesElement = rootElement.addElement(\"file-entries\");\n\t\tElement fileShortcutsElement = rootElement.addElement(\"file-shortcuts\");\n\t\tElement fileRanksElement = rootElement.addElement(\"file-ranks\");\n\n\t\tList<DLFolder> folders = DLFolderUtil.findByGroupId(\n\t\t\tcontext.getScopeGroupId());\n\n\t\tfor (DLFolder folder : folders) {\n\t\t\texportFolder(\n\t\t\t\tcontext, foldersElement, fileEntriesElement,\n\t\t\t\tfileShortcutsElement, fileRanksElement, folder);\n\t\t}\n\n\t\tList<DLFileEntry> fileEntries = DLFileEntryUtil.findByG_F(\n\t\t\tcontext.getScopeGroupId(),\n\t\t\tDLFolderConstants.DEFAULT_PARENT_FOLDER_ID);\n\n\t\tfor (DLFileEntry fileEntry : fileEntries) {\n\t\t\texportFileEntry(\n\t\t\t\tcontext, foldersElement, fileEntriesElement, fileRanksElement,\n\t\t\t\tfileEntry);\n\t\t}\n\n\t\treturn document.formattedString();\n\t}","commit_id":"92cd0e123dd2d3d0f3030fcf2fc1a802d1498263","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void importFileShortcut(\n\t\t\tPortletDataContext context, DLFileShortcut fileShortcut)\n\t\tthrows Exception {\n\n\t\tlong userId = context.getUserId(fileShortcut.getUserUuid());\n\n\t\tMap<Long, Long> folderPKs =\n\t\t\t(Map<Long, Long>)context.getNewPrimaryKeysMap(\n\t\t\t\tDLFolder.class);\n\n\t\tlong folderId = MapUtil.getLong(\n\t\t\tfolderPKs, fileShortcut.getFolderId(),\n\t\t\tfileShortcut.getFolderId());\n\t\tlong toFolderId = MapUtil.getLong(\n\t\t\tfolderPKs, fileShortcut.getToFolderId(),\n\t\t\tfileShortcut.getToFolderId());\n\n\t\tMap<String, String> fileEntryNames =\n\t\t\t(Map<String, String>)context.getNewPrimaryKeysMap(\n\t\t\t\tDLFileEntry.class.getName() + \".name\");\n\n\t\tString toName = MapUtil.getString(\n\t\t\tfileEntryNames, fileShortcut.getToName(), fileShortcut.getToName());\n\n\t\ttry {\n\t\t\tDLFolder folder = DLFolderUtil.findByPrimaryKey(folderId);\n\n\t\t\tDLFolderUtil.findByPrimaryKey(toFolderId);\n\n\t\t\tlong groupId = folder.getGroupId();\n\n\t\t\tDLFileEntry fileEntry = DLFileEntryLocalServiceUtil.getFileEntry(\n\t\t\t\tgroupId, toFolderId, toName);\n\n\t\t\tlong[] assetCategoryIds = null;\n\t\t\tString[] assetTagNames = null;\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"categories\")) {\n\t\t\t\tassetCategoryIds = context.getAssetCategoryIds(\n\t\t\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\t\t\t}\n\n\t\t\tif (context.getBooleanParameter(_NAMESPACE, \"tags\")) {\n\t\t\t\tassetTagNames = context.getAssetTagNames(\n\t\t\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\t\t\t}\n\n\t\t\tServiceContext serviceContext = new ServiceContext();\n\n\t\t\tserviceContext.setAddCommunityPermissions(true);\n\t\t\tserviceContext.setAddGuestPermissions(true);\n\t\t\tserviceContext.setAssetCategoryIds(assetCategoryIds);\n\t\t\tserviceContext.setAssetTagNames(assetTagNames);\n\t\t\tserviceContext.setCreateDate(fileShortcut.getCreateDate());\n\t\t\tserviceContext.setModifiedDate(fileShortcut.getModifiedDate());\n\t\t\tserviceContext.setScopeGroupId(context.getScopeGroupId());\n\n\t\t\tDLFileShortcut importedFileShortcut = null;\n\n\t\t\tif (context.isDataStrategyMirror()) {\n\t\t\t\tDLFileShortcut existingFileShortcut =\n\t\t\t\t\tDLFileShortcutUtil.fetchByUUID_G(\n\t\t\t\t\t\tfileShortcut.getUuid(), context.getScopeGroupId());\n\n\t\t\t\tif (existingFileShortcut == null) {\n\t\t\t\t\tserviceContext.setUuid(fileShortcut.getUuid());\n\n\t\t\t\t\timportedFileShortcut =\n\t\t\t\t\t\tDLFileShortcutLocalServiceUtil.addFileShortcut(\n\t\t\t\t\t\t\tuserId, groupId, folderId, toFolderId, toName,\n\t\t\t\t\t\t\tserviceContext);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\timportedFileShortcut =\n\t\t\t\t\t\tDLFileShortcutLocalServiceUtil.updateFileShortcut(\n\t\t\t\t\t\t\tuserId, existingFileShortcut.getFileShortcutId(),\n\t\t\t\t\t\t\tfolderId, toFolderId, toName, serviceContext);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedFileShortcut =\n\t\t\t\t\tDLFileShortcutLocalServiceUtil.addFileShortcut(\n\t\t\t\t\t\tuserId, groupId, folderId, toFolderId, toName,\n\t\t\t\t\t\tserviceContext);\n\t\t\t}\n\n\t\t\tcontext.importPermissions(\n\t\t\t\tDLFileShortcut.class, fileShortcut.getPrimaryKey(),\n\t\t\t\timportedFileShortcut.getPrimaryKey());\n\t\t}\n\t\tcatch (NoSuchFolderException nsfe) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find the folder for shortcut \" +\n\t\t\t\t\tfileShortcut.getFileShortcutId());\n\t\t}\n\t}","id":46730,"modified_method":"protected static void importFileShortcut(\n\t\t\tPortletDataContext context, DLFileShortcut fileShortcut)\n\t\tthrows Exception {\n\n\t\tlong userId = context.getUserId(fileShortcut.getUserUuid());\n\n\t\tMap<Long, Long> folderPKs =\n\t\t\t(Map<Long, Long>)context.getNewPrimaryKeysMap(DLFolder.class);\n\n\t\tlong folderId = MapUtil.getLong(\n\t\t\tfolderPKs, fileShortcut.getFolderId(), fileShortcut.getFolderId());\n\t\tlong toFolderId = MapUtil.getLong(\n\t\t\tfolderPKs, fileShortcut.getToFolderId(),\n\t\t\tfileShortcut.getToFolderId());\n\n\t\tMap<String, String> fileEntryNames =\n\t\t\t(Map<String, String>)context.getNewPrimaryKeysMap(\n\t\t\t\tDLFileEntry.class.getName() + \".name\");\n\n\t\tString toName = MapUtil.getString(\n\t\t\tfileEntryNames, fileShortcut.getToName(), fileShortcut.getToName());\n\n\t\tDLFolder folder = DLFolderUtil.findByPrimaryKey(folderId);\n\n\t\tDLFileEntry fileEntry = DLFileEntryLocalServiceUtil.getFileEntry(\n\t\t\tfolder.getGroupId(), toFolderId, toName);\n\n\t\tlong[] assetCategoryIds = null;\n\t\tString[] assetTagNames = null;\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"categories\")) {\n\t\t\tassetCategoryIds = context.getAssetCategoryIds(\n\t\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\t\t}\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"tags\")) {\n\t\t\tassetTagNames = context.getAssetTagNames(\n\t\t\t\tDLFileEntry.class, fileEntry.getFileEntryId());\n\t\t}\n\n\t\tServiceContext serviceContext = new ServiceContext();\n\n\t\tserviceContext.setAddCommunityPermissions(true);\n\t\tserviceContext.setAddGuestPermissions(true);\n\t\tserviceContext.setAssetCategoryIds(assetCategoryIds);\n\t\tserviceContext.setAssetTagNames(assetTagNames);\n\t\tserviceContext.setCreateDate(fileShortcut.getCreateDate());\n\t\tserviceContext.setModifiedDate(fileShortcut.getModifiedDate());\n\t\tserviceContext.setScopeGroupId(context.getScopeGroupId());\n\n\t\tDLFileShortcut importedFileShortcut = null;\n\n\t\tif (context.isDataStrategyMirror()) {\n\t\t\tDLFileShortcut existingFileShortcut =\n\t\t\t\tDLFileShortcutUtil.fetchByUUID_G(\n\t\t\t\t\tfileShortcut.getUuid(), context.getScopeGroupId());\n\n\t\t\tif (existingFileShortcut == null) {\n\t\t\t\tserviceContext.setUuid(fileShortcut.getUuid());\n\n\t\t\t\timportedFileShortcut =\n\t\t\t\t\tDLFileShortcutLocalServiceUtil.addFileShortcut(\n\t\t\t\t\t\tuserId, folder.getGroupId(), folderId, toFolderId,\n\t\t\t\t\t\ttoName, serviceContext);\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedFileShortcut =\n\t\t\t\t\tDLFileShortcutLocalServiceUtil.updateFileShortcut(\n\t\t\t\t\t\tuserId, existingFileShortcut.getFileShortcutId(),\n\t\t\t\t\t\tfolderId, toFolderId, toName, serviceContext);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\timportedFileShortcut =\n\t\t\t\tDLFileShortcutLocalServiceUtil.addFileShortcut(\n\t\t\t\t\tuserId, folder.getGroupId(), folderId, toFolderId, toName,\n\t\t\t\t\tserviceContext);\n\t\t}\n\n\t\tcontext.importPermissions(\n\t\t\tDLFileShortcut.class, fileShortcut.getPrimaryKey(),\n\t\t\timportedFileShortcut.getPrimaryKey());\n\t}","commit_id":"92cd0e123dd2d3d0f3030fcf2fc1a802d1498263","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected static void exportParentFolder(\n\t\t\tPortletDataContext context, Element foldersEl, long folderId)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (folderId == DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\t\t\treturn;\n\t\t}\n\n\t\tDLFolder folder = DLFolderUtil.findByPrimaryKey(folderId);\n\n\t\texportParentFolder(context, foldersEl, folder.getParentFolderId());\n\n\t\tString path = getFolderPath(context, folder);\n\n\t\tif (context.isPathNotProcessed(path)) {\n\t\t\tElement folderEl = foldersEl.addElement(\"folder\");\n\n\t\t\tfolderEl.addAttribute(\"path\", path);\n\n\t\t\tfolder.setUserUuid(folder.getUserUuid());\n\n\t\t\tcontext.addPermissions(DLFolder.class, folder.getFolderId());\n\n\t\t\tcontext.addZipEntry(path, folder);\n\t\t}\n\t}","id":46731,"modified_method":"protected static void exportParentFolder(\n\t\t\tPortletDataContext context, Element foldersElement, long folderId)\n\t\tthrows Exception {\n\n\t\tif (folderId == DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\t\t\treturn;\n\t\t}\n\n\t\tDLFolder folder = DLFolderUtil.findByPrimaryKey(folderId);\n\n\t\texportParentFolder(context, foldersElement, folder.getParentFolderId());\n\n\t\tString path = getFolderPath(context, folder);\n\n\t\tif (context.isPathNotProcessed(path)) {\n\t\t\tElement folderElement = foldersElement.addElement(\"folder\");\n\n\t\t\tfolderElement.addAttribute(\"path\", path);\n\n\t\t\tfolder.setUserUuid(folder.getUserUuid());\n\n\t\t\tcontext.addPermissions(DLFolder.class, folder.getFolderId());\n\n\t\t\tcontext.addZipEntry(path, folder);\n\t\t}\n\t}","commit_id":"92cd0e123dd2d3d0f3030fcf2fc1a802d1498263","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected static void importImage(\n\t\t\tPortletDataContext context, IGImage image, String binPath)\n\t\tthrows Exception {\n\n\t\tlong userId = context.getUserId(image.getUserUuid());\n\t\tlong groupId = context.getScopeGroupId();\n\n\t\tMap<Long, Long> folderPKs =\n\t\t\t(Map<Long, Long>)context.getNewPrimaryKeysMap(IGFolder.class);\n\n\t\tlong folderId = MapUtil.getLong(\n\t\t\tfolderPKs, image.getFolderId(), image.getFolderId());\n\n\t\tFile imageFile = null;\n\n\t\tbyte[] bytes = context.getZipEntryAsByteArray(binPath);\n\n\t\tif (bytes == null) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find image file for image \" + image.getImageId());\n\n\t\t\treturn;\n\t\t}\n\t\telse {\n\t\t\timageFile = File.createTempFile(\n\t\t\t\tString.valueOf(image.getPrimaryKey()),\n\t\t\t\tStringPool.PERIOD + image.getImageType());\n\n\t\t\tFileUtil.write(imageFile, bytes);\n\t\t}\n\n\t\tlong[] assetCategoryIds = null;\n\t\tString[] assetTagNames = null;\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"categories\")) {\n\t\t\tassetCategoryIds = context.getAssetCategoryIds(\n\t\t\t\tIGImage.class, image.getImageId());\n\t\t}\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"tags\")) {\n\t\t\tassetTagNames = context.getAssetTagNames(\n\t\t\t\tIGImage.class, image.getImageId());\n\t\t}\n\n\t\tServiceContext serviceContext = new ServiceContext();\n\n\t\tserviceContext.setAddCommunityPermissions(true);\n\t\tserviceContext.setAddGuestPermissions(true);\n\t\tserviceContext.setAssetCategoryIds(assetCategoryIds);\n\t\tserviceContext.setAssetTagNames(assetTagNames);\n\t\tserviceContext.setCreateDate(image.getCreateDate());\n\t\tserviceContext.setModifiedDate(image.getModifiedDate());\n\n\t\tif ((folderId != IGFolderConstants.DEFAULT_PARENT_FOLDER_ID) &&\n\t\t\t(folderId == image.getFolderId())) {\n\n\t\t\tString path = getImportFolderPath(context, folderId);\n\n\t\t\tIGFolder folder = (IGFolder)context.getZipEntryAsObject(path);\n\n\t\t\timportFolder(context, folder);\n\n\t\t\tfolderId = MapUtil.getLong(\n\t\t\t\tfolderPKs, image.getFolderId(), image.getFolderId());\n\t\t}\n\n\t\tIGImage importedImage = null;\n\n\t\tif (context.isDataStrategyMirror()) {\n\t\t\tIGImage existingImage = IGImageUtil.fetchByUUID_G(\n\t\t\t\timage.getUuid(), groupId);\n\n\t\t\tif (existingImage == null) {\n\t\t\t\tserviceContext.setUuid(image.getUuid());\n\n\t\t\t\timportedImage = IGImageLocalServiceUtil.addImage(\n\t\t\t\t\tuserId, groupId, folderId, image.getName(),\n\t\t\t\t\timage.getDescription(), imageFile, image.getImageType(),\n\t\t\t\t\tserviceContext);\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedImage = IGImageLocalServiceUtil.updateImage(\n\t\t\t\t\tuserId, existingImage.getImageId(), groupId, folderId,\n\t\t\t\t\timage.getName(), image.getDescription(), imageFile,\n\t\t\t\t\timage.getImageType(), serviceContext);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tString name = image.getName();\n\n\t\t\ttry {\n\t\t\t\timportedImage = IGImageLocalServiceUtil.addImage(\n\t\t\t\t\tuserId, groupId, folderId, name, image.getDescription(),\n\t\t\t\t\timageFile, image.getImageType(), serviceContext);\n\t\t\t}\n\t\t\tcatch (DuplicateImageNameException dine) {\n\t\t\t\tString[] nameParts = name.split(\"\\\\.\", 2);\n\n\t\t\t\tname = nameParts[0] + PwdGenerator.getPassword();\n\n\t\t\t\tif (nameParts.length > 1) {\n\t\t\t\t\tname += StringPool.PERIOD + nameParts[1];\n\t\t\t\t}\n\n\t\t\t\timportedImage = IGImageLocalServiceUtil.addImage(\n\t\t\t\t\tuserId, groupId, folderId, name, image.getDescription(),\n\t\t\t\t\timageFile, image.getImageType(), serviceContext);\n\t\t\t}\n\t\t}\n\n\t\tcontext.importPermissions(\n\t\t\tIGImage.class, image.getImageId(), importedImage.getImageId());\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"ratings\")) {\n\t\t\tcontext.importRatingsEntries(\n\t\t\t\tIGImage.class, image.getImageId(), importedImage.getImageId());\n\t\t}\n\n\t\tMap<Long, Long> igImagePKs =\n\t\t\t(Map<Long, Long>)context.getNewPrimaryKeysMap(IGImage.class);\n\n\t\tigImagePKs.put(image.getImageId(), importedImage.getImageId());\n\t}","id":46732,"modified_method":"protected static void importImage(\n\t\t\tPortletDataContext context, IGImage image, String binPath)\n\t\tthrows Exception {\n\n\t\tlong userId = context.getUserId(image.getUserUuid());\n\n\t\tMap<Long, Long> folderPKs =\n\t\t\t(Map<Long, Long>)context.getNewPrimaryKeysMap(IGFolder.class);\n\n\t\tlong folderId = MapUtil.getLong(\n\t\t\tfolderPKs, image.getFolderId(), image.getFolderId());\n\n\t\tFile imageFile = null;\n\n\t\tbyte[] bytes = context.getZipEntryAsByteArray(binPath);\n\n\t\tif (bytes == null) {\n\t\t\t_log.error(\n\t\t\t\t\"Could not find image file for image \" + image.getImageId());\n\n\t\t\treturn;\n\t\t}\n\t\telse {\n\t\t\timageFile = File.createTempFile(\n\t\t\t\tString.valueOf(image.getPrimaryKey()),\n\t\t\t\tStringPool.PERIOD + image.getImageType());\n\n\t\t\tFileUtil.write(imageFile, bytes);\n\t\t}\n\n\t\tlong[] assetCategoryIds = null;\n\t\tString[] assetTagNames = null;\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"categories\")) {\n\t\t\tassetCategoryIds = context.getAssetCategoryIds(\n\t\t\t\tIGImage.class, image.getImageId());\n\t\t}\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"tags\")) {\n\t\t\tassetTagNames = context.getAssetTagNames(\n\t\t\t\tIGImage.class, image.getImageId());\n\t\t}\n\n\t\tServiceContext serviceContext = new ServiceContext();\n\n\t\tserviceContext.setAddCommunityPermissions(true);\n\t\tserviceContext.setAddGuestPermissions(true);\n\t\tserviceContext.setAssetCategoryIds(assetCategoryIds);\n\t\tserviceContext.setAssetTagNames(assetTagNames);\n\t\tserviceContext.setCreateDate(image.getCreateDate());\n\t\tserviceContext.setModifiedDate(image.getModifiedDate());\n\n\t\tif ((folderId != IGFolderConstants.DEFAULT_PARENT_FOLDER_ID) &&\n\t\t\t(folderId == image.getFolderId())) {\n\n\t\t\tString path = getImportFolderPath(context, folderId);\n\n\t\t\tIGFolder folder = (IGFolder)context.getZipEntryAsObject(path);\n\n\t\t\timportFolder(context, folder);\n\n\t\t\tfolderId = MapUtil.getLong(\n\t\t\t\tfolderPKs, image.getFolderId(), image.getFolderId());\n\t\t}\n\n\t\tIGImage importedImage = null;\n\n\t\tif (context.isDataStrategyMirror()) {\n\t\t\tIGImage existingImage = IGImageUtil.fetchByUUID_G(\n\t\t\t\timage.getUuid(), context.getScopeGroupId());\n\n\t\t\tif (existingImage == null) {\n\t\t\t\tserviceContext.setUuid(image.getUuid());\n\n\t\t\t\timportedImage = IGImageLocalServiceUtil.addImage(\n\t\t\t\t\tuserId, context.getScopeGroupId(), folderId,\n\t\t\t\t\timage.getName(), image.getDescription(), imageFile,\n\t\t\t\t\timage.getImageType(), serviceContext);\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedImage = IGImageLocalServiceUtil.updateImage(\n\t\t\t\t\tuserId, existingImage.getImageId(),\n\t\t\t\t\tcontext.getScopeGroupId(), folderId, image.getName(),\n\t\t\t\t\timage.getDescription(), imageFile, image.getImageType(),\n\t\t\t\t\tserviceContext);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tString name = image.getName();\n\n\t\t\ttry {\n\t\t\t\timportedImage = IGImageLocalServiceUtil.addImage(\n\t\t\t\t\tuserId, context.getScopeGroupId(), folderId, name,\n\t\t\t\t\timage.getDescription(), imageFile, image.getImageType(),\n\t\t\t\t\tserviceContext);\n\t\t\t}\n\t\t\tcatch (DuplicateImageNameException dine) {\n\t\t\t\tString[] nameParts = name.split(\"\\\\.\", 2);\n\n\t\t\t\tname = nameParts[0] + PwdGenerator.getPassword();\n\n\t\t\t\tif (nameParts.length > 1) {\n\t\t\t\t\tname += StringPool.PERIOD + nameParts[1];\n\t\t\t\t}\n\n\t\t\t\timportedImage = IGImageLocalServiceUtil.addImage(\n\t\t\t\t\tuserId, context.getScopeGroupId(), folderId, name,\n\t\t\t\t\timage.getDescription(), imageFile, image.getImageType(),\n\t\t\t\t\tserviceContext);\n\t\t\t}\n\t\t}\n\n\t\tcontext.importPermissions(\n\t\t\tIGImage.class, image.getImageId(), importedImage.getImageId());\n\n\t\tif (context.getBooleanParameter(_NAMESPACE, \"ratings\")) {\n\t\t\tcontext.importRatingsEntries(\n\t\t\t\tIGImage.class, image.getImageId(), importedImage.getImageId());\n\t\t}\n\n\t\tMap<Long, Long> igImagePKs =\n\t\t\t(Map<Long, Long>)context.getNewPrimaryKeysMap(IGImage.class);\n\n\t\tigImagePKs.put(image.getImageId(), importedImage.getImageId());\n\t}","commit_id":"92cd0e123dd2d3d0f3030fcf2fc1a802d1498263","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public PortletDataHandlerControl[] getExportControls() {\n\t\treturn new PortletDataHandlerControl[] {\n\t\t\t_categoriesAndMessages, _attachments, _messageFlags, _ratings,\n\t\t\t_tags, _userBans\n\t\t};\n\t}","id":46733,"modified_method":"public PortletDataHandlerControl[] getExportControls() {\n\t\treturn new PortletDataHandlerControl[] {\n\t\t\t_categoriesAndMessages, _messageFlags, _userBans, _ratings, _tags\n\t\t};\n\t}","commit_id":"92cd0e123dd2d3d0f3030fcf2fc1a802d1498263","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public PortletDataHandlerControl[] getImportControls() {\n\t\treturn new PortletDataHandlerControl[] {\n\t\t\t_categoriesAndMessages, _attachments, _messageFlags, _ratings,\n\t\t\t_tags, _userBans\n\t\t};\n\t}","id":46734,"modified_method":"public PortletDataHandlerControl[] getImportControls() {\n\t\treturn new PortletDataHandlerControl[] {\n\t\t\t_categoriesAndMessages, _messageFlags, _userBans, _ratings, _tags\n\t\t};\n\t}","commit_id":"92cd0e123dd2d3d0f3030fcf2fc1a802d1498263","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void clearCaches() {\n    myDependsTargets = null;\n  }","id":46735,"modified_method":"public void clearCaches() {\n    super.clearCaches();\n    myDependsTargets = null;\n  }","commit_id":"6cb8a974bce11c820046a9b897f599973121586b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void clearCaches() {\n    myTargets = null;\n  }","id":46736,"modified_method":"public void clearCaches() {\n    super.clearCaches();\n    myTargets = null;\n  }","commit_id":"6cb8a974bce11c820046a9b897f599973121586b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public PsiReference[] getReferencesByElement(PsiElement element) {\n    final AntTarget target = (AntTarget)element;\n    final XmlAttribute attr = ((XmlTag)target.getSourceElement()).getAttribute(\"depends\", null);\n    if (attr == null) {\n      return PsiReference.EMPTY_ARRAY;\n    }\n    int offsetInPosition = attr.getValueElement().getTextRange().getStartOffset() - target.getTextRange().getStartOffset() + 1;\n    final String str = attr.getValue();\n    final String[] targets = str.split(\",\");\n    final int length = targets.length;\n    if (length == 0) {\n      return PsiReference.EMPTY_ARRAY;\n    }\n    PsiReference[] result = new PsiReference[length];\n    for (int i = 0; i < result.length; i++) {\n      final String t = targets[i];\n      result[i] = new AntTargetReference(this, target, t, new TextRange(offsetInPosition, offsetInPosition + t.length()), attr);\n      offsetInPosition += t.length() + 1;\n    }\n    return result;\n  }","id":46737,"modified_method":"@NotNull\n  public PsiReference[] getReferencesByElement(PsiElement element) {\n    final AntTarget target = (AntTarget)element;\n    final XmlAttribute attr = target.getSourceElement().getAttribute(\"depends\", null);\n    if (attr == null) {\n      return PsiReference.EMPTY_ARRAY;\n    }\n    int offsetInPosition = attr.getValueElement().getTextRange().getStartOffset() - target.getTextRange().getStartOffset() + 1;\n    final String str = attr.getValue();\n    final String[] targets = str.split(\",\");\n    final int length = targets.length;\n    if (length == 0) {\n      return PsiReference.EMPTY_ARRAY;\n    }\n    PsiReference[] result = new PsiReference[length];\n    for (int i = 0; i < result.length; i++) {\n      final String t = targets[i];\n      result[i] = new AntTargetReference(this, target, t, new TextRange(offsetInPosition, offsetInPosition + t.length()), attr);\n      offsetInPosition += t.length() + 1;\n    }\n    return result;\n  }","commit_id":"6cb8a974bce11c820046a9b897f599973121586b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public AntTaskImpl(final AntElement parent, final XmlElement sourceElement, final AntTypeDefinition definition) {\n    super(parent, sourceElement, definition);\n  }","id":46738,"modified_method":"public AntTaskImpl(final AntElement parent, final XmlElement sourceElement, final AntTypeDefinition definition) {\n    super(parent, sourceElement, definition);\n    final String id = getId();\n    if (id != null && parent instanceof AntStructuredElement) {\n      AntStructuredElement se = (AntStructuredElement)parent;\n      se.registerRefId(id, this);\n    }\n  }","commit_id":"6cb8a974bce11c820046a9b897f599973121586b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@SuppressWarnings({\"HardCodedStringLiteral\"})\n  public AntTypeDefImpl(final AntElement parent, final XmlElement sourceElement, final AntTypeDefinition definition) {\n    super(parent, sourceElement, definition);\n    final String classpath = getClassPath();\n    ClassLoader loader = null;\n    if (classpath != null) {\n      try {\n        loader = new URLClassLoader(new URL[]{new URL(\"file://\" + classpath)}, getClass().getClassLoader());\n      }\n      catch (MalformedURLException e) {\n        LOG.error(e);\n      }\n    }\n    else {\n      myNewDefinition = getAntProject().getBaseTypeDefinition(getClassName());\n      if (myNewDefinition != null) return;\n    }\n    Class clazz;\n    try {\n      if (loader == null) {\n        clazz = Class.forName(getClassName());\n      }\n      else {\n        clazz = loader.loadClass(getClassName());\n      }\n    }\n    catch (ClassNotFoundException e) {\n      clazz = null;\n    }\n    final String name = getDefinedName();\n    final String uri = getUri();\n    AntTypeId id = (uri == null) ? new AntTypeId(name) : new AntTypeId(name, uri);\n    myNewDefinition = (clazz == null) ? null : AntProjectImpl.createTypeDefinition(id, clazz);\n    getAntProject().registerCustomType(myNewDefinition);\n  }","id":46739,"modified_method":"@SuppressWarnings({\"HardCodedStringLiteral\"})\n  public AntTypeDefImpl(final AntElement parent, final XmlElement sourceElement, final AntTypeDefinition definition) {\n    super(parent, sourceElement, definition);\n    final String classname = getClassName();\n    if (classname == null) return;\n    final String classpath = getClassPath();\n    ClassLoader loader = null;\n    if (classpath != null) {\n      try {\n        loader = new URLClassLoader(new URL[]{new URL(\"file://\" + classpath)}, getClass().getClassLoader());\n      }\n      catch (MalformedURLException e) {\n        LOG.error(e);\n      }\n    }\n    else {\n      myNewDefinition = getAntProject().getBaseTypeDefinition(classname);\n      if (myNewDefinition != null) return;\n    }\n    Class clazz;\n    try {\n      if (loader == null) {\n        clazz = Class.forName(classname);\n      }\n      else {\n        clazz = loader.loadClass(classname);\n      }\n    }\n    catch (ClassNotFoundException e) {\n      clazz = null;\n    }\n    final String name = getDefinedName();\n    final String uri = getUri();\n    AntTypeId id = (uri == null) ? new AntTypeId(name) : new AntTypeId(name, uri);\n    myNewDefinition = (clazz == null) ? null : AntProjectImpl.createTypeDefinition(id, clazz);\n    getAntProject().registerCustomType(myNewDefinition);\n  }","commit_id":"6cb8a974bce11c820046a9b897f599973121586b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public XmlElement getSourceElement() {\n    return (XmlElement)getViewProvider().getPsi(StdLanguages.XML);\n  }","id":46740,"modified_method":"@NotNull\n  public XmlFile getSourceElement() {\n    return (XmlFile)getViewProvider().getPsi(StdLanguages.XML);\n  }","commit_id":"3da5551f5903e270ccd7b3ca53a1f4da6257a6b3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public AntProject getAntProject() {\n    if(myProject != null) return myProject;\n    final XmlFile baseFile = (XmlFile)getSourceElement();\n    final XmlTag tag = baseFile.getDocument().getRootTag();\n    return myProject = new AntProjectImpl(this, tag);\n  }","id":46741,"modified_method":"@Nullable\n  public AntProject getAntProject() {\n    if(myProject != null) return myProject;\n    final XmlFile baseFile = getSourceElement();\n    final XmlTag tag = baseFile.getDocument().getRootTag();\n    return myProject = new AntProjectImpl(this, tag);\n  }","commit_id":"3da5551f5903e270ccd7b3ca53a1f4da6257a6b3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@SuppressWarnings(\"HardCodedStringLiteral\")\n  protected AntElement[] getChildrenInner() {\n    final XmlTag[] tags = getSourceElement().getSubTags();\n    final List<AntElement> children = new ArrayList<AntElement>();\n    for (final XmlTag tag : tags) {\n      final String tagName = tag.getName();\n      if (\"target\".equals(tagName)) {\n        children.add(new AntTargetImpl(this, tag));\n      }\n      else if(\"property\".equals(tagName)) {\n        children.add(new AntPropertySetImpl(this, tag));\n      }\n    }\n    return children.toArray(new AntElement[children.size()]);\n  }","id":46742,"modified_method":"@SuppressWarnings(\"HardCodedStringLiteral\")\n  protected AntElement[] getChildrenInner() {\n    final XmlTag[] tags = getSourceElement().getSubTags();\n    final List<AntElement> children = new ArrayList<AntElement>();\n    for (final XmlTag tag : tags) {\n      final String tagName = tag.getName();\n      if (\"target\".equals(tagName)) {\n        children.add(new AntTargetImpl(this, tag));\n      }\n      else if(\"property\".equals(tagName)) {\n        children.add(new AntPropertyImpl(this, tag));\n      }\n    }\n    return children.toArray(new AntElement[children.size()]);\n  }","commit_id":"3da5551f5903e270ccd7b3ca53a1f4da6257a6b3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public PropertiesLanguage() {\n    super(\"Properties\", \"text/properties\");\n  }","id":46743,"modified_method":"public PropertiesLanguage() {\n    super(\"Properties\", \"text/properties\");\n    StdLanguages.PROPERTIES = this;\n  }","commit_id":"3da5551f5903e270ccd7b3ca53a1f4da6257a6b3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static void launch(Node node, String title, String type, Map<String, Object> configuration, String userId) throws IOException, APIException {\n        InputLaunchRequest request = new InputLaunchRequest();\n        request.title = title;\n        request.type = type;\n        request.configuration = configuration;\n        request.creatorUserId = userId;\n\n        Api.post(node, \"system/inputs\", request, 202, EmptyResponse.class);\n    }","id":46744,"modified_method":"public static void launch(Node node, String title, String type, Map<String, Object> configuration, String userId, boolean isExclusive) throws IOException, APIException, ExclusiveInputException {\n        if (isExclusive) {\n            for (Input input : node.getInputs()) {\n                if(input.getType().equals(type)) {\n                    throw new ExclusiveInputException();\n                }\n            }\n        }\n\n        InputLaunchRequest request = new InputLaunchRequest();\n        request.title = title;\n        request.type = type;\n        request.configuration = configuration;\n        request.creatorUserId = userId;\n\n        Api.post(node, \"system/inputs\", request, 202, EmptyResponse.class);\n    }","commit_id":"dea655088af2dc040533575c2d3963f27d519816","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public Input(InputSummaryResponse is) {\n        this(\n                is.inputId,\n                is.persistId,\n                is.name,\n                is.title,\n                is.startedAt,\n                User.load(is.creatorUserId),\n                is.attributes\n        );\n    }","id":46745,"modified_method":"public Input(InputSummaryResponse is) {\n        this(\n                is.type,\n                is.inputId,\n                is.persistId,\n                is.name,\n                is.title,\n                is.startedAt,\n                User.load(is.creatorUserId),\n                is.attributes\n        );\n    }","commit_id":"dea655088af2dc040533575c2d3963f27d519816","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public Input(String id, String persistId, String name, String title, String startedAt, User creatorUser, Map<String, Object> attributes) {\n        this.id = id;\n        this.persistId = persistId;\n        this.name = name;\n        this.title = title;\n        this.startedAt = DateTime.parse(startedAt);\n        this.creatorUser = creatorUser;\n        this.attributes = attributes;\n\n        // We might get a double parsed from JSON here. Make sure to round it to Integer. (would be .0 anyways)\n        for (Map.Entry<String, Object> e : attributes.entrySet()) {\n            if (e.getValue() instanceof Double) {\n                attributes.put(e.getKey(), Math.round((Double) e.getValue()));\n            }\n        }\n    }","id":46746,"modified_method":"public Input(String type, String id, String persistId, String name, String title, String startedAt, User creatorUser, Map<String, Object> attributes) {\n        this.type = type;\n        this.id = id;\n        this.persistId = persistId;\n        this.name = name;\n        this.title = title;\n        this.startedAt = DateTime.parse(startedAt);\n        this.creatorUser = creatorUser;\n        this.attributes = attributes;\n\n        // We might get a double parsed from JSON here. Make sure to round it to Integer. (would be .0 anyways)\n        for (Map.Entry<String, Object> e : attributes.entrySet()) {\n            if (e.getValue() instanceof Double) {\n                attributes.put(e.getKey(), Math.round((Double) e.getValue()));\n            }\n        }\n    }","commit_id":"dea655088af2dc040533575c2d3963f27d519816","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public static Result launch(String nodeId) {\n        Map<String, Object> configuration = Maps.newHashMap();\n        Map<String, String[]> form = request().body().asFormUrlEncoded();\n\n        String inputType = form.get(\"type\")[0];\n        String inputTitle = form.get(\"title\")[0];\n\n        try {\n            InputTypeSummaryResponse inputInfo = Input.getTypeInformation(Node.fromId(nodeId), inputType);\n\n            for (Map.Entry<String, String[]> f : form.entrySet()) {\n                if (!f.getKey().startsWith(\"configuration_\")) {\n                    continue;\n                }\n\n                String key = f.getKey().substring(\"configuration_\".length());\n                Object value;\n\n                if (f.getValue().length > 0) {\n                    String stringValue = f.getValue()[0];\n\n                    // Decide what to cast to. (string, bool, number)\n                    switch((String) inputInfo.requestedConfiguration.get(key).get(\"type\")) {\n                        case \"text\":\n                            value = stringValue;\n                            break;\n                        case \"number\":\n                            value = Integer.parseInt(stringValue);\n                            break;\n                        case \"boolean\":\n                            value = stringValue.equals(\"true\");\n                            break;\n                        default: continue;\n                    }\n\n                } else {\n                    continue;\n                }\n\n                configuration.put(key, value);\n            }\n\n\n            Input.launch(Node.fromId(nodeId), inputTitle, inputType, configuration, currentUser().getId());\n\n            return redirect(routes.InputsController.manage(nodeId));\n        } catch (IOException e) {\n            return status(504, views.html.errors.error.render(Api.ERROR_MSG_IO, e, request()));\n        } catch (APIException e) {\n            String message = \"Could not launch input. We expected HTTP 202, but got a HTTP \" + e.getHttpCode() + \".\";\n            return status(504, views.html.errors.error.render(message, e, request()));\n        }\n    }","id":46747,"modified_method":"public static Result launch(String nodeId) {\n        Map<String, Object> configuration = Maps.newHashMap();\n        Map<String, String[]> form = request().body().asFormUrlEncoded();\n\n        String inputType = form.get(\"type\")[0];\n        String inputTitle = form.get(\"title\")[0];\n\n        try {\n            InputTypeSummaryResponse inputInfo = Input.getTypeInformation(Node.fromId(nodeId), inputType);\n\n            for (Map.Entry<String, String[]> f : form.entrySet()) {\n                if (!f.getKey().startsWith(\"configuration_\")) {\n                    continue;\n                }\n\n                String key = f.getKey().substring(\"configuration_\".length());\n                Object value;\n\n                if (f.getValue().length > 0) {\n                    String stringValue = f.getValue()[0];\n\n                    // Decide what to cast to. (string, bool, number)\n                    switch((String) inputInfo.requestedConfiguration.get(key).get(\"type\")) {\n                        case \"text\":\n                            value = stringValue;\n                            break;\n                        case \"number\":\n                            value = Integer.parseInt(stringValue);\n                            break;\n                        case \"boolean\":\n                            value = stringValue.equals(\"true\");\n                            break;\n                        default: continue;\n                    }\n\n                } else {\n                    continue;\n                }\n\n                configuration.put(key, value);\n            }\n\n            try {\n                Input.launch(Node.fromId(nodeId), inputTitle, inputType, configuration, currentUser().getId(), inputInfo.isExclusive);\n            } catch (ExclusiveInputException e) {\n                flash(\"error\", \"This input is exclusive and already running.\");\n                return redirect(routes.InputsController.manage(nodeId));\n            }\n\n            return redirect(routes.InputsController.manage(nodeId));\n        } catch (IOException e) {\n            return status(504, views.html.errors.error.render(Api.ERROR_MSG_IO, e, request()));\n        } catch (APIException e) {\n            String message = \"Could not launch input. We expected HTTP 202, but got a HTTP \" + e.getHttpCode() + \".\";\n            return status(504, views.html.errors.error.render(message, e, request()));\n        }\n    }","commit_id":"dea655088af2dc040533575c2d3963f27d519816","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"@Override\n  protected RunContentDescriptor doExecute(final Project project,\n                                           final Executor executor,\n                                           final RunProfileState state,\n                                           final RunContentDescriptor contentToReuse,\n                                           final ExecutionEnvironment environment) throws ExecutionException {\n    assert state instanceof AndroidRunningState;\n    final RunProfile runProfile = environment.getRunProfile();\n    final AndroidRunningState runningState = (AndroidRunningState)state;\n    if (runProfile instanceof AndroidTestRunConfiguration) {\n      String targetPackage = getTargetPackage((AndroidTestRunConfiguration)runProfile, runningState);\n      if (targetPackage == null) {\n        throw new ExecutionException(AndroidBundle.message(\"target.package.not.specified.error\"));\n      }\n      runningState.setTargetPackageName(targetPackage);\n    }\n    runningState.setDebugMode(true);\n    final RunContentDescriptor runDescriptor = super.doExecute(project, executor, state, contentToReuse, environment);\n    if (runDescriptor == null) {\n      throw new ExecutionException(\"Can't run an application\");\n    }\n    tryToCloseOldSessions(executor, project);\n    runningState.getProcessHandler().putUserData(ANDROID_PROCESS_HANDLER, runDescriptor);\n    runningState.setDebugLauncher(new MyDebugLauncher(project, executor, runningState, environment, runDescriptor));\n    return runDescriptor;\n  }","id":46748,"modified_method":"@Override\n  protected RunContentDescriptor doExecute(final Project project,\n                                           final Executor executor,\n                                           final RunProfileState state,\n                                           final RunContentDescriptor contentToReuse,\n                                           final ExecutionEnvironment environment) throws ExecutionException {\n    assert state instanceof AndroidRunningState;\n    final RunProfile runProfile = environment.getRunProfile();\n    final AndroidRunningState runningState = (AndroidRunningState)state;\n    if (runProfile instanceof AndroidTestRunConfiguration) {\n      String targetPackage = getTargetPackage((AndroidTestRunConfiguration)runProfile, runningState);\n      if (targetPackage == null) {\n        throw new ExecutionException(AndroidBundle.message(\"target.package.not.specified.error\"));\n      }\n      runningState.setTargetPackageName(targetPackage);\n    }\n    runningState.setDebugMode(true);\n    RunContentDescriptor runDescriptor;\n    synchronized (myDebugLock) {\n      MyDebugLauncher launcher = new MyDebugLauncher(project, executor, runningState, environment);\n      runningState.setDebugLauncher(launcher);\n      runDescriptor = super.doExecute(project, executor, state, contentToReuse, environment);\n      launcher.setRunDescriptor(runDescriptor);\n    }\n    if (runDescriptor == null) {\n      throw new ExecutionException(\"Can't run an application\");\n    }\n    tryToCloseOldSessions(executor, project);\n    runningState.getProcessHandler().putUserData(ANDROID_PROCESS_HANDLER, runDescriptor);\n    return runDescriptor;\n  }","commit_id":"84149412324805e2ed291a37f9749f902d19a8f5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void launchDebug(final IDevice device, final String debugPort) {\n      ApplicationManager.getApplication().invokeLater(new Runnable() {\n        @SuppressWarnings({\"IOResourceOpenedButNotSafelyClosed\"})\n        public void run() {\n          final DebuggerPanelsManager manager = DebuggerPanelsManager.getInstance(myProject);\n          RemoteState st =\n            new AndroidDebugState(myProject, new RemoteConnection(true, \"localhost\", debugPort, false), myEnvironment.getRunnerSettings(),\n                                  myEnvironment.getConfigurationSettings(), myRunningState);\n          RunContentDescriptor debugDescriptor = null;\n          final ProcessHandler processHandler = myRunningState.getProcessHandler();\n          try {\n            debugDescriptor = manager\n              .attachVirtualMachine(myExecutor, AndroidDebugRunner.this, myEnvironment, st, myRunDescriptor, st.getRemoteConnection(),\n                                    false);\n          }\n          catch (ExecutionException e) {\n            processHandler.notifyTextAvailable(\"ExecutionException: \" + e.getMessage() + '.', STDERR);\n          }\n          ProcessHandler newProcessHandler = debugDescriptor != null ? debugDescriptor.getProcessHandler() : null;\n          if (debugDescriptor == null || newProcessHandler == null) {\n            processHandler.notifyTextAvailable(\"Can't start debugging.\", STDERR);\n            processHandler.destroyProcess();\n            return;\n          }\n          processHandler.detachProcess();\n\n          myRunningState.getProcessHandler().putUserData(ANDROID_PROCESS_HANDLER, debugDescriptor);\n\n          DebuggerSessionTab sessionTab = manager.getSessionTab();\n          assert sessionTab != null;\n          sessionTab.setEnvironment(myEnvironment);\n          RunProfile profile = myEnvironment.getRunProfile();\n          assert profile instanceof AndroidRunConfigurationBase;\n          final Reader[] readerWrapper = new Reader[1];\n          String logcatTabTitle = AndroidBundle.message(\"android.logcat.tab.title\");\n          LogConsoleBase console = sessionTab.addLogConsole(logcatTabTitle, new AndroidLoggingReader() {\n            @NotNull\n            protected Object getLock() {\n              return myReaderLock;\n            }\n\n            protected Reader getReader() {\n              return readerWrapper[0];\n            }\n          }, 0, AndroidUtils.ANDROID_ICON);\n          synchronized (myReaderLock) {\n            readerWrapper[0] =\n              AndroidLogcatUtil.startLoggingThread(myProject, device, ((AndroidRunConfigurationBase)profile).CLEAR_LOGCAT, console);\n          }\n          if (!(profile instanceof AndroidTestRunConfiguration)) {\n            String logcatContentId = DebuggerSessionTab.getLogContentId(logcatTabTitle);\n            if (logcatContentId != null) {\n              sessionTab.getUi().getDefaults().initFocusContent(logcatContentId, LayoutViewOptions.STARTUP);\n            }\n          }\n          RunContentManager runContentManager = ExecutionManager.getInstance(myProject).getContentManager();\n          runContentManager.showRunContent(myExecutor, debugDescriptor);\n          newProcessHandler.startNotify();\n        }\n      });\n    }","id":46749,"modified_method":"public void launchDebug(final IDevice device, final String debugPort) {\n      ApplicationManager.getApplication().invokeLater(new Runnable() {\n        @SuppressWarnings({\"IOResourceOpenedButNotSafelyClosed\"})\n        public void run() {\n          final DebuggerPanelsManager manager = DebuggerPanelsManager.getInstance(myProject);\n          RemoteState st =\n            new AndroidDebugState(myProject, new RemoteConnection(true, \"localhost\", debugPort, false), myEnvironment.getRunnerSettings(),\n                                  myEnvironment.getConfigurationSettings(), myRunningState);\n          RunContentDescriptor debugDescriptor = null;\n          final ProcessHandler processHandler = myRunningState.getProcessHandler();\n          try {\n            synchronized (myDebugLock) {\n              assert myRunDescriptor != null;\n              debugDescriptor = manager\n                .attachVirtualMachine(myExecutor, AndroidDebugRunner.this, myEnvironment, st, myRunDescriptor, st.getRemoteConnection(),\n                                      false);\n            }\n          }\n          catch (ExecutionException e) {\n            processHandler.notifyTextAvailable(\"ExecutionException: \" + e.getMessage() + '.', STDERR);\n          }\n          ProcessHandler newProcessHandler = debugDescriptor != null ? debugDescriptor.getProcessHandler() : null;\n          if (debugDescriptor == null || newProcessHandler == null) {\n            processHandler.notifyTextAvailable(\"Can't start debugging.\", STDERR);\n            processHandler.destroyProcess();\n            return;\n          }\n          processHandler.detachProcess();\n\n          myRunningState.getProcessHandler().putUserData(ANDROID_PROCESS_HANDLER, debugDescriptor);\n\n          DebuggerSessionTab sessionTab = manager.getSessionTab();\n          assert sessionTab != null;\n          sessionTab.setEnvironment(myEnvironment);\n          RunProfile profile = myEnvironment.getRunProfile();\n          assert profile instanceof AndroidRunConfigurationBase;\n          final Reader[] readerWrapper = new Reader[1];\n          String logcatTabTitle = AndroidBundle.message(\"android.logcat.tab.title\");\n          LogConsoleBase console = sessionTab.addLogConsole(logcatTabTitle, new AndroidLoggingReader() {\n            @NotNull\n            protected Object getLock() {\n              return myReaderLock;\n            }\n\n            protected Reader getReader() {\n              return readerWrapper[0];\n            }\n          }, 0, AndroidUtils.ANDROID_ICON);\n          synchronized (myReaderLock) {\n            readerWrapper[0] =\n              AndroidLogcatUtil.startLoggingThread(myProject, device, ((AndroidRunConfigurationBase)profile).CLEAR_LOGCAT, console);\n          }\n          if (!(profile instanceof AndroidTestRunConfiguration)) {\n            String logcatContentId = DebuggerSessionTab.getLogContentId(logcatTabTitle);\n            if (logcatContentId != null) {\n              sessionTab.getUi().getDefaults().initFocusContent(logcatContentId, LayoutViewOptions.STARTUP);\n            }\n          }\n          RunContentManager runContentManager = ExecutionManager.getInstance(myProject).getContentManager();\n          runContentManager.showRunContent(myExecutor, debugDescriptor);\n          newProcessHandler.startNotify();\n        }\n      });\n    }","commit_id":"84149412324805e2ed291a37f9749f902d19a8f5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public MyDebugLauncher(Project project,\n                           Executor executor,\n                           AndroidRunningState state,\n                           ExecutionEnvironment environment,\n                           RunContentDescriptor runDescriptor) {\n      myProject = project;\n      myExecutor = executor;\n      myRunningState = state;\n      myEnvironment = environment;\n      myRunDescriptor = runDescriptor;\n    }","id":46750,"modified_method":"public MyDebugLauncher(Project project,\n                           Executor executor,\n                           AndroidRunningState state,\n                           ExecutionEnvironment environment) {\n      myProject = project;\n      myExecutor = executor;\n      myRunningState = state;\n      myEnvironment = environment;\n    }","commit_id":"84149412324805e2ed291a37f9749f902d19a8f5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void tryToCloseOldSessions(final Executor executor, Project project) {\n    final ExecutionManager manager = ExecutionManager.getInstance(project);\n    ProcessHandler[] processes = manager.getRunningProcesses();\n    for (ProcessHandler process : processes) {\n      final RunContentDescriptor descriptor = process.getUserData(ANDROID_PROCESS_HANDLER);\n      if (descriptor != null) {\n        process.addProcessListener(new ProcessAdapter() {\n          @Override\n          public void processTerminated(ProcessEvent event) {\n            ApplicationManager.getApplication().invokeLater(new Runnable() {\n              public void run() {\n                manager.getContentManager().removeRunContent(executor, descriptor);\n              }\n            });\n          }\n        });\n        process.destroyProcess();\n      }\n    }\n  }","id":46751,"modified_method":"private static void tryToCloseOldSessions(final Executor executor, Project project) {\n    final ExecutionManager manager = ExecutionManager.getInstance(project);\n    ProcessHandler[] processes = manager.getRunningProcesses();\n    for (ProcessHandler process : processes) {\n      final RunContentDescriptor descriptor = process.getUserData(ANDROID_PROCESS_HANDLER);\n      if (descriptor != null) {\n        process.addProcessListener(new ProcessAdapter() {\n          @Override\n          public void processTerminated(ProcessEvent event) {\n            ApplicationManager.getApplication().invokeLater(new Runnable() {\n              public void run() {\n                manager.getContentManager().removeRunContent(executor, descriptor);\n              }\n            });\n          }\n        });\n        process.detachProcess();\n      }\n    }\n  }","commit_id":"84149412324805e2ed291a37f9749f902d19a8f5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean prepareAndStartApp(IDevice device) {\n    StringBuilder deviceMessageBuilder = new StringBuilder(\"Target device: \");\n    deviceMessageBuilder.append(device.getSerialNumber());\n    if (device.getAvdName() != null) {\n      deviceMessageBuilder.append(\" (\").append(device.getAvdName()).append(')');\n    }\n    deviceMessageBuilder.append('\\n');\n    getProcessHandler().notifyTextAvailable(deviceMessageBuilder.toString(), STDOUT);\n    Module module = myFacet.getModule();\n    try {\n      if (!uploadAndInstall(device, myPackageName, module)) return false;\n      if (!uploadAndInstallDependentModules(device)) return false;\n      return myApplicationLauncher.launch(this, device);\n    }\n    catch (TimeoutException e) {\n      LOG.info(e);\n      getProcessHandler().notifyTextAvailable(\"Error: Connection to ADB failed with a timeout\\n\", STDERR);\n      return false;\n    }\n    catch (AdbCommandRejectedException e) {\n      LOG.info(e);\n      getProcessHandler().notifyTextAvailable(\"Error: Adb refused a command\\n\", STDERR);\n      return false;\n    }\n    catch (IOException e) {\n      LOG.info(e);\n      String message = e.getMessage();\n      getProcessHandler().notifyTextAvailable(\"I/O Error\" + (message != null ? \": \" + message : \"\") + '\\n', STDERR);\n      return false;\n    }\n  }","id":46752,"modified_method":"private boolean prepareAndStartApp(IDevice device) {\n    StringBuilder deviceMessageBuilder = new StringBuilder(\"Target device: \");\n    deviceMessageBuilder.append(device.getSerialNumber());\n    if (device.getAvdName() != null) {\n      deviceMessageBuilder.append(\" (\").append(device.getAvdName()).append(')');\n    }\n    deviceMessageBuilder.append('\\n');\n    getProcessHandler().notifyTextAvailable(deviceMessageBuilder.toString(), STDOUT);\n    try {\n      if (myDeploy) {\n        if (!uploadAndInstall(device, myPackageName)) return false;\n        if (!uploadAndInstallDependentModules(device)) return false;\n      }\n      if (!myApplicationLauncher.launch(this, device)) return false;\n      synchronized (myDebugLock) {\n        Client client = device.getClient(myTargetPackageName);\n        if (client != null) {\n          launchDebug(client);\n        }\n      }\n      return true;\n    }\n    catch (TimeoutException e) {\n      LOG.info(e);\n      getProcessHandler().notifyTextAvailable(\"Error: Connection to ADB failed with a timeout\\n\", STDERR);\n      return false;\n    }\n    catch (AdbCommandRejectedException e) {\n      LOG.info(e);\n      getProcessHandler().notifyTextAvailable(\"Error: Adb refused a command\\n\", STDERR);\n      return false;\n    }\n    catch (IOException e) {\n      LOG.info(e);\n      String message = e.getMessage();\n      getProcessHandler().notifyTextAvailable(\"I/O Error\" + (message != null ? \": \" + message : \"\") + '\\n', STDERR);\n      return false;\n    }\n  }","commit_id":"84149412324805e2ed291a37f9749f902d19a8f5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void clientChanged(Client client, int changeMask) {\n    IDevice device = client.getDevice();\n    if (isMyDevice(device) && device.isOnline()) {\n      if (myTargetDeviceSerialNumbers.length == 0) {\n        myTargetDeviceSerialNumbers = new String[]{device.getSerialNumber()};\n      }\n      if (myDebugLauncher == null) {\n        return;\n      }\n      ClientData data = client.getClientData();\n      String description = data.getClientDescription();\n      if (description != null && description.equals(myTargetPackageName)) {\n        if (myApplicationLauncher.isReadyForDebugging(data)) {\n          String port = Integer.toString(client.getDebuggerListenPort());\n          myDebugLauncher.launchDebug(device, port);\n          myDebugLauncher = null;\n        }\n      }\n    }\n  }","id":46753,"modified_method":"public void clientChanged(Client client, int changeMask) {\n    synchronized (myDebugLock) {\n      if (myDebugLauncher == null) {\n        return;\n      }\n      IDevice device = client.getDevice();\n      if (isMyDevice(device) && device.isOnline()) {\n        if (myTargetDeviceSerialNumbers.length == 0) {\n          myTargetDeviceSerialNumbers = new String[]{device.getSerialNumber()};\n        }\n        ClientData data = client.getClientData();\n        String description = data.getClientDescription();\n        if (description != null && description.equals(myTargetPackageName)) {\n          launchDebug(client);\n        }\n      }\n    }\n  }","commit_id":"84149412324805e2ed291a37f9749f902d19a8f5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void setTargetPackageName(String targetPackageName) {\n    myTargetPackageName = targetPackageName;\n  }","id":46754,"modified_method":"public void setTargetPackageName(String targetPackageName) {\n    synchronized (myDebugLock) {\n      myTargetPackageName = targetPackageName;\n    }\n  }","commit_id":"84149412324805e2ed291a37f9749f902d19a8f5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean uploadAndInstall(@NotNull IDevice device, @NotNull String packageName, @NotNull Module module) throws IOException {\n    String remotePath = \"/data/local/tmp/\" + packageName;\n    String localPath = myFacet.getApkPath();\n    if (!uploadApp(device, remotePath, localPath)) return false;\n    if (!installApp(device, remotePath, packageName)) return false;\n    return true;\n  }","id":46755,"modified_method":"private boolean uploadAndInstall(@NotNull IDevice device, @NotNull String packageName) throws IOException {\n    String remotePath = \"/data/local/tmp/\" + packageName;\n    String localPath = myFacet.getApkPath();\n    if (!uploadApp(device, remotePath, localPath)) return false;\n    if (!installApp(device, remotePath, packageName)) return false;\n    return true;\n  }","commit_id":"84149412324805e2ed291a37f9749f902d19a8f5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean uploadAndInstallDependentModules(@NotNull IDevice device) throws IOException {\n    for (Module module : myAdditionalModule2PackageName.keySet()) {\n      String packageName = myAdditionalModule2PackageName.get(module);\n      if (!uploadAndInstall(device, packageName, module)) {\n        return false;\n      }\n    }\n    return true;\n  }","id":46756,"modified_method":"private boolean uploadAndInstallDependentModules(@NotNull IDevice device) throws IOException {\n    for (Module module : myAdditionalModule2PackageName.keySet()) {\n      String packageName = myAdditionalModule2PackageName.get(module);\n      if (!uploadAndInstall(device, packageName)) {\n        return false;\n      }\n    }\n    return true;\n  }","commit_id":"84149412324805e2ed291a37f9749f902d19a8f5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void applyTo(AndroidRunConfiguration configuration) {\n    configuration.ACTIVITY_CLASS = myActivityField.getText();\n    if (myLaunchDefaultButton.isSelected()) {\n      configuration.MODE = AndroidRunConfiguration.LAUNCH_DEFAULT_ACTIVITY;\n    }\n    else if (myLaunchCustomButton.isSelected()) {\n      configuration.MODE = AndroidRunConfiguration.LAUNCH_SPECIFIC_ACTIVITY;\n    }\n    else {\n      configuration.MODE = AndroidRunConfiguration.DO_NOTHING;\n    }\n  }","id":46757,"modified_method":"public void applyTo(AndroidRunConfiguration configuration) {\n    configuration.ACTIVITY_CLASS = myActivityField.getText();\n    if (myLaunchDefaultButton.isSelected()) {\n      configuration.MODE = AndroidRunConfiguration.LAUNCH_DEFAULT_ACTIVITY;\n    }\n    else if (myLaunchCustomButton.isSelected()) {\n      configuration.MODE = AndroidRunConfiguration.LAUNCH_SPECIFIC_ACTIVITY;\n    }\n    else {\n      configuration.MODE = AndroidRunConfiguration.DO_NOTHING;\n    }\n    configuration.DEPLOY = myDeployAndInstallCheckBox.isSelected();\n  }","commit_id":"84149412324805e2ed291a37f9749f902d19a8f5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void resetFrom(AndroidRunConfiguration configuration) {\n    boolean launchSpecificActivity = configuration.MODE.equals(AndroidRunConfiguration.LAUNCH_SPECIFIC_ACTIVITY);\n    if (configuration.MODE.equals(AndroidRunConfiguration.LAUNCH_DEFAULT_ACTIVITY)) {\n      myLaunchDefaultButton.setSelected(true);\n    }\n    else if (launchSpecificActivity) {\n      myLaunchCustomButton.setSelected(true);\n    }\n    else {\n      myDoNothingButton.setSelected(true);\n    }\n    myActivityField.setEnabled(launchSpecificActivity);\n    myActivityField.setText(configuration.ACTIVITY_CLASS);\n  }","id":46758,"modified_method":"public void resetFrom(AndroidRunConfiguration configuration) {\n    boolean launchSpecificActivity = configuration.MODE.equals(AndroidRunConfiguration.LAUNCH_SPECIFIC_ACTIVITY);\n    if (configuration.MODE.equals(AndroidRunConfiguration.LAUNCH_DEFAULT_ACTIVITY)) {\n      myLaunchDefaultButton.setSelected(true);\n    }\n    else if (launchSpecificActivity) {\n      myLaunchCustomButton.setSelected(true);\n    }\n    else {\n      myDoNothingButton.setSelected(true);\n    }\n    myActivityField.setEnabled(launchSpecificActivity);\n    myActivityField.setText(configuration.ACTIVITY_CLASS);\n    myDeployAndInstallCheckBox.setSelected(configuration.DEPLOY);\n  }","commit_id":"84149412324805e2ed291a37f9749f902d19a8f5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void launchAllPersisted() {\n        for (MessageInput input : getAllPersisted()) {\n            launchPersisted(input);\n        }\n    }","id":46759,"modified_method":"public void launchAllPersisted() {\n        for (MessageInput input : getAllPersisted()) {\n            input.initialize(input.getConfiguration());\n            launchPersisted(input);\n        }\n    }","commit_id":"1690d8a2062fa68252be9514caece7183b7eeb4d","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"@POST\n    @Timed\n    public Response launch(String body) {\n\n        InputLaunchRequest lr;\n        try {\n            lr = objectMapper.readValue(body, InputLaunchRequest.class);\n        } catch (IOException e) {\n            LOG.error(\"Error while parsing JSON\", e);\n            throw new BadRequestException(e);\n        }\n\n        // Build a proper configuration from POST data.\n        Configuration inputConfig = new Configuration(lr.configuration);\n\n        // Build input.\n        DateTime createdAt = new DateTime(DateTimeZone.UTC);\n        MessageInput input;\n        try {\n            input = inputRegistry.create(lr.type);\n            input.setTitle(lr.title);\n            input.setCreatorUserId(lr.creatorUserId);\n            input.setCreatedAt(createdAt);\n            input.setGlobal(lr.global);\n\n            input.checkConfiguration(inputConfig);\n        } catch (NoSuchInputTypeException e) {\n            LOG.error(\"There is no such input type registered.\", e);\n            throw new BadRequestException(e);\n        } catch (ConfigurationException e) {\n            LOG.error(\"Missing or invalid input configuration.\", e);\n            throw new BadRequestException(e);\n        }\n\n        String inputId = UUID.randomUUID().toString();\n        input.setPersistId(inputId);\n\n        // Don't run if exclusive and another instance is already running.\n        if (input.isExclusive() && inputRegistry.hasTypeRunning(input.getClass())) {\n            LOG.error(\"Type is exclusive and already has input running.\");\n            throw new BadRequestException();\n        }\n\n        input.initialize(inputConfig);\n\n        // Launch input. (this will run async and clean up itself in case of an error.)\n        inputRegistry.launch(input, inputId, true);\n\n        final Map<String, String> result = ImmutableMap.of(\n                \"input_id\", inputId,\n                \"persist_id\", inputId);\n\n        return Response.accepted().entity(json(result)).build();\n    }","id":46760,"modified_method":"@POST\n    @Timed\n    public Response launch(String body) {\n\n        InputLaunchRequest lr;\n        try {\n            lr = objectMapper.readValue(body, InputLaunchRequest.class);\n        } catch (IOException e) {\n            LOG.error(\"Error while parsing JSON\", e);\n            throw new BadRequestException(e);\n        }\n\n        // Build a proper configuration from POST data.\n        Configuration inputConfig = new Configuration(lr.configuration);\n\n        // Build input.\n        DateTime createdAt = new DateTime(DateTimeZone.UTC);\n        MessageInput input;\n        try {\n            input = inputRegistry.create(lr.type);\n            input.setTitle(lr.title);\n            input.setCreatorUserId(lr.creatorUserId);\n            input.setCreatedAt(createdAt);\n            input.setGlobal(lr.global);\n\n            input.setConfiguration(inputConfig);\n\n            input.checkConfiguration(inputConfig);\n        } catch (NoSuchInputTypeException e) {\n            LOG.error(\"There is no such input type registered.\", e);\n            throw new BadRequestException(e);\n        } catch (ConfigurationException e) {\n            LOG.error(\"Missing or invalid input configuration.\", e);\n            throw new BadRequestException(e);\n        }\n\n        String inputId = UUID.randomUUID().toString();\n        input.setPersistId(inputId);\n\n        // Don't run if exclusive and another instance is already running.\n        if (input.isExclusive() && inputRegistry.hasTypeRunning(input.getClass())) {\n            LOG.error(\"Type is exclusive and already has input running.\");\n            throw new BadRequestException();\n        }\n\n        input.initialize(inputConfig);\n\n        // Launch input. (this will run async and clean up itself in case of an error.)\n        inputRegistry.launch(input, inputId, true);\n\n        final Map<String, String> result = ImmutableMap.of(\n                \"input_id\", inputId,\n                \"persist_id\", inputId);\n\n        return Response.accepted().entity(json(result)).build();\n    }","commit_id":"1690d8a2062fa68252be9514caece7183b7eeb4d","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public void initialize(Configuration configuration) {\n        this.configuration = configuration;\n    }","id":46761,"modified_method":"public void initialize(Configuration configuration) {\n    }","commit_id":"1690d8a2062fa68252be9514caece7183b7eeb4d","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"private MessageInput getMessageInput(InputSummaryResponse isr) {\n        MessageInput input;\n        try {\n            input = this.create(isr.type);\n\n            Configuration inputConfig = new Configuration(isr.configuration);\n            // Add all standard fields.\n            input.setTitle(isr.title);\n            input.setCreatorUserId(isr.creatorUserId);\n            input.setPersistId(isr.id);\n            input.setCreatedAt(new DateTime(isr.createdAt));\n            input.setGlobal(isr.global);\n\n            input.checkConfiguration(inputConfig);\n            // initialize must run after all fields have been set. Why oh why isn't this done in the constructor/factory method?\n            input.initialize(inputConfig);\n        } catch (NoSuchInputTypeException e) {\n            LOG.warn(\"Cannot launch persisted input. No such type [{}]. Error: {}\", isr.type, e);\n            return null;\n        } catch (ConfigurationException e) {\n            LOG.error(\"Missing or invalid input input configuration.\", e);\n            return null;\n        }\n        return input;\n    }","id":46762,"modified_method":"private MessageInput getMessageInput(InputSummaryResponse isr) {\n        MessageInput input;\n        try {\n            input = this.create(isr.type);\n\n            Configuration inputConfig = new Configuration(isr.configuration);\n            // Add all standard fields.\n            input.setTitle(isr.title);\n            input.setCreatorUserId(isr.creatorUserId);\n            input.setPersistId(isr.id);\n            input.setCreatedAt(new DateTime(isr.createdAt));\n            input.setGlobal(isr.global);\n            input.setConfiguration(inputConfig);\n\n            input.checkConfiguration(inputConfig);\n        } catch (NoSuchInputTypeException e) {\n            LOG.warn(\"Cannot launch persisted input. No such type [{}]. Error: {}\", isr.type, e);\n            return null;\n        } catch (ConfigurationException e) {\n            LOG.error(\"Missing or invalid input input configuration.\", e);\n            return null;\n        }\n        return input;\n    }","commit_id":"1690d8a2062fa68252be9514caece7183b7eeb4d","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"public RadioInputRegistry(MessageInputFactory messageInputFactory,\n                              ProcessBuffer processBuffer,\n                              AsyncHttpClient httpclient,\n                              URI serverUrl,\n                              ServerStatus serverStatus,\n                              InputService inputService) {\n        super(messageInputFactory, processBuffer);\n        this.httpclient = httpclient;\n        this.serverUrl = serverUrl;\n        this.serverStatus = serverStatus;\n        this.inputService = inputService;\n    }","id":46763,"modified_method":"public RadioInputRegistry(MessageInputFactory messageInputFactory,\n                              ProcessBuffer processBuffer,\n                              AsyncHttpClient httpclient,\n                              URI serverUrl,\n                              InputService inputService) {\n        super(messageInputFactory, processBuffer);\n        this.httpclient = httpclient;\n        this.serverUrl = serverUrl;\n        this.inputService = inputService;\n    }","commit_id":"1690d8a2062fa68252be9514caece7183b7eeb4d","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"@Inject\n    public RadioInputRegistryProvider(MessageInputFactory messageInputFactory,\n                                      ProcessBuffer processBuffer,\n                                      AsyncHttpClient httpClient,\n                                      Configuration configuration,\n                                      ServerStatus serverStatus,\n                                      InputService inputService) {\n        if (radioInputRegistry == null)\n            radioInputRegistry = new RadioInputRegistry(messageInputFactory,\n                    processBuffer,\n                    httpClient,\n                    configuration.getGraylog2ServerUri(),\n                    serverStatus,\n                    inputService);\n    }","id":46764,"modified_method":"@Inject\n    public RadioInputRegistryProvider(MessageInputFactory messageInputFactory,\n                                      ProcessBuffer processBuffer,\n                                      AsyncHttpClient httpClient,\n                                      Configuration configuration,\n                                      InputService inputService) {\n        if (radioInputRegistry == null)\n            radioInputRegistry = new RadioInputRegistry(messageInputFactory,\n                    processBuffer,\n                    httpClient,\n                    configuration.getGraylog2ServerUri(),\n                    inputService);\n    }","commit_id":"1690d8a2062fa68252be9514caece7183b7eeb4d","url":"https://github.com/Graylog2/graylog2-server"},{"original_method":"protected Set getOptionalPackages( MavenProject currentProject ) throws IOException, MojoExecutionException\n    {\n        HashSet required = new HashSet();\n        HashSet optional = new HashSet();\n        final Collection artifacts = getSelectedDependencies( currentProject.getArtifacts() );\n        for ( Iterator it = artifacts.iterator(); it.hasNext(); )\n        {\n            Artifact artifact = ( Artifact ) it.next();\n            if ( artifact.getArtifactHandler().isAddedToClasspath() )\n            {\n                if ( !Artifact.SCOPE_TEST.equals( artifact.getScope() ) )\n                {\n                    File file = getFile( artifact );\n                    if ( file == null )\n                    {\n                        continue;\n                    }\n                    Jar jar = new Jar( artifact.getArtifactId(), file );\n                    if( artifact.isOptional() ) {\n                        optional.addAll(jar.getPackages());\n                    } else {\n                        required.addAll(jar.getPackages());\n                    }\n                    jar.close();\n                }\n            }\n        }\n        optional.removeAll(required);\n        return optional;\n    }","id":46765,"modified_method":"protected Set getOptionalPackages( MavenProject currentProject ) throws IOException, MojoExecutionException\n    {\n        ArrayList inscope = new ArrayList();\n        final Collection artifacts = getSelectedDependencies( currentProject.getArtifacts() );\n        for ( Iterator it = artifacts.iterator(); it.hasNext(); )\n        {\n            Artifact artifact = ( Artifact ) it.next();\n            if ( artifact.getArtifactHandler().isAddedToClasspath() )\n            {\n                if ( !Artifact.SCOPE_TEST.equals( artifact.getScope() ) )\n                {\n                    inscope.add(artifact);\n                }\n            }\n        }\n\n        HashSet optionalArtifactIds = new HashSet();\n        for ( Iterator it = inscope.iterator(); it.hasNext(); )\n        {\n            Artifact artifact = ( Artifact ) it.next();\n            if( artifact.isOptional() ) {\n                String id = artifact.toString();\n                if( artifact.getScope()!=null ) {\n                    // strip the scope...\n                    id = id.replaceFirst(\":[^:]*$\", \"\");\n                }\n                optionalArtifactIds.add(id);\n            }\n\n        }\n\n        HashSet required = new HashSet();\n        HashSet optional = new HashSet();\n        for ( Iterator it = inscope.iterator(); it.hasNext(); )\n        {\n            Artifact artifact = ( Artifact ) it.next();\n            File file = getFile( artifact );\n            if ( file == null )\n            {\n                continue;\n            }\n\n            Jar jar = new Jar( artifact.getArtifactId(), file );\n            if( isTransitivelyOptional(optionalArtifactIds, artifact) ) {\n                optional.addAll(jar.getPackages());\n            } else {\n                required.addAll(jar.getPackages());\n            }\n            jar.close();\n        }\n\n        optional.removeAll(required);\n        return optional;\n    }","commit_id":"922498b0eb1f9b3491712b894d371e8480181d16","url":"https://github.com/apache/felix"},{"original_method":"private Dependency convert( org.apache.maven.model.Dependency dependency, ArtifactTypeRegistry stereotypes )\n    {\n        ArtifactType stereotype = stereotypes.get( dependency.getType() );\n        if ( stereotype == null )\n        {\n            stereotype = new DefaultArtifactType( dependency.getType() );\n        }\n\n        boolean system = dependency.getSystemPath() != null && dependency.getSystemPath().length() > 0;\n\n        Map<String, String> props = null;\n        if ( system )\n        {\n            props = Collections.singletonMap( ArtifactProperties.LOCAL_PATH, dependency.getSystemPath() );\n        }\n\n        Artifact artifact =\n            new DefaultArtifact( dependency.getGroupId(), dependency.getArtifactId(), dependency.getClassifier(), null,\n                                 dependency.getVersion(), props, stereotype );\n\n        List<Exclusion> exclusions = new ArrayList<>( dependency.getExclusions().size() );\n        for ( org.apache.maven.model.Exclusion exclusion : dependency.getExclusions() )\n        {\n            exclusions.add( convert( exclusion ) );\n        }\n\n        Dependency result = new Dependency( artifact, dependency.getScope(), dependency.isOptional(), exclusions );\n\n        return result;\n    }","id":46766,"modified_method":"private Dependency convert( org.apache.maven.model.Dependency dependency, ArtifactTypeRegistry stereotypes )\n    {\n        ArtifactType stereotype = stereotypes.get( dependency.getType() );\n        if ( stereotype == null )\n        {\n            stereotype = new DefaultArtifactType( dependency.getType() );\n        }\n\n        boolean system = dependency.getSystemPath() != null && dependency.getSystemPath().length() > 0;\n\n        Map<String, String> props = null;\n        if ( system )\n        {\n            props = Collections.singletonMap( ArtifactProperties.LOCAL_PATH, dependency.getSystemPath() );\n        }\n\n        Artifact artifact =\n            new DefaultArtifact( dependency.getGroupId(), dependency.getArtifactId(), dependency.getClassifier(), null,\n                                 dependency.getVersion(), props, stereotype );\n\n        List<Exclusion> exclusions = new ArrayList<>( dependency.getExclusions().size() );\n        for ( org.apache.maven.model.Exclusion exclusion : dependency.getExclusions() )\n        {\n            exclusions.add( convert( exclusion ) );\n        }\n\n        Dependency result = new Dependency( artifact, dependency.getScope(),\n                                            dependency.getOptional() != null\n                                                ? dependency.isOptional()\n                                                : null,\n                                            exclusions );\n\n        return result;\n    }","commit_id":"184f58ff83a6d043c695a07f1b1ae89630f6bc9e","url":"https://github.com/apache/maven"},{"original_method":"public static Dependency toDependency( org.apache.maven.model.Dependency dependency,\n                                           ArtifactTypeRegistry stereotypes )\n    {\n        ArtifactType stereotype = stereotypes.get( dependency.getType() );\n        if ( stereotype == null )\n        {\n            stereotype = new DefaultArtifactType( dependency.getType() );\n        }\n\n        boolean system = dependency.getSystemPath() != null && dependency.getSystemPath().length() > 0;\n\n        Map<String, String> props = null;\n        if ( system )\n        {\n            props = Collections.singletonMap( ArtifactProperties.LOCAL_PATH, dependency.getSystemPath() );\n        }\n\n        Artifact artifact =\n            new DefaultArtifact( dependency.getGroupId(), dependency.getArtifactId(), dependency.getClassifier(), null,\n                                 dependency.getVersion(), props, stereotype );\n\n        List<Exclusion> exclusions = new ArrayList<>( dependency.getExclusions().size() );\n        for ( org.apache.maven.model.Exclusion exclusion : dependency.getExclusions() )\n        {\n            exclusions.add( toExclusion( exclusion ) );\n        }\n\n        Dependency result = new Dependency( artifact, dependency.getScope(), dependency.isOptional(), exclusions );\n\n        return result;\n    }","id":46767,"modified_method":"public static Dependency toDependency( org.apache.maven.model.Dependency dependency,\n                                           ArtifactTypeRegistry stereotypes )\n    {\n        ArtifactType stereotype = stereotypes.get( dependency.getType() );\n        if ( stereotype == null )\n        {\n            stereotype = new DefaultArtifactType( dependency.getType() );\n        }\n\n        boolean system = dependency.getSystemPath() != null && dependency.getSystemPath().length() > 0;\n\n        Map<String, String> props = null;\n        if ( system )\n        {\n            props = Collections.singletonMap( ArtifactProperties.LOCAL_PATH, dependency.getSystemPath() );\n        }\n\n        Artifact artifact =\n            new DefaultArtifact( dependency.getGroupId(), dependency.getArtifactId(), dependency.getClassifier(), null,\n                                 dependency.getVersion(), props, stereotype );\n\n        List<Exclusion> exclusions = new ArrayList<>( dependency.getExclusions().size() );\n        for ( org.apache.maven.model.Exclusion exclusion : dependency.getExclusions() )\n        {\n            exclusions.add( toExclusion( exclusion ) );\n        }\n\n        Dependency result = new Dependency( artifact,\n                                            dependency.getScope(),\n                                            dependency.getOptional() != null\n                                                ? dependency.isOptional()\n                                                : null,\n                                            exclusions );\n\n        return result;\n    }","commit_id":"184f58ff83a6d043c695a07f1b1ae89630f6bc9e","url":"https://github.com/apache/maven"},{"original_method":"private static void writeExtensions(XmlSerializer serializer, GPXExtensions p) throws IOException {\n\t\tserializer.startTag(null, \"extensions\");\n\t\tfor(Map.Entry<String, String> s : p.getExtensionsToRead().entrySet()){\n\t\t\twriteNotNullText(serializer, s.getKey(), s.getValue());\n\t\t}\n\t\tserializer.endTag(null, \"extensions\");\n\t}","id":46768,"modified_method":"private static void writeExtensions(XmlSerializer serializer, GPXExtensions p) throws IOException {\n\t\tif (!p.getExtensionsToRead().isEmpty()) {\n\t\t\tserializer.startTag(null, \"extensions\");\n\t\t\tfor (Map.Entry<String, String> s : p.getExtensionsToRead().entrySet()) {\n\t\t\t\twriteNotNullText(serializer, s.getKey(), s.getValue());\n\t\t\t}\n\t\t\tserializer.endTag(null, \"extensions\");\n\t\t}\n\t}","commit_id":"91d46426edabc6ea5e29dfb8b106ec50843351eb","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n\t\tprotected void onPostExecute(String result) {\n\t\t\tif(result != null){\n\t\t\t\tToast.makeText(mapActivity, result, Toast.LENGTH_SHORT);\n\t\t\t}\n\t\t}","id":46769,"modified_method":"@Override\n\t\tprotected void onPostExecute(String result) {\n\t\t\tif(result != null){\n\t\t\t\tToast.makeText(mapActivity, result, Toast.LENGTH_LONG).show();\n\t\t\t}\n\t\t}","commit_id":"91d46426edabc6ea5e29dfb8b106ec50843351eb","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n\t\tprotected String doInBackground(File... params) {\n\t\t\tif (params.length > 0) {\n\t\t\t\tFile file = params[0];\n\t\t\t\t\n\t\t\t\treturn mapActivity.getString(R.string.route_successfully_saved_at, file.getName());\n\t\t\t}\n\t\t\treturn null;\n\t\t}","id":46770,"modified_method":"@Override\n\t\tprotected String doInBackground(File... params) {\n\t\t\tif (params.length > 0) {\n\t\t\t\tFile file = params[0];\n\t\t\t\tGPXFile gpx = mapActivity.getRoutingHelper().generateGPXFileWithRoute();\n\t\t\t\tGPXUtilities.writeGpxFile(file, gpx, mapActivity);\n\t\t\t\treturn mapActivity.getString(R.string.route_successfully_saved_at, file.getName());\n\t\t\t}\n\t\t\treturn null;\n\t\t}","commit_id":"91d46426edabc6ea5e29dfb8b106ec50843351eb","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public void saveDirections() {\n\t\tOsmandSettings settings = getMyApplication().getSettings();\n\t\tfinal File fileDir = settings.extendOsmandPath(ResourceManager.GPX_PATH);\n\t\tfinal Dialog dlg = new Dialog(mapActivity);\n\t\tdlg.setTitle(R.string.save_route_dialog_title);\n\t\tdlg.setContentView(R.layout.save_directions_dialog);\n\t\tfinal EditText edit = (EditText) dlg.findViewById(R.id.FileNameEdit);\n\t\tedit.setText(\"\");\n\t\t((Button) dlg.findViewById(R.id.Save)).setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tString name = edit.getText().toString();\n\t\t\t\tfileDir.mkdirs();\n\t\t\t\tFile toSave = fileDir;\n\t\t\t\tif(name.length() > 0) {\n\t\t\t\t\tif(!name.endsWith(\".gpx\")){\n\t\t\t\t\t\tname += \".gpx\";\n\t\t\t\t\t}\n\t\t\t\t\ttoSave = new File(fileDir, name);\n\t\t\t\t}\n\t\t\t\tif(toSave.exists()){\n\t\t\t\t\tdlg.findViewById(R.id.DuplicateFileName).setVisibility(View.VISIBLE);\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\tnew SaveDirectionsAsyncTask().execute(fileDir);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\t((Button) dlg.findViewById(R.id.Cancel)).setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tdlg.dismiss();\n\t\t\t}\n\t\t});\n\t\t\n\t\t\n\t\tdlg.show();\n\t}","id":46771,"modified_method":"public void saveDirections() {\n\t\tOsmandSettings settings = getMyApplication().getSettings();\n\t\tfinal File fileDir = settings.extendOsmandPath(ResourceManager.GPX_PATH);\n\t\tfinal Dialog dlg = new Dialog(mapActivity);\n\t\tdlg.setTitle(R.string.save_route_dialog_title);\n\t\tdlg.setContentView(R.layout.save_directions_dialog);\n\t\tfinal EditText edit = (EditText) dlg.findViewById(R.id.FileNameEdit);\n\t\t\n\t\tedit.setText(MessageFormat.format(\"{0,date,dd-MM-yyyy}\", new Date()));\n\t\t((Button) dlg.findViewById(R.id.Save)).setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tString name = edit.getText().toString();\n\t\t\t\tfileDir.mkdirs();\n\t\t\t\tFile toSave = fileDir;\n\t\t\t\tif(name.length() > 0) {\n\t\t\t\t\tif(!name.endsWith(\".gpx\")){\n\t\t\t\t\t\tname += \".gpx\";\n\t\t\t\t\t}\n\t\t\t\t\ttoSave = new File(fileDir, name);\n\t\t\t\t}\n\t\t\t\tif(toSave.exists()){\n\t\t\t\t\tdlg.findViewById(R.id.DuplicateFileName).setVisibility(View.VISIBLE);\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\tdlg.dismiss();\n\t\t\t\t\tnew SaveDirectionsAsyncTask().execute(toSave);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t\n\t\t((Button) dlg.findViewById(R.id.Cancel)).setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tdlg.dismiss();\n\t\t\t}\n\t\t});\n\t\t\n\t\t\n\t\tdlg.show();\n\t}","commit_id":"91d46426edabc6ea5e29dfb8b106ec50843351eb","url":"https://github.com/osmandapp/Osmand"},{"original_method":"protected Map<String, String> downloadIndex(){\r\n\t\ttry {\r\n\t\t\tlog.debug(\"Start loading list of index files\"); //$NON-NLS-1$\r\n\t\t\tMap<String, String> indexFiles = DownloaderIndexFromGoogleCode.getIndexFiles(new String[] { IndexConstants.ADDRESS_INDEX_EXT,\r\n\t\t\t\t\tIndexConstants.POI_INDEX_EXT, IndexConstants.TRANSPORT_INDEX_EXT, }, new String[] {\r\n\t\t\t\t\tIndexConstants.ADDRESS_TABLE_VERSION + \"\", IndexConstants.POI_TABLE_VERSION + \"\",//$NON-NLS-1$//$NON-NLS-2$\r\n\t\t\t\t\tIndexConstants.TRANSPORT_TABLE_VERSION + \"\",});  //$NON-NLS-1$\r\n\t\t\tif (indexFiles != null && !indexFiles.isEmpty()) {\r\n\t\t\t\treturn indexFiles;\r\n\t\t\t} else {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t} catch (RuntimeException e) {\r\n\t\t\tlog.error(\"Error while loading indexes from repository\", e); //$NON-NLS-1$\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}","id":46772,"modified_method":"protected Map<String, String> downloadIndex(){\r\n\t\ttry {\r\n\t\t\tlog.debug(\"Start loading list of index files\"); //$NON-NLS-1$\r\n\t\t\tMap<String, String> indexFiles = DownloaderIndexFromGoogleCode.getIndexFiles(new String[] { \r\n\t\t\t\t\tIndexConstants.ADDRESS_INDEX_EXT, IndexConstants.POI_INDEX_EXT, IndexConstants.TRANSPORT_INDEX_EXT, \r\n\t\t\t\t\tIndexConstants.ADDRESS_INDEX_EXT_ZIP, IndexConstants.POI_INDEX_EXT_ZIP, IndexConstants.TRANSPORT_INDEX_EXT_ZIP, }, \r\n\t\t\t\t\tnew String[] {\r\n\t\t\t\t\tIndexConstants.ADDRESS_TABLE_VERSION + \"\", IndexConstants.POI_TABLE_VERSION + \"\",//$NON-NLS-1$//$NON-NLS-2$\r\n\t\t\t\t\tIndexConstants.TRANSPORT_TABLE_VERSION + \"\", //$NON-NLS-1$\r\n\t\t\t\t\tIndexConstants.ADDRESS_TABLE_VERSION + \"\", IndexConstants.POI_TABLE_VERSION + \"\",//$NON-NLS-1$//$NON-NLS-2$\r\n\t\t\t\t\tIndexConstants.TRANSPORT_TABLE_VERSION + \"\"});  //$NON-NLS-1$\r\n\t\t\tif (indexFiles != null && !indexFiles.isEmpty()) {\r\n\t\t\t\treturn indexFiles;\r\n\t\t\t} else {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\t\t} catch (RuntimeException e) {\r\n\t\t\tlog.error(\"Error while loading indexes from repository\", e); //$NON-NLS-1$\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}","commit_id":"e16371d336cdef19d76cd8c180d3a9f331c67b11","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\r\n\t\tpublic View getView(int position, View convertView, ViewGroup parent) {\r\n\t\t\tView row = convertView;\r\n\t\t\tif (row == null) {\r\n\t\t\t\tLayoutInflater inflater = getLayoutInflater();\r\n\t\t\t\trow = inflater.inflate(com.osmand.R.layout.download_index_list_item, parent, false);\r\n\t\t\t}\r\n\t\t\tTextView item = (TextView) row.findViewById(R.id.download_item);\r\n\t\t\tTextView description = (TextView) row.findViewById(R.id.download_descr);\r\n\t\t\tEntry<String, String> e = getItem(position);\r\n\t\t\tint l = e.getKey().lastIndexOf('_');\r\n\t\t\tString s = \"\"; //$NON-NLS-1$\r\n\t\t\tif(e.getKey().endsWith(IndexConstants.POI_INDEX_EXT)){\r\n\t\t\t\ts = getString(R.string.poi);\r\n\t\t\t} else if(e.getKey().endsWith(IndexConstants.ADDRESS_INDEX_EXT)){\r\n\t\t\t\ts = getString(R.string.address);\r\n\t\t\t} else if(e.getKey().endsWith(IndexConstants.TRANSPORT_INDEX_EXT)){\r\n\t\t\t\ts = getString(R.string.transport);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\titem.setText(s + \"\\n \" + e.getKey().substring(0, l).replace('_', ' ')); //$NON-NLS-1$\r\n\t\t\tdescription.setText(e.getValue().replace(':', '\\n'));\r\n\t\t\treturn row;\r\n\t\t}","id":46773,"modified_method":"@Override\r\n\t\tpublic View getView(int position, View convertView, ViewGroup parent) {\r\n\t\t\tView row = convertView;\r\n\t\t\tif (row == null) {\r\n\t\t\t\tLayoutInflater inflater = getLayoutInflater();\r\n\t\t\t\trow = inflater.inflate(com.osmand.R.layout.download_index_list_item, parent, false);\r\n\t\t\t}\r\n\t\t\tTextView item = (TextView) row.findViewById(R.id.download_item);\r\n\t\t\tTextView description = (TextView) row.findViewById(R.id.download_descr);\r\n\t\t\tEntry<String, String> e = getItem(position);\r\n\t\t\tint l = e.getKey().lastIndexOf('_');\r\n\t\t\tString s = \"\"; //$NON-NLS-1$\r\n\t\t\tif(e.getKey().endsWith(IndexConstants.POI_INDEX_EXT) || e.getKey().endsWith(IndexConstants.POI_INDEX_EXT_ZIP)){\r\n\t\t\t\ts = getString(R.string.poi);\r\n\t\t\t} else if(e.getKey().endsWith(IndexConstants.ADDRESS_INDEX_EXT) || e.getKey().endsWith(IndexConstants.ADDRESS_INDEX_EXT_ZIP)){\r\n\t\t\t\ts = getString(R.string.address);\r\n\t\t\t} else if(e.getKey().endsWith(IndexConstants.TRANSPORT_INDEX_EXT) || e.getKey().endsWith(IndexConstants.TRANSPORT_INDEX_EXT_ZIP)){\r\n\t\t\t\ts = getString(R.string.transport);\r\n\t\t\t}\r\n\t\t\tString name = e.getKey().substring(0, l).replace('_', ' ');\r\n\t\t\tif(e.getKey().endsWith(\".zip\")){ //$NON-NLS-1$\r\n\t\t\t\tname += \" (zip)\"; //$NON-NLS-1$\r\n\t\t\t}\r\n\t\t\titem.setText(s + \"\\n \" + name); //$NON-NLS-1$\r\n\t\t\tdescription.setText(e.getValue().replace(':', '\\n'));\r\n\t\t\treturn row;\r\n\t\t}","commit_id":"e16371d336cdef19d76cd8c180d3a9f331c67b11","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private File resolveFileName(String key, String regionName){\r\n\t\tFile parent = null;\r\n\t\tif(key.endsWith(IndexConstants.ADDRESS_INDEX_EXT)){\r\n\t\t\tparent = new File(Environment.getExternalStorageDirectory(), ResourceManager.ADDRESS_PATH);\r\n\t\t\tregionName += IndexConstants.ADDRESS_INDEX_EXT;\r\n\t\t} else if(key.endsWith(IndexConstants.POI_INDEX_EXT)){\r\n\t\t\tparent = new File(Environment.getExternalStorageDirectory(), ResourceManager.POI_PATH);\r\n\t\t\tregionName += IndexConstants.POI_INDEX_EXT;\r\n\t\t} else if(key.endsWith(IndexConstants.TRANSPORT_INDEX_EXT)){\r\n\t\t\tparent = new File(Environment.getExternalStorageDirectory(), ResourceManager.TRANSPORT_PATH);\r\n\t\t\tregionName += IndexConstants.TRANSPORT_INDEX_EXT;\r\n\t\t}\r\n\t\tif(parent != null){\r\n\t\t\tparent.mkdirs();\r\n\t\t}\r\n\t\tif(parent == null || !parent.exists()){\r\n\t\t\tToast.makeText(DownloadIndexActivity.this, getString(R.string.download_sd_dir_not_accessible), Toast.LENGTH_LONG);\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tFile file = new File(parent, regionName);\r\n\t\treturn file;\r\n\t}","id":46774,"modified_method":"private File resolveFileName(String key, String regionName){\r\n\t\tFile parent = null;\r\n\t\tif(key.endsWith(IndexConstants.ADDRESS_INDEX_EXT)){\r\n\t\t\tparent = new File(Environment.getExternalStorageDirectory(), ResourceManager.ADDRESS_PATH);\r\n\t\t\tregionName += IndexConstants.ADDRESS_INDEX_EXT;\r\n\t\t} else if(key.endsWith(IndexConstants.ADDRESS_INDEX_EXT_ZIP)){\r\n\t\t\tparent = new File(Environment.getExternalStorageDirectory(), ResourceManager.ADDRESS_PATH);\r\n\t\t\tregionName += IndexConstants.ADDRESS_INDEX_EXT_ZIP;\r\n\t\t} else if(key.endsWith(IndexConstants.POI_INDEX_EXT)){\r\n\t\t\tparent = new File(Environment.getExternalStorageDirectory(), ResourceManager.POI_PATH);\r\n\t\t\tregionName += IndexConstants.POI_INDEX_EXT;\r\n\t\t} else if(key.endsWith(IndexConstants.POI_INDEX_EXT_ZIP)){\r\n\t\t\tparent = new File(Environment.getExternalStorageDirectory(), ResourceManager.POI_PATH);\r\n\t\t\tregionName += IndexConstants.POI_INDEX_EXT_ZIP;\r\n\t\t} else if(key.endsWith(IndexConstants.TRANSPORT_INDEX_EXT)){\r\n\t\t\tparent = new File(Environment.getExternalStorageDirectory(), ResourceManager.TRANSPORT_PATH);\r\n\t\t\tregionName += IndexConstants.TRANSPORT_INDEX_EXT;\r\n\t\t} else if(key.endsWith(IndexConstants.TRANSPORT_INDEX_EXT_ZIP)){\r\n\t\t\tparent = new File(Environment.getExternalStorageDirectory(), ResourceManager.TRANSPORT_PATH);\r\n\t\t\tregionName += IndexConstants.TRANSPORT_INDEX_EXT_ZIP;\r\n\t\t}\r\n\t\tif(parent != null){\r\n\t\t\tparent.mkdirs();\r\n\t\t}\r\n\t\tif(parent == null || !parent.exists()){\r\n\t\t\tToast.makeText(DownloadIndexActivity.this, getString(R.string.download_sd_dir_not_accessible), Toast.LENGTH_LONG).show();\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tFile file = new File(parent, regionName);\r\n\t\treturn file;\r\n\t}","commit_id":"e16371d336cdef19d76cd8c180d3a9f331c67b11","url":"https://github.com/osmandapp/Osmand"},{"original_method":"protected void downloadFile(final String key, final File file) {\r\n\t\t\r\n\t\tfinal ProgressDialog dlg = ProgressDialog.show(this, getString(R.string.downloading), getString(R.string.downloading_file), true, true);\r\n\t\tdlg.show();\r\n\t\tfinal ProgressDialogImplementation impl = new ProgressDialogImplementation(dlg, true);\r\n\t\timpl.setRunnable(\"DownloadIndex\", new Runnable(){ //$NON-NLS-1$\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void run() {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tFileOutputStream out = new FileOutputStream(file);\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tURL url = DownloaderIndexFromGoogleCode.getInputStreamToLoadIndex(key);\r\n\t\t\t\t\t\tURLConnection conn = url.openConnection();\r\n\t\t\t\t\t\tInputStream is = conn.getInputStream();\r\n\t\t\t\t\t\timpl.startTask(getString(R.string.downloading_file), conn.getContentLength());\r\n\t\t\t\t\t\tbyte[] buffer = new byte[BUFFER_SIZE];\r\n\t\t\t\t\t\tint read = 0;\r\n\t\t\t\t\t\twhile((read = is.read(buffer)) != -1){\r\n\t\t\t\t\t\t\tout.write(buffer, 0, read);\r\n\t\t\t\t\t\t\timpl.progress(read);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tArrayList<String> warnings = new ArrayList<String>();\r\n\t\t\t\t\t\tif(file.getName().endsWith(IndexConstants.ADDRESS_INDEX_EXT)){\r\n\t\t\t\t\t\t\tResourceManager.getResourceManager().indexingAddress(impl, warnings, file);\r\n\t\t\t\t\t\t} else if(file.getName().endsWith(IndexConstants.POI_INDEX_EXT)){\r\n\t\t\t\t\t\t\tResourceManager.getResourceManager().indexingPoi(impl, warnings, file);\r\n\t\t\t\t\t\t} else if(file.getName().endsWith(IndexConstants.TRANSPORT_INDEX_EXT)){\r\n\t\t\t\t\t\t\tResourceManager.getResourceManager().indexingTransport(impl, warnings, file);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(warnings.isEmpty()){\r\n\t\t\t\t\t\t\tshowWarning(getString(R.string.download_index_success));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tshowWarning(warnings.get(0));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} finally {\r\n\t\t\t\t\t\tout.close();\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tlog.error(\"Exception ocurred\", e); //$NON-NLS-1$\r\n\t\t\t\t\tshowWarning(getString(R.string.error_io_error));\r\n\t\t\t\t\t// Possibly file is corrupted\r\n\t\t\t\t\tfile.delete();\r\n\t\t\t\t} finally {\r\n\t\t\t\t\tdlg.dismiss();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\timpl.run();\r\n\t}","id":46775,"modified_method":"protected void downloadFile(final String key, final File file) {\r\n\t\t\r\n\t\tfinal ProgressDialog dlg = ProgressDialog.show(this, getString(R.string.downloading), getString(R.string.downloading_file), true, true);\r\n\t\tdlg.show();\r\n\t\tfinal ProgressDialogImplementation impl = new ProgressDialogImplementation(dlg, true);\r\n\t\timpl.setRunnable(\"DownloadIndex\", new Runnable(){ //$NON-NLS-1$\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void run() {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tFileOutputStream out = new FileOutputStream(file);\r\n\t\t\t\t\tURL url = DownloaderIndexFromGoogleCode.getInputStreamToLoadIndex(key);\r\n\t\t\t\t\tURLConnection conn = url.openConnection();\r\n\t\t\t\t\tInputStream is = conn.getInputStream();\r\n\t\t\t\t\timpl.startTask(getString(R.string.downloading_file), conn.getContentLength());\r\n\t\t\t\t\tbyte[] buffer = new byte[BUFFER_SIZE];\r\n\t\t\t\t\tint read = 0;\r\n\t\t\t\t\twhile((read = is.read(buffer)) != -1){\r\n\t\t\t\t\t\tout.write(buffer, 0, read);\r\n\t\t\t\t\t\timpl.progress(read);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tout.close();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tFile toIndex = file;\r\n\t\t\t\t\tif(file.getName().endsWith(\".zip\")){ //$NON-NLS-1$\r\n\t\t\t\t\t\timpl.startTask(getString(R.string.unzipping_file), -1);\r\n\t\t\t\t\t\ttoIndex = new File(file.getParentFile(), file.getName().substring(0, file.getName().length() - 3) + \"odb\"); //$NON-NLS-1$\r\n\t\t\t\t\t\tZipInputStream zipIn = new ZipInputStream(new FileInputStream(file));\r\n\t\t\t\t\t\tZipEntry entry = null;\r\n\t\t\t\t\t\tboolean found = false;\r\n\t\t\t\t\t\twhile(!found) {\r\n\t\t\t\t\t\t\tif(entry != null){\r\n\t\t\t\t\t\t\t\tzipIn.closeEntry();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tentry = zipIn.getNextEntry();\r\n\t\t\t\t\t\t\tfound = entry == null || entry.getName().endsWith(\".odb\"); //$NON-NLS-1$\r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t\tif(entry != null){\r\n\t\t\t\t\t\t\tout = new FileOutputStream(toIndex);\r\n\t\t\t\t\t\t\twhile((read = zipIn.read(buffer)) != -1){\r\n\t\t\t\t\t\t\t\tout.write(buffer, 0, read);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tout.close();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tzipIn.close();\r\n\t\t\t\t\t\tfile.delete(); // zip is no needed more\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tArrayList<String> warnings = new ArrayList<String>();\r\n\t\t\t\t\tif(toIndex.getName().endsWith(IndexConstants.ADDRESS_INDEX_EXT)){\r\n\t\t\t\t\t\tResourceManager.getResourceManager().indexingAddress(impl, warnings, toIndex);\r\n\t\t\t\t\t} else if(toIndex.getName().endsWith(IndexConstants.POI_INDEX_EXT)){\r\n\t\t\t\t\t\tResourceManager.getResourceManager().indexingPoi(impl, warnings, toIndex);\r\n\t\t\t\t\t} else if(toIndex.getName().endsWith(IndexConstants.TRANSPORT_INDEX_EXT)){\r\n\t\t\t\t\t\tResourceManager.getResourceManager().indexingTransport(impl, warnings, toIndex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(warnings.isEmpty()){\r\n\t\t\t\t\t\tshowWarning(getString(R.string.download_index_success));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tshowWarning(warnings.get(0));\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tlog.error(\"Exception ocurred\", e); //$NON-NLS-1$\r\n\t\t\t\t\tshowWarning(getString(R.string.error_io_error));\r\n\t\t\t\t\t// Possibly file is corrupted\r\n\t\t\t\t\tfile.delete();\r\n\t\t\t\t} finally {\r\n\t\t\t\t\tdlg.dismiss();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\timpl.run();\r\n\t}","commit_id":"e16371d336cdef19d76cd8c180d3a9f331c67b11","url":"https://github.com/osmandapp/Osmand"},{"original_method":"/**\r\n\t * @param args\r\n\t * @throws URISyntaxException \r\n\t * @throws IOException \r\n\t */\r\n\tpublic static void main(String[] args) throws URISyntaxException, IOException {\r\n\t\tMap<String, String> indexFiles = DownloaderIndexFromGoogleCode.getIndexFiles(new String[] { IndexConstants.ADDRESS_INDEX_EXT,\r\n\t\t\t\tIndexConstants.POI_INDEX_EXT, IndexConstants.TRANSPORT_INDEX_EXT }, new String[] {\r\n\t\t\t\tIndexConstants.ADDRESS_TABLE_VERSION + \"\", IndexConstants.POI_TABLE_VERSION + \"\",  //$NON-NLS-1$//$NON-NLS-2$\r\n\t\t\t\tIndexConstants.TRANSPORT_TABLE_VERSION + \"\" }); //$NON-NLS-1$\r\n\t\tSystem.out.println(indexFiles);\r\n\t}","id":46776,"modified_method":"/**\r\n\t * @param args\r\n\t * @throws URISyntaxException \r\n\t * @throws IOException \r\n\t */\r\n\tpublic static void main(String[] args) throws URISyntaxException, IOException {\r\n\t\tMap<String, String> indexFiles = DownloaderIndexFromGoogleCode.getIndexFiles(\r\n\t\t\t\tnew String[] { IndexConstants.ADDRESS_INDEX_EXT,\tIndexConstants.POI_INDEX_EXT, IndexConstants.TRANSPORT_INDEX_EXT,\r\n\t\t\t\t\t\tIndexConstants.ADDRESS_INDEX_EXT_ZIP,\tIndexConstants.POI_INDEX_EXT_ZIP, IndexConstants.TRANSPORT_INDEX_EXT_ZIP,}, \r\n\t\t\t\tnew String[] {\tIndexConstants.ADDRESS_TABLE_VERSION + \"\", IndexConstants.POI_TABLE_VERSION + \"\",  //$NON-NLS-1$//$NON-NLS-2$\r\n\t\t\t\t\t\t\t\tIndexConstants.TRANSPORT_TABLE_VERSION + \"\" , //$NON-NLS-1$\r\n\t\t\t\t\t\t\t\tIndexConstants.ADDRESS_TABLE_VERSION + \"\", IndexConstants.POI_TABLE_VERSION + \"\",  //$NON-NLS-1$//$NON-NLS-2$\r\n\t\t\t\t\t\t\t\tIndexConstants.TRANSPORT_TABLE_VERSION + \"\" }); //$NON-NLS-1$\r\n\t\tSystem.out.println(indexFiles);\r\n\t}","commit_id":"e16371d336cdef19d76cd8c180d3a9f331c67b11","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private static StringBuilder getContent() {\r\n\t\ttry {\r\n\t\t\tURL url = new URL(\"http://code.google.com/p/osmand/downloads/list?num=500&start=0\"); //$NON-NLS-1$\r\n\r\n\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\r\n\t\t\tStringBuilder b = new StringBuilder();\r\n\t\t\tString s = null;\r\n\t\t\twhile ((s = reader.readLine()) != null) {\r\n\t\t\t\tb.append(s);\r\n\t\t\t}\r\n\t\t\treturn b;\r\n\t\t} catch (MalformedURLException e) {\r\n\t\t\tlog.error(\"Unexpected exception\", e); //$NON-NLS-1$\r\n\t\t\treturn null;\r\n\t\t} catch (IOException e) {\r\n\t\t\tlog.error(\"Input/Output exception\", e); //$NON-NLS-1$\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}","id":46777,"modified_method":"private static StringBuilder getContent() {\r\n\t\ttry {\r\n\t\t\tURL url = new URL(\"http://code.google.com/p/osmand/downloads/list?num=1500&start=0\"); //$NON-NLS-1$\r\n\r\n\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\r\n\t\t\tStringBuilder b = new StringBuilder();\r\n\t\t\tString s = null;\r\n\t\t\twhile ((s = reader.readLine()) != null) {\r\n\t\t\t\tb.append(s);\r\n\t\t\t}\r\n\t\t\treturn b;\r\n\t\t} catch (MalformedURLException e) {\r\n\t\t\tlog.error(\"Unexpected exception\", e); //$NON-NLS-1$\r\n\t\t\treturn null;\r\n\t\t} catch (IOException e) {\r\n\t\t\tlog.error(\"Input/Output exception\", e); //$NON-NLS-1$\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}","commit_id":"e16371d336cdef19d76cd8c180d3a9f331c67b11","url":"https://github.com/osmandapp/Osmand"},{"original_method":"protected void uploadIndex(File f, Set<String> alreadyUploadedFiles){\r\n\t\tif(!uploadIndexes){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tMessageFormat format = new MessageFormat(\"{0,date,dd.MM.yyyy} : {1, number,##.#} MB\", Locale.US);\r\n\t\tString summary;\r\n\t\tdouble mbLengh = (double)f.length() / MB;\r\n\t\t\r\n\t\tString descriptionFile = \"{\"+format.format(new Object[]{new Date(f.lastModified()), mbLengh})+\"}\";\r\n\t\tif(f.getName().endsWith(IndexConstants.POI_INDEX_EXT)){\r\n\t\t\tString regionName = f.getName().substring(0, f.getName().length() - IndexConstants.POI_INDEX_EXT.length() - 2);\r\n\t\t\tsummary = \"POI index for \" + regionName + \" \" + descriptionFile;\r\n\t\t} else if(f.getName().endsWith(IndexConstants.ADDRESS_INDEX_EXT)){\r\n\t\t\tString regionName = f.getName().substring(0, f.getName().length() - IndexConstants.ADDRESS_INDEX_EXT.length() - 2);\r\n\t\t\tsummary = \"Adress index for \" + regionName + \" \" + descriptionFile;\r\n\t\t} else if(f.getName().endsWith(IndexConstants.TRANSPORT_INDEX_EXT)){\r\n\t\t\tString regionName = f.getName().substring(0, f.getName().length() - IndexConstants.TRANSPORT_INDEX_EXT.length() - 2);\r\n\t\t\tsummary = \"Transport index for \" + regionName + \" \" + descriptionFile;\r\n\t\t} else { \r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(mbLengh > 100){\r\n\t\t\tSystem.err.println(\"ERROR : file \" + f.getName() + \" exceeded 90 mb!!! Could not be uploaded.\");\r\n\t\t\treturn; // restriction for google code\r\n\t\t}\r\n\t\talreadyUploadedFiles.add(f.getName());\r\n\t\tGoogleCodeUploadIndex uploader = new GoogleCodeUploadIndex();\r\n\t\tuploader.setFileName(f.getAbsolutePath());\r\n\t\tuploader.setTargetFileName(f.getName());\r\n\t\tuploader.setProjectName(\"osmand\");\r\n\t\tuploader.setUserName(user);\r\n\t\tuploader.setPassword(password);\r\n\t\tuploader.setLabels(\"Type-Archive, Testdata\");\r\n\t\tuploader.setSummary(summary);\r\n\t\ttry {\r\n\t\t\tuploader.upload();\r\n\t\t} catch (IOException e) {\r\n\t\t\tlog.error(\"Input/output exception uploading \" + f.getName(), e);\r\n\t\t}\r\n\t}","id":46778,"modified_method":"protected void uploadIndex(File f, Set<String> alreadyUploadedFiles){\r\n\t\tif(!uploadIndexes){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tMessageFormat format = new MessageFormat(\"{0,date,dd.MM.yyyy} : {1, number,##.#} MB\", Locale.US);\r\n\t\tString summary;\r\n\t\tdouble mbLengh = (double)f.length() / MB;\r\n\t\tString regionName;\r\n\t\tif(f.getName().endsWith(IndexConstants.POI_INDEX_EXT) || f.getName().endsWith(IndexConstants.POI_INDEX_EXT_ZIP)){\r\n\t\t\tregionName = f.getName().substring(0, f.getName().length() - IndexConstants.POI_INDEX_EXT.length() - 2);\r\n\t\t\tsummary = \"POI index for \" ;\r\n\t\t} else if(f.getName().endsWith(IndexConstants.ADDRESS_INDEX_EXT) || f.getName().endsWith(IndexConstants.ADDRESS_INDEX_EXT_ZIP)){\r\n\t\t\tregionName = f.getName().substring(0, f.getName().length() - IndexConstants.ADDRESS_INDEX_EXT.length() - 2);\r\n\t\t\tsummary = \"Adress index for \" ;\r\n\t\t} else if(f.getName().endsWith(IndexConstants.TRANSPORT_INDEX_EXT) || f.getName().endsWith(IndexConstants.TRANSPORT_INDEX_EXT_ZIP)){\r\n\t\t\tregionName = f.getName().substring(0, f.getName().length() - IndexConstants.TRANSPORT_INDEX_EXT.length() - 2);\r\n\t\t\tsummary = \"Transport index for \";\r\n\t\t} else { \r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(mbLengh > 5 && f.getName().endsWith(\".odb\")){\r\n\t\t\tString zipFileName = f.getName().subSequence(0, f.getName().length() - 4)+\".zip\";\r\n\t\t\tFile zFile = new File(f.getParentFile(), zipFileName);\r\n\t\t\tlog.info(\"Zipping file \" + f.getName());\r\n\t\t\ttry {\r\n\t\t\t\tZipOutputStream zout = new ZipOutputStream(new FileOutputStream(zFile));\r\n\t\t\t\tzout.setLevel(9);\r\n\t\t\t\tzout.putNextEntry(new ZipEntry(f.getName()));\r\n\t\t\t\tFileInputStream is = new FileInputStream(f);\r\n\t\t\t\tbyte[] BUFFER = new byte[8192];\r\n\t\t\t\tint read = 0;\r\n\t\t\t\twhile((read = is.read(BUFFER)) != -1){\r\n\t\t\t\t\tzout.write(BUFFER, 0, read);\r\n\t\t\t\t}\r\n\t\t\t\tzout.close();\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tlog.error(\"Exception while zipping file\");\r\n\t\t\t}\r\n\t\t\tif(f.delete()){\r\n\t\t\t\tlog.info(\"Source odb file was deleted\");\r\n\t\t\t}\r\n\t\t\tf = zFile;\r\n\t\t\t\r\n\t\t}\r\n\t\tmbLengh = (double)f.length() / MB;\r\n\t\tif(mbLengh > 100){\r\n\t\t\tSystem.err.println(\"ERROR : file \" + f.getName() + \" exceeded 100 mb!!! Could not be uploaded.\");\r\n\t\t\treturn; // restriction for google code\r\n\t\t}\r\n\t\tString descriptionFile = \"{\"+format.format(new Object[]{new Date(f.lastModified()), mbLengh})+\"}\";\r\n\t\tsummary +=  regionName + \" \" + descriptionFile;\r\n\t\t\r\n\t\talreadyUploadedFiles.add(f.getName());\r\n\t\tGoogleCodeUploadIndex uploader = new GoogleCodeUploadIndex();\r\n\t\tuploader.setFileName(f.getAbsolutePath());\r\n\t\tuploader.setTargetFileName(f.getName());\r\n\t\tuploader.setProjectName(\"osmand\");\r\n\t\tuploader.setUserName(user);\r\n\t\tuploader.setPassword(password);\r\n\t\tuploader.setLabels(\"Type-Archive, Testdata\");\r\n\t\tuploader.setSummary(summary);\r\n\t\ttry {\r\n\t\t\tuploader.upload();\r\n\t\t} catch (IOException e) {\r\n\t\t\tlog.error(\"Input/output exception uploading \" + f.getName(), e);\r\n\t\t}\r\n\t}","commit_id":"e16371d336cdef19d76cd8c180d3a9f331c67b11","url":"https://github.com/osmandapp/Osmand"},{"original_method":"/**\n   * Configures and creates a Dataset\n   *\n   * @param datasetInstanceId dataset instance to be created\n   * @param typeMeta type meta for the dataset\n   * @param props dataset instance properties\n   * @param existing if dataset already exists (in case of update), the existing properties\n   * @return dataset specification\n   * @throws Exception\n   */\n  public DatasetSpecification createOrUpdate(Id.DatasetInstance datasetInstanceId, final DatasetTypeMeta typeMeta,\n                                             DatasetProperties props, @Nullable DatasetSpecification existing)\n    throws Exception {\n\n    if (existing == null) {\n      LOG.info(\"Creating dataset instance {}, type meta: {}, props: {}\", datasetInstanceId, typeMeta, props);\n    } else {\n      LOG.info(\"Updating dataset instance {}, type meta: {}, existing: {}, props: {}\",\n               datasetInstanceId, typeMeta, existing, props);\n    }\n    try (DatasetClassLoaderProvider classLoaderProvider =\n           new DirectoryClassLoaderProvider(cConf, locationFactory)) {\n\n      DatasetType type = impersonator.doAs(datasetInstanceId.getNamespace().toEntityId(), new Callable<DatasetType>() {\n        @Override\n        public DatasetType call() throws Exception {\n          return dsFramework.getDatasetType(typeMeta, null, classLoaderProvider);\n        }\n      });\n      if (type == null) {\n        throw new BadRequestException(\n          String.format(\"Cannot instantiate dataset type using provided type meta: %s\", typeMeta));\n      }\n      DatasetSpecification spec = existing == null\n          ? type.configure(datasetInstanceId.getId(), props)\n          : type.reconfigure(datasetInstanceId.getId(), props, existing);\n\n      DatasetContext context = DatasetContext.from(datasetInstanceId.getNamespaceId());\n      DatasetAdmin admin =\n        createImpersonatingAdmin(type.getAdmin(context, spec), datasetInstanceId.getNamespace().toEntityId());\n      if (existing != null) {\n        if (admin instanceof Updatable) {\n          ((Updatable) admin).update(existing);\n        } else {\n          admin.upgrade();\n        }\n      } else {\n        admin.create();\n      }\n\n      writeSystemMetadata(datasetInstanceId, spec, props, typeMeta, type, context, existing != null);\n      return spec;\n\n    } catch (Exception e) {\n      if (e instanceof IncompatibleUpdateException) {\n        // this is expected to happen if user provides bad update properties, so we log this as debug\n        LOG.debug(\"Incompatible update for dataset '{}'\", datasetInstanceId, e);\n      } else {\n        LOG.error(\"Error {} dataset '{}': {}\",\n                  existing == null ? \"creating\" : \"updating\", datasetInstanceId, e.getMessage(), e);\n      }\n      throw e;\n    }\n  }","id":46779,"modified_method":"/**\n   * Configures and creates a Dataset\n   *\n   * @param datasetInstanceId dataset instance to be created\n   * @param typeMeta type meta for the dataset\n   * @param props dataset instance properties\n   * @param existing if dataset already exists (in case of update), the existing properties\n   * @return dataset specification\n   * @throws Exception\n   */\n  public DatasetSpecification createOrUpdate(final Id.DatasetInstance datasetInstanceId, final DatasetTypeMeta typeMeta,\n                                             final DatasetProperties props,\n                                             @Nullable final DatasetSpecification existing) throws Exception {\n\n    if (existing == null) {\n      LOG.info(\"Creating dataset instance {}, type meta: {}, props: {}\", datasetInstanceId, typeMeta, props);\n    } else {\n      LOG.info(\"Updating dataset instance {}, type meta: {}, existing: {}, props: {}\",\n               datasetInstanceId, typeMeta, existing, props);\n    }\n    try (DatasetClassLoaderProvider classLoaderProvider =\n           new DirectoryClassLoaderProvider(cConf, locationFactory)) {\n\n      return impersonator.doAs(datasetInstanceId.getNamespace().toEntityId(), new Callable<DatasetSpecification>() {\n        @Override\n        public DatasetSpecification call() throws Exception {\n          DatasetType type = dsFramework.getDatasetType(typeMeta, null, classLoaderProvider);\n          if (type == null) {\n            throw new BadRequestException(\n              String.format(\"Cannot instantiate dataset type using provided type meta: %s\", typeMeta));\n          }\n          DatasetSpecification spec = existing == null\n            ? type.configure(datasetInstanceId.getId(), props)\n            : type.reconfigure(datasetInstanceId.getId(), props, existing);\n\n          DatasetContext context = DatasetContext.from(datasetInstanceId.getNamespaceId());\n          DatasetAdmin admin = type.getAdmin(context, spec);\n          if (existing != null) {\n            if (admin instanceof Updatable) {\n              ((Updatable) admin).update(existing);\n            } else {\n              admin.upgrade();\n            }\n          } else {\n            admin.create();\n          }\n\n          writeSystemMetadata(datasetInstanceId, spec, props, typeMeta, type, context, existing != null);\n          return spec;\n        }\n      });\n    } catch (Exception e) {\n      if (e instanceof IncompatibleUpdateException) {\n        // this is expected to happen if user provides bad update properties, so we log this as debug\n        LOG.debug(\"Incompatible update for dataset '{}'\", datasetInstanceId, e);\n      } else {\n        LOG.error(\"Error {} dataset '{}': {}\",\n                  existing == null ? \"creating\" : \"updating\", datasetInstanceId, e.getMessage(), e);\n      }\n      throw e;\n    }\n  }","commit_id":"52a9b3313d39f76a5643a3942734a60642a62d40","url":"https://github.com/caskdata/cdap"},{"original_method":"public void drop(Id.DatasetInstance datasetInstanceId, DatasetTypeMeta typeMeta, DatasetSpecification spec)\n    throws Exception {\n    LOG.info(\"Dropping dataset with spec: {}, type meta: {}\", spec, typeMeta);\n    try (DatasetClassLoaderProvider classLoaderProvider =\n           new DirectoryClassLoaderProvider(cConf, locationFactory)) {\n      DatasetType type = dsFramework.getDatasetType(typeMeta, null, classLoaderProvider);\n\n      if (type == null) {\n        throw new BadRequestException(\n          String.format(\"Cannot instantiate dataset type using provided type meta: %s\", typeMeta));\n      }\n\n      DatasetAdmin admin = type.getAdmin(DatasetContext.from(datasetInstanceId.getNamespaceId()), spec);\n      admin = createImpersonatingAdmin(admin, datasetInstanceId.getNamespace().toEntityId());\n      admin.drop();\n    }\n\n    // Remove metadata for the dataset\n    metadataStore.removeMetadata(datasetInstanceId);\n  }","id":46780,"modified_method":"public void drop(final Id.DatasetInstance datasetInstanceId, final DatasetTypeMeta typeMeta,\n                   final DatasetSpecification spec) throws Exception {\n    LOG.info(\"Dropping dataset with spec: {}, type meta: {}\", spec, typeMeta);\n    try (DatasetClassLoaderProvider classLoaderProvider =\n           new DirectoryClassLoaderProvider(cConf, locationFactory)) {\n\n      impersonator.doAs(datasetInstanceId.getNamespace().toEntityId(), new Callable<Void>() {\n        @Override\n        public Void call() throws Exception {\n          DatasetType type = dsFramework.getDatasetType(typeMeta, null, classLoaderProvider);\n\n          if (type == null) {\n            throw new BadRequestException(\n              String.format(\"Cannot instantiate dataset type using provided type meta: %s\", typeMeta));\n          }\n          DatasetAdmin admin = type.getAdmin(DatasetContext.from(datasetInstanceId.getNamespaceId()), spec);\n          admin.drop();\n          return null;\n        }\n      });\n    }\n\n    // Remove metadata for the dataset\n    metadataStore.removeMetadata(datasetInstanceId);\n  }","commit_id":"52a9b3313d39f76a5643a3942734a60642a62d40","url":"https://github.com/caskdata/cdap"},{"original_method":"private DatasetAdmin getDatasetAdmin(Id.DatasetInstance datasetInstanceId) throws IOException,\n    DatasetManagementException, NotFoundException {\n\n    try (SystemDatasetInstantiator datasetInstantiator = datasetInstantiatorFactory.create()) {\n      DatasetAdmin admin = datasetInstantiator.getDatasetAdmin(datasetInstanceId);\n      if (admin == null) {\n        throw new NotFoundException(\"Couldn't obtain DatasetAdmin for dataset instance \" + datasetInstanceId);\n      }\n      return createImpersonatingAdmin(admin, datasetInstanceId.getNamespace().toEntityId());\n    }\n  }","id":46781,"modified_method":"private DatasetAdmin getDatasetAdmin(final Id.DatasetInstance datasetInstanceId) throws IOException,\n    DatasetManagementException, NotFoundException {\n\n    try (SystemDatasetInstantiator datasetInstantiator = datasetInstantiatorFactory.create()) {\n      try {\n        return impersonator.doAs(datasetInstanceId.getNamespace().toEntityId(), new Callable<DatasetAdmin>() {\n          @Override\n          public DatasetAdmin call() throws Exception {\n            DatasetAdmin admin = datasetInstantiator.getDatasetAdmin(datasetInstanceId);\n            if (admin == null) {\n              throw new NotFoundException(\"Couldn't obtain DatasetAdmin for dataset instance \" + datasetInstanceId);\n            }\n            // returns a DatasetAdmin that executes operations as a particular user, for a particular namespace\n            return new ImpersonatingDatasetAdmin(admin, impersonator, datasetInstanceId.getNamespace().toEntityId());\n          }\n        });\n      } catch (Exception e) {\n        Throwables.propagateIfInstanceOf(e, IOException.class);\n        throw Throwables.propagate(e);\n      }\n    }\n  }","commit_id":"52a9b3313d39f76a5643a3942734a60642a62d40","url":"https://github.com/caskdata/cdap"},{"original_method":"private MRClientProtocol getProxy() throws YarnRemoteException {\n    if (!forceRefresh && realProxy != null) {\n      return realProxy;\n    }\n    \n    // Possibly allow nulls through the PB tunnel, otherwise deal with an exception\n    // and redirect to the history server.\n    ApplicationReport application = rm.getApplicationReport(appId);\n    if (application != null) {\n      trackingUrl = application.getTrackingUrl();\n    }\n    String serviceAddr = null;\n    while (application == null || YarnApplicationState.RUNNING == application.getYarnApplicationState()) {\n      if (application == null) {\n        LOG.info(\"Could not get Job info from RM for job \" + jobId\n            + \". Redirecting to job history server.\");\n        return checkAndGetHSProxy(null, JobState.NEW);\n      }\n      try {\n        if (application.getHost() == null || \"\".equals(application.getHost())) {\n          LOG.debug(\"AM not assigned to Job. Waiting to get the AM ...\");\n          Thread.sleep(2000);\n\n          LOG.debug(\"Application state is \" + application.getYarnApplicationState());\n          application = rm.getApplicationReport(appId);\n          continue;\n        }\n        serviceAddr = application.getHost() + \":\" + application.getRpcPort();\n        if (UserGroupInformation.isSecurityEnabled()) {\n          String clientTokenEncoded = application.getClientToken();\n          Token<ApplicationTokenIdentifier> clientToken =\n            new Token<ApplicationTokenIdentifier>();\n          clientToken.decodeFromUrlString(clientTokenEncoded);\n          // RPC layer client expects ip:port as service for tokens\n          InetSocketAddress addr = NetUtils.createSocketAddr(application\n              .getHost(), application.getRpcPort());\n          clientToken.setService(new Text(addr.getAddress().getHostAddress()\n              + \":\" + addr.getPort()));\n          UserGroupInformation.getCurrentUser().addToken(clientToken);\n        }\n        LOG.info(\"Tracking Url of JOB is \" + application.getTrackingUrl());\n        LOG.info(\"Connecting to \" + serviceAddr);\n        instantiateAMProxy(serviceAddr);\n        return realProxy;\n      } catch (IOException e) {\n        //possibly the AM has crashed\n        //there may be some time before AM is restarted\n        //keep retrying by getting the address from RM\n        LOG.info(\"Could not connect to \" + serviceAddr +\n        \". Waiting for getting the latest AM address...\");\n        try {\n          Thread.sleep(2000);\n        } catch (InterruptedException e1) {\n          LOG.warn(\"getProxy() call interruped\", e1);\n          throw new YarnException(e1);\n        }\n        application = rm.getApplicationReport(appId);\n        if (application == null) {\n          LOG.info(\"Could not get Job info from RM for job \" + jobId\n              + \". Redirecting to job history server.\");\n          return checkAndGetHSProxy(null, JobState.RUNNING);\n        }\n      } catch (InterruptedException e) {\n        LOG.warn(\"getProxy() call interruped\", e);\n        throw new YarnException(e);\n      }\n    }\n\n    /** we just want to return if its allocating, so that we don't\n     * block on it. This is to be able to return job status\n     * on an allocating Application.\n     */\n    String user = application.getUser();\n    if (user == null) {\n      throw RPCUtil.getRemoteException(\"User is not set in the application report\");\n    }\n    if (application.getYarnApplicationState() == YarnApplicationState.NEW ||\n        application.getYarnApplicationState() == YarnApplicationState.SUBMITTED) {\n      realProxy = null;\n      return getNotRunningJob(application, JobState.NEW);\n    }\n\n    if (application.getYarnApplicationState() == YarnApplicationState.FAILED) {\n      realProxy = null;\n      return getNotRunningJob(application, JobState.FAILED);\n    }\n\n    if (application.getYarnApplicationState() == YarnApplicationState.KILLED) {\n      realProxy = null;\n      return getNotRunningJob(application, JobState.KILLED);\n    }\n\n    //History server can serve a job only if application\n    //succeeded.\n    if (application.getYarnApplicationState() == YarnApplicationState.FINISHED) {\n      LOG.info(\"Application state is completed. FinalApplicationStatus=\"\n          + application.getFinalApplicationStatus().toString()\n          + \". Redirecting to job history server\");\n      realProxy = checkAndGetHSProxy(application, JobState.SUCCEEDED);\n    }\n    return realProxy;\n  }","id":46782,"modified_method":"private MRClientProtocol getProxy() throws YarnRemoteException {\n    if (realProxy != null) {\n      return realProxy;\n    }\n    \n    // Possibly allow nulls through the PB tunnel, otherwise deal with an exception\n    // and redirect to the history server.\n    ApplicationReport application = rm.getApplicationReport(appId);\n    if (application != null) {\n      trackingUrl = application.getTrackingUrl();\n    }\n    String serviceAddr = null;\n    while (application == null\n        || YarnApplicationState.RUNNING == application\n            .getYarnApplicationState()) {\n      if (application == null) {\n        LOG.info(\"Could not get Job info from RM for job \" + jobId\n            + \". Redirecting to job history server.\");\n        return checkAndGetHSProxy(null, JobState.NEW);\n      }\n      try {\n        if (application.getHost() == null || \"\".equals(application.getHost())) {\n          LOG.debug(\"AM not assigned to Job. Waiting to get the AM ...\");\n          Thread.sleep(2000);\n\n          LOG.debug(\"Application state is \" + application.getYarnApplicationState());\n          application = rm.getApplicationReport(appId);\n          continue;\n        }\n        serviceAddr = application.getHost() + \":\" + application.getRpcPort();\n        if (UserGroupInformation.isSecurityEnabled()) {\n          String clientTokenEncoded = application.getClientToken();\n          Token<ApplicationTokenIdentifier> clientToken =\n            new Token<ApplicationTokenIdentifier>();\n          clientToken.decodeFromUrlString(clientTokenEncoded);\n          // RPC layer client expects ip:port as service for tokens\n          InetSocketAddress addr = NetUtils.createSocketAddr(application\n              .getHost(), application.getRpcPort());\n          clientToken.setService(new Text(addr.getAddress().getHostAddress()\n              + \":\" + addr.getPort()));\n          UserGroupInformation.getCurrentUser().addToken(clientToken);\n        }\n        LOG.info(\"Tracking Url of JOB is \" + application.getTrackingUrl());\n        LOG.info(\"Connecting to \" + serviceAddr);\n        realProxy = instantiateAMProxy(serviceAddr);\n        return realProxy;\n      } catch (IOException e) {\n        //possibly the AM has crashed\n        //there may be some time before AM is restarted\n        //keep retrying by getting the address from RM\n        LOG.info(\"Could not connect to \" + serviceAddr +\n        \". Waiting for getting the latest AM address...\");\n        try {\n          Thread.sleep(2000);\n        } catch (InterruptedException e1) {\n          LOG.warn(\"getProxy() call interruped\", e1);\n          throw new YarnException(e1);\n        }\n        application = rm.getApplicationReport(appId);\n        if (application == null) {\n          LOG.info(\"Could not get Job info from RM for job \" + jobId\n              + \". Redirecting to job history server.\");\n          return checkAndGetHSProxy(null, JobState.RUNNING);\n        }\n      } catch (InterruptedException e) {\n        LOG.warn(\"getProxy() call interruped\", e);\n        throw new YarnException(e);\n      }\n    }\n\n    /** we just want to return if its allocating, so that we don't\n     * block on it. This is to be able to return job status\n     * on an allocating Application.\n     */\n    String user = application.getUser();\n    if (user == null) {\n      throw RPCUtil.getRemoteException(\"User is not set in the application report\");\n    }\n    if (application.getYarnApplicationState() == YarnApplicationState.NEW ||\n        application.getYarnApplicationState() == YarnApplicationState.SUBMITTED) {\n      realProxy = null;\n      return getNotRunningJob(application, JobState.NEW);\n    }\n\n    if (application.getYarnApplicationState() == YarnApplicationState.FAILED) {\n      realProxy = null;\n      return getNotRunningJob(application, JobState.FAILED);\n    }\n\n    if (application.getYarnApplicationState() == YarnApplicationState.KILLED) {\n      realProxy = null;\n      return getNotRunningJob(application, JobState.KILLED);\n    }\n\n    //History server can serve a job only if application\n    //succeeded.\n    if (application.getYarnApplicationState() == YarnApplicationState.FINISHED) {\n      LOG.info(\"Application state is completed. FinalApplicationStatus=\"\n          + application.getFinalApplicationStatus().toString()\n          + \". Redirecting to job history server\");\n      realProxy = checkAndGetHSProxy(application, JobState.SUCCEEDED);\n    }\n    return realProxy;\n  }","commit_id":"2adc51c61863c613730a3b51538035fce5fa1fb4","url":"https://github.com/apache/hadoop"},{"original_method":"private synchronized Object invoke(String method, Class argClass,\n      Object args) throws YarnRemoteException {\n    Method methodOb = null;\n    try {\n      methodOb = MRClientProtocol.class.getMethod(method, argClass);\n    } catch (SecurityException e) {\n      throw new YarnException(e);\n    } catch (NoSuchMethodException e) {\n      throw new YarnException(\"Method name mismatch\", e);\n    }\n    while (true) {\n      try {\n        return methodOb.invoke(getProxy(), args);\n      } catch (YarnRemoteException yre) {\n        LOG.warn(\"Exception thrown by remote end.\", yre);\n        throw yre;\n      } catch (InvocationTargetException e) {\n        if (e.getTargetException() instanceof YarnRemoteException) {\n          LOG.warn(\"Error from remote end: \" + e\n              .getTargetException().getLocalizedMessage());\n          LOG.debug(\"Tracing remote error \", e.getTargetException());\n          throw (YarnRemoteException) e.getTargetException();\n        }\n        LOG.info(\"Failed to contact AM/History for job \" + jobId + \n            \" retrying..\");\n        LOG.debug(\"Failed exception on AM/History contact\", \n            e.getTargetException());\n        forceRefresh = true;\n      } catch (Exception e) {\n        LOG.info(\"Failed to contact AM/History for job \" + jobId\n            + \"  Will retry..\");\n        LOG.debug(\"Failing to contact application master\", e);\n        forceRefresh = true;\n      }\n    }\n  }","id":46783,"modified_method":"private synchronized Object invoke(String method, Class argClass,\n      Object args) throws YarnRemoteException {\n    Method methodOb = null;\n    try {\n      methodOb = MRClientProtocol.class.getMethod(method, argClass);\n    } catch (SecurityException e) {\n      throw new YarnException(e);\n    } catch (NoSuchMethodException e) {\n      throw new YarnException(\"Method name mismatch\", e);\n    }\n    while (true) {\n      try {\n        return methodOb.invoke(getProxy(), args);\n      } catch (YarnRemoteException yre) {\n        LOG.warn(\"Exception thrown by remote end.\", yre);\n        throw yre;\n      } catch (InvocationTargetException e) {\n        if (e.getTargetException() instanceof YarnRemoteException) {\n          LOG.warn(\"Error from remote end: \" + e\n              .getTargetException().getLocalizedMessage());\n          LOG.debug(\"Tracing remote error \", e.getTargetException());\n          throw (YarnRemoteException) e.getTargetException();\n        }\n        LOG.info(\"Failed to contact AM/History for job \" + jobId + \n            \" retrying..\");\n        LOG.debug(\"Failed exception on AM/History contact\", \n            e.getTargetException());\n        // Force reconnection by setting the proxy to null.\n        realProxy = null;\n      } catch (Exception e) {\n        LOG.info(\"Failed to contact AM/History for job \" + jobId\n            + \"  Will retry..\");\n        LOG.debug(\"Failing to contact application master\", e);\n        // Force reconnection by setting the proxy to null.\n        realProxy = null;\n      }\n    }\n  }","commit_id":"2adc51c61863c613730a3b51538035fce5fa1fb4","url":"https://github.com/apache/hadoop"},{"original_method":"private void instantiateAMProxy(final String serviceAddr) throws IOException {\n    UserGroupInformation currentUser = UserGroupInformation.getCurrentUser();\n    LOG.trace(\"Connecting to ApplicationMaster at: \" + serviceAddr);\n    realProxy = currentUser.doAs(new PrivilegedAction<MRClientProtocol>() {\n      @Override\n      public MRClientProtocol run() {\n        YarnRPC rpc = YarnRPC.create(conf);\n        return (MRClientProtocol) rpc.getProxy(MRClientProtocol.class,\n            NetUtils.createSocketAddr(serviceAddr), conf);\n      }\n    });\n    LOG.trace(\"Connected to ApplicationMaster at: \" + serviceAddr);\n  }","id":46784,"modified_method":"MRClientProtocol instantiateAMProxy(final String serviceAddr)\n      throws IOException {\n    UserGroupInformation currentUser = UserGroupInformation.getCurrentUser();\n    LOG.trace(\"Connecting to ApplicationMaster at: \" + serviceAddr);\n    MRClientProtocol proxy = currentUser\n        .doAs(new PrivilegedAction<MRClientProtocol>() {\n      @Override\n      public MRClientProtocol run() {\n        YarnRPC rpc = YarnRPC.create(conf);\n        return (MRClientProtocol) rpc.getProxy(MRClientProtocol.class,\n            NetUtils.createSocketAddr(serviceAddr), conf);\n      }\n    });\n    LOG.trace(\"Connected to ApplicationMaster at: \" + serviceAddr);\n    return proxy;\n  }","commit_id":"2adc51c61863c613730a3b51538035fce5fa1fb4","url":"https://github.com/apache/hadoop"},{"original_method":"@Test\n  public void testRedirect() throws Exception {\n\n    Configuration conf = new YarnConfiguration();\n    conf.set(MRConfig.FRAMEWORK_NAME, MRConfig.YARN_FRAMEWORK_NAME);\n    conf.set(YarnConfiguration.RM_ADDRESS, RMADDRESS);\n    conf.set(JHAdminConfig.MR_HISTORY_ADDRESS, HSHOSTADDRESS);\n    RMService rmService = new RMService(\"test\");\n    rmService.init(conf);\n    rmService.start();\n\n    AMService amService = new AMService();\n    amService.init(conf);\n    amService.start(conf);\n    amRunning = true;\n\n    HistoryService historyService = new HistoryService();\n    historyService.init(conf);\n    historyService.start(conf);\n\n    LOG.info(\"services started\");\n    Cluster cluster = new Cluster(conf);\n    org.apache.hadoop.mapreduce.JobID jobID =\n      new org.apache.hadoop.mapred.JobID(\"201103121733\", 1);\n    org.apache.hadoop.mapreduce.Counters counters =\n        cluster.getJob(jobID).getCounters();\n    validateCounters(counters);\n    Assert.assertTrue(amContact);\n\n    LOG.info(\"Sleeping for 5 seconds before stop for\" +\n    \" the client socket to not get EOF immediately..\");\n    Thread.sleep(5000);\n\n    //bring down the AM service\n    amService.stop();\n    amRunning = false;\n\n    LOG.info(\"Sleeping for 5 seconds after stop for\" +\n    \t\t\" the server to exit cleanly..\");\n    Thread.sleep(5000);\n\n    amRestarting = true;\n    // Same client\n    //results are returned from fake (not started job)\n    counters = cluster.getJob(jobID).getCounters();\n    Assert.assertEquals(0, counters.countCounters());\n    Job job = cluster.getJob(jobID);\n    org.apache.hadoop.mapreduce.TaskID taskId =\n      new org.apache.hadoop.mapreduce.TaskID(jobID, TaskType.MAP, 0);\n    TaskAttemptID tId = new TaskAttemptID(taskId, 0);\n\n    //invoke all methods to check that no exception is thrown\n    job.killJob();\n    job.killTask(tId);\n    job.failTask(tId);\n    job.getTaskCompletionEvents(0, 100);\n    job.getStatus();\n    job.getTaskDiagnostics(tId);\n    job.getTaskReports(TaskType.MAP);\n    job.getTrackingURL();\n\n    amRestarting = false;\n    amService = new AMService();\n    amService.init(conf);\n    amService.start(conf);\n    amRunning = true;\n    amContact = false; //reset\n\n    counters = cluster.getJob(jobID).getCounters();\n    validateCounters(counters);\n    Assert.assertTrue(amContact);\n\n    amRunning = false;\n\n    // Same client\n    counters = cluster.getJob(jobID).getCounters();\n    validateCounters(counters);\n    Assert.assertTrue(hsContact);\n\n    rmService.stop();\n    historyService.stop();\n  }","id":46785,"modified_method":"@Test\n  public void testRedirect() throws Exception {\n\n    Configuration conf = new YarnConfiguration();\n    conf.set(MRConfig.FRAMEWORK_NAME, MRConfig.YARN_FRAMEWORK_NAME);\n    conf.set(YarnConfiguration.RM_ADDRESS, RMADDRESS);\n    conf.set(JHAdminConfig.MR_HISTORY_ADDRESS, HSHOSTADDRESS);\n\n    // Start the RM.\n    RMService rmService = new RMService(\"test\");\n    rmService.init(conf);\n    rmService.start();\n\n    // Start the AM.\n    AMService amService = new AMService();\n    amService.init(conf);\n    amService.start(conf);\n\n    // Start the HS.\n    HistoryService historyService = new HistoryService();\n    historyService.init(conf);\n    historyService.start(conf);\n\n    LOG.info(\"services started\");\n\n    Cluster cluster = new Cluster(conf);\n    org.apache.hadoop.mapreduce.JobID jobID =\n      new org.apache.hadoop.mapred.JobID(\"201103121733\", 1);\n    org.apache.hadoop.mapreduce.Counters counters =\n        cluster.getJob(jobID).getCounters();\n    validateCounters(counters);\n    Assert.assertTrue(amContact);\n\n    LOG.info(\"Sleeping for 5 seconds before stop for\" +\n    \" the client socket to not get EOF immediately..\");\n    Thread.sleep(5000);\n\n    //bring down the AM service\n    amService.stop();\n\n    LOG.info(\"Sleeping for 5 seconds after stop for\" +\n    \t\t\" the server to exit cleanly..\");\n    Thread.sleep(5000);\n\n    amRestarting = true;\n\n    // Same client\n    //results are returned from fake (not started job)\n    counters = cluster.getJob(jobID).getCounters();\n    Assert.assertEquals(0, counters.countCounters());\n    Job job = cluster.getJob(jobID);\n    org.apache.hadoop.mapreduce.TaskID taskId =\n      new org.apache.hadoop.mapreduce.TaskID(jobID, TaskType.MAP, 0);\n    TaskAttemptID tId = new TaskAttemptID(taskId, 0);\n\n    //invoke all methods to check that no exception is thrown\n    job.killJob();\n    job.killTask(tId);\n    job.failTask(tId);\n    job.getTaskCompletionEvents(0, 100);\n    job.getStatus();\n    job.getTaskDiagnostics(tId);\n    job.getTaskReports(TaskType.MAP);\n    job.getTrackingURL();\n\n    amRestarting = false;\n    amService = new AMService();\n    amService.init(conf);\n    amService.start(conf);\n    amContact = false; //reset\n\n    counters = cluster.getJob(jobID).getCounters();\n    validateCounters(counters);\n    Assert.assertTrue(amContact);\n\n    // Stop the AM. It is not even restarting. So it should be treated as\n    // completed.\n    amService.stop();\n\n    // Same client\n    counters = cluster.getJob(jobID).getCounters();\n    validateCounters(counters);\n    Assert.assertTrue(hsContact);\n\n    rmService.stop();\n    historyService.stop();\n  }","commit_id":"2adc51c61863c613730a3b51538035fce5fa1fb4","url":"https://github.com/apache/hadoop"},{"original_method":"public void stop() {\n      server.stop();\n      super.stop();\n    }","id":46786,"modified_method":"public void stop() {\n      server.stop();\n      super.stop();\n      amRunning = false;\n    }","commit_id":"2adc51c61863c613730a3b51538035fce5fa1fb4","url":"https://github.com/apache/hadoop"},{"original_method":"public void start(Configuration conf) {\n      YarnRPC rpc = YarnRPC.create(conf);\n      //TODO : use fixed port ??\n      InetSocketAddress address = NetUtils.createSocketAddr(hostAddress);\n      InetAddress hostNameResolved = null;\n      try {\n        address.getAddress();\n        hostNameResolved = InetAddress.getLocalHost();\n      } catch (UnknownHostException e) {\n        throw new YarnException(e);\n      }\n\n      server =\n          rpc.getServer(MRClientProtocol.class, this, address,\n              conf, null, 1);\n      server.start();\n      this.bindAddress =\n        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n            + \":\" + server.getPort());\n       super.start();\n    }","id":46787,"modified_method":"public void start(Configuration conf) {\n      YarnRPC rpc = YarnRPC.create(conf);\n      //TODO : use fixed port ??\n      InetSocketAddress address = NetUtils.createSocketAddr(hostAddress);\n      InetAddress hostNameResolved = null;\n      try {\n        address.getAddress();\n        hostNameResolved = InetAddress.getLocalHost();\n      } catch (UnknownHostException e) {\n        throw new YarnException(e);\n      }\n\n      server =\n          rpc.getServer(MRClientProtocol.class, this, address,\n              conf, null, 1);\n      server.start();\n      this.bindAddress =\n        NetUtils.createSocketAddr(hostNameResolved.getHostAddress()\n            + \":\" + server.getPort());\n       super.start();\n       amRunning = true;\n    }","commit_id":"2adc51c61863c613730a3b51538035fce5fa1fb4","url":"https://github.com/apache/hadoop"},{"original_method":"@Test\r\n  public void testRetriesOnConnectionFailure() throws Exception {\r\n\r\n    MRClientProtocol historyServerProxy = mock(MRClientProtocol.class);\r\n    when(historyServerProxy.getJobReport(getJobReportRequest())).thenThrow(\r\n        new RuntimeException(\"1\")).thenThrow(new RuntimeException(\"2\"))\r\n        .thenThrow(new RuntimeException(\"3\"))\r\n        .thenReturn(getJobReportResponse());\r\n\r\n    ResourceMgrDelegate rm = mock(ResourceMgrDelegate.class);\r\n    when(rm.getApplicationReport(TypeConverter.toYarn(oldJobId).getAppId()))\r\n        .thenReturn(null);\r\n\r\n    ClientServiceDelegate clientServiceDelegate = getClientServiceDelegate(\r\n        historyServerProxy, rm);\r\n\r\n    JobStatus jobStatus = clientServiceDelegate.getJobStatus(oldJobId);\r\n    Assert.assertNotNull(jobStatus);\r\n  }","id":46788,"modified_method":"@Test\n  public void testRetriesOnConnectionFailure() throws Exception {\n\n    MRClientProtocol historyServerProxy = mock(MRClientProtocol.class);\n    when(historyServerProxy.getJobReport(getJobReportRequest())).thenThrow(\n        new RuntimeException(\"1\")).thenThrow(new RuntimeException(\"2\"))\n        .thenThrow(new RuntimeException(\"3\"))\n        .thenReturn(getJobReportResponse());\n\n    ResourceMgrDelegate rm = mock(ResourceMgrDelegate.class);\n    when(rm.getApplicationReport(TypeConverter.toYarn(oldJobId).getAppId()))\n        .thenReturn(null);\n\n    ClientServiceDelegate clientServiceDelegate = getClientServiceDelegate(\n        historyServerProxy, rm);\n\n    JobStatus jobStatus = clientServiceDelegate.getJobStatus(oldJobId);\n    Assert.assertNotNull(jobStatus);\n    verify(historyServerProxy, times(4)).getJobReport(\n        any(GetJobReportRequest.class));\n  }","commit_id":"2adc51c61863c613730a3b51538035fce5fa1fb4","url":"https://github.com/apache/hadoop"},{"original_method":"@Test\r\n  public void testHistoryServerNotConfigured() throws Exception {\r\n    //RM doesn't have app report and job History Server is not configured\r\n    ClientServiceDelegate clientServiceDelegate = getClientServiceDelegate(\r\n        null, getRMDelegate());\r\n    JobStatus jobStatus = clientServiceDelegate.getJobStatus(oldJobId);\r\n    Assert.assertEquals(\"N/A\", jobStatus.getUsername());\r\n    Assert.assertEquals(JobStatus.State.PREP, jobStatus.getState());\r\n\r\n    //RM has app report and job History Server is not configured\r\n    ResourceMgrDelegate rm = mock(ResourceMgrDelegate.class);\r\n    ApplicationReport applicationReport = getApplicationReport();\r\n    when(rm.getApplicationReport(jobId.getAppId())).thenReturn(\r\n        applicationReport);\r\n\r\n    clientServiceDelegate = getClientServiceDelegate(null, rm);\r\n    jobStatus = clientServiceDelegate.getJobStatus(oldJobId);\r\n    Assert.assertEquals(applicationReport.getUser(), jobStatus.getUsername());\r\n    Assert.assertEquals(JobStatus.State.SUCCEEDED, jobStatus.getState());\r\n  }","id":46789,"modified_method":"@Test\n  public void testHistoryServerNotConfigured() throws Exception {\n    //RM doesn't have app report and job History Server is not configured\n    ClientServiceDelegate clientServiceDelegate = getClientServiceDelegate(\n        null, getRMDelegate());\n    JobStatus jobStatus = clientServiceDelegate.getJobStatus(oldJobId);\n    Assert.assertEquals(\"N/A\", jobStatus.getUsername());\n    Assert.assertEquals(JobStatus.State.PREP, jobStatus.getState());\n\n    //RM has app report and job History Server is not configured\n    ResourceMgrDelegate rm = mock(ResourceMgrDelegate.class);\n    ApplicationReport applicationReport = getFinishedApplicationReport();\n    when(rm.getApplicationReport(jobId.getAppId())).thenReturn(\n        applicationReport);\n\n    clientServiceDelegate = getClientServiceDelegate(null, rm);\n    jobStatus = clientServiceDelegate.getJobStatus(oldJobId);\n    Assert.assertEquals(applicationReport.getUser(), jobStatus.getUsername());\n    Assert.assertEquals(JobStatus.State.SUCCEEDED, jobStatus.getState());\n  }","commit_id":"2adc51c61863c613730a3b51538035fce5fa1fb4","url":"https://github.com/apache/hadoop"},{"original_method":"private ApplicationReport getApplicationReport() {\r\n    ApplicationReport applicationReport = Records\r\n        .newRecord(ApplicationReport.class);\r\n    applicationReport.setYarnApplicationState(YarnApplicationState.FINISHED);\r\n    applicationReport.setUser(\"root\");\r\n    applicationReport.setHost(\"N/A\");\r\n    applicationReport.setName(\"N/A\");\r\n    applicationReport.setQueue(\"N/A\");\r\n    applicationReport.setStartTime(0);\r\n    applicationReport.setFinishTime(0);\r\n    applicationReport.setTrackingUrl(\"N/A\");\r\n    applicationReport.setDiagnostics(\"N/A\");\r\n    applicationReport.setFinalApplicationStatus(FinalApplicationStatus.SUCCEEDED);\r\n    return applicationReport;\r\n  }","id":46790,"modified_method":"private ApplicationReport getFinishedApplicationReport() {\n    return BuilderUtils.newApplicationReport(BuilderUtils.newApplicationId(\n        1234, 5), \"user\", \"queue\", \"appname\", \"host\", 124, null,\n        YarnApplicationState.FINISHED, \"diagnostics\", \"url\", 0, 0,\n        FinalApplicationStatus.SUCCEEDED, null);\n  }","commit_id":"2adc51c61863c613730a3b51538035fce5fa1fb4","url":"https://github.com/apache/hadoop"},{"original_method":"/**\n\t * Will be called when the user presses the OK button.\n\t * @see IPreferencePage#performOk()\n\t */\n\t@Override\n\tpublic boolean performOk() {\n\t\tboolean selection = this.chkEnableFindBugs.getSelection();\n\t\tboolean result = true;\n\n\t\t// Keep of track of whether we need to update\n\t\t// which warning markers are shown.\n\t\tboolean filterOptionsChanged = false;\n\n\t\t// Have user preferences for project changed?\n\t\t// If so, write them to the user preferences file.\n\t\tif (!currentUserPreferences.equals(origUserPreferences)) {\n\t\t\tif(DEBUG) {\n\t\t\t\tSystem.out.println(\"User preferences for project changed!\");\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tFindbugsPlugin.saveUserPreferences(project, currentUserPreferences);\n\t\t\t} catch (CoreException e) {\n\t\t\t\tFindbugsPlugin.getDefault().logException(e, \"Could not store FindBugs preferences for project\");\n\t\t\t} catch (IOException e) {\n\t\t\t\tFindbugsPlugin.getDefault().logException(e, \"Could not store FindBugs preferences for project\");\n\t\t\t}\n\n\t\t\t// Have filter settings changed?\n\t\t\t// If so, we need to redisplay warnings.\n\t\t\tif (!currentUserPreferences.getFilterSettings().equals(\n\t\t\t\t\torigUserPreferences.getFilterSettings())) {\n\t\t\t\tif(DEBUG) {\n\t\t\t\t\tSystem.out.println(\"Filter setting for project changed!\");\n\t\t\t\t}\n\t\t\t\tfilterOptionsChanged = true;\n\t\t\t}\n\n\t\t\t// If already enabled (and still enabled) trigger a Findbugs rebuild here\n\t\t\tif (this.initialEnabled && selection) {\n\t\t\t\trunFindbugsBuilder();\n\t\t\t}\n\t\t}\n\n\t\t// Update whether or not FindBugs is run automatically.\n\t\tif (!this.initialEnabled && selection == true) {\n\t\t\tresult = addNature();\n\t\t}\n\t\telse if (this.initialEnabled && selection == false) {\n\t\t\tresult = removeNature();\n\t\t}\n\n\t\tif (result && filterOptionsChanged) {\n\t\t\tif(DEBUG) {\n\t\t\t\tSystem.out.println(\"Redisplaying markers!\");\n\t\t\t}\n\t\t\tMarkerUtil.redisplayMarkers(project, getShell());\n\t\t}\n\n\t\treturn result;\n\t}","id":46791,"modified_method":"/**\n\t * Will be called when the user presses the OK button.\n\t * @see IPreferencePage#performOk()\n\t */\n\t@Override\n\tpublic boolean performOk() {\n\t\tboolean builderEnabled = chkEnableFindBugs.getSelection();\n\n\t\t// Update whether or not FindBugs is run automatically.\n\t\tif (!initialEnabled && builderEnabled) {\n\t\t\taddNature();\n\t\t} else if (initialEnabled && !builderEnabled) {\n\t\t\tremoveNature();\n\t\t}\n\n\t\t// Have user preferences for project changed?\n\t\t// If so, write them to the user preferences file & re-run builder\n\t\tif (!currentUserPreferences.equals(origUserPreferences)) {\n\t\t\ttry {\n\t\t\t\tFindbugsPlugin.saveUserPreferences(project, currentUserPreferences);\n\t\t\t} catch (CoreException e) {\n\t\t\t\tFindbugsPlugin.getDefault().logException(e,\n\t\t\t\t\t\t\"Could not store FindBugs preferences for project\");\n\t\t\t} catch (IOException e) {\n\t\t\t\tFindbugsPlugin.getDefault().logException(e,\n\t\t\t\t\t\t\"Could not store FindBugs preferences for project\");\n\t\t\t}\n\n\t\t\t// If already enabled (and still enabled) trigger a Findbugs rebuild here\n\t\t\tif (builderEnabled) {\n\t\t\t\trunFindbugsBuilder();\n\t\t\t}\n\t\t}\n\n\t\t// if filter settings changed, and builder is not enabled, manually trigger update\n\t\tif (!builderEnabled\n\t\t\t\t&& !currentUserPreferences.getFilterSettings().equals(\n\t\t\t\t\t\torigUserPreferences.getFilterSettings())) {\n\t\t\tMarkerUtil.redisplayMarkers(project, getShell());\n\t\t}\n\t\treturn true;\n\t}","commit_id":"40b724705f339910d4fffa69347ba1c9fead809d","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"/**\n\t * Restore default settings.\n\t * This just changes the dialog widgets - the user still needs\n\t * to confirm by clicking the \"OK\" button.\n\t */\n\tprivate void restoreDefaultSettings() {\n\t\t// By default, don't run FindBugs automatically\n\t\tchkEnableFindBugs.setSelection(false);\n\n\t\t// Use the default minimum priority (which is medium)\n\t\tminPriorityCombo.setText(ProjectFilterSettings.DEFAULT_PRIORITY);\n\n\t\t// By default, all bug categories are enabled\n\t\tfor (int i = 0; i < chkEnableBugCategoryList.length; ++i) {\n\t\t\tchkEnableBugCategoryList[i].setSelection(true);\n\t\t}\n\n\t\t// Enable only those detectors that are enabled by default\n\t\tTableItem[] itemList =\n\t\t\tavailableFactoriesTableViewer.getTable().getItems();\n\t\tfor (int i = 0; i < itemList.length; i++) {\n\t\t\tTableItem item = itemList[i];\n\t\t\tDetectorFactory factory = (DetectorFactory) item.getData();\n\t\t\titem.setChecked(factory.isDefaultEnabled());\n\t\t}\n\t}","id":46792,"modified_method":"/**\n\t * Restore default settings.\n\t * This just changes the dialog widgets - the user still needs\n\t * to confirm by clicking the \"OK\" button.\n\t */\n\tprivate void restoreDefaultSettings() {\n\t\tvisibleDetectors.clear();\n\n\t\t// By default, don't run FindBugs automatically\n\t\tchkEnableFindBugs.setSelection(false);\n\n\t\teffortViewer.setSelection(new StructuredSelection(defaultEffortLevel), true);\n\n\t\tgetDetectorTab().restoreDefaultSettings();\n\t\treportConfigurationTab.restoreDefaultSettings();\n\t\tfilterFilesTab.restoreDefaultSettings();\n\t}","commit_id":"40b724705f339910d4fffa69347ba1c9fead809d","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"/**\n\t\t * @see IRunnableWithProgress#run(IProgressMonitor)\n\t\t */\n\t\tpublic void run(IProgressMonitor monitor) {\n\t\t\ttry {\n\t\t\t\tif (add) {\n\t\t\t\t\tProjectUtilities.addFindBugsNature(project, monitor);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tProjectUtilities.removeFindBugsNature(project, monitor);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (CoreException e) {\n\t\t\t\tFindbugsPlugin.getDefault().logException(e, \"Core exception on property page\");\n\t\t\t\tSystem.err.println(\"Exception: \" + e); //$NON-NLS-1$\n\t\t\t}\n\t\t}","id":46793,"modified_method":"/**\n\t\t * @see IRunnableWithProgress#run(IProgressMonitor)\n\t\t */\n\t\tpublic void run(IProgressMonitor monitor) {\n\t\t\ttry {\n\t\t\t\tif (add) {\n\t\t\t\t\tProjectUtilities.addFindBugsNature(project, monitor);\n\t\t\t\t} else {\n\t\t\t\t\tProjectUtilities.removeFindBugsNature(project, monitor);\n\t\t\t\t}\n\t\t\t} catch (CoreException e) {\n\t\t\t\tFindbugsPlugin.getDefault().logException(e,\n\t\t\t\t\t\t\"Core exception in NatureWorker\");\n\t\t\t}\n\t\t}","commit_id":"40b724705f339910d4fffa69347ba1c9fead809d","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"/**\n\t * Using the natures name, check whether the current\n\t * project has the given nature.\n\t *\n\t * @return boolean <code>true<\/code>, if the nature is\n\t *   assigned to the project, <code>false<\/code> otherwise.\n\t */\n\tprivate boolean isEnabled() {\n\t\tboolean result = false;\n\n\t\ttry {\n\t\t\tif (this.project.hasNature(FindbugsPlugin.NATURE_ID)) {\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t}\n\t\tcatch (CoreException e) {\n\t\t\tSystem.err.println(\"Exception: \" + e); //$NON-NLS-1$\n\t\t}\n\t\treturn result;\n\t}","id":46794,"modified_method":"/**\n\t * Using the natures name, check whether the current\n\t * project has the given nature.\n\t *\n\t * @return boolean <code>true<\/code>, if the nature is\n\t *   assigned to the project, <code>false<\/code> otherwise.\n\t */\n\tprivate boolean isEnabled() {\n\t\ttry {\n\t\t\treturn project.hasNature(FindbugsPlugin.NATURE_ID);\n\t\t} catch (CoreException e) {\n\t\t\tFindbugsPlugin.getDefault().logException(e,\n\t\t\t\"Error while testing FindBugs nature for project \" + project);\n\t\t}\n\t\treturn false;\n\t}","commit_id":"40b724705f339910d4fffa69347ba1c9fead809d","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"/**\n\t * Constructor for FindbugsPropertyPage.\n\t */\n\tpublic FindbugsPropertyPage() {\n\t\tsuper();\n\t}","id":46795,"modified_method":"/**\n\t * Constructor for FindbugsPropertyPage.\n\t */\n\tpublic FindbugsPropertyPage() {\n\t\tsuper();\n\t\tvisibleDetectors = new HashMap<DetectorFactory, Boolean>();\n\t}","commit_id":"40b724705f339910d4fffa69347ba1c9fead809d","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"private void runFindbugsBuilder() {\n\t\tProgressMonitorDialog monitor = new ProgressMonitorDialog(getShell());\n\t\ttry {\n\t\t\tmonitor.run(true, true, new IRunnableWithProgress() {\n\n\t\t\t\tpublic void run(IProgressMonitor monitor) throws InvocationTargetException, InterruptedException {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tgetProject().build(IncrementalProjectBuilder.CLEAN_BUILD, FindbugsPlugin.BUILDER_ID, null, monitor);\n\t\t\t\t\t} catch (OperationCanceledException e) {\n\t\t\t\t\t\t// Do nothing when operation cancelled.\n\t\t\t\t\t}catch (CoreException e) {\n\t\t\t\t\t\tFindbugsPlugin.getDefault().logException(e,\n\t\t\t\t\t\t\"Error while runnning FindBugs builder for project\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t});\n\t\t} catch (InvocationTargetException e) {\n\t\t\tFindbugsPlugin.getDefault().logException(e,\n\t\t\t\"Error while runnning FindBugs builder for project\");\n\t\t} catch (InterruptedException e) {\n\t\t\tFindbugsPlugin.getDefault().logException(e,\n\t\t\t\"Findbugs builder was interrupted\");\n\t\t}\n\t}","id":46796,"modified_method":"private void runFindbugsBuilder() {\n\t\tProgressMonitorDialog dialog = new ProgressMonitorDialog(getShell());\n\t\ttry {\n\t\t\tdialog.run(true, true, new IRunnableWithProgress() {\n\n\t\t\t\tpublic void run(IProgressMonitor monitor) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tgetProject().build(IncrementalProjectBuilder.CLEAN_BUILD,\n\t\t\t\t\t\t\t\tFindbugsPlugin.BUILDER_ID, null, monitor);\n\t\t\t\t\t} catch (OperationCanceledException e) {\n\t\t\t\t\t\t// Do nothing when operation cancelled.\n\t\t\t\t\t} catch (CoreException e) {\n\t\t\t\t\t\tFindbugsPlugin.getDefault().logException(e,\n\t\t\t\t\t\t\t\t\"Error while runnning FindBugs builder for project\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t});\n\t\t} catch (InvocationTargetException e) {\n\t\t\tFindbugsPlugin.getDefault().logException(e,\n\t\t\t\t\t\"Error while runnning FindBugs builder for project\");\n\t\t} catch (InterruptedException e) {\n\t\t\tFindbugsPlugin.getDefault().logException(e,\n\t\t\t\t\t\"Findbugs builder was interrupted\");\n\t\t}\n\t}","commit_id":"40b724705f339910d4fffa69347ba1c9fead809d","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"/**\n\t * Remove the nature from the project.\n\t * @return boolean <code>true<\/code> if the nature could\n\t *   be added successfully, <code>false<\/code> otherwise.\n\t */\n\tprivate boolean removeNature() {\n\t\tboolean result = true;\n\t\ttry {\n//\t\t\tMarkerUtil.removeMarkers(project);\n\n\t\t\tNatureWorker worker = new NatureWorker(false);\n\t\t\tProgressMonitorDialog monitor = new ProgressMonitorDialog(getShell());\n\t\t\tmonitor.run(true, true, worker);\n\t\t}\n\t\tcatch (InvocationTargetException e) {\n\t\t\tSystem.err.println(\"Exception: \" + e); //$NON-NLS-1$\n\t\t}\n\t\tcatch (InterruptedException e) {\n\t\t\tSystem.err.println(\"Exception: \" + e); //$NON-NLS-1$\n\t\t}\n//\t\tcatch (CoreException e) {\n//\t\t\tSystem.err.println(\"Exception: \" + e); //$NON-NLS-1$\n//\t\t}\n\t\treturn result;\n\t}","id":46797,"modified_method":"/**\n\t * Remove the nature from the project.\n\t * @return boolean <code>true<\/code> if the nature could\n\t *   be added successfully, <code>false<\/code> otherwise.\n\t */\n\tprivate boolean removeNature() {\n\t\ttry {\n\t\t\tNatureWorker worker = new NatureWorker(false);\n\t\t\tProgressMonitorDialog monitor = new ProgressMonitorDialog(getShell());\n\t\t\tmonitor.run(true, true, worker);\n\t\t\treturn true;\n\t\t} catch (InvocationTargetException e) {\n\t\t\tFindbugsPlugin.getDefault().logException(e, \"'Remove nature' failed\");\n\t\t} catch (InterruptedException e) {\n\t\t\tFindbugsPlugin.getDefault().logException(e, \"'Remove nature' interrupted\");\n\t\t}\n\t\treturn false;\n\t}","commit_id":"40b724705f339910d4fffa69347ba1c9fead809d","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"/**\n\t * Add the nature to the current project. The real work is\n\t * done by the inner class NatureWorker\n\t * @return boolean <code>true<\/code> if the nature could\n\t *   be added successfully, <code>false<\/code> otherwise.\n\t */\n\tprivate boolean addNature() {\n\t\tboolean result = true;\n\t\ttry {\n\t\t\tNatureWorker worker = new NatureWorker(true);\n\t\t\tProgressMonitorDialog monitor = new ProgressMonitorDialog(getShell());\n\t\t\tmonitor.run(true, true, worker);\n\t\t}\n\t\tcatch (InvocationTargetException e) {\n\t\t\tSystem.err.println(\"Exception: \" + e); //$NON-NLS-1$\n\t\t}\n\t\tcatch (InterruptedException e) {\n\t\t\tSystem.err.println(\"Exception: \" + e); //$NON-NLS-1$\n\t\t}\n\t\treturn result;\n\t}","id":46798,"modified_method":"/**\n\t * Add the nature to the current project. The real work is\n\t * done by the inner class NatureWorker\n\t * @return boolean <code>true<\/code> if the nature could\n\t *   be added successfully, <code>false<\/code> otherwise.\n\t */\n\tprivate boolean addNature() {\n\t\ttry {\n\t\t\tNatureWorker worker = new NatureWorker(true);\n\t\t\tProgressMonitorDialog monitor = new ProgressMonitorDialog(getShell());\n\t\t\tmonitor.run(true, true, worker);\n\t\t\treturn true;\n\t\t} catch (InvocationTargetException e) {\n\t\t\tFindbugsPlugin.getDefault().logException(e, \"'Add nature' failed\");\n\t\t} catch (InterruptedException e) {\n\t\t\tFindbugsPlugin.getDefault().logException(e, \"'Add nature' interrupted\");\n\t\t}\n\t\treturn false;\n\t}","commit_id":"40b724705f339910d4fffa69347ba1c9fead809d","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"/**\n\t * @see PreferencePage#createContents(Composite)\n\t */\n\t@Override\n\tprotected Control createContents(Composite parent) {\n\n\t\tnoDefaultAndApplyButton();\n\n\t\t// getElement returns the element this page has been opened for,\n\t\t// in our case this is a Java Project (IJavaProject).\n\t\tIAdaptable resource = getElement();\n\t\tthis.project = (IProject) resource.getAdapter(IProject.class);\n\n\t\tcollectUserPreferences();\n\n\t\tComposite composite = new Composite(parent, SWT.NONE);\n\t\tGridLayout layout = new GridLayout();\n\t\tcomposite.setLayout(layout);\n\n\t\tchkEnableFindBugs = new Button(composite, SWT.CHECK);\n\t\tchkEnableFindBugs.setText(getMessage(\"property.runAuto\"));\n\t\tinitialEnabled = isEnabled();\n\t\tchkEnableFindBugs.setSelection(initialEnabled);\n\n\t\tComposite prioGroup = new Composite(composite, SWT.NONE);\n\t\tGridLayout prioLayout = new GridLayout(2, false);\n\t\tprioGroup.setLayout(prioLayout);\n\n\t\tLabel minPrioLabel = new Label(prioGroup, SWT.NONE);\n\t\tminPrioLabel.setText(getMessage(\"property.minPriority\"));\n\t\tminPrioLabel.setLayoutData(new GridData(SWT.BEGINNING, SWT.CENTER, false, false));\n\n\t\tminPriorityCombo = new Combo(prioGroup, SWT.DROP_DOWN | SWT.READ_ONLY);\n\t\tminPriorityCombo.add(ProjectFilterSettings.HIGH_PRIORITY);\n\t\tminPriorityCombo.add(ProjectFilterSettings.MEDIUM_PRIORITY);\n\t\tminPriorityCombo.add(ProjectFilterSettings.LOW_PRIORITY);\n\t\tminPriorityCombo.setText(origUserPreferences.getFilterSettings().getMinPriority());\n\t\tminPriorityCombo.setLayoutData(new GridData(SWT.BEGINNING, SWT.CENTER, false, false));\n\t\tminPriorityCombo.addSelectionListener(new SelectionAdapter() {\n\t\t\t@Override\n\t\t\tpublic void widgetSelected(SelectionEvent event) {\n\t\t\t\tString data = minPriorityCombo.getText();\n\t\t\t\tif(DEBUG) {\n\t\t\t\t\tSystem.out.println(\"Minimum priority changed to \" + data + \"!\");\n\t\t\t\t}\n\t\t\t\tcurrentUserPreferences.getFilterSettings().setMinPriority(data);\n\t\t\t}\n\t\t});\n\t\t// effort\n\t\tLabel effortLabel = new Label(prioGroup, SWT.NULL);\n\t\teffortLabel.setText(getMessage(\"property.effort\"));\n\t\teffortLabel.setLayoutData(new GridData(SWT.BEGINNING, SWT.CENTER, false, false));\n\t\teffortViewer = new ComboViewer(prioGroup, SWT.DROP_DOWN\n\t\t\t\t| SWT.READ_ONLY);\n\t\teffortViewer.setLabelProvider(new WorkbenchLabelProvider());\n\t\teffortViewer.setContentProvider(new BaseWorkbenchContentProvider());\n\t\teffortLevels = new EffortPlaceHolder[] {\n\t\t\t\tnew EffortPlaceHolder(getMessage(\"property.effortmin\"),\n\t\t\t\t\t\tUserPreferences.EFFORT_MIN),\n\t\t\t\tnew EffortPlaceHolder(getMessage(\"property.effortdefault\"),\n\t\t\t\t\t\tUserPreferences.EFFORT_DEFAULT),\n\t\t\t\tnew EffortPlaceHolder(getMessage(\"property.effortmax\"),\n\t\t\t\t\t\tUserPreferences.EFFORT_MAX) };\n\t\teffortViewer.add(effortLevels);\n\n\t\t/*\n\t\tchkDisplayFalseWarnings = new Button(prioGroup, SWT.CHECK);\n\t\tchkDisplayFalseWarnings.setText(\"Display false warnings\");\n\t\tGridData chkDisplayFalseWarningsLayoutData =\n\t\t\tnew GridData(SWT.BEGINNING, SWT.CENTER, false, false);\n\t\tchkDisplayFalseWarningsLayoutData.horizontalIndent = 15;\n\t\tchkDisplayFalseWarnings.setLayoutData(chkDisplayFalseWarningsLayoutData);\n\t\tchkDisplayFalseWarnings.setSelection(\n\t\t\t\torigUserPreferences.getFilterSettings().displayFalseWarnings());\n\t\t*/\n\n\t\tComposite categoryGroup = new Composite(composite, SWT.NONE);\n\t\tcategoryGroup.setLayout(new GridLayout(2, true));\n\n\t\tLabel activeCategoriesLabel = new Label(categoryGroup, SWT.NONE);\n\t\tactiveCategoriesLabel.setText(getMessage(\"property.enableCategory\"));\n\t\tactiveCategoriesLabel.setLayoutData(new GridData(SWT.LEFT, SWT.CENTER, false, false, 2, 1));\n\t\tbuildBugCategoryList(categoryGroup, project);\n\t\t\n\t\t\t\t\n\t\tString effort = currentUserPreferences.getEffort();\n\t\tfor (int i = 0; i < effortLevels.length; i++) {\n\t\t\tif (effortLevels[i].getEffortLevel().equals(effort)) {\n\t\t\t\teffortViewer.setSelection(new StructuredSelection(\n\t\t\t\t\t\teffortLevels[i]), true);\n\t\t\t}\n\t\t}\n\t\teffortViewer\n\t\t\t\t.addSelectionChangedListener(new ISelectionChangedListener() {\n\t\t\n\t\t\t\t\tpublic void selectionChanged(SelectionChangedEvent event) {\n\t\t\t\t\t\tEffortPlaceHolder placeHolder = (EffortPlaceHolder) ((IStructuredSelection) event\n\t\t\t\t\t\t\t\t.getSelection()).getFirstElement();\n\t\t\t\t\t\tcurrentUserPreferences.setEffort(placeHolder\n\t\t\t\t\t\t\t\t.getEffortLevel());\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\n\t\tcreateFilterTable(composite, FilterKind.INCLUDE);\n\t\tcreateFilterTable(composite, FilterKind.EXCLUDE);\n\t\tcreateFilterTable(composite, FilterKind.EXCLUDE_BUGS);\n\t\t\n\t\trestoreDefaultsButton = new Button(composite, SWT.NONE);\n\t\trestoreDefaultsButton.setText(getMessage(\"property.restoreSettings\"));\n\t\trestoreDefaultsButton.setLayoutData(new GridData(SWT.RIGHT, SWT.CENTER, false, false));\n\t\trestoreDefaultsButton.addSelectionListener(new SelectionAdapter() {\n\t\t\t/* (non-Javadoc)\n\t\t\t * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)\n\t\t\t */\n\t\t\t@Override\n\t\t\tpublic void widgetSelected(SelectionEvent e) {\n\t\t\t\trestoreDefaultSettings();\n\t\t\t}\n\t\t});\n\n\t\treturn composite;\n\t}","id":46799,"modified_method":"@Override\n\tprotected Control createContents(Composite parent) {\n\n\t\tnoDefaultAndApplyButton();\n\n\t\t// getElement returns the element this page has been opened for,\n\t\t// in our case this is a Java Project (IJavaProject).\n\t\tIAdaptable resource = getElement();\n\t\tthis.project = (IProject) resource.getAdapter(IProject.class);\n\n\t\tcollectUserPreferences();\n\n\t\tcreateGlobalElements(parent);\n\n\t\tcreateConfigurationTabFolder(parent);\n\n\t\tcreateDefaultsButton(parent);\n\n\t\treturn parent;\n\t}","commit_id":"40b724705f339910d4fffa69347ba1c9fead809d","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"protected boolean isBuildable(IProject project) {\n\t\treturn XtextProjectHelper.hasNature(project) && isBuildEnabled(project);\n\t}","id":46800,"modified_method":"protected boolean isBuildable(IProject project) {\n\t\treturn XtextProjectHelper.hasNature(project) && XtextProjectHelper.hasBuilder(project);\n\t}","commit_id":"1805128bcc91e53604dfc1d83ecfd0fbd69b48b2","url":"https://github.com/eclipse/xtext"},{"original_method":"protected boolean shouldBeProcessed(IProject project) {\n\t\treturn XtextProjectHelper.hasNature(project) && (folderNameToClean == null || project.getFolder(folderNameToClean).exists());\n\t}","id":46801,"modified_method":"protected boolean shouldBeProcessed(IProject project) {\n\t\treturn XtextProjectHelper.hasNature(project) && XtextProjectHelper.hasBuilder(project) && (folderNameToClean == null || project.getFolder(folderNameToClean).exists());\n\t}","commit_id":"1805128bcc91e53604dfc1d83ecfd0fbd69b48b2","url":"https://github.com/eclipse/xtext"},{"original_method":"protected boolean isAccessibleXtextProject(IProject p) {\n\t\treturn p != null && XtextProjectHelper.hasNature(p);\n\t}","id":46802,"modified_method":"protected boolean isAccessibleXtextProject(IProject p) {\n\t\treturn p != null && XtextProjectHelper.hasNature(p) && XtextProjectHelper.hasBuilder(p);\n\t}","commit_id":"1805128bcc91e53604dfc1d83ecfd0fbd69b48b2","url":"https://github.com/eclipse/xtext"},{"original_method":"protected boolean isBuiltByUpstream(IPackageFragmentRoot root, IProject project, IProject[] projectsInCorrectBuildOrder) {\n\t\tfor (IProject p : projectsInCorrectBuildOrder) {\n\t\t\tif (p.equals(project))\n\t\t\t\treturn false;\n\t\t\tif (XtextProjectHelper.hasNature(p)) {\n\t\t\t\tIJavaProject javaProject = JavaCore.create(p);\n\t\t\t\tif (javaProject.exists()) {\n\t\t\t\t\tif (javaProject.isOnClasspath(root)) {\n\t\t\t\t\t\tif (log.isTraceEnabled())\n\t\t\t\t\t\t\tlog.trace(\"Build of project '\"+project.getName()+\"' skips indexing classpath entry '\"+root.getPath()+\"' because it already indexed by \"+javaProject.getElementName());\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}","id":46803,"modified_method":"protected boolean isBuiltByUpstream(IPackageFragmentRoot root, IProject project, IProject[] projectsInCorrectBuildOrder) {\n\t\tfor (IProject p : projectsInCorrectBuildOrder) {\n\t\t\tif (p.equals(project))\n\t\t\t\treturn false;\n\t\t\tif (XtextProjectHelper.hasNature(p) && XtextProjectHelper.hasBuilder(p)) {\n\t\t\t\tIJavaProject javaProject = JavaCore.create(p);\n\t\t\t\tif (javaProject.exists()) {\n\t\t\t\t\tif (javaProject.isOnClasspath(root)) {\n\t\t\t\t\t\tif (log.isTraceEnabled())\n\t\t\t\t\t\t\tlog.trace(\"Build of project '\"+project.getName()+\"' skips indexing classpath entry '\"+root.getPath()+\"' because it already indexed by \"+javaProject.getElementName());\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}","commit_id":"1805128bcc91e53604dfc1d83ecfd0fbd69b48b2","url":"https://github.com/eclipse/xtext"},{"original_method":"public void resourceChanged(final IResourceChangeEvent event) {\n\t\tif (workspace != null && workspace.isAutoBuilding()) {\n\t\t\tif (event.getType() == IResourceChangeEvent.POST_CHANGE) {\n\t\t\t\ttry {\n\t\t\t\t\tfinal Set<IProject> toUpdate = Sets.newLinkedHashSet();\n\t\t\t\t\tevent.getDelta().accept(new IResourceDeltaVisitor() {\n\t\t\t\t\t\tpublic boolean visit(IResourceDelta delta) throws CoreException {\n\t\t\t\t\t\t\tif (delta.getResource() instanceof IWorkspaceRoot)\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\tif (delta.getResource() instanceof IProject) {\n\t\t\t\t\t\t\t\tIProject project = (IProject) delta.getResource();\n\t\t\t\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.OPEN) != 0 && project.isOpen()) {\n\t\t\t\t\t\t\t\t\ttoUpdate.add(project);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif ((delta.getKind() & IResourceDelta.CHANGED) != 0 && project.isOpen()) {\n\t\t\t\t\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.DESCRIPTION) != 0) {\t\n\t\t\t\t\t\t\t\t\t\tif ((delta.findMember(new Path(\".project\")) != null)  && XtextProjectHelper.hasNature(project))\n\t\t\t\t\t\t\t\t\t\t\ttoUpdate.add(project);\n\t\t\t\t\t\t\t\t\t\telse if(!XtextProjectHelper.hasNature(project)){\n\t\t\t\t\t\t\t\t\t\t\tscheduleRemoveProjectJob(project);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbuildScheduler.scheduleBuildIfNecessary(toUpdate);\n\t\t\t\t} catch (CoreException e) {\n\t\t\t\t\tlog.error(e.getMessage(), e);\n\t\t\t\t}\n\t\t\t} else if ((event.getType() == IResourceChangeEvent.PRE_CLOSE || event.getType() == IResourceChangeEvent.PRE_DELETE)) {\n\t\t\t\tif (event.getResource() instanceof IProject && \n\t\t\t\t\t\t(XtextProjectHelper.hasNature((IProject) event.getResource()) || \n\t\t\t\t\t\t\t\tevent.getResource().isAccessible() && event.getResource().isHidden())) {\n\t\t\t\t\tscheduleRemoveProjectJob((IProject) event.getResource());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":46804,"modified_method":"public void resourceChanged(final IResourceChangeEvent event) {\n\t\tif (workspace != null && workspace.isAutoBuilding()) {\n\t\t\tif (event.getType() == IResourceChangeEvent.POST_CHANGE) {\n\t\t\t\ttry {\n\t\t\t\t\tfinal Set<IProject> toUpdate = Sets.newLinkedHashSet();\n\t\t\t\t\tevent.getDelta().accept(new IResourceDeltaVisitor() {\n\t\t\t\t\t\tpublic boolean visit(IResourceDelta delta) throws CoreException {\n\t\t\t\t\t\t\tif (delta.getResource() instanceof IWorkspaceRoot)\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\tif (delta.getResource() instanceof IProject) {\n\t\t\t\t\t\t\t\tIProject project = (IProject) delta.getResource();\n\t\t\t\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.OPEN) != 0 && project.isOpen()) {\n\t\t\t\t\t\t\t\t\ttoUpdate.add(project);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif ((delta.getKind() & IResourceDelta.CHANGED) != 0 && project.isOpen()) {\n\t\t\t\t\t\t\t\t\tif ((delta.getFlags() & IResourceDelta.DESCRIPTION) != 0) {\t\n\t\t\t\t\t\t\t\t\t\tif ((delta.findMember(new Path(\".project\")) != null)  \n\t\t\t\t\t\t\t\t\t\t\t\t&& XtextProjectHelper.hasNature(project) && XtextProjectHelper.hasBuilder(project))\n\t\t\t\t\t\t\t\t\t\t\ttoUpdate.add(project);\n\t\t\t\t\t\t\t\t\t\telse if(!XtextProjectHelper.hasNature(project)){\n\t\t\t\t\t\t\t\t\t\t\tscheduleRemoveProjectJob(project);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbuildScheduler.scheduleBuildIfNecessary(toUpdate);\n\t\t\t\t} catch (CoreException e) {\n\t\t\t\t\tlog.error(e.getMessage(), e);\n\t\t\t\t}\n\t\t\t} else if ((event.getType() == IResourceChangeEvent.PRE_CLOSE || event.getType() == IResourceChangeEvent.PRE_DELETE)) {\n\t\t\t\tif (event.getResource() instanceof IProject && \n\t\t\t\t\t\t(XtextProjectHelper.hasNature((IProject) event.getResource()) || \n\t\t\t\t\t\t\t\tevent.getResource().isAccessible() && event.getResource().isHidden())) {\n\t\t\t\t\tscheduleRemoveProjectJob((IProject) event.getResource());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"1805128bcc91e53604dfc1d83ecfd0fbd69b48b2","url":"https://github.com/eclipse/xtext"},{"original_method":"public void queueURI(URI uri) {\n\t\tIterable<Pair<IStorage, IProject>> iterable = mapper.getStorages(uri);\n\t\tboolean associatedWithProject = false;\n\t\tfor(Pair<IStorage, IProject> pair: iterable) {\n\t\t\tIProject project = pair.getSecond();\n\t\t\tif (XtextProjectHelper.hasNature(project)) {\n\t\t\t\tString projectName = project.getName();\n\t\t\t\tLinkedList<URI> list = projectNameToChangedResource.get(projectName);\n\t\t\t\tif (list == null) {\n\t\t\t\t\tlist = Lists.newLinkedList();\n\t\t\t\t\tprojectNameToChangedResource.put(projectName, list);\n\t\t\t\t}\n\t\t\t\tlist.add(uri);\n\t\t\t\tassociatedWithProject = true;\n\t\t\t}\n\t\t}\n\t\tif (!associatedWithProject) {\n\t\t\tthis.uris.add(uri);\n\t\t}\n\t}","id":46805,"modified_method":"public void queueURI(URI uri) {\n\t\tIterable<Pair<IStorage, IProject>> iterable = mapper.getStorages(uri);\n\t\tboolean associatedWithProject = false;\n\t\tfor(Pair<IStorage, IProject> pair: iterable) {\n\t\t\tIProject project = pair.getSecond();\n\t\t\tif (XtextProjectHelper.hasNature(project) && XtextProjectHelper.hasBuilder(project)) {\n\t\t\t\tString projectName = project.getName();\n\t\t\t\tLinkedList<URI> list = projectNameToChangedResource.get(projectName);\n\t\t\t\tif (list == null) {\n\t\t\t\t\tlist = Lists.newLinkedList();\n\t\t\t\t\tprojectNameToChangedResource.put(projectName, list);\n\t\t\t\t}\n\t\t\t\tlist.add(uri);\n\t\t\t\tassociatedWithProject = true;\n\t\t\t}\n\t\t}\n\t\tif (!associatedWithProject) {\n\t\t\tthis.uris.add(uri);\n\t\t}\n\t}","commit_id":"1805128bcc91e53604dfc1d83ecfd0fbd69b48b2","url":"https://github.com/eclipse/xtext"},{"original_method":"protected boolean isAccessibleXtextProject(IProject p) {\n\t\treturn p != null && XtextProjectHelper.hasNature(p);\n\t}","id":46806,"modified_method":"protected boolean isAccessibleXtextProject(IProject p) {\n\t\treturn p != null && XtextProjectHelper.hasNature(p) && XtextProjectHelper.hasNature(p);\n\t}","commit_id":"1805128bcc91e53604dfc1d83ecfd0fbd69b48b2","url":"https://github.com/eclipse/xtext"},{"original_method":"private void unpack(TaskOutputsInternal taskOutputs, TarInputStream tarInput) throws IOException {\n        Map<String, TaskOutputFilePropertySpec> propertySpecs = Maps.uniqueIndex(taskOutputs.getFileProperties(), new Function<TaskFilePropertySpec, String>() {\n            @Override\n            public String apply(TaskFilePropertySpec propertySpec) {\n                return propertySpec.getPropertyName();\n            }\n        });\n        TarEntry entry;\n        while ((entry = tarInput.getNextEntry()) != null) {\n            String name = entry.getName();\n            Matcher matcher = PROPERTY_PATH.matcher(name);\n            if (!matcher.matches()) {\n                // TODO:LPTR What to do here?\n                continue;\n            }\n            String propertyName = matcher.group(1);\n            CacheableTaskOutputFilePropertySpec propertySpec = (CacheableTaskOutputFilePropertySpec) propertySpecs.get(propertyName);\n            if (propertySpec == null) {\n                throw new IllegalStateException(String.format(\"No output property '%s' registered\", propertyName));\n            }\n\n            String path = matcher.group(2);\n            File outputFile;\n            if (Strings.isNullOrEmpty(path)) {\n                outputFile = propertySpec.getOutputFile();\n            } else {\n                outputFile = new File(propertySpec.getOutputFile(), path);\n            }\n            if (entry.isDirectory()) {\n                if (propertySpec.getOutputType() != OutputType.DIRECTORY) {\n                    throw new IllegalStateException(\"Property should be an output directory property: \" + propertyName);\n                }\n                FileUtils.forceMkdir(outputFile);\n            } else {\n                // TODO:LPTR Can we save on doing this?\n                Files.createParentDirs(outputFile);\n                Files.asByteSink(outputFile).writeFrom(tarInput);\n            }\n            fileSystem.chmod(outputFile, entry.getMode() & 0777);\n            outputFile.setLastModified(entry.getModTime().getTime());\n        }\n    }","id":46807,"modified_method":"private void unpack(TaskOutputsInternal taskOutputs, TarInputStream tarInput) throws IOException {\n        Map<String, TaskOutputFilePropertySpec> propertySpecs = Maps.uniqueIndex(taskOutputs.getFileProperties(), new Function<TaskFilePropertySpec, String>() {\n            @Override\n            public String apply(TaskFilePropertySpec propertySpec) {\n                return propertySpec.getPropertyName();\n            }\n        });\n        TarEntry entry;\n        while ((entry = tarInput.getNextEntry()) != null) {\n            String name = entry.getName();\n            Matcher matcher = PROPERTY_PATH.matcher(name);\n            if (!matcher.matches()) {\n                // TODO:LPTR What to do here?\n                continue;\n            }\n            String propertyName = matcher.group(1);\n            CacheableTaskOutputFilePropertySpec propertySpec = (CacheableTaskOutputFilePropertySpec) propertySpecs.get(propertyName);\n            if (propertySpec == null) {\n                throw new IllegalStateException(String.format(\"No output property '%s' registered\", propertyName));\n            }\n\n            String path = matcher.group(2);\n            File outputFile;\n            if (Strings.isNullOrEmpty(path)) {\n                outputFile = propertySpec.getOutputFile();\n            } else {\n                outputFile = new File(propertySpec.getOutputFile(), path);\n            }\n            if (entry.isDirectory()) {\n                if (propertySpec.getOutputType() != OutputType.DIRECTORY) {\n                    throw new IllegalStateException(\"Property should be an output directory property: \" + propertyName);\n                }\n                FileUtils.forceMkdir(outputFile);\n            } else {\n                // TODO:LPTR Can we save on doing this?\n                Files.createParentDirs(outputFile);\n                Files.asByteSink(outputFile).writeFrom(tarInput);\n            }\n            //noinspection OctalInteger\n            fileSystem.chmod(outputFile, entry.getMode() & 0777);\n            if (!outputFile.setLastModified(entry.getModTime().getTime())) {\n                throw new IOException(String.format(\"Could not set modification time for '%s'\", outputFile));\n            }\n        }\n    }","commit_id":"c2485f5253d9ae5a4186dd2f8f57b58729a38e17","url":"https://github.com/gradle/gradle"},{"original_method":"/**\n\t * unpack a segment from a zip\n\t * \n\t * @param addsi\n\t * @param packetStream\n\t * @param version\n\t */\n\tprotected void unpackSegment(SegmentInfo addsi, InputStream packetStream, long version)\n\t\t\tthrows IOException\n\t{\n\t\tlog\n\t\t\t\t.debug(\"================================Starting Unpack Segment==============================\");\n\t\tZipInputStream zin = new ZipInputStream(packetStream);\n\t\tZipEntry zipEntry = null;\n\t\tFileOutputStream fout = null;\n\t\ttry\n\t\t{\n\t\t\tFile loc = addsi.getSegmentLocation();\n\t\t\tboolean locationExists = false;\n\t\t\tFile unpackBase = new File(searchIndexDirectory);\n\t\t\tif (loc.exists())\n\t\t\t{\n\t\t\t\tlocationExists = true;\n\t\t\t\tunpackBase = new File(searchIndexDirectory, \"unpack\");\n\t\t\t}\n\t\t\tbyte[] buffer = new byte[4096];\n\t\t\twhile ((zipEntry = zin.getNextEntry()) != null)\n\t\t\t{\n\n\t\t\t\tlong ts = zipEntry.getTime();\n\t\t\t\t// the zip entry needs to be a full path from the\n\t\t\t\t// searchIndexDirectory... hence this is correct\n\n\t\t\t\tFile f = new File(unpackBase, zipEntry.getName());\n\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t\tlog.debug(\"         Unpack \" + f.getAbsolutePath());\n\t\t\t\tf.getParentFile().mkdirs();\n\n\t\t\t\tfout = new FileOutputStream(f);\n\t\t\t\tint len;\n\t\t\t\twhile ((len = zin.read(buffer)) > 0)\n\t\t\t\t{\n\t\t\t\t\tfout.write(buffer, 0, len);\n\t\t\t\t}\n\t\t\t\tzin.closeEntry();\n\t\t\t\tfout.close();\n\t\t\t\tf.setLastModified(ts);\n\t\t\t}\n\n\t\t\tif (locationExists)\n\t\t\t{\n\t\t\t\tMap<String, File> moved = new HashMap<String, File>();\n\t\t\t\tmoveAll(new File(unpackBase, loc.getName()), loc, moved);\n\t\t\t\tdeleteAll(unpackBase);\n\t\t\t\t// unfortunately we have to remove the files befor the reload\n\t\t\t\t// otherwise the checksums will fail.\n\t\t\t\tdeleteSome(loc, moved);\n\t\t\t\t// force a reload before we delete the files,\n\t\t\t\t// since this is in the locked thread, this node will reload\n\t\t\t\tsearchService.reload();\n\n\t\t\t}\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\taddsi.checkSegmentValidity(searchService.hasDiagnostics(),\n\t\t\t\t\t\t\"Unpack Segment\");\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\taddsi.checkSegmentValidity(true, \"Unpack Segment Failed\");\n\t\t\t\t}\n\t\t\t\tcatch (Exception e)\n\t\t\t\t{\n\t\t\t\t\tlog.debug(e);\n\t\t\t\t}\n\t\t\t\tthrow new RuntimeException(\"Segment \" + addsi.getName()\n\t\t\t\t\t\t+ \" is corrupted \");\n\t\t\t}\n\n\t\t\taddsi.setVersion(version);\n\t\t\taddsi.setCreated();\n\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfout.close();\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\tlog.debug(ex);\n\t\t\t}\n\t\t}\n\t\tlog\n\t\t\t\t.debug(\"================================Done Unpack Segment==============================\");\n\n\t}","id":46808,"modified_method":"/**\n\t * unpack a segment from a zip\n\t * \n\t * @param addsi\n\t * @param packetStream\n\t * @param version\n\t */\n\tprotected void unpackSegment(SegmentInfo addsi, InputStream packetStream, long version)\n\t\t\tthrows IOException\n\t{\n\t\tlog\n\t\t\t\t.debug(\"================================Starting Unpack Segment==============================\");\n\t\tZipInputStream zin = new ZipInputStream(packetStream);\n\t\tZipEntry zipEntry = null;\n\t\tFileOutputStream fout = null;\n\t\ttry\n\t\t{\n\t\t\tFile loc = addsi.getSegmentLocation();\n\t\t\tboolean locationExists = false;\n\t\t\tFile unpackBase = new File(searchIndexDirectory);\n\t\t\tif (loc.exists())\n\t\t\t{\n\t\t\t\tlocationExists = true;\n\t\t\t\tunpackBase = new File(searchIndexDirectory, \"unpack\");\n\t\t\t}\n\t\t\tbyte[] buffer = new byte[4096];\n\t\t\twhile ((zipEntry = zin.getNextEntry()) != null)\n\t\t\t{\n\n\t\t\t\tlong ts = zipEntry.getTime();\n\t\t\t\t// the zip entry needs to be a full path from the\n\t\t\t\t// searchIndexDirectory... hence this is correct\n\n\t\t\t\tFile f = new File(unpackBase, zipEntry.getName());\n\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t\tlog.debug(\"         Unpack \" + f.getAbsolutePath());\n\t\t\t\tif (!f.getParentFile().mkdirs())\n\t\t\t\t{\n\t\t\t\t\tlog.warn(\"unpackSegment: failed to delete parent folders\");\n\t\t\t\t}\n\n\t\t\t\tfout = new FileOutputStream(f);\n\t\t\t\tint len;\n\t\t\t\twhile ((len = zin.read(buffer)) > 0)\n\t\t\t\t{\n\t\t\t\t\tfout.write(buffer, 0, len);\n\t\t\t\t}\n\t\t\t\tzin.closeEntry();\n\t\t\t\tfout.close();\n\t\t\t\tif (!f.setLastModified(ts))\n\t\t\t\t{\n\t\t\t\t\tlog.warn(\"unpackSegments: failed to setlastmodified\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (locationExists)\n\t\t\t{\n\t\t\t\tMap<String, File> moved = new HashMap<String, File>();\n\t\t\t\tmoveAll(new File(unpackBase, loc.getName()), loc, moved);\n\t\t\t\tdeleteAll(unpackBase);\n\t\t\t\t// unfortunately we have to remove the files befor the reload\n\t\t\t\t// otherwise the checksums will fail.\n\t\t\t\tdeleteSome(loc, moved);\n\t\t\t\t// force a reload before we delete the files,\n\t\t\t\t// since this is in the locked thread, this node will reload\n\t\t\t\tsearchService.reload();\n\n\t\t\t}\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\taddsi.checkSegmentValidity(searchService.hasDiagnostics(),\n\t\t\t\t\t\t\"Unpack Segment\");\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\taddsi.checkSegmentValidity(true, \"Unpack Segment Failed\");\n\t\t\t\t}\n\t\t\t\tcatch (Exception e)\n\t\t\t\t{\n\t\t\t\t\tlog.debug(e);\n\t\t\t\t}\n\t\t\t\tthrow new RuntimeException(\"Segment \" + addsi.getName()\n\t\t\t\t\t\t+ \" is corrupted \");\n\t\t\t}\n\n\t\t\taddsi.setVersion(version);\n\t\t\taddsi.setCreated();\n\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfout.close();\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\tlog.debug(ex);\n\t\t\t}\n\t\t}\n\t\tlog\n\t\t\t\t.debug(\"================================Done Unpack Segment==============================\");\n\n\t}","commit_id":"c912d2afda5307d8f5c734115c96b140210de596","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * @param file\n\t */\n\tprivate void moveAll(File src, File dest, Map<String, File> moved)\n\t{\n\n\t\tif (src.isDirectory())\n\t\t{\n\t\t\tFile[] fs = src.listFiles();\n\t\t\tfor (int i = 0; i < fs.length; i++)\n\t\t\t{\n\t\t\t\tmoveAll(fs[i], new File(dest, fs[i].getName()), moved);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (dest.exists())\n\t\t\t{\n\t\t\t\tdest.delete();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tFile p = dest.getParentFile();\n\t\t\t\tif (!p.exists())\n\t\t\t\t{\n\t\t\t\t\tp.mkdirs();\n\t\t\t\t}\n\t\t\t}\n\t\t\tsrc.renameTo(dest);\n\t\t\tlog.debug(\"          renamed \" + src.getPath() + \" to \" + dest.getPath());\n\t\t}\n\t\tmoved.put(dest.getPath(), dest);\n\t}","id":46809,"modified_method":"/**\n\t * @param file\n\t */\n\tprivate void moveAll(File src, File dest, Map<String, File> moved)\n\t{\n\n\t\tif (src.isDirectory())\n\t\t{\n\t\t\tFile[] fs = src.listFiles();\n\t\t\tfor (int i = 0; i < fs.length; i++)\n\t\t\t{\n\t\t\t\tmoveAll(fs[i], new File(dest, fs[i].getName()), moved);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (dest.exists())\n\t\t\t{\n\t\t\t\tif (!dest.delete())\n\t\t\t\t{\n\t\t\t\t\tlog.warn(\"Failed to delte file: \" + dest.getPath());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tFile p = dest.getParentFile();\n\t\t\t\tif (!p.exists())\n\t\t\t\t{\n\t\t\t\t\tif (!p.mkdirs())\n\t\t\t\t\t{\n\t\t\t\t\t\tlog.warn(\"Failed to create directories in \" + p.getPath());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!src.renameTo(dest))\n\t\t\t{\n\t\t\t\tlog.warn(\"failed to rename: \" + src.getPath() + \" to: \" + dest.getPath());\n\t\t\t}\n\t\t\tlog.debug(\"          renamed \" + src.getPath() + \" to \" + dest.getPath());\n\t\t}\n\t\tmoved.put(dest.getPath(), dest);\n\t}","commit_id":"c912d2afda5307d8f5c734115c96b140210de596","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * unpack a segment from a zip\n\t * \n\t * @param addsi\n\t * @param packetStream\n\t * @param version\n\t */\n\tprotected void unpackPatch(InputStream packetStream) throws IOException\n\t{\n\t\tlog\n\t\t\t\t.debug(\"================================Start Unpack Patch==============================\");\n\t\tZipInputStream zin = new ZipInputStream(packetStream);\n\t\tZipEntry zipEntry = null;\n\t\tFileOutputStream fout = null;\n\t\ttry\n\t\t{\n\t\t\tbyte[] buffer = new byte[4096];\n\t\t\twhile ((zipEntry = zin.getNextEntry()) != null)\n\t\t\t{\n\n\t\t\t\tlong ts = zipEntry.getTime();\n\t\t\t\t// the zip index name is the full path from the\n\t\t\t\t// searchIndexDirectory\n\t\t\t\tFile f = new File(searchIndexDirectory, zipEntry.getName());\n\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t\tlog.debug(\"                Unpack \" + f.getAbsolutePath());\n\t\t\t\tf.getParentFile().mkdirs();\n\t\t\t\tfout = new FileOutputStream(f);\n\n\t\t\t\tint len;\n\t\t\t\twhile ((len = zin.read(buffer)) > 0)\n\t\t\t\t{\n\t\t\t\t\tfout.write(buffer, 0, len);\n\t\t\t\t}\n\t\t\t\tzin.closeEntry();\n\t\t\t\tfout.close();\n\t\t\t\tf.setLastModified(ts);\n\t\t\t}\n\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfout.close();\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\tlog.debug(ex);\n\t\t\t}\n\t\t}\n\t\tlog\n\t\t\t\t.debug(\"================================Done Unpack Patch==============================\");\n\n\t}","id":46810,"modified_method":"/**\n\t * unpack a segment from a zip\n\t * \n\t * @param addsi\n\t * @param packetStream\n\t * @param version\n\t */\n\tprotected void unpackPatch(InputStream packetStream) throws IOException\n\t{\n\t\tlog\n\t\t\t\t.debug(\"================================Start Unpack Patch==============================\");\n\t\tZipInputStream zin = new ZipInputStream(packetStream);\n\t\tZipEntry zipEntry = null;\n\t\tFileOutputStream fout = null;\n\t\ttry\n\t\t{\n\t\t\tbyte[] buffer = new byte[4096];\n\t\t\twhile ((zipEntry = zin.getNextEntry()) != null)\n\t\t\t{\n\n\t\t\t\tlong ts = zipEntry.getTime();\n\t\t\t\t// the zip index name is the full path from the\n\t\t\t\t// searchIndexDirectory\n\t\t\t\tFile f = new File(searchIndexDirectory, zipEntry.getName());\n\t\t\t\tif (log.isDebugEnabled())\n\t\t\t\t\tlog.debug(\"                Unpack \" + f.getAbsolutePath());\n\t\t\t\tif (!f.getParentFile().mkdirs())\n\t\t\t\t{\n\t\t\t\t\tlog.warn(\"upackpatch():  failes to create dirs in \" + f.getParentFile().getPath());\n\t\t\t\t}\n\t\t\t\tfout = new FileOutputStream(f);\n\n\t\t\t\tint len;\n\t\t\t\twhile ((len = zin.read(buffer)) > 0)\n\t\t\t\t{\n\t\t\t\t\tfout.write(buffer, 0, len);\n\t\t\t\t}\n\t\t\t\tzin.closeEntry();\n\t\t\t\tfout.close();\n\t\t\t\tif (!f.setLastModified(ts)) {\n\t\t\t\t\tlog.warn(\"Failed to set modification time on: \" + f.getPath());\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\tfinally\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tfout.close();\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\tlog.debug(ex);\n\t\t\t}\n\t\t}\n\t\tlog\n\t\t\t\t.debug(\"================================Done Unpack Patch==============================\");\n\n\t}","commit_id":"c912d2afda5307d8f5c734115c96b140210de596","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * @param loc\n\t */\n\tprivate void deleteAll(File f)\n\t{\n\t\tif (f.isDirectory())\n\t\t{\n\t\t\tFile[] fs = f.listFiles();\n\t\t\tfor (int i = 0; i < fs.length; i++)\n\t\t\t{\n\t\t\t\tdeleteAll(fs[i]);\n\t\t\t}\n\t\t\tf.delete();\n\t\t\tlog.debug(\"          deleted \" + f.getPath());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tf.delete();\n\t\t\tlog.debug(\"          deleted \" + f.getPath());\n\t\t}\n\t}","id":46811,"modified_method":"/**\n\t * @param loc\n\t */\n\tprivate void deleteAll(File f)\n\t{\n\t\tif (f.isDirectory())\n\t\t{\n\t\t\tFile[] fs = f.listFiles();\n\t\t\tfor (int i = 0; i < fs.length; i++)\n\t\t\t{\n\t\t\t\tdeleteAll(fs[i]);\n\t\t\t}\n\t\t\tif (!f.delete())\n\t\t\t{\n\t\t\t\tlog.warn(\"deleteAll(): failed to delete \" + f.getPath());\n\t\t\t}\n\t\t\tlog.debug(\"          deleted \" + f.getPath());\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (!f.delete())\n\t\t\t{\n\t\t\t\tlog.warn(\"deleteAll(): failed to delete \" + f.getPath());\n\t\t\t}\n\t\t\tlog.debug(\"          deleted \" + f.getPath());\n\t\t}\n\t}","commit_id":"c912d2afda5307d8f5c734115c96b140210de596","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * @param log2\n\t * @param moved\n\t */\n\tprivate void deleteSome(File f, Map<String, File> moved)\n\t{\n\t\tif (f.isDirectory())\n\t\t{\n\t\t\tFile[] fs = f.listFiles();\n\t\t\tfor (int i = 0; i < fs.length; i++)\n\t\t\t{\n\t\t\t\tdeleteSome(fs[i], moved);\n\t\t\t}\n\t\t\tif (moved.get(f.getPath()) == null)\n\t\t\t{\n\t\t\t\tf.delete();\n\t\t\t\tlog.debug(\"          deleted \" + f.getPath());\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (moved.get(f.getPath()) == null)\n\t\t\t{\n\t\t\t\tf.delete();\n\t\t\t\tlog.debug(\"          deleted \" + f.getPath());\n\t\t\t}\n\t\t}\n\n\t}","id":46812,"modified_method":"/**\n\t * @param log2\n\t * @param moved\n\t */\n\tprivate void deleteSome(File f, Map<String, File> moved)\n\t{\n\t\tif (f.isDirectory())\n\t\t{\n\t\t\tFile[] fs = f.listFiles();\n\t\t\tfor (int i = 0; i < fs.length; i++)\n\t\t\t{\n\t\t\t\tdeleteSome(fs[i], moved);\n\t\t\t}\n\t\t\tif (moved.get(f.getPath()) == null)\n\t\t\t{\n\t\t\t\tif (!f.delete())\n\t\t\t\t{\n\t\t\t\t\tlog.warn(\"Failed to delte file: \" + f.getPath());\n\t\t\t\t}\n\t\t\t\tlog.debug(\"          deleted \" + f.getPath());\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (moved.get(f.getPath()) == null)\n\t\t\t{\n\t\t\t\tif (!f.delete())\n\t\t\t\t{\n\t\t\t\t\tlog.warn(\"Failed to delte file: \" + f.getPath());\n\t\t\t\t}\n\t\t\t\tlog.debug(\"          deleted \" + f.getPath());\n\t\t\t}\n\t\t}\n\n\t}","commit_id":"c912d2afda5307d8f5c734115c96b140210de596","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\r\n     * Adds the annotation to the internal target list if a match is found\r\n     * @param node\r\n     */\r\n    public void visitAnnotations(AnnotatedNode node) {\r\n        super.visitAnnotations(node);\r\n        for (AnnotationNode annotation : (Collection<AnnotationNode>) node.getAnnotations()) {\r\n            String name = annotation.getClassNode().getName();\r\n            if (annotationsMap.containsKey(name)) {\r\n                targetNodes.add(new ASTNode[] {annotation, node});\r\n            }\r\n        }\r\n    }","id":46813,"modified_method":"/**\r\n     * Adds the annotation to the internal target list if a match is found\r\n     * @param node\r\n     */\r\n    public void visitAnnotations(AnnotatedNode node) {\r\n        super.visitAnnotations(node);\r\n        for (AnnotationNode annotation : (Collection<AnnotationNode>) node.getAnnotations()) {\r\n            if (annotationsMap.containsKey(annotation.getClassNode())) {\r\n                targetNodes.add(new ASTNode[] {annotation, node});\r\n            }\r\n        }\r\n    }","commit_id":"de56b0d270fb0131eb1af9d7e638f7855d1db7a3","url":"https://github.com/apache/groovy"},{"original_method":"/**\r\n     * Main loop entry.\r\n     *\r\n     * First, it delegates to teh super visitClass so we can collect the\r\n     * relevant annotations in an AST tree walk.\r\n     *\r\n     * Second, calls the visit method on the transformation for each relevant\r\n     * annotation found.\r\n     *\r\n     * @param classNode\r\n     */\r\n    public void visitClass(ClassNode classNode) {\r\n        // only descend if we have annotations to look for\r\n        if (!annotationsMap.isEmpty()) {\r\n            targetNodes = new LinkedList<ASTNode[]>();\r\n\r\n            // fist pass, collect nodes\r\n            super.visitClass(classNode);\r\n\r\n            // second pass, call visit on all of the collected nodes\r\n            for (ASTNode[] node : targetNodes) {\r\n                annotationsMap.get(((AnnotationNode) node[0]).getClassNode().getName())\r\n                    .visit((AnnotationNode) node[0], (AnnotatedNode) node[1], source, context);\r\n            }\r\n        }\r\n    }","id":46814,"modified_method":"/**\r\n     * Main loop entry.\r\n     *\r\n     * First, it delegates to teh super visitClass so we can collect the\r\n     * relevant annotations in an AST tree walk.\r\n     *\r\n     * Second, calls the visit method on the transformation for each relevant\r\n     * annotation found.\r\n     *\r\n     * @param classNode\r\n     */\r\n    public void visitClass(ClassNode classNode) {\r\n        // only descend if we have annotations to look for\r\n        if (!annotationsMap.isEmpty()) {\r\n            targetNodes = new LinkedList<ASTNode[]>();\r\n\r\n            // fist pass, collect nodes\r\n            super.visitClass(classNode);\r\n\r\n            // second pass, call visit on all of the collected nodes\r\n            for (ASTNode[] node : targetNodes) {\r\n                annotationsMap.get(((AnnotationNode) node[0]).getClassNode())\r\n                    .visit(node[0], node[1], source, context);\r\n            }\r\n        }\r\n    }","commit_id":"de56b0d270fb0131eb1af9d7e638f7855d1db7a3","url":"https://github.com/apache/groovy"},{"original_method":"/**\r\n     * Adds the particular transformation to this phase.\r\n     *\r\n     * @param name\r\n     * @param transformation\r\n     */\r\n    public void addAnnotation(String name, ASTSingleNodeTransformation transformation) {\r\n        annotationsMap.put(name, transformation);\r\n    }","id":46815,"modified_method":"/**\r\n     * Adds the particular transformation to this phase.\r\n     *\r\n     * @param annotationClassNode\r\n     * @param transformation\r\n     */\r\n    public void addAnnotation(ClassNode annotationClassNode, ASTSingleNodeTransformation transformation) {\r\n        annotationsMap.put(annotationClassNode, transformation);\r\n    }","commit_id":"de56b0d270fb0131eb1af9d7e638f7855d1db7a3","url":"https://github.com/apache/groovy"},{"original_method":"/**\r\n     * Used to see if the annotation is already added.\r\n     *\r\n     * @param annotationTypeName\r\n     * @return\r\n     */\r\n    public boolean hasAnnotation(String annotationTypeName) {\r\n        return annotationsMap.containsKey(annotationTypeName);\r\n    }","id":46816,"modified_method":"/**\r\n     * Used to see if the annotation is already added.\r\n     *\r\n     * @param annotationClassNode\r\n     * @return\r\n     */\r\n    public boolean hasAnnotation(ClassNode annotationClassNode) {\r\n        return annotationsMap.containsKey(annotationClassNode);\r\n    }","commit_id":"de56b0d270fb0131eb1af9d7e638f7855d1db7a3","url":"https://github.com/apache/groovy"},{"original_method":"public ASTTransformationCodeVisitor() {\r\n        annotationsMap = new HashMap<String, ASTSingleNodeTransformation>();\r\n    }","id":46817,"modified_method":"public ASTTransformationCodeVisitor() {\r\n        annotationsMap = new HashMap<ClassNode, ASTSingleNodeTransformation>();\r\n    }","commit_id":"de56b0d270fb0131eb1af9d7e638f7855d1db7a3","url":"https://github.com/apache/groovy"},{"original_method":"/**\r\n     * If the annotaiton is annotated with @{@link org.codehaus.groovy.ast.GroovyASTTransformation}\r\n     * the annotation is added to stageVisitors at the appropriate processor visitor.\r\n     * @param node\r\n     */\r\n    public void visitAnnotations(AnnotatedNode node) {\r\n        super.visitAnnotations(node);\r\n        for (AnnotationNode annotation : (Collection<AnnotationNode>) node.getAnnotations()) {\r\n            ClassNode cn = annotation.getClassNode();\r\n            if (!cn.isResolved()) continue;\r\n            //TODO: change this code to use the Groovy AST isntead of direct usage of Class \r\n            Class<? extends GroovyASTTransformation> annotationType = cn.getTypeClass();\r\n            GroovyASTTransformation transformationAnnotation =\r\n                annotationType.getAnnotation(GroovyASTTransformation.class);\r\n            if (transformationAnnotation == null) {\r\n                // stop if there is no appropriately typed annotation\r\n                continue;\r\n            }\r\n            ASTTransformationCodeVisitor stage = stageVisitors.get(\r\n                transformationAnnotation.phase());\r\n            String annotationTypeName = annotationType.getName();\r\n\r\n            if (stage == null) {\r\n                badStageError(node, transformationAnnotation, annotationTypeName);\r\n            } else if (!stage.hasAnnotation(annotationTypeName)) {\r\n                try {\r\n                    Object o = Class.forName(transformationAnnotation.transformationClassName()).newInstance();\r\n                    if (o instanceof ASTSingleNodeTransformation) {\r\n                    stage.addAnnotation(annotationTypeName,\r\n                            (ASTSingleNodeTransformation) o);\r\n                    } else if (o instanceof CompilationUnit.PrimaryClassNodeOperation) {\r\n                        compilationUnit.addPhaseOperation(\r\n                            (CompilationUnit.PrimaryClassNodeOperation)o,\r\n                            transformationAnnotation.phase());\r\n                    } else if (o instanceof CompilationUnit.SourceUnitOperation) {\r\n                        compilationUnit.addPhaseOperation(\r\n                            (CompilationUnit.SourceUnitOperation)o,\r\n                            transformationAnnotation.phase());\r\n                    } else if (o instanceof CompilationUnit.GroovyClassOperation) {\r\n                        compilationUnit.addPhaseOperation(\r\n                            (CompilationUnit.GroovyClassOperation)o);\r\n                    }\r\n                } catch (InstantiationException e) {\r\n                    source.getErrorCollector().addError(\r\n                        new SimpleMessage(\r\n                            \"Could not instantiate Transformation Processor \" + transformationAnnotation.transformationClassName(),\r\n                            source));\r\n                } catch (IllegalAccessException e) {\r\n                    source.getErrorCollector().addError(\r\n                        new SimpleMessage(\r\n                            \"Could not instantiate Transformation Processor \" + transformationAnnotation.transformationClassName(),\r\n                            source));\r\n                } catch (ClassNotFoundException e) {\r\n                    source.getErrorCollector().addError(\r\n                        new SimpleMessage(\r\n                            \"Could find class for Transformation Processor \" + transformationAnnotation.transformationClassName(),\r\n                            source));\r\n                }\r\n            }\r\n        }\r\n    }","id":46818,"modified_method":"/**\r\n     * If the annotaiton is annotated with @{@link org.codehaus.groovy.ast.GroovyASTTransformation}\r\n     * the annotation is added to stageVisitors at the appropriate processor visitor.\r\n     * @param node\r\n     */\r\n    public void visitAnnotations(AnnotatedNode node) {\r\n        super.visitAnnotations(node);\r\n        for (AnnotationNode annotation : (Collection<AnnotationNode>) node.getAnnotations()) {\r\n            ClassNode annotationClassNode = annotation.getClassNode();\r\n            if (!annotationClassNode.isResolved()) continue;\r\n            //TODO: change this code to use the Groovy AST isntead of direct usage of Class \r\n            Class<? extends GroovyASTTransformation> annotationType = annotationClassNode.getTypeClass();\r\n            GroovyASTTransformation transformationAnnotation =\r\n                annotationType.getAnnotation(GroovyASTTransformation.class);\r\n            if (transformationAnnotation == null) {\r\n                // stop if there is no appropriately typed annotation\r\n                continue;\r\n            }\r\n            ASTTransformationCodeVisitor stage = stageVisitors.get(\r\n                transformationAnnotation.phase());\r\n\r\n            if (stage == null) {\r\n                badStageError(node, transformationAnnotation, annotationClassNode);\r\n            } else if (!stage.hasAnnotation(annotationClassNode)) {\r\n                try {\r\n                    Object o = Class.forName(transformationAnnotation.transformationClassName()).newInstance();\r\n                    if (o instanceof ASTSingleNodeTransformation) {\r\n                        stage.addAnnotation(annotationClassNode,\r\n                            (ASTSingleNodeTransformation) o);\r\n                    } else if (o instanceof CompilationUnit.PrimaryClassNodeOperation) {\r\n                        compilationUnit.addPhaseOperation(\r\n                            (CompilationUnit.PrimaryClassNodeOperation)o,\r\n                            transformationAnnotation.phase());\r\n                    } else if (o instanceof CompilationUnit.SourceUnitOperation) {\r\n                        compilationUnit.addPhaseOperation(\r\n                            (CompilationUnit.SourceUnitOperation)o,\r\n                            transformationAnnotation.phase());\r\n                    } else if (o instanceof CompilationUnit.GroovyClassOperation) {\r\n                        compilationUnit.addPhaseOperation(\r\n                            (CompilationUnit.GroovyClassOperation)o);\r\n                    }\r\n                } catch (InstantiationException e) {\r\n                    source.getErrorCollector().addError(\r\n                        new SimpleMessage(\r\n                            \"Could not instantiate Transformation Processor \" + transformationAnnotation.transformationClassName(),\r\n                            source));\r\n                } catch (IllegalAccessException e) {\r\n                    source.getErrorCollector().addError(\r\n                        new SimpleMessage(\r\n                            \"Could not instantiate Transformation Processor \" + transformationAnnotation.transformationClassName(),\r\n                            source));\r\n                } catch (ClassNotFoundException e) {\r\n                    source.getErrorCollector().addError(\r\n                        new SimpleMessage(\r\n                            \"Could find class for Transformation Processor \" + transformationAnnotation.transformationClassName(),\r\n                            source));\r\n                }\r\n            }\r\n        }\r\n    }","commit_id":"de56b0d270fb0131eb1af9d7e638f7855d1db7a3","url":"https://github.com/apache/groovy"},{"original_method":"private void badStageError(ASTNode node, GroovyASTTransformation transformationAnnotation, String annotationTypeName) {\r\n        try {\r\n            String phaseName = Phases.getDescription(transformationAnnotation.phase());\r\n            source.getErrorCollector().addErrorAndContinue(\r\n                new SyntaxErrorMessage(new SyntaxException(\r\n                    \"@\" + annotationTypeName + \" cannot be handled in phase \" + phaseName,\r\n                    node.getLineNumber(),\r\n                    node.getColumnNumber()),\r\n                    source));\r\n        } catch (ArrayIndexOutOfBoundsException aiobe) {\r\n            source.getErrorCollector().addErrorAndContinue(\r\n                new SyntaxErrorMessage(new SyntaxException(\r\n                    \"@\" + annotationTypeName + \" specifies a phase that does not exist: \" + transformationAnnotation.phase(),\r\n                    node.getLineNumber(),\r\n                    node.getColumnNumber()),\r\n                    source));\r\n        }\r\n    }","id":46819,"modified_method":"private void badStageError(ASTNode node, GroovyASTTransformation transformationAnnotation, ClassNode annotationClassNode) {\r\n        try {\r\n            String phaseName = Phases.getDescription(transformationAnnotation.phase());\r\n            source.getErrorCollector().addErrorAndContinue(\r\n                new SyntaxErrorMessage(new SyntaxException(\r\n                    \"@\" + annotationClassNode.getName() + \" cannot be handled in phase \" + phaseName,\r\n                    node.getLineNumber(),\r\n                    node.getColumnNumber()),\r\n                    source));\r\n        } catch (ArrayIndexOutOfBoundsException aiobe) {\r\n            source.getErrorCollector().addErrorAndContinue(\r\n                new SyntaxErrorMessage(new SyntaxException(\r\n                    \"@\" + annotationClassNode.getName() + \" specifies a phase that does not exist: \" + transformationAnnotation.phase(),\r\n                    node.getLineNumber(),\r\n                    node.getColumnNumber()),\r\n                    source));\r\n        }\r\n    }","commit_id":"de56b0d270fb0131eb1af9d7e638f7855d1db7a3","url":"https://github.com/apache/groovy"},{"original_method":"/**\r\n     * Create the visitor\r\n     *\r\n     * @param stageVisitors The map of {@link ASTTransformationCodeVisitor}s keyed by phase number.\r\n     */\r\n    public ASTTransformationCollectorCodeVisitor(Map<Integer, ASTTransformationCodeVisitor> stageVisitors) {\r\n        this.stageVisitors = stageVisitors;\r\n        this.compilationUnit = compilationUnit;\r\n    }","id":46820,"modified_method":"/**\r\n     * Create the visitor\r\n     *\r\n     * @param stageVisitors The map of {@link ASTTransformationCodeVisitor}s keyed by phase number.\r\n     */\r\n    public ASTTransformationCollectorCodeVisitor(Map<Integer, ASTTransformationCodeVisitor> stageVisitors, CompilationUnit compilationUnit) {\r\n        this.stageVisitors = stageVisitors;\r\n        this.compilationUnit = compilationUnit;\r\n    }","commit_id":"de56b0d270fb0131eb1af9d7e638f7855d1db7a3","url":"https://github.com/apache/groovy"},{"original_method":"/**\r\n     * Convienience method to see if an annotatied node is @Bound\r\n     *\r\n     * @param node\r\n     * @return\r\n     */\r\n    public static boolean hasBoundAnnotation(AnnotatedNode node) {\r\n        for (AnnotationNode annotation : (Collection<AnnotationNode>) node.getAnnotations()) {\r\n            if (Bound.class.getName().equals(annotation.getClassNode().getName())) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }","id":46821,"modified_method":"/**\r\n     * Convienience method to see if an annotatied node is @Bound\r\n     *\r\n     * @param node\r\n     * @return\r\n     */\r\n    public static boolean hasBoundAnnotation(AnnotatedNode node) {\r\n        for (AnnotationNode annotation : (Collection<AnnotationNode>) node.getAnnotations()) {\r\n            if (boundClassNode.equals(annotation.getClassNode())) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }","commit_id":"de56b0d270fb0131eb1af9d7e638f7855d1db7a3","url":"https://github.com/apache/groovy"},{"original_method":"/**\r\n     * Snoops through the declaring class and all parents looking for a field\r\n     * of type PropertyChangeSupport.  Returns the field if found\r\n     *\r\n     * @param declaringClass\r\n     * @return\r\n     */\r\n    protected boolean needsPropertyChangeSupport(ClassNode declaringClass) {\r\n        while (declaringClass != null) {\r\n            for (FieldNode field : (Collection<FieldNode>) declaringClass.getFields()) {\r\n                if (field.getType() == null) {\r\n                    continue;\r\n                }\r\n                if (PropertyChangeSupport.class.getName().equals(field.getType().getName())) {\r\n                    //pcsFieldName = field.getName();\r\n                    pcsField = field;\r\n                    return false;\r\n                }\r\n            }\r\n            //TODO check add/remove conflicts\r\n            declaringClass = declaringClass.getSuperClass();\r\n        }\r\n        return true;\r\n    }","id":46822,"modified_method":"/**\r\n     * Snoops through the declaring class and all parents looking for a field\r\n     * of type PropertyChangeSupport.  Returns the field if found\r\n     *\r\n     * @param declaringClass\r\n     * @return\r\n     */\r\n    protected boolean needsPropertyChangeSupport(ClassNode declaringClass) {\r\n        while (declaringClass != null) {\r\n            for (FieldNode field : (Collection<FieldNode>) declaringClass.getFields()) {\r\n                if (field.getType() == null) {\r\n                    continue;\r\n                }\r\n                if (pcsClassNode.equals(field.getType())) {\r\n                    //pcsFieldName = field.getName();\r\n                    pcsField = field;\r\n                    return false;\r\n                }\r\n            }\r\n            //TODO check add/remove conflicts\r\n            declaringClass = declaringClass.getSuperClass();\r\n        }\r\n        return true;\r\n    }","commit_id":"de56b0d270fb0131eb1af9d7e638f7855d1db7a3","url":"https://github.com/apache/groovy"},{"original_method":"/**\r\n     * Convienience method to see if an annotatied node is @Constrained\r\n     *\r\n     * @param node\r\n     * @return\r\n     */\r\n    public static boolean hasConstrainedAnnotation(AnnotatedNode node) {\r\n        for (AnnotationNode annotation : (Collection<AnnotationNode>) node.getAnnotations()) {\r\n            if (Constrained.class.getName().equals(annotation.getClassNode().getName())) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }","id":46823,"modified_method":"/**\r\n     * Convienience method to see if an annotatied node is @Constrained\r\n     *\r\n     * @param node\r\n     * @return\r\n     */\r\n    public static boolean hasConstrainedAnnotation(AnnotatedNode node) {\r\n        for (AnnotationNode annotation : (Collection<AnnotationNode>) node.getAnnotations()) {\r\n            if (constrainedClassNode.equals(annotation.getClassNode())) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }","commit_id":"de56b0d270fb0131eb1af9d7e638f7855d1db7a3","url":"https://github.com/apache/groovy"},{"original_method":"/**\r\n     * Snoops through the declaring class and all parents looking for a field\r\n     * of type VetoableChangeSupport.  Returns the field if found\r\n     *\r\n     * @param declaringClass\r\n     * @return\r\n     */\r\n    protected boolean needsVetoableChangeSupport(ClassNode declaringClass) {\r\n        while (declaringClass != null) {\r\n            for (FieldNode field : (Collection<FieldNode>) declaringClass.getFields()) {\r\n                if (field.getType() == null) {\r\n                    continue;\r\n                }\r\n                if (VetoableChangeSupport.class.getName().equals(field.getType().getName())) {\r\n                    vcsField = field;\r\n                    return false;\r\n                }\r\n            }\r\n            //TODO check add/remove conflicts\r\n            declaringClass = declaringClass.getSuperClass();\r\n        }\r\n        return true;\r\n    }","id":46824,"modified_method":"/**\r\n     * Snoops through the declaring class and all parents looking for a field\r\n     * of type VetoableChangeSupport.  Returns the field if found\r\n     *\r\n     * @param declaringClass\r\n     * @return\r\n     */\r\n    protected boolean needsVetoableChangeSupport(ClassNode declaringClass) {\r\n        while (declaringClass != null) {\r\n            for (FieldNode field : (Collection<FieldNode>) declaringClass.getFields()) {\r\n                if (field.getType() == null) {\r\n                    continue;\r\n                }\r\n                if (vcsClassNode.equals(field.getType())) {\r\n                    vcsField = field;\r\n                    return false;\r\n                }\r\n            }\r\n            //TODO check add/remove conflicts\r\n            declaringClass = declaringClass.getSuperClass();\r\n        }\r\n        return true;\r\n    }","commit_id":"de56b0d270fb0131eb1af9d7e638f7855d1db7a3","url":"https://github.com/apache/groovy"},{"original_method":"public void addPhaseOperations(CompilationUnit unit) {\r\n        Map<Integer, ASTTransformationCodeVisitor> transformationVisitors = new HashMap<Integer, ASTTransformationCodeVisitor>();\r\n        ASTTransformationCollectorCodeVisitor annotCollector = new ASTTransformationCollectorCodeVisitor(transformationVisitors);\r\n        unit.addPhaseOperation(annotCollector.getOperation(), Phases.SEMANTIC_ANALYSIS);\r\n        for (int i = Phases.SEMANTIC_ANALYSIS; i <= Phases.ALL; i++) {\r\n            ASTTransformationCodeVisitor TransformationVisitor = new ASTTransformationCodeVisitor();\r\n            transformationVisitors.put(Integer.valueOf(i), TransformationVisitor);\r\n            unit.addPhaseOperation(TransformationVisitor.getOperation(), i);\r\n        }\r\n    }","id":46825,"modified_method":"public void addPhaseOperations(CompilationUnit unit) {\r\n        Map<Integer, ASTTransformationCodeVisitor> transformationVisitors = new HashMap<Integer, ASTTransformationCodeVisitor>();\r\n        ASTTransformationCollectorCodeVisitor annotCollector = new ASTTransformationCollectorCodeVisitor(transformationVisitors, unit);\r\n        unit.addPhaseOperation(annotCollector.getOperation(), Phases.SEMANTIC_ANALYSIS);\r\n        for (int i = Phases.SEMANTIC_ANALYSIS; i <= Phases.ALL; i++) {\r\n            ASTTransformationCodeVisitor TransformationVisitor = new ASTTransformationCodeVisitor();\r\n            transformationVisitors.put(Integer.valueOf(i), TransformationVisitor);\r\n            unit.addPhaseOperation(TransformationVisitor.getOperation(), i);\r\n        }\r\n    }","commit_id":"de56b0d270fb0131eb1af9d7e638f7855d1db7a3","url":"https://github.com/apache/groovy"},{"original_method":"public static String getDoneFileName(JobIndexInfo indexInfo,\n      int jobNameLimit) throws IOException {\n    StringBuilder sb = new StringBuilder();\n    //JobId\n    sb.append(escapeDelimiters(TypeConverter.fromYarn(indexInfo.getJobId()).toString()));\n    sb.append(DELIMITER);\n    \n    //SubmitTime\n    sb.append(indexInfo.getSubmitTime());\n    sb.append(DELIMITER);\n    \n    //UserName\n    sb.append(escapeDelimiters(getUserName(indexInfo)));\n    sb.append(DELIMITER);\n    \n    //JobName\n    sb.append(escapeDelimiters(trimJobName(\n        getJobName(indexInfo), jobNameLimit)));\n    sb.append(DELIMITER);\n    \n    //FinishTime\n    sb.append(indexInfo.getFinishTime());\n    sb.append(DELIMITER);\n    \n    //NumMaps\n    sb.append(indexInfo.getNumMaps());\n    sb.append(DELIMITER);\n    \n    //NumReduces\n    sb.append(indexInfo.getNumReduces());\n    sb.append(DELIMITER);\n    \n    //JobStatus\n    sb.append(indexInfo.getJobStatus());\n    sb.append(DELIMITER);\n    \n    //QueueName\n    sb.append(escapeDelimiters(getQueueName(indexInfo)));\n    sb.append(DELIMITER);\n\n    //JobStartTime\n    sb.append(indexInfo.getJobStartTime());\n\n    sb.append(JobHistoryUtils.JOB_HISTORY_FILE_EXTENSION);\n    return encodeJobHistoryFileName(sb.toString());\n  }","id":46826,"modified_method":"public static String getDoneFileName(JobIndexInfo indexInfo,\n      int jobNameLimit) throws IOException {\n    StringBuilder sb = new StringBuilder();\n    //JobId\n    sb.append(encodeJobHistoryFileName(escapeDelimiters(\n        TypeConverter.fromYarn(indexInfo.getJobId()).toString())));\n    sb.append(DELIMITER);\n\n    //SubmitTime\n    sb.append(encodeJobHistoryFileName(String.valueOf(\n        indexInfo.getSubmitTime())));\n    sb.append(DELIMITER);\n\n    //UserName\n    sb.append(encodeJobHistoryFileName(escapeDelimiters(\n        getUserName(indexInfo))));\n    sb.append(DELIMITER);\n\n    //JobName\n    sb.append(trimURLEncodedString(encodeJobHistoryFileName(escapeDelimiters(\n        getJobName(indexInfo))), jobNameLimit));\n    sb.append(DELIMITER);\n\n    //FinishTime\n    sb.append(encodeJobHistoryFileName(\n        String.valueOf(indexInfo.getFinishTime())));\n    sb.append(DELIMITER);\n\n    //NumMaps\n    sb.append(encodeJobHistoryFileName(\n        String.valueOf(indexInfo.getNumMaps())));\n    sb.append(DELIMITER);\n\n    //NumReduces\n    sb.append(encodeJobHistoryFileName(\n        String.valueOf(indexInfo.getNumReduces())));\n    sb.append(DELIMITER);\n\n    //JobStatus\n    sb.append(encodeJobHistoryFileName(indexInfo.getJobStatus()));\n    sb.append(DELIMITER);\n\n    //QueueName\n    sb.append(escapeDelimiters(encodeJobHistoryFileName(\n        getQueueName(indexInfo))));\n    sb.append(DELIMITER);\n\n    //JobStartTime\n    sb.append(encodeJobHistoryFileName(\n        String.valueOf(indexInfo.getJobStartTime())));\n\n    sb.append(encodeJobHistoryFileName(\n        JobHistoryUtils.JOB_HISTORY_FILE_EXTENSION));\n    return sb.toString();\n  }","commit_id":"df99ea8a92d600e669606d41d3887bd004e7a3cc","url":"https://github.com/apache/hadoop"},{"original_method":"@Override\n  public void disposeComponent() {\n    myHighlighter.removeChecker(myTypesChecker);\n    myHighlighter.removeChecker(myAutoResolver);\n    myTypesChecker.dispose();\n  }","id":46827,"modified_method":"@Override\n  public void disposeComponent() {\n    while (!myCheckers.isEmpty()) {\n      BaseEditorChecker checker = myCheckers.pop();\n      myHighlighter.removeChecker(checker);\n      checker.dispose();\n    }\n  }","commit_id":"b760bdceb966703497b3f2304cfa51be986e1814","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public void initComponent() {\n    myHighlighter.addChecker(myTypesChecker = new TypesEditorChecker());\n    myHighlighter.addChecker(myAutoResolver = new AutoResolver());\n  }","id":46828,"modified_method":"@Override\n  public void initComponent() {\n    // TODO: create editor-specific \"core\" component in editor-runtime module and register all common checkers from there\n    addChecker(new TypesEditorChecker());\n    addChecker(new AutoResolver());\n    addChecker(new LanguageEditorChecker());\n    addChecker(new SuppressErrorsChecker());\n  }","commit_id":"b760bdceb966703497b3f2304cfa51be986e1814","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doDispose(MPSProject project) {\n    if (BaseLanguageCustomPlugin_CustomProjectPlugin.this.myHighlighter != null) {\n      BaseLanguageCustomPlugin_CustomProjectPlugin.this.myHighlighter.removeChecker(BaseLanguageCustomPlugin_CustomProjectPlugin.this.myMethodDeclFixer);\n      BaseLanguageCustomPlugin_CustomProjectPlugin.this.myHighlighter.removeChecker(BaseLanguageCustomPlugin_CustomProjectPlugin.this.myToDoHighlighter);\n\n      BaseLanguageCustomPlugin_CustomProjectPlugin.this.myMethodDeclFixer.dispose();\n      BaseLanguageCustomPlugin_CustomProjectPlugin.this.myToDoHighlighter.dispose();\n    }\n  }","id":46829,"modified_method":"public void doDispose(MPSProject project) {\n    if (BaseLanguageCustomPlugin_CustomProjectPlugin.this.myHighlighter != null) {\n      BaseLanguageCustomPlugin_CustomProjectPlugin.this.myHighlighter.removeChecker(BaseLanguageCustomPlugin_CustomProjectPlugin.this.myMethodDeclFixer);\n\n      BaseLanguageCustomPlugin_CustomProjectPlugin.this.myMethodDeclFixer.dispose();\n    }\n  }","commit_id":"1c4f7194bfb56f2d3d657f3c0108ca5515b1ddcb","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doInit(MPSProject project) {\n    BaseLanguageCustomPlugin_CustomProjectPlugin.this.myHighlighter = project.getProject().getComponent(Highlighter.class);\n    if (BaseLanguageCustomPlugin_CustomProjectPlugin.this.myHighlighter != null) {\n      BaseLanguageCustomPlugin_CustomProjectPlugin.this.myHighlighter.addChecker(BaseLanguageCustomPlugin_CustomProjectPlugin.this.myToDoHighlighter);\n      BaseLanguageCustomPlugin_CustomProjectPlugin.this.myHighlighter.addChecker(BaseLanguageCustomPlugin_CustomProjectPlugin.this.myMethodDeclFixer);\n      BaseLanguageCustomPlugin_CustomProjectPlugin.this.myMethodDeclFixer.init();\n    }\n  }","id":46830,"modified_method":"public void doInit(MPSProject project) {\n    BaseLanguageCustomPlugin_CustomProjectPlugin.this.myHighlighter = project.getProject().getComponent(Highlighter.class);\n    if (BaseLanguageCustomPlugin_CustomProjectPlugin.this.myHighlighter != null) {\n      BaseLanguageCustomPlugin_CustomProjectPlugin.this.myHighlighter.addChecker(BaseLanguageCustomPlugin_CustomProjectPlugin.this.myMethodDeclFixer);\n      BaseLanguageCustomPlugin_CustomProjectPlugin.this.myMethodDeclFixer.init();\n    }\n  }","commit_id":"1c4f7194bfb56f2d3d657f3c0108ca5515b1ddcb","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    // actions w/o parameters \n    addAction(new AddLanguageImport_Action());\n    addAction(new AddMissingImportsInProject_Action());\n    addAction(new AddMissingImports_Action());\n    addAction(new AddModelImportByRoot_Action());\n    addAction(new AddModelImport_Action());\n    addAction(new AddModuleToProject_Action());\n    addAction(new AddToNewFavoritesList_Action());\n    addAction(new AnalyzeClasspath_Action());\n    addAction(new AnalyzeDependencies_Action());\n    addAction(new AnalyzeModuleDependencies_Action());\n    addAction(new AnalyzeStacktrace_Action());\n    addAction(new CloneModel_Action());\n    addAction(new CloneRoot_Action());\n    addAction(new CopyModelName_Action());\n    addAction(new CopyModuleName_Action());\n    addAction(new CopyNodeName_Action());\n    addAction(new CopyNodeReference_Action());\n    addAction(new CopyNode_Action());\n    addAction(new CreateAspect_Action());\n    addAction(new CutNode_Action());\n    addAction(new DeleteFavoritesList_Action());\n    addAction(new DeleteModels_Action());\n    addAction(new DeleteModules_Action());\n    addAction(new DeleteNode_Action());\n    addAction(new DeletePropertyAction_Action());\n    addAction(new DeleteReferenceAction_Action());\n    addAction(new EditNode_Action());\n    addAction(new ExpandNode_Action());\n    addAction(new FastFindNodeUsages_Action());\n    addAction(new FindModelUsages_Action());\n    addAction(new FindNext_Action());\n    addAction(new FindPrevious_Action());\n    addAction(new FindSpecificNodeUsages_Action());\n    addAction(new Find_Action());\n    addAction(new GoByCurrentReferenceToIDEA_Action());\n    addAction(new GoToNode_Action());\n    addAction(new GoToRule_Action());\n    addAction(new HighlightInstances_Action());\n    addAction(new HighlightUsages_Action());\n    addAction(new MPSProjectPaths_Action());\n    addAction(new ModelProperties_Action());\n    addAction(new ModuleProperties_Action());\n    addAction(new MoveFileOrDirectory_Action());\n    addAction(new NewDirectory_Action());\n    addAction(new NewFile_Action());\n    addAction(new NewModel_Action());\n    addAction(new NewRuntimeModule_Action());\n    addAction(new NewSolution_Action());\n    addAction(new NewSubModel_Action());\n    addAction(new NewSubTestModel_Action());\n    addAction(new OptimizeModelImports_Action());\n    addAction(new OptimizeModuleImports_Action());\n    addAction(new OptimizeProjectImports_Action());\n    addAction(new PasteNode_Action());\n    addAction(new PrintNodePosition_Action());\n    addAction(new QuickCreate_Action());\n    addAction(new RemoveAllBookmarks_Action());\n    addAction(new RemoveFromFavorites_Action());\n    addAction(new RemoveModuleFromProject_Action());\n    addAction(new RemoveTransientModels_Action());\n    addAction(new RenameFavoritesList_Action());\n    addAction(new RenameFileOrDirectory_Action());\n    addAction(new RenameModel_Action());\n    addAction(new RenameNamespace_Action());\n    addAction(new RenamePackage_Action());\n    addAction(new RenameSolution_Action());\n    addAction(new RevertMemoryChanges_Action());\n    addAction(new SafeDeleteModuleDependency_Action());\n    addAction(new SetBookmarkNoNumber_Action());\n    addAction(new SetModuleFolder_Action());\n    addAction(new SetNodePackage_Action());\n    addAction(new ShowBookmarksDialog_Action());\n    addAction(new ShowBookmarks_Action());\n    addAction(new ShowClassInHierarchy_Action());\n    addAction(new ShowConceptInHierarchy_Action());\n    addAction(new ShowErrorMessage_Action());\n    addAction(new ShowImplementations_Action());\n    addAction(new ShowInDependenciesViewer_Action());\n    addAction(new ShowInLogicalView_Action());\n    addAction(new ShowModuleDependencyLoop_Action());\n    addAction(new ShowNodeInInspector_Action());\n    addAction(new ShowNodeInfo_Action());\n    addAction(new ShowParameters_Action());\n    addAction(new SubmitToTracker_Action());\n    // groups \n    addGroup(new AbstractFileActions_ActionGroup());\n    addGroup(new AddToFavoritesGroup_ActionGroup());\n    addGroup(new AnalyzeModule_ActionGroup());\n    addGroup(new Analyze_ActionGroup());\n    addGroup(new Bookmarks_ActionGroup());\n    addGroup(new Build_ActionGroup());\n    addGroup(new CommonModuleActions_ActionGroup());\n    addGroup(new CreateRootNode_ActionGroup());\n    addGroup(new DebugActions_ActionGroup());\n    addGroup(new DevkitActions_ActionGroup());\n    addGroup(new Edit_ActionGroup());\n    addGroup(new EditorInternal_ActionGroup());\n    addGroup(new EditorPopupEx_ActionGroup());\n    addGroup(new EditorPopupEx_Goto_ActionGroup());\n    addGroup(new EditorPopup_Show_ActionGroup());\n    addGroup(new EditorTabActions_ActionGroup());\n    addGroup(new FavoritesPopupWrapper_ActionGroup());\n    addGroup(new FavoritesPopup_ActionGroup());\n    addGroup(new Favorites_ActionGroup());\n    addGroup(new FileActions_ActionGroup());\n    addGroup(new FileSystemNewActions_ActionGroup());\n    addGroup(new FindModelUsages_ActionGroup());\n    addGroup(new FindUsages_ActionGroup());\n    addGroup(new FolderActions_ActionGroup());\n    addGroup(new GeneratorActions_ActionGroup());\n    addGroup(new GeneratorNewActions_ActionGroup());\n    addGroup(new GoByReference_ActionGroup());\n    addGroup(new Goto_ActionGroup());\n    addGroup(new JUnitTestCaseActions_ActionGroup());\n    addGroup(new JUnitTestMethodActions_ActionGroup());\n    addGroup(new LanguageActions_ActionGroup());\n    addGroup(new LanguageNewActions_ActionGroup());\n    addGroup(new LibraryActions_ActionGroup());\n    addGroup(new MessagesViewActions_ActionGroup());\n    addGroup(new ModelActionsInternal_ActionGroup());\n    addGroup(new ModelActions_ActionGroup());\n    addGroup(new ModelNewActions_ActionGroup());\n    addGroup(new ModelRefactoring_ActionGroup());\n    addGroup(new ModuleActions_ActionGroup());\n    addGroup(new NamespaceActions_ActionGroup());\n    addGroup(new NamespaceInternalActions_ActionGroup());\n    addGroup(new NamespaceMakeActions_ActionGroup());\n    addGroup(new NamespaceNewActions_ActionGroup());\n    addGroup(new NodeActionsInternal_ActionGroup());\n    addGroup(new NodeActions_ActionGroup());\n    addGroup(new PackageActions_ActionGroup());\n    addGroup(new PackageNewActions_ActionGroup());\n    addGroup(new PrintNodePosition_Addition_ActionGroup());\n    addGroup(new ProjectActions_ActionGroup());\n    addGroup(new ProjectNewActions_ActionGroup());\n    addGroup(new PropertyNodeActions_ActionGroup());\n    addGroup(new ReferenceNodeActions_ActionGroup());\n    addGroup(new RuntimeFolderActions_ActionGroup());\n    addGroup(new Search_ActionGroup());\n    addGroup(new SolutionActions_ActionGroup());\n    addGroup(new SolutionNewActions_ActionGroup());\n    addGroup(new SolutionRefactoring_ActionGroup());\n    addGroup(new ToolsInternal_ActionGroup());\n    addGroup(new Tools_ActionGroup());\n    addGroup(new TransientModulesActions_ActionGroup());\n    addGroup(new View_ActionGroup());\n  }","id":46831,"modified_method":"public void createGroups() {\n    // actions w/o parameters \n    addAction(new AddLanguageImport_Action());\n    addAction(new AddMissingImportsInProject_Action());\n    addAction(new AddMissingImports_Action());\n    addAction(new AddModelImportByRoot_Action());\n    addAction(new AddModelImport_Action());\n    addAction(new AddModuleToProject_Action());\n    addAction(new AddToNewFavoritesList_Action());\n    addAction(new AnalyzeClasspath_Action());\n    addAction(new AnalyzeDependencies_Action());\n    addAction(new AnalyzeModuleDependencies_Action());\n    addAction(new AnalyzeStacktrace_Action());\n    addAction(new CloneModel_Action());\n    addAction(new CloneRoot_Action());\n    addAction(new CopyModelName_Action());\n    addAction(new CopyModuleName_Action());\n    addAction(new CopyNodeName_Action());\n    addAction(new CopyNodeReference_Action());\n    addAction(new CopyNode_Action());\n    addAction(new CreateAspect_Action());\n    addAction(new CutNode_Action());\n    addAction(new DeleteFavoritesList_Action());\n    addAction(new DeleteModels_Action());\n    addAction(new DeleteModules_Action());\n    addAction(new DeleteNode_Action());\n    addAction(new DeletePropertyAction_Action());\n    addAction(new DeleteReferenceAction_Action());\n    addAction(new EditNode_Action());\n    addAction(new ExpandNode_Action());\n    addAction(new FastFindNodeUsages_Action());\n    addAction(new FindModelUsages_Action());\n    addAction(new FindNext_Action());\n    addAction(new FindPrevious_Action());\n    addAction(new FindSpecificNodeUsages_Action());\n    addAction(new Find_Action());\n    addAction(new GoByCurrentReferenceToIDEA_Action());\n    addAction(new GoToNode_Action());\n    addAction(new GoToRule_Action());\n    addAction(new HighlightInstances_Action());\n    addAction(new HighlightUsages_Action());\n    addAction(new MPSProjectPaths_Action());\n    addAction(new ModelProperties_Action());\n    addAction(new ModuleProperties_Action());\n    addAction(new MoveFileOrDirectory_Action());\n    addAction(new NewDirectory_Action());\n    addAction(new NewFile_Action());\n    addAction(new NewModel_Action());\n    addAction(new NewRuntimeModule_Action());\n    addAction(new NewSolution_Action());\n    addAction(new NewSubModel_Action());\n    addAction(new NewSubTestModel_Action());\n    addAction(new OptimizeModelImports_Action());\n    addAction(new OptimizeModuleImports_Action());\n    addAction(new OptimizeProjectImports_Action());\n    addAction(new PasteNode_Action());\n    addAction(new PrintNodePosition_Action());\n    addAction(new QuickCreate_Action());\n    addAction(new RemoveAllBookmarks_Action());\n    addAction(new RemoveFromFavorites_Action());\n    addAction(new RemoveModuleFromProject_Action());\n    addAction(new RemoveTransientModels_Action());\n    addAction(new RenameFavoritesList_Action());\n    addAction(new RenameFileOrDirectory_Action());\n    addAction(new RenameModel_Action());\n    addAction(new RenameNamespace_Action());\n    addAction(new RenamePackage_Action());\n    addAction(new RenameSolution_Action());\n    addAction(new RevertMemoryChanges_Action());\n    addAction(new SafeDeleteModuleDependency_Action());\n    addAction(new SetBookmarkNoNumber_Action());\n    addAction(new SetModuleFolder_Action());\n    addAction(new SetNodePackage_Action());\n    addAction(new ShowBookmarksDialog_Action());\n    addAction(new ShowBookmarks_Action());\n    addAction(new ShowClassInHierarchy_Action());\n    addAction(new ShowConceptInHierarchy_Action());\n    addAction(new ShowErrorMessage_Action());\n    addAction(new ShowImplementations_Action());\n    addAction(new ShowInDependenciesViewer_Action());\n    addAction(new ShowInLogicalView_Action());\n    addAction(new ShowModuleDependencyLoop_Action());\n    addAction(new ShowNodeInInspector_Action());\n    addAction(new ShowNodeInfo_Action());\n    addAction(new ShowParameters_Action());\n    addAction(new ShowTodoViewer_Action());\n    addAction(new SubmitToTracker_Action());\n    // groups \n    addGroup(new AbstractFileActions_ActionGroup());\n    addGroup(new AddToFavoritesGroup_ActionGroup());\n    addGroup(new AnalyzeModule_ActionGroup());\n    addGroup(new Analyze_ActionGroup());\n    addGroup(new Bookmarks_ActionGroup());\n    addGroup(new Build_ActionGroup());\n    addGroup(new CommonModuleActions_ActionGroup());\n    addGroup(new CreateRootNode_ActionGroup());\n    addGroup(new DebugActions_ActionGroup());\n    addGroup(new DevkitActions_ActionGroup());\n    addGroup(new Edit_ActionGroup());\n    addGroup(new EditorInternal_ActionGroup());\n    addGroup(new EditorPopupEx_ActionGroup());\n    addGroup(new EditorPopupEx_Goto_ActionGroup());\n    addGroup(new EditorPopup_Show_ActionGroup());\n    addGroup(new EditorTabActions_ActionGroup());\n    addGroup(new FavoritesPopupWrapper_ActionGroup());\n    addGroup(new FavoritesPopup_ActionGroup());\n    addGroup(new Favorites_ActionGroup());\n    addGroup(new FileActions_ActionGroup());\n    addGroup(new FileSystemNewActions_ActionGroup());\n    addGroup(new FindModelUsages_ActionGroup());\n    addGroup(new FindUsages_ActionGroup());\n    addGroup(new FolderActions_ActionGroup());\n    addGroup(new GeneratorActions_ActionGroup());\n    addGroup(new GeneratorNewActions_ActionGroup());\n    addGroup(new GoByReference_ActionGroup());\n    addGroup(new Goto_ActionGroup());\n    addGroup(new JUnitTestCaseActions_ActionGroup());\n    addGroup(new JUnitTestMethodActions_ActionGroup());\n    addGroup(new LanguageActions_ActionGroup());\n    addGroup(new LanguageNewActions_ActionGroup());\n    addGroup(new LibraryActions_ActionGroup());\n    addGroup(new MessagesViewActions_ActionGroup());\n    addGroup(new ModelActionsInternal_ActionGroup());\n    addGroup(new ModelActions_ActionGroup());\n    addGroup(new ModelNewActions_ActionGroup());\n    addGroup(new ModelRefactoring_ActionGroup());\n    addGroup(new ModuleActions_ActionGroup());\n    addGroup(new NamespaceActions_ActionGroup());\n    addGroup(new NamespaceInternalActions_ActionGroup());\n    addGroup(new NamespaceMakeActions_ActionGroup());\n    addGroup(new NamespaceNewActions_ActionGroup());\n    addGroup(new NodeActionsInternal_ActionGroup());\n    addGroup(new NodeActions_ActionGroup());\n    addGroup(new PackageActions_ActionGroup());\n    addGroup(new PackageNewActions_ActionGroup());\n    addGroup(new PrintNodePosition_Addition_ActionGroup());\n    addGroup(new ProjectActions_ActionGroup());\n    addGroup(new ProjectNewActions_ActionGroup());\n    addGroup(new PropertyNodeActions_ActionGroup());\n    addGroup(new ReferenceNodeActions_ActionGroup());\n    addGroup(new RuntimeFolderActions_ActionGroup());\n    addGroup(new Search_ActionGroup());\n    addGroup(new SolutionActions_ActionGroup());\n    addGroup(new SolutionNewActions_ActionGroup());\n    addGroup(new SolutionRefactoring_ActionGroup());\n    addGroup(new ToolsInternal_ActionGroup());\n    addGroup(new Tools_ActionGroup());\n    addGroup(new TransientModulesActions_ActionGroup());\n    addGroup(new View_ActionGroup());\n  }","commit_id":"1c4f7194bfb56f2d3d657f3c0108ca5515b1ddcb","url":"https://github.com/JetBrains/MPS"},{"original_method":"public List<BaseGeneratedTool> initAllTools(Project project) {\n    List<BaseGeneratedTool> tools = ListSequence.fromList(new ArrayList<BaseGeneratedTool>());\n    ListSequence.fromList(tools).addElement(new AnalyzeDependencies_Tool(project));\n    ListSequence.fromList(tools).addElement(new ModuleDependenies_Tool(project));\n    return tools;\n  }","id":46832,"modified_method":"public List<BaseGeneratedTool> initAllTools(Project project) {\n    List<BaseGeneratedTool> tools = ListSequence.fromList(new ArrayList<BaseGeneratedTool>());\n    ListSequence.fromList(tools).addElement(new AnalyzeDependencies_Tool(project));\n    ListSequence.fromList(tools).addElement(new ModuleDependenies_Tool(project));\n    ListSequence.fromList(tools).addElement(new TodoViewer_Tool(project));\n    return tools;\n  }","commit_id":"1c4f7194bfb56f2d3d657f3c0108ca5515b1ddcb","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void initComponent() {\n    Highlighter highlighter = getHighlighter();\n    highlighter.addChecker(myOverrideMethodsChecker = new OverrideMethodsChecker());\n  }","id":46833,"modified_method":"public void initComponent() {\n    Highlighter highlighter = getHighlighter();\n    addChecker(new OverrideMethodsChecker(), highlighter);\n    addChecker(new ToDoHighlighter(), highlighter);\n  }","commit_id":"1c4f7194bfb56f2d3d657f3c0108ca5515b1ddcb","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void disposeComponent() {\n    Highlighter highlighter = getHighlighter();\n    highlighter.removeChecker(myOverrideMethodsChecker);\n    myOverrideMethodsChecker.dispose();\n    myOverrideMethodsChecker = null;\n    myProject = null;\n  }","id":46834,"modified_method":"public void disposeComponent() {\n    Highlighter highlighter = getHighlighter();\n    while (DequeSequence.fromDeque(myCheckers).isNotEmpty()) {\n      BaseEditorChecker checker = DequeSequence.fromDeque(myCheckers).popElement();\n      highlighter.removeChecker(checker);\n      checker.dispose();\n    }\n\n    myProject = null;\n  }","commit_id":"1c4f7194bfb56f2d3d657f3c0108ca5515b1ddcb","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void createGroups() {\n    // actions w/o parameters \n    addAction(new CommentLine_Action());\n    addAction(new CommentStatements_Action());\n    addAction(new ExtractMethod_Action());\n    addAction(new InlineLocalVariable_Action());\n    addAction(new InlineMethod_Action());\n    addAction(new IntroduceConstant_Action());\n    addAction(new IntroduceField_Action());\n    addAction(new IntroduceVariable_Action());\n    addAction(new RenameVariable_Action());\n    addAction(new ShowMembers_Action());\n    addAction(new ShowNullDFA_Action());\n    addAction(new ShowTodoViewer_Action());\n    addAction(new UncommentStatements_Action());\n    // groups \n    addGroup(new AnalyzersActions_ActionGroup());\n    addGroup(new BaseLangaugeCodeCommentsMenuGroup_ActionGroup());\n    addGroup(new BaseLanguageEditorPopup_ActionGroup());\n    addGroup(new BaseLanguageModelActionsInternal_ActionGroup());\n    addGroup(new BaseLanguageNodeActionsInternal_ActionGroup());\n    addGroup(new BaseLanguageToolsAddition_ActionGroup());\n    addGroup(new RefactoringAddition_ActionGroup());\n  }","id":46835,"modified_method":"public void createGroups() {\n    // actions w/o parameters \n    addAction(new CommentLine_Action());\n    addAction(new CommentStatements_Action());\n    addAction(new ExtractMethod_Action());\n    addAction(new InlineLocalVariable_Action());\n    addAction(new InlineMethod_Action());\n    addAction(new IntroduceConstant_Action());\n    addAction(new IntroduceField_Action());\n    addAction(new IntroduceVariable_Action());\n    addAction(new RenameVariable_Action());\n    addAction(new ShowMembers_Action());\n    addAction(new ShowNullDFA_Action());\n    addAction(new UncommentStatements_Action());\n    // groups \n    addGroup(new AnalyzersActions_ActionGroup());\n    addGroup(new BaseLangaugeCodeCommentsMenuGroup_ActionGroup());\n    addGroup(new BaseLanguageEditorPopup_ActionGroup());\n    addGroup(new BaseLanguageModelActionsInternal_ActionGroup());\n    addGroup(new BaseLanguageNodeActionsInternal_ActionGroup());\n    addGroup(new RefactoringAddition_ActionGroup());\n  }","commit_id":"1c4f7194bfb56f2d3d657f3c0108ca5515b1ddcb","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(BaseLanguageModelActionsInternal_ActionGroup.ID, ModelActionsInternal_ActionGroup.ID, null);\n    insertGroupIntoAnother(RefactoringAddition_ActionGroup.ID, \"jetbrains.mps.ide.platform.actions.NodeRefactoring_ActionGroup\", null);\n    insertGroupIntoAnother(BaseLanguageEditorPopup_ActionGroup.ID, \"jetbrains.mps.ide.editor.actions.EditorPopup_ActionGroup\", null);\n    insertGroupIntoAnother(BaseLanguageNodeActionsInternal_ActionGroup.ID, NodeActionsInternal_ActionGroup.ID, null);\n    insertGroupIntoAnother(BaseLanguageToolsAddition_ActionGroup.ID, Tools_ActionGroup.ID, Tools_ActionGroup.LABEL_ID_customTools);\n    insertGroupIntoAnother(AnalyzersActions_ActionGroup.ID, DFAActions_ActionGroup.ID, null);\n    insertGroupIntoAnother(BaseLangaugeCodeCommentsMenuGroup_ActionGroup.ID, \"Code_ActionGroupcomments\", null);\n  }","id":46836,"modified_method":"public void adjustRegularGroups() {\n    insertGroupIntoAnother(BaseLanguageModelActionsInternal_ActionGroup.ID, ModelActionsInternal_ActionGroup.ID, null);\n    insertGroupIntoAnother(RefactoringAddition_ActionGroup.ID, \"jetbrains.mps.ide.platform.actions.NodeRefactoring_ActionGroup\", null);\n    insertGroupIntoAnother(BaseLanguageEditorPopup_ActionGroup.ID, \"jetbrains.mps.ide.editor.actions.EditorPopup_ActionGroup\", null);\n    insertGroupIntoAnother(BaseLanguageNodeActionsInternal_ActionGroup.ID, NodeActionsInternal_ActionGroup.ID, null);\n    insertGroupIntoAnother(AnalyzersActions_ActionGroup.ID, DFAActions_ActionGroup.ID, null);\n    insertGroupIntoAnother(BaseLangaugeCodeCommentsMenuGroup_ActionGroup.ID, \"Code_ActionGroupcomments\", null);\n  }","commit_id":"1c4f7194bfb56f2d3d657f3c0108ca5515b1ddcb","url":"https://github.com/JetBrains/MPS"},{"original_method":"public Tools_ActionGroup() {\n    super(\"Tools\", ID);\n    this.setIsInternal(false);\n    this.setPopup(false);\n    try {\n      Tools_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(Tools_ActionGroup.LABEL_ID_migration);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        Tools_ActionGroup.this.addAction(action);\n      }\n      Tools_ActionGroup.this.addSeparator();\n      Tools_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ShowBookmarks_Action\");\n      {\n        LabelledAnchor action = new LabelledAnchor(Tools_ActionGroup.LABEL_ID_customTools);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        Tools_ActionGroup.this.addAction(action);\n      }\n      Tools_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(Tools_ActionGroup.LABEL_ID_devkitTools);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        Tools_ActionGroup.this.addAction(action);\n      }\n      Tools_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(Tools_ActionGroup.LABEL_ID_internal);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        Tools_ActionGroup.this.addAction(action);\n      }\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n  }","id":46837,"modified_method":"public Tools_ActionGroup() {\n    super(\"Tools\", ID);\n    this.setIsInternal(false);\n    this.setPopup(false);\n    try {\n      Tools_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(Tools_ActionGroup.LABEL_ID_migration);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        Tools_ActionGroup.this.addAction(action);\n      }\n      Tools_ActionGroup.this.addSeparator();\n      Tools_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ShowBookmarks_Action\");\n      Tools_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.ShowTodoViewer_Action\");\n      {\n        LabelledAnchor action = new LabelledAnchor(Tools_ActionGroup.LABEL_ID_customTools);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        Tools_ActionGroup.this.addAction(action);\n      }\n      Tools_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(Tools_ActionGroup.LABEL_ID_devkitTools);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        Tools_ActionGroup.this.addAction(action);\n      }\n      Tools_ActionGroup.this.addSeparator();\n      {\n        LabelledAnchor action = new LabelledAnchor(Tools_ActionGroup.LABEL_ID_internal);\n        ActionManagerEx manager = ActionManagerEx.getInstanceEx();\n        manager.registerAction(action.getId(), action, PluginId.getId(\"jetbrains.mps.ide\"));\n        Tools_ActionGroup.this.addAction(action);\n      }\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n  }","commit_id":"1c4f7194bfb56f2d3d657f3c0108ca5515b1ddcb","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doDispose(MPSProject project) {\n    project.getComponent(Highlighter.class).removeChecker(LightweightDSLUneditableMemberGutter_CustomProjectPlugin.this.checker);\n  }","id":46838,"modified_method":"public void doDispose(MPSProject project) {\n    LightweightDSLUneditableMemberGutter_CustomProjectPlugin.this.myHighlighter.removeChecker(LightweightDSLUneditableMemberGutter_CustomProjectPlugin.this.myChecker);\n\n    // the following code is a qfix for MPS-23439. This code must be removed as soon as MPS-23451 is fixed \n    for (Editor editor : ListSequence.fromList(EditorsHelper.toMPSEditors(EditorsHelper.getAllEditors(LightweightDSLUneditableMemberGutter_CustomProjectPlugin.this.myEditorManager)))) {\n      EditorComponent ec = editor.getCurrentEditorComponent();\n      if (!((ec instanceof jetbrains.mps.nodeEditor.EditorComponent))) {\n        continue;\n      }\n      ((jetbrains.mps.nodeEditor.EditorComponent) ec).getHighlightManager().clearForOwner(LightweightDSLUneditableMemberGutter_CustomProjectPlugin.this.myChecker, false);\n    }\n  }","commit_id":"4bde438e3facbd43855b79579e5b97908035ab05","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doInit(MPSProject project) {\n    LightweightDSLUneditableMemberGutter_CustomProjectPlugin.this.checker = new DSLComponentChecker();\n    project.getComponent(Highlighter.class).addChecker(LightweightDSLUneditableMemberGutter_CustomProjectPlugin.this.checker);\n  }","id":46839,"modified_method":"public void doInit(MPSProject project) {\n    LightweightDSLUneditableMemberGutter_CustomProjectPlugin.this.myChecker = new DSLComponentChecker();\n    LightweightDSLUneditableMemberGutter_CustomProjectPlugin.this.myHighlighter = project.getComponent(Highlighter.class);\n\n    LightweightDSLUneditableMemberGutter_CustomProjectPlugin.this.myHighlighter.addChecker(LightweightDSLUneditableMemberGutter_CustomProjectPlugin.this.myChecker);\n    LightweightDSLUneditableMemberGutter_CustomProjectPlugin.this.myEditorManager = project.getComponent(FileEditorManager.class);\n  }","commit_id":"4bde438e3facbd43855b79579e5b97908035ab05","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static void addGroovyKeywords(CompletionParameters parameters, CompletionResultSet result) {\n    PsiElement position = parameters.getPosition();\n    PsiElement parent = position.getParent();\n    if (!PlatformPatterns.psiElement().afterLeaf(\".\", \".&\").accepts(position)) {\n      if (suggestPackage(position)) {\n        result.addElement(keyword(PsiKeyword.PACKAGE, TailType.SPACE));\n      }\n      if (suggestImport(position)) {\n        result.addElement(keyword(PsiKeyword.IMPORT, TailType.SPACE));\n      }\n\n      addTypeDefinitionKeywords(result, position);\n      addExtendsImplements(position, result);\n      registerControlCompletion(position, result);\n\n      if (parent instanceof GrExpression && !(parent instanceof GrLiteral)) {\n        addKeywords(result, false, PsiKeyword.TRUE, PsiKeyword.FALSE, PsiKeyword.NULL, PsiKeyword.SUPER, PsiKeyword.NEW, PsiKeyword.THIS, \"as\");\n      }\n\n      if (isInfixOperatorPosition(position)) {\n        addKeywords(result, true, \"in\", PsiKeyword.INSTANCEOF);\n      } else if (suggestThrows(position)) {\n        addKeywords(result, true, PsiKeyword.THROWS);\n      } else if (suggestPrimitiveTypes(position)) {\n        addKeywords(result, true, BUILT_IN_TYPES);\n      }\n\n      if (psiElement(GrReferenceExpression.class).inside(or(psiElement(GrWhileStatement.class), psiElement(GrForStatement.class))).accepts(parent)) {\n        addKeywords(result, false, PsiKeyword.BREAK, PsiKeyword.CONTINUE);\n      }\n      else if (psiElement(GrReferenceExpression.class).inside(GrCaseSection.class).accepts(parent)) {\n        addKeywords(result, false, PsiKeyword.BREAK);\n      }\n\n      if (psiElement().withSuperParent(2, GrImportStatement.class).accepts(position)) {\n        if (psiElement().afterLeaf(PsiKeyword.IMPORT).accepts(position)) {\n          addKeywords(result, true, PsiKeyword.STATIC);\n        }\n      } else {\n        if (suggestModifiers(position)) {\n          addKeywords(result, true, MODIFIERS);\n        }\n        if (psiElement().afterLeaf(MODIFIERS).accepts(position) ||\n            GroovyCompletionUtil.isInTypeDefinitionBody(position) && GroovyCompletionUtil.isNewStatement(position, true)) {\n          addKeywords(result, true, PsiKeyword.SYNCHRONIZED);\n        }\n        if (suggestFinalDef(position)) {\n          addKeywords(result, true, PsiKeyword.FINAL, \"def\");\n        }\n      }\n    }\n  }","id":46840,"modified_method":"public static void addGroovyKeywords(CompletionParameters parameters, CompletionResultSet result) {\n    PsiElement position = parameters.getPosition();\n    PsiElement parent = position.getParent();\n    if (!PlatformPatterns.psiElement().afterLeaf(\".\", \".&\").accepts(position)) {\n      if (suggestPackage(position)) {\n        result.addElement(keyword(PsiKeyword.PACKAGE, TailType.SPACE));\n      }\n      if (suggestImport(position)) {\n        result.addElement(keyword(PsiKeyword.IMPORT, TailType.SPACE));\n      }\n\n      addTypeDefinitionKeywords(result, position);\n      addExtendsImplements(position, result);\n      registerControlCompletion(position, result);\n\n      if (parent instanceof GrExpression && !(parent instanceof GrLiteral)) {\n        addKeywords(result, false, PsiKeyword.TRUE, PsiKeyword.FALSE, PsiKeyword.NULL, PsiKeyword.SUPER, PsiKeyword.NEW, PsiKeyword.THIS, \"as\");\n      }\n\n      if (isInfixOperatorPosition(position)) {\n        addKeywords(result, true, \"in\", PsiKeyword.INSTANCEOF);\n      } else if (suggestThrows(position)) {\n        addKeywords(result, true, PsiKeyword.THROWS);\n      } else if (suggestPrimitiveTypes(position)) {\n        boolean inCast = psiElement()\n          .afterLeaf(psiElement().withText(\"(\").withParent(psiElement(GrParenthesizedExpression.class, GrTypeCastExpression.class)))\n          .accepts(position);\n\n        addKeywords(result, !inCast, BUILT_IN_TYPES);\n      }\n\n      if (psiElement(GrReferenceExpression.class).inside(or(psiElement(GrWhileStatement.class), psiElement(GrForStatement.class))).accepts(parent)) {\n        addKeywords(result, false, PsiKeyword.BREAK, PsiKeyword.CONTINUE);\n      }\n      else if (psiElement(GrReferenceExpression.class).inside(GrCaseSection.class).accepts(parent)) {\n        addKeywords(result, false, PsiKeyword.BREAK);\n      }\n\n      if (psiElement().withSuperParent(2, GrImportStatement.class).accepts(position)) {\n        if (psiElement().afterLeaf(PsiKeyword.IMPORT).accepts(position)) {\n          addKeywords(result, true, PsiKeyword.STATIC);\n        }\n      } else {\n        if (suggestModifiers(position)) {\n          addKeywords(result, true, MODIFIERS);\n        }\n        if (psiElement().afterLeaf(MODIFIERS).accepts(position) ||\n            GroovyCompletionUtil.isInTypeDefinitionBody(position) && GroovyCompletionUtil.isNewStatement(position, true)) {\n          addKeywords(result, true, PsiKeyword.SYNCHRONIZED);\n        }\n        if (suggestFinalDef(position)) {\n          addKeywords(result, true, PsiKeyword.FINAL, \"def\");\n        }\n      }\n    }\n  }","commit_id":"a9458eabd67cd41f52ab37d1a4768080803fad9f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void addPrimitiveTypes(CompletionResultSet result, PsiElement position) {\n    boolean declaration = DECLARATION_START.isAcceptable(position, position) ||\n                          psiElement().withParents(PsiJavaCodeReferenceElement.class, PsiTypeElement.class, PsiMember.class).accepts(position) ||\n                          psiElement().withParents(PsiJavaCodeReferenceElement.class, PsiTypeElement.class, PsiClassLevelDeclarationStatement.class).accepts(position);\n    if (START_FOR.accepts(position) ||\n        INSIDE_PARAMETER_LIST.accepts(position) && !AFTER_DOT.accepts(position) ||\n        VARIABLE_AFTER_FINAL.accepts(position) ||\n        declaration) {\n      for (String primitiveType : PRIMITIVE_TYPES) {\n        result.addElement(new OverrideableSpace(createKeyword(position, primitiveType)));\n      }\n    }\n    if (declaration) {\n      result.addElement(new OverrideableSpace(createKeyword(position, PsiKeyword.VOID)));\n    }\n  }","id":46841,"modified_method":"private static void addPrimitiveTypes(CompletionResultSet result, PsiElement position) {\n    new LeftNeighbour(new AndFilter(\n            new TextFilter(\"(\"),\n            new ParentElementFilter(new OrFilter(\n              new ClassFilter(PsiParenthesizedExpression.class),\n              new ClassFilter(PsiTypeCastExpression.class)))));\n\n    boolean inCast = psiElement()\n      .afterLeaf(psiElement().withText(\"(\").withParent(psiElement(PsiParenthesizedExpression.class, PsiTypeCastExpression.class)))\n      .accepts(position);\n\n    boolean declaration = DECLARATION_START.isAcceptable(position, position) ||\n                          psiElement().withParents(PsiJavaCodeReferenceElement.class, PsiTypeElement.class, PsiMember.class).accepts(position) ||\n                          psiElement().withParents(PsiJavaCodeReferenceElement.class, PsiTypeElement.class, PsiClassLevelDeclarationStatement.class).accepts(position);\n    if (START_FOR.accepts(position) ||\n        INSIDE_PARAMETER_LIST.accepts(position) && !AFTER_DOT.accepts(position) ||\n        VARIABLE_AFTER_FINAL.accepts(position) ||\n        inCast ||\n        declaration) {\n      for (String primitiveType : PRIMITIVE_TYPES) {\n        LookupElement keyword = createKeyword(position, primitiveType);\n        result.addElement(inCast ? keyword : new OverrideableSpace(keyword));\n      }\n    }\n    if (declaration) {\n      result.addElement(new OverrideableSpace(createKeyword(position, PsiKeyword.VOID)));\n    }\n  }","commit_id":"a9458eabd67cd41f52ab37d1a4768080803fad9f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void initVariantsInMethodScope() {\n// Completion for classes in method throws section\n// position\n    {\n      final ElementFilter position = new LeftNeighbour(new AndFilter(\n        new TextFilter(\")\"),\n        new ParentElementFilter(new ClassFilter(PsiParameterList.class))));\n\n// completion\n      CompletionVariant variant = new CompletionVariant(PsiMethod.class, position);\n      variant.includeScopeClass(PsiClass.class); // for throws on separate line\n      variant.addCompletion(PsiKeyword.THROWS);\n\n      registerVariant(variant);\n\n//in annotation methods\n      variant = new CompletionVariant(PsiAnnotationMethod.class, position);\n      variant.addCompletion(PsiKeyword.DEFAULT);\n      registerVariant(variant);\n    }\n\n    {\n// completion for declarations\n      final CompletionVariant variant = new CompletionVariant(new OrFilter(END_OF_BLOCK, new LeftNeighbour(new TextFilter(PsiKeyword.FINAL))));\n      variant.includeScopeClass(PsiCodeBlock.class, false);\n      addPrimitiveTypes(variant, CompletionVariant.DEFAULT_TAIL_TYPE);\n      variant.addCompletion(PsiKeyword.CLASS);\n      registerVariant(variant);\n    }\n\n// Completion in cast expressions\n    {\n      final CompletionVariant variant = new CompletionVariant(PsiMethod.class, new LeftNeighbour(new AndFilter(\n        new TextFilter(\"(\"),\n        new ParentElementFilter(new OrFilter(\n          new ClassFilter(PsiParenthesizedExpression.class),\n          new ClassFilter(PsiTypeCastExpression.class))))));\n      addPrimitiveTypes(variant, CompletionVariant.DEFAULT_TAIL_TYPE);\n      registerVariant(variant);\n    }\n\n    {\n// instanceof keyword\n      final ElementFilter position = INSTANCEOF_PLACE;\n      final CompletionVariant variant = new CompletionVariant(position);\n      variant.includeScopeClass(PsiExpression.class, true);\n      variant.includeScopeClass(PsiMethod.class);\n      variant.addCompletion(PsiKeyword.INSTANCEOF);\n\n      registerVariant(variant);\n    }\n\n    {\n// Keyword completion in start of declaration\n      final CompletionVariant variant = new CompletionVariant(PsiMethod.class, END_OF_BLOCK);\n      addKeywords(variant);\n      registerVariant(variant);\n    }\n\n    {\n// Keyword completion in returns  !!!!\n      final CompletionVariant variant = new CompletionVariant(PsiMethod.class, new LeftNeighbour(new TextFilter(PsiKeyword.RETURN)));\n      variant.addCompletion(PsiKeyword.TRUE, TailType.NONE);\n      variant.addCompletion(PsiKeyword.FALSE, TailType.NONE);\n      registerVariant(variant);\n    }\n\n\n// Catch/Finally completion\n    {\n      final ElementFilter position = AFTER_TRY_BLOCK;\n\n      final CompletionVariant variant = new CompletionVariant(position);\n      variant.includeScopeClass(PsiCodeBlock.class, true);\n      variant.addCompletion(PsiKeyword.CATCH, TailTypes.CATCH_LPARENTH);\n      variant.addCompletion(PsiKeyword.FINALLY, TailTypes.FINALLY_LBRACE);\n      registerVariant(variant);\n    }\n\n// Catch/Finnaly completion\n    {\n      final ElementFilter position = new LeftNeighbour(new AndFilter(\n        new TextFilter(\"}\"),\n        new ParentElementFilter(new AndFilter(\n          new LeftNeighbour(new NotFilter(new TextFilter(PsiKeyword.TRY))),\n          new OrFilter(\n            new ParentElementFilter(new ClassFilter(PsiTryStatement.class)),\n            new ParentElementFilter(new ClassFilter(PsiCatchSection.class)))\n          ))));\n\n      final CompletionVariant variant = new CompletionVariant(position);\n      variant.includeScopeClass(PsiCodeBlock.class, false);\n      variant.addCompletion(PsiKeyword.CATCH, TailTypes.CATCH_LPARENTH);\n      variant.addCompletion(PsiKeyword.FINALLY, TailTypes.FINALLY_LBRACE);\n      registerVariant(variant);\n    }\n\n// Completion for else expression\n// completion\n    {\n      final ElementFilter position = new LeftNeighbour(\n        new OrFilter(\n          new AndFilter(new TextFilter(\"}\"),new ParentElementFilter(new ClassFilter(PsiIfStatement.class), 3)),\n          new AndFilter(new TextFilter(\";\"),new ParentElementFilter(new ClassFilter(PsiIfStatement.class), 2))\n        ));\n      final CompletionVariant variant = new CompletionVariant(PsiMethod.class, position);\n      variant.addCompletion(PsiKeyword.ELSE);\n\n      registerVariant(variant);\n    }\n\n    {\n      final CompletionVariant variant = new CompletionVariant(INSIDE_SWITCH);\n      variant.includeScopeClass(PsiElement.class, true);\n      variant.addCompletion(PsiKeyword.CASE, TailType.SPACE);\n      variant.addCompletion(PsiKeyword.DEFAULT, TailType.CASE_COLON);\n      registerVariant(variant);\n    }\n  }","id":46842,"modified_method":"private void initVariantsInMethodScope() {\n// Completion for classes in method throws section\n// position\n    {\n      final ElementFilter position = new LeftNeighbour(new AndFilter(\n        new TextFilter(\")\"),\n        new ParentElementFilter(new ClassFilter(PsiParameterList.class))));\n\n// completion\n      CompletionVariant variant = new CompletionVariant(PsiMethod.class, position);\n      variant.includeScopeClass(PsiClass.class); // for throws on separate line\n      variant.addCompletion(PsiKeyword.THROWS);\n\n      registerVariant(variant);\n\n//in annotation methods\n      variant = new CompletionVariant(PsiAnnotationMethod.class, position);\n      variant.addCompletion(PsiKeyword.DEFAULT);\n      registerVariant(variant);\n    }\n\n    {\n// completion for declarations\n      final CompletionVariant variant = new CompletionVariant(new OrFilter(END_OF_BLOCK, new LeftNeighbour(new TextFilter(PsiKeyword.FINAL))));\n      variant.includeScopeClass(PsiCodeBlock.class, false);\n      addPrimitiveTypes(variant, CompletionVariant.DEFAULT_TAIL_TYPE);\n      variant.addCompletion(PsiKeyword.CLASS);\n      registerVariant(variant);\n    }\n\n    {\n// instanceof keyword\n      final ElementFilter position = INSTANCEOF_PLACE;\n      final CompletionVariant variant = new CompletionVariant(position);\n      variant.includeScopeClass(PsiExpression.class, true);\n      variant.includeScopeClass(PsiMethod.class);\n      variant.addCompletion(PsiKeyword.INSTANCEOF);\n\n      registerVariant(variant);\n    }\n\n    {\n// Keyword completion in start of declaration\n      final CompletionVariant variant = new CompletionVariant(PsiMethod.class, END_OF_BLOCK);\n      addKeywords(variant);\n      registerVariant(variant);\n    }\n\n    {\n// Keyword completion in returns  !!!!\n      final CompletionVariant variant = new CompletionVariant(PsiMethod.class, new LeftNeighbour(new TextFilter(PsiKeyword.RETURN)));\n      variant.addCompletion(PsiKeyword.TRUE, TailType.NONE);\n      variant.addCompletion(PsiKeyword.FALSE, TailType.NONE);\n      registerVariant(variant);\n    }\n\n\n// Catch/Finally completion\n    {\n      final ElementFilter position = AFTER_TRY_BLOCK;\n\n      final CompletionVariant variant = new CompletionVariant(position);\n      variant.includeScopeClass(PsiCodeBlock.class, true);\n      variant.addCompletion(PsiKeyword.CATCH, TailTypes.CATCH_LPARENTH);\n      variant.addCompletion(PsiKeyword.FINALLY, TailTypes.FINALLY_LBRACE);\n      registerVariant(variant);\n    }\n\n// Catch/Finnaly completion\n    {\n      final ElementFilter position = new LeftNeighbour(new AndFilter(\n        new TextFilter(\"}\"),\n        new ParentElementFilter(new AndFilter(\n          new LeftNeighbour(new NotFilter(new TextFilter(PsiKeyword.TRY))),\n          new OrFilter(\n            new ParentElementFilter(new ClassFilter(PsiTryStatement.class)),\n            new ParentElementFilter(new ClassFilter(PsiCatchSection.class)))\n          ))));\n\n      final CompletionVariant variant = new CompletionVariant(position);\n      variant.includeScopeClass(PsiCodeBlock.class, false);\n      variant.addCompletion(PsiKeyword.CATCH, TailTypes.CATCH_LPARENTH);\n      variant.addCompletion(PsiKeyword.FINALLY, TailTypes.FINALLY_LBRACE);\n      registerVariant(variant);\n    }\n\n// Completion for else expression\n// completion\n    {\n      final ElementFilter position = new LeftNeighbour(\n        new OrFilter(\n          new AndFilter(new TextFilter(\"}\"),new ParentElementFilter(new ClassFilter(PsiIfStatement.class), 3)),\n          new AndFilter(new TextFilter(\";\"),new ParentElementFilter(new ClassFilter(PsiIfStatement.class), 2))\n        ));\n      final CompletionVariant variant = new CompletionVariant(PsiMethod.class, position);\n      variant.addCompletion(PsiKeyword.ELSE);\n\n      registerVariant(variant);\n    }\n\n    {\n      final CompletionVariant variant = new CompletionVariant(INSIDE_SWITCH);\n      variant.includeScopeClass(PsiElement.class, true);\n      variant.addCompletion(PsiKeyword.CASE, TailType.SPACE);\n      variant.addCompletion(PsiKeyword.DEFAULT, TailType.CASE_COLON);\n      registerVariant(variant);\n    }\n  }","commit_id":"a9458eabd67cd41f52ab37d1a4768080803fad9f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void fillCompletions(CompletionParameters parameters, final CompletionResultSet result) {\n    final PsiElement position = parameters.getPosition();\n    if (PsiTreeUtil.getParentOfType(position, PsiComment.class, false) != null) {\n      return;\n    }\n\n    if (SUPER_OR_THIS_PATTERN.accepts(position)) {\n      if (AFTER_DOT.accepts(position) && !isInsideQualifierClass(position)) return;\n\n      result.addElement(createKeyword(position, PsiKeyword.THIS));\n\n      final LookupItem superItem = (LookupItem)createKeyword(position, PsiKeyword.SUPER);\n      if (psiElement().afterLeaf(psiElement().withText(\"{\").withSuperParent(2, psiMethod().constructor(true))).accepts(position)) {\n        final PsiMethod method = PsiTreeUtil.getParentOfType(position, PsiMethod.class, false, PsiClass.class);\n        assert method != null;\n        final boolean hasParams = superConstructorHasParameters(method);\n        superItem.setInsertHandler(new ParenthesesInsertHandler<LookupElement>() {\n          @Override\n          protected boolean placeCaretInsideParentheses(InsertionContext context, LookupElement item) {\n            return hasParams;\n          }\n\n          @Override\n          public void handleInsert(InsertionContext context, LookupElement item) {\n            super.handleInsert(context, item);\n            TailType.insertChar(context.getEditor(), context.getTailOffset(), ';');\n          }\n        });\n      }\n\n      result.addElement(superItem);\n    }\n\n    final ElementPattern<PsiElement> exprKeywords = and(\n      psiElement().withParent(psiElement(PsiReferenceExpression.class).withParent(\n        not(\n          or(psiElement(PsiTypeCastExpression.class),\n             psiElement(PsiSwitchLabelStatement.class),\n             psiElement(PsiExpressionStatement.class)\n          )\n        )\n      )),\n      not(psiElement().afterLeaf(\".\"))\n    );\n    if (exprKeywords.accepts(position)) {\n      result.addElement(createKeyword(position, PsiKeyword.NEW));\n      result.addElement(createKeyword(position, PsiKeyword.NULL));\n      result.addElement(createKeyword(position, PsiKeyword.TRUE));\n      result.addElement(createKeyword(position, PsiKeyword.FALSE));\n    }\n\n    if (START_FOR.accepts(position)) {\n      for (String primitiveType : PRIMITIVE_TYPES) {\n        if (!PsiKeyword.VOID.equals(primitiveType)) {\n          result.addElement(TailTypeDecorator.withTail(createKeyword(position, primitiveType), TailType.SPACE));\n        }\n        result.addElement(TailTypeDecorator.withTail(createKeyword(position, PsiKeyword.FINAL), TailType.SPACE));\n      }\n    }\n\n    final ProcessingContext context = new ProcessingContext();\n    if (psiElement().afterLeaf(\n      psiElement().withText(\">\").withParent(\n        psiElement(PsiTypeParameterList.class).withParent(PsiErrorElement.class).save(\"typeParameterList\"))).accepts(position, context)) {\n      final PsiTypeParameterList list = (PsiTypeParameterList)context.get(\"typeParameterList\");\n      PsiElement current = list.getParent().getParent();\n      if (current instanceof PsiField) {\n        current = current.getParent();\n      }\n      if (current instanceof PsiClass) {\n        for (PsiTypeParameter typeParameter : list.getTypeParameters()) {\n          result.addElement(new JavaPsiClassReferenceElement(typeParameter));\n        }\n      }\n    }\n\n    if (JavaSmartCompletionContributor.INSIDE_EXPRESSION.accepts(position) &&\n        !BasicExpressionCompletionContributor.AFTER_DOT.accepts(position) &&\n        !(position.getParent() instanceof PsiLiteralExpression) &&\n        !(position.getParent().getParent() instanceof PsiSwitchLabelStatement)) {\n      for (final ExpectedTypeInfo info : JavaSmartCompletionContributor.getExpectedTypes(parameters)) {\n        MembersGetter.addMembers(position, info.getDefaultType(), new Consumer<LookupElement>() {\n          @Override\n          public void consume(LookupElement element) {\n            result.addElement(element);\n          }\n        });\n      }\n    }\n  }","id":46843,"modified_method":"@Override\n  public void fillCompletions(CompletionParameters parameters, final CompletionResultSet result) {\n    final PsiElement position = parameters.getPosition();\n    if (PsiTreeUtil.getParentOfType(position, PsiComment.class, false) != null) {\n      return;\n    }\n\n    final PsiExpressionStatement expressionStatement = PsiTreeUtil.getParentOfType(position, PsiExpressionStatement.class);\n    if (expressionStatement != null && expressionStatement.getTextRange().getStartOffset() == position.getTextRange().getStartOffset()) {\n      if (!psiElement().withSuperParent(2, PsiSwitchStatement.class).accepts(expressionStatement)) {\n        result.addElement(createKeyword(position, PsiKeyword.FINAL));\n      }\n    }\n\n    if (SUPER_OR_THIS_PATTERN.accepts(position)) {\n      if (AFTER_DOT.accepts(position) && !isInsideQualifierClass(position)) return;\n\n      result.addElement(createKeyword(position, PsiKeyword.THIS));\n\n      final LookupItem superItem = (LookupItem)createKeyword(position, PsiKeyword.SUPER);\n      if (psiElement().afterLeaf(psiElement().withText(\"{\").withSuperParent(2, psiMethod().constructor(true))).accepts(position)) {\n        final PsiMethod method = PsiTreeUtil.getParentOfType(position, PsiMethod.class, false, PsiClass.class);\n        assert method != null;\n        final boolean hasParams = superConstructorHasParameters(method);\n        superItem.setInsertHandler(new ParenthesesInsertHandler<LookupElement>() {\n          @Override\n          protected boolean placeCaretInsideParentheses(InsertionContext context, LookupElement item) {\n            return hasParams;\n          }\n\n          @Override\n          public void handleInsert(InsertionContext context, LookupElement item) {\n            super.handleInsert(context, item);\n            TailType.insertChar(context.getEditor(), context.getTailOffset(), ';');\n          }\n        });\n      }\n\n      result.addElement(superItem);\n    }\n\n    final ElementPattern<PsiElement> exprKeywords = and(\n      psiElement().withParent(psiElement(PsiReferenceExpression.class).withParent(\n        not(\n          or(psiElement(PsiTypeCastExpression.class),\n             psiElement(PsiSwitchLabelStatement.class),\n             psiElement(PsiExpressionStatement.class)\n          )\n        )\n      )),\n      not(psiElement().afterLeaf(\".\"))\n    );\n    if (exprKeywords.accepts(position)) {\n      result.addElement(createKeyword(position, PsiKeyword.NEW));\n      result.addElement(createKeyword(position, PsiKeyword.NULL));\n      result.addElement(createKeyword(position, PsiKeyword.TRUE));\n      result.addElement(createKeyword(position, PsiKeyword.FALSE));\n    }\n\n    if (START_FOR.accepts(position)) {\n      for (String primitiveType : PRIMITIVE_TYPES) {\n        if (!PsiKeyword.VOID.equals(primitiveType)) {\n          result.addElement(TailTypeDecorator.withTail(createKeyword(position, primitiveType), TailType.SPACE));\n        }\n        //result.addElement(TailTypeDecorator.withTail(createKeyword(position, PsiKeyword.FINAL), TailType.SPACE));\n      }\n    }\n\n    final ProcessingContext context = new ProcessingContext();\n    if (psiElement().afterLeaf(\n      psiElement().withText(\">\").withParent(\n        psiElement(PsiTypeParameterList.class).withParent(PsiErrorElement.class).save(\"typeParameterList\"))).accepts(position, context)) {\n      final PsiTypeParameterList list = (PsiTypeParameterList)context.get(\"typeParameterList\");\n      PsiElement current = list.getParent().getParent();\n      if (current instanceof PsiField) {\n        current = current.getParent();\n      }\n      if (current instanceof PsiClass) {\n        for (PsiTypeParameter typeParameter : list.getTypeParameters()) {\n          result.addElement(new JavaPsiClassReferenceElement(typeParameter));\n        }\n      }\n    }\n\n    if (JavaSmartCompletionContributor.INSIDE_EXPRESSION.accepts(position) &&\n        !BasicExpressionCompletionContributor.AFTER_DOT.accepts(position) &&\n        !(position.getParent() instanceof PsiLiteralExpression) &&\n        !(position.getParent().getParent() instanceof PsiSwitchLabelStatement)) {\n      for (final ExpectedTypeInfo info : JavaSmartCompletionContributor.getExpectedTypes(parameters)) {\n        MembersGetter.addMembers(position, info.getDefaultType(), new Consumer<LookupElement>() {\n          @Override\n          public void consume(LookupElement element) {\n            result.addElement(element);\n          }\n        });\n      }\n    }\n  }","commit_id":"725873b3ce2238123edc6f1078099949938a0f01","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testExtraBracketAfterFinally1() throws Throwable { doTest(); }","id":46844,"modified_method":"public void testExtraBracketAfterFinally1() throws Throwable {\n    configureByFile(BASE_PATH + \"/\" + getTestName(false) + \".java\");\n    selectItem(myItems[1]);\n    checkResultByFile(BASE_PATH + \"/\" + getTestName(false) + \"-out.java\");\n  }","commit_id":"725873b3ce2238123edc6f1078099949938a0f01","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testExtraBracketAfterFinally() throws Throwable { doTest(); }","id":46845,"modified_method":"public void testExtraBracketAfterFinally() throws Throwable {\n    configureByFile(BASE_PATH + \"/\" + getTestName(false) + \".java\");\n    selectItem(myItems[1]);\n    checkResultByFile(BASE_PATH + \"/\" + getTestName(false) + \"-out.java\");\n  }","commit_id":"725873b3ce2238123edc6f1078099949938a0f01","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void startFilterChain(ServletRequest servletRequest, ServletResponse servletResponse)\n            throws IOException, ServletException {\n\n            final HttpServletRequest request = (HttpServletRequest) servletRequest;\n\n            boolean addTraceHeader = traceRequest(request);\n            boolean useTrace = addTraceHeader || (filterTimer != null);\n\n            tracer = new RequestTracer(useTrace, addTraceHeader);\n            currentFilters = getFilterChainForRequest(request.getRequestURI());\n            filterChainAvailable = isCurrentFilterChainAvailable();\n            servletRequest.setAttribute(\"filterChainAvailableForRequest\", filterChainAvailable);\n            servletRequest.setAttribute(\"http://openrepose.org/requestUrl\", ((HttpServletRequest)servletRequest).getRequestURL());\n            servletRequest.setAttribute(\"http://openrepose.org/queryParams\", servletRequest.getParameterMap());\n\n            doFilter(servletRequest, servletResponse);\n    }","id":46846,"modified_method":"public void startFilterChain(ServletRequest servletRequest, ServletResponse servletResponse)\n            throws IOException, ServletException {\n\n            final HttpServletRequest request = (HttpServletRequest) servletRequest;\n\n            boolean addTraceHeader = traceRequest(request);\n            boolean useTrace = addTraceHeader || (filterTimer != null);\n\n            tracer = new RequestTracer(useTrace, addTraceHeader);\n            currentFilters = getFilterChainForRequest(request.getRequestURI());\n            filterChainAvailable = isCurrentFilterChainAvailable();\n            servletRequest.setAttribute(\"filterChainAvailableForRequest\", filterChainAvailable);\n            servletRequest.setAttribute(\"http://openrepose.org/requestUrl\", ((HttpServletRequest)servletRequest).getRequestURL().toString());\n            servletRequest.setAttribute(\"http://openrepose.org/queryParams\", servletRequest.getParameterMap());\n\n            doFilter(servletRequest, servletResponse);\n    }","commit_id":"b398f297f07d30f4893ec5429007a4e4f67d4d80","url":"https://github.com/rackerlabs/repose"},{"original_method":"public void doFilter(\n\t\t\tServletRequest servletRequest, ServletResponse servletResponse,\n\t\t\tFilterChain filterChain)\n\t\tthrows IOException, ServletException {\n\n\t\tLog log = getLog();\n\n\t\tif (log.isDebugEnabled()) {\n\t\t\tif (isFilterEnabled()) {\n\t\t\t\tlog.debug(_filterClass + \" is enabled\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlog.debug(_filterClass + \" is disabled\");\n\t\t\t}\n\t\t}\n\n\t\tHttpServletRequest request = (HttpServletRequest)servletRequest;\n\t\tHttpServletResponse response = (HttpServletResponse)servletResponse;\n\n\t\tboolean filterEnabled = isFilterEnabled();\n\n\t\tif (filterEnabled && Validator.isNotNull(_servlet24Dispatcher)) {\n\t\t\tif ((_servlet24Dispatcher.equalsIgnoreCase(\n\t\t\t\t\t_SERVLET_24_DISPATCHER_REQUEST)) &&\n\t\t\t\t(request.getRequestURL() == null)) {\n\n\t\t\t\tfilterEnabled = false;\n\t\t\t}\n\t\t}\n\n\t\tif (filterEnabled && (_urlRegexPattern != null)) {\n\t\t\tStringBuilder sb = new StringBuilder();\n\n\t\t\tsb.append(request.getRequestURL());\n\n\t\t\tif (Validator.isNotNull(request.getQueryString())) {\n\t\t\t\tsb.append(StringPool.QUESTION);\n\t\t\t\tsb.append(request.getQueryString());\n\t\t\t}\n\n\t\t\tMatcher matcher = _urlRegexPattern.matcher(sb.toString());\n\n\t\t\tfilterEnabled = matcher.find();\n\t\t}\n\n\t\ttry {\n\t\t\tif (filterEnabled) {\n\t\t\t\tprocessFilter(request, response, filterChain);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprocessFilter(_filterClass, request, response, filterChain);\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow ioe;\n\t\t}\n\t\tcatch (ServletException se) {\n\t\t\tthrow se;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tgetLog().error(e, e);\n\t\t}\n\t}","id":46847,"modified_method":"public void doFilter(\n\t\t\tServletRequest servletRequest, ServletResponse servletResponse,\n\t\t\tFilterChain filterChain)\n\t\tthrows IOException, ServletException {\n\n\t\tLog log = getLog();\n\n\t\tif (log.isDebugEnabled()) {\n\t\t\tif (isFilterEnabled()) {\n\t\t\t\tlog.debug(_filterClass + \" is enabled\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlog.debug(_filterClass + \" is disabled\");\n\t\t\t}\n\t\t}\n\n\t\tHttpServletRequest request = (HttpServletRequest)servletRequest;\n\t\tHttpServletResponse response = (HttpServletResponse)servletResponse;\n\n\t\tStringBuffer requestUrl = request.getRequestURL();\n\t\tboolean filterEnabled = isFilterEnabled();\n\n\t\tif (filterEnabled && _isServlet24Dispatcher && requestUrl == null) {\n\t\t\tfilterEnabled = false;\n\t\t}\n\n\t\tif (filterEnabled && (_urlRegexPattern != null)) {\n\t\t\tString url = requestUrl.toString();\n\t\t\tString queryString = request.getQueryString();\n\t\t\tif (Validator.isNotNull(queryString)) {\n\t\t\t\turl = url.concat(StringPool.QUESTION).concat(queryString);\n\t\t\t}\n\n\t\t\tMatcher matcher = _urlRegexPattern.matcher(url);\n\n\t\t\tfilterEnabled = matcher.find();\n\t\t}\n\n\t\ttry {\n\t\t\tif (filterEnabled) {\n\t\t\t\tprocessFilter(request, response, filterChain);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprocessFilter(_filterClass, request, response, filterChain);\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow ioe;\n\t\t}\n\t\tcatch (ServletException se) {\n\t\t\tthrow se;\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tgetLog().error(e, e);\n\t\t}\n\t}","commit_id":"7b384d8886ec644858eb146f98523a83c1df13f2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void init(FilterConfig filterConfig) {\n\t\t_filterConfig = filterConfig;\n\n\t\tString urlRegexPattern = GetterUtil.getString(\n\t\t\tfilterConfig.getInitParameter(\"url-regex-pattern\"));\n\n\t\tif (Validator.isNotNull(urlRegexPattern)) {\n\t\t\t_urlRegexPattern = Pattern.compile(urlRegexPattern);\n\t\t}\n\n\t\t_servlet24Dispatcher = filterConfig.getInitParameter(\n\t\t\t\"servlet-2.4-dispatcher\");\n\t}","id":46848,"modified_method":"public void init(FilterConfig filterConfig) {\n\t\t_filterConfig = filterConfig;\n\n\t\tString urlRegexPattern = GetterUtil.getString(\n\t\t\tfilterConfig.getInitParameter(\"url-regex-pattern\"));\n\n\t\tif (Validator.isNotNull(urlRegexPattern)) {\n\t\t\t_urlRegexPattern = Pattern.compile(urlRegexPattern);\n\t\t}\n\n\t\tString servlet24Dispatcher = filterConfig.getInitParameter(\n\t\t\t\"servlet-2.4-dispatcher\");\n\t\t_isServlet24Dispatcher =\n\t\t\tValidator.isNotNull(servlet24Dispatcher) &&\n\t\t\t\tservlet24Dispatcher.equalsIgnoreCase(\n\t\t\t\t\t_SERVLET_24_DISPATCHER_REQUEST);\n\t}","commit_id":"7b384d8886ec644858eb146f98523a83c1df13f2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see javax.servlet.ServletRequestListener#requestInitialized(javax.servlet.ServletRequestEvent)\n     */\n    public void requestInitialized(ServletRequestEvent sre)\n    {\n        ServletRequest servletRequest = sre.getServletRequest();\n\n        if (servletRequest instanceof HttpServletRequest) {\n            HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;\n\n            Thread.currentThread().setName(\n                httpServletRequest.getRequestURL() + \"?\" + httpServletRequest.getQueryString());\n        }\n    }","id":46849,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see javax.servlet.ServletRequestListener#requestInitialized(javax.servlet.ServletRequestEvent)\n     */\n    public void requestInitialized(ServletRequestEvent sre)\n    {\n        ServletRequest servletRequest = sre.getServletRequest();\n\n        if (servletRequest instanceof HttpServletRequest) {\n            HttpServletRequest httpServletRequest = (HttpServletRequest) servletRequest;\n\n            String threadName = httpServletRequest.getRequestURL().toString();\n\n            if (httpServletRequest.getQueryString() != null) {\n                threadName += \"?\" + httpServletRequest.getQueryString();\n            }\n\n            Thread.currentThread().setName(threadName);\n        }\n    }","commit_id":"284d5a011db8835548f2673d45766147a12eddd8","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void readRequest(HttpServletRequest request, HttpMessage message) {\n        LOG.trace(\"readRequest {}\", request);\n        \n        // lets force a parse of the body and headers\n        message.getBody();\n        // populate the headers from the request\n        Map<String, Object> headers = message.getHeaders();\n        \n        //apply the headerFilterStrategy\n        Enumeration<?> names = request.getHeaderNames();\n        while (names.hasMoreElements()) {\n            String name = (String)names.nextElement();\n            String value = request.getHeader(name);\n            // use http helper to extract parameter value as it may contain multiple values\n            Object extracted = HttpHelper.extractHttpParameterValue(value);\n            // mapping the content-type\n            if (name.toLowerCase().equals(\"content-type\")) {\n                name = Exchange.CONTENT_TYPE;\n            }\n            if (headerFilterStrategy != null\n                && !headerFilterStrategy.applyFilterToExternalHeaders(name, extracted, message.getExchange())) {\n                HttpHelper.appendHeader(headers, name, extracted);\n            }\n        }\n                \n        if (request.getCharacterEncoding() != null) {\n            headers.put(Exchange.HTTP_CHARACTER_ENCODING, request.getCharacterEncoding());\n            message.getExchange().setProperty(Exchange.CHARSET_NAME, request.getCharacterEncoding());\n        }\n\n        try {\n            populateRequestParameters(request, message);\n        } catch (Exception e) {\n            throw new RuntimeCamelException(\"Cannot read request parameters due \" + e.getMessage(), e);\n        }\n        \n        Object body = message.getBody();\n        // reset the stream cache if the body is the instance of StreamCache\n        if (body instanceof StreamCache) {\n            ((StreamCache)body).reset();\n        }\n\n        // store the method and query and other info in headers\n        headers.put(Exchange.HTTP_METHOD, request.getMethod());\n        headers.put(Exchange.HTTP_QUERY, request.getQueryString());\n        headers.put(Exchange.HTTP_URL, request.getRequestURL());\n        headers.put(Exchange.HTTP_URI, request.getRequestURI());\n        headers.put(Exchange.HTTP_PATH, request.getPathInfo());\n        headers.put(Exchange.CONTENT_TYPE, request.getContentType());\n\n        if (LOG.isTraceEnabled()) {\n            LOG.trace(\"HTTP method {}\", request.getMethod());\n            LOG.trace(\"HTTP query {}\", request.getQueryString());\n            LOG.trace(\"HTTP url {}\", request.getRequestURL());\n            LOG.trace(\"HTTP uri {}\", request.getRequestURI());\n            LOG.trace(\"HTTP path {}\", request.getPathInfo());\n            LOG.trace(\"HTTP content-type {}\", request.getContentType());\n        }\n\n        // if content type is serialized java object, then de-serialize it to a Java object\n        if (request.getContentType() != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(request.getContentType())) {\n            try {\n                InputStream is = endpoint.getCamelContext().getTypeConverter().mandatoryConvertTo(InputStream.class, body);\n                Object object = HttpHelper.deserializeJavaObjectFromStream(is);\n                if (object != null) {\n                    message.setBody(object);\n                }\n            } catch (Exception e) {\n                throw new RuntimeCamelException(\"Cannot deserialize body to Java object\", e);\n            }\n        }\n        \n        populateAttachments(request, message);\n    }","id":46850,"modified_method":"public void readRequest(HttpServletRequest request, HttpMessage message) {\n        LOG.trace(\"readRequest {}\", request);\n        \n        // lets force a parse of the body and headers\n        message.getBody();\n        // populate the headers from the request\n        Map<String, Object> headers = message.getHeaders();\n        \n        //apply the headerFilterStrategy\n        Enumeration<?> names = request.getHeaderNames();\n        while (names.hasMoreElements()) {\n            String name = (String)names.nextElement();\n            String value = request.getHeader(name);\n            // use http helper to extract parameter value as it may contain multiple values\n            Object extracted = HttpHelper.extractHttpParameterValue(value);\n            // mapping the content-type\n            if (name.toLowerCase().equals(\"content-type\")) {\n                name = Exchange.CONTENT_TYPE;\n            }\n            if (headerFilterStrategy != null\n                && !headerFilterStrategy.applyFilterToExternalHeaders(name, extracted, message.getExchange())) {\n                HttpHelper.appendHeader(headers, name, extracted);\n            }\n        }\n                \n        if (request.getCharacterEncoding() != null) {\n            headers.put(Exchange.HTTP_CHARACTER_ENCODING, request.getCharacterEncoding());\n            message.getExchange().setProperty(Exchange.CHARSET_NAME, request.getCharacterEncoding());\n        }\n\n        try {\n            populateRequestParameters(request, message);\n        } catch (Exception e) {\n            throw new RuntimeCamelException(\"Cannot read request parameters due \" + e.getMessage(), e);\n        }\n        \n        Object body = message.getBody();\n        // reset the stream cache if the body is the instance of StreamCache\n        if (body instanceof StreamCache) {\n            ((StreamCache)body).reset();\n        }\n\n        // store the method and query and other info in headers as String types\n        headers.put(Exchange.HTTP_METHOD, request.getMethod());\n        headers.put(Exchange.HTTP_QUERY, request.getQueryString());\n        headers.put(Exchange.HTTP_URL, request.getRequestURL().toString());\n        headers.put(Exchange.HTTP_URI, request.getRequestURI());\n        headers.put(Exchange.HTTP_PATH, request.getPathInfo());\n        headers.put(Exchange.CONTENT_TYPE, request.getContentType());\n\n        if (LOG.isTraceEnabled()) {\n            LOG.trace(\"HTTP method {}\", request.getMethod());\n            LOG.trace(\"HTTP query {}\", request.getQueryString());\n            LOG.trace(\"HTTP url {}\", request.getRequestURL());\n            LOG.trace(\"HTTP uri {}\", request.getRequestURI().toString());\n            LOG.trace(\"HTTP path {}\", request.getPathInfo());\n            LOG.trace(\"HTTP content-type {}\", request.getContentType());\n        }\n\n        // if content type is serialized java object, then de-serialize it to a Java object\n        if (request.getContentType() != null && HttpConstants.CONTENT_TYPE_JAVA_SERIALIZED_OBJECT.equals(request.getContentType())) {\n            try {\n                InputStream is = endpoint.getCamelContext().getTypeConverter().mandatoryConvertTo(InputStream.class, body);\n                Object object = HttpHelper.deserializeJavaObjectFromStream(is);\n                if (object != null) {\n                    message.setBody(object);\n                }\n            } catch (Exception e) {\n                throw new RuntimeCamelException(\"Cannot deserialize body to Java object\", e);\n            }\n        }\n        \n        populateAttachments(request, message);\n    }","commit_id":"38a4ed8b72b3a44df0a1e67564097229bd3abba8","url":"https://github.com/apache/camel"},{"original_method":"public void handleGet(HttpRequest request,\n                          HttpResponse response,\n                          String pathInContext,\n                          String pathParams,\n                          Resource resource)\n        throws IOException\n    {\n        if(log.isDebugEnabled())log.debug(\"Looking for \"+resource);\n        \n        if (resource!=null && resource.exists())\n        {            \n            // check if directory\n            if (resource.isDirectory())\n            {\n                if (!pathInContext.endsWith(\"/\") && !pathInContext.equals(\"/\"))\n                {\n                    log.debug(\"Redirect to directory/\");\n                    \n                    String q=request.getQuery();\n                    StringBuffer buf=request.getRequestURL();\n                    if (q!=null&&q.length()!=0)\n                    {\n                        buf.append('?');\n                        buf.append(q);\n                    }\n                    response.setField(HttpFields.__Location, URI.addPaths(buf.toString(),\"/\"));\n                    response.setStatus(302);\n                    request.setHandled(true);\n                    return;\n                }\n  \n                // See if index file exists\n                String welcome=getHttpContext().getWelcomeFile(resource);\n                if (welcome!=null)\n                {     \n                    // Forward to the index\n                    String ipath=URI.addPaths(pathInContext,welcome);\n                    if (_redirectWelcomeFiles)\n                    {\n                        // Redirect to the index\n                        ipath=URI.addPaths(getHttpContext().getContextPath(),ipath);\n                        response.setContentLength(0);\n                        response.sendRedirect(ipath);\n                    }\n                    else\n                    {\n                        URI uri=request.getURI();\n                        uri.setPath(URI.addPaths(uri.getPath(),welcome));\n                        getHttpContext().handle(ipath,pathParams,request,response);\n                    }\n                    return;\n                }\n\n                // Check modified dates\n                if (!passConditionalHeaders(request,response,resource))\n                    return;\n                // If we got here, no forward to index took place\n                sendDirectory(request,response,resource,pathInContext.length()>1);\n            }\n            // check if it is a file\n            else if (resource.exists())\n            {\n                // Check modified dates\n                if (!passConditionalHeaders(request,response,resource))\n                    return;\n                sendData(request,response,pathInContext,resource,true);\n            }\n            else\n                // don't know what it is\n                log.warn(\"Unknown file type\");\n        }\n    }","id":46851,"modified_method":"public void handleGet(HttpRequest request,\n                          HttpResponse response,\n                          String pathInContext,\n                          String pathParams,\n                          Resource resource)\n        throws IOException\n    {\n        if(log.isDebugEnabled())log.debug(\"Looking for \"+resource);\n        \n        if (resource!=null && resource.exists())\n        {            \n            // check if directory\n            if (resource.isDirectory())\n            {\n                if (!pathInContext.endsWith(\"/\") && !pathInContext.equals(\"/\"))\n                {\n                    log.debug(\"Redirect to directory/\");\n                    \n                    String q=request.getQuery();\n                    StringBuffer buf = URI.encodePath(null, request.getRequestURL().toString());\n                    if (q!=null&&q.length()!=0)\n                    {\n                        buf.append('?');\n                        buf.append(q);\n                    }\n                    response.setField(HttpFields.__Location, URI.addPaths(buf.toString(),\"/\"));\n                    response.setStatus(302);\n                    request.setHandled(true);\n                    return;\n                }\n  \n                // See if index file exists\n                String welcome=getHttpContext().getWelcomeFile(resource);\n                if (welcome!=null)\n                {     \n                    // Forward to the index\n                    String ipath=URI.addPaths(pathInContext,welcome);\n                    if (_redirectWelcomeFiles)\n                    {\n                        // Redirect to the index\n                        ipath=URI.addPaths(getHttpContext().getContextPath(),ipath);\n                        response.setContentLength(0);\n                        response.sendRedirect(ipath);\n                    }\n                    else\n                    {\n                        URI uri=request.getURI();\n                        uri.setPath(URI.addPaths(uri.getPath(),welcome));\n                        getHttpContext().handle(ipath,pathParams,request,response);\n                    }\n                    return;\n                }\n\n                // Check modified dates\n                if (!passConditionalHeaders(request,response,resource))\n                    return;\n                // If we got here, no forward to index took place\n                sendDirectory(request,response,resource,pathInContext.length()>1);\n            }\n            // check if it is a file\n            else if (resource.exists())\n            {\n                // Check modified dates\n                if (!passConditionalHeaders(request,response,resource))\n                    return;\n                sendData(request,response,pathInContext,resource,true);\n            }\n            else\n                // don't know what it is\n                log.warn(\"Unknown file type\");\n        }\n    }","commit_id":"923c3d8b4c2826c24df9d05e7126cc621ade95da","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"@Override\n    public Optional<String> getTargetConfiguration() {\n        return Optional.fromNullable(configuration);\n    }","id":46852,"modified_method":"@Override\n    public String getTargetConfiguration() {\n        return configuration;\n    }","commit_id":"ce20a987860d38087cf5a9e6a9bdf9d1068ae850","url":"https://github.com/gradle/gradle"},{"original_method":"protected boolean isKeyEquals(ModuleDependency dependencyRhs) {\n        if (getGroup() != null ? !getGroup().equals(dependencyRhs.getGroup()) : dependencyRhs.getGroup() != null) {\n            return false;\n        }\n        if (!getName().equals(dependencyRhs.getName())) {\n            return false;\n        }\n        if (!getTargetConfiguration().equals(dependencyRhs.getTargetConfiguration())) {\n            return false;\n        }\n        if (getVersion() != null ? !getVersion().equals(dependencyRhs.getVersion())\n                : dependencyRhs.getVersion() != null) {\n            return false;\n        }\n        return true;\n    }","id":46853,"modified_method":"protected boolean isKeyEquals(ModuleDependency dependencyRhs) {\n        if (getGroup() != null ? !getGroup().equals(dependencyRhs.getGroup()) : dependencyRhs.getGroup() != null) {\n            return false;\n        }\n        if (!getName().equals(dependencyRhs.getName())) {\n            return false;\n        }\n        if (getTargetConfiguration() != null ? !getTargetConfiguration().equals(dependencyRhs.getTargetConfiguration())\n            : dependencyRhs.getTargetConfiguration()!=null) {\n            return false;\n        }\n        if (getVersion() != null ? !getVersion().equals(dependencyRhs.getVersion())\n                : dependencyRhs.getVersion() != null) {\n            return false;\n        }\n        return true;\n    }","commit_id":"ce20a987860d38087cf5a9e6a9bdf9d1068ae850","url":"https://github.com/gradle/gradle"},{"original_method":"private void addClientModuleDependencies(ClientModule clientModule, MutableModuleComponentResolveMetadata clientModuleMetaData) {\n        List<DependencyMetadata> dependencies = Lists.newArrayList();\n        for (ModuleDependency moduleDependency : clientModule.getDependencies()) {\n            DependencyMetadata dependencyMetadata = dependencyDescriptorFactory.createDependencyDescriptor(moduleDependency.getTargetConfiguration().orNull(), null, moduleDependency);\n            dependencies.add(dependencyMetadata);\n        }\n        clientModuleMetaData.setDependencies(dependencies);\n    }","id":46854,"modified_method":"private void addClientModuleDependencies(ClientModule clientModule, MutableModuleComponentResolveMetadata clientModuleMetaData) {\n        List<DependencyMetadata> dependencies = Lists.newArrayList();\n        for (ModuleDependency moduleDependency : clientModule.getDependencies()) {\n            DependencyMetadata dependencyMetadata = dependencyDescriptorFactory.createDependencyDescriptor(moduleDependency.getTargetConfiguration(), null, moduleDependency);\n            dependencies.add(dependencyMetadata);\n        }\n        clientModuleMetaData.setDependencies(dependencies);\n    }","commit_id":"ce20a987860d38087cf5a9e6a9bdf9d1068ae850","url":"https://github.com/gradle/gradle"},{"original_method":"public ClientModule copy() {\n        DefaultClientModule copiedClientModule = new DefaultClientModule(getGroup(), getName(), getVersion(), getTargetConfiguration().orNull());\n        copyTo(copiedClientModule);\n        for (ModuleDependency dependency : dependencies) {\n            copiedClientModule.addDependency(dependency.copy());\n        }\n        return copiedClientModule;\n    }","id":46855,"modified_method":"public ClientModule copy() {\n        DefaultClientModule copiedClientModule = new DefaultClientModule(getGroup(), getName(), getVersion(), getTargetConfiguration());\n        copyTo(copiedClientModule);\n        for (ModuleDependency dependency : dependencies) {\n            copiedClientModule.addDependency(dependency.copy());\n        }\n        return copiedClientModule;\n    }","commit_id":"ce20a987860d38087cf5a9e6a9bdf9d1068ae850","url":"https://github.com/gradle/gradle"},{"original_method":"public DefaultExternalModuleDependency copy() {\n        DefaultExternalModuleDependency copiedModuleDependency = new DefaultExternalModuleDependency(getGroup(), getName(), getVersion(), getTargetConfiguration().orNull());\n        copyTo(copiedModuleDependency);\n        return copiedModuleDependency;\n    }","id":46856,"modified_method":"public DefaultExternalModuleDependency copy() {\n        DefaultExternalModuleDependency copiedModuleDependency = new DefaultExternalModuleDependency(getGroup(), getName(), getVersion(), getTargetConfiguration());\n        copyTo(copiedModuleDependency);\n        return copiedModuleDependency;\n    }","commit_id":"ce20a987860d38087cf5a9e6a9bdf9d1068ae850","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n    public String toString() {\n        return String.format(\"DefaultExternalModuleDependency{group='%s', name='%s', version='%s', configuration='%s'}\",\n                getGroup(), getName(), getVersion(), getTargetConfiguration().or(Dependency.DEFAULT_CONFIGURATION));\n    }","id":46857,"modified_method":"@Override\n    public String toString() {\n        return String.format(\"DefaultExternalModuleDependency{group='%s', name='%s', version='%s', configuration='%s'}\",\n                getGroup(), getName(), getVersion(), getTargetConfiguration() != null ? getTargetConfiguration() : Dependency.DEFAULT_CONFIGURATION);\n    }","commit_id":"ce20a987860d38087cf5a9e6a9bdf9d1068ae850","url":"https://github.com/gradle/gradle"},{"original_method":"public void from(SoftwareComponent component) {\n        if (this.component != null) {\n            throw new InvalidUserDataException(String.format(\"Ivy publication '%s' cannot include multiple components\", name));\n        }\n        this.component = (SoftwareComponentInternal) component;\n\n        configurations.maybeCreate(\"default\");\n\n        for (Usage usage : this.component.getUsages()) {\n            String conf = usage.getName();\n            configurations.maybeCreate(conf);\n            configurations.getByName(\"default\").extend(conf);\n\n            for (PublishArtifact publishArtifact : usage.getArtifacts()) {\n                artifact(publishArtifact).setConf(conf);\n            }\n\n            for (ModuleDependency dependency : usage.getDependencies()) {\n                // TODO: When we support multiple components or configurable dependencies, we'll need to merge the confs of multiple dependencies with same id.\n                String confMapping = String.format(\"%s->%s\", conf, dependency.getTargetConfiguration().or(Dependency.DEFAULT_CONFIGURATION));\n                if (dependency instanceof ProjectDependency) {\n                    addProjectDependency((ProjectDependency) dependency, confMapping);\n                } else {\n                    addModuleDependency(dependency, confMapping);\n                }\n            }\n        }\n    }","id":46858,"modified_method":"public void from(SoftwareComponent component) {\n        if (this.component != null) {\n            throw new InvalidUserDataException(String.format(\"Ivy publication '%s' cannot include multiple components\", name));\n        }\n        this.component = (SoftwareComponentInternal) component;\n\n        configurations.maybeCreate(\"default\");\n\n        for (Usage usage : this.component.getUsages()) {\n            String conf = usage.getName();\n            configurations.maybeCreate(conf);\n            configurations.getByName(\"default\").extend(conf);\n\n            for (PublishArtifact publishArtifact : usage.getArtifacts()) {\n                artifact(publishArtifact).setConf(conf);\n            }\n\n            for (ModuleDependency dependency : usage.getDependencies()) {\n                // TODO: When we support multiple components or configurable dependencies, we'll need to merge the confs of multiple dependencies with same id.\n                String confMapping = String.format(\"%s->%s\", conf, dependency.getTargetConfiguration() == null ? Dependency.DEFAULT_CONFIGURATION : dependency.getTargetConfiguration());\n                if (dependency instanceof ProjectDependency) {\n                    addProjectDependency((ProjectDependency) dependency, confMapping);\n                } else {\n                    addModuleDependency(dependency, confMapping);\n                }\n            }\n        }\n    }","commit_id":"ce20a987860d38087cf5a9e6a9bdf9d1068ae850","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n    public int hashCode() {\n        return getDependencyProject().hashCode() ^ getTargetConfiguration().hashCode() ^ (buildProjectDependencies ? 1 : 0);\n    }","id":46859,"modified_method":"@Override\n    public int hashCode() {\n        return getDependencyProject().hashCode() ^ (getTargetConfiguration() != null ? getTargetConfiguration().hashCode() : 31) ^ (buildProjectDependencies ? 1 : 0);\n    }","commit_id":"ce20a987860d38087cf5a9e6a9bdf9d1068ae850","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n\n        DefaultProjectDependency that = (DefaultProjectDependency) o;\n        if (!this.getDependencyProject().equals(that.getDependencyProject())) {\n            return false;\n        }\n        if (!this.getTargetConfiguration().equals(that.getTargetConfiguration())) {\n            return false;\n        }\n        if (this.buildProjectDependencies != that.buildProjectDependencies) {\n            return false;\n        }\n        return true;\n    }","id":46860,"modified_method":"@Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n\n        DefaultProjectDependency that = (DefaultProjectDependency) o;\n        if (!this.getDependencyProject().equals(that.getDependencyProject())) {\n            return false;\n        }\n        if (getTargetConfiguration() != null ? !this.getTargetConfiguration().equals(that.getTargetConfiguration())\n            : that.getTargetConfiguration() != null) {\n            return false;\n        }\n        if (this.buildProjectDependencies != that.buildProjectDependencies) {\n            return false;\n        }\n        return true;\n    }","commit_id":"ce20a987860d38087cf5a9e6a9bdf9d1068ae850","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n    public String toString() {\n        return \"DefaultProjectDependency{\" + \"dependencyProject='\" + dependencyProject + '\\'' + \", configuration='\"\n                + getTargetConfiguration().or(Dependency.DEFAULT_CONFIGURATION) + '\\'' + '}';\n    }","id":46861,"modified_method":"@Override\n    public String toString() {\n        return \"DefaultProjectDependency{\" + \"dependencyProject='\" + dependencyProject + '\\'' + \", configuration='\"\n                + (getTargetConfiguration() == null ? Dependency.DEFAULT_CONFIGURATION : getTargetConfiguration()) + '\\'' + '}';\n    }","commit_id":"ce20a987860d38087cf5a9e6a9bdf9d1068ae850","url":"https://github.com/gradle/gradle"},{"original_method":"public ProjectDependency copy() {\n        DefaultProjectDependency copiedProjectDependency = new DefaultProjectDependency(dependencyProject,\n            getTargetConfiguration().orNull(), projectAccessListener, buildProjectDependencies);\n        copyTo(copiedProjectDependency);\n        return copiedProjectDependency;\n    }","id":46862,"modified_method":"public ProjectDependency copy() {\n        DefaultProjectDependency copiedProjectDependency = new DefaultProjectDependency(dependencyProject,\n            getTargetConfiguration(), projectAccessListener, buildProjectDependencies);\n        copyTo(copiedProjectDependency);\n        return copiedProjectDependency;\n    }","commit_id":"ce20a987860d38087cf5a9e6a9bdf9d1068ae850","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n    public Configuration findProjectConfiguration(Map<String, String> clientAttributes) {\n        Configuration selectedConfiguration = null;\n        ConfigurationContainer dependencyConfigurations = getDependencyProject().getConfigurations();\n        String declaredConfiguration = getTargetConfiguration().orNull();\n        if (declaredConfiguration == null && clientAttributes!=null && !clientAttributes.isEmpty()) {\n            List<Configuration> candidateConfigurations = new ArrayList<Configuration>(1);\n            for (Configuration dependencyConfiguration : dependencyConfigurations) {\n                if (dependencyConfiguration.hasAttributes()) {\n                    Map<String, String> attributes = dependencyConfiguration.getAttributes();\n                    if (attributes.entrySet().containsAll(clientAttributes.entrySet())) {\n                        candidateConfigurations.add(dependencyConfiguration);\n                    }\n                }\n            }\n            if (candidateConfigurations.size()==1) {\n                selectedConfiguration = candidateConfigurations.get(0);\n            } else if (!candidateConfigurations.isEmpty()) {\n                throw new IllegalArgumentException(\"Cannot choose between the following configurations: \" + Sets.newTreeSet(Lists.transform(candidateConfigurations, CONFIG_NAME)) + \". All of then match the client attributes \" + clientAttributes);\n            }\n        }\n        if (selectedConfiguration == null) {\n            selectedConfiguration = dependencyConfigurations.getByName(GUtil.elvis(declaredConfiguration, Dependency.DEFAULT_CONFIGURATION));\n        }\n        return selectedConfiguration;\n    }","id":46863,"modified_method":"@Override\n    public Configuration findProjectConfiguration(Map<String, String> clientAttributes) {\n        Configuration selectedConfiguration = null;\n        ConfigurationContainer dependencyConfigurations = getDependencyProject().getConfigurations();\n        String declaredConfiguration = getTargetConfiguration();\n        if (declaredConfiguration == null && clientAttributes!=null && !clientAttributes.isEmpty()) {\n            List<Configuration> candidateConfigurations = new ArrayList<Configuration>(1);\n            for (Configuration dependencyConfiguration : dependencyConfigurations) {\n                if (dependencyConfiguration.hasAttributes()) {\n                    Map<String, String> attributes = dependencyConfiguration.getAttributes();\n                    if (attributes.entrySet().containsAll(clientAttributes.entrySet())) {\n                        candidateConfigurations.add(dependencyConfiguration);\n                    }\n                }\n            }\n            if (candidateConfigurations.size()==1) {\n                selectedConfiguration = candidateConfigurations.get(0);\n            } else if (!candidateConfigurations.isEmpty()) {\n                throw new IllegalArgumentException(\"Cannot choose between the following configurations: \" + Sets.newTreeSet(Lists.transform(candidateConfigurations, CONFIG_NAME)) + \". All of then match the client attributes \" + clientAttributes);\n            }\n        }\n        if (selectedConfiguration == null) {\n            selectedConfiguration = dependencyConfigurations.getByName(GUtil.elvis(declaredConfiguration, Dependency.DEFAULT_CONFIGURATION));\n        }\n        return selectedConfiguration;\n    }","commit_id":"ce20a987860d38087cf5a9e6a9bdf9d1068ae850","url":"https://github.com/gradle/gradle"},{"original_method":"public DslOriginDependencyMetadata createDependencyDescriptor(String clientConfiguration, Map<String, String> clientAttributes, ModuleDependency dependency) {\n        ExternalModuleDependency externalModuleDependency = (ExternalModuleDependency) dependency;\n        boolean force = externalModuleDependency.isForce();\n        boolean changing = externalModuleDependency.isChanging();\n        boolean transitive = externalModuleDependency.isTransitive();\n\n        ModuleVersionSelector requested = new DefaultModuleVersionSelector(nullToEmpty(dependency.getGroup()), nullToEmpty(dependency.getName()), nullToEmpty(dependency.getVersion()));\n        ModuleComponentSelector selector = DefaultModuleComponentSelector.newSelector(requested);\n\n        LocalComponentDependencyMetadata dependencyMetaData = new LocalComponentDependencyMetadata(\n                selector, requested, clientConfiguration, clientAttributes, dependency.getTargetConfiguration().orNull(),\n                convertArtifacts(dependency.getArtifacts()),\n                convertExcludeRules(clientConfiguration, dependency.getExcludeRules()),\n                force, changing, transitive);\n        return new DslOriginDependencyMetadataWrapper(dependencyMetaData, dependency);\n    }","id":46864,"modified_method":"public DslOriginDependencyMetadata createDependencyDescriptor(String clientConfiguration, Map<String, String> clientAttributes, ModuleDependency dependency) {\n        ExternalModuleDependency externalModuleDependency = (ExternalModuleDependency) dependency;\n        boolean force = externalModuleDependency.isForce();\n        boolean changing = externalModuleDependency.isChanging();\n        boolean transitive = externalModuleDependency.isTransitive();\n\n        ModuleVersionSelector requested = new DefaultModuleVersionSelector(nullToEmpty(dependency.getGroup()), nullToEmpty(dependency.getName()), nullToEmpty(dependency.getVersion()));\n        ModuleComponentSelector selector = DefaultModuleComponentSelector.newSelector(requested);\n\n        LocalComponentDependencyMetadata dependencyMetaData = new LocalComponentDependencyMetadata(\n                selector, requested, clientConfiguration, clientAttributes, dependency.getTargetConfiguration(),\n                convertArtifacts(dependency.getArtifacts()),\n                convertExcludeRules(clientConfiguration, dependency.getExcludeRules()),\n                force, changing, transitive);\n        return new DslOriginDependencyMetadataWrapper(dependencyMetaData, dependency);\n    }","commit_id":"ce20a987860d38087cf5a9e6a9bdf9d1068ae850","url":"https://github.com/gradle/gradle"},{"original_method":"public DslOriginDependencyMetadata createDependencyDescriptor(String clientConfiguration, Map<String, String> clientAttributes, ModuleDependency dependency) {\n        ProjectDependencyInternal projectDependency = (ProjectDependencyInternal) dependency;\n        projectDependency.beforeResolved();\n        // TODO CC: find a better location to do this, on the selected dependency only, instead of all configurations\n        for (Configuration configuration : projectDependency.getDependencyProject().getConfigurations()) {\n            ((ConfigurationInternal)configuration).triggerWhenEmptyActionsIfNecessary();\n        }\n        Module module = getProjectModule(dependency);\n        ModuleVersionSelector requested = new DefaultModuleVersionSelector(module.getGroup(), module.getName(), module.getVersion());\n        ComponentSelector selector = DefaultProjectComponentSelector.newSelector(projectDependency.getDependencyProject());\n\n        LocalComponentDependencyMetadata dependencyMetaData = new LocalComponentDependencyMetadata(\n            selector, requested, clientConfiguration,\n            clientAttributes,\n            projectDependency.getTargetConfiguration().orNull(),\n            convertArtifacts(dependency.getArtifacts()),\n            convertExcludeRules(clientConfiguration, dependency.getExcludeRules()),\n            false, false, dependency.isTransitive());\n        return new DslOriginDependencyMetadataWrapper(dependencyMetaData, dependency);\n    }","id":46865,"modified_method":"public DslOriginDependencyMetadata createDependencyDescriptor(String clientConfiguration, Map<String, String> clientAttributes, ModuleDependency dependency) {\n        ProjectDependencyInternal projectDependency = (ProjectDependencyInternal) dependency;\n        projectDependency.beforeResolved();\n        // TODO CC: find a better location to do this, on the selected dependency only, instead of all configurations\n        for (Configuration configuration : projectDependency.getDependencyProject().getConfigurations()) {\n            ((ConfigurationInternal)configuration).triggerWhenEmptyActionsIfNecessary();\n        }\n        Module module = getProjectModule(dependency);\n        ModuleVersionSelector requested = new DefaultModuleVersionSelector(module.getGroup(), module.getName(), module.getVersion());\n        ComponentSelector selector = DefaultProjectComponentSelector.newSelector(projectDependency.getDependencyProject());\n\n        LocalComponentDependencyMetadata dependencyMetaData = new LocalComponentDependencyMetadata(\n            selector, requested, clientConfiguration,\n            clientAttributes,\n            projectDependency.getTargetConfiguration(),\n            convertArtifacts(dependency.getArtifacts()),\n            convertExcludeRules(clientConfiguration, dependency.getExcludeRules()),\n            false, false, dependency.isTransitive());\n        return new DslOriginDependencyMetadataWrapper(dependencyMetaData, dependency);\n    }","commit_id":"ce20a987860d38087cf5a9e6a9bdf9d1068ae850","url":"https://github.com/gradle/gradle"},{"original_method":"/**\n\t * {@inheritDoc}\n\t *\n\t * <p>This implementation simple delegates to {@link #readInternal(Class, HttpInputMessage)}. Future implementations\n\t * might add some default behavior, however.\n\t */\n\tpublic final T read(Class<T> clazz, HttpInputMessage inputMessage) throws IOException {\n\t\treturn readInternal(clazz, inputMessage);\n\t}","id":46866,"modified_method":"/**\n\t * {@inheritDoc}\n\t * <p>This implementation simple delegates to {@link #readInternal(Class, HttpInputMessage)}.\n\t * Future implementations might add some default behavior, however.\n\t */\n\tpublic final T read(Class<? extends T> clazz, HttpInputMessage inputMessage) throws IOException {\n\t\treturn readInternal(clazz, inputMessage);\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Abstract template method that reads the actualy object. Invoked from {@link #read(Class, HttpInputMessage)}.\n\t *\n\t * @param clazz the type of object to return\n\t * @param inputMessage the HTTP input message to read from\n\t * @return the converted object\n\t * @throws IOException in case of I/O errors\n\t * @throws HttpMessageNotReadableException in case of conversion errors\n\t */\n\tprotected abstract T readInternal(Class<T> clazz, HttpInputMessage inputMessage)\n\t\t\tthrows IOException, HttpMessageNotReadableException;","id":46867,"modified_method":"/**\n\t * Abstract template method that reads the actualy object. Invoked from {@link #read}.\n\t * @param clazz the type of object to return\n\t * @param inputMessage the HTTP input message to read from\n\t * @return the converted object\n\t * @throws IOException in case of I/O errors\n\t * @throws HttpMessageNotReadableException in case of conversion errors\n\t */\n\tprotected abstract T readInternal(Class<? extends T> clazz, HttpInputMessage inputMessage)\n\t\t\tthrows IOException, HttpMessageNotReadableException;","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Abstract template method called from {@link #read(Class, HttpInputMessage)}.\n\t *\n\t * @param clazz the type of object to return\n\t * @param headers the HTTP input headers\n\t * @param source the HTTP input body\n\t * @return the converted object\n\t * @throws IOException in case of I/O errors\n\t * @throws org.springframework.http.converter.HttpMessageConversionException in case of conversion errors\n\t */\n\tprotected abstract T readFromSource(Class<T> clazz, HttpHeaders headers, Source source) throws IOException;","id":46868,"modified_method":"/**\n\t * Abstract template method called from {@link #read(Class, HttpInputMessage)}.\n\t * @param clazz the type of object to return\n\t * @param headers the HTTP input headers\n\t * @param source the HTTP input body\n\t * @return the converted object\n\t * @throws IOException in case of I/O errors\n\t * @throws org.springframework.http.converter.HttpMessageConversionException in case of conversion errors\n\t */\n\tprotected abstract T readFromSource(Class<? extends T> clazz, HttpHeaders headers, Source source)\n\t\t\tthrows IOException;","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Transforms the given {@code Source} to the {@code Result}.\n\t *\n\t * @param source the source to transform from\n\t * @param result the result to transform to\n\t * @throws HttpMessageConversionException in case of transformation errors\n\t */\n\tprotected void transform(Source source, Result result) throws TransformerException {\n\t\tTransformer transformer = transformerFactory.newTransformer();\n\t\ttransformer.transform(source, result);\n\t}","id":46869,"modified_method":"/**\n\t * Transforms the given {@code Source} to the {@code Result}.\n\t * @param source the source to transform from\n\t * @param result the result to transform to\n\t * @throws HttpMessageConversionException in case of transformation errors\n\t */\n\tprotected void transform(Source source, Result result) throws TransformerException {\n\t\tthis.transformerFactory.newTransformer().transform(source, result);\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/** Invokes {@link #readFromSource(Class, HttpHeaders, Source)}. */\n\t@Override\n\tpublic final T readInternal(Class<T> clazz, HttpInputMessage inputMessage) throws IOException {\n\t\treturn readFromSource(clazz, inputMessage.getHeaders(), new StreamSource(inputMessage.getBody()));\n\t}","id":46870,"modified_method":"@Override\n\tpublic final T readInternal(Class<? extends T> clazz, HttpInputMessage inputMessage) throws IOException {\n\t\treturn readFromSource(clazz, inputMessage.getHeaders(), new StreamSource(inputMessage.getBody()));\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public List<MediaType> getSupportedMediaTypes() {\n\t\treturn Collections.unmodifiableList(readableMediaTypes);\n\t}","id":46871,"modified_method":"public List<MediaType> getSupportedMediaTypes() {\n\t\treturn Collections.unmodifiableList(this.readableMediaTypes);\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"private ImageOutputStream createImageOutputStream(OutputStream os) throws IOException {\n\t\tif (cacheDir != null) {\n\t\t\treturn new FileCacheImageOutputStream(os, cacheDir);\n\t\t}\n\t\telse {\n\t\t\treturn new MemoryCacheImageOutputStream(os);\n\t\t}\n\t}","id":46872,"modified_method":"private ImageOutputStream createImageOutputStream(OutputStream os) throws IOException {\n\t\tif (this.cacheDir != null) {\n\t\t\treturn new FileCacheImageOutputStream(os, this.cacheDir);\n\t\t}\n\t\telse {\n\t\t\treturn new MemoryCacheImageOutputStream(os);\n\t\t}\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public BufferedImageHttpMessageConverter() {\n\t\tString[] readerMediaTypes = ImageIO.getReaderMIMETypes();\n\t\tfor (String mediaType : readerMediaTypes) {\n\t\t\treadableMediaTypes.add(MediaType.parseMediaType(mediaType));\n\t\t}\n\n\t\tString[] writerMediaTypes = ImageIO.getWriterMIMETypes();\n\t\tif (writerMediaTypes.length > 0) {\n\t\t\tdefaultContentType = MediaType.parseMediaType(writerMediaTypes[0]);\n\t\t}\n\t}","id":46873,"modified_method":"public BufferedImageHttpMessageConverter() {\n\t\tString[] readerMediaTypes = ImageIO.getReaderMIMETypes();\n\t\tfor (String mediaType : readerMediaTypes) {\n\t\t\tthis.readableMediaTypes.add(MediaType.parseMediaType(mediaType));\n\t\t}\n\n\t\tString[] writerMediaTypes = ImageIO.getWriterMIMETypes();\n\t\tif (writerMediaTypes.length > 0) {\n\t\t\tthis.defaultContentType = MediaType.parseMediaType(writerMediaTypes[0]);\n\t\t}\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public BufferedImage read(Class<BufferedImage> clazz, HttpInputMessage inputMessage)\n\t\t\tthrows IOException, HttpMessageNotReadableException {\n\t\tImageInputStream imageInputStream = null;\n\t\tImageReader imageReader = null;\n\t\ttry {\n\t\t\timageInputStream = createImageInputStream(inputMessage.getBody());\n\t\t\tMediaType contentType = inputMessage.getHeaders().getContentType();\n\t\t\tIterator<ImageReader> imageReaders = ImageIO.getImageReadersByMIMEType(contentType.toString());\n\t\t\tif (imageReaders.hasNext()) {\n\t\t\t\timageReader = imageReaders.next();\n\t\t\t\tImageReadParam irp = imageReader.getDefaultReadParam();\n\t\t\t\tprocess(irp);\n\t\t\t\timageReader.setInput(imageInputStream, true);\n\t\t\t\treturn imageReader.read(0, irp);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new HttpMessageNotReadableException(\n\t\t\t\t\t\t\"Could not find javax.imageio.ImageReader for Content-Type [\" + contentType + \"]\");\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (imageReader != null) {\n\t\t\t\timageReader.dispose();\n\t\t\t}\n\t\t\tif (imageInputStream != null) {\n\t\t\t\ttry {\n\t\t\t\t\timageInputStream.close();\n\t\t\t\t}\n\t\t\t\tcatch (IOException ex) {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","id":46874,"modified_method":"public BufferedImage read(Class<? extends BufferedImage> clazz, HttpInputMessage inputMessage)\n\t\t\tthrows IOException, HttpMessageNotReadableException {\n\n\t\tImageInputStream imageInputStream = null;\n\t\tImageReader imageReader = null;\n\t\ttry {\n\t\t\timageInputStream = createImageInputStream(inputMessage.getBody());\n\t\t\tMediaType contentType = inputMessage.getHeaders().getContentType();\n\t\t\tIterator<ImageReader> imageReaders = ImageIO.getImageReadersByMIMEType(contentType.toString());\n\t\t\tif (imageReaders.hasNext()) {\n\t\t\t\timageReader = imageReaders.next();\n\t\t\t\tImageReadParam irp = imageReader.getDefaultReadParam();\n\t\t\t\tprocess(irp);\n\t\t\t\timageReader.setInput(imageInputStream, true);\n\t\t\t\treturn imageReader.read(0, irp);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new HttpMessageNotReadableException(\n\t\t\t\t\t\t\"Could not find javax.imageio.ImageReader for Content-Type [\" + contentType + \"]\");\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (imageReader != null) {\n\t\t\t\timageReader.dispose();\n\t\t\t}\n\t\t\tif (imageInputStream != null) {\n\t\t\t\ttry {\n\t\t\t\t\timageInputStream.close();\n\t\t\t\t}\n\t\t\t\tcatch (IOException ex) {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public boolean canWrite(Class<?> clazz, MediaType mediaType) {\n\t\tif (BufferedImage.class.equals(clazz)) {\n\t\t\treturn isWritable(mediaType);\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}","id":46875,"modified_method":"public boolean canWrite(Class<?> clazz, MediaType mediaType) {\n\t\treturn (BufferedImage.class.equals(clazz) && isWritable(mediaType));\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Returns the default {@code Content-Type} to be used for writing. Called when {@link #write} is invoked without a\n\t * specified content type parameter.\n\t *\n\t * @return the default content type\n\t */\n\tpublic MediaType getDefaultContentType() {\n\t\treturn defaultContentType;\n\t}","id":46876,"modified_method":"/**\n\t * Returns the default {@code Content-Type} to be used for writing.\n\t * Called when {@link #write} is invoked without a specified content type parameter.\n\t */\n\tpublic MediaType getDefaultContentType() {\n\t\treturn this.defaultContentType;\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public boolean canRead(Class<?> clazz, MediaType mediaType) {\n\t\tif (BufferedImage.class.equals(clazz)) {\n\t\t\treturn isReadable(mediaType);\n\t\t}\n\t\telse {\n\t\t\treturn false;\n\t\t}\n\t}","id":46877,"modified_method":"public boolean canRead(Class<?> clazz, MediaType mediaType) {\n\t\treturn (BufferedImage.class.equals(clazz) && isReadable(mediaType));\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"private ImageInputStream createImageInputStream(InputStream is) throws IOException {\n\t\tif (cacheDir != null) {\n\t\t\treturn new FileCacheImageInputStream(is, cacheDir);\n\t\t}\n\t\telse {\n\t\t\treturn new MemoryCacheImageInputStream(is);\n\t\t}\n\t}","id":46878,"modified_method":"private ImageInputStream createImageInputStream(InputStream is) throws IOException {\n\t\tif (this.cacheDir != null) {\n\t\t\treturn new FileCacheImageInputStream(is, cacheDir);\n\t\t}\n\t\telse {\n\t\t\treturn new MemoryCacheImageInputStream(is);\n\t\t}\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Override\n\tpublic byte[] readInternal(Class<byte[]> clazz, HttpInputMessage inputMessage) throws IOException {\n\t\tlong contentLength = inputMessage.getHeaders().getContentLength();\n\t\tif (contentLength >= 0) {\n\t\t\tByteArrayOutputStream bos = new ByteArrayOutputStream((int) contentLength);\n\t\t\tFileCopyUtils.copy(inputMessage.getBody(), bos);\n\t\t\treturn bos.toByteArray();\n\t\t}\n\t\telse {\n\t\t\treturn FileCopyUtils.copyToByteArray(inputMessage.getBody());\n\t\t}\n\t}","id":46879,"modified_method":"@Override\n\tpublic byte[] readInternal(Class clazz, HttpInputMessage inputMessage) throws IOException {\n\t\tlong contentLength = inputMessage.getHeaders().getContentLength();\n\t\tif (contentLength >= 0) {\n\t\t\tByteArrayOutputStream bos = new ByteArrayOutputStream((int) contentLength);\n\t\t\tFileCopyUtils.copy(inputMessage.getBody(), bos);\n\t\t\treturn bos.toByteArray();\n\t\t}\n\t\telse {\n\t\t\treturn FileCopyUtils.copyToByteArray(inputMessage.getBody());\n\t\t}\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Override\n\tpublic MultiValueMap<String, String> readInternal(Class<MultiValueMap<String, String>> clazz,\n\t\t\tHttpInputMessage inputMessage) throws IOException {\n\t\tMediaType contentType = inputMessage.getHeaders().getContentType();\n\t\tCharset charset = contentType.getCharSet() != null ? contentType.getCharSet() : DEFAULT_CHARSET;\n\t\tString body = FileCopyUtils.copyToString(new InputStreamReader(inputMessage.getBody(), charset));\n\n\t\tString[] pairs = StringUtils.tokenizeToStringArray(body, \"&\");\n\n\t\tMultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>(pairs.length);\n\n\t\tfor (String pair : pairs) {\n\t\t\tint idx = pair.indexOf('=');\n\t\t\tif (idx == -1) {\n\t\t\t\tresult.add(URLDecoder.decode(pair, charset.name()), null);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tString name = URLDecoder.decode(pair.substring(0, idx), charset.name());\n\t\t\t\tString value = URLDecoder.decode(pair.substring(idx + 1), charset.name());\n\t\t\t\tresult.add(name, value);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}","id":46880,"modified_method":"@Override\n\tpublic MultiValueMap<String, String> readInternal(Class clazz, HttpInputMessage inputMessage) throws IOException {\n\t\tMediaType contentType = inputMessage.getHeaders().getContentType();\n\t\tCharset charset = contentType.getCharSet() != null ? contentType.getCharSet() : DEFAULT_CHARSET;\n\t\tString body = FileCopyUtils.copyToString(new InputStreamReader(inputMessage.getBody(), charset));\n\n\t\tString[] pairs = StringUtils.tokenizeToStringArray(body, \"&\");\n\n\t\tMultiValueMap<String, String> result = new LinkedMultiValueMap<String, String>(pairs.length);\n\n\t\tfor (String pair : pairs) {\n\t\t\tint idx = pair.indexOf('=');\n\t\t\tif (idx == -1) {\n\t\t\t\tresult.add(URLDecoder.decode(pair, charset.name()), null);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tString name = URLDecoder.decode(pair.substring(0, idx), charset.name());\n\t\t\t\tString value = URLDecoder.decode(pair.substring(idx + 1), charset.name());\n\t\t\t\tresult.add(name, value);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Override\n\t\tprotected T readInternal(Class<T> clazz, HttpInputMessage inputMessage)\n\t\t\t\tthrows IOException, HttpMessageNotReadableException {\n\t\t\tfail(\"Not expected\");\n\t\t\treturn null;\n\t\t}","id":46881,"modified_method":"@Override\n\t\tprotected T readInternal(Class clazz, HttpInputMessage inputMessage)\n\t\t\t\tthrows IOException, HttpMessageNotReadableException {\n\t\t\tfail(\"Not expected\");\n\t\t\treturn null;\n\t\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Override\n\tprotected Object readFromSource(Class<Object> clazz, HttpHeaders headers, Source source) throws IOException {\n\t\ttry {\n\t\t\tUnmarshaller unmarshaller = createUnmarshaller(clazz);\n\t\t\tif (clazz.isAnnotationPresent(XmlRootElement.class)) {\n\t\t\t\treturn unmarshaller.unmarshal(source);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tJAXBElement<Object> jaxbElement = unmarshaller.unmarshal(source, clazz);\n\t\t\t\treturn jaxbElement.getValue();\n\t\t\t}\n\t\t}\n\t\tcatch (UnmarshalException ex) {\n\t\t\tthrow new HttpMessageNotReadableException(\"Could not unmarshal to [\" + clazz + \"]: \" + ex.getMessage(), ex);\n\n\t\t}\n\t\tcatch (JAXBException ex) {\n\t\t\tthrow new HttpMessageConversionException(\"Could not instantiate JAXBContext: \" + ex.getMessage(), ex);\n\t\t}\n\t}","id":46882,"modified_method":"@Override\n\tprotected Object readFromSource(Class<?> clazz, HttpHeaders headers, Source source) throws IOException {\n\t\ttry {\n\t\t\tUnmarshaller unmarshaller = createUnmarshaller(clazz);\n\t\t\tif (clazz.isAnnotationPresent(XmlRootElement.class)) {\n\t\t\t\treturn unmarshaller.unmarshal(source);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tJAXBElement jaxbElement = unmarshaller.unmarshal(source, clazz);\n\t\t\t\treturn jaxbElement.getValue();\n\t\t\t}\n\t\t}\n\t\tcatch (UnmarshalException ex) {\n\t\t\tthrow new HttpMessageNotReadableException(\"Could not unmarshal to [\" + clazz + \"]: \" + ex.getMessage(), ex);\n\n\t\t}\n\t\tcatch (JAXBException ex) {\n\t\t\tthrow new HttpMessageConversionException(\"Could not instantiate JAXBContext: \" + ex.getMessage(), ex);\n\t\t}\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Override\n\tprotected void writeInternal(Object o, HttpOutputMessage outputMessage)\n\t\t\tthrows IOException, HttpMessageNotWritableException {\n\t\tJsonEncoding encoding = getEncoding(outputMessage.getHeaders().getContentType());\n\t\tJsonGenerator jsonGenerator =\n\t\t\t\tobjectMapper.getJsonFactory().createJsonGenerator(outputMessage.getBody(), encoding);\n\t\tif (prefixJson) {\n\t\t\tjsonGenerator.writeRaw(\"{} && \");\n\t\t}\n\t\tobjectMapper.writeValue(jsonGenerator, o);\n\t}","id":46883,"modified_method":"@Override\n\tprotected void writeInternal(Object o, HttpOutputMessage outputMessage)\n\t\t\tthrows IOException, HttpMessageNotWritableException {\n\n\t\tJsonEncoding encoding = getEncoding(outputMessage.getHeaders().getContentType());\n\t\tJsonGenerator jsonGenerator =\n\t\t\t\tthis.objectMapper.getJsonFactory().createJsonGenerator(outputMessage.getBody(), encoding);\n\t\tif (this.prefixJson) {\n\t\t\tjsonGenerator.writeRaw(\"{} && \");\n\t\t}\n\t\tthis.objectMapper.writeValue(jsonGenerator, o);\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Override\n\tpublic boolean canWrite(Class<?> clazz, MediaType mediaType) {\n\t\treturn objectMapper.canSerialize(clazz) && canWrite(mediaType);\n\t}","id":46884,"modified_method":"@Override\n\tpublic boolean canWrite(Class<?> clazz, MediaType mediaType) {\n\t\treturn this.objectMapper.canSerialize(clazz) && canWrite(mediaType);\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Override\n\tprotected Object readInternal(Class<Object> clazz, HttpInputMessage inputMessage)\n\t\t\tthrows IOException, HttpMessageNotReadableException {\n\t\treturn objectMapper.readValue(inputMessage.getBody(), clazz);\n\t}","id":46885,"modified_method":"@Override\n\tprotected Object readInternal(Class<?> clazz, HttpInputMessage inputMessage)\n\t\t\tthrows IOException, HttpMessageNotReadableException {\n\n\t\treturn this.objectMapper.readValue(inputMessage.getBody(), clazz);\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Override\n\tpublic boolean canRead(Class<?> clazz, MediaType mediaType) {\n\t\tJavaType javaType = TypeFactory.fromClass(clazz);\n\t\treturn objectMapper.canDeserialize(javaType) && canRead(mediaType);\n\t}","id":46886,"modified_method":"@Override\n\tpublic boolean canRead(Class<?> clazz, MediaType mediaType) {\n\t\tJavaType javaType = TypeFactory.fromClass(clazz);\n\t\treturn this.objectMapper.canDeserialize(javaType) && canRead(mediaType);\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Test\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void readTyped() throws IOException {\n\t\tString body =\n\t\t\t\t\"{\\\"bytes\\\":\\\"AQI=\\\",\\\"array\\\":[\\\"Foo\\\",\\\"Bar\\\"],\\\"number\\\":42,\\\"string\\\":\\\"Foo\\\",\\\"bool\\\":true,\\\"fraction\\\":42.0}\";\n\t\tMockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes(\"UTF-8\"));\n\t\tinputMessage.getHeaders().setContentType(new MediaType(\"application\", \"json\"));\n\t\tMyBean result = (MyBean) converter.read((Class) MyBean.class, inputMessage);\n\t\tassertEquals(\"Foo\", result.getString());\n\t\tassertEquals(42, result.getNumber());\n\t\tassertEquals(42F, result.getFraction(), 0F);\n\t\tassertArrayEquals(new String[]{\"Foo\", \"Bar\"}, result.getArray());\n\t\tassertTrue(result.isBool());\n\t\tassertArrayEquals(new byte[]{0x1, 0x2}, result.getBytes());\n\t}","id":46887,"modified_method":"@Test\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void readTyped() throws IOException {\n\t\tString body =\n\t\t\t\t\"{\\\"bytes\\\":\\\"AQI=\\\",\\\"array\\\":[\\\"Foo\\\",\\\"Bar\\\"],\\\"number\\\":42,\\\"string\\\":\\\"Foo\\\",\\\"bool\\\":true,\\\"fraction\\\":42.0}\";\n\t\tMockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes(\"UTF-8\"));\n\t\tinputMessage.getHeaders().setContentType(new MediaType(\"application\", \"json\"));\n\t\tMyBean result = (MyBean) converter.read(MyBean.class, inputMessage);\n\t\tassertEquals(\"Foo\", result.getString());\n\t\tassertEquals(42, result.getNumber());\n\t\tassertEquals(42F, result.getFraction(), 0F);\n\t\tassertArrayEquals(new String[]{\"Foo\", \"Bar\"}, result.getArray());\n\t\tassertTrue(result.isBool());\n\t\tassertArrayEquals(new byte[]{0x1, 0x2}, result.getBytes());\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Test\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void readUntyped() throws IOException {\n\t\tString body =\n\t\t\t\t\"{\\\"bytes\\\":\\\"AQI=\\\",\\\"array\\\":[\\\"Foo\\\",\\\"Bar\\\"],\\\"number\\\":42,\\\"string\\\":\\\"Foo\\\",\\\"bool\\\":true,\\\"fraction\\\":42.0}\";\n\t\tMockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes(\"UTF-8\"));\n\t\tinputMessage.getHeaders().setContentType(new MediaType(\"application\", \"json\"));\n\t\tHashMap<String, Object> result = (HashMap<String, Object>) converter.read((Class)HashMap.class, inputMessage);\n\t\tassertEquals(\"Foo\", result.get(\"string\"));\n\t\tassertEquals(42, result.get(\"number\"));\n\t\tassertEquals(42D, (Double) result.get(\"fraction\"), 0D);\n\t\tList array = new ArrayList();\n\t\tarray.add(\"Foo\");\n\t\tarray.add(\"Bar\");\n\t\tassertEquals(array, result.get(\"array\"));\n\t\tassertEquals(Boolean.TRUE, result.get(\"bool\"));\n\t\tassertEquals(\"AQI=\", result.get(\"bytes\"));\n\t}","id":46888,"modified_method":"@Test\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void readUntyped() throws IOException {\n\t\tString body =\n\t\t\t\t\"{\\\"bytes\\\":\\\"AQI=\\\",\\\"array\\\":[\\\"Foo\\\",\\\"Bar\\\"],\\\"number\\\":42,\\\"string\\\":\\\"Foo\\\",\\\"bool\\\":true,\\\"fraction\\\":42.0}\";\n\t\tMockHttpInputMessage inputMessage = new MockHttpInputMessage(body.getBytes(\"UTF-8\"));\n\t\tinputMessage.getHeaders().setContentType(new MediaType(\"application\", \"json\"));\n\t\tHashMap<String, Object> result = (HashMap<String, Object>) converter.read(HashMap.class, inputMessage);\n\t\tassertEquals(\"Foo\", result.get(\"string\"));\n\t\tassertEquals(42, result.get(\"number\"));\n\t\tassertEquals(42D, (Double) result.get(\"fraction\"), 0D);\n\t\tList array = new ArrayList();\n\t\tarray.add(\"Foo\");\n\t\tarray.add(\"Bar\");\n\t\tassertEquals(array, result.get(\"array\"));\n\t\tassertEquals(Boolean.TRUE, result.get(\"bool\"));\n\t\tassertEquals(\"AQI=\", result.get(\"bytes\"));\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Override\n\tprotected void writeToResult(Object o, HttpHeaders headers, Result result) throws IOException {\n\t\tAssert.notNull(this.marshaller, \"Property 'marshaller' is required\");\n\t\ttry {\n\t\t\tmarshaller.marshal(o, result);\n\t\t}\n\t\tcatch (MarshallingFailureException ex) {\n\t\t\tthrow new HttpMessageNotWritableException(\"Could not write [\" + o + \"]\", ex);\n\t\t}\n\t}","id":46889,"modified_method":"@Override\n\tprotected void writeToResult(Object o, HttpHeaders headers, Result result) throws IOException {\n\t\tAssert.notNull(this.marshaller, \"Property 'marshaller' is required\");\n\t\ttry {\n\t\t\tthis.marshaller.marshal(o, result);\n\t\t}\n\t\tcatch (MarshallingFailureException ex) {\n\t\t\tthrow new HttpMessageNotWritableException(\"Could not write [\" + o + \"]\", ex);\n\t\t}\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Override\n\tpublic boolean supports(Class<?> clazz) {\n\t\treturn unmarshaller.supports(clazz);\n\t}","id":46890,"modified_method":"@Override\n\tpublic boolean supports(Class<?> clazz) {\n\t\treturn this.unmarshaller.supports(clazz);\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Override\n\tprotected Object readFromSource(Class<Object> clazz, HttpHeaders headers, Source source) throws IOException {\n\t\tAssert.notNull(this.unmarshaller, \"Property 'unmarshaller' is required\");\n\t\ttry {\n\t\t\treturn unmarshaller.unmarshal(source);\n\t\t}\n\t\tcatch (UnmarshallingFailureException ex) {\n\t\t\tthrow new HttpMessageNotReadableException(\"Could not read [\" + clazz + \"]\", ex);\n\t\t}\n\t}","id":46891,"modified_method":"@Override\n\tprotected Object readFromSource(Class<?> clazz, HttpHeaders headers, Source source) throws IOException {\n\t\tAssert.notNull(this.unmarshaller, \"Property 'unmarshaller' is required\");\n\t\ttry {\n\t\t\treturn this.unmarshaller.unmarshal(source);\n\t\t}\n\t\tcatch (UnmarshallingFailureException ex) {\n\t\t\tthrow new HttpMessageNotReadableException(\"Could not read [\" + clazz + \"]\", ex);\n\t\t}\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Override\n\t@SuppressWarnings(\"unchecked\")\n\tprotected T readFromSource(Class<T> clazz, HttpHeaders headers, Source source) throws IOException {\n\t\ttry {\n\t\t\tif (DOMSource.class.equals(clazz)) {\n\t\t\t\tDOMResult domResult = new DOMResult();\n\t\t\t\ttransform(source, domResult);\n\t\t\t\treturn (T) new DOMSource(domResult.getNode());\n\t\t\t}\n\t\t\telse if (SAXSource.class.equals(clazz)) {\n\t\t\t\tByteArrayInputStream bis = transformToByteArrayInputStream(source);\n\t\t\t\treturn (T) new SAXSource(new InputSource(bis));\n\t\t\t}\n\t\t\telse if (StreamSource.class.equals(clazz) || Source.class.equals(clazz)) {\n\t\t\t\tByteArrayInputStream bis = transformToByteArrayInputStream(source);\n\t\t\t\treturn (T) new StreamSource(bis);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new HttpMessageConversionException(\"Could not read class [\" + clazz +\n\t\t\t\t\t\t\"]. Only DOMSource, SAXSource, and StreamSource are supported.\");\n\t\t\t}\n\t\t}\n\t\tcatch (TransformerException ex) {\n\t\t\tthrow new HttpMessageNotReadableException(\"Could not transform from [\" + source + \"] to [\" + clazz + \"]\",\n\t\t\t\t\tex);\n\t\t}\n\t}","id":46892,"modified_method":"@Override\n\t@SuppressWarnings(\"unchecked\")\n\tprotected T readFromSource(Class clazz, HttpHeaders headers, Source source) throws IOException {\n\t\ttry {\n\t\t\tif (DOMSource.class.equals(clazz)) {\n\t\t\t\tDOMResult domResult = new DOMResult();\n\t\t\t\ttransform(source, domResult);\n\t\t\t\treturn (T) new DOMSource(domResult.getNode());\n\t\t\t}\n\t\t\telse if (SAXSource.class.equals(clazz)) {\n\t\t\t\tByteArrayInputStream bis = transformToByteArrayInputStream(source);\n\t\t\t\treturn (T) new SAXSource(new InputSource(bis));\n\t\t\t}\n\t\t\telse if (StreamSource.class.equals(clazz) || Source.class.equals(clazz)) {\n\t\t\t\tByteArrayInputStream bis = transformToByteArrayInputStream(source);\n\t\t\t\treturn (T) new StreamSource(bis);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new HttpMessageConversionException(\"Could not read class [\" + clazz +\n\t\t\t\t\t\t\"]. Only DOMSource, SAXSource, and StreamSource are supported.\");\n\t\t\t}\n\t\t}\n\t\tcatch (TransformerException ex) {\n\t\t\tthrow new HttpMessageNotReadableException(\"Could not transform from [\" + source + \"] to [\" + clazz + \"]\",\n\t\t\t\t\tex);\n\t\t}\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Override\n\tpublic String readInternal(Class<String> clazz, HttpInputMessage inputMessage) throws IOException {\n\t\tMediaType contentType = inputMessage.getHeaders().getContentType();\n\t\tCharset charset = contentType.getCharSet() != null ? contentType.getCharSet() : DEFAULT_CHARSET;\n\t\treturn FileCopyUtils.copyToString(new InputStreamReader(inputMessage.getBody(), charset));\n\t}","id":46893,"modified_method":"@Override\n\tprotected String readInternal(Class clazz, HttpInputMessage inputMessage) throws IOException {\n\t\tMediaType contentType = inputMessage.getHeaders().getContentType();\n\t\tCharset charset = contentType.getCharSet() != null ? contentType.getCharSet() : DEFAULT_CHARSET;\n\t\treturn FileCopyUtils.copyToString(new InputStreamReader(inputMessage.getBody(), charset));\n\t}","commit_id":"4ae1709313bece1c34646ec29a0189c58bf88584","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public Object readFrom(Class<Object> source, Type genericType, Annotation[] annotations, MediaType m,  \n        MultivaluedMap<String, String> headers, InputStream is) \n        throws IOException {\n        if (DOMSource.class.isAssignableFrom(source) || Document.class.isAssignableFrom(source)) {\n            \n            boolean docRequired = Document.class.isAssignableFrom(source);\n            XMLStreamReader reader = StaxUtils.createXMLStreamReader(is);\n            try {\n                Document doc = StaxUtils.read(reader);\n                return docRequired ? doc : new DOMSource(doc);\n            } catch (Exception e) {\n                IOException ioex = new IOException(\"Problem creating a Source object\");\n                ioex.setStackTrace(e.getStackTrace());\n                throw ioex;\n            } finally {\n                try {\n                    reader.close();\n                } catch (XMLStreamException e) {\n                    //ignore\n                }\n            }\n        } else if (StreamSource.class.isAssignableFrom(source)\n                   || Source.class.isAssignableFrom(source)) {\n            return new StreamSource(is);\n        } else if (XMLSource.class.isAssignableFrom(source)) {\n            return new XMLSource(is);\n        }\n        \n        throw new IOException(\"Unrecognized source\");\n    }","id":46894,"modified_method":"public Object readFrom(Class<Object> source, Type genericType, Annotation[] annotations, MediaType m,  \n        MultivaluedMap<String, String> headers, InputStream is) \n        throws IOException {\n        \n        Class<?> theSource = source;\n        if (theSource == Source.class) {\n            String s = getPreferredSource();\n            if (\"sax\".equalsIgnoreCase(s) || \"cxf.stax\".equalsIgnoreCase(s)) {\n                theSource = SAXSource.class;\n            }\n        }\n        \n        if (DOMSource.class.isAssignableFrom(theSource) || Document.class.isAssignableFrom(theSource)) {\n            \n            boolean docRequired = Document.class.isAssignableFrom(theSource);\n            XMLStreamReader reader = StaxUtils.createXMLStreamReader(is);\n            try {\n                Document doc = StaxUtils.read(reader);\n                return docRequired ? doc : new DOMSource(doc);\n            } catch (Exception e) {\n                IOException ioex = new IOException(\"Problem creating a Source object\");\n                ioex.setStackTrace(e.getStackTrace());\n                throw ioex;\n            } finally {\n                try {\n                    reader.close();\n                } catch (XMLStreamException e) {\n                    //ignore\n                }\n            }\n        } else if (SAXSource.class.isAssignableFrom(theSource)\n                  || StaxSource.class.isAssignableFrom(theSource)) {\n            return new StaxSource(StaxUtils.createXMLStreamReader(is));\n        } else if (StreamSource.class.isAssignableFrom(theSource)\n                   || Source.class.isAssignableFrom(theSource)) {\n            return new StreamSource(is);\n        } else if (XMLSource.class.isAssignableFrom(theSource)) {\n            return new XMLSource(is);\n        }\n        \n        throw new IOException(\"Unrecognized source\");\n    }","commit_id":"cb2b00350fd2da389521a491e1af62f8dce29ef1","url":"https://github.com/apache/cxf"},{"original_method":"public void writeTo(Source source, Class<?> clazz, Type genericType, Annotation[] annotations,  \n        MediaType m, MultivaluedMap<String, Object> headers, OutputStream os)\n        throws IOException {\n        \n        String encoding = \"utf-8\"; //FIXME\n        \n        XMLStreamReader reader = StaxUtils.createXMLStreamReader(source);\n        XMLStreamWriter writer = StaxUtils.createXMLStreamWriter(os, encoding);\n        try {\n            StaxUtils.copy(reader, writer);\n        } catch (XMLStreamException e) {\n            throw new WebApplicationException(e);\n        } finally {\n            try {\n                reader.close();\n            } catch (XMLStreamException e) {\n                //ignore\n            }\n            try {\n                writer.flush();\n            } catch (XMLStreamException e) {\n                //ignore\n            }\n        }\n    }","id":46895,"modified_method":"public void writeTo(Source source, Class<?> clazz, Type genericType, Annotation[] annotations,  \n        MediaType mt, MultivaluedMap<String, Object> headers, OutputStream os)\n        throws IOException {\n        \n        String encoding = HttpUtils.getSetEncoding(mt, headers, \"UTF-8\");\n        \n        XMLStreamReader reader = StaxUtils.createXMLStreamReader(source);\n        XMLStreamWriter writer = StaxUtils.createXMLStreamWriter(os, encoding);\n        try {\n            StaxUtils.copy(reader, writer);\n        } catch (XMLStreamException e) {\n            throw new WebApplicationException(e);\n        } finally {\n            try {\n                reader.close();\n            } catch (XMLStreamException e) {\n                //ignore\n            }\n            try {\n                writer.flush();\n            } catch (XMLStreamException e) {\n                //ignore\n            }\n        }\n    }","commit_id":"cb2b00350fd2da389521a491e1af62f8dce29ef1","url":"https://github.com/apache/cxf"},{"original_method":"@Test\n    public void testReadFrom() throws Exception {\n        SourceProvider p = new SourceProvider();\n        assertSame(StreamSource.class, verifyRead(p, StreamSource.class).getClass());\n        assertSame(StreamSource.class, verifyRead(p, Source.class).getClass());\n        assertSame(DOMSource.class, verifyRead(p, DOMSource.class).getClass());\n        assertTrue(Document.class.isAssignableFrom(verifyRead(p, Document.class).getClass()));\n    }","id":46896,"modified_method":"@Test\n    public void testReadFrom() throws Exception {\n        SourceProvider p = new TestSourceProvider();\n        assertSame(StreamSource.class, verifyRead(p, StreamSource.class).getClass());\n        assertSame(StreamSource.class, verifyRead(p, Source.class).getClass());\n        assertSame(StaxSource.class, verifyRead(p, SAXSource.class).getClass());\n        assertSame(StaxSource.class, verifyRead(p, StaxSource.class).getClass());\n        assertSame(DOMSource.class, verifyRead(p, DOMSource.class).getClass());\n        assertTrue(Document.class.isAssignableFrom(verifyRead(p, Document.class).getClass()));\n    }","commit_id":"cb2b00350fd2da389521a491e1af62f8dce29ef1","url":"https://github.com/apache/cxf"},{"original_method":"@Test\n    public void testWriteTo() throws Exception {\n        SourceProvider p = new SourceProvider();\n        StreamSource s = new StreamSource(new ByteArrayInputStream(\"<test/>\".getBytes()));\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        p.writeTo(s, null, null, null, null, null, os);\n        assertTrue(os.toString().contains(\"<test/>\"));\n        os = new ByteArrayOutputStream();\n        p.writeTo(createDomSource(), null, null, null, null, null, os);\n        assertTrue(os.toString().contains(\"<test/>\"));\n    }","id":46897,"modified_method":"@Test\n    public void testWriteTo() throws Exception {\n        SourceProvider p = new TestSourceProvider();\n        StreamSource s = new StreamSource(new ByteArrayInputStream(\"<test/>\".getBytes()));\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        p.writeTo(s, null, null, null, MediaType.APPLICATION_XML_TYPE, \n                  new MetadataMap<String, Object>(), os);\n        assertTrue(os.toString().contains(\"<test/>\"));\n        os = new ByteArrayOutputStream();\n        p.writeTo(createDomSource(), null, null, null, MediaType.APPLICATION_XML_TYPE, \n                  new MetadataMap<String, Object>(), os);\n        assertTrue(os.toString().contains(\"<test/>\"));\n    }","commit_id":"cb2b00350fd2da389521a491e1af62f8dce29ef1","url":"https://github.com/apache/cxf"},{"original_method":"protected Templates createTemplates(Templates templates, \n                                      Map<String, Object> configuredParams,\n                                      Map<String, String> outProps) {\n        if (templates == null) {\n            LOG.severe(\"No template is available\");\n            throw new WebApplicationException(500);\n        }\n        \n        TemplatesImpl templ =  new TemplatesImpl(templates);\n        MessageContext mc = getContext();\n        if (mc != null) {\n            UriInfo ui = mc.getUriInfo();\n            MultivaluedMap<String, String> params = ui.getPathParameters();\n            for (Map.Entry<String, List<String>> entry : params.entrySet()) {\n                String value = entry.getValue().get(0);\n                int ind = value.indexOf(\";\");\n                if (ind > 0) {\n                    value = value.substring(0, ind);\n                }\n                templ.setTransformerParameter(entry.getKey(), value);\n            }\n            \n            List<PathSegment> segments = ui.getPathSegments();\n            if (segments.size() > 0) {\n                setTransformParameters(templ, segments.get(segments.size() - 1).getMatrixParameters());\n            }\n            setTransformParameters(templ, ui.getQueryParameters());\n            templ.setTransformerParameter(ABSOLUTE_PATH_PARAMETER, ui.getAbsolutePath().toString());\n            templ.setTransformerParameter(RELATIVE_PATH_PARAMETER, ui.getPath());\n            templ.setTransformerParameter(BASE_PATH_PARAMETER, ui.getBaseUri().toString());\n            if (configuredParams != null) {\n                for (Map.Entry<String, Object> entry : configuredParams.entrySet()) {\n                    templ.setTransformerParameter(entry.getKey(), entry.getValue());\n                }\n            }\n        }\n        if (outProps != null) {\n            templ.setOutProperties(outProps);\n        }\n        \n        return templ;\n    }","id":46898,"modified_method":"protected Templates createTemplates(Templates templates, \n                                      Map<String, Object> configuredParams,\n                                      Map<String, String> outProps) {\n        if (templates == null) {\n            if (supportJaxbOnly) {\n                return null;\n            } else {\n                LOG.severe(\"No template is available\");\n                throw new WebApplicationException(500);\n            }\n        }\n        \n        TemplatesImpl templ =  new TemplatesImpl(templates);\n        MessageContext mc = getContext();\n        if (mc != null) {\n            UriInfo ui = mc.getUriInfo();\n            MultivaluedMap<String, String> params = ui.getPathParameters();\n            for (Map.Entry<String, List<String>> entry : params.entrySet()) {\n                String value = entry.getValue().get(0);\n                int ind = value.indexOf(\";\");\n                if (ind > 0) {\n                    value = value.substring(0, ind);\n                }\n                templ.setTransformerParameter(entry.getKey(), value);\n            }\n            \n            List<PathSegment> segments = ui.getPathSegments();\n            if (segments.size() > 0) {\n                setTransformParameters(templ, segments.get(segments.size() - 1).getMatrixParameters());\n            }\n            setTransformParameters(templ, ui.getQueryParameters());\n            templ.setTransformerParameter(ABSOLUTE_PATH_PARAMETER, ui.getAbsolutePath().toString());\n            templ.setTransformerParameter(RELATIVE_PATH_PARAMETER, ui.getPath());\n            templ.setTransformerParameter(BASE_PATH_PARAMETER, ui.getBaseUri().toString());\n            if (configuredParams != null) {\n                for (Map.Entry<String, Object> entry : configuredParams.entrySet()) {\n                    templ.setTransformerParameter(entry.getKey(), entry.getValue());\n                }\n            }\n        }\n        if (outProps != null) {\n            templ.setOutProperties(outProps);\n        }\n        \n        return templ;\n    }","commit_id":"cb2b00350fd2da389521a491e1af62f8dce29ef1","url":"https://github.com/apache/cxf"},{"original_method":"@Override\n    protected Object unmarshalFromInputStream(Unmarshaller unmarshaller, InputStream is, MediaType mt) \n        throws JAXBException {\n        try {\n            XMLFilter filter = factory.newXMLFilter(\n                createTemplates(getInTemplates(mt), inParamsMap, inProperties));\n            SAXSource source = new SAXSource(filter, new InputSource(is));\n            if (systemId != null) {\n                source.setSystemId(systemId);\n            }\n            return unmarshaller.unmarshal(source);\n        } catch (TransformerConfigurationException ex) {\n            LOG.warning(\"Transformation exception : \" + ex.getMessage());\n            throw new WebApplicationException(ex);\n        }\n    }","id":46899,"modified_method":"@Override\n    protected Object unmarshalFromInputStream(Unmarshaller unmarshaller, InputStream is, MediaType mt) \n        throws JAXBException {\n        try {\n\n            Templates t = createTemplates(getInTemplates(mt), inParamsMap, inProperties);\n            if (t == null && supportJaxbOnly) {\n                return super.unmarshalFromInputStream(unmarshaller, is, mt);\n            }\n            XMLFilter filter = factory.newXMLFilter(t);\n            SAXSource source = new SAXSource(filter, new InputSource(is));\n            if (systemId != null) {\n                source.setSystemId(systemId);\n            }\n            return unmarshaller.unmarshal(source);\n        } catch (TransformerConfigurationException ex) {\n            LOG.warning(\"Transformation exception : \" + ex.getMessage());\n            throw new WebApplicationException(ex);\n        }\n    }","commit_id":"cb2b00350fd2da389521a491e1af62f8dce29ef1","url":"https://github.com/apache/cxf"},{"original_method":"protected Templates getInTemplates(MediaType mt) {\n        return inTemplates != null ? inTemplates \n            : inMediaTemplates.get(mt.getType() + \"/\" + mt.getSubtype());\n    }","id":46900,"modified_method":"protected Templates getInTemplates(MediaType mt) {\n        return inTemplates != null ? inTemplates \n            : inMediaTemplates != null ? inMediaTemplates.get(mt.getType() + \"/\" + mt.getSubtype()) : null;\n    }","commit_id":"cb2b00350fd2da389521a491e1af62f8dce29ef1","url":"https://github.com/apache/cxf"},{"original_method":"protected Templates getOutTemplates(MediaType mt) {\n        return outTemplates != null ? outTemplates \n            : outMediaTemplates.get(mt.getType() + \"/\" + mt.getSubtype());\n    }","id":46901,"modified_method":"protected Templates getOutTemplates(MediaType mt) {\n        return outTemplates != null ? outTemplates \n            : outMediaTemplates != null ? outMediaTemplates.get(mt.getType() + \"/\" + mt.getSubtype()) : null;\n    }","commit_id":"cb2b00350fd2da389521a491e1af62f8dce29ef1","url":"https://github.com/apache/cxf"},{"original_method":"@Override\n    public boolean isReadable(Class<?> type, Type genericType, Annotation[] anns, MediaType mt) {\n        return inTemplatesAvailable(mt) && inClassCanBeHandled(type.getName())\n                   && super.isReadable(type, genericType, anns, mt);\n    }","id":46902,"modified_method":"@Override\n    public boolean isReadable(Class<?> type, Type genericType, Annotation[] anns, MediaType mt) {\n        // JAXB support is required\n        if (!super.isReadable(type, genericType, anns, mt)) {\n            return false;\n        }\n        // if the user has set the list of in classes and a given class \n        // is in that list then it can only be handled by the template\n        if (inClassCanBeHandled(type.getName())) {\n            return inTemplatesAvailable(mt); \n        } else {\n            return supportJaxbOnly;\n        }\n    }","commit_id":"cb2b00350fd2da389521a491e1af62f8dce29ef1","url":"https://github.com/apache/cxf"},{"original_method":"@Override\n    public boolean isWriteable(Class<?> type, Type genericType, Annotation[] anns, MediaType mt) {\n        return outTemplatesAvailable(mt) && outClassCanBeHandled(type.getName()) \n                   && super.isWriteable(type, genericType, anns, mt);\n    }","id":46903,"modified_method":"@Override\n    public boolean isWriteable(Class<?> type, Type genericType, Annotation[] anns, MediaType mt) {\n        // JAXB support is required\n        if (!super.isReadable(type, genericType, anns, mt)) {\n            return false;\n        }\n        // if the user has set the list of out classes and a given class \n        // is in that list then it can only be handled by the template\n        if (outClassCanBeHandled(type.getName())) {\n            return outTemplatesAvailable(mt); \n        } else {\n            return supportJaxbOnly;\n        }\n    }","commit_id":"cb2b00350fd2da389521a491e1af62f8dce29ef1","url":"https://github.com/apache/cxf"},{"original_method":"@Override\n    protected void marshalToOutputStream(Marshaller ms, Object obj, OutputStream os, MediaType mt)\n        throws Exception {\n        TransformerHandler th = factory.newTransformerHandler(\n            createTemplates(getOutTemplates(mt), outParamsMap, outProperties));\n        Result result = new StreamResult(os);\n        if (systemId != null) {\n            result.setSystemId(systemId);\n        }\n        th.setResult(result);\n        ms.marshal(obj, th);\n    }","id":46904,"modified_method":"@Override\n    protected void marshalToOutputStream(Marshaller ms, Object obj, OutputStream os, MediaType mt)\n        throws Exception {\n        \n        Templates t = createTemplates(getOutTemplates(mt), outParamsMap, outProperties);\n        if (t == null && supportJaxbOnly) {\n            super.marshalToOutputStream(ms, obj, os, mt);\n            return;\n        }\n        \n        TransformerHandler th = factory.newTransformerHandler(\n            createTemplates(getOutTemplates(mt), outParamsMap, outProperties));\n        Result result = new StreamResult(os);\n        if (systemId != null) {\n            result.setSystemId(systemId);\n        }\n        th.setResult(result);\n        ms.marshal(obj, th);\n    }","commit_id":"cb2b00350fd2da389521a491e1af62f8dce29ef1","url":"https://github.com/apache/cxf"},{"original_method":"private void setProviders(Object... providers) {\n        \n        for (Object o : providers) {\n            if (o == null) {\n                continue;\n            }\n            Class<?> oClass = ClassHelper.getRealClass(o);\n            \n            if (MessageBodyReader.class.isAssignableFrom(oClass)) {\n                messageReaders.add(new ProviderInfo<MessageBodyReader>((MessageBodyReader)o)); \n            }\n            \n            if (MessageBodyWriter.class.isAssignableFrom(oClass)) {\n                messageWriters.add(new ProviderInfo<MessageBodyWriter>((MessageBodyWriter)o)); \n            }\n            \n            if (ContextResolver.class.isAssignableFrom(oClass)) {\n                contextResolvers.add(new ProviderInfo<ContextResolver>((ContextResolver)o)); \n            }\n            \n            if (RequestHandler.class.isAssignableFrom(oClass)) {\n                requestHandlers.add(new ProviderInfo<RequestHandler>((RequestHandler)o)); \n            }\n            \n            if (ResponseHandler.class.isAssignableFrom(oClass)) {\n                responseHandlers.add(new ProviderInfo<ResponseHandler>((ResponseHandler)o)); \n            }\n            \n            if (ExceptionMapper.class.isAssignableFrom(oClass)) {\n                exceptionMappers.add(new ProviderInfo<ExceptionMapper>((ExceptionMapper)o)); \n            }\n            \n            if (ResponseExceptionMapper.class.isAssignableFrom(oClass)) {\n                responseExceptionMappers.add(new ProviderInfo<ResponseExceptionMapper>((ResponseExceptionMapper)o)); \n            }\n            \n            if (ParameterHandler.class.isAssignableFrom(oClass)) {\n                paramHandlers.add(new ProviderInfo<ParameterHandler>((ParameterHandler)o)); \n            }\n        }\n        sortReaders();\n        sortWriters();\n        \n        injectContexts(messageReaders, messageWriters, contextResolvers, requestHandlers, responseHandlers,\n                       exceptionMappers);\n    }","id":46905,"modified_method":"private void setProviders(Object... providers) {\n        \n        for (Object o : providers) {\n            if (o == null) {\n                continue;\n            }\n            Class<?> oClass = ClassHelper.getRealClass(o);\n            \n            if (MessageBodyReader.class.isAssignableFrom(oClass)) {\n                messageReaders.add(new ProviderInfo<MessageBodyReader>((MessageBodyReader)o)); \n            }\n            \n            if (MessageBodyWriter.class.isAssignableFrom(oClass)) {\n                messageWriters.add(new ProviderInfo<MessageBodyWriter>((MessageBodyWriter)o)); \n            }\n            \n            if (ContextResolver.class.isAssignableFrom(oClass)) {\n                contextResolvers.add(new ProviderInfo<ContextResolver>((ContextResolver)o)); \n            }\n            \n            if (RequestHandler.class.isAssignableFrom(oClass)) {\n                requestHandlers.add(new ProviderInfo<RequestHandler>((RequestHandler)o)); \n            }\n            \n            if (ResponseHandler.class.isAssignableFrom(oClass)) {\n                responseHandlers.add(new ProviderInfo<ResponseHandler>((ResponseHandler)o)); \n            }\n            \n            if (ExceptionMapper.class.isAssignableFrom(oClass)) {\n                exceptionMappers.add(new ProviderInfo<ExceptionMapper>((ExceptionMapper)o)); \n            }\n            \n            if (ResponseExceptionMapper.class.isAssignableFrom(oClass)) {\n                responseExceptionMappers.add(new ProviderInfo<ResponseExceptionMapper>((ResponseExceptionMapper)o)); \n            }\n            \n            if (ParameterHandler.class.isAssignableFrom(oClass)) {\n                paramHandlers.add(new ProviderInfo<ParameterHandler>((ParameterHandler)o)); \n            }\n        }\n        sortReaders();\n        sortWriters();\n        \n        injectContextProxies(messageReaders, messageWriters, contextResolvers, requestHandlers, responseHandlers,\n                       exceptionMappers);\n    }","commit_id":"0b8f9a9082d561c32379f6fd234ac4e5a3dc48b6","url":"https://github.com/apache/cxf"},{"original_method":"private <T> boolean matchesReaderCriterias(MessageBodyReader<T> ep,\n                                               Class<T> type,\n                                               Type genericType,\n                                               Annotation[] annotations,\n                                               MediaType mediaType) {\n        List<MediaType> supportedMediaTypes = JAXRSUtils.getProviderConsumeTypes(ep);\n        \n        List<MediaType> availableMimeTypes = \n            JAXRSUtils.intersectMimeTypes(Collections.singletonList(mediaType), supportedMediaTypes, false);\n\n        if (availableMimeTypes.size() == 0) {\n            return false;\n        }\n        \n        return ep.isReadable(type, genericType, annotations, mediaType);\n        \n    }","id":46906,"modified_method":"private <T> boolean matchesReaderCriterias(ProviderInfo<MessageBodyReader> pi,\n                                               Class<T> type,\n                                               Type genericType,\n                                               Annotation[] annotations,\n                                               MediaType mediaType,\n                                               Message m) {\n        MessageBodyReader<?> ep = pi.getProvider();\n        List<MediaType> supportedMediaTypes = JAXRSUtils.getProviderConsumeTypes(ep);\n        \n        List<MediaType> availableMimeTypes = \n            JAXRSUtils.intersectMimeTypes(Collections.singletonList(mediaType), supportedMediaTypes, false);\n\n        if (availableMimeTypes.size() == 0) {\n            return false;\n        }\n        boolean injected = false;\n        if (this != SHARED_FACTORY || !isJaxbBasedProvider(ep)) {\n            injectContextValues(pi, m);\n            injected = true;\n        }\n        boolean matches = ep.isReadable(type, genericType, annotations, mediaType);\n        if (!matches && injected) {\n            pi.clearThreadLocalProxies();\n        }\n        return matches;\n    }","commit_id":"0b8f9a9082d561c32379f6fd234ac4e5a3dc48b6","url":"https://github.com/apache/cxf"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    public <T> ParameterHandler<T> createParameterHandler(Class<?> paramType) {\n        \n        List<ParameterHandler<T>> candidates = new LinkedList<ParameterHandler<T>>();\n        \n        for (ProviderInfo<ParameterHandler> em : paramHandlers) {\n            handleMapper((List)candidates, em, paramType, null, ParameterHandler.class);\n        }\n        if (candidates.size() == 0) {\n            return null;\n        }\n        Collections.sort(candidates, new ClassComparator());\n        return candidates.get(0);\n    }","id":46907,"modified_method":"@SuppressWarnings(\"unchecked\")\n    public <T> ParameterHandler<T> createParameterHandler(Class<?> paramType) {\n        \n        List<ParameterHandler<T>> candidates = new LinkedList<ParameterHandler<T>>();\n        \n        for (ProviderInfo<ParameterHandler> em : paramHandlers) {\n            handleMapper((List)candidates, em, paramType, null, ParameterHandler.class, true);\n        }\n        if (candidates.size() == 0) {\n            return null;\n        }\n        Collections.sort(candidates, new ClassComparator());\n        return candidates.get(0);\n    }","commit_id":"0b8f9a9082d561c32379f6fd234ac4e5a3dc48b6","url":"https://github.com/apache/cxf"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    public <T extends Throwable> ResponseExceptionMapper<T> createResponseExceptionMapper(\n                                 Class<?> paramType) {\n        \n        List<ResponseExceptionMapper<T>> candidates = new LinkedList<ResponseExceptionMapper<T>>();\n        \n        for (ProviderInfo<ResponseExceptionMapper> em : responseExceptionMappers) {\n            handleMapper((List)candidates, em, paramType, null, ResponseExceptionMapper.class);\n        }\n        if (candidates.size() == 0) {\n            return null;\n        }\n        Collections.sort(candidates, new ClassComparator());\n        return candidates.get(0);\n    }","id":46908,"modified_method":"@SuppressWarnings(\"unchecked\")\n    public <T extends Throwable> ResponseExceptionMapper<T> createResponseExceptionMapper(\n                                 Class<?> paramType) {\n        \n        List<ResponseExceptionMapper<T>> candidates = new LinkedList<ResponseExceptionMapper<T>>();\n        \n        for (ProviderInfo<ResponseExceptionMapper> em : responseExceptionMappers) {\n            handleMapper((List)candidates, em, paramType, null, ResponseExceptionMapper.class, true);\n        }\n        if (candidates.size() == 0) {\n            return null;\n        }\n        Collections.sort(candidates, new ClassComparator());\n        return candidates.get(0);\n    }","commit_id":"0b8f9a9082d561c32379f6fd234ac4e5a3dc48b6","url":"https://github.com/apache/cxf"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    private <T extends Throwable> ExceptionMapper<T> doCreateExceptionMapper(\n        Class<?> exceptionType, Message m) {\n        \n        List<ExceptionMapper<T>> candidates = new LinkedList<ExceptionMapper<T>>();\n        \n        for (ProviderInfo<ExceptionMapper> em : exceptionMappers) {\n            handleMapper((List)candidates, em, exceptionType, m, ExceptionMapper.class);\n        }\n        if (candidates.size() == 0) {\n            return null;\n        }\n        Collections.sort(candidates, new ExceptionMapperComparator());\n        return candidates.get(0);\n    }","id":46909,"modified_method":"@SuppressWarnings(\"unchecked\")\n    private <T extends Throwable> ExceptionMapper<T> doCreateExceptionMapper(\n        Class<?> exceptionType, Message m) {\n        \n        List<ExceptionMapper<T>> candidates = new LinkedList<ExceptionMapper<T>>();\n        \n        for (ProviderInfo<ExceptionMapper> em : exceptionMappers) {\n            handleMapper((List)candidates, em, exceptionType, m, ExceptionMapper.class, true);\n        }\n        if (candidates.size() == 0) {\n            return null;\n        }\n        Collections.sort(candidates, new ExceptionMapperComparator());\n        return candidates.get(0);\n    }","commit_id":"0b8f9a9082d561c32379f6fd234ac4e5a3dc48b6","url":"https://github.com/apache/cxf"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    public <T> ContextResolver<T> createContextResolver(Type contextType, \n                                                        Message m,\n                                                        MediaType type) {\n        for (ProviderInfo<ContextResolver> cr : contextResolvers) {\n            Type[] types = cr.getProvider().getClass().getGenericInterfaces();\n            for (Type t : types) {\n                if (t instanceof ParameterizedType) {\n                    ParameterizedType pt = (ParameterizedType)t;\n                    Type[] args = pt.getActualTypeArguments();\n                    for (int i = 0; i < args.length; i++) {\n                        if (contextType == args[i]) {\n                            \n                            InjectionUtils.injectContextFields(cr.getProvider(), cr, m);\n                            InjectionUtils.injectContextMethods(cr.getProvider(), cr, m);\n                            return cr.getProvider();\n                        }\n                    }\n                }\n            }\n        }\n        return null;\n    }","id":46910,"modified_method":"@SuppressWarnings(\"unchecked\")\n    public <T> ContextResolver<T> createContextResolver(Type contextType, \n                                                        Message m,\n                                                        MediaType type) {\n        for (ProviderInfo<ContextResolver> cr : contextResolvers) {\n            Type[] types = cr.getProvider().getClass().getGenericInterfaces();\n            for (Type t : types) {\n                if (t instanceof ParameterizedType) {\n                    ParameterizedType pt = (ParameterizedType)t;\n                    Type[] args = pt.getActualTypeArguments();\n                    for (int i = 0; i < args.length; i++) {\n                        if (contextType == args[i]) {\n                            injectContextValues(cr, m);\n                            return cr.getProvider();\n                        }\n                    }\n                }\n            }\n        }\n        return null;\n    }","commit_id":"0b8f9a9082d561c32379f6fd234ac4e5a3dc48b6","url":"https://github.com/apache/cxf"},{"original_method":"void injectContexts(List<?> ... providerLists) {\n        for (List<?> list : providerLists) {\n            for (Object p : list) {\n                ProviderInfo pi = (ProviderInfo)p;\n                if (ProviderFactory.SHARED_FACTORY == this && isJaxbBasedProvider(pi.getProvider())) {\n                    continue;\n                }\n                InjectionUtils.injectContextProxies(pi, pi.getProvider());\n            }\n        }\n    }","id":46911,"modified_method":"void injectContextProxies(List<?> ... providerLists) {\n        for (List<?> list : providerLists) {\n            for (Object p : list) {\n                ProviderInfo pi = (ProviderInfo)p;\n                if (ProviderFactory.SHARED_FACTORY == this && isJaxbBasedProvider(pi.getProvider())) {\n                    continue;\n                }\n                InjectionUtils.injectContextProxies(pi, pi.getProvider());\n            }\n        }\n    }","commit_id":"0b8f9a9082d561c32379f6fd234ac4e5a3dc48b6","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * Choose the first body writer provider that matches the requestedMimeType \n     * for a sorted list of Entity providers\n     * Returns null if none is found.\n     * @param <T>\n     * @param messageBodyWriters\n     * @param type\n     * @param requestedMimeType\n     * @return\n     */\n    @SuppressWarnings(\"unchecked\")\n    private <T> MessageBodyWriter<T> chooseMessageWriter(List<ProviderInfo<MessageBodyWriter>> writers,\n                                                         Class<T> type,\n                                                         Type genericType,\n                                                         Annotation[] annotations,\n                                                         MediaType mediaType,\n                                                         Message m) {\n        List<MessageBodyWriter<T>> candidates = new LinkedList<MessageBodyWriter<T>>();\n        for (ProviderInfo<MessageBodyWriter> ep : writers) {\n            if (matchesWriterCriterias(ep.getProvider(), type, genericType, annotations, mediaType)) {\n                if (this == SHARED_FACTORY) {\n                    if (!isJaxbBasedProvider(ep.getProvider())) {\n                        InjectionUtils.injectContextFields(ep.getProvider(), ep, m);\n                        InjectionUtils.injectContextMethods(ep.getProvider(), ep, m);\n                    }\n                    return ep.getProvider();\n                }\n                handleMapper((List)candidates, ep, type, m, MessageBodyWriter.class);\n            }\n        }     \n        if (candidates.size() == 0) {\n            return null;\n        }\n        Collections.sort(candidates, new ClassComparator());\n        return candidates.get(0);\n    }","id":46912,"modified_method":"/**\n     * Choose the first body writer provider that matches the requestedMimeType \n     * for a sorted list of Entity providers\n     * Returns null if none is found.\n     * @param <T>\n     * @param messageBodyWriters\n     * @param type\n     * @param requestedMimeType\n     * @return\n     */\n    @SuppressWarnings(\"unchecked\")\n    private <T> MessageBodyWriter<T> chooseMessageWriter(List<ProviderInfo<MessageBodyWriter>> writers,\n                                                         Class<T> type,\n                                                         Type genericType,\n                                                         Annotation[] annotations,\n                                                         MediaType mediaType,\n                                                         Message m) {\n        List<MessageBodyWriter<T>> candidates = new LinkedList<MessageBodyWriter<T>>();\n        for (ProviderInfo<MessageBodyWriter> ep : writers) {\n            if (matchesWriterCriterias(ep, type, genericType, annotations, mediaType, m)) {\n                if (this == SHARED_FACTORY) {\n                    return ep.getProvider();\n                }\n                handleMapper((List)candidates, ep, type, m, MessageBodyWriter.class, false);\n            }\n        }     \n        if (candidates.size() == 0) {\n            return null;\n        }\n        Collections.sort(candidates, new ClassComparator());\n        return candidates.get(0);\n    }","commit_id":"0b8f9a9082d561c32379f6fd234ac4e5a3dc48b6","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * Choose the first body reader provider that matches the requestedMimeType \n     * for a sorted list of Entity providers\n     * Returns null if none is found.\n     * @param <T>\n     * @param messageBodyReaders\n     * @param type\n     * @param requestedMimeType\n     * @return\n     */\n    @SuppressWarnings(\"unchecked\")\n    private <T> MessageBodyReader<T> chooseMessageReader(List<ProviderInfo<MessageBodyReader>> readers,\n                                                         Class<T> type,\n                                                         Type genericType,\n                                                         Annotation[] annotations,\n                                                         MediaType mediaType,\n                                                         Message m) {\n        List<MessageBodyReader<T>> candidates = new LinkedList<MessageBodyReader<T>>();\n        for (ProviderInfo<MessageBodyReader> ep : readers) {\n            if (matchesReaderCriterias(ep.getProvider(), type, genericType, annotations, mediaType)) {\n                if (this == SHARED_FACTORY) {\n                    if (!isJaxbBasedProvider(ep.getProvider())) {\n                        InjectionUtils.injectContextFields(ep.getProvider(), ep, m);\n                        InjectionUtils.injectContextMethods(ep.getProvider(), ep, m);\n                    }\n                    return ep.getProvider();\n                }\n                handleMapper((List)candidates, ep, type, m, MessageBodyReader.class);\n            }\n        }     \n        \n        if (candidates.size() == 0) {\n            return null;\n        }\n        Collections.sort(candidates, new ClassComparator());\n        return candidates.get(0);\n        \n    }","id":46913,"modified_method":"/**\n     * Choose the first body reader provider that matches the requestedMimeType \n     * for a sorted list of Entity providers\n     * Returns null if none is found.\n     * @param <T>\n     * @param messageBodyReaders\n     * @param type\n     * @param requestedMimeType\n     * @return\n     */\n    @SuppressWarnings(\"unchecked\")\n    private <T> MessageBodyReader<T> chooseMessageReader(List<ProviderInfo<MessageBodyReader>> readers,\n                                                         Class<T> type,\n                                                         Type genericType,\n                                                         Annotation[] annotations,\n                                                         MediaType mediaType,\n                                                         Message m) {\n        List<MessageBodyReader<T>> candidates = new LinkedList<MessageBodyReader<T>>();\n        for (ProviderInfo<MessageBodyReader> ep : readers) {\n            if (matchesReaderCriterias(ep, type, genericType, annotations, mediaType, m)) {\n                if (this == SHARED_FACTORY) {\n                    return ep.getProvider();\n                }\n                handleMapper((List)candidates, ep, type, m, MessageBodyReader.class, false);\n            }\n        }     \n        \n        if (candidates.size() == 0) {\n            return null;\n        }\n        Collections.sort(candidates, new ClassComparator());\n        return candidates.get(0);\n        \n    }","commit_id":"0b8f9a9082d561c32379f6fd234ac4e5a3dc48b6","url":"https://github.com/apache/cxf"},{"original_method":"private static void handleMapper(List<Object> candidates, ProviderInfo em, \n                                     Class<?> expectedType, Message m, Class<?> providerClass) {\n        \n        Class<?> mapperClass =  ClassHelper.getRealClass(em.getProvider());\n        Type[] types = getGenericInterfaces(mapperClass);\n        for (Type t : types) {\n            if (t instanceof ParameterizedType) {\n                ParameterizedType pt = (ParameterizedType)t;\n                Type[] args = pt.getActualTypeArguments();\n                for (int i = 0; i < args.length; i++) {\n                    Type arg = args[i];\n                    if (arg instanceof TypeVariable) {\n                        TypeVariable var = (TypeVariable)arg;\n                        Type[] bounds = var.getBounds();\n                        boolean isResolved = false;\n                        for (int j = 0; j < bounds.length; j++) {\n                            Class<?> cls = InjectionUtils.getRawType(bounds[j]);\n                            if (cls != null && cls.isAssignableFrom(expectedType)) {\n                                isResolved = true;\n                                break;\n                            }\n                        }\n                        if (!isResolved) {\n                            return;\n                        }\n                        if (m != null) {\n                            InjectionUtils.injectContextFields(em.getProvider(), em, m);\n                            InjectionUtils.injectContextMethods(em.getProvider(), em, m);\n                        }\n                        candidates.add(em.getProvider());\n                        return;\n                    }\n                    Class<?> actualClass = InjectionUtils.getRawType(arg);\n                    if (actualClass == null) {\n                        continue;\n                    }\n                    if (actualClass.isAssignableFrom(expectedType)) {\n                        if (m != null) {\n                            InjectionUtils.injectContextFields(em.getProvider(), em, m);\n                            InjectionUtils.injectContextMethods(em.getProvider(), em, m);\n                        }\n                        candidates.add(em.getProvider());\n                        return;\n                    }\n                }\n            } else if (t instanceof Class && ((Class<?>)t).isAssignableFrom(providerClass)) {\n                candidates.add(em.getProvider());\n            }\n        }\n    }","id":46914,"modified_method":"private static void handleMapper(List<Object> candidates, \n                                     ProviderInfo em, \n                                     Class<?> expectedType, \n                                     Message m, \n                                     Class<?> providerClass,\n                                     boolean injectContext) {\n        \n        Class<?> mapperClass =  ClassHelper.getRealClass(em.getProvider());\n        Type[] types = getGenericInterfaces(mapperClass);\n        for (Type t : types) {\n            if (t instanceof ParameterizedType) {\n                ParameterizedType pt = (ParameterizedType)t;\n                Type[] args = pt.getActualTypeArguments();\n                for (int i = 0; i < args.length; i++) {\n                    Type arg = args[i];\n                    if (arg instanceof TypeVariable) {\n                        TypeVariable var = (TypeVariable)arg;\n                        Type[] bounds = var.getBounds();\n                        boolean isResolved = false;\n                        for (int j = 0; j < bounds.length; j++) {\n                            Class<?> cls = InjectionUtils.getRawType(bounds[j]);\n                            if (cls != null && cls.isAssignableFrom(expectedType)) {\n                                isResolved = true;\n                                break;\n                            }\n                        }\n                        if (!isResolved) {\n                            return;\n                        }\n                        if (injectContext) {\n                            injectContextValues(em, m);\n                        }\n                        candidates.add(em.getProvider());\n                        return;\n                    }\n                    Class<?> actualClass = InjectionUtils.getRawType(arg);\n                    if (actualClass == null) {\n                        continue;\n                    }\n                    if (actualClass.isAssignableFrom(expectedType)) {\n                        if (injectContext) {\n                            injectContextValues(em, m);\n                        }\n                        candidates.add(em.getProvider());\n                        return;\n                    }\n                }\n            } else if (t instanceof Class && ((Class<?>)t).isAssignableFrom(providerClass)) {\n                if (injectContext) {\n                    injectContextValues(em, m);\n                }\n                candidates.add(em.getProvider());\n            }\n        }\n    }","commit_id":"0b8f9a9082d561c32379f6fd234ac4e5a3dc48b6","url":"https://github.com/apache/cxf"},{"original_method":"private <T> boolean matchesWriterCriterias(MessageBodyWriter<T> ep,\n                                               Class<T> type,\n                                               Type genericType,\n                                               Annotation[] annotations,\n                                               MediaType mediaType) {\n        List<MediaType> supportedMediaTypes = JAXRSUtils.getProviderProduceTypes(ep);\n        \n        List<MediaType> availableMimeTypes = \n            JAXRSUtils.intersectMimeTypes(Collections.singletonList(mediaType),\n                                          supportedMediaTypes, false);\n\n        if (availableMimeTypes.size() == 0) {\n            return false;\n        }\n        return ep.isWriteable(type, genericType, annotations, mediaType); \n    }","id":46915,"modified_method":"private <T> boolean matchesWriterCriterias(ProviderInfo<MessageBodyWriter> pi,\n                                               Class<T> type,\n                                               Type genericType,\n                                               Annotation[] annotations,\n                                               MediaType mediaType,\n                                               Message m) {\n        MessageBodyWriter<?> ep = pi.getProvider();\n        List<MediaType> supportedMediaTypes = JAXRSUtils.getProviderProduceTypes(ep);\n        \n        List<MediaType> availableMimeTypes = \n            JAXRSUtils.intersectMimeTypes(Collections.singletonList(mediaType),\n                                          supportedMediaTypes, false);\n\n        if (availableMimeTypes.size() == 0) {\n            return false;\n        }\n        boolean injected = false;\n        if (this != SHARED_FACTORY || !isJaxbBasedProvider(ep)) {\n            injectContextValues(pi, m);\n            injected = true;\n        }\n        boolean matches = ep.isWriteable(type, genericType, annotations, mediaType);\n        if (!matches && injected) {\n            pi.clearThreadLocalProxies();\n        }\n        return matches;\n    }","commit_id":"0b8f9a9082d561c32379f6fd234ac4e5a3dc48b6","url":"https://github.com/apache/cxf"},{"original_method":"private void initJaxbProviders() {\n        Object jaxbProvider = createProvider(JAXB_PROVIDER_NAME);\n        if (jaxbProvider != null) {\n            jaxbReaders.add(new ProviderInfo<MessageBodyReader>((MessageBodyReader)jaxbProvider));\n            jaxbWriters.add(new ProviderInfo<MessageBodyWriter>((MessageBodyWriter)jaxbProvider));\n        }\n        Object jsonProvider = createProvider(JSON_PROVIDER_NAME);\n        if (jsonProvider != null) {\n            jaxbReaders.add(new ProviderInfo<MessageBodyReader>((MessageBodyReader)jsonProvider));\n            jaxbWriters.add(new ProviderInfo<MessageBodyWriter>((MessageBodyWriter)jsonProvider));\n        }\n        injectContexts(jaxbReaders, jaxbWriters);\n    }","id":46916,"modified_method":"private void initJaxbProviders() {\n        Object jaxbProvider = createProvider(JAXB_PROVIDER_NAME);\n        if (jaxbProvider != null) {\n            jaxbReaders.add(new ProviderInfo<MessageBodyReader>((MessageBodyReader)jaxbProvider));\n            jaxbWriters.add(new ProviderInfo<MessageBodyWriter>((MessageBodyWriter)jaxbProvider));\n        }\n        Object jsonProvider = createProvider(JSON_PROVIDER_NAME);\n        if (jsonProvider != null) {\n            jaxbReaders.add(new ProviderInfo<MessageBodyReader>((MessageBodyReader)jsonProvider));\n            jaxbWriters.add(new ProviderInfo<MessageBodyWriter>((MessageBodyWriter)jsonProvider));\n        }\n        injectContextProxies(jaxbReaders, jaxbWriters);\n    }","commit_id":"0b8f9a9082d561c32379f6fd234ac4e5a3dc48b6","url":"https://github.com/apache/cxf"},{"original_method":"@Test\n    public void testBot()\n    {\n        getUtil().deletePage(getTestClassName(), getTestMethodName());\n        String triggerPageName = getTestMethodName() + \"NewPage\";\n        getUtil().deletePage(getTestClassName(), triggerPageName);\n\n        // Go to the main Bot home page\n        IRCBotPage page = IRCBotPage.gotoPage();\n\n        // Verify that the Bot is stopped\n        Assert.assertFalse(page.isBotStarted());\n\n        // Add a Bot Listener\n        getUtil().addObject(getTestClassName(), getTestMethodName(), \"IRC.IRCBotListenerClass\",\n            \"description\", \"bot listener test\");\n        getUtil().addObject(getTestClassName(), getTestMethodName(), \"IRC.IRCBotListenerEventClass\",\n            \"event\", \"onMessage\",\n            \"script\", \"gotcha!\");\n\n        // Start the Bot\n        page = IRCBotPage.gotoPage();\n        page.clickActionButton();\n\n        // Verify that the Bot is started\n        Assert.assertTrue(page.isBotStarted());\n\n        // Verify that our Bot listener is listed and started\n        //TODO\n\n        // Create a new page to verify that a message is sent to the IRC channel.\n        // We thus test the IRC Event Listener.\n        getUtil().createPage(getTestClassName(), triggerPageName, \"whatever\", \"title\");\n\n        // We verify indirectly that the message was sent to the IRC channel by verifying that the Log Bot Listener\n        // has archived the message. This also allows testing the Log Bot Listener.\n        //\n        // Note 1: We need to find the last page created matching \"xwikitestArchive*\" because we can't guess the page\n        // name with 100% probability (if the test executes around midnight then the current date might be different\n        // than the date used to create the archive page... ;)).\n        //\n        // Note 2: Since it can take some time for the message to appear on the channel and for it to be archived, we\n        // need to wait till the page it here.\n        String archivePageName = getUtil().executeContent(\n            \"{{velocity}}\\n\"\n            + \"$services.query.xwql(\\\"where doc.name like 'xwikitestArchive%' order by doc.creationDate desc\\\").\"\n            + \"setLimit(1).execute().get(0)\\n\"\n            + \"{{/velocity}}\");\n        // TODO: add the wait and assert the content of the archive\n\n        // Stop the Bot\n        page = IRCBotPage.gotoPage();\n        page.clickActionButton();\n\n        // Verify that the Bot is stopped again\n        Assert.assertFalse(page.isBotStarted());\n\n        // Verify that our Bot is listed and stopped\n        //TODO\n\n        // Remove our Bot Listener\n        getUtil().deletePage(getTestClassName(), getTestMethodName());\n\n        // Verify that our Bot is no longer listed\n        //TODO\n    }","id":46917,"modified_method":"@Test\n    public void testBot()\n    {\n        getUtil().deletePage(getTestClassName(), getTestMethodName());\n        String triggerPageName = getTestMethodName() + \"NewPage\";\n        getUtil().deletePage(getTestClassName(), triggerPageName);\n        getUtil().deletePage(\"IRC\", \"testarchive\");\n\n        // Configure the Logging Bot Listener to log into a fixed name page so that we can easily delete that page at\n        // the test start and find it easily to assert its content below.\n        IRCBotConfigurationPage configPage = IRCBotConfigurationPage.gotoPage();\n        configPage.setLoggingPage(\"IRC.testarchive\");\n\n        // Go to the main Bot home page\n        IRCBotPage page = IRCBotPage.gotoPage();\n\n        // Verify that the Bot is stopped\n        Assert.assertFalse(page.isBotStarted());\n\n        // Add a Bot Listener\n        getUtil().addObject(getTestClassName(), getTestMethodName(), \"IRC.IRCBotListenerClass\",\n            \"description\", \"bot listener test\");\n        getUtil().addObject(getTestClassName(), getTestMethodName(), \"IRC.IRCBotListenerEventClass\",\n            \"event\", \"onMessage\",\n            \"script\", \"gotcha!\");\n\n        // Start the Bot\n        page = IRCBotPage.gotoPage();\n        page.clickActionButton();\n\n        // Verify that the Bot is started\n        Assert.assertTrue(page.isBotStarted());\n\n        // Verify that our Bot listener is listed and started\n        //TODO\n\n        // Create a new page to verify that a message is sent to the IRC channel.\n        // We thus test the IRC Event Listener.\n        getUtil().createPage(getTestClassName(), triggerPageName, \"whatever\", \"title\");\n\n        // We verify indirectly that the message was sent to the IRC channel by verifying that the Log Bot Listener\n        // has archived the message. This also allows testing the Log Bot Listener.\n        ViewPage archivePage = getUtil().gotoPage(\"IRC\", \"testarchive\");\n\n        // TODO: Need to wait till the content we expect is there\n        String content = archivePage.getContent();\n\n        // TODO: add the wait and assert the content of the archive\n\n        // Stop the Bot\n        page = IRCBotPage.gotoPage();\n        page.clickActionButton();\n\n        // Verify that the Bot is stopped again\n        Assert.assertFalse(page.isBotStarted());\n\n        // Verify that our Bot is listed and stopped\n        //TODO\n\n        // Remove our Bot Listener\n        getUtil().deletePage(getTestClassName(), getTestMethodName());\n\n        // Verify that our Bot is no longer listed\n        //TODO\n    }","commit_id":"6402b8138f66ff041ae53b681d052e5acbb3f26b","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void testAddWikiBotListener()\n    {\n        // TODO: Login a superadmin for now, remove when http://jira.xwiki.org/jira/browse/XWIKI-7581 is fixed\n        getDriver().get(getUtil().getURLToLoginAs(\"superadmin\", \"pass\"));\n        getUtil().recacheSecretToken();\n\n        getUtil().deletePage(getTestClassName(), getTestMethodName());\n\n        getUtil().addObject(getTestClassName(), getTestMethodName(), \"IRC.IRCBotListenerClass\",\n            \"description\", \"bot listener test\");\n        getUtil().addObject(getTestClassName(), getTestMethodName(), \"IRC.IRCBotListenerEventClass\",\n            \"event\", \"onMessage\",\n            \"script\", \"{{velocity}}$services.ircbot.bot.sendMessage('gotcha!'){{/velocity}}\");\n\n        // TODO: Go to the page listing all Bot Listeners and verify that our new wiki bot listener is listed!\n    }","id":46918,"modified_method":"@Test\n    public void testAddWikiBotListener()\n    {\n        // Login as superadmin to have delete rights.\n        getDriver().get(getUtil().getURLToLoginAs(\"superadmin\", \"pass\"));\n        getUtil().recacheSecretToken();\n\n        getUtil().deletePage(getTestClassName(), getTestMethodName());\n        String simulationPageName = getTestMethodName() + \"-SimulateIRCServer\";\n        getUtil().deletePage(getTestClassName(), simulationPageName);\n\n        getUtil().addObject(getTestClassName(), getTestMethodName(), \"IRC.IRCBotListenerClass\",\n            \"description\", \"bot listener test\");\n        getUtil().addObject(getTestClassName(), getTestMethodName(), \"IRC.IRCBotListenerEventClass\",\n            \"event\", \"onMessage\",\n            \"script\", \"gotcha!\");\n\n        // TODO: Go to the page listing all Bot Listeners and verify that our new wiki bot listener is listed!\n\n        // Simulate receiving an IRC Server message and verify that our Bot Listener send the message \"gotcha!\" back\n        // to the IRC channel\n        ViewPage page = getUtil().createPage(getTestClassName(), simulationPageName,\n            \"{{velocity}}\\n\"\n            + \"#set ($bot = $services.ircbot.bot)\\n\"\n            + \"$bot.joinChannel('channel')\\n\"\n            + \"$bot.onMessage('channel', 'sender', 'login', 'hostname', 'message')\\n\"\n            + \"$bot.messages.get(0)\\n\"\n            + \"{{/velocity}}\\n\", null);\n        Assert.assertEquals(\"gotcha!\", page.getContent());\n    }","commit_id":"e847c365c9c04c06cf6c72ff8c6837c59b70cded","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Before\n    public void setUp() throws Exception\n    {\n        super.setUp();\n\n        this.execution = getComponentManager().lookup(Execution.class);\n        this.componentManager = getComponentManager().lookup(ComponentManager.class);\n    }","id":46919,"modified_method":"@Before\n    public void setUp() throws Exception\n    {\n        super.setUp();\n\n        this.execution = getComponentManager().lookup(Execution.class);\n        this.componentManager = getComponentManager().lookup(ComponentManager.class, \"wiki\");\n    }","commit_id":"e847c365c9c04c06cf6c72ff8c6837c59b70cded","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Execute the Wiki bot listener written in wiki syntax by executing the Macros and send the result to the IRC\n     * server.\n     *\n     * @param eventName the name of the event for which the script needs to be executed\n     */\n    private void executeScript(String eventName)\n    {\n        XDOM xdom = this.events.get(eventName);\n        if (xdom != null) {\n            // Note that if a Bot Listener script needs access to the IRC Bot (for example to send a message to the\n            // IRC channel), it can access it through the \"ircbot\" Script Service.\n\n            // Execute the Macro Transformation on XDOM and send the result to the IRC server\n            TransformationContext txContext = new TransformationContext(xdom, this.syntax);\n            try {\n                this.macroTransformation.transform(xdom, this.syntax);\n            } catch (TransformationException e) {\n                // The transformation failed to execute, log an error and continue\n                LOGGER.error(\"Failed to render Wiki IRC Bot Listener script\", e);\n                return;\n            }\n            DefaultWikiPrinter printer = new DefaultWikiPrinter();\n            this.plainTextBlockRenderer.render(xdom, printer);\n\n            try {\n                this.bot.sendMessage(printer.toString());\n            } catch (IRCBotException e) {\n                // The bot is not connected to a channel yet, don't do anything\n                LOGGER.warn(String.format(\"Failed to send message to the IRC server. Reason: [%s]\", e.getMessage()));\n            }\n        }\n    }","id":46920,"modified_method":"/**\n     * Execute the Wiki bot listener written in wiki syntax by executing the Macros and send the result to the IRC\n     * server.\n     *\n     * @param eventName the name of the event for which the script needs to be executed\n     */\n    private void executeScript(String eventName)\n    {\n        XDOM xdom = this.events.get(eventName);\n        if (xdom != null) {\n            // Note that if a Bot Listener script needs access to the IRC Bot (for example to send a message to the\n            // IRC channel), it can access it through the \"ircbot\" Script Service.\n\n            // Execute the Macro Transformation on XDOM and send the result to the IRC server\n            TransformationContext txContext = new TransformationContext(xdom, this.syntax);\n            try {\n                this.macroTransformation.transform(xdom, txContext);\n            } catch (TransformationException e) {\n                // The transformation failed to execute, log an error and continue\n                LOGGER.error(\"Failed to render Wiki IRC Bot Listener script\", e);\n                return;\n            }\n            DefaultWikiPrinter printer = new DefaultWikiPrinter();\n            this.plainTextBlockRenderer.render(xdom, printer);\n\n            try {\n                this.bot.sendMessage(printer.toString());\n            } catch (IRCBotException e) {\n                // The bot is not connected to a channel yet, don't do anything\n                LOGGER.warn(String.format(\"Failed to send message to the IRC server. Reason: [%s]\", e.getMessage()));\n            }\n        }\n    }","commit_id":"e847c365c9c04c06cf6c72ff8c6837c59b70cded","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/** Returns an attribute. */\n\tpublic String getDynamicProperty(String name) {\n\t\treturn _attrs != null ? (String)_attrs.get(name): null;\n\t}","id":46921,"modified_method":"/** Returns the dynamic property, or null if not found.\n\t * Note: it must be a String object or null.\n\t */\n\tpublic Object getDynamicProperty(String name) {\n\t\treturn _attrs != null ? _attrs.get(name): null;\n\t}","commit_id":"6bebc9643df87ceed2b6ec60534bde24e4a3253f","url":"https://github.com/zkoss/zk"},{"original_method":"/** Returns the CSS class.\n\t * Due to Java's limitation, we cannot use the name called getClas.\n\t * <p>Default: null (the default value depends on element).\n\t */\n\tpublic String getSclass() {\n\t\treturn getDynamicProperty(\"class\");\n\t}","id":46922,"modified_method":"/** Returns the CSS class.\n\t * Due to Java's limitation, we cannot use the name called getClas.\n\t * <p>Default: null (the default value depends on element).\n\t */\n\tpublic String getSclass() {\n\t\treturn (String)getDynamicProperty(\"class\");\n\t}","commit_id":"6bebc9643df87ceed2b6ec60534bde24e4a3253f","url":"https://github.com/zkoss/zk"},{"original_method":"/** Returns the CSS style.\n\t * <p>Default: null.\n\t */\n\tpublic String getStyle() {\n\t\treturn getDynamicProperty(\"style\");\n\t}","id":46923,"modified_method":"/** Returns the CSS style.\n\t * <p>Default: null.\n\t */\n\tpublic String getStyle() {\n\t\treturn (String)getDynamicProperty(\"style\");\n\t}","commit_id":"6bebc9643df87ceed2b6ec60534bde24e4a3253f","url":"https://github.com/zkoss/zk"},{"original_method":"/** Returns the value of this input.\n\t */\n\tpublic String getValue() {\n\t\treturn getDynamicProperty(\"value\");\n\t}","id":46924,"modified_method":"/** Returns the value of this input.\n\t */\n\tpublic String getValue() {\n\t\treturn (String)getDynamicProperty(\"value\");\n\t}","commit_id":"6bebc9643df87ceed2b6ec60534bde24e4a3253f","url":"https://github.com/zkoss/zk"},{"original_method":"public Modes() {\n        Mode mode = new Mode();\n        this.put(mode.getId(), mode);\n        this.modeId = mode.getId();\n        this.minModes = 1;\n        this.maxModes = 1;\n        this.selectedModes.add(modeId);\n\n    }","id":46925,"modified_method":"public Modes() {\n        Mode mode = new Mode();\n        this.put(mode.getId(), mode);\n        this.modeId = mode.getId();\n        this.minModes = 1;\n        this.maxModes = 1;\n        this.selectedModes.add(modeId);\n        this.modeChooser = TargetController.YOU;\n    }","commit_id":"225118a58535716fa13d93a880616b400bdf81ed","url":"https://github.com/magefree/mage"},{"original_method":"public Modes(Modes modes) {\n        this.modeId = modes.modeId;\n        for (Map.Entry<UUID, Mode> entry: modes.entrySet()) {\n            this.put(entry.getKey(), entry.getValue().copy());\n        }\n        this.minModes = modes.minModes;\n        this.maxModes = modes.maxModes;\n        this.selectedModes.addAll(modes.selectedModes);\n    }","id":46926,"modified_method":"public Modes(Modes modes) {\n        this.modeId = modes.modeId;\n        for (Map.Entry<UUID, Mode> entry: modes.entrySet()) {\n            this.put(entry.getKey(), entry.getValue().copy());\n        }\n        this.minModes = modes.minModes;\n        this.maxModes = modes.maxModes;\n        this.selectedModes.addAll(modes.selectedModes);\n        this.modeChooser = modes.modeChooser;\n    }","commit_id":"225118a58535716fa13d93a880616b400bdf81ed","url":"https://github.com/magefree/mage"},{"original_method":"public boolean choose(Game game, Ability source) {\n        if (this.size() > 1) {\n            this.selectedModes.clear();\n            // check if mode modifying abilities exist\n            Card card = game.getCard(source.getSourceId());\n            if (card != null) {\n                for (Ability modeModifyingAbility : card.getAbilities()) {\n                    if (modeModifyingAbility instanceof OptionalAdditionalModeSourceCosts) {\n                        ((OptionalAdditionalModeSourceCosts)modeModifyingAbility).addOptionalAdditionalModeCosts(source, game);\n                    }\n                }\n            }\n            // check if all modes can be activated automatically\n            if (this.size() == this.getMinModes()) {\n                for (Mode mode: this.values()) {\n                    if (mode.getTargets().canChoose(source.getSourceId(), source.getControllerId(), game)) {\n                        this.selectedModes.add(mode.getId());\n                    }\n                }\n                return selectedModes.size() > 0;\n            }\n            // player chooses modes manually\n            Player player = game.getPlayer(source.getControllerId());\n            while (this.selectedModes.size() < this.getMaxModes()) {\n                Mode choice = player.chooseMode(this, source, game);\n                if (choice == null) {\n                    return this.selectedModes.size() >= this.getMinModes();\n                }\n                setMode(choice);\n                this.selectedModes.add(choice.getId());\n            }\n            return true;\n        }\n        this.modeId = this.values().iterator().next().getId();\n        this.selectedModes.add(modeId);\n        return true;\n    }","id":46927,"modified_method":"public boolean choose(Game game, Ability source) {\n        if (this.size() > 1) {\n            this.selectedModes.clear();\n            // check if mode modifying abilities exist\n            Card card = game.getCard(source.getSourceId());\n            if (card != null) {\n                for (Ability modeModifyingAbility : card.getAbilities()) {\n                    if (modeModifyingAbility instanceof OptionalAdditionalModeSourceCosts) {\n                        ((OptionalAdditionalModeSourceCosts)modeModifyingAbility).addOptionalAdditionalModeCosts(source, game);\n                    }\n                }\n            }\n            // check if all modes can be activated automatically\n            if (this.size() == this.getMinModes()) {\n                for (Mode mode: this.values()) {\n                    if (mode.getTargets().canChoose(source.getSourceId(), source.getControllerId(), game)) {\n                        this.selectedModes.add(mode.getId());\n                    }\n                }\n                return selectedModes.size() > 0;\n            }\n            \n            // 700.2d\n            // Some spells and abilities specify that a player other than their controller chooses a mode for it.\n            // In that case, the other player does so when the spell or ability\u2019s controller normally would do so.\n            // If there is more than one other player who could make such a choice, the spell or ability\u2019s controller decides which of those players will make the choice. \n            UUID playerId = null;\n            if (modeChooser == TargetController.OPPONENT) {\n                TargetOpponent targetOpponent = new TargetOpponent(true);\n                if (targetOpponent.choose(Outcome.Benefit, source.getControllerId(), source.getSourceId(), game)) {\n                    playerId = targetOpponent.getFirstTarget();\n                }\n            }\n            if (playerId == null ) {\n                playerId = source.getControllerId();\n            }\n            Player player = game.getPlayer(playerId);\n            \n            // player chooses modes manually\n            while (this.selectedModes.size() < this.getMaxModes()) {\n                Mode choice = player.chooseMode(this, source, game);\n                if (choice == null) {\n                    return this.selectedModes.size() >= this.getMinModes();\n                }\n                setMode(choice);\n                this.selectedModes.add(choice.getId());\n            }\n            return true;\n        }\n        this.modeId = this.values().iterator().next().getId();\n        this.selectedModes.add(modeId);\n        return true;\n    }","commit_id":"225118a58535716fa13d93a880616b400bdf81ed","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n\tpublic boolean canTarget(UUID id, Ability source, Game game) {\n\t\tPlayer player = game.getPlayer(id);\n\t\tMageObject targetSource = game.getObject(attackerId);\n\t\tif (player != null) {\n\t\t\treturn player.canBeTargetedBy(targetSource) && filter.match(player);\n\t\t}\n\t\tPermanent permanent = game.getPermanent(id);\n\t\tif (permanent != null) {\n\t\t\treturn permanent.canBeTargetedBy(targetSource, source.getControllerId(), game) && filter.match(permanent);\n\t\t}\n\t\treturn false;\n\t}","id":46928,"modified_method":"@Override\n\tpublic boolean canTarget(UUID id, Ability source, Game game) {\n\t\tPlayer player = game.getPlayer(id);\n\t\tMageObject targetSource = game.getObject(attackerId);\n\t\tif (player != null) {\n\t\t\treturn player.canBeTargetedBy(targetSource) && filter.match(player);\n\t\t}\n\t\tPermanent permanent = game.getPermanent(id);\n\t\tif (permanent != null) {\n\t\t\t//Could be targeting due to combat decision to attack a player or planeswalker.\n\t\t\tUUID controllerId = null;\n\t\t\tif ( source != null ) {\n\t\t\t\tcontrollerId = source.getControllerId();\n\t\t\t}\n\t\t\treturn permanent.canBeTargetedBy(targetSource, controllerId, game) && filter.match(permanent);\n\t\t}\n\t\treturn false;\n\t}","commit_id":"64adbf4b2181ec52de26f7d4a9705d37e10ace82","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean checkTrigger(GameEvent event, Game game) {\n        if (event instanceof DamagedPlayerEvent) {\n            DamagedPlayerEvent damageEvent = (DamagedPlayerEvent)event;\n            Permanent p = game.getPermanent(event.getSourceId());\n            if (damageEvent.isCombatDamage() && p != null && p.getAttachments().contains(this.getSourceId())) {\n                for (Effect effect : getEffects()) {\n                    effect.setTargetPointer(new FixedTarget(p.getId()));\n                }\n                return true;\n            }\n        }\n        return false;\n    }","id":46929,"modified_method":"@Override\n    public boolean checkTrigger(GameEvent event, Game game) {\n        if (event instanceof DamagedPlayerEvent) {\n            DamagedPlayerEvent damageEvent = (DamagedPlayerEvent)event;            \n            Permanent enchantment = game.getPermanent(getSourceId());\n            if (damageEvent.isCombatDamage() && \n                    enchantment != null && \n                    enchantment.getAttachedTo().equals(event.getSourceId())) {\n                return true;\n            }\n        }\n        return false;\n    }","commit_id":"f77c93029964fc9fa5aaeed24c28893f9fcadae6","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean apply(Game game, Ability source){\n        Permanent enchantedCreature = game.getPermanent(targetPointer.getFirst(game, source));\n        Permanent enchantment = game.getPermanent(source.getSourceId());\n        Player controller = game.getPlayer(source.getControllerId());\n        Target target = new TargetControlledCreaturePermanent(new FilterCanBeEnchantedControlledCreaturePermanent(enchantment));\n        target.setNotTarget(true);\n        if (enchantedCreature != null &&\n            enchantedCreature.sacrifice(source.getSourceId(), game) &&\n            enchantment != null &&\n            controller != null &&\n            target.canChoose(source.getSourceId(), source.getControllerId(), game)) {\n            controller.choose(outcome, target, source.getId(), game);\n            Permanent newCreature = game.getPermanent(target.getFirstTarget());\n            if (newCreature != null &&\n                newCreature.addAttachment(enchantment.getId(), game)) {\n                for (Permanent permanent : game.getBattlefield().getAllActivePermanents(new FilterControlledCreaturePermanent(),\n                                                                                        controller.getId(), game)) {\n                    permanent.untap(game);\n                }\n                game.getState().getTurnMods().add(new TurnMod(source.getControllerId(), TurnPhase.COMBAT, null, false));\n                return true;\n            }\n        }\n        return false;\n    }","id":46930,"modified_method":"@Override\n    public boolean apply(Game game, Ability source){\n        Permanent enchantment = game.getPermanent(source.getSourceId());\n        if (enchantment == null) {\n            return false;\n        }\n        Permanent enchantedCreature = game.getPermanent(enchantment.getAttachedTo());        \n        Player controller = game.getPlayer(source.getControllerId());\n        FilterControlledCreaturePermanent filter = new FilterControlledCreaturePermanent(\"creature you control that could be enchanted by \" + enchantment.getName());\n        filter.add(new CanBeEnchantedPredicate(enchantment));\n        Target target = new TargetControlledCreaturePermanent(filter);\n        target.setNotTarget(true);\n        if (enchantedCreature != null && controller != null) {                \n            // sacrifice the enchanted creature (don't check return state because controller has sarificed independant if something replaced later);\n            // e.g. Commander replacement effect going to command zone\n            enchantedCreature.sacrifice(source.getSourceId(), game);                \n            if (target.canChoose(source.getSourceId(), source.getControllerId(), game)) {\n                controller.choose(outcome, target, source.getSourceId(), game);\n                Permanent newCreature = game.getPermanent(target.getFirstTarget());\n                if (newCreature != null &&\n                    newCreature.addAttachment(enchantment.getId(), game)) {\n                    for (Permanent permanent : game.getBattlefield().getAllActivePermanents(new FilterControlledCreaturePermanent(), controller.getId(), game)) {\n                        permanent.untap(game);\n                    }\n                    game.getState().getTurnMods().add(new TurnMod(source.getControllerId(), TurnPhase.COMBAT, null, false));\n\n                }\n\n            }\n            return true;\n        }\n        return false;\n    }","commit_id":"f77c93029964fc9fa5aaeed24c28893f9fcadae6","url":"https://github.com/magefree/mage"},{"original_method":"public BreathOfFuryEffect() {\n        super(Outcome.Benefit);\n        staticText = \"Sacrifice enchanted creature and attach Breath of Fury to a creature you control. If you do, untap all creatures you control and after this phase, there is an additional combat phase.\";\n    }","id":46931,"modified_method":"public BreathOfFuryEffect() {\n        super(Outcome.Benefit);\n        staticText = \"sacrifice enchanted creature and attach {this} to a creature you control. If you do, untap all creatures you control and after this phase, there is an additional combat phase.\";\n    }","commit_id":"f77c93029964fc9fa5aaeed24c28893f9fcadae6","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public String getRule() {\n        return \"When enchanted creature deals combat damage to a player, sacrifice it and attach Breath of Fury to a creature you control. If you do, untap all creatures you control and after this phase, there is an additional combat phase.\";\n    }","id":46932,"modified_method":"@Override\n    public String getRule() {\n        return \"When enchanted creature deals combat damage to a player, \" + super.getRule();\n    }","commit_id":"f77c93029964fc9fa5aaeed24c28893f9fcadae6","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public String getRule() {\r\n        return \"Whenever a player casts an instant or sorcery spell, if that spell targets only Ink-Treader Nephilim, copy the spell for each other creature that spell could target. Each copy targets a different one of those creatures.\";\r\n    }","id":46933,"modified_method":"@Override\r\n    public String getRule() {\r\n        return \"Whenever a player casts an instant or sorcery spell, if that spell targets only {this}, copy the spell for each other creature that spell could target. Each copy targets a different one of those creatures.\";\r\n    }","commit_id":"f77c93029964fc9fa5aaeed24c28893f9fcadae6","url":"https://github.com/magefree/mage"},{"original_method":"public InkTreaderNephilimEffect() {\r\n        super(Outcome.Copy);\r\n    }","id":46934,"modified_method":"public InkTreaderNephilimEffect() {\r\n        super(Outcome.Copy);\r\n        staticText = \"copy the spell for each other creature that spell could target. Each copy targets a different one of those creatures\";\r\n    }","commit_id":"f77c93029964fc9fa5aaeed24c28893f9fcadae6","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean checkInterveningIfClause(Game game) {\r\n        Spell spell = (Spell) getEffects().get(0).getValue(\"TriggeringSpell\");\r\n        if (spell != null) {\r\n            boolean allTargetsInkTreaderNephilim = true;\r\n            boolean atLeastOneTargetsInkTreaderNephilim = false;\r\n            for (SpellAbility sa: spell.getSpellAbilities()){\r\n                Modes modes = sa.getModes();\r\n                for (UUID mode : modes.getSelectedModes()) {\r\n                    for (Target targetInstance : modes.get(mode).getTargets()) {\r\n                        for (UUID target : targetInstance.getTargets()) {\r\n                            allTargetsInkTreaderNephilim &= target.equals(sourceId);\r\n                            atLeastOneTargetsInkTreaderNephilim |= target.equals(sourceId);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (allTargetsInkTreaderNephilim && atLeastOneTargetsInkTreaderNephilim) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }","id":46935,"modified_method":"@Override\r\n    public boolean checkInterveningIfClause(Game game) {\r\n        Spell spell = (Spell) getEffects().get(0).getValue(\"TriggeringSpell\");\r\n        if (spell != null) {\r\n            boolean allTargetsInkTreaderNephilim = true;\r\n            boolean atLeastOneTargetsInkTreaderNephilim = false;\r\n            for (SpellAbility spellAbility: spell.getSpellAbilities()){\r\n                Modes modesSpell = spellAbility.getModes();\r\n                for (UUID mode : modesSpell.getSelectedModes()) {\r\n                    for (Target targetInstance : modesSpell.get(mode).getTargets()) {\r\n                        for (UUID target : targetInstance.getTargets()) {\r\n                            allTargetsInkTreaderNephilim &= target.equals(sourceId);\r\n                            atLeastOneTargetsInkTreaderNephilim |= target.equals(sourceId);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (allTargetsInkTreaderNephilim && atLeastOneTargetsInkTreaderNephilim) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }","commit_id":"f77c93029964fc9fa5aaeed24c28893f9fcadae6","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean checkTrigger(GameEvent event, Game game) {\r\n        if (event.getType() == GameEvent.EventType.SPELL_CAST) {\r\n            Spell spell = game.getStack().getSpell(event.getTargetId());\r\n            if (spell != null &&\r\n                spell.getCardType().contains(CardType.INSTANT) || spell.getCardType().contains(CardType.SORCERY)){\r\n                for (Effect effect : getEffects()) {\r\n                    effect.setValue(\"TriggeringSpell\", spell);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }","id":46936,"modified_method":"@Override\r\n    public boolean checkTrigger(GameEvent event, Game game) {\r\n        if (event.getType() == GameEvent.EventType.SPELL_CAST) {\r\n            Spell spell = game.getStack().getSpell(event.getTargetId());\r\n            if (spell != null &&\r\n                (spell.getCardType().contains(CardType.INSTANT) || spell.getCardType().contains(CardType.SORCERY))){\r\n                for (Effect effect : getEffects()) {\r\n                    effect.setValue(\"TriggeringSpell\", spell);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }","commit_id":"f77c93029964fc9fa5aaeed24c28893f9fcadae6","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Spell spell = (Spell) getValue(\"TriggeringSpell\");\r\n        if (spell != null) {\r\n            Map<UUID, Spell> targetable = new HashMap<>();\r\n            UUID controller = source.getControllerId();\r\n            for (Permanent permanent : game.getBattlefield().getActivePermanents(filter, controller, source.getSourceId(), game)) {\r\n                Spell copy = spell.copySpell();                \r\n                copy.setControllerId(controller);\r\n                copy.setCopiedSpell(true);\r\n                if (permanent.getId().equals(source.getSourceId())) {\r\n                    continue; // copy only for other creatures\r\n                }\r\n                boolean legal = true;\r\n                for (SpellTargetAddress addr : SpellTargetAddress.walk(copy)) {\r\n                    Target targetInstance = addr.getTarget(copy);\r\n                    legal &= targetInstance.canTarget(permanent.getId(), addr.getSpellAbility(copy), game);\r\n                }\r\n                if (legal) {\r\n                    for (SpellTargetAddress addr : SpellTargetAddress.walk(copy)) {\r\n                        Target targetInstance = addr.getTarget(copy);\r\n                        int numTargets = targetInstance.getNumberOfTargets();\r\n                        targetInstance.clearChosen();\r\n                        while (numTargets > 0) {\r\n                            targetInstance.add(permanent.getId(), game);\r\n                            numTargets--;\r\n                        }\r\n                    }\r\n                    targetable.put(permanent.getId(), copy);\r\n                }\r\n            }\r\n            while (targetable.size() > 0) {\r\n                FilterPermanent filter = new FilterPermanent(\"creature that spell could target (\"+targetable.size()+\" remaining)\");\r\n                filter.add(new FromSetPredicate(targetable.keySet()));\r\n                TargetPermanent target = new TargetPermanent(0, 1, filter, true);\r\n                if (target.possibleTargets(controller, game).size() > 1\r\n                    && target.canChoose(source.getSourceId(), controller, game)) {\r\n                    game.getPlayer(controller).choose(Outcome.Neutral, target, source.getId(), game);\r\n                }\r\n                Collection<UUID> chosen = target.getTargets();\r\n                if (chosen.size() == 0) {\r\n                    chosen = targetable.keySet();\r\n                }\r\n                List<UUID> toDelete = new ArrayList<>();\r\n                for (UUID chosenId : chosen) {\r\n                    Spell chosenCopy = targetable.get(chosenId);\r\n                    if (chosenCopy != null) {\r\n                        game.getStack().push(chosenCopy);\r\n                        toDelete.add(chosenId);\r\n                    }\r\n                }\r\n                for (UUID id : toDelete) {\r\n                    targetable.remove(id);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":46937,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player controller = game.getPlayer(source.getControllerId());\r\n        if (controller == null) {\r\n            return false;\r\n        }\r\n        Spell spell = (Spell) getValue(\"TriggeringSpell\");\r\n        if (spell != null) {\r\n            Map<UUID, Spell> targetable = new HashMap<>();\r\n            // gather all creatures that can be targeted from the spell to copy \r\n            for (Permanent permanent : game.getBattlefield().getActivePermanents(filter, controller.getId(), source.getSourceId(), game)) {\r\n                Spell copy = spell.copySpell();                \r\n                copy.setControllerId(controller.getId());\r\n                copy.setCopiedSpell(true);\r\n                if (permanent.getId().equals(source.getSourceId())) {\r\n                    continue; // copy only for other creatures\r\n                }\r\n                boolean legal = true;\r\n                for (SpellTargetAddress addr : SpellTargetAddress.walk(copy)) {\r\n                    Target targetInstance = addr.getTarget(copy);\r\n                    legal &= targetInstance.canTarget(permanent.getId(), addr.getSpellAbility(copy), game);\r\n                }\r\n                if (legal) {\r\n                    for (SpellTargetAddress addr : SpellTargetAddress.walk(copy)) {\r\n                        Target targetInstance = addr.getTarget(copy);\r\n                        int numTargets = targetInstance.getNumberOfTargets();\r\n                        targetInstance.clearChosen();\r\n                        while (numTargets > 0) {\r\n                            targetInstance.add(permanent.getId(), game);\r\n                            numTargets--;\r\n                        }\r\n                    }\r\n                    targetable.put(permanent.getId(), copy);\r\n                }\r\n            }\r\n            // controller \r\n            while (targetable.size() > 0) {\r\n                FilterPermanent filterCreatures = new FilterPermanent(\"creature that spell could target (\"+ targetable.size() + \" remaining)\");\r\n                filterCreatures.add(new FromSetPredicate(targetable.keySet()));\r\n                TargetPermanent target = new TargetPermanent(0, 1, filterCreatures, true);\r\n                if (target.possibleTargets(controller.getId(), game).size() > 1\r\n                    && target.canChoose(source.getSourceId(), controller.getId(), game)) {\r\n                    controller.choose(Outcome.Neutral, target, source.getId(), game);\r\n                }\r\n                Collection<UUID> choosenIds = target.getTargets();\r\n                if (choosenIds.isEmpty()) {\r\n                    choosenIds = targetable.keySet();\r\n                }\r\n                List<UUID> toDelete = new ArrayList<>();\r\n                for (UUID chosenId : choosenIds) {\r\n                    Spell chosenCopy = targetable.get(chosenId);\r\n                    if (chosenCopy != null) {\r\n                        game.getStack().push(chosenCopy);\r\n                        toDelete.add(chosenId);\r\n                    }\r\n                }\r\n                for (UUID idToDelte : toDelete) {\r\n                    targetable.remove(idToDelte);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"f77c93029964fc9fa5aaeed24c28893f9fcadae6","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        Permanent permanent = game.getPermanentOrLKIBattlefield(targetPointer.getFirst(game, source));\n        if (permanent != null) {\n            int power = permanent.getPower().getValue();\n            MercyKillingToken token = new MercyKillingToken();\n            token.putOntoBattlefield(power, game, source.getSourceId(), permanent.getControllerId());\n        }\n        return true;\n    }","id":46938,"modified_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        Permanent permanent = game.getPermanentOrLKIBattlefield(getTargetPointer().getFirst(game, source));\n        if (permanent != null) {\n            int power = permanent.getPower().getValue();\n            return new MercyKillingToken().putOntoBattlefield(power, game, source.getSourceId(), permanent.getControllerId());\n        }\n        return false;\n    }","commit_id":"f77c93029964fc9fa5aaeed24c28893f9fcadae6","url":"https://github.com/magefree/mage"},{"original_method":"public MercyKillingTokenEffect() {\n        super(Outcome.PutCreatureInPlay);\n        staticText = \", then puts X 1/1 green and white Elf Warrior creature tokens onto the battlefield, where X is that creature's power.\";\n    }","id":46939,"modified_method":"public MercyKillingTokenEffect() {\n        super(Outcome.PutCreatureInPlay);\n        staticText = \", then puts X 1/1 green and white Elf Warrior creature tokens onto the battlefield, where X is that creature's power\";\n    }","commit_id":"f77c93029964fc9fa5aaeed24c28893f9fcadae6","url":"https://github.com/magefree/mage"},{"original_method":"public MercyKilling(UUID ownerId) {\n        super(ownerId, 231, \"Mercy Killing\", Rarity.UNCOMMON, new CardType[]{CardType.INSTANT}, \"{2}{G/W}\");\n        this.expansionSetCode = \"SHM\";\n        \n        // Target creature's controller sacrifices it, then puts X 1/1 green and white Elf Warrior creature tokens onto the battlefield, where X is that creature's power.\n        this.getSpellAbility().addTarget(new TargetCreaturePermanent());\n        Effect sacEffect = new SacrificeTargetEffect();\n        sacEffect.setText(\"Target creature's controller sacrifices it\");\n        this.getSpellAbility().addEffect(sacEffect);\n        this.getSpellAbility().addEffect(new MercyKillingTokenEffect());\n    }","id":46940,"modified_method":"public MercyKilling(UUID ownerId) {\n        super(ownerId, 231, \"Mercy Killing\", Rarity.UNCOMMON, new CardType[]{CardType.INSTANT}, \"{2}{G/W}\");\n        this.expansionSetCode = \"SHM\";\n        \n        // Target creature's controller sacrifices it, then puts X 1/1 green and white Elf Warrior creature tokens onto the battlefield, where X is that creature's power.\n        this.getSpellAbility().addEffect(new SacrificeTargetEffect(\"Target creature's controller sacrifices it\"));\n        this.getSpellAbility().addEffect(new MercyKillingTokenEffect());\n        this.getSpellAbility().addTarget(new TargetCreaturePermanent());\n    }","commit_id":"f77c93029964fc9fa5aaeed24c28893f9fcadae6","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        Permanent target = game.getPermanent(targetPointer.getFirst(game, source));\n        if (target != null) {\n            ObjectColor color = target.getColor();\n            target.addPower(2);\n            for (Permanent p : game.getBattlefield().getActivePermanents(new FilterCreaturePermanent(), source.getControllerId(), game)) {\n                if (p.getColor().shares(color) && !p.getId().equals(target.getId())) {\n                    p.addPower(2);\n                }\n            }\n            return true;\n        }\n        return false;\n    }","id":46941,"modified_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        for(MageObjectReference mageObjectReference :affectedObjectList) {\n            Permanent permanent = mageObjectReference.getPermanent(game);\n            if (permanent != null) {\n                permanent.addPower(2);\n            } \n        }\n        return true;        \n    }","commit_id":"f77c93029964fc9fa5aaeed24c28893f9fcadae6","url":"https://github.com/magefree/mage"},{"original_method":"public RallyTheRighteousUntapEffect() {\n        super(Outcome.Untap);\n        staticText = \"<i>Radiance<\/i> \u2014 Untap target creature and each other creature that shares a color with it.\";\n    }","id":46942,"modified_method":"public RallyTheRighteousUntapEffect() {\n        super(Outcome.Untap);\n        staticText = \"<i>Radiance<\/i> \u2014 Untap target creature and each other creature that shares a color with it\";\n    }","commit_id":"f77c93029964fc9fa5aaeed24c28893f9fcadae6","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        Permanent target = game.getPermanent(targetPointer.getFirst(game, source));\n        if (target != null) {\n            ObjectColor color = target.getColor();\n            target.untap(game);\n            for (Permanent p : game.getBattlefield().getActivePermanents(new FilterCreaturePermanent(), source.getControllerId(), game)) {\n                if (p.getColor().shares(color) && !p.getId().equals(target.getId())) {\n                    p.untap(game);\n                }\n            }\n            return true;\n        }\n        return false;\n    }","id":46943,"modified_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        Permanent target = game.getPermanent(getTargetPointer().getFirst(game, source));\n        if (target != null) {\n            ObjectColor color = target.getColor();\n            target.untap(game);\n            for (Permanent permanent : game.getBattlefield().getActivePermanents(new FilterCreaturePermanent(), source.getControllerId(), source.getSourceId(), game)) {\n                if (permanent.getColor().shares(color) && !permanent.getId().equals(target.getId())) {\n                    permanent.untap(game);\n                }\n            }\n            return true;\n        }\n        return false;\n    }","commit_id":"f77c93029964fc9fa5aaeed24c28893f9fcadae6","url":"https://github.com/magefree/mage"},{"original_method":"public RallyTheRighteousBoostEffect() {\n        super(Duration.EndOfTurn, Layer.PTChangingEffects_7, SubLayer.ModifyPT_7c, Outcome.BoostCreature);\n        staticText = \" Those creatures get +2/+0 until end of turn.\";\n    }","id":46944,"modified_method":"public RallyTheRighteousBoostEffect() {\n        super(Duration.EndOfTurn, Layer.PTChangingEffects_7, SubLayer.ModifyPT_7c, Outcome.BoostCreature);\n        staticText = \"Those creatures get +2/+0 until end of turn\";\n    }","commit_id":"f77c93029964fc9fa5aaeed24c28893f9fcadae6","url":"https://github.com/magefree/mage"},{"original_method":"public VeilstoneAmuletEffect() {\n        super(Duration.EndOfTurn, Outcome.Benefit);\n    }","id":46945,"modified_method":"public VeilstoneAmuletEffect() {\n        super(Duration.EndOfTurn, Outcome.Benefit);\n        staticText = \"creatures you control can't be the targets of spells or abilities your opponents control this turn\";\n    }","commit_id":"f77c93029964fc9fa5aaeed24c28893f9fcadae6","url":"https://github.com/magefree/mage"},{"original_method":"public VeilstoneAmulet(UUID ownerId) {\n        super(ownerId, 166, \"Veilstone Amulet\", Rarity.RARE, new CardType[]{CardType.ARTIFACT}, \"{3}\");\n        this.expansionSetCode = \"FUT\";\n\n        // Whenever you cast a spell, creatures you control can't be the targets of spells or abilities your opponents control this turn.\n        this.addAbility(new SpellCastControllerTriggeredAbility(new VeilstoneAmuletEffect(),\n                                                                new FilterSpell(),\n                                                                false,\n                                                                \"Whenever you cast a spell, creatures you control can't be the targets of spells or abilities your opponents control this turn.\"));\n    }","id":46946,"modified_method":"public VeilstoneAmulet(UUID ownerId) {\n        super(ownerId, 166, \"Veilstone Amulet\", Rarity.RARE, new CardType[]{CardType.ARTIFACT}, \"{3}\");\n        this.expansionSetCode = \"FUT\";\n\n        // Whenever you cast a spell, creatures you control can't be the targets of spells or abilities your opponents control this turn.\n        this.addAbility(new SpellCastControllerTriggeredAbility(new VeilstoneAmuletEffect(), new FilterSpell(\"a spell\"), false));\n    }","commit_id":"f77c93029964fc9fa5aaeed24c28893f9fcadae6","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean applies(GameEvent event, Ability ability, Game game) {\n        if (event.getType() == EventType.TARGET) {\n            Permanent permanent = game.getPermanent(event.getTargetId());\n            if (permanent != null) {\n                UUID permanentController = permanent.getControllerId();\n                UUID abilityController = ability.getControllerId();\n                UUID sourceController = event.getPlayerId();\n                if (permanent.getCardType().contains(CardType.CREATURE) &&\n                    permanentController.equals(abilityController) &&\n                    game.getPlayer(abilityController).hasOpponent(sourceController, game)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }","id":46947,"modified_method":"@Override\n    public boolean applies(GameEvent event, Ability ability, Game game) {\n        if (event.getType() == EventType.TARGET) {\n            Permanent permanent = game.getPermanent(event.getTargetId());\n            if (permanent != null) {\n                if (permanent.getCardType().contains(CardType.CREATURE) &&\n                    permanent.getControllerId().equals(ability.getControllerId()) &&\n                    game.getPlayer(ability.getControllerId()).hasOpponent(event.getPlayerId(), game)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }","commit_id":"f77c93029964fc9fa5aaeed24c28893f9fcadae6","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public int calculate(Game game, Ability sourceAbility, Effect effect) {\n        UrborgJusticeWatcher watcher = (UrborgJusticeWatcher) game.getState().getWatchers().get(\"YourCreaturesDied\", sourceAbility.getControllerId());\n        if (watcher != null) {\n            return watcher.getCreaturesCount();\n        }\n        return 0;\n    }","id":46948,"modified_method":"@Override\n    public int calculate(Game game, Ability sourceAbility, Effect effect) {\n        CardsPutIntoGraveyardWatcher watcher = (CardsPutIntoGraveyardWatcher) game.getState().getWatchers().get(\"CardsPutIntoGraveyardWatcher\");\n\n        int count = 0;\n        Player controller = game.getPlayer(sourceAbility.getControllerId());\n        if (controller != null && watcher != null) {\n            Set<MageObjectReference> cardsInGraveyard = watcher.getCardsPutToGraveyardFromBattlefield();\n            for (MageObjectReference mor : cardsInGraveyard) {\n                if (game.getState().getZoneChangeCounter(mor.getSourceId()) == mor.getZoneChangeCounter()) {\n                    Card card = game.getCard(mor.getSourceId());\n                    if (card != null && card.getOwnerId().equals(sourceAbility.getControllerId()) && card.getCardType().contains(CardType.CREATURE)) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return count;\n    }","commit_id":"af7bb617468b4bb30e9f0172ee1bb57c9d855a83","url":"https://github.com/magefree/mage"},{"original_method":"public UrborgJustice(UUID ownerId) {\n        super(ownerId, 26, \"Urborg Justice\", Rarity.RARE, new CardType[]{CardType.INSTANT}, \"{B}{B}\");\n        this.expansionSetCode = \"WTH\";\n\n        // Target opponent sacrifices a creature for each creature put into your graveyard from the battlefield this turn.\n        this.getSpellAbility().addWatcher(new UrborgJusticeWatcher());\n        SacrificeEffect sacrificeEffect = new SacrificeEffect(new FilterCreaturePermanent(), new UrborgJusticeDynamicValue(), \"\");\n        sacrificeEffect.setText(\"Target opponent sacrifices a creature for each creature put into your graveyard from the battlefield this turn\");\n\n        this.getSpellAbility().addEffect(sacrificeEffect);\n        this.getSpellAbility().addTarget(new TargetOpponent());\n    }","id":46949,"modified_method":"public UrborgJustice(UUID ownerId) {\n        super(ownerId, 26, \"Urborg Justice\", Rarity.RARE, new CardType[]{CardType.INSTANT}, \"{B}{B}\");\n        this.expansionSetCode = \"WTH\";\n\n        // Target opponent sacrifices a creature for each creature put into your graveyard from the battlefield this turn.\n        this.getSpellAbility().addWatcher(new CardsPutIntoGraveyardWatcher());\n        SacrificeEffect sacrificeEffect = new SacrificeEffect(new FilterCreaturePermanent(), new UrborgJusticeDynamicValue(), \"\");\n        sacrificeEffect.setText(\"Target opponent sacrifices a creature for each creature put into your graveyard from the battlefield this turn\");\n\n        this.getSpellAbility().addEffect(sacrificeEffect);\n        this.getSpellAbility().addTarget(new TargetOpponent());\n    }","commit_id":"af7bb617468b4bb30e9f0172ee1bb57c9d855a83","url":"https://github.com/magefree/mage"},{"original_method":"public DomainValue(Integer amount){\r\n        this.amount = amount;\r\n    }","id":46950,"modified_method":"public DomainValue(Integer amount) {\r\n        this(amount, false);\r\n    }","commit_id":"b8733339bf29b28a2465109574ee76374a86fdc7","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public int calculate(Game game, Ability sourceAbility, Effect effect) {\r\n        int havePlains = 0;\r\n        int haveIslands = 0;\r\n        int haveMountains = 0;\r\n        int haveSwamps = 0;\r\n        int haveForests = 0;\r\n        for (Permanent p : game.getBattlefield().getAllActivePermanents(sourceAbility.getControllerId())) {\r\n            if (p.getCardType().contains(CardType.LAND)) {\r\n                if (havePlains == 0 && p.getSubtype().contains(\"Plains\")) {\r\n                    havePlains = 1;\r\n                }\r\n                if (haveIslands == 0 && p.getSubtype().contains(\"Island\")) {\r\n                    haveIslands = 1;\r\n                }\r\n                if (haveMountains == 0 && p.getSubtype().contains(\"Mountain\")) {\r\n                    haveMountains = 1;\r\n                }\r\n                if (haveSwamps == 0 && p.getSubtype().contains(\"Swamp\")) {\r\n                    haveSwamps = 1;\r\n                }\r\n                if (haveForests == 0 && p.getSubtype().contains(\"Forest\")) {\r\n                    haveForests = 1;\r\n                }\r\n            }\r\n        }\r\n        return amount * (haveForests + haveIslands + haveMountains + havePlains + haveSwamps);\r\n    }","id":46951,"modified_method":"@Override\r\n    public int calculate(Game game, Ability sourceAbility, Effect effect) {\r\n        int havePlains = 0;\r\n        int haveIslands = 0;\r\n        int haveMountains = 0;\r\n        int haveSwamps = 0;\r\n        int haveForests = 0;\r\n        UUID targetPlayer;\r\n        if (countTargetPlayer) {\r\n            targetPlayer = sourceAbility.getTargets().getFirstTarget();\r\n        } else {\r\n            targetPlayer = sourceAbility.getControllerId();\r\n        }\r\n        for (Permanent p : game.getBattlefield().getAllActivePermanents(targetPlayer)) {\r\n            if (p.getCardType().contains(CardType.LAND)) {\r\n                if (havePlains == 0 && p.getSubtype().contains(\"Plains\")) {\r\n                    havePlains = 1;\r\n                }\r\n                if (haveIslands == 0 && p.getSubtype().contains(\"Island\")) {\r\n                    haveIslands = 1;\r\n                }\r\n                if (haveMountains == 0 && p.getSubtype().contains(\"Mountain\")) {\r\n                    haveMountains = 1;\r\n                }\r\n                if (haveSwamps == 0 && p.getSubtype().contains(\"Swamp\")) {\r\n                    haveSwamps = 1;\r\n                }\r\n                if (haveForests == 0 && p.getSubtype().contains(\"Forest\")) {\r\n                    haveForests = 1;\r\n                }\r\n            }\r\n        }\r\n        return amount * (haveForests + haveIslands + haveMountains + havePlains + haveSwamps);\r\n    }","commit_id":"b8733339bf29b28a2465109574ee76374a86fdc7","url":"https://github.com/magefree/mage"},{"original_method":"public DomainValue(final DomainValue dynamicValue) {\r\n        this.amount = dynamicValue.amount;\r\n    }","id":46952,"modified_method":"public DomainValue(final DomainValue dynamicValue) {\r\n        this.amount = dynamicValue.amount;\r\n        this.countTargetPlayer = dynamicValue.countTargetPlayer;\r\n    }","commit_id":"b8733339bf29b28a2465109574ee76374a86fdc7","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        if (player != null) {\r\n            Cards cards = new CardsImpl(Zone.PICK);\r\n\r\n            boolean properCardFound = false;\r\n            int count = Math.min(player.getLibrary().size(), 4);\r\n            for (int i = 0; i < count; i++) {\r\n                Card card = player.getLibrary().removeFromTop(game);\r\n                if (card != null) {\r\n                    cards.add(card);\r\n                    if (filterPutInHand.match(card, source.getSourceId(), source.getControllerId(), game)) {\r\n                        properCardFound = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!cards.isEmpty()) {\r\n                player.revealCards(\"Satyr Wayfinder\", cards, game);\r\n                TargetCard target = new TargetCard(Zone.PICK, filterPutInHand);\r\n                if (properCardFound && player.choose(Outcome.DrawCard, cards, target, game)) {\r\n                    Card card = game.getCard(target.getFirstTarget());\r\n                    if (card != null) {\r\n                        cards.remove(card);\r\n                        player.moveCardToHandWithInfo(card, source.getSourceId(), game, Zone.LIBRARY);\r\n                    }\r\n\r\n                }\r\n\r\n                for (UUID cardId : cards) {\r\n                    Card card = game.getCard(cardId);\r\n                    if (card != null) {\r\n                        card.moveToZone(Zone.GRAVEYARD, source.getSourceId(), game, true);\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":46953,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        MageObject sourceObject = game.getObject(source.getSourceId());\r\n        if (player != null && sourceObject != null) {\r\n            Cards cards = new CardsImpl(Zone.LIBRARY);\r\n            cards.addAll(player.getLibrary().getTopCards(game, 4));\r\n            boolean properCardFound = cards.count(filterPutInHand, source.getControllerId(), source.getSourceId(), game) > 0;\r\n            if (!cards.isEmpty()) {\r\n                player.revealCards(sourceObject.getLogName(), cards, game);\r\n                TargetCard target = new TargetCard(Zone.LIBRARY, filterPutInHand);\r\n                if (properCardFound && \r\n                        player.chooseUse(outcome, \"Put a land card into your hand?\", game) &&\r\n                        player.choose(Outcome.DrawCard, cards, target, game)) {\r\n                    Card card = game.getCard(target.getFirstTarget());\r\n                    if (card != null) {\r\n                        cards.remove(card);\r\n                        player.moveCardToHandWithInfo(card, source.getSourceId(), game, Zone.LIBRARY);\r\n                    }\r\n\r\n                }\r\n\r\n                for (UUID cardId : cards) {\r\n                    Card card = game.getCard(cardId);\r\n                    if (card != null) {\r\n                        card.moveToZone(Zone.GRAVEYARD, source.getSourceId(), game, true);\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"e9d31b9265233fcc9ac1a47e35893d6de01c3af8","url":"https://github.com/magefree/mage"},{"original_method":"public void subtractCostAddMana(Mana cost, Mana addMana, boolean onlyManaCosts) {\n        if (isEmpty()) {\n            this.add(new Mana());\n        }\n        boolean repeatable = false;\n        if (addMana.getAny() == 1 && addMana.count() == 1 && onlyManaCosts) {\n            repeatable = true; // only replace to any with mana costs only will be repeated if able\n        }\n        for (Mana mana: this) {\n            while (mana.includesMana(cost)) {\n                mana.subtract(cost);\n                mana.add(addMana);\n                if (!repeatable) {\n                    break;\n                }\n            }\n        }\n    }","id":46954,"modified_method":"public void subtractCostAddMana(Mana cost, Mana addMana, boolean onlyManaCosts) {\n        if (isEmpty()) {\n            this.add(new Mana());\n        }\n        boolean repeatable = false;\n        if (addMana.getAny() == 1 && addMana.count() == 1 && onlyManaCosts) {\n            repeatable = true; // only replace to any with mana costs only will be repeated if able\n        }\n        for (Mana mana: this) {\n            while (mana.includesMana(cost)) {\n                mana.subtractCost(cost);\n                mana.add(addMana);\n                if (!repeatable) {\n                    break;\n                }\n            }\n        }\n    }","commit_id":"874b170a741feae57316396e03afb2d932bfc1f1","url":"https://github.com/magefree/mage"},{"original_method":"public void addManaWithCost(List<ManaAbility> abilities, Game game) {\n        if (isEmpty()) {\n            this.add(new Mana());\n        }\n        if (!abilities.isEmpty()) {\n            if (abilities.size() == 1) {\n                //if there is only one mana option available add it to all the existing options\n                ManaAbility ability = abilities.get(0);\n                List<Mana> netManas =  abilities.get(0).getNetMana(game);\n                // no mana costs\n                if (ability.getManaCosts().isEmpty()) {\n                    if (netManas.size() == 1) {\n                        addMana(netManas.get(0));\n                    } else {\n                        List<Mana> copy = copy();\n                        this.clear();\n                        for (Mana netMana: netManas) {\n                            for (Mana mana: copy) {\n                                Mana newMana = new Mana();\n                                newMana.add(mana);\n                                newMana.add(netMana);\n                                this.add(newMana);\n                            }                        \n                        }                    \n                    }                    \n                }\n                else {                    \n                    if (netManas.size() == 1) {\n                        subtractCostAddMana(ability.getManaCosts().getMana(), netManas.get(0), ability.getCosts().isEmpty());\n                    } else {\n                        List<Mana> copy = copy();\n                        this.clear();\n                        for (Mana netMana: netManas) {\n                            for (Mana mana: copy) {\n                                Mana newMana = new Mana();\n                                newMana.add(mana);\n                                newMana.add(netMana);\n                                subtractCostAddMana(ability.getManaCosts().getMana(), netMana, ability.getCosts().isEmpty());\n                            }                        \n                        }                    \n                    }                                        \n                }\n            }\n            else if (abilities.size() > 1) {\n                //perform a union of all existing options and the new options\n                List<Mana> copy = copy();\n                this.clear();\n                for (ManaAbility ability: abilities) {\n                    List<Mana> netManas =  ability.getNetMana(game);\n                    if (ability.getManaCosts().isEmpty()) {\n                        for (Mana netMana: netManas) {\n                            for (Mana mana: copy) {\n                                Mana newMana = new Mana();\n                                newMana.add(mana);\n                                newMana.add(netMana);\n                                this.add(newMana);\n                            }\n                        }\n                    }\n                    else {\n                        for (Mana netMana: netManas) {\n                            for (Mana mana: copy) {                            \n                                Mana newMana = new Mana();\n                                newMana.add(mana);\n                                if (mana.contains(ability.getManaCosts().getMana())) {\n                                    newMana.subtract(ability.getManaCosts().getMana());\n                                    newMana.add(netMana);\n                                }\n                                this.add(newMana);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }","id":46955,"modified_method":"public void addManaWithCost(List<ManaAbility> abilities, Game game) {\n        if (isEmpty()) {\n            this.add(new Mana());\n        }\n        if (!abilities.isEmpty()) {\n            if (abilities.size() == 1) {\n                //if there is only one mana option available add it to all the existing options\n                ManaAbility ability = abilities.get(0);\n                List<Mana> netManas =  abilities.get(0).getNetMana(game);\n                // no mana costs\n                if (ability.getManaCosts().isEmpty()) {\n                    if (netManas.size() == 1) {\n                        addMana(netManas.get(0));\n                    } else {\n                        List<Mana> copy = copy();\n                        this.clear();\n                        for (Mana netMana: netManas) {\n                            for (Mana mana: copy) {\n                                Mana newMana = new Mana();\n                                newMana.add(mana);\n                                newMana.add(netMana);\n                                this.add(newMana);\n                            }                        \n                        }                    \n                    }                    \n                }\n                else {                    \n                    if (netManas.size() == 1) {\n                        subtractCostAddMana(ability.getManaCosts().getMana(), netManas.get(0), ability.getCosts().isEmpty());\n                    } else {\n                        List<Mana> copy = copy();\n                        this.clear();\n                        for (Mana netMana: netManas) {\n                            for (Mana mana: copy) {\n                                Mana newMana = new Mana();\n                                newMana.add(mana);\n                                newMana.add(netMana);\n                                subtractCostAddMana(ability.getManaCosts().getMana(), netMana, ability.getCosts().isEmpty());\n                            }                        \n                        }                    \n                    }                                        \n                }\n            }\n            else if (abilities.size() > 1) {\n                //perform a union of all existing options and the new options\n                List<Mana> copy = copy();\n                this.clear();\n                for (ManaAbility ability: abilities) {\n                    List<Mana> netManas =  ability.getNetMana(game);\n                    if (ability.getManaCosts().isEmpty()) {\n                        for (Mana netMana: netManas) {\n                            for (Mana mana: copy) {\n                                Mana newMana = new Mana();\n                                newMana.add(mana);\n                                newMana.add(netMana);\n                                this.add(newMana);\n                            }\n                        }\n                    }\n                    else {\n                        for (Mana netMana: netManas) {\n                            for (Mana mana: copy) {                            \n                                Mana newMana = new Mana();\n                                newMana.add(mana);\n                                if (mana.contains(ability.getManaCosts().getMana())) {\n                                    newMana.subtractCost(ability.getManaCosts().getMana());\n                                    newMana.add(netMana);\n                                }\n                                this.add(newMana);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }","commit_id":"874b170a741feae57316396e03afb2d932bfc1f1","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean chooseTarget(Outcome outcome, Target target, Ability source, Game game) {\n        if (!targets.isEmpty()) {\n            if (target instanceof TargetPermanent) {\n                for (String targetDefinition: targets) {\n                    String[] targetList = targetDefinition.split(\"\\\\^\");\n                    boolean targetFound = false;\n                    for (String targetName: targetList) {\n                        for (Permanent permanent : game.getBattlefield().getAllActivePermanents((FilterPermanent)target.getFilter(), game)) {\n                            if (permanent.getName().equals(targetName) || (permanent.getName()+\"-\"+permanent.getExpansionSetCode()).equals(targetName)) {\n                                if (((TargetPermanent)target).canTarget(source.getControllerId(), permanent.getId(), source, game) && !target.getTargets().contains(permanent.getId())) {\n                                    target.add(permanent.getId(), game);\n                                    targetFound = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if (targetFound) {\n                        targets.remove(targetDefinition);\n                        return true;\n                    }\n                }\n            }\n            if (target instanceof TargetPlayer) {\n                for (String targetDefinition: targets) {\n                    if (targetDefinition.startsWith(\"targetPlayer=\")) {\n                        String playerName = targetDefinition.substring(targetDefinition.indexOf(\"targetPlayer=\") + 13);\n                        for (Player player: game.getPlayers().values()) {\n                            if (player.getName().equals(playerName)\n                                    && ((TargetPlayer) target).canTarget(playerId, player.getId(), source, game)) {\n                                target.add(player.getId(), game);\n                                return true;\n                            }\n                        }\n                    }\n                }\n                \n            }\n            if (target instanceof TargetCardInHand) {\n                for (String targetDefinition: targets) {\n                    String[] targetList = targetDefinition.split(\"\\\\^\");\n                    boolean targetFound = false;\n                    for (String targetName: targetList) {\n                        for (Card card: this.getHand().getCards(((TargetCardInHand)target).getFilter(), game)) {\n                            if (card.getName().equals(targetName) || (card.getName()+\"-\"+card.getExpansionSetCode()).equals(targetName)) {\n                                if (((TargetCardInHand)target).canTarget(source.getControllerId(), card.getId(), source, game) && !target.getTargets().contains(card.getId())) {\n                                    target.add(card.getId(), game);\n                                    targetFound = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if (targetFound) {\n                        targets.remove(targetDefinition);\n                        return true;\n                    }\n                }\n\n            }\n\n        }\n        return super.chooseTarget(outcome, target, source, game);\n    }","id":46956,"modified_method":"@Override\n    public boolean chooseTarget(Outcome outcome, Target target, Ability source, Game game) {\n        if (!targets.isEmpty()) {\n            if (target instanceof TargetPermanent) {\n                for (String targetDefinition: targets) {\n                    String[] targetList = targetDefinition.split(\"\\\\^\");\n                    boolean targetFound = false;\n                    for (String targetName: targetList) {\n                        boolean allowCopy = true;\n                        if (targetName.endsWith(\"[no copy]\")) {\n                            allowCopy = false;\n                            targetName = targetName.substring(0, targetName.length()-9);\n                        }\n                        for (Permanent permanent : game.getBattlefield().getAllActivePermanents((FilterPermanent)target.getFilter(), game)) {\n                            if (permanent.getName().equals(targetName) || (permanent.getName()+\"-\"+permanent.getExpansionSetCode()).equals(targetName)) {\n                                if (((TargetPermanent)target).canTarget(source == null ? this.getId(): source.getControllerId(), permanent.getId(), source, game) && !target.getTargets().contains(permanent.getId())) {\n                                    if (!permanent.isCopy() || allowCopy) {\n                                        target.add(permanent.getId(), game);\n                                        targetFound = true;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (targetFound) {\n                        targets.remove(targetDefinition);\n                        return true;\n                    }\n                }\n            }\n            if (target instanceof TargetPlayer) {\n                for (String targetDefinition: targets) {\n                    if (targetDefinition.startsWith(\"targetPlayer=\")) {\n                        String playerName = targetDefinition.substring(targetDefinition.indexOf(\"targetPlayer=\") + 13);\n                        for (Player player: game.getPlayers().values()) {\n                            if (player.getName().equals(playerName)\n                                    && ((TargetPlayer) target).canTarget(playerId, player.getId(), source, game)) {\n                                target.add(player.getId(), game);\n                                return true;\n                            }\n                        }\n                    }\n                }\n                \n            }\n            if (target instanceof TargetCardInHand) {\n                for (String targetDefinition: targets) {\n                    String[] targetList = targetDefinition.split(\"\\\\^\");\n                    boolean targetFound = false;\n                    for (String targetName: targetList) {\n                        for (Card card: this.getHand().getCards(((TargetCardInHand)target).getFilter(), game)) {\n                            if (card.getName().equals(targetName) || (card.getName()+\"-\"+card.getExpansionSetCode()).equals(targetName)) {\n                                if (((TargetCardInHand)target).canTarget(source.getControllerId(), card.getId(), source, game) && !target.getTargets().contains(card.getId())) {\n                                    target.add(card.getId(), game);\n                                    targetFound = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if (targetFound) {\n                        targets.remove(targetDefinition);\n                        return true;\n                    }\n                }\n\n            }\n\n        }\n        return super.chooseTarget(outcome, target, source, game);\n    }","commit_id":"874b170a741feae57316396e03afb2d932bfc1f1","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n        public void extendNamespaceScope(@NotNull BindingTrace trace, @NotNull NamespaceDescriptor namespaceDescriptor,\n                @NotNull WritableScope namespaceMemberScope) {\n            DefaultModuleConfiguration.createStandardConfiguration(project, true)\n                    .extendNamespaceScope(trace, namespaceDescriptor, namespaceMemberScope);\n            if (contextToBaseOn == null) {\n                return;\n            }\n            if (!isRootNamespace(namespaceDescriptor)) {\n                return;\n            }\n            NamespaceDescriptor rootNamespaceScope = contextToBaseOn.get(BindingContext.FQNAME_TO_NAMESPACE_DESCRIPTOR, FqName.ROOT);\n            assert rootNamespaceScope != null;\n            JetScope memberScope = rootNamespaceScope.getMemberScope();\n            namespaceMemberScope.importScope(memberScope);\n        }","id":46957,"modified_method":"@Override\n        public void extendNamespaceScope(@NotNull BindingTrace trace, @NotNull NamespaceDescriptor namespaceDescriptor,\n                @NotNull WritableScope namespaceMemberScope) {\n            DefaultModuleConfiguration.createStandardConfiguration(project, true)\n                    .extendNamespaceScope(trace, namespaceDescriptor, namespaceMemberScope);\n            if (contextToBaseOn == null) {\n                return;\n            }\n            if (isNamespaceImportedByDefault(namespaceDescriptor) || isRootNamespace(namespaceDescriptor)) {\n                FqName descriptorName = DescriptorUtils.getFQName(namespaceDescriptor).toSafe();\n                NamespaceDescriptor alreadyAnalyzedNamespace = contextToBaseOn.get(BindingContext.FQNAME_TO_NAMESPACE_DESCRIPTOR, descriptorName);\n                namespaceMemberScope.importScope(alreadyAnalyzedNamespace.getMemberScope());\n            }\n        }","commit_id":"d6d5a8c25b263687ae7c0ceea456361c6cb3149e","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Override\n        public void addDefaultImports(@NotNull Collection<JetImportDirective> directives) {\n            //TODO: these things should not be hard-coded like that\n            directives.add(JetPsiFactory.createImportDirective(project, new ImportPath(\"js.*\")));\n            directives.add(JetPsiFactory.createImportDirective(project, new ImportPath(\"java.lang.*\")));\n            directives.add(JetPsiFactory.createImportDirective(project, new ImportPath(JetStandardClasses.STANDARD_CLASSES_FQNAME, true)));\n            directives.add(JetPsiFactory.createImportDirective(project, new ImportPath(\"kotlin.*\")));\n        }","id":46958,"modified_method":"@Override\n        public void addDefaultImports(@NotNull Collection<JetImportDirective> directives) {\n            for (ImportPath path : DEFAULT_IMPORT_PATHS) {\n                directives.add(JetPsiFactory.createImportDirective(project, path));\n            }\n        }","commit_id":"d6d5a8c25b263687ae7c0ceea456361c6cb3149e","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@NotNull\n    public static AnalyzeExhaust analyzeFiles(\n            @NotNull Collection<JetFile> files,\n            @NotNull Predicate<PsiFile> filesToAnalyzeCompletely, @NotNull Config config,\n            boolean storeContextForBodiesResolve) {\n        Project project = config.getProject();\n\n        final ModuleDescriptor owner = new ModuleDescriptor(Name.special(\"<module>\"));\n\n        Predicate<PsiFile> completely = Predicates.and(notLibFiles(config.getLibFiles()), filesToAnalyzeCompletely);\n\n        TopDownAnalysisParameters topDownAnalysisParameters = new TopDownAnalysisParameters(\n                completely, false, false, Collections.<AnalyzerScriptParameter>emptyList());\n\n        BindingContext libraryBindingContext = config.getLibraryBindingContext();\n        BindingTrace trace = libraryBindingContext == null ?\n                             new ObservableBindingTrace(new BindingTraceContext()) :\n                             new DelegatingBindingTrace(libraryBindingContext);\n        InjectorForTopDownAnalyzerForJs injector = new InjectorForTopDownAnalyzerForJs(\n                project, topDownAnalysisParameters, trace, owner,\n                new JsConfiguration(project, libraryBindingContext));\n        try {\n            Collection<JetFile> allFiles = libraryBindingContext != null ?\n                                           files :\n                                           withJsLibAdded(files, config);\n            injector.getTopDownAnalyzer().analyzeFiles(allFiles, Collections.<AnalyzerScriptParameter>emptyList());\n            BodiesResolveContext bodiesResolveContext = storeContextForBodiesResolve ?\n                                                        new CachedBodiesResolveContext(injector.getTopDownAnalysisContext()) :\n                                                        null;\n            return AnalyzeExhaust.success(trace.getBindingContext(), bodiesResolveContext);\n        }\n        finally {\n            injector.destroy();\n        }\n    }","id":46959,"modified_method":"@NotNull\n    public static AnalyzeExhaust analyzeFiles(\n            @NotNull Collection<JetFile> files,\n            @NotNull Predicate<PsiFile> filesToAnalyzeCompletely, @NotNull Config config,\n            boolean storeContextForBodiesResolve) {\n        Project project = config.getProject();\n\n        final ModuleDescriptor owner = new ModuleDescriptor(Name.special(\"<module>\"));\n\n        Predicate<PsiFile> completely = Predicates.and(notLibFiles(config.getLibFiles()), filesToAnalyzeCompletely);\n\n        TopDownAnalysisParameters topDownAnalysisParameters = new TopDownAnalysisParameters(\n                completely, false, false, Collections.<AnalyzerScriptParameter>emptyList());\n\n        BindingContext libraryBindingContext = config.getLibraryBindingContext();\n        BindingTrace trace = libraryBindingContext == null ?\n                             new ObservableBindingTrace(new BindingTraceContext()) :\n                             new DelegatingBindingTrace(libraryBindingContext);\n        InjectorForTopDownAnalyzerForJs injector = new InjectorForTopDownAnalyzerForJs(\n                project, topDownAnalysisParameters, trace, owner,\n                new JsConfiguration(project, libraryBindingContext));\n        try {\n            Collection<JetFile> allFiles = libraryBindingContext != null ?\n                                           files :\n                                           Config.withJsLibAdded(files, config);\n            injector.getTopDownAnalyzer().analyzeFiles(allFiles, Collections.<AnalyzerScriptParameter>emptyList());\n            BodiesResolveContext bodiesResolveContext = storeContextForBodiesResolve ?\n                                                        new CachedBodiesResolveContext(injector.getTopDownAnalysisContext()) :\n                                                        null;\n            return AnalyzeExhaust.success(trace.getBindingContext(), bodiesResolveContext);\n        }\n        finally {\n            injector.destroy();\n        }\n    }","commit_id":"d6d5a8c25b263687ae7c0ceea456361c6cb3149e","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@NotNull\n    public static BindingContext analyzeFilesAndCheckErrors(@NotNull List<JetFile> files,\n            @NotNull Config config) {\n        BindingContext bindingContext = analyzeFiles(files, Predicates.<PsiFile>alwaysTrue(), config).getBindingContext();\n        checkForErrors(withJsLibAdded(files, config), bindingContext);\n        return bindingContext;\n    }","id":46960,"modified_method":"@NotNull\n    public static BindingContext analyzeFilesAndCheckErrors(@NotNull List<JetFile> files,\n            @NotNull Config config) {\n        BindingContext bindingContext = analyzeFiles(files, Predicates.<PsiFile>alwaysTrue(), config).getBindingContext();\n        checkForErrors(Config.withJsLibAdded(files, config), bindingContext);\n        return bindingContext;\n    }","commit_id":"d6d5a8c25b263687ae7c0ceea456361c6cb3149e","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public void testGenerateTestCase() throws Exception {\n        generateJavaScriptFiles(EcmaVersion.all(),\n                                \"libraries/stdlib/test\",\n                                //\"dom/DomTest.kt\",\n                                \"js/MapTest.kt\",\n                                \"ListTest.kt\",\n                                \"StringTest.kt\");\n    }","id":46961,"modified_method":"public void testGenerateTestCase() throws Exception {\n        performStdLibTest(EcmaVersion.all(),\n                          \"libraries/stdlib/test\",\n                          //\"dom/DomTest.kt\",\n                          //\"js/MapTest.kt\",\n                          \"ListTest.kt\",\n                          \"StringTest.kt\");\n    }","commit_id":"d6d5a8c25b263687ae7c0ceea456361c6cb3149e","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public void testCompileJavaScriptFiles() throws Exception {\n        generateJavaScriptFiles(EcmaVersion.all(),\n                                \"libraries/stdlib/src\",\n                                \"kotlin/Preconditions.kt\",\n                                \"kotlin/dom/Dom.kt\",\n                                \"kotlin/support/AbstractIterator.kt\");\n    }","id":46962,"modified_method":"public void testCompileJavaScriptFiles() throws Exception {\n        performStdLibTest(EcmaVersion.all(),\n                          \"libraries/stdlib/src\");\n    }","commit_id":"d6d5a8c25b263687ae7c0ceea456361c6cb3149e","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@NotNull\n    public static Config getConfig(@NotNull Project project, @NotNull EcmaVersion version) {\n        Config config = testConfigs.get(version);\n        if (config == null) {\n            List<JetFile> allLibFiles = initLibFiles(project);\n            config = new TestConfig(project, version, getFilesWithCode(allLibFiles), getLibraryContext(project, allLibFiles));\n            testConfigs.put(version, config);\n        }\n        return config;\n    }","id":46963,"modified_method":"@NotNull\n    public static Config getConfig(@NotNull Project project, @NotNull EcmaVersion version) {\n        Config config = testConfigs.get(version);\n        if (config == null) {\n            BindingContext preanalyzedContext = getLibraryContext(project);\n            config = new TestConfig(project, version, getLibFilesWithCode(getAllLibFiles(project)), preanalyzedContext);\n            testConfigs.put(version, config);\n        }\n        return config;\n    }","commit_id":"d6d5a8c25b263687ae7c0ceea456361c6cb3149e","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@NotNull\n    public static List<JetFile> getFilesWithCode(@NotNull List<JetFile> allLibFiles) {\n        List<JetFile> result = Lists.newArrayList();\n        for (JetFile file : allLibFiles) {\n            if (isFileWithCode(file)) {\n                result.add(file);\n            }\n        }\n        return result;\n    }","id":46964,"modified_method":"@NotNull\n    private static List<JetFile> getLibFilesWithCode(@NotNull List<JetFile> allFiles) {\n        List<JetFile> result = Lists.newArrayList();\n        for (JetFile file : allFiles) {\n            if (isFileWithCode(file)) {\n                result.add(file);\n            }\n        }\n        return result;\n    }","commit_id":"d6d5a8c25b263687ae7c0ceea456361c6cb3149e","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@NotNull\n    public static BindingContext getLibraryContext(@NotNull Project project, @NotNull List<JetFile> allLibFiles) {\n        if (libraryContext == null) {\n            Predicate<PsiFile> filesWithCode = new Predicate<PsiFile>() {\n                @Override\n                public boolean apply(@javax.annotation.Nullable PsiFile file) {\n                    return isFileWithCode((JetFile) file);\n                }\n            };\n            AnalyzeExhaust exhaust = AnalyzerFacadeForJS\n                    .analyzeFiles(allLibFiles, filesWithCode, Config.getEmptyConfig(project));\n            libraryContext = exhaust.getBindingContext();\n            AnalyzerFacadeForJS.checkForErrors(allLibFiles, libraryContext);\n        }\n        return libraryContext;\n    }","id":46965,"modified_method":"@NotNull\n    public static BindingContext getLibraryContext(@NotNull Project project) {\n        if (libraryContext == null) {\n            List<JetFile> allLibFiles = getAllLibFiles(project);\n            Predicate<PsiFile> filesWithCode = new Predicate<PsiFile>() {\n                @Override\n                public boolean apply(@javax.annotation.Nullable PsiFile file) {\n                    return isFileWithCode((JetFile) file);\n                }\n            };\n            AnalyzeExhaust exhaust = AnalyzerFacadeForJS\n                    .analyzeFiles(allLibFiles, filesWithCode, Config.getEmptyConfig(project));\n            libraryContext = exhaust.getBindingContext();\n            AnalyzerFacadeForJS.checkForErrors(allLibFiles, libraryContext);\n        }\n        return libraryContext;\n    }","commit_id":"d6d5a8c25b263687ae7c0ceea456361c6cb3149e","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@NotNull\n    public static List<JetFile> initLibFiles(@NotNull Project project) {\n        List<JetFile> libFiles = new ArrayList<JetFile>();\n        for (String libFileName : Config.LIB_FILE_NAMES) {\n            JetFile file = null;\n            try {\n                @SuppressWarnings(\"IOResourceOpenedButNotSafelyClosed\")\n                InputStream stream = new FileInputStream(Config.LIBRARIES_LOCATION + libFileName);\n                try {\n                    String text = FileUtil.loadTextAndClose(stream);\n                    file = JetFileUtils.createPsiFile(libFileName, text, project);\n                }\n                catch (IOException e) {\n                    e.printStackTrace();\n                }\n                libFiles.add(file);\n            }\n            catch (Exception e) {\n                //TODO: throw generic exception\n                throw new IllegalStateException(e);\n            }\n        }\n        return libFiles;\n    }","id":46966,"modified_method":"@NotNull\n    private static List<JetFile> initLibFiles(@NotNull Project project) {\n        return getLibFiles(project, Config.LIB_FILE_NAMES);\n    }","commit_id":"d6d5a8c25b263687ae7c0ceea456361c6cb3149e","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public void testBuilder() throws Exception {\n        performTestWithMain(\"builder\", \"\");\n        performTestWithMain(\"builder\", \"1\", \"over9000\");\n    }","id":46967,"modified_method":"@SuppressWarnings(\"UnusedDeclaration\")\n    public void _testBuilder() throws Exception {\n        performTestWithMain(\"builder\", \"\");\n        performTestWithMain(\"builder\", \"1\", \"over9000\");\n    }","commit_id":"d6d5a8c25b263687ae7c0ceea456361c6cb3149e","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private ArrayFIF() {\n        add(pattern(ARRAYS, \"get\"), GET_INTRINSIC);\n        add(pattern(ARRAYS, \"set\"), SET_INTRINSIC);\n        add(pattern(ARRAYS, \"<get-size>\"), ARRAY_LENGTH_INTRINSIC);\n        add(pattern(ARRAYS, \"<get-indices>\"), new CallStandardMethodIntrinsic(new JsNameRef(\"arrayIndices\", \"Kotlin\"), true, 0));\n        add(pattern(ARRAYS, \"iterator\"), new CallStandardMethodIntrinsic(new JsNameRef(\"arrayIterator\", \"Kotlin\"), true, 0));\n        add(pattern(ARRAY, \"<init>\"), new CallStandardMethodIntrinsic(new JsNameRef(\"arrayFromFun\", \"Kotlin\"), false, 2));\n        add(pattern(NUMBER_ARRAY, \"<init>\"), new CallStandardMethodIntrinsic(new JsNameRef(\"numberArrayOfSize\", \"Kotlin\"), false, 1));\n        add(pattern(CHAR_ARRAY, \"<init>\"), new CallStandardMethodIntrinsic(new JsNameRef(\"charArrayOfSize\", \"Kotlin\"), false, 1));\n        add(pattern(BOOLEAN_ARRAY, \"<init>\"), new CallStandardMethodIntrinsic(new JsNameRef(\"booleanArrayOfSize\", \"Kotlin\"), false, 1));\n        add(ARRAY_FACTORY_METHODS, ARRAY_INTRINSIC);\n    }","id":46968,"modified_method":"private ArrayFIF() {\n        add(pattern(ARRAYS, \"get\"), GET_INTRINSIC);\n        add(pattern(ARRAYS, \"set\"), SET_INTRINSIC);\n        add(pattern(ARRAYS, \"<get-size>\"), ARRAY_LENGTH_INTRINSIC);\n        add(pattern(ARRAYS, \"<get-indices>\"), new KotlinFunctionIntrinsic(\"arrayIndices\"));\n        add(pattern(ARRAYS, \"iterator\"), new KotlinFunctionIntrinsic(\"arrayIterator\"));\n        add(pattern(ARRAY, \"<init>\"), new KotlinFunctionIntrinsic(\"arrayFromFun\"));\n        add(pattern(NUMBER_ARRAY, \"<init>\"),new KotlinFunctionIntrinsic(\"numberArrayOfSize\"));\n        add(pattern(CHAR_ARRAY, \"<init>\"), new KotlinFunctionIntrinsic(\"charArrayOfSize\"));\n        add(pattern(BOOLEAN_ARRAY, \"<init>\"), new KotlinFunctionIntrinsic(\"booleanArrayOfSize\"));\n        add(ARRAY_FACTORY_METHODS, ARRAY_INTRINSIC);\n    }","commit_id":"7ba0f0eb33c4ebc843a4c5242bdfd0261cb66b99","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@NotNull\n    private List<JsExpression> generateCallArgumentList(@NotNull JsExpression receiver) {\n        return TranslationUtils.generateCallArgumentList(receiver, arguments);\n    }","id":46969,"modified_method":"@NotNull\n    private List<JsExpression> generateCallArgumentList(@NotNull JsExpression receiver) {\n        return TranslationUtils.generateInvocationArguments(receiver, arguments);\n    }","commit_id":"7ba0f0eb33c4ebc843a4c5242bdfd0261cb66b99","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@Override\n        public boolean apply(@NotNull FunctionDescriptor functionDescriptor) {\n            if ((functionDescriptor.getReceiverParameter() == null) == receiverParameterExists) {\n                return false;\n            }\n\n            DeclarationDescriptor descriptor = functionDescriptor;\n            int nameIndex = names.length - 1;\n            do {\n                if (!descriptor.getName().asString().equals(names[nameIndex--])) {\n                    return false;\n                }\n                descriptor = descriptor.getContainingDeclaration();\n                if (nameIndex == -1) {\n                    return isRootNamespace(descriptor);\n                }\n            }\n            while (descriptor != null && !isRootNamespace(descriptor));\n            return false;\n        }","id":46970,"modified_method":"@Override\n        public boolean apply(@NotNull FunctionDescriptor functionDescriptor) {\n            if ((functionDescriptor.getReceiverParameter() == null) == receiverParameterExists) {\n                return false;\n            }\n\n            // avoid unwrap FAKE_OVERRIDE\n            int nameIndex = names.length - 1;\n            if (!functionDescriptor.getName().asString().equals(names[nameIndex--])) {\n                return false;\n            }\n\n            DeclarationDescriptor descriptor;\n            if (functionDescriptor.getKind() == CallableMemberDescriptor.Kind.FAKE_OVERRIDE) {\n                assert functionDescriptor.getOverriddenDescriptors().size() > 0;\n                descriptor = functionDescriptor.getOverriddenDescriptors().iterator().next();\n            }\n            else {\n                descriptor = functionDescriptor;\n            }\n\n            String[] list = names;\n            while ((descriptor = descriptor.getContainingDeclaration()) != null) {\n                if (nameIndex == -1) {\n                    if (isRootNamespace(descriptor)) {\n                        return list == root || root == null;\n                    }\n                    else if (root == null) {\n                        return false;\n                    }\n                    else {\n                        nameIndex = root.length - 1;\n                        list = root;\n                    }\n                }\n                else if (isRootNamespace(descriptor)) {\n                    return false;\n                }\n\n                if (!descriptor.getName().asString().equals(list[nameIndex--])) {\n                    return false;\n                }\n            }\n            return false;\n        }","commit_id":"7ba0f0eb33c4ebc843a4c5242bdfd0261cb66b99","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private TopLevelFIF() {\n        add(pattern(\"jet\", \"toString\").receiverExists(true), new BuiltInFunctionIntrinsic(\"toString\"));\n        add(pattern(\"jet\", \"equals\").receiverExists(true), EQUALS);\n        add(pattern(NamePredicate.PRIMITIVE_NUMBERS, \"equals\"), EQUALS);\n        add(pattern(\"String|Boolean|Char|Number.equals\"), EQUALS);\n        add(pattern(\"jet\", \"arrayOfNulls\"), new CallStandardMethodIntrinsic(new JsNameRef(\"nullArray\", \"Kotlin\"), false, 1));\n        add(pattern(\"jet\", \"iterator\").receiverExists(true), RETURN_RECEIVER_INTRINSIC);\n        add(new DescriptorPredicate() {\n                @Override\n                public boolean apply(@NotNull FunctionDescriptor descriptor) {\n                    if (!descriptor.getName().asString().equals(\"invoke\")) {\n                        return false;\n                    }\n                    int parameterCount = descriptor.getValueParameters().size();\n                    DeclarationDescriptor fun = descriptor.getContainingDeclaration();\n                    return fun == (descriptor.getReceiverParameter() == null\n                                   ? KotlinBuiltIns.getInstance().getFunction(parameterCount)\n                                   : KotlinBuiltIns.getInstance().getExtensionFunction(parameterCount));\n                }\n            }, new CallParametersAwareFunctionIntrinsic() {\n                @NotNull\n                @Override\n                public JsExpression apply(\n                        @NotNull CallTranslator callTranslator,\n                        @NotNull List<JsExpression> arguments,\n                        @NotNull TranslationContext context\n                ) {\n                    JsExpression thisExpression = callTranslator.getCallParameters().getThisObject();\n                    if (thisExpression == null) {\n                        return new JsInvocation(callTranslator.getCallParameters().getFunctionReference(), arguments);\n                    }\n                    else if (callTranslator.getResolvedCall().getReceiverArgument().exists()) {\n                        return callTranslator.extensionFunctionCall(false);\n                    }\n                    else {\n                        return new JsInvocation(new JsNameRef(\"call\", callTranslator.getCallParameters().getFunctionReference()),\n                                                generateCallArgumentList(thisExpression, arguments));\n                    }\n                }\n            }\n        );\n\n        add(pattern(\"java\", \"util\", \"set\").receiverExists(true), NATIVE_MAP_SET);\n        add(pattern(\"jet\", \"Map\", \"get\"), NATIVE_MAP_GET);\n        add(pattern(\"java\", \"util\", \"HashMap\", \"get\"), NATIVE_MAP_GET);\n\n        add(pattern(\"java\", \"util\", \"HashMap\", \"<init>\"), new MapSelectImplementationIntrinsic(false));\n        add(pattern(\"java\", \"util\", \"HashSet\", \"<init>\"), new MapSelectImplementationIntrinsic(true));\n    }","id":46971,"modified_method":"private TopLevelFIF() {\n        add(pattern(\"jet\", \"toString\").receiverExists(true), new BuiltInFunctionIntrinsic(\"toString\"));\n        add(pattern(\"jet\", \"equals\").receiverExists(true), EQUALS);\n        add(pattern(NamePredicate.PRIMITIVE_NUMBERS, \"equals\"), EQUALS);\n        add(pattern(\"String|Boolean|Char|Number.equals\"), EQUALS);\n        add(pattern(\"jet\", \"arrayOfNulls\"), new KotlinFunctionIntrinsic(\"nullArray\"));\n        add(pattern(\"jet\", \"iterator\").receiverExists(true), RETURN_RECEIVER_INTRINSIC);\n        add(new DescriptorPredicate() {\n                @Override\n                public boolean apply(@NotNull FunctionDescriptor descriptor) {\n                    if (!descriptor.getName().asString().equals(\"invoke\")) {\n                        return false;\n                    }\n                    int parameterCount = descriptor.getValueParameters().size();\n                    DeclarationDescriptor fun = descriptor.getContainingDeclaration();\n                    return fun == (descriptor.getReceiverParameter() == null\n                                   ? KotlinBuiltIns.getInstance().getFunction(parameterCount)\n                                   : KotlinBuiltIns.getInstance().getExtensionFunction(parameterCount));\n                }\n            }, new CallParametersAwareFunctionIntrinsic() {\n                @NotNull\n                @Override\n                public JsExpression apply(\n                        @NotNull CallTranslator callTranslator,\n                        @NotNull List<JsExpression> arguments,\n                        @NotNull TranslationContext context\n                ) {\n                    JsExpression thisExpression = callTranslator.getCallParameters().getThisObject();\n                    if (thisExpression == null) {\n                        return new JsInvocation(callTranslator.getCallParameters().getFunctionReference(), arguments);\n                    }\n                    else if (callTranslator.getResolvedCall().getReceiverArgument().exists()) {\n                        return callTranslator.extensionFunctionCall(false);\n                    }\n                    else {\n                        return new JsInvocation(new JsNameRef(\"call\", callTranslator.getCallParameters().getFunctionReference()),\n                                                generateInvocationArguments(thisExpression, arguments));\n                    }\n                }\n            }\n        );\n\n        String[] javaUtil = {\"java\", \"util\"};\n        add(pattern(javaUtil, \"set\").receiverExists(true), NATIVE_MAP_SET);\n        add(pattern(\"jet\", \"Map\", \"get\"), NATIVE_MAP_GET);\n        add(pattern(javaUtil, \"HashMap\", \"get\"), NATIVE_MAP_GET);\n\n        add(pattern(javaUtil, \"HashMap\", \"<init>\"), new MapSelectImplementationIntrinsic(false));\n        add(pattern(javaUtil, \"HashSet\", \"<init>\"), new MapSelectImplementationIntrinsic(true));\n    }","commit_id":"7ba0f0eb33c4ebc843a4c5242bdfd0261cb66b99","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@NotNull\n    public static List<JsExpression> generateCallArgumentList(@NotNull JsExpression receiver, @NotNull List<JsExpression> arguments) {\n        if (arguments.isEmpty()) {\n            return Collections.singletonList(receiver);\n        }\n\n        List<JsExpression> argumentList = new ArrayList<JsExpression>(1 + arguments.size());\n        argumentList.add(receiver);\n        argumentList.addAll(arguments);\n        return argumentList;\n    }","id":46972,"modified_method":"@NotNull\n    public static List<JsExpression> generateInvocationArguments(@NotNull JsExpression receiver, @NotNull List<JsExpression> arguments) {\n        if (arguments.isEmpty()) {\n            return Collections.singletonList(receiver);\n        }\n\n        List<JsExpression> argumentList = new ArrayList<JsExpression>(1 + arguments.size());\n        argumentList.add(receiver);\n        argumentList.addAll(arguments);\n        return argumentList;\n    }","commit_id":"7ba0f0eb33c4ebc843a4c5242bdfd0261cb66b99","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private void updateState() {\n\t\tCompoundButton enableDisableButton = (CompoundButton)findViewById(\n\t\t\t\tR.id.plugin_enable_disable);\n\t\tButton getButton = (Button)findViewById(R.id.plugin_get);\n\t\tButton settingsButton = (Button)findViewById(R.id.plugin_settings);\n\t\tIconsCache ic = ((OsmandApplication) getApplication()).getIconsCache();\n\t\tsettingsButton.setCompoundDrawablesWithIntrinsicBounds(ic.getContentIcon(\n\t\t\t\tR.drawable.ic_action_settings), null, null, null);\n\t\tView installHeader = findViewById(R.id.plugin_install_header);\n\n\t\tif (plugin.needsInstallation()) {\n\t\t\tgetButton.setVisibility(View.VISIBLE);\n\t\t\tenableDisableButton.setVisibility(View.GONE);\n\t\t\tsettingsButton.setVisibility(View.GONE);\n\t\t\tinstallHeader.setVisibility(View.VISIBLE);\n\t\t\t((ImageView) installHeader.findViewById(R.id.ic_world_globe)).setBackgroundDrawable(ic\n\t\t\t\t\t.getContentIcon(R.drawable.ic_world_globe_dark));\n\n\t\t} else {\n\t\t\tgetButton.setVisibility(View.GONE);\n\t\t\tenableDisableButton.setVisibility(View.VISIBLE);\n\t\t\tenableDisableButton.setChecked(plugin.isActive());\n\n\t\t\tfinal Class<? extends Activity> settingsActivity = plugin.getSettingsActivity();\n\t\t\tif (settingsActivity == null || !plugin.isActive()) {\n\t\t\t\tsettingsButton.setVisibility(View.GONE);\n\t\t\t} else {\n\t\t\t\tsettingsButton.setVisibility(View.VISIBLE);\n\t\t\t}\n\n\t\t\tinstallHeader.setVisibility(View.GONE);\n\t\t}\n\t}","id":46973,"modified_method":"private void updateState() {\n\t\tCompoundButton enableDisableButton = (CompoundButton)findViewById(\n\t\t\t\tR.id.plugin_enable_disable);\n\t\tButton getButton = (Button)findViewById(R.id.plugin_get);\n\t\tButton settingsButton = (Button)findViewById(R.id.plugin_settings);\n\t\tsettingsButton.setCompoundDrawablesWithIntrinsicBounds(\n\t\t\t\tIconsCache.getContentIconCompat(this, R.drawable.ic_action_settings),\n\t\t\t\tnull, null, null);\n\t\tView installHeader = findViewById(R.id.plugin_install_header);\n\n\t\tif (plugin.needsInstallation()) {\n\t\t\tgetButton.setVisibility(View.VISIBLE);\n\t\t\tenableDisableButton.setVisibility(View.GONE);\n\t\t\tsettingsButton.setVisibility(View.GONE);\n\t\t\tinstallHeader.setVisibility(View.VISIBLE);\n\t\t\tView worldGlobeIcon = installHeader.findViewById(R.id.ic_world_globe);\n\t\t\tDrawable worldGlobeDrawable = IconsCache.getContentIconCompat(this,\n\t\t\t\t\tR.drawable.ic_world_globe_dark);\n\t\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {\n\t\t\t\tworldGlobeIcon.setBackground(worldGlobeDrawable);\n\t\t\t} else {\n\t\t\t\t//noinspection deprecation\n\t\t\t\tworldGlobeIcon.setBackgroundDrawable(worldGlobeDrawable);\n\t\t\t}\n\t\t} else {\n\t\t\tgetButton.setVisibility(View.GONE);\n\t\t\tenableDisableButton.setVisibility(View.VISIBLE);\n\t\t\tenableDisableButton.setChecked(plugin.isActive());\n\n\t\t\tfinal Class<? extends Activity> settingsActivity = plugin.getSettingsActivity();\n\t\t\tif (settingsActivity == null || !plugin.isActive()) {\n\t\t\t\tsettingsButton.setVisibility(View.GONE);\n\t\t\t} else {\n\t\t\t\tsettingsButton.setVisibility(View.VISIBLE);\n\t\t\t}\n\n\t\t\tinstallHeader.setVisibility(View.GONE);\n\t\t}\n\t}","commit_id":"6dbf547579be617356add3e03781393801af6324","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\r\n\tprotected void onCreate(Bundle savedInstanceState) {\r\n\t\tsuper.onCreate(savedInstanceState);\r\n\r\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\r\n\t\tsetContentView(Version.VELCOM_EDITION ? R.layout.menu_velcom : R.layout.menu);\r\n\t\tif(Version.VELCOM_EDITION){\r\n\t\t\tfinal ImageView imgView = (ImageView) findViewById(R.id.VelcomMini);\r\n\t\t\tfinal Camera camera = new Camera();\r\n\t\t\tfinal float firstRotate = 0.25f;\r\n\t\t\tfinal float invisibleText = 0.7f;\r\n\t\t\tfinal int animationTime = 3600;\r\n\t\t\tAnimation ra = new Animation(){\r\n\t\t\t\t@Override\r\n\t\t\t\tprotected void applyTransformation(float interpolatedTime, Transformation t) {\r\n\t\t\t\t\tfinal Matrix matrix = t.getMatrix();\r\n\t\t\t\t\tint centerY = imgView.getHeight() / 2;\r\n\t\t\t\t\tint centerX = imgView.getWidth() / 2;\r\n\t\t\t\t\tcamera.save();\r\n\t\t\t\t\tif (interpolatedTime < firstRotate) {\r\n\t\t\t\t\t\tcamera.rotateY(360 * interpolatedTime / firstRotate);\r\n\t\t\t\t\t} else if (interpolatedTime < 2 * firstRotate) {\r\n\t\t\t\t\t\tcamera.rotateY(360 * (interpolatedTime - firstRotate) / firstRotate);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcamera.rotateY(360 * (interpolatedTime - 2 * firstRotate) / (1 - 2 * firstRotate));\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tcamera.getMatrix(matrix);\r\n\t\t\t\t\tmatrix.preTranslate(-centerX, -centerY);\r\n\t\t\t\t\tmatrix.postTranslate(centerX, centerY);\r\n\t\t\t\t\tcamera.restore();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\t// let accelerate animation\r\n//\t\t\tra.setInterpolator(new LinearInterpolator());\r\n\t\t\tra.setDuration(animationTime);\r\n\t\t\timgView.startAnimation(ra);\r\n\t\t\t  \r\n\t\t\tfinal TextView textView = (TextView) findViewById(R.id.TextVelcom);\r\n\t\t\tAnimation alphaAnimation = new Animation(){\r\n\t\t\t\t@Override\r\n\t\t\t\tprotected void applyTransformation(float interpolatedTime, Transformation t) {\r\n\t\t\t\t\tif(interpolatedTime < invisibleText){\r\n\t\t\t\t\t\tt.setAlpha(0);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tt.setAlpha((interpolatedTime - invisibleText) / (1 - invisibleText));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t};\r\n\t\t\talphaAnimation.setAnimationListener(new Animation.AnimationListener(){\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void onAnimationEnd(Animation animation) {\r\n\t\t\t\t\ttextView.setVisibility(View.VISIBLE);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void onAnimationRepeat(Animation animation) {\r\n\t\t\t\t}\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void onAnimationStart(Animation animation) {\r\n\t\t\t\t\ttextView.setVisibility(View.VISIBLE);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t\talphaAnimation.setDuration(animationTime);\r\n\t\t\ttextView.startAnimation(alphaAnimation);\r\n\t\t\ttextView.setVisibility(View.INVISIBLE);\r\n\t\t} else {\r\n\t\t\tfinal TextView textView = (TextView) findViewById(R.id.TextVersion);\r\n\t\t\ttextView.setText(Version.APP_FULL_NAME);\r\n\t\t\tLinkify.addLinks((TextView) findViewById(R.id.TextSite), Linkify.WEB_URLS);\r\n\t\t\t((TextView) findViewById(R.id.TextSite)).setTextColor(Color.WHITE);\r\n\t\t}\r\n\r\n\t\tshowMap = (Button) findViewById(R.id.MapButton);\r\n\t\tshowMap.setOnClickListener(new OnClickListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onClick(View v) {\r\n\t\t\t\tfinal Intent mapIndent = new Intent(MainMenuActivity.this, MapActivity.class);\r\n\t\t\t\tstartActivityForResult(mapIndent, 0);\r\n\t\t\t}\r\n\t\t});\r\n\t\tsettingsButton = (Button) findViewById(R.id.SettingsButton);\r\n\t\tsettingsButton.setOnClickListener(new OnClickListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onClick(View v) {\r\n\t\t\t\tfinal Intent settings = new Intent(MainMenuActivity.this, SettingsActivity.class);\r\n\t\t\t\tstartActivity(settings);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tfavouritesButton = (Button) findViewById(R.id.FavoritesButton);\r\n\t\tfavouritesButton.setOnClickListener(new OnClickListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onClick(View v) {\r\n\t\t\t\tfinal Intent settings = new Intent(MainMenuActivity.this, FavouritesActivity.class);\r\n\t\t\t\tstartActivity(settings);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tsearchButton = (Button) findViewById(R.id.SearchButton);\r\n\t\tsearchButton.setOnClickListener(new OnClickListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onClick(View v) {\r\n\t\t\t\tfinal Intent search = new Intent(MainMenuActivity.this, SearchActivity.class);\r\n\t\t\t\tstartActivity(search);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t((OsmandApplication)getApplication()).checkApplicationIsBeingInitialized(this);\r\n\t\tcheckPreviousRunsForExceptions();\r\n\t\t\r\n\t\tSharedPreferences pref = getPreferences(MODE_WORLD_WRITEABLE);\r\n\t\tif(!pref.contains(FIRST_TIME_APP_RUN)){\r\n\t\t\tpref.edit().putBoolean(FIRST_TIME_APP_RUN, true).commit();\r\n\t\t\tBuilder builder = new AlertDialog.Builder(this);\r\n\t\t\tbuilder.setMessage(R.string.first_time_msg);\r\n\t\t\tbuilder.setPositiveButton(R.string.first_time_download, new DialogInterface.OnClickListener(){\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\r\n\t\t\t\t\tstartActivity(new Intent(MainMenuActivity.this, DownloadIndexActivity.class));\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t\tbuilder.setNegativeButton(R.string.first_time_continue, null);\r\n\t\t\t\r\n\t\t\tbuilder.show();\r\n\t\t}\r\n\t}","id":46974,"modified_method":"@Override\r\n\tprotected void onCreate(Bundle savedInstanceState) {\r\n\t\tsuper.onCreate(savedInstanceState);\r\n\r\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\r\n\t\tsetContentView(R.layout.menu);\r\n\t\t/* if(Version.VELCOM_EDITION){\r\n\t\t\tfinal ImageView imgView = (ImageView) findViewById(R.id.VelcomMini);\r\n\t\t\tfinal Camera camera = new Camera();\r\n\t\t\tfinal float firstRotate = 0.25f;\r\n\t\t\tfinal float invisibleText = 0.7f;\r\n\t\t\tfinal int animationTime = 3600;\r\n\t\t\tAnimation ra = new Animation(){\r\n\t\t\t\t@Override\r\n\t\t\t\tprotected void applyTransformation(float interpolatedTime, Transformation t) {\r\n\t\t\t\t\tfinal Matrix matrix = t.getMatrix();\r\n\t\t\t\t\tint centerY = imgView.getHeight() / 2;\r\n\t\t\t\t\tint centerX = imgView.getWidth() / 2;\r\n\t\t\t\t\tcamera.save();\r\n\t\t\t\t\tif (interpolatedTime < firstRotate) {\r\n\t\t\t\t\t\tcamera.rotateY(360 * interpolatedTime / firstRotate);\r\n\t\t\t\t\t} else if (interpolatedTime < 2 * firstRotate) {\r\n\t\t\t\t\t\tcamera.rotateY(360 * (interpolatedTime - firstRotate) / firstRotate);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcamera.rotateY(360 * (interpolatedTime - 2 * firstRotate) / (1 - 2 * firstRotate));\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tcamera.getMatrix(matrix);\r\n\t\t\t\t\tmatrix.preTranslate(-centerX, -centerY);\r\n\t\t\t\t\tmatrix.postTranslate(centerX, centerY);\r\n\t\t\t\t\tcamera.restore();\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\t// let accelerate animation\r\n//\t\t\tra.setInterpolator(new LinearInterpolator());\r\n\t\t\tra.setDuration(animationTime);\r\n\t\t\timgView.startAnimation(ra);\r\n\t\t\t  \r\n\t\t\tfinal TextView textView = (TextView) findViewById(R.id.TextVelcom);\r\n\t\t\tAnimation alphaAnimation = new Animation(){\r\n\t\t\t\t@Override\r\n\t\t\t\tprotected void applyTransformation(float interpolatedTime, Transformation t) {\r\n\t\t\t\t\tif(interpolatedTime < invisibleText){\r\n\t\t\t\t\t\tt.setAlpha(0);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tt.setAlpha((interpolatedTime - invisibleText) / (1 - invisibleText));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t};\r\n\t\t\talphaAnimation.setAnimationListener(new Animation.AnimationListener(){\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void onAnimationEnd(Animation animation) {\r\n\t\t\t\t\ttextView.setVisibility(View.VISIBLE);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void onAnimationRepeat(Animation animation) {\r\n\t\t\t\t}\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void onAnimationStart(Animation animation) {\r\n\t\t\t\t\ttextView.setVisibility(View.VISIBLE);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t\talphaAnimation.setDuration(animationTime);\r\n\t\t\ttextView.startAnimation(alphaAnimation);\r\n\t\t\ttextView.setVisibility(View.INVISIBLE);\r\n\t\t} else { */\r\n\t\t\r\n\t\tfinal TextView textView = (TextView) findViewById(R.id.TextVersion);\r\n\t\ttextView.setText(Version.APP_VERSION+ \" \"+ Version.APP_DESCRIPTION); //$NON-NLS-1$\r\n\r\n\t\tshowMap = findViewById(R.id.MapButton);\r\n\t\tshowMap.setOnClickListener(new OnClickListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onClick(View v) {\r\n\t\t\t\tfinal Intent mapIndent = new Intent(MainMenuActivity.this, MapActivity.class);\r\n\t\t\t\tstartActivityForResult(mapIndent, 0);\r\n\t\t\t}\r\n\t\t});\r\n\t\tsettingsButton = findViewById(R.id.SettingsButton);\r\n\t\tsettingsButton.setOnClickListener(new OnClickListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onClick(View v) {\r\n\t\t\t\tfinal Intent settings = new Intent(MainMenuActivity.this, SettingsActivity.class);\r\n\t\t\t\tstartActivity(settings);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tfavouritesButton = findViewById(R.id.FavoritesButton);\r\n\t\tfavouritesButton.setOnClickListener(new OnClickListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onClick(View v) {\r\n\t\t\t\tfinal Intent settings = new Intent(MainMenuActivity.this, FavouritesActivity.class);\r\n\t\t\t\tstartActivity(settings);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\tsearchButton = findViewById(R.id.SearchButton);\r\n\t\tsearchButton.setOnClickListener(new OnClickListener() {\r\n\t\t\t@Override\r\n\t\t\tpublic void onClick(View v) {\r\n\t\t\t\tfinal Intent search = new Intent(MainMenuActivity.this, SearchActivity.class);\r\n\t\t\t\tstartActivity(search);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t((OsmandApplication)getApplication()).checkApplicationIsBeingInitialized(this);\r\n\t\tcheckPreviousRunsForExceptions();\r\n\t\t\r\n\t\tSharedPreferences pref = getPreferences(MODE_WORLD_WRITEABLE);\r\n\t\tif(!pref.contains(FIRST_TIME_APP_RUN)){\r\n\t\t\tpref.edit().putBoolean(FIRST_TIME_APP_RUN, true).commit();\r\n\t\t\tBuilder builder = new AlertDialog.Builder(this);\r\n\t\t\tbuilder.setMessage(R.string.first_time_msg);\r\n\t\t\tbuilder.setPositiveButton(R.string.first_time_download, new DialogInterface.OnClickListener(){\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\r\n\t\t\t\t\tstartActivity(new Intent(MainMenuActivity.this, DownloadIndexActivity.class));\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t\tbuilder.setNegativeButton(R.string.first_time_continue, null);\r\n\t\t\t\r\n\t\t\tbuilder.show();\r\n\t\t}\r\n\t}","commit_id":"cf18ae4d123e669de0cb459801d31c4b76d0fb90","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@NonNull\n\t@Override\n\tpublic Dialog onCreateDialog(Bundle savedInstanceState) {\n\t\tfinal OsmPoint[] poi = (OsmPoint[]) getArguments().getSerializable(OPENSTREETMAP_POINT);\n\t\tAlertDialog.Builder builder = new AlertDialog.Builder(getActivity());\n\t\tView view = getActivity().getLayoutInflater().inflate(R.layout.send_poi_dialog, null);\n\t\tfinal View messageEditTextLabel = (EditText) view.findViewById(R.id.messageEditTextLabel);\n\t\tfinal EditText messageEditText = (EditText) view.findViewById(R.id.messageEditText);\n\t\tfinal EditText userNameEditText = (EditText) view.findViewById(R.id.userNameEditText);\n\t\tfinal EditText passwordEditText = (EditText) view.findViewById(R.id.passwordEditText);\n\t\tfinal CheckBox closeChangeSetCheckBox =\n\t\t\t\t(CheckBox) view.findViewById(R.id.closeChangeSetCheckBox);\n\t\tmessageEditText.setText(comment);\n\t\tfinal OsmandSettings settings = ((OsmandApplication) getActivity().getApplication())\n\t\t\t\t.getSettings();\n\t\tuserNameEditText.setText(settings.USER_NAME.get());\n\t\tpasswordEditText.setText(settings.USER_PASSWORD.get());\n\t\tboolean hasOsmPOI = false;\n\t\tfor(OsmPoint p : poi) {\n\t\t\tif(p instanceof OpenstreetmapPoint) {\n\t\t\t\thasOsmPOI = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tmessageEditTextLabel.setVisibility(hasOsmPOI ? View.VISIBLE :View.GONE);\n\t\tmessageEditText.setVisibility(hasOsmPOI ? View.VISIBLE :View.GONE);\n\t\tcloseChangeSetCheckBox.setVisibility(hasOsmPOI ? View.VISIBLE :View.GONE);\n\n\t\tfinal ProgressDialogPoiUploader progressDialogPoiUploader;\n\t\tif (poiUploader != null) {\n\t\t\tprogressDialogPoiUploader = poiUploader;\n\t\t} else {\n\t\t\tprogressDialogPoiUploader = (ProgressDialogPoiUploader) getParentFragment();\n\t\t}\n\n\t\tbuilder.setTitle(R.string.shared_string_commit)\n\t\t\t\t.setView(view)\n\t\t\t\t.setPositiveButton(R.string.shared_string_ok, new DialogInterface.OnClickListener() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\t\tcomment = messageEditText.getText().toString();\n\t\t\t\t\t\tsettings.USER_NAME.set(userNameEditText.getText().toString());\n\t\t\t\t\t\tsettings.USER_PASSWORD.set(passwordEditText.getText().toString());\n\t\t\t\t\t\tif (comment.length() > 0) {\n\t\t\t\t\t\t\tfor (OsmPoint osmPoint : poi) {\n\t\t\t\t\t\t\t\tif (osmPoint.getGroup() == OsmPoint.Group.POI) {\n\t\t\t\t\t\t\t\t\t((OpenstreetmapPoint) osmPoint).setComment(comment);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprogressDialogPoiUploader.showProgressDialog(poi,\n\t\t\t\t\t\t\t\tcloseChangeSetCheckBox.isChecked());\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.setNegativeButton(R.string.shared_string_cancel, null);\n\t\treturn builder.create();\n\t}","id":46975,"modified_method":"@NonNull\n\t@Override\n\tpublic Dialog onCreateDialog(Bundle savedInstanceState) {\n\t\tfinal OsmPoint[] poi = (OsmPoint[]) getArguments().getSerializable(OPENSTREETMAP_POINT);\n\t\tAlertDialog.Builder builder = new AlertDialog.Builder(getActivity());\n\t\tView view = getActivity().getLayoutInflater().inflate(R.layout.send_poi_dialog, null);\n\t\tfinal View messageEditTextLabel = view.findViewById(R.id.messageEditTextLabel);\n\t\tfinal EditText messageEditText = (EditText) view.findViewById(R.id.messageEditText);\n\t\tfinal EditText userNameEditText = (EditText) view.findViewById(R.id.userNameEditText);\n\t\tfinal EditText passwordEditText = (EditText) view.findViewById(R.id.passwordEditText);\n\t\tfinal CheckBox closeChangeSetCheckBox =\n\t\t\t\t(CheckBox) view.findViewById(R.id.closeChangeSetCheckBox);\n\t\tmessageEditText.setText(comment);\n\t\tfinal OsmandSettings settings = ((OsmandApplication) getActivity().getApplication())\n\t\t\t\t.getSettings();\n\t\tuserNameEditText.setText(settings.USER_NAME.get());\n\t\tpasswordEditText.setText(settings.USER_PASSWORD.get());\n\t\tboolean hasOsmPOI = false;\n\t\tfor(OsmPoint p : poi) {\n\t\t\tif(p instanceof OpenstreetmapPoint) {\n\t\t\t\thasOsmPOI = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tmessageEditTextLabel.setVisibility(hasOsmPOI ? View.VISIBLE :View.GONE);\n\t\tmessageEditText.setVisibility(hasOsmPOI ? View.VISIBLE :View.GONE);\n\t\tcloseChangeSetCheckBox.setVisibility(hasOsmPOI ? View.VISIBLE :View.GONE);\n\n\t\tfinal ProgressDialogPoiUploader progressDialogPoiUploader;\n\t\tif (poiUploader != null) {\n\t\t\tprogressDialogPoiUploader = poiUploader;\n\t\t} else {\n\t\t\tprogressDialogPoiUploader = (ProgressDialogPoiUploader) getParentFragment();\n\t\t}\n\n\t\tbuilder.setTitle(R.string.shared_string_commit)\n\t\t\t\t.setView(view)\n\t\t\t\t.setPositiveButton(R.string.shared_string_ok, new DialogInterface.OnClickListener() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\t\tcomment = messageEditText.getText().toString();\n\t\t\t\t\t\tsettings.USER_NAME.set(userNameEditText.getText().toString());\n\t\t\t\t\t\tsettings.USER_PASSWORD.set(passwordEditText.getText().toString());\n\t\t\t\t\t\tif (comment.length() > 0) {\n\t\t\t\t\t\t\tfor (OsmPoint osmPoint : poi) {\n\t\t\t\t\t\t\t\tif (osmPoint.getGroup() == OsmPoint.Group.POI) {\n\t\t\t\t\t\t\t\t\t((OpenstreetmapPoint) osmPoint).setComment(comment);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprogressDialogPoiUploader.showProgressDialog(poi,\n\t\t\t\t\t\t\t\tcloseChangeSetCheckBox.isChecked());\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.setNegativeButton(R.string.shared_string_cancel, null);\n\t\treturn builder.create();\n\t}","commit_id":"bc26e6adb25ef0e00765491b083a0dd724a5d116","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n\t\tpublic void onDismiss() {\n\t\t\tdashboardOnMap.blacklistFragmentByTag(fragmentTag);\n\t\t\tViewCompat.setTranslationX(fragmentView, 0);\n\t\t\tViewCompat.setAlpha(fragmentView, 1);\n\t\t\tSnackbar.make(parentView, \"Card was hidden\", Snackbar.LENGTH_LONG)\n\t\t\t\t\t.setAction(\"UNDO\", new View.OnClickListener() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onClick(View view) {\n\t\t\t\t\t\t\tDefaultDismissListener.this.onUndo();\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.show();\n\n\t\t}","id":46976,"modified_method":"@Override\n\t\tpublic void onDismiss() {\n\t\t\tdashboardOnMap.blacklistFragmentByTag(fragmentTag);\n\t\t\tViewCompat.setTranslationX(fragmentView, 0);\n\t\t\tViewCompat.setAlpha(fragmentView, 1);\n\t\t\tSnackbar.make(parentView, dashboardOnMap.getMyApplication().getResources()\n\t\t\t\t\t.getString(R.string.shared_string_card_was_hidden), Snackbar.LENGTH_LONG)\n\t\t\t\t\t.setAction(R.string.shared_string_undo, new View.OnClickListener() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onClick(View view) {\n\t\t\t\t\t\t\tDefaultDismissListener.this.onUndo();\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.show();\n\t\t}","commit_id":"574ba29ac14812c86e54750a7787494793427286","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Nullable\n\t@Override\n\tfinal public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n\t\t\t\t\t\t\t\t   @Nullable Bundle savedInstanceState) {\n\t\tView childView = initView(inflater, container, savedInstanceState);\n\t\tFrameLayout.LayoutParams layoutParams =\n\t\t\t\tnew FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,\n\t\t\t\t\t\tViewGroup.LayoutParams.WRAP_CONTENT);\n\t\tInterceptorFrameLayout frameLayout = new InterceptorFrameLayout(getActivity());\n\t\tframeLayout.setLayoutParams(layoutParams);\n\n\t\tFrameLayout.LayoutParams childLayoutParams =\n\t\t\t\tnew FrameLayout.LayoutParams(\n\t\t\t\t\t\t(ViewGroup.MarginLayoutParams) childView.getLayoutParams());\n\t\tframeLayout.addView(childView, childLayoutParams);\n\n\t\tif (isDismissAllowed()) {\n\t\t\tSwipeDismissTouchListener listener = new SwipeDismissTouchListener(childView, null,\n\t\t\t\t\tnew SwipeDismissTouchListener.DismissCallbacks() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic boolean canDismiss(Object token) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onDismiss(View view, Object token, boolean isSwipeRight) {\n\t\t\t\t\t\t\tif (isSwipeRight) {\n\t\t\t\t\t\t\t\tgetDismissCallback().onDismiss();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// TODO show settings card\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\tframeLayout.setOnTouchListener(listener);\n\t\t\tframeLayout.setListener(listener);\n\t\t\tif (getDismissCallback() == null) {\n\t\t\t\tdefaultDismissListener = new DefaultDismissListener(getParentView(), dashboard, getTag(),\n\t\t\t\t\t\tchildView);\n\t\t\t}\n\t\t}\n\n\t\treturn frameLayout;\n\t}","id":46977,"modified_method":"@Nullable\n\t@Override\n\tfinal public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,\n\t\t\t\t\t\t\t\t   @Nullable Bundle savedInstanceState) {\n\t\tView childView = initView(inflater, container, savedInstanceState);\n\t\tFrameLayout.LayoutParams layoutParams =\n\t\t\t\tnew FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,\n\t\t\t\t\t\tViewGroup.LayoutParams.WRAP_CONTENT);\n\t\tInterceptorFrameLayout frameLayout = new InterceptorFrameLayout(getActivity());\n\t\tframeLayout.setLayoutParams(layoutParams);\n\n\t\tFrameLayout.LayoutParams childLayoutParams =\n\t\t\t\tnew FrameLayout.LayoutParams(\n\t\t\t\t\t\t(ViewGroup.MarginLayoutParams) childView.getLayoutParams());\n\t\tframeLayout.addView(childView, childLayoutParams);\n\n\t\tif (isDismissAllowed()) {\n\t\t\tSwipeDismissTouchListener listener = new SwipeDismissTouchListener(childView, null,\n\t\t\t\t\tnew SwipeDismissTouchListener.DismissCallbacks() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic boolean canDismiss(Object token) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onDismiss(View view, Object token, boolean isSwipeRight) {\n\t\t\t\t\t\t\tif (isSwipeRight) {\n\t\t\t\t\t\t\t\tgetDismissCallback().onDismiss();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\tframeLayout.setOnTouchListener(listener);\n\t\t\tframeLayout.setListener(listener);\n\t\t\tif (getDismissCallback() == null) {\n\t\t\t\tdefaultDismissListener = new DefaultDismissListener(getParentView(), dashboard, getTag(),\n\t\t\t\t\t\tchildView);\n\t\t\t}\n\t\t}\n\n\t\treturn frameLayout;\n\t}","commit_id":"574ba29ac14812c86e54750a7787494793427286","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n\tpublic View initView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n\t\tView view = getActivity().getLayoutInflater().inflate(R.layout.dash_error_fragment, container, false);\n\t\tString msg = MessageFormat.format(getString(R.string.previous_run_crashed), OsmandApplication.EXCEPTION_PATH);\n\t\tTypeface typeface = FontCache.getRobotoMedium(getActivity());\n\t\tImageView iv = ((ImageView) view.findViewById(R.id.error_icon));\n\t\tiv.setImageDrawable(getMyApplication().getIconsCache().getContentIcon(R.drawable.ic_crashlog));\n\t\tTextView message = ((TextView) view.findViewById(R.id.error_header));\n\t\tmessage.setTypeface(typeface);\n\t\tmessage.setText(msg);\n\t\tButton errorBtn = ((Button) view.findViewById(R.id.error_btn));\n\t\terrorBtn.setTypeface(typeface);\n\t\terrorBtn.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View view) {\n\t\t\t\tIntent intent = new Intent(Intent.ACTION_SEND);\n\t\t\t\tintent.putExtra(Intent.EXTRA_EMAIL, new String[] { \"crash@osmand.net\" }); //$NON-NLS-1$\n\t\t\t\tFile file = getMyApplication().getAppPath(OsmandApplication.EXCEPTION_PATH);\n\t\t\t\tintent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(file));\n\t\t\t\tintent.setType(\"vnd.android.cursor.dir/email\"); //$NON-NLS-1$\n\t\t\t\tintent.putExtra(Intent.EXTRA_SUBJECT, \"OsmAnd bug\"); //$NON-NLS-1$\n\t\t\t\tStringBuilder text = new StringBuilder();\n\t\t\t\ttext.append(\"\\nDevice : \").append(Build.DEVICE); //$NON-NLS-1$\n\t\t\t\ttext.append(\"\\nBrand : \").append(Build.BRAND); //$NON-NLS-1$\n\t\t\t\ttext.append(\"\\nModel : \").append(Build.MODEL); //$NON-NLS-1$\n\t\t\t\ttext.append(\"\\nProduct : \").append(Build.PRODUCT); //$NON-NLS-1$\n\t\t\t\ttext.append(\"\\nBuild : \").append(Build.DISPLAY); //$NON-NLS-1$\n\t\t\t\ttext.append(\"\\nVersion : \").append(Build.VERSION.RELEASE); //$NON-NLS-1$\n\t\t\t\ttext.append(\"\\nApp Version : \").append(Version.getAppName(getMyApplication())); //$NON-NLS-1$\n\t\t\t\ttry {\n\t\t\t\t\tPackageInfo info = getActivity().getPackageManager().getPackageInfo(getActivity().getPackageName(),\n\t\t\t\t\t\t\t0);\n\t\t\t\t\tif (info != null) {\n\t\t\t\t\t\ttext.append(\"\\nApk Version : \").append(info.versionName).append(\" \").append(info.versionCode); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\t\t}\n\t\t\t\t} catch (PackageManager.NameNotFoundException e) {\n\t\t\t\t}\n\t\t\t\tintent.putExtra(Intent.EXTRA_TEXT, text.toString());\n\t\t\t\tstartActivity(Intent.createChooser(intent, getString(R.string.send_report)));\n\t\t\t}\n\t\t});\n\n\t\tButton cancelBtn = ((Button) view.findViewById(R.id.error_cancel));\n\t\tcancelBtn.setTypeface(typeface);\n\t\tcancelBtn.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View view) {\n\t\t\t\tOsmandActionBarActivity dashboardActivity = ((OsmandActionBarActivity) getActivity());\n\t\t\t\tif (dashboardActivity != null) {\n\t\t\t\t\tdashboardActivity.getSupportFragmentManager().beginTransaction().remove(DashErrorFragment.this)\n\t\t\t\t\t\t\t.commit();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn view;\n\t}","id":46978,"modified_method":"@Override\n\tpublic View initView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n\t\tView view = getActivity().getLayoutInflater().inflate(R.layout.dash_error_fragment, container, false);\n\t\tString msg = MessageFormat.format(getString(R.string.previous_run_crashed), OsmandApplication.EXCEPTION_PATH);\n\t\tTypeface typeface = FontCache.getRobotoMedium(getActivity());\n\t\tImageView iv = ((ImageView) view.findViewById(R.id.error_icon));\n\t\tiv.setImageDrawable(getMyApplication().getIconsCache().getContentIcon(R.drawable.ic_crashlog));\n\t\tTextView message = ((TextView) view.findViewById(R.id.error_header));\n\t\tmessage.setTypeface(typeface);\n\t\tmessage.setText(msg);\n\t\tButton errorBtn = ((Button) view.findViewById(R.id.error_btn));\n\t\terrorBtn.setTypeface(typeface);\n\t\terrorBtn.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View view) {\n\t\t\t\tIntent intent = new Intent(Intent.ACTION_SEND);\n\t\t\t\tintent.putExtra(Intent.EXTRA_EMAIL, new String[]{\"crash@osmand.net\"}); //$NON-NLS-1$\n\t\t\t\tFile file = getMyApplication().getAppPath(OsmandApplication.EXCEPTION_PATH);\n\t\t\t\tintent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(file));\n\t\t\t\tintent.setType(\"vnd.android.cursor.dir/email\"); //$NON-NLS-1$\n\t\t\t\tintent.putExtra(Intent.EXTRA_SUBJECT, \"OsmAnd bug\"); //$NON-NLS-1$\n\t\t\t\tStringBuilder text = new StringBuilder();\n\t\t\t\ttext.append(\"\\nDevice : \").append(Build.DEVICE); //$NON-NLS-1$\n\t\t\t\ttext.append(\"\\nBrand : \").append(Build.BRAND); //$NON-NLS-1$\n\t\t\t\ttext.append(\"\\nModel : \").append(Build.MODEL); //$NON-NLS-1$\n\t\t\t\ttext.append(\"\\nProduct : \").append(Build.PRODUCT); //$NON-NLS-1$\n\t\t\t\ttext.append(\"\\nBuild : \").append(Build.DISPLAY); //$NON-NLS-1$\n\t\t\t\ttext.append(\"\\nVersion : \").append(Build.VERSION.RELEASE); //$NON-NLS-1$\n\t\t\t\ttext.append(\"\\nApp Version : \").append(Version.getAppName(getMyApplication())); //$NON-NLS-1$\n\t\t\t\ttry {\n\t\t\t\t\tPackageInfo info = getActivity().getPackageManager().getPackageInfo(getActivity().getPackageName(),\n\t\t\t\t\t\t\t0);\n\t\t\t\t\tif (info != null) {\n\t\t\t\t\t\ttext.append(\"\\nApk Version : \").append(info.versionName).append(\" \").append(info.versionCode); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\t\t}\n\t\t\t\t} catch (PackageManager.NameNotFoundException e) {\n\t\t\t\t\tPlatformUtil.getLog(DashErrorFragment.class).error(\"\", e);\n\t\t\t\t}\n\t\t\t\tintent.putExtra(Intent.EXTRA_TEXT, text.toString());\n\t\t\t\tstartActivity(Intent.createChooser(intent, getString(R.string.send_report)));\n\t\t\t}\n\t\t});\n\n\t\tButton cancelBtn = ((Button) view.findViewById(R.id.error_cancel));\n\t\tcancelBtn.setTypeface(typeface);\n\t\tcancelBtn.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View view) {\n\t\t\t\tOsmandActionBarActivity dashboardActivity = ((OsmandActionBarActivity) getActivity());\n\t\t\t\tif (dashboardActivity != null) {\n\t\t\t\t\tdashboardActivity.getSupportFragmentManager().beginTransaction().remove(DashErrorFragment.this)\n\t\t\t\t\t\t\t.commit();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tdismissCallback = new ErrorDismissListener(getParentView(), dashboard, TAG, view);\n\t\treturn view;\n\t}","commit_id":"574ba29ac14812c86e54750a7787494793427286","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public DashFragmentData(String tag, Class<? extends DashBaseFragment> fragmentClass,\n\t\t\t\t\t\t\tString title, ShouldShowFunction shouldShowFunction) {\n\t\tthis.tag = tag;\n\t\tthis.fragmentClass = fragmentClass;\n\t\tthis.title = title;\n\t\tthis.shouldShowFunction = shouldShowFunction;\n\t}","id":46979,"modified_method":"public DashFragmentData(String tag, Class<? extends DashBaseFragment> fragmentClass,\n\t\t\t\t\t\t\tString title, ShouldShowFunction shouldShowFunction) {\n\t\tthis.tag = tag;\n\t\tthis.fragmentClass = fragmentClass;\n\t\tthis.title = title;\n\t\tthis.shouldShowFunction = shouldShowFunction;\n\t\tcustomDeletionLogic = false;\n\t}","commit_id":"574ba29ac14812c86e54750a7787494793427286","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n    public View initView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        View view = getActivity().getLayoutInflater().inflate(R.layout.dash_rate_us_fragment, container, false);\n        TextView header = (TextView) view.findViewById(R.id.header);\n        TextView subheader = (TextView) view.findViewById(R.id.subheader);\n        Button positiveButton = (Button) view.findViewById(R.id.positive_button);\n        Button negativeButton = (Button) view.findViewById(R.id.negative_button);\n        positiveButton.setOnClickListener(\n                new PositiveButtonListener(header, subheader, positiveButton, negativeButton));\n        negativeButton.setOnClickListener(\n                new NegativeButtonListener(header, subheader, positiveButton, negativeButton));\n        return view;\n    }","id":46980,"modified_method":"@Override\n    public View initView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        View view = getActivity().getLayoutInflater().inflate(R.layout.dash_rate_us_fragment, container, false);\n        TextView header = (TextView) view.findViewById(R.id.header);\n        TextView subheader = (TextView) view.findViewById(R.id.subheader);\n        Button positiveButton = (Button) view.findViewById(R.id.positive_button);\n        Button negativeButton = (Button) view.findViewById(R.id.negative_button);\n        positiveButton.setOnClickListener(\n                new PositiveButtonListener(header, subheader, positiveButton, negativeButton));\n        negativeButton.setOnClickListener(\n                new NegativeButtonListener(header, subheader, positiveButton, negativeButton));\n\t\tmRateUsDismissListener = new RateUsDismissListener(getParentView(), dashboard, TAG, view, settings);\n        return view;\n    }","commit_id":"574ba29ac14812c86e54750a7787494793427286","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public static boolean shouldShow(OsmandSettings settings) {\n\t\tif(!settings.LAST_DISPLAY_TIME.isSet()) {\n\t\t\tsettings.LAST_DISPLAY_TIME.set(System.currentTimeMillis());\n\t\t}\n\t\tDashRateUsFragment.settings = settings;\n\t\tlong lastDisplayTimeInMillis = settings.LAST_DISPLAY_TIME.get();\n\t\tint numberOfApplicationRuns = settings.NUMBER_OF_APPLICATION_STARTS.get();\n\t\tRateUsState state = settings.RATE_US_STATE.get();\n\n\t\tCalendar modifiedTime = Calendar.getInstance();\n\t\tCalendar lastDisplayTime = Calendar.getInstance();\n\t\tlastDisplayTime.setTimeInMillis(lastDisplayTimeInMillis);\n\n\t\tint bannerFreeRuns = 0;\n\n\t\tLog.v(TAG, \"state=\" + state + \"; lastDisplayTimeInMillis=\" + lastDisplayTimeInMillis\n\t\t\t\t+ \"; numberOfApplicationRuns=\" + numberOfApplicationRuns);\n\n\t\tboolean toReturn = false;\n\n\t\tswitch (state) {\n\t\t\tcase LIKED:\n\t\t\t\treturn false;\n\t\t\tcase INITIAL_STATE:\n\t\t\t\tbreak;\n\t\t\tcase IGNORED:\n\t\t\t\tmodifiedTime.add(Calendar.WEEK_OF_YEAR, -1);\n\t\t\t\tbannerFreeRuns = 5;\n\t\t\t\tbreak;\n\t\t\tcase DISLIKED_WITH_MESSAGE:\n\t\t\t\tmodifiedTime.add(Calendar.MONTH, -3);\n\t\t\t\tbannerFreeRuns = 3;\n\t\t\t\tbreak;\n\t\t\tcase DISLIKED_WITHOUT_MESSAGE:\n\t\t\t\tmodifiedTime.add(Calendar.MONTH, -2);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new IllegalStateException(\"Unexpected state:\" + state);\n\t\t}\n\n\t\tif (state != RateUsState.INITIAL_STATE) {\n\t\t\tif (modifiedTime.after(lastDisplayTime) && numberOfApplicationRuns >= bannerFreeRuns) {\n\t\t\t\tsettings.RATE_US_STATE.set(RateUsState.INITIAL_STATE);\n\t\t\t\tmodifiedTime = Calendar.getInstance();\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t// Initial state now\n\t\tmodifiedTime.add(Calendar.HOUR, -72);\n\t\tbannerFreeRuns = 3;\n\t\tif (modifiedTime.after(lastDisplayTime) && numberOfApplicationRuns >= bannerFreeRuns) {\n\t\t\ttoReturn = true;\n\t\t}\n\t\treturn toReturn;\n\t}","id":46981,"modified_method":"public static boolean shouldShow(OsmandSettings settings) {\n\t\tif(!settings.LAST_DISPLAY_TIME.isSet()) {\n\t\t\tsettings.LAST_DISPLAY_TIME.set(System.currentTimeMillis());\n\t\t}\n\t\tDashRateUsFragment.settings = settings;\n\t\tlong lastDisplayTimeInMillis = settings.LAST_DISPLAY_TIME.get();\n\t\tint numberOfApplicationRuns = settings.NUMBER_OF_APPLICATION_STARTS.get();\n\t\tRateUsState state = settings.RATE_US_STATE.get();\n\n\t\tCalendar modifiedTime = Calendar.getInstance();\n\t\tCalendar lastDisplayTime = Calendar.getInstance();\n\t\tlastDisplayTime.setTimeInMillis(lastDisplayTimeInMillis);\n\n\t\tint bannerFreeRuns = 0;\n\n\t\tLog.v(TAG, \"state=\" + state + \"; lastDisplayTimeInMillis=\" + lastDisplayTimeInMillis\n\t\t\t\t+ \"; numberOfApplicationRuns=\" + numberOfApplicationRuns);\n\n\t\tboolean toReturn = false;\n\n\t\tswitch (state) {\n\t\t\tcase LIKED:\n\t\t\t\treturn false;\n\t\t\tcase INITIAL_STATE:\n\t\t\t\tbreak;\n\t\t\tcase IGNORED:\n\t\t\t\tmodifiedTime.add(Calendar.WEEK_OF_YEAR, -1);\n\t\t\t\tbannerFreeRuns = 5;\n\t\t\t\tbreak;\n\t\t\tcase DISLIKED_WITH_MESSAGE:\n\t\t\t\tmodifiedTime.add(Calendar.MONTH, -3);\n\t\t\t\tbannerFreeRuns = 3;\n\t\t\t\tbreak;\n\t\t\tcase DISLIKED_WITHOUT_MESSAGE:\n\t\t\t\tmodifiedTime.add(Calendar.MONTH, -2);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new IllegalStateException(\"Unexpected state:\" + state);\n\t\t}\n\n\t\tif (state != RateUsState.INITIAL_STATE) {\n\t\t\tif (modifiedTime.after(lastDisplayTime) && numberOfApplicationRuns >= bannerFreeRuns) {\n\t\t\t\tsettings.RATE_US_STATE.set(RateUsState.INITIAL_STATE);\n\t\t\t\tmodifiedTime = Calendar.getInstance();\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t// Initial state now\n\t\tmodifiedTime.add(Calendar.HOUR, -72);\n\t\tbannerFreeRuns = 3;\n\t\treturn modifiedTime.after(lastDisplayTime) && numberOfApplicationRuns >= bannerFreeRuns;\n\t}","commit_id":"574ba29ac14812c86e54750a7787494793427286","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public void setDashboardVisibility(boolean visible, DashboardType type, DashboardType prevItem, boolean animation) {\n\t\tif (visible == this.visible && type == visibleType) {\n\t\t\treturn;\n\t\t}\n\t\tthis.previousVisibleType = prevItem;\n\t\tthis.visible = visible;\n\t\tboolean refresh = this.visibleType == type;\n\t\tthis.visibleType = type;\n\t\tDashboardOnMap.staticVisible = visible;\n\t\tDashboardOnMap.staticVisibleType = type;\n\t\tif (visible) {\n\t\t\tmapViewLocation = mapActivity.getMapLocation();\n\t\t\tmapRotation = mapActivity.getMapRotate();\n\t\t\tmapLinkedToLocation = mapActivity.getMapViewTrackingUtilities().isMapLinkedToLocation();\n\t\t\tmyLocation = mapActivity.getMyApplication().getLocationProvider().getLastKnownLocation();\n\t\t\tmapActivity.getMapViewTrackingUtilities().setDashboard(this);\n\t\t\tdashboardView.setVisibility(View.VISIBLE);\n\t\t\tif (isActionButtonVisible()) {\n\t\t\t\tactionButton.setVisibility(View.VISIBLE);\n\t\t\t} else {\n\t\t\t\thideActionButton();\n\t\t\t}\n\t\t\tupdateDownloadBtn();\n\t\t\tView listViewLayout = dashboardView.findViewById(R.id.dash_list_view_layout);\n\t\t\tScrollView scrollView = (ScrollView) dashboardView.findViewById(R.id.main_scroll);\n\t\t\tif (visibleType == DashboardType.DASHBOARD) {\n\t\t\t\taddOrUpdateDashboardFragments();\n\t\t\t\tscrollView.setVisibility(View.VISIBLE);\n\t\t\t\tscrollView.scrollTo(0, 0);\n\t\t\t\tlistViewLayout.setVisibility(View.GONE);\n\t\t\t\tonScrollChanged(scrollView.getScrollY(), false, false);\n\t\t\t} else {\n\t\t\t\tscrollView.setVisibility(View.GONE);\n\t\t\t\tlistViewLayout.setVisibility(View.VISIBLE);\n\t\t\t\tif (listView instanceof ObservableListView) {\n\t\t\t\t\tonScrollChanged(((ObservableListView) listView).getScrollY(), false, false);\n\t\t\t\t}\n\t\t\t\tif (refresh) {\n\t\t\t\t\trefreshContent(false);\n\t\t\t\t} else {\n\t\t\t\t\tupdateListAdapter();\n\t\t\t\t\tupdateListBackgroundHeight();\n\t\t\t\t}\n\t\t\t}\n\t\t\tmapActivity.findViewById(R.id.toolbar_back).setVisibility(isBackButtonVisible() ? View.VISIBLE : View.GONE);\n\t\t\tmapActivity.findViewById(R.id.MapHudButtonsOverlay).setVisibility(View.INVISIBLE);\n\n\t\t\tupdateToolbarActions();\n\t\t\t//fabButton.showFloatingActionButton();\n\t\t\topen(dashboardView.findViewById(R.id.animateContent), animation);\n\t\t\tupdateLocation(true, true, false);\n\t\t} else {\n\t\t\tmapActivity.getMapViewTrackingUtilities().setDashboard(null);\n\t\t\thide(dashboardView.findViewById(R.id.animateContent), animation);\n\t\t\tmapActivity.findViewById(R.id.MapHudButtonsOverlay).setVisibility(View.VISIBLE);\n\t\t\thideActionButton();\n\t\t\tfor (WeakReference<DashBaseFragment> df : fragList) {\n\t\t\t\tif (df.get() != null) {\n\t\t\t\t\tdf.get().onCloseDash();\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}","id":46982,"modified_method":"public void setDashboardVisibility(boolean visible, DashboardType type, DashboardType prevItem, boolean animation) {\n\t\tif (visible == this.visible && type == visibleType) {\n\t\t\treturn;\n\t\t}\n\t\tthis.previousVisibleType = prevItem;\n\t\tthis.visible = visible;\n\t\tboolean refresh = this.visibleType == type;\n\t\tthis.visibleType = type;\n\t\tDashboardOnMap.staticVisible = visible;\n\t\tDashboardOnMap.staticVisibleType = type;\n\t\tif (visible) {\n\t\t\tmapViewLocation = mapActivity.getMapLocation();\n\t\t\tmapRotation = mapActivity.getMapRotate();\n\t\t\tmapLinkedToLocation = mapActivity.getMapViewTrackingUtilities().isMapLinkedToLocation();\n\t\t\tmyLocation = mapActivity.getMyApplication().getLocationProvider().getLastKnownLocation();\n\t\t\tmapActivity.getMapViewTrackingUtilities().setDashboard(this);\n\t\t\tdashboardView.setVisibility(View.VISIBLE);\n\t\t\tif (isActionButtonVisible()) {\n\t\t\t\tactionButton.setVisibility(View.VISIBLE);\n\t\t\t} else {\n\t\t\t\thideActionButton();\n\t\t\t}\n\t\t\tupdateDownloadBtn();\n\t\t\tView listViewLayout = dashboardView.findViewById(R.id.dash_list_view_layout);\n\t\t\tScrollView scrollView = (ScrollView) dashboardView.findViewById(R.id.main_scroll);\n\t\t\tif (visibleType == DashboardType.DASHBOARD) {\n\t\t\t\taddOrUpdateDashboardFragments();\n\t\t\t\tscrollView.setVisibility(View.VISIBLE);\n\t\t\t\tscrollView.scrollTo(0, 0);\n\t\t\t\tlistViewLayout.setVisibility(View.GONE);\n\t\t\t\tonScrollChanged(scrollView.getScrollY(), false, false);\n\t\t\t} else {\n\t\t\t\tscrollView.setVisibility(View.GONE);\n\t\t\t\tlistViewLayout.setVisibility(View.VISIBLE);\n\t\t\t\tif (listView instanceof ObservableListView) {\n\t\t\t\t\tonScrollChanged(listView.getScrollY(), false, false);\n\t\t\t\t}\n\t\t\t\tif (refresh) {\n\t\t\t\t\trefreshContent(false);\n\t\t\t\t} else {\n\t\t\t\t\tupdateListAdapter();\n\t\t\t\t\tupdateListBackgroundHeight();\n\t\t\t\t}\n\t\t\t}\n\t\t\tmapActivity.findViewById(R.id.toolbar_back).setVisibility(isBackButtonVisible() ? View.VISIBLE : View.GONE);\n\t\t\tmapActivity.findViewById(R.id.MapHudButtonsOverlay).setVisibility(View.INVISIBLE);\n\n\t\t\tupdateToolbarActions();\n\t\t\t//fabButton.showFloatingActionButton();\n\t\t\topen(dashboardView.findViewById(R.id.animateContent), animation);\n\t\t\tupdateLocation(true, true, false);\n\t\t} else {\n\t\t\tmapActivity.getMapViewTrackingUtilities().setDashboard(null);\n\t\t\thide(dashboardView.findViewById(R.id.animateContent), animation);\n\t\t\tmapActivity.findViewById(R.id.MapHudButtonsOverlay).setVisibility(View.VISIBLE);\n\t\t\thideActionButton();\n\t\t\tfor (WeakReference<DashBaseFragment> df : fragList) {\n\t\t\t\tif (df.get() != null) {\n\t\t\t\t\tdf.get().onCloseDash();\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}","commit_id":"574ba29ac14812c86e54750a7787494793427286","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public void blacklistFragmentByTag(String tag) {\n\t\tFragmentManager manager = mapActivity.getSupportFragmentManager();\n\t\tFragmentTransaction transaction = manager.beginTransaction();\n\t\tFragment frag = manager.findFragmentByTag(tag);\n\t\ttransaction.hide(frag).commit();\n\n\t\tgetMyApplication().getSettings().registerBooleanPreference(SHOULD_SHOW + tag, true)\n\t\t\t\t.makeGlobal().set(false);\n\t}","id":46983,"modified_method":"public void blacklistFragmentByTag(String tag) {\n\t\thideFragmentByTag(tag);\n\t\tgetMyApplication().getSettings().registerBooleanPreference(SHOULD_SHOW + tag, true)\n\t\t\t\t.makeGlobal().set(false);\n\t}","commit_id":"574ba29ac14812c86e54750a7787494793427286","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n\t\tpublic boolean shouldShow(OsmandSettings settings, MapActivity activity, String tag) {\n\t\t\treturn !super.shouldShow(settings, activity, tag);\n\t\t}","id":46984,"modified_method":"@Override\n\t\tpublic boolean shouldShow(OsmandSettings settings, MapActivity activity, String tag) {\n\t\t\treturn activity.getMyApplication().getAppInitializer().isFirstTime(activity)\n\t\t\t\t\t&& super.shouldShow(settings, activity, tag);\n\t\t}","commit_id":"574ba29ac14812c86e54750a7787494793427286","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private void updateColorOfToolbar(int scrollY) {\n\t\tif (portrait) {\n\t\t\tfloat sh = mFlexibleSpaceImageHeight - mFlexibleBlurSpaceHeight;\n\t\t\tfloat t = sh == 0 ? 1 : (1 - Math.max(0, -scrollY + sh) / sh);\n\t\t\tt = Math.max(0, t);\n\n\t\t\tint alpha = (int) (t * 255);\n\t\t\t// in order to have proper fast scroll down\n\t\t\tint malpha = t == 1 ? alpha = 0 : alpha;\n\t\t\tsetAlpha(paddingView, malpha, baseColor);\n\t\t\tsetAlpha(dashboardView.findViewById(R.id.map_part_dashboard), malpha, baseColor);\n\t\t\tgradientToolbar.setAlpha((int) ((1 - t) * 255));\n\t\t\tsetAlpha(dashboardView, (int) (t * 128), 0);\n\t\t\tif (t < 1) {\n\t\t\t\t((Toolbar) dashboardView.findViewById(R.id.toolbar)).setBackgroundDrawable(gradientToolbar);\n\t\t\t} else {\n\t\t\t\t((Toolbar) dashboardView.findViewById(R.id.toolbar)).setBackgroundColor(0xff000000 | baseColor);\n\t\t\t}\n\t\t}\n\t}","id":46985,"modified_method":"private void updateColorOfToolbar(int scrollY) {\n\t\tif (portrait) {\n\t\t\tfloat sh = mFlexibleSpaceImageHeight - mFlexibleBlurSpaceHeight;\n\t\t\tfloat t = sh == 0 ? 1 : (1 - Math.max(0, -scrollY + sh) / sh);\n\t\t\tt = Math.max(0, t);\n\n\t\t\tint alpha = (int) (t * 255);\n\t\t\t// in order to have proper fast scroll down\n\t\t\tint malpha = t == 1 ? alpha = 0 : alpha;\n\t\t\tsetAlpha(paddingView, malpha, baseColor);\n\t\t\tsetAlpha(dashboardView.findViewById(R.id.map_part_dashboard), malpha, baseColor);\n\t\t\tgradientToolbar.setAlpha((int) ((1 - t) * 255));\n\t\t\tsetAlpha(dashboardView, (int) (t * 128), 0);\n\t\t\tif (t < 1) {\n\t\t\t\tdashboardView.findViewById(R.id.toolbar).setBackgroundDrawable(gradientToolbar);\n\t\t\t} else {\n\t\t\t\tdashboardView.findViewById(R.id.toolbar).setBackgroundColor(0xff000000 | baseColor);\n\t\t\t}\n\t\t}\n\t}","commit_id":"574ba29ac14812c86e54750a7787494793427286","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public void unblacklistFragmentClass(String tag) {\n\t\tFragmentManager manager = mapActivity.getSupportFragmentManager();\n\t\tFragmentTransaction transaction = manager.beginTransaction();\n\t\tFragment frag = manager.findFragmentByTag(tag);\n\t\ttransaction.show(frag).commit();\n\n\t\tgetMyApplication().getSettings().registerBooleanPreference(SHOULD_SHOW + tag, true)\n\t\t\t\t.makeGlobal().set(true);\n\t}","id":46986,"modified_method":"public void unblacklistFragmentClass(String tag) {\n\t\tunhideFragmentByTag(tag);\n\t\tgetMyApplication().getSettings().registerBooleanPreference(SHOULD_SHOW + tag, true)\n\t\t\t\t.makeGlobal().set(true);\n\t}","commit_id":"574ba29ac14812c86e54750a7787494793427286","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private void updateToolbarActions() {\n\t\tTextView tv = (TextView) dashboardView.findViewById(R.id.toolbar_text);\n\t\ttv.setText(\"\");\n\t\tboolean waypointsVisible = visibleType == DashboardType.WAYPOINTS || visibleType == DashboardType.WAYPOINTS_FLAT;\n\t\tboolean waypointsEdit = visibleType == DashboardType.WAYPOINTS_EDIT;\n\t\tif (waypointsVisible || waypointsEdit) {\n\t\t\ttv.setText(R.string.waypoints);\n\t\t} else if (visibleType == DashboardType.CONFIGURE_MAP) {\n\t\t\ttv.setText(R.string.configure_map);\n\t\t} else if (visibleType == DashboardType.CONFIGURE_SCREEN) {\n\t\t\ttv.setText(R.string.layer_map_appearance);\n\t\t}\n\t\tImageView edit = (ImageView) dashboardView.findViewById(R.id.toolbar_edit);\n\t\tedit.setVisibility(View.GONE);\n\t\tImageView sort = (ImageView) dashboardView.findViewById(R.id.toolbar_sort);\n\t\tsort.setVisibility(View.GONE);\n\t\tImageView ok = (ImageView) dashboardView.findViewById(R.id.toolbar_ok);\n\t\tok.setVisibility(View.GONE);\n\t\tImageView flat = (ImageView) dashboardView.findViewById(R.id.toolbar_flat);\n\t\tflat.setVisibility(View.GONE);\n\t\tImageView settingsButton = (ImageView) dashboardView.findViewById(R.id.toolbar_settings);\n\t\tsettingsButton.setVisibility(View.GONE);\n\t\tImageView configureScreen = (ImageView) dashboardView.findViewById(R.id.toolbar_configure_screen);\n\t\tconfigureScreen.setVisibility(View.GONE);\n\t\tIconsCache iconsCache = mapActivity.getMyApplication().getIconsCache();\n\t\tImageView lst = (ImageView) dashboardView.findViewById(R.id.toolbar_list);\n\t\tlst.setVisibility(View.GONE);\n\t\tImageView back = (ImageView) dashboardView.findViewById(R.id.toolbar_back);\n\t\tback.setImageDrawable(\n\t\t\t\t((OsmandApplication) getMyApplication()).getIconsCache().getIcon(R.drawable.abc_ic_ab_back_mtrl_am_alpha));\n\t\tback.setOnClickListener(new View.OnClickListener() {\n\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tbackPressed();\n\t\t\t}\n\t\t});\n\n\t\tif (waypointsVisible && getMyApplication().getWaypointHelper().getAllPoints().size() > 0) {\n\t\t\tif (mapActivity.getMyApplication().getTargetPointsHelper().getIntermediatePoints().size() > 0) {\n\t\t\t\tsort.setVisibility(View.VISIBLE);\n\t\t\t\tsort.setOnClickListener(new View.OnClickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\t\thideDashboard();\n\t\t\t\t\t\tIntermediatePointsDialog.openIntermediatePointsDialog(mapActivity, getMyApplication(), true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tedit.setVisibility(View.VISIBLE);\n\t\t\tedit.setOnClickListener(new View.OnClickListener() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\tsetDashboardVisibility(true, DashboardType.WAYPOINTS_EDIT);\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (getMyApplication().getWaypointHelper().isRouteCalculated()) {\n\t\t\t\tflat.setVisibility(View.VISIBLE);\n\t\t\t\tfinal boolean flatNow = visibleType == DashboardType.WAYPOINTS_FLAT;\n\t\t\t\tflat.setImageDrawable(iconsCache.getIcon(flatNow ? R.drawable.ic_tree_list_dark\n\t\t\t\t\t\t: R.drawable.ic_flat_list_dark));\n\t\t\t\tflat.setOnClickListener(new View.OnClickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\t\tsetDashboardVisibility(true, flatNow ? DashboardType.WAYPOINTS : DashboardType.WAYPOINTS_FLAT,\n\t\t\t\t\t\t\t\tpreviousVisibleType, false);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (waypointsEdit) {\n\t\t\tok.setVisibility(View.VISIBLE);\n\t\t\tok.setOnClickListener(new View.OnClickListener() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\tmapActivity.getMyApplication().getWaypointHelper().removeVisibleLocationPoint(deletedPoints);\n\t\t\t\t\thideDashboard();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (visibleType == DashboardType.DASHBOARD || visibleType == DashboardType.LIST_MENU) {\n\t\t\tconfigureScreen.setVisibility(View.VISIBLE);\n\t\t\tconfigureScreen.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\tsetDashboardVisibility(true, DashboardType.CONFIGURE_SCREEN);\n\t\t\t\t}\n\t\t\t});\n\n\n\t\t\tsettingsButton.setVisibility(View.VISIBLE);\n\t\t\tsettingsButton.setOnClickListener(new View.OnClickListener() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\tnew DashboardSettingsDialogFragment().show(\n\t\t\t\t\t\t\tmapActivity.getSupportFragmentManager(), \"dashboard_settings\");\n\t\t\t\t}\n\t\t\t});\n\t\t\tlst.setVisibility(View.VISIBLE);\n\t\t\tif (visibleType == DashboardType.DASHBOARD) {\n\t\t\t\tlst.setImageDrawable(iconsCache.getIcon(R.drawable.ic_navigation_drawer));\n\t\t\t} else if (visibleType == DashboardType.LIST_MENU) {\n\t\t\t\tlst.setImageDrawable(iconsCache.getIcon(R.drawable.ic_dashboard_dark));\n\t\t\t}\n\t\t\tlst.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\tif (visibleType == DashboardType.DASHBOARD) {\n\t\t\t\t\t\tsetDashboardVisibility(true, DashboardType.LIST_MENU, null, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetDashboardVisibility(true, DashboardType.DASHBOARD, null, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}","id":46987,"modified_method":"private void updateToolbarActions() {\n\t\tTextView tv = (TextView) dashboardView.findViewById(R.id.toolbar_text);\n\t\ttv.setText(\"\");\n\t\tboolean waypointsVisible = visibleType == DashboardType.WAYPOINTS || visibleType == DashboardType.WAYPOINTS_FLAT;\n\t\tboolean waypointsEdit = visibleType == DashboardType.WAYPOINTS_EDIT;\n\t\tif (waypointsVisible || waypointsEdit) {\n\t\t\ttv.setText(R.string.waypoints);\n\t\t} else if (visibleType == DashboardType.CONFIGURE_MAP) {\n\t\t\ttv.setText(R.string.configure_map);\n\t\t} else if (visibleType == DashboardType.CONFIGURE_SCREEN) {\n\t\t\ttv.setText(R.string.layer_map_appearance);\n\t\t}\n\t\tImageView edit = (ImageView) dashboardView.findViewById(R.id.toolbar_edit);\n\t\tedit.setVisibility(View.GONE);\n\t\tImageView sort = (ImageView) dashboardView.findViewById(R.id.toolbar_sort);\n\t\tsort.setVisibility(View.GONE);\n\t\tImageView ok = (ImageView) dashboardView.findViewById(R.id.toolbar_ok);\n\t\tok.setVisibility(View.GONE);\n\t\tImageView flat = (ImageView) dashboardView.findViewById(R.id.toolbar_flat);\n\t\tflat.setVisibility(View.GONE);\n\t\tImageView settingsButton = (ImageView) dashboardView.findViewById(R.id.toolbar_settings);\n\t\tsettingsButton.setVisibility(View.GONE);\n\t\tImageView configureScreen = (ImageView) dashboardView.findViewById(R.id.toolbar_configure_screen);\n\t\tconfigureScreen.setVisibility(View.GONE);\n\t\tIconsCache iconsCache = mapActivity.getMyApplication().getIconsCache();\n\t\tImageView lst = (ImageView) dashboardView.findViewById(R.id.toolbar_list);\n\t\tlst.setVisibility(View.GONE);\n\t\tImageView back = (ImageView) dashboardView.findViewById(R.id.toolbar_back);\n\t\tback.setImageDrawable(\n\t\t\t\tgetMyApplication().getIconsCache().getIcon(R.drawable.abc_ic_ab_back_mtrl_am_alpha));\n\t\tback.setOnClickListener(new View.OnClickListener() {\n\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tbackPressed();\n\t\t\t}\n\t\t});\n\n\t\tif (waypointsVisible && getMyApplication().getWaypointHelper().getAllPoints().size() > 0) {\n\t\t\tif (mapActivity.getMyApplication().getTargetPointsHelper().getIntermediatePoints().size() > 0) {\n\t\t\t\tsort.setVisibility(View.VISIBLE);\n\t\t\t\tsort.setOnClickListener(new View.OnClickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\t\thideDashboard();\n\t\t\t\t\t\tIntermediatePointsDialog.openIntermediatePointsDialog(mapActivity, getMyApplication(), true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tedit.setVisibility(View.VISIBLE);\n\t\t\tedit.setOnClickListener(new View.OnClickListener() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\tsetDashboardVisibility(true, DashboardType.WAYPOINTS_EDIT);\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (getMyApplication().getWaypointHelper().isRouteCalculated()) {\n\t\t\t\tflat.setVisibility(View.VISIBLE);\n\t\t\t\tfinal boolean flatNow = visibleType == DashboardType.WAYPOINTS_FLAT;\n\t\t\t\tflat.setImageDrawable(iconsCache.getIcon(flatNow ? R.drawable.ic_tree_list_dark\n\t\t\t\t\t\t: R.drawable.ic_flat_list_dark));\n\t\t\t\tflat.setOnClickListener(new View.OnClickListener() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\t\tsetDashboardVisibility(true, flatNow ? DashboardType.WAYPOINTS : DashboardType.WAYPOINTS_FLAT,\n\t\t\t\t\t\t\t\tpreviousVisibleType, false);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (waypointsEdit) {\n\t\t\tok.setVisibility(View.VISIBLE);\n\t\t\tok.setOnClickListener(new View.OnClickListener() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\tmapActivity.getMyApplication().getWaypointHelper().removeVisibleLocationPoint(deletedPoints);\n\t\t\t\t\thideDashboard();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tif (visibleType == DashboardType.DASHBOARD || visibleType == DashboardType.LIST_MENU) {\n\t\t\tconfigureScreen.setVisibility(View.VISIBLE);\n\t\t\tconfigureScreen.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\tsetDashboardVisibility(true, DashboardType.CONFIGURE_SCREEN);\n\t\t\t\t}\n\t\t\t});\n\n\n\t\t\tsettingsButton.setVisibility(View.VISIBLE);\n\t\t\tsettingsButton.setOnClickListener(new View.OnClickListener() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\tnew DashboardSettingsDialogFragment().show(\n\t\t\t\t\t\t\tmapActivity.getSupportFragmentManager(), \"dashboard_settings\");\n\t\t\t\t}\n\t\t\t});\n\t\t\tlst.setVisibility(View.VISIBLE);\n\t\t\tif (visibleType == DashboardType.DASHBOARD) {\n\t\t\t\tlst.setImageDrawable(iconsCache.getIcon(R.drawable.ic_navigation_drawer));\n\t\t\t} else if (visibleType == DashboardType.LIST_MENU) {\n\t\t\t\tlst.setImageDrawable(iconsCache.getIcon(R.drawable.ic_dashboard_dark));\n\t\t\t}\n\t\t\tlst.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\tif (visibleType == DashboardType.DASHBOARD) {\n\t\t\t\t\t\tsetDashboardVisibility(true, DashboardType.LIST_MENU, null, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetDashboardVisibility(true, DashboardType.DASHBOARD, null, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}","commit_id":"574ba29ac14812c86e54750a7787494793427286","url":"https://github.com/osmandapp/Osmand"},{"original_method":"private void updateDownloadBtn() {\n\t\tButton btn = (Button) dashboardView.findViewById(R.id.map_download_button);\n\t\tString filter = null;\n\t\tString txt = \"\";\n\t\tOsmandMapTileView mv = mapActivity.getMapView();\n\t\tif (mv != null && !mapActivity.getMyApplication().isApplicationInitializing()) {\n\t\t\tif (mv.getZoom() < 11 && !mapActivity.getMyApplication().getResourceManager().containsBasemap()) {\n\t\t\t\tfilter = \"basemap\";\n\t\t\t\ttxt = mapActivity.getString(R.string.shared_string_download) + \" \"\n\t\t\t\t\t\t+ mapActivity.getString(R.string.base_world_map);\n\t\t\t} else {\n\t\t\t\tDownloadedRegionsLayer dl = mv.getLayerByClass(DownloadedRegionsLayer.class);\n\t\t\t\tif (dl != null) {\n\t\t\t\t\tStringBuilder btnName = new StringBuilder();\n\t\t\t\t\tfilter = dl.getFilter(btnName);\n\t\t\t\t\ttxt = btnName.toString();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tbtn.setText(txt);\n\t\tbtn.setVisibility(filter == null ? View.GONE : View.VISIBLE);\n\t\tfinal String f = filter;\n\t\tbtn.setOnClickListener(new View.OnClickListener() {\n\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\thideDashboard(false);\n\t\t\t\tfinal Intent intent = new Intent(mapActivity, mapActivity.getMyApplication().getAppCustomization()\n\t\t\t\t\t\t.getDownloadIndexActivity());\n\t\t\t\tintent.putExtra(DownloadActivity.FILTER_KEY, f.toString());\n\t\t\t\tintent.putExtra(DownloadActivity.TAB_TO_OPEN, DownloadActivity.DOWNLOAD_TAB);\n\t\t\t\tmapActivity.startActivity(intent);\n\t\t\t}\n\t\t});\n\t\tscheduleDownloadButtonCheck();\n\t}","id":46988,"modified_method":"private void updateDownloadBtn() {\n\t\tButton btn = (Button) dashboardView.findViewById(R.id.map_download_button);\n\t\tString filter = null;\n\t\tString txt = \"\";\n\t\tOsmandMapTileView mv = mapActivity.getMapView();\n\t\tif (mv != null && !mapActivity.getMyApplication().isApplicationInitializing()) {\n\t\t\tif (mv.getZoom() < 11 && !mapActivity.getMyApplication().getResourceManager().containsBasemap()) {\n\t\t\t\tfilter = \"basemap\";\n\t\t\t\ttxt = mapActivity.getString(R.string.shared_string_download) + \" \"\n\t\t\t\t\t\t+ mapActivity.getString(R.string.base_world_map);\n\t\t\t} else {\n\t\t\t\tDownloadedRegionsLayer dl = mv.getLayerByClass(DownloadedRegionsLayer.class);\n\t\t\t\tif (dl != null) {\n\t\t\t\t\tStringBuilder btnName = new StringBuilder();\n\t\t\t\t\tfilter = dl.getFilter(btnName);\n\t\t\t\t\ttxt = btnName.toString();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tbtn.setText(txt);\n\t\tbtn.setVisibility(filter == null ? View.GONE : View.VISIBLE);\n\t\tfinal String f = filter;\n\t\tbtn.setOnClickListener(new View.OnClickListener() {\n\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\thideDashboard(false);\n\t\t\t\tfinal Intent intent = new Intent(mapActivity, mapActivity.getMyApplication().getAppCustomization()\n\t\t\t\t\t\t.getDownloadIndexActivity());\n\t\t\t\tintent.putExtra(DownloadActivity.FILTER_KEY, f);\n\t\t\t\tintent.putExtra(DownloadActivity.TAB_TO_OPEN, DownloadActivity.DOWNLOAD_TAB);\n\t\t\t\tmapActivity.startActivity(intent);\n\t\t\t}\n\t\t});\n\t\tscheduleDownloadButtonCheck();\n\t}","commit_id":"574ba29ac14812c86e54750a7787494793427286","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n\t\tpublic boolean shouldShow(OsmandSettings settings, MapActivity activity, String tag) {\n\t\t\tLog.v(TAG, \"shouldShow(\" + \"settings=\" + settings + \", activity=\" + activity + \", tag=\" + tag + \")\");\n\t\t\tboolean shouldShow = settings.registerBooleanPreference(SHOULD_SHOW + tag, true)\n\t\t\t\t\t.makeGlobal().get();\n\t\t\tLog.v(TAG, \"shouldShow=\" + shouldShow);\n\t\t\treturn shouldShow;\n\t\t}","id":46989,"modified_method":"@Override\n\t\tpublic boolean shouldShow(OsmandSettings settings, MapActivity activity, String tag) {\n\t\t\treturn settings.registerBooleanPreference(SHOULD_SHOW + tag, true)\n\t\t\t\t\t.makeGlobal().get();\n\t\t}","commit_id":"574ba29ac14812c86e54750a7787494793427286","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n\tpublic void onAttach(Activity activity) {\n\t\tsuper.onAttach(activity);\n\t\tmapActivity = (MapActivity) activity;\n\t\tfragmentsData = mapActivity.getDashboard().getFragmentsData();\n\t}","id":46990,"modified_method":"@Override\n\tpublic void onAttach(Activity activity) {\n\t\tsuper.onAttach(activity);\n\t\tmapActivity = (MapActivity) activity;\n\t\tArrayList<DashFragmentData> fragmentsList = new ArrayList<>();\n\t\tfor(DashFragmentData fragmentData : mapActivity.getDashboard().getFragmentsData()) {\n\t\t\tif (!fragmentData.customDeletionLogic) fragmentsList.add(fragmentData);\n\t\t}\n\t\tfragmentsData = fragmentsList.toArray(new DashFragmentData[fragmentsList.size()]);\n\t}","commit_id":"574ba29ac14812c86e54750a7787494793427286","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n\t\tpublic View getView(final int position, View convertView, ViewGroup parent) {\n\t\t\tDashFragmentData dashFragmentData = getItem(position);\n\t\t\tDashViewHolder viewHolder;\n\t\t\tif (convertView == null) {\n\t\t\t\tviewHolder = new DashViewHolder();\n\t\t\t\tconvertView = LayoutInflater.from(getContext()).inflate(\n\t\t\t\t\t\tR.layout.dashboard_settings_dialog_item, parent, false);\n\t\t\t\tviewHolder.textView = (TextView) convertView.findViewById(R.id.text);\n\t\t\t\tviewHolder.compoundButton = (CompoundButton) convertView.findViewById(R.id.check_item);\n\t\t\t\tviewHolder.compoundButton.setOnCheckedChangeListener(\n\t\t\t\t\t\tnew CompoundButton.OnCheckedChangeListener() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void onCheckedChanged(CompoundButton compoundButton, boolean b) {\n\t\t\t\t\t\t\t\tInteger position = (Integer) compoundButton.getTag();\n\t\t\t\t\t\t\t\tcheckedItems[position] = b;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tviewHolder = (DashViewHolder) convertView.getTag();\n\t\t\t}\n\t\t\tviewHolder.compoundButton.setTag(position);\n\t\t\tviewHolder.compoundButton.setChecked(checkedItems[position]);\n\t\t\tviewHolder.textView.setText(dashFragmentData.title);\n\t\t\tconvertView.setTag(viewHolder);\n\t\t\treturn convertView;\n\t\t}","id":46991,"modified_method":"@Override\n\t\tpublic View getView(final int position, View convertView, ViewGroup parent) {\n\t\t\tDashFragmentData dashFragmentData = getItem(position);\n\t\t\tDashViewHolder viewHolder;\n\t\t\tif (convertView == null) {\n\t\t\t\tviewHolder = new DashViewHolder();\n\t\t\t\tconvertView = LayoutInflater.from(getContext()).inflate(\n\t\t\t\t\t\tR.layout.dashboard_settings_dialog_item, parent, false);\n\t\t\t\tviewHolder.textView = (TextView) convertView.findViewById(R.id.text);\n\t\t\t\tviewHolder.compoundButton = (CompoundButton) convertView.findViewById(R.id.check_item);\n\t\t\t\tviewHolder.compoundButton.setOnCheckedChangeListener(\n\t\t\t\t\t\tnew CompoundButton.OnCheckedChangeListener() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void onCheckedChanged(CompoundButton compoundButton, boolean b) {\n\t\t\t\t\t\t\t\tDashViewHolder localViewHolder = (DashViewHolder) compoundButton.getTag();\n\t\t\t\t\t\t\t\tcheckedItems[localViewHolder.position] = b;\n\t\t\t\t\t\t\t\tlocalViewHolder.textView.setTextColor(\n\t\t\t\t\t\t\t\t\t\tcheckedItems[localViewHolder.position] ? 0xFF212121\n\t\t\t\t\t\t\t\t\t\t\t\t: 0xFF8c8c8c);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tviewHolder = (DashViewHolder) convertView.getTag();\n\t\t\t}\n\t\t\tviewHolder.position = position;\n\t\t\tviewHolder.compoundButton.setTag(viewHolder);\n\t\t\tviewHolder.compoundButton.setChecked(checkedItems[position]);\n\t\t\tviewHolder.textView.setText(dashFragmentData.title);\n\t\t\tviewHolder.textView.setTextColor(checkedItems[position] ? 0xFF212121 : 0xFF8c8c8c);\n\t\t\tconvertView.setTag(viewHolder);\n\t\t\treturn convertView;\n\t\t}","commit_id":"574ba29ac14812c86e54750a7787494793427286","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@NonNull\n\t@Override\n\tpublic Dialog onCreateDialog(Bundle savedInstanceState) {\n\t\tAlertDialog.Builder builder = new AlertDialog.Builder(getActivity());\n\t\tfinal OsmandSettings settings = mapActivity.getMyApplication().getSettings();\n\t\tfinal DashFragmentAdapter adapter =\n\t\t\t\tnew DashFragmentAdapter(getActivity(), fragmentsData,\n\t\t\t\t\t\tsettings);\n\t\tbuilder.setTitle(R.string.dahboard_options_dialog_title)\n\t\t\t\t.setAdapter(adapter, null)\n\t\t\t\t.setPositiveButton(R.string.shared_string_ok, new DialogInterface.OnClickListener() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(DialogInterface dialogInterface, int type) {\n\t\t\t\t\t\tboolean[] shouldShow = adapter.getCheckedItems();\n\t\t\t\t\t\tfor (int i = 0; i < shouldShow.length; i++) {\n\t\t\t\t\t\t\tsettings.registerBooleanPreference(\n\t\t\t\t\t\t\t\t\tDashboardOnMap.SHOULD_SHOW + fragmentsData[i].tag, true)\n\t\t\t\t\t\t\t\t\t.makeGlobal().set(shouldShow[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmapActivity.getDashboard().refreshDashboardFragments();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\tfinal AlertDialog dialog = builder.create();\n\t\treturn dialog;\n\t}","id":46992,"modified_method":"@NonNull\n\t@Override\n\tpublic Dialog onCreateDialog(Bundle savedInstanceState) {\n\t\tAlertDialog.Builder builder = new AlertDialog.Builder(getActivity());\n\t\tfinal OsmandSettings settings = mapActivity.getMyApplication().getSettings();\n\t\tif (savedInstanceState != null && savedInstanceState.containsKey(CHECKED_ITEMS)) {\n\t\t\tadapter = new DashFragmentAdapter(getActivity(), fragmentsData,\n\t\t\t\t\tsavedInstanceState.getBooleanArray(CHECKED_ITEMS));\n\t\t} else {\n\t\t\tadapter = new DashFragmentAdapter(getActivity(), fragmentsData,\n\t\t\t\t\tsettings);\n\t\t}\n\t\tbuilder.setTitle(R.string.dahboard_options_dialog_title)\n\t\t\t\t.setAdapter(adapter, null)\n\t\t\t\t.setPositiveButton(R.string.shared_string_ok, new DialogInterface.OnClickListener() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(DialogInterface dialogInterface, int type) {\n\t\t\t\t\t\tboolean[] shouldShow = adapter.getCheckedItems();\n\t\t\t\t\t\tfor (int i = 0; i < shouldShow.length; i++) {\n\t\t\t\t\t\t\tsettings.registerBooleanPreference(\n\t\t\t\t\t\t\t\t\tDashboardOnMap.SHOULD_SHOW + fragmentsData[i].tag, true)\n\t\t\t\t\t\t\t\t\t.makeGlobal().set(shouldShow[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmapActivity.getDashboard().refreshDashboardFragments();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.setNegativeButton(R.string.shared_string_cancel, null);\n\t\treturn builder.create();\n\t}","commit_id":"574ba29ac14812c86e54750a7787494793427286","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public void bindLocalIndexInfo(final LocalIndexInfo item) {\n\t\t\tOsmandApplication context = fragment.getMyActivity().getMyApplication();\n\t\t\tfinal OsmandSettings.CommonPreference<Boolean> shouldUpdatePreference =\n\t\t\t\t\tpreferenceLiveUpdatesOn(item, fragment.getSettings());\n\t\t\tIncrementalChangesManager changesManager = context.getResourceManager().getChangesManager();\n\t\t\tfinal String fileNameWithoutExtension =\n\t\t\t\t\tAlgorithms.getFileNameWithoutExtension(new File(item.getFileName()));\n\n\t\t\tnameTextView.setText(getNameToDisplay(item, fragment.getMyActivity()));\n\t\t\tAbsListView.LayoutParams layoutParams = (AbsListView.LayoutParams) view.getLayoutParams();\n\t\t\tif (shouldUpdatePreference.get()) {\n\t\t\t\tfinal Integer frequencyId = preferenceUpdateFrequency(item, fragment.getSettings()).get();\n\t\t\t\tfinal Integer timeOfDateToUpdateId = preferenceTimeOfDayToUpdate(item, fragment.getSettings()).get();\n\t\t\t\tfinal UpdateFrequency frequency = UpdateFrequency.values()[frequencyId];\n\t\t\t\tfinal TimeOfDay timeOfDay = TimeOfDay.values()[timeOfDateToUpdateId];\n\t\t\t\tsubheaderTextView.setVisibility(View.VISIBLE);\n\t\t\t\tString subheaderText = fragment.getString(frequency.getLocalizedId());\n\t\t\t\tif (frequency != UpdateFrequency.HOURLY) {\n\t\t\t\t\tsubheaderText += \" \u2022 \" + fragment.getString(timeOfDay.getLocalizedId());\n\t\t\t\t}\n\t\t\t\tsubheaderTextView.setText(subheaderText);\n\t\t\t\tsubheaderTextView.setTextColor(fragment.getActivity().getResources()\n\t\t\t\t\t\t.getColor(R.color.osmand_orange));\n\t\t\t\ticon.setImageDrawable(context.getIconsCache().getIcon(R.drawable.ic_map, R.color.osmand_orange));\n\t\t\t\toptions.setImageDrawable(getSecondaryColorPaintedIcon(R.drawable.ic_overflow_menu_white));\n\t\t\t\tlayoutParams.height = (int) dpToPx(view.getContext(), UPDATES_ENABLED_ITEM_HEIGHT);\n\t\t\t} else {\n\t\t\t\tsubheaderTextView.setVisibility(View.GONE);\n\t\t\t\ticon.setImageDrawable(getSecondaryColorPaintedIcon(R.drawable.ic_map));\n\t\t\t\toptions.setImageDrawable(getSecondaryColorPaintedIcon(R.drawable.ic_action_plus));\n\t\t\t\tlayoutParams.height = (int) dpToPx(view.getContext(), UPDATES_DISABLED_ITEM_HEIGHT);\n\t\t\t}\n\t\t\tview.setLayoutParams(layoutParams);\n\n\t\t\tfinal long timestamp = changesManager.getTimestamp(fileNameWithoutExtension);\n\t\t\tString formattedDate = formatDateTime(fragment.getActivity(), timestamp);\n\t\t\tdescriptionTextView.setText(context.getString(R.string.last_update, formattedDate));\n\n\t\t\tfinal View.OnClickListener clickListener = new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\tfinal FragmentManager fragmentManager = fragment.getChildFragmentManager();\n\t\t\t\t\tLiveUpdatesSettingsDialogFragment.createInstance(item).show(fragmentManager, \"settings\");\n\t\t\t\t}\n\t\t\t};\n\t\t\toptions.setOnClickListener(clickListener);\n\t\t\tview.setOnClickListener(clickListener);\n\t\t}","id":46993,"modified_method":"public void bindLocalIndexInfo(final LocalIndexInfo item) {\n\t\t\tOsmandApplication context = fragment.getMyActivity().getMyApplication();\n\t\t\tfinal OsmandSettings.CommonPreference<Boolean> shouldUpdatePreference =\n\t\t\t\t\tpreferenceLiveUpdatesOn(item, fragment.getSettings());\n\t\t\tIncrementalChangesManager changesManager = context.getResourceManager().getChangesManager();\n\t\t\tfinal String fileNameWithoutExtension =\n\t\t\t\t\tAlgorithms.getFileNameWithoutExtension(new File(item.getFileName()));\n\n\t\t\tnameTextView.setText(getNameToDisplay(item, fragment.getMyActivity()));\n\t\t\tAbsListView.LayoutParams layoutParams = (AbsListView.LayoutParams) view.getLayoutParams();\n\t\t\tif (shouldUpdatePreference.get()) {\n\t\t\t\tfinal Integer frequencyId = preferenceUpdateFrequency(item, fragment.getSettings()).get();\n\t\t\t\tfinal Integer timeOfDateToUpdateId = preferenceTimeOfDayToUpdate(item, fragment.getSettings()).get();\n\t\t\t\tfinal UpdateFrequency frequency = UpdateFrequency.values()[frequencyId];\n\t\t\t\tfinal TimeOfDay timeOfDay = TimeOfDay.values()[timeOfDateToUpdateId];\n\t\t\t\tsubheaderTextView.setVisibility(View.VISIBLE);\n\t\t\t\tString subheaderText = fragment.getString(frequency.getLocalizedId());\n\t\t\t\tif (frequency != UpdateFrequency.HOURLY) {\n\t\t\t\t\tsubheaderText += \" \u2022 \" + fragment.getString(timeOfDay.getLocalizedId());\n\t\t\t\t}\n\t\t\t\tsubheaderTextView.setText(subheaderText);\n\t\t\t\tsubheaderTextView.setTextColor(fragment.getActivity().getResources()\n\t\t\t\t\t\t.getColor(R.color.osmand_orange));\n\t\t\t\ticon.setImageDrawable(context.getIconsCache().getIcon(R.drawable.ic_map, R.color.osmand_orange));\n\t\t\t\toptions.setImageDrawable(getSecondaryColorPaintedIcon(R.drawable.ic_overflow_menu_white));\n\t\t\t\tlayoutParams.height = (int) dpToPx(view.getContext(), UPDATES_ENABLED_ITEM_HEIGHT);\n\t\t\t} else {\n\t\t\t\tsubheaderTextView.setVisibility(View.GONE);\n\t\t\t\ticon.setImageDrawable(getSecondaryColorPaintedIcon(R.drawable.ic_map));\n\t\t\t\toptions.setImageDrawable(getSecondaryColorPaintedIcon(R.drawable.ic_action_plus));\n\t\t\t\tlayoutParams.height = (int) dpToPx(view.getContext(), UPDATES_DISABLED_ITEM_HEIGHT);\n\t\t\t}\n\t\t\tview.setLayoutParams(layoutParams);\n\n\t\t\tfinal long timestamp = changesManager.getTimestamp(fileNameWithoutExtension);\n\t\t\tfinal long lastCheck = preferenceLastCheck(item, fragment.getSettings()).get();\n\t\t\tString lastCheckString = formatDateTime(fragment.getActivity(),\n\t\t\t\t\tlastCheck != DEFAULT_LAST_CHECK ? lastCheck : timestamp);\n\t\t\tdescriptionTextView.setText(context.getString(R.string.last_update, lastCheckString));\n\n\t\t\tfinal View.OnClickListener clickListener = new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\tfinal FragmentManager fragmentManager = fragment.getChildFragmentManager();\n\t\t\t\t\tLiveUpdatesSettingsDialogFragment.createInstance(item).show(fragmentManager, \"settings\");\n\t\t\t\t}\n\t\t\t};\n\t\t\toptions.setOnClickListener(clickListener);\n\t\t\tview.setOnClickListener(clickListener);\n\t\t}","commit_id":"03a93db61e574b059320d0e4d61d9ebf70e2dd66","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@NonNull\n\t@Override\n\tpublic Dialog onCreateDialog(Bundle savedInstanceState) {\n\t\tAlertDialog.Builder builder = new AlertDialog.Builder(getActivity());\n\t\tfinal LocalIndexInfo localIndexInfo = getArguments().getParcelable(LOCAL_INDEX);\n\n\t\tView view = LayoutInflater.from(getActivity())\n\t\t\t\t.inflate(R.layout.dialog_live_updates_item_settings, null);\n\t\tfinal TextView regionNameTextView = (TextView) view.findViewById(R.id.regionNameTextView);\n\t\tfinal TextView lastMapChangeTextView = (TextView) view.findViewById(R.id.lastMapChangeTextView);\n\t\tfinal TextView lastUpdateTextView = (TextView) view.findViewById(R.id.lastUpdateTextView);\n\t\tfinal SwitchCompat liveUpdatesSwitch = (SwitchCompat) view.findViewById(R.id.liveUpdatesSwitch);\n\t\tfinal CheckBox downloadOverWiFiCheckBox = (CheckBox) view.findViewById(R.id.downloadOverWiFiSwitch);\n\t\tfinal Spinner updateFrequencySpinner = (Spinner) view.findViewById(R.id.updateFrequencySpinner);\n\t\tfinal Spinner updateTimesOfDaySpinner = (Spinner) view.findViewById(R.id.updateTimesOfDaySpinner);\n\t\tfinal TextView updateTimesOfDayTextView = (TextView) view.findViewById(R.id.updateTimesOfDayLabel);\n\t\tfinal TextView sizeTextView = (TextView) view.findViewById(R.id.sizeTextView);\n\t\tfinal Button removeUpdatesButton = (Button) view.findViewById(R.id.removeUpdatesButton);\n\n\t\tregionNameTextView.setText(getNameToDisplay(localIndexInfo, getMyActivity()));\n\t\tfinal String fileNameWithoutExtension =\n\t\t\t\tAlgorithms.getFileNameWithoutExtension(new File(localIndexInfo.getFileName()));\n\t\tfinal IncrementalChangesManager changesManager = getMyApplication().getResourceManager().getChangesManager();\n\t\tfinal long timestamp = changesManager.getTimestamp(fileNameWithoutExtension);\n\t\tString lastUpdateDate = formatDateTime(getActivity(), timestamp);\n\t\tfinal long lastCheck = preferenceLastCheck(localIndexInfo, getSettings()).get();\n\t\tString lastCheckDate = formatDateTime(getActivity(), lastCheck != DEFAULT_LAST_CHECK\n\t\t\t\t? lastCheck : timestamp);\n\t\tlastMapChangeTextView.setText(getString(R.string.last_map_change, lastUpdateDate));\n\t\tlastUpdateTextView.setText(getString(R.string.last_update, lastCheckDate));\n\n\t\tfinal OsmandSettings.CommonPreference<Boolean> liveUpdatePreference =\n\t\t\t\tpreferenceForLocalIndex(localIndexInfo, getSettings());\n\t\tfinal OsmandSettings.CommonPreference<Boolean> downloadViaWiFiPreference =\n\t\t\t\tpreferenceDownloadViaWiFi(localIndexInfo, getSettings());\n\t\tfinal OsmandSettings.CommonPreference<Integer> updateFrequencyPreference =\n\t\t\t\tpreferenceUpdateFrequency(localIndexInfo, getSettings());\n\t\tfinal OsmandSettings.CommonPreference<Integer> timeOfDayPreference =\n\t\t\t\tpreferenceTimeOfDayToUpdate(localIndexInfo, getSettings());\n\n\t\tdownloadOverWiFiCheckBox.setChecked(!liveUpdatePreference.get() || downloadViaWiFiPreference.get());\n\n\t\tupdateSize(fileNameWithoutExtension, changesManager, sizeTextView);\n\n\t\tupdateFrequencySpinner.setSelection(updateFrequencyPreference.get());\n\t\tupdateFrequencySpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n\t\t\t@Override\n\t\t\tpublic void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\t\t\t\tUpdateFrequency updateFrequency = UpdateFrequency.values()[position];\n\t\t\t\tswitch (updateFrequency) {\n\t\t\t\t\tcase HOURLY:\n\t\t\t\t\t\tupdateTimesOfDaySpinner.setVisibility(View.GONE);\n\t\t\t\t\t\tupdateTimesOfDayTextView.setVisibility(View.GONE);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase DAILY:\n\t\t\t\t\tcase WEEKLY:\n\t\t\t\t\t\tupdateTimesOfDaySpinner.setVisibility(View.VISIBLE);\n\t\t\t\t\t\tupdateTimesOfDayTextView.setVisibility(View.VISIBLE);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onNothingSelected(AdapterView<?> parent) {\n\n\t\t\t}\n\t\t});\n\t\tremoveUpdatesButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tchangesManager.deleteUpdates(fileNameWithoutExtension);\n\t\t\t\tgetLiveUpdatesFragment().notifyLiveUpdatesChanged();\n\t\t\t\tupdateSize(fileNameWithoutExtension, changesManager, sizeTextView);\n\t\t\t}\n\t\t});\n\n\t\tbuilder.setView(view)\n\t\t\t\t.setPositiveButton(R.string.shared_string_ok, new DialogInterface.OnClickListener() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\t\tif (liveUpdatePreference.get() != liveUpdatesSwitch.isChecked()) {\n\t\t\t\t\t\t\tliveUpdatePreference.set(liveUpdatesSwitch.isChecked());\n\t\t\t\t\t\t\tif (liveUpdatesSwitch.isChecked()) {\n\t\t\t\t\t\t\t\trunLiveUpdate(localIndexInfo);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdownloadViaWiFiPreference.set(downloadOverWiFiCheckBox.isChecked());\n\n\t\t\t\t\t\tfinal int updateFrequencyInt = updateFrequencySpinner.getSelectedItemPosition();\n\t\t\t\t\t\tupdateFrequencyPreference.set(updateFrequencyInt);\n\n\t\t\t\t\t\tAlarmManager alarmMgr = (AlarmManager) getActivity()\n\t\t\t\t\t\t\t\t.getSystemService(Context.ALARM_SERVICE);\n\t\t\t\t\t\tPendingIntent alarmIntent = getPendingIntent(getActivity(), localIndexInfo);\n\n\t\t\t\t\t\tfinal int timeOfDayInt = updateTimesOfDaySpinner.getSelectedItemPosition();\n\t\t\t\t\t\ttimeOfDayPreference.set(timeOfDayInt);\n\n\t\t\t\t\t\tif (liveUpdatesSwitch.isChecked() && getSettings().IS_LIVE_UPDATES_ON.get()) {\n\t\t\t\t\t\t\tUpdateFrequency updateFrequency = UpdateFrequency.values()[updateFrequencyInt];\n\t\t\t\t\t\t\tTimeOfDay timeOfDayToUpdate = TimeOfDay.values()[timeOfDayInt];\n\t\t\t\t\t\t\tsetAlarmForPendingIntent(alarmIntent, alarmMgr, updateFrequency, timeOfDayToUpdate);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\talarmMgr.cancel(alarmIntent);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tgetLiveUpdatesFragment().notifyLiveUpdatesChanged();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.setNegativeButton(R.string.shared_string_cancel, null)\n\t\t\t\t.setNeutralButton(R.string.update_now, new DialogInterface.OnClickListener() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\t\trunLiveUpdate(localIndexInfo);\n\t\t\t\t\t\tupdateSize(fileNameWithoutExtension, changesManager, sizeTextView);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\treturn builder.create();\n\t}","id":46994,"modified_method":"@NonNull\n\t@Override\n\tpublic Dialog onCreateDialog(Bundle savedInstanceState) {\n\t\tAlertDialog.Builder builder = new AlertDialog.Builder(getActivity());\n\t\tfinal LocalIndexInfo localIndexInfo = getArguments().getParcelable(LOCAL_INDEX);\n\n\t\tView view = LayoutInflater.from(getActivity())\n\t\t\t\t.inflate(R.layout.dialog_live_updates_item_settings, null);\n\t\tfinal TextView regionNameTextView = (TextView) view.findViewById(R.id.regionNameTextView);\n\t\tfinal TextView lastMapChangeTextView = (TextView) view.findViewById(R.id.lastMapChangeTextView);\n\t\tfinal TextView lastUpdateTextView = (TextView) view.findViewById(R.id.lastUpdateTextView);\n\t\tfinal SwitchCompat liveUpdatesSwitch = (SwitchCompat) view.findViewById(R.id.liveUpdatesSwitch);\n\t\tfinal CheckBox downloadOverWiFiCheckBox = (CheckBox) view.findViewById(R.id.downloadOverWiFiSwitch);\n\t\tfinal Spinner updateFrequencySpinner = (Spinner) view.findViewById(R.id.updateFrequencySpinner);\n\t\tfinal Spinner updateTimesOfDaySpinner = (Spinner) view.findViewById(R.id.updateTimesOfDaySpinner);\n\t\tfinal View updateTimesOfDayList = view.findViewById(R.id.updateTimesOfDayList);\n\t\tfinal TextView sizeTextView = (TextView) view.findViewById(R.id.sizeTextView);\n\t\tfinal Button removeUpdatesButton = (Button) view.findViewById(R.id.removeUpdatesButton);\n\n\t\tregionNameTextView.setText(getNameToDisplay(localIndexInfo, getMyActivity()));\n\t\tfinal String fileNameWithoutExtension =\n\t\t\t\tAlgorithms.getFileNameWithoutExtension(new File(localIndexInfo.getFileName()));\n\t\tfinal IncrementalChangesManager changesManager = getMyApplication().getResourceManager().getChangesManager();\n\t\tfinal long timestamp = changesManager.getTimestamp(fileNameWithoutExtension);\n\t\tString lastUpdateDate = formatDateTime(getActivity(), timestamp);\n\t\tfinal long lastCheck = preferenceLastCheck(localIndexInfo, getSettings()).get();\n\t\tString lastCheckString = formatDateTime(getActivity(), lastCheck != DEFAULT_LAST_CHECK\n\t\t\t\t? lastCheck : timestamp);\n\t\tlastMapChangeTextView.setText(getString(R.string.last_map_change, lastUpdateDate));\n\t\tlastUpdateTextView.setText(getString(R.string.last_update, lastCheckString));\n\n\t\tfinal OsmandSettings.CommonPreference<Boolean> liveUpdatePreference =\n\t\t\t\tpreferenceForLocalIndex(localIndexInfo, getSettings());\n\t\tfinal OsmandSettings.CommonPreference<Boolean> downloadViaWiFiPreference =\n\t\t\t\tpreferenceDownloadViaWiFi(localIndexInfo, getSettings());\n\t\tfinal OsmandSettings.CommonPreference<Integer> updateFrequencyPreference =\n\t\t\t\tpreferenceUpdateFrequency(localIndexInfo, getSettings());\n\t\tfinal OsmandSettings.CommonPreference<Integer> timeOfDayPreference =\n\t\t\t\tpreferenceTimeOfDayToUpdate(localIndexInfo, getSettings());\n\n\t\tdownloadOverWiFiCheckBox.setChecked(!liveUpdatePreference.get() || downloadViaWiFiPreference.get());\n\n\t\tupdateSize(fileNameWithoutExtension, changesManager, sizeTextView);\n\n\t\tupdateTimesOfDaySpinner.setAdapter(new ArrayAdapter<String>(getActivity(),\n\t\t\t\tR.layout.action_spinner_item,\n\t\t\t\tgetResources().getStringArray(R.array.update_times_of_day)));\n\n\t\tupdateFrequencySpinner.setAdapter(new ArrayAdapter<String>(getActivity(),\n\t\t\t\tR.layout.action_spinner_item,\n\t\t\t\tgetResources().getStringArray(R.array.update_frequencies_array)));\n\t\tupdateFrequencySpinner.setSelection(updateFrequencyPreference.get());\n\t\tupdateFrequencySpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n\t\t\t@Override\n\t\t\tpublic void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\t\t\t\tUpdateFrequency updateFrequency = UpdateFrequency.values()[position];\n\t\t\t\tswitch (updateFrequency) {\n\t\t\t\t\tcase HOURLY:\n\t\t\t\t\t\tupdateTimesOfDayList.setVisibility(View.GONE);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase DAILY:\n\t\t\t\t\tcase WEEKLY:\n\t\t\t\t\t\tupdateTimesOfDayList.setVisibility(View.VISIBLE);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onNothingSelected(AdapterView<?> parent) {\n\n\t\t\t}\n\t\t});\n\t\tremoveUpdatesButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tchangesManager.deleteUpdates(fileNameWithoutExtension);\n\t\t\t\tgetLiveUpdatesFragment().notifyLiveUpdatesChanged();\n\t\t\t\tupdateSize(fileNameWithoutExtension, changesManager, sizeTextView);\n\t\t\t}\n\t\t});\n\n\t\tbuilder.setView(view)\n\t\t\t\t.setPositiveButton(R.string.shared_string_ok, new DialogInterface.OnClickListener() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\t\tif (liveUpdatePreference.get() != liveUpdatesSwitch.isChecked()) {\n\t\t\t\t\t\t\tliveUpdatePreference.set(liveUpdatesSwitch.isChecked());\n\t\t\t\t\t\t\tif (liveUpdatesSwitch.isChecked()) {\n\t\t\t\t\t\t\t\trunLiveUpdate(localIndexInfo);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdownloadViaWiFiPreference.set(downloadOverWiFiCheckBox.isChecked());\n\n\t\t\t\t\t\tfinal int updateFrequencyInt = updateFrequencySpinner.getSelectedItemPosition();\n\t\t\t\t\t\tupdateFrequencyPreference.set(updateFrequencyInt);\n\n\t\t\t\t\t\tAlarmManager alarmMgr = (AlarmManager) getActivity()\n\t\t\t\t\t\t\t\t.getSystemService(Context.ALARM_SERVICE);\n\t\t\t\t\t\tPendingIntent alarmIntent = getPendingIntent(getActivity(), localIndexInfo);\n\n\t\t\t\t\t\tfinal int timeOfDayInt = updateTimesOfDaySpinner.getSelectedItemPosition();\n\t\t\t\t\t\ttimeOfDayPreference.set(timeOfDayInt);\n\n\t\t\t\t\t\tif (liveUpdatesSwitch.isChecked() && getSettings().IS_LIVE_UPDATES_ON.get()) {\n\t\t\t\t\t\t\tUpdateFrequency updateFrequency = UpdateFrequency.values()[updateFrequencyInt];\n\t\t\t\t\t\t\tTimeOfDay timeOfDayToUpdate = TimeOfDay.values()[timeOfDayInt];\n\t\t\t\t\t\t\tsetAlarmForPendingIntent(alarmIntent, alarmMgr, updateFrequency, timeOfDayToUpdate);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\talarmMgr.cancel(alarmIntent);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tgetLiveUpdatesFragment().notifyLiveUpdatesChanged();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.setNegativeButton(R.string.shared_string_cancel, null)\n\t\t\t\t.setNeutralButton(R.string.update_now, new DialogInterface.OnClickListener() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n\t\t\t\t\t\trunLiveUpdate(localIndexInfo);\n\t\t\t\t\t\tupdateSize(fileNameWithoutExtension, changesManager, sizeTextView);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\treturn builder.create();\n\t}","commit_id":"03a93db61e574b059320d0e4d61d9ebf70e2dd66","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public void init(View wnd) {\n\t\t\ttitle = (FontFitTextView) wnd.findViewById(R.id.title_text);\n\t\t\ttitle.setText(titleString);\n\t\t\tButton backButton = (Button) wnd.findViewById(R.id.back_button);\n\t\t\tbackButton.setContentDescription(wnd.getContext().getString(R.string.close));\n\t\t\tbackButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\tbackPressed();\n\t\t\t\t}\n\t\t\t});\n\t\t\tImageView titleImg = (ImageView) wnd.findViewById(R.id.title_image);\n\t\t\ttitleImg.setImageResource(titleImageRes);\n\t\t\tif(click != null) {\n\t\t\t\ttitleImg.setOnClickListener(click);\n\t\t\t}\n\t\t}","id":46995,"modified_method":"public void init(View wnd) {\n\t\t\ttitle = (FontFitTextView) wnd.findViewById(R.id.title_text);\n\t\t\ttitle.setText(titleString);\n\t\t\tView backButton = wnd.findViewById(R.id.back_button);\n\t\t\tbackButton.setContentDescription(wnd.getContext().getString(R.string.close));\n\t\t\tbackButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onClick(View v) {\n\t\t\t\t\tbackPressed();\n\t\t\t\t}\n\t\t\t});\n\t\t\tImageView titleImg = (ImageView) wnd.findViewById(R.id.title_image);\n\t\t\ttitleImg.setImageResource(titleImageRes);\n\t\t\tif(click != null) {\n\t\t\t\ttitleImg.setOnClickListener(click);\n\t\t\t}\n\t\t}","commit_id":"9b1883212baadb4ee868712a86ac9b004011d0ee","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsettings = ((OsmandApplication) getApplication()).getSettings();\n\t\tif(downloadListIndexThread == null) {\n\t\t\tdownloadListIndexThread = new DownloadIndexListThread(this);\n\t\t}\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n\t\tsetContentView(R.layout.download_index);\n\t\t// recreation upon rotation is prevented in manifest file\n\t\tButton b = (Button) findViewById(R.id.search_back_button);\n\t\tb.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tfinish();\t\t\t\t\n\t\t\t}\n\t\t});\n\t\t\t\t\n\t\tdownloadFileHelper = new DownloadFileHelper(getClientContext());\n\t\tfindViewById(R.id.DownloadButton).setOnClickListener(new View.OnClickListener(){\n\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tdownloadFilesCheckFreeVersion(flattenDownloadEntries());\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t    filterText = (EditText) findViewById(R.id.search_box);\n\t    textWatcher = new TextWatcher() {\n\t        @Override\n\t\t\tpublic void afterTextChanged(Editable s) {\n\t        }\n\t        @Override\n\t\t\tpublic void beforeTextChanged(CharSequence s, int start, int count,\n\t                int after) {\n\t        }\n\n\t        @Override\n\t\t\tpublic void onTextChanged(CharSequence s, int start, int before,\n\t                int count) {\n\t        \tDownloadIndexAdapter adapter = ((DownloadIndexAdapter)getExpandableListAdapter());\n\t\t\t\tif(adapter != null){\n\t\t\t\t\tadapter.getFilter().filter(s);\n\t\t\t\t}\n\t        }\n\n\t    };\n\t\tfilterText.addTextChangedListener(textWatcher);\n\t\tfinal Intent intent = getIntent();\n\t\tif (intent != null && intent.getExtras() != null) {\n\t\t\tfinal String filter = intent.getExtras().getString(FILTER_KEY);\n\t\t\tif (filter != null) {\n\t\t\t\tfilterText.setText(filter);\n\t\t\t}\n\t\t}\n\t\tif (downloadListIndexThread.getCachedIndexFiles() != null && downloadListIndexThread.isDownloadedFromInternet()) {\n\t\t\tDownloadIndexAdapter adapter = new DownloadIndexAdapter(this, getFilteredByType());\n\t\t\tsetListAdapter(adapter);\n\t\t} else {\n\t\t\tdownloadIndexList();\n\t\t}\n\t\tif(Version.isFreeVersion(getMyApplication()) && settings.checkFreeDownloadsNumberZero()){\n\t\t\tBuilder msg = new AlertDialog.Builder(this);\n\t\t\tmsg.setTitle(R.string.free_version_title);\n\t\t\tmsg.setMessage(getString(R.string.free_version_message, MAXIMUM_AVAILABLE_FREE_DOWNLOADS+\"\", \"\"));\n\t\t\tmsg.setPositiveButton(R.string.default_buttons_ok, null);\n\t\t\tmsg.show();\n\t\t}\n\t\t\n\t\tSpinner spinner = (Spinner) findViewById(R.id.SpinnerLocation);\n\t\tfinal DownloadActivityType[] downloadTypes = getDownloadTypes();\n\t\tspinnerAdapter = new ArrayAdapter<String>(this, R.layout.my_spinner_text, \n\t\t\t\tnew ArrayList<String>(Arrays.asList(toString(downloadTypes)))\n\t\t\t\t) {\n\t\t\t@Override\n\t\t\tpublic View getDropDownView(int position, View convertView,\n\t\t\t\t\tViewGroup parent) {\n\t\t\t\tView dropDownView = super.getDropDownView(position,\n\t\t\t\t\t\tconvertView, parent);\n\t\t\t\tif (dropDownView instanceof TextView) {\n\t\t\t\t\t((TextView) dropDownView).setTextColor(getResources()\n\t\t\t\t\t\t\t.getColor(R.color.color_black));\n\t\t\t\t}\n\t\t\t\treturn dropDownView;\n\t\t\t}\n\t\t};\n\t\tspinnerAdapter.setDropDownViewResource(R.layout.my_spinner_text);\n\t\tspinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n\n\t\t\n\t\tspinner.setAdapter(spinnerAdapter);\n\t\tspinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n\t\t\t@Override\n\t\t\tpublic void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\t\t\t\tchangeType(downloadTypes[position]);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onNothingSelected(AdapterView<?> parent) {\n\t\t\t}\n\t\t});\n\t}","id":46996,"modified_method":"@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsettings = ((OsmandApplication) getApplication()).getSettings();\n\t\tif(downloadListIndexThread == null) {\n\t\t\tdownloadListIndexThread = new DownloadIndexListThread(this);\n\t\t}\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE);\n\t\tsetContentView(R.layout.download_index);\n\t\t// recreation upon rotation is prevented in manifest file\n\t\tView b = findViewById(R.id.search_back_button);\n\t\tb.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tfinish();\t\t\t\t\n\t\t\t}\n\t\t});\n\t\t\t\t\n\t\tdownloadFileHelper = new DownloadFileHelper(getClientContext());\n\t\tfindViewById(R.id.DownloadButton).setOnClickListener(new View.OnClickListener(){\n\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tdownloadFilesCheckFreeVersion(flattenDownloadEntries());\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t    filterText = (EditText) findViewById(R.id.search_box);\n\t    textWatcher = new TextWatcher() {\n\t        @Override\n\t\t\tpublic void afterTextChanged(Editable s) {\n\t        }\n\t        @Override\n\t\t\tpublic void beforeTextChanged(CharSequence s, int start, int count,\n\t                int after) {\n\t        }\n\n\t        @Override\n\t\t\tpublic void onTextChanged(CharSequence s, int start, int before,\n\t                int count) {\n\t        \tDownloadIndexAdapter adapter = ((DownloadIndexAdapter)getExpandableListAdapter());\n\t\t\t\tif(adapter != null){\n\t\t\t\t\tadapter.getFilter().filter(s);\n\t\t\t\t}\n\t        }\n\n\t    };\n\t\tfilterText.addTextChangedListener(textWatcher);\n\t\tfinal Intent intent = getIntent();\n\t\tif (intent != null && intent.getExtras() != null) {\n\t\t\tfinal String filter = intent.getExtras().getString(FILTER_KEY);\n\t\t\tif (filter != null) {\n\t\t\t\tfilterText.setText(filter);\n\t\t\t}\n\t\t}\n\t\tif (downloadListIndexThread.getCachedIndexFiles() != null && downloadListIndexThread.isDownloadedFromInternet()) {\n\t\t\tDownloadIndexAdapter adapter = new DownloadIndexAdapter(this, getFilteredByType());\n\t\t\tsetListAdapter(adapter);\n\t\t} else {\n\t\t\tdownloadIndexList();\n\t\t}\n\t\tif(Version.isFreeVersion(getMyApplication()) && settings.checkFreeDownloadsNumberZero()){\n\t\t\tBuilder msg = new AlertDialog.Builder(this);\n\t\t\tmsg.setTitle(R.string.free_version_title);\n\t\t\tmsg.setMessage(getString(R.string.free_version_message, MAXIMUM_AVAILABLE_FREE_DOWNLOADS+\"\", \"\"));\n\t\t\tmsg.setPositiveButton(R.string.default_buttons_ok, null);\n\t\t\tmsg.show();\n\t\t}\n\t\t\n\t\tSpinner spinner = (Spinner) findViewById(R.id.SpinnerLocation);\n\t\tfinal DownloadActivityType[] downloadTypes = getDownloadTypes();\n\t\tspinnerAdapter = new ArrayAdapter<String>(this, R.layout.my_spinner_text, \n\t\t\t\tnew ArrayList<String>(Arrays.asList(toString(downloadTypes)))\n\t\t\t\t) {\n\t\t\t@Override\n\t\t\tpublic View getDropDownView(int position, View convertView,\n\t\t\t\t\tViewGroup parent) {\n\t\t\t\tView dropDownView = super.getDropDownView(position,\n\t\t\t\t\t\tconvertView, parent);\n\t\t\t\tif (dropDownView instanceof TextView) {\n\t\t\t\t\t((TextView) dropDownView).setTextColor(getResources()\n\t\t\t\t\t\t\t.getColor(R.color.color_black));\n\t\t\t\t}\n\t\t\t\treturn dropDownView;\n\t\t\t}\n\t\t};\n\t\tspinnerAdapter.setDropDownViewResource(R.layout.my_spinner_text);\n\t\tspinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n\n\t\t\n\t\tspinner.setAdapter(spinnerAdapter);\n\t\tspinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n\t\t\t@Override\n\t\t\tpublic void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\t\t\t\tchangeType(downloadTypes[position]);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onNothingSelected(AdapterView<?> parent) {\n\t\t\t}\n\t\t});\n\t}","commit_id":"9b1883212baadb4ee868712a86ac9b004011d0ee","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE); \n\t\tsetContentView(R.layout.search_main);\n\t\tsettings = ((OsmandApplication) getApplication()).getSettings();\n\t\t\n\t\tButton backButton = (Button) findViewById(R.id.search_back_button);\n\t\tbackButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tSearchActivity.this.finish();\n\t\t\t}\n\t\t});\n\n\t\tfinal TextView tabinfo  = (TextView) findViewById(R.id.textViewADesc);\n\t\tspinner = (Spinner) findViewById(R.id.SpinnerLocation);\n\t\tspinnerAdapter = new ArrayAdapter<String>(this, R.layout.my_spinner_text, \n\t\t\t\tnew ArrayList<String>(Arrays.asList(new String[]{\n\t\t\t\t\t\tgetString(R.string.search_position_undefined),\n\t\t\t\t\t\tgetString(R.string.search_position_current_location),\n\t\t\t\t\t\tgetString(R.string.search_position_map_view),\n\t\t\t\t\t\tgetString(R.string.search_position_favorites),\n\t\t\t\t\t\tgetString(R.string.search_position_address)\n\t\t\t\t\t}))\n\t\t\t\t) {\n\t\t\t@Override\n\t\t\tpublic View getDropDownView(int position, View convertView,\n\t\t\t\t\tViewGroup parent) {\n\t\t\t\tView dropDownView = super.getDropDownView(position,\n\t\t\t\t\t\tconvertView, parent);\n\t\t\t\tif (dropDownView instanceof TextView) {\n\t\t\t\t\t((TextView) dropDownView).setTextColor(getResources()\n\t\t\t\t\t\t\t.getColor(R.color.color_black));\n\t\t\t\t}\n\t\t\t\treturn dropDownView;\n\t\t\t}\n\t\t};\n\t\tspinnerAdapter.setDropDownViewResource(R.layout.my_spinner_text);\n\t\t\n\t\t\n\t\tTabWidget tabs = (TabWidget) findViewById(android.R.id.tabs);\n\t\ttabs.setBackgroundResource(R.drawable.tab_icon_background);\n\t\tTabHost host = getTabHost();\n\t\thost.addTab(host.newTabSpec(SEARCH_POI).setIndicator(getTabIndicator(R.drawable.tab_search_poi_icon, R.string.poi)).\n\t\t\t\tsetContent(new Intent(this, SearchPoiFilterActivity.class))); //$NON-NLS-1$\n\t\t\n\t\taddressSpec = host.newTabSpec(SEARCH_ADDRESS).\n                    setIndicator(getTabIndicator(R.drawable.tab_search_address_icon, R.string.address));\n\t\t\n\t\tsetAddressSpecContent();\n\n\t\thost.addTab(addressSpec);\n\t\thost.addTab(host.newTabSpec(SEARCH_LOCATION).setIndicator(getTabIndicator(R.drawable.tab_search_location_icon, R.string.search_tabs_location)).setContent(createIntent(NavigatePointActivity.class))); //$NON-NLS-1$\n\t\tTabSpec transportTab = host.newTabSpec(SEARCH_TRANSPORT).setIndicator(getTabIndicator(R.drawable.tab_search_transport_icon, R.string.transport)).setContent(createIntent(SearchTransportActivity.class));\n\t\thost.addTab(transportTab); //$NON-NLS-1$\n\t\thost.addTab(host.newTabSpec(SEARCH_FAVORITES).setIndicator(getTabIndicator(R.drawable.tab_search_favorites_icon, R.string.favorite)).setContent(createIntent(FavouritesListActivity.class))); //$NON-NLS-1$\n\t\thost.addTab(host.newTabSpec(SEARCH_HISTORY).setIndicator(getTabIndicator(R.drawable.tab_search_history_icon, R.string.history)).setContent(createIntent(SearchHistoryActivity.class))); //$NON-NLS-1$\n\t\thost.setCurrentTab(POI_TAB_INDEX);\n\t\thost.setOnTabChangedListener(new OnTabChangeListener() {\n\t\t\t@Override\n\t\t\tpublic void onTabChanged(String tabId) {\n\t\t\t\tif (SEARCH_POI.equals(tabId)) {\n\t\t\t\t\ttabinfo.setText(R.string.poi_search_desc);\n\t\t\t\t} else\tif (SEARCH_ADDRESS.equals(tabId)) {\n\t\t\t\t\ttabinfo.setText(R.string.address_search_desc);\n\t\t\t\t} else\tif (SEARCH_LOCATION.equals(tabId)) {\n\t\t\t\t\ttabinfo.setText(R.string.navpoint_search_desc);\n\t\t\t\t} else\tif (SEARCH_TRANSPORT.equals(tabId)) {\n\t\t\t\t\ttabinfo.setText(R.string.transport_search_desc);\n\t\t\t\t} else\tif (SEARCH_FAVORITES.equals(tabId)) {\n\t\t\t\t\ttabinfo.setText(R.string.favourites_search_desc);\n\t\t\t\t} else\tif (SEARCH_HISTORY.equals(tabId)) {\n\t\t\t\t\ttabinfo.setText(R.string.history_search_desc);\n\t\t\t\t} \n\t\t\t}\n\t\t});\n\t\t\n\t\t\n\t\tspinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n\t\tspinner.setAdapter(spinnerAdapter);\n\t\tspinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n\t\t\t@Override\n\t\t\tpublic void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\t\t\t\tif (position != 0) {\n\t\t\t\t\tif (position == POSITION_CURRENT_LOCATION) {\n\t\t\t\t\t\tnet.osmand.Location loc = getLocationProvider().getLastKnownLocation();\n\t\t\t\t\t\tif(loc != null && System.currentTimeMillis() - loc.getTime() < 10000) {\n\t\t\t\t\t\t\tupdateLocation(loc);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstartSearchCurrentLocation();\n\t\t\t\t\t\t\tsearchAroundCurrentLocation = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsearchAroundCurrentLocation = false;\n\t\t\t\t\t\tendSearchCurrentLocation();\n\t\t\t\t\t\tif (position == POSITION_LAST_MAP_VIEW) {\n\t\t\t\t\t\t\tupdateSearchPoint(settings.getLastKnownMapLocation(), getString(R.string.search_position_fixed), true);\n\t\t\t\t\t\t} else if (position == POSITION_FAVORITES) {\n\t\t\t\t\t\t\tIntent intent = new Intent(SearchActivity.this, FavouritesListActivity.class);\n\t\t\t\t\t\t\tintent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);\n\t\t\t\t\t\t\tintent.putExtra(FavouritesListActivity.SELECT_FAVORITE_POINT_INTENT_KEY, (Serializable) null);\n\t\t\t\t\t\t\tstartActivityForResult(intent, REQUEST_FAVORITE_SELECT);\n\t\t\t\t\t\t\tspinner.setSelection(0);\n\t\t\t\t\t\t} else if (position == POSITION_ADDRESS) {\n\t\t\t\t\t\t\tIntent intent = new Intent(SearchActivity.this, SearchAddressActivity.class);\n\t\t\t\t\t\t\tintent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);\n\t\t\t\t\t\t\tintent.putExtra(SearchAddressActivity.SELECT_ADDRESS_POINT_INTENT_KEY, (String) null);\n\t\t\t\t\t\t\tstartActivityForResult(intent, REQUEST_ADDRESS_SELECT);\n\t\t\t\t\t\t\tspinner.setSelection(0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onNothingSelected(AdapterView<?> parent) {\n\t\t\t}\n\t\t});\n\t}","id":46997,"modified_method":"@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\tsuper.onCreate(savedInstanceState);\n\t\trequestWindowFeature(Window.FEATURE_NO_TITLE); \n\t\tsetContentView(R.layout.search_main);\n\t\tsettings = ((OsmandApplication) getApplication()).getSettings();\n\t\t\n\t\tView backButton = (View) findViewById(R.id.search_back_button);\n\t\tbackButton.setOnClickListener(new View.OnClickListener() {\n\t\t\t@Override\n\t\t\tpublic void onClick(View v) {\n\t\t\t\tSearchActivity.this.finish();\n\t\t\t}\n\t\t});\n\n\t\tfinal TextView tabinfo  = (TextView) findViewById(R.id.textViewADesc);\n\t\tspinner = (Spinner) findViewById(R.id.SpinnerLocation);\n\t\tspinnerAdapter = new ArrayAdapter<String>(this, R.layout.my_spinner_text, \n\t\t\t\tnew ArrayList<String>(Arrays.asList(new String[]{\n\t\t\t\t\t\tgetString(R.string.search_position_undefined),\n\t\t\t\t\t\tgetString(R.string.search_position_current_location),\n\t\t\t\t\t\tgetString(R.string.search_position_map_view),\n\t\t\t\t\t\tgetString(R.string.search_position_favorites),\n\t\t\t\t\t\tgetString(R.string.search_position_address)\n\t\t\t\t\t}))\n\t\t\t\t) {\n\t\t\t@Override\n\t\t\tpublic View getDropDownView(int position, View convertView,\n\t\t\t\t\tViewGroup parent) {\n\t\t\t\tView dropDownView = super.getDropDownView(position,\n\t\t\t\t\t\tconvertView, parent);\n\t\t\t\tif (dropDownView instanceof TextView) {\n\t\t\t\t\t((TextView) dropDownView).setTextColor(getResources()\n\t\t\t\t\t\t\t.getColor(R.color.color_black));\n\t\t\t\t}\n\t\t\t\treturn dropDownView;\n\t\t\t}\n\t\t};\n\t\tspinnerAdapter.setDropDownViewResource(R.layout.my_spinner_text);\n\t\t\n\t\t\n\t\tTabWidget tabs = (TabWidget) findViewById(android.R.id.tabs);\n\t\ttabs.setBackgroundResource(R.drawable.tab_icon_background);\n\t\tTabHost host = getTabHost();\n\t\thost.addTab(host.newTabSpec(SEARCH_POI).setIndicator(getTabIndicator(R.drawable.tab_search_poi_icon, R.string.poi)).\n\t\t\t\tsetContent(new Intent(this, SearchPoiFilterActivity.class))); //$NON-NLS-1$\n\t\t\n\t\taddressSpec = host.newTabSpec(SEARCH_ADDRESS).\n                    setIndicator(getTabIndicator(R.drawable.tab_search_address_icon, R.string.address));\n\t\t\n\t\tsetAddressSpecContent();\n\n\t\thost.addTab(addressSpec);\n\t\thost.addTab(host.newTabSpec(SEARCH_LOCATION).setIndicator(getTabIndicator(R.drawable.tab_search_location_icon, R.string.search_tabs_location)).setContent(createIntent(NavigatePointActivity.class))); //$NON-NLS-1$\n\t\tTabSpec transportTab = host.newTabSpec(SEARCH_TRANSPORT).setIndicator(getTabIndicator(R.drawable.tab_search_transport_icon, R.string.transport)).setContent(createIntent(SearchTransportActivity.class));\n\t\thost.addTab(transportTab); //$NON-NLS-1$\n\t\thost.addTab(host.newTabSpec(SEARCH_FAVORITES).setIndicator(getTabIndicator(R.drawable.tab_search_favorites_icon, R.string.favorite)).setContent(createIntent(FavouritesListActivity.class))); //$NON-NLS-1$\n\t\thost.addTab(host.newTabSpec(SEARCH_HISTORY).setIndicator(getTabIndicator(R.drawable.tab_search_history_icon, R.string.history)).setContent(createIntent(SearchHistoryActivity.class))); //$NON-NLS-1$\n\t\thost.setCurrentTab(POI_TAB_INDEX);\n\t\thost.setOnTabChangedListener(new OnTabChangeListener() {\n\t\t\t@Override\n\t\t\tpublic void onTabChanged(String tabId) {\n\t\t\t\tif (SEARCH_POI.equals(tabId)) {\n\t\t\t\t\ttabinfo.setText(R.string.poi_search_desc);\n\t\t\t\t} else\tif (SEARCH_ADDRESS.equals(tabId)) {\n\t\t\t\t\ttabinfo.setText(R.string.address_search_desc);\n\t\t\t\t} else\tif (SEARCH_LOCATION.equals(tabId)) {\n\t\t\t\t\ttabinfo.setText(R.string.navpoint_search_desc);\n\t\t\t\t} else\tif (SEARCH_TRANSPORT.equals(tabId)) {\n\t\t\t\t\ttabinfo.setText(R.string.transport_search_desc);\n\t\t\t\t} else\tif (SEARCH_FAVORITES.equals(tabId)) {\n\t\t\t\t\ttabinfo.setText(R.string.favourites_search_desc);\n\t\t\t\t} else\tif (SEARCH_HISTORY.equals(tabId)) {\n\t\t\t\t\ttabinfo.setText(R.string.history_search_desc);\n\t\t\t\t} \n\t\t\t}\n\t\t});\n\t\t\n\t\t\n\t\tspinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\n\t\tspinner.setAdapter(spinnerAdapter);\n\t\tspinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\n\t\t\t@Override\n\t\t\tpublic void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\n\t\t\t\tif (position != 0) {\n\t\t\t\t\tif (position == POSITION_CURRENT_LOCATION) {\n\t\t\t\t\t\tnet.osmand.Location loc = getLocationProvider().getLastKnownLocation();\n\t\t\t\t\t\tif(loc != null && System.currentTimeMillis() - loc.getTime() < 10000) {\n\t\t\t\t\t\t\tupdateLocation(loc);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstartSearchCurrentLocation();\n\t\t\t\t\t\t\tsearchAroundCurrentLocation = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsearchAroundCurrentLocation = false;\n\t\t\t\t\t\tendSearchCurrentLocation();\n\t\t\t\t\t\tif (position == POSITION_LAST_MAP_VIEW) {\n\t\t\t\t\t\t\tupdateSearchPoint(settings.getLastKnownMapLocation(), getString(R.string.search_position_fixed), true);\n\t\t\t\t\t\t} else if (position == POSITION_FAVORITES) {\n\t\t\t\t\t\t\tIntent intent = new Intent(SearchActivity.this, FavouritesListActivity.class);\n\t\t\t\t\t\t\tintent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);\n\t\t\t\t\t\t\tintent.putExtra(FavouritesListActivity.SELECT_FAVORITE_POINT_INTENT_KEY, (Serializable) null);\n\t\t\t\t\t\t\tstartActivityForResult(intent, REQUEST_FAVORITE_SELECT);\n\t\t\t\t\t\t\tspinner.setSelection(0);\n\t\t\t\t\t\t} else if (position == POSITION_ADDRESS) {\n\t\t\t\t\t\t\tIntent intent = new Intent(SearchActivity.this, SearchAddressActivity.class);\n\t\t\t\t\t\t\tintent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);\n\t\t\t\t\t\t\tintent.putExtra(SearchAddressActivity.SELECT_ADDRESS_POINT_INTENT_KEY, (String) null);\n\t\t\t\t\t\t\tstartActivityForResult(intent, REQUEST_ADDRESS_SELECT);\n\t\t\t\t\t\t\tspinner.setSelection(0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onNothingSelected(AdapterView<?> parent) {\n\t\t\t}\n\t\t});\n\t}","commit_id":"9b1883212baadb4ee868712a86ac9b004011d0ee","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public void setName(String name) {\n\t\t\tthis.name = name;\n\t\t}","id":46998,"modified_method":"public boolean setName(String name) {\n\t\t\tint index = file.getAbsolutePath().lastIndexOf(\"/\") + 1;\n\t\t\tif (index < 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tFile directory = new File(file.getAbsolutePath().substring(0, index));\n\t\t\tFile to        = new File(directory, name.trim());\n\t\t\tif (file.renameTo(to)){\n\t\t\t\tfile = to;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}","commit_id":"80be3b8b1c66e134d4fece0278e89ccc7e4202fc","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public String getName() {\n\t\t\treturn name;\n\t\t}","id":46999,"modified_method":"public String getName() {\n\t\t\treturn file.getName();\n\t\t}","commit_id":"80be3b8b1c66e134d4fece0278e89ccc7e4202fc","url":"https://github.com/osmandapp/Osmand"}]