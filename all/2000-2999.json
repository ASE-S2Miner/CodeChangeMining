[{"original_method":"@Test\n        public void shouldBeUsable() {\n            PowerFilterEvent filterEvent = PowerFilterEvent.POWER_FILTER_INITIALIZED;\n            assertEquals(PowerFilterEvent.POWER_FILTER_INITIALIZED, filterEvent);\n        }","id":2000,"modified_method":"@Test\n        public void shouldBeUsable() {\n            PowerFilterEvent filterEvent = PowerFilterEvent.POWER_FILTER_CONFIGURED;\n            assertEquals(PowerFilterEvent.POWER_FILTER_CONFIGURED, filterEvent);\n        }","commit_id":"8cc6b74007e4ec535a300638d73e5ce907773756","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Test\n        public void shouldDoFilter() throws IOException, ServletException {\n            List<FilterContext> filterContextList = new ArrayList<FilterContext>();\n            Filter mockedFilter = mock(Filter.class);\n            FilterContext mockedFilterContext = mock(FilterContext.class);\n            ClassLoader mockedClassLoader = mock(ClassLoader.class);\n            when(mockedFilterContext.getFilter()).thenReturn(mockedFilter);\n            when(mockedFilterContext.getFilterClassLoader()).thenReturn(mockedClassLoader);\n            filterContextList.add(mockedFilterContext);\n            FilterChain mockedFilterChain = mock(FilterChain.class);\n\n            PowerFilterChain powerFilterChainState = new PowerFilterChain(filterContextList, mockedFilterChain, mock(ServletContext.class));\n\n            HttpServletRequest mockedServletRequest = mock(HttpServletRequest.class);\n            HttpServletResponse mockedServletResponse = mock(HttpServletResponse.class);\n\n            when(mockedServletRequest.getRequestURL()).thenReturn(new StringBuffer());\n\n            powerFilterChainState.doFilter(mockedServletRequest, mockedServletResponse);\n\n            powerFilterChainState.doFilter(mockedServletRequest, mockedServletResponse);\n        }","id":2001,"modified_method":"@Test\n        public void shouldDoFilter() throws IOException, ServletException {\n            List<FilterContext> filterContextList = new ArrayList<FilterContext>();\n            Filter mockedFilter = mock(Filter.class);\n            FilterContext mockedFilterContext = mock(FilterContext.class);\n            ClassLoader mockedClassLoader = mock(ClassLoader.class);\n            when(mockedFilterContext.getFilter()).thenReturn(mockedFilter);\n            when(mockedFilterContext.getFilterClassLoader()).thenReturn(mockedClassLoader);\n            filterContextList.add(mockedFilterContext);\n            FilterChain mockedFilterChain = mock(FilterChain.class);\n\n            PowerFilterChain powerFilterChainState = new PowerFilterChain(filterContextList, mockedFilterChain, mock(ServletContext.class), mock(ResourceMonitor.class));\n\n            HttpServletRequest mockedServletRequest = mock(HttpServletRequest.class);\n            HttpServletResponse mockedServletResponse = mock(HttpServletResponse.class);\n\n            when(mockedServletRequest.getRequestURL()).thenReturn(new StringBuffer());\n\n            powerFilterChainState.doFilter(mockedServletRequest, mockedServletResponse);\n\n            powerFilterChainState.doFilter(mockedServletRequest, mockedServletResponse);\n        }","commit_id":"8cc6b74007e4ec535a300638d73e5ce907773756","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Override\n   public final void buildServerContext(JettyServerBuilder serverBuilder) throws Exception {\n      serverBuilder.addContextListener(PowerApiContextManager.class);\n      serverBuilder.addContextInitParameter(InitParameter.POWER_API_CONFIG_DIR.getParameterName(), \"/home/zinic/installed/etc/powerapi/dist-datastore\");\n      serverBuilder.addFilter(PowerFilter.class, \"/*\");\n      serverBuilder.addFilter(DistributedDatastoreFilter.class, \"/*\");\n      serverBuilder.addServlet(DummyServlet.class, \"/*\");\n   }","id":2002,"modified_method":"@Override\n   public final void buildServerContext(JettyServerBuilder serverBuilder) throws Exception {\n      serverBuilder.addContextListener(PowerApiContextManager.class);\n      serverBuilder.addContextInitParameter(InitParameter.POWER_API_CONFIG_DIR.getParameterName(), \"/home/zinic/ulocal/local/etc/powerapi/dist-datastore\");\n      serverBuilder.addFilter(PowerFilter.class, \"/*\");\n      serverBuilder.addServlet(DummyServlet.class, \"/*\");\n   }","commit_id":"8cc6b74007e4ec535a300638d73e5ce907773756","url":"https://github.com/rackerlabs/repose"},{"original_method":"@Test\n        public void shouldConvertWellFormedUUIDStrings() {\n            final byte[] expectedBytes = new byte[16];\n            \n            for (int i = 0; i < expectedBytes.length; i++) {\n                expectedBytes[i] = 1;\n            }\n            \n            final UUID uuid = UUIDHelper.bytesToUUID(expectedBytes);\n            System.out.println(uuid.toString());\n            \n            final byte[] actualBytes = UUIDHelper.stringToUUIDBytes(uuid.toString());\n            \n            assertTrue(new ByteArrayComparator(expectedBytes, actualBytes).arraysAreEqual());\n        }","id":2003,"modified_method":"@Test\n      public void shouldConvertWellFormedUUIDStrings() {\n         final byte[] expectedBytes = new byte[16];\n\n         for (int i = 0; i < expectedBytes.length; i++) {\n            expectedBytes[i] = 1;\n         }\n\n         final UUID uuid = UUIDHelper.bytesToUUID(expectedBytes);\n         final byte[] actualBytes = UUIDHelper.stringToUUIDBytes(uuid.toString());\n\n         assertTrue(new ByteArrayComparator(expectedBytes, actualBytes).arraysAreEqual());\n      }","commit_id":"8cc6b74007e4ec535a300638d73e5ce907773756","url":"https://github.com/rackerlabs/repose"},{"original_method":"public void eval(SlingScript script, Map<String, Object> props)\n        throws SlingException, IOException {\n        \n        // This engine does not really run the script, we simply dump it\n        // to the client inside a skeleton HTML document, and let the\n        // client run the script\n        final PrintWriter w = (PrintWriter)(props.get(SlingScriptEngine.OUT));\n        final EspReader er = new EspReader(script.getScriptReader());\n        er.setOutInitStatement(\"out=document;\\n\");\n        \n        try {\n            // access our data (need a Node)\n            final Resource r = (Resource)props.get(SlingScriptEngine.RESOURCE);\n            final Node n = r.adaptTo(Node.class);\n            if(n == null) {\n                throw new HttpStatusCodeException(\n                        HttpServletResponse.SC_NOT_FOUND,\"Resource does not provide a Node, cannot render\");\n            }\n            \n            // output HEAD with javascript initializations\n            w.println(\"<html><head><title id=\\\"EctPageTitle\\\">\");\n            w.println(\"ECT rendering of \" + n.getPath());\n            w.println(\"<\/title>\");\n            \n            // library scripts\n            final SlingHttpServletRequest request = (SlingHttpServletRequest)props.get(SlingScriptEngine.REQUEST);\n            for(String lib : libraryScripts) {\n                final String fullScriptPath =             \n                    SlingRequestPaths.getContextPath(request)\n                    + SlingRequestPaths.getServletPath(request)\n                    + lib\n                ;\n                w.println(\"<script src=\\\"\" + fullScriptPath + \"\\\"><\/script>\");  \n            }\n            \n            // onLoad method\n            w.println(\"<script language=\\\"javascript\\\">\");\n            w.println(\"function ectOnLoad() { if(typeof onLoad == \\\"function\\\") { onLoad(); } }\");\n            w.println(\"<\/script>\");\n            \n            // node data in JSON format\n            final JsonItemWriter j = new JsonItemWriter(null);\n            final int maxRecursionLevels = 1;\n            w.println(\"<script language='javascript'>\");\n            w.print(\"var currentNode=\");\n            j.dump(n, w, maxRecursionLevels);\n            w.println(\";\");\n            w.println(\"<\/script>\");\n            w.println(\"<\/head><body onLoad=\\\"ectOnLoad()\\\">\");\n            \n            // output our parsed script, first in body\n            w.println(\"<div id=\\\"EctRenderingScript\\\">\\n<script language='javascript'>\");\n            copier.copy(er,w);\n            w.println(\"<\/script>\\n<\/div>\");\n            \n            // default rendering, turned off automatically from the javascript that \n            // follows, if javascript is enabled\n            w.println(\"<div id=\\\"EctDefaultRendering\\\">\");\n            htmlRenderer.render(w, r, n);\n            w.println(\"<\/div>\");\n            w.println(\"<script language=\\\"javascript\\\">\");\n            w.println(\"document.getElementById(\\\"EctDefaultRendering\\\").setAttribute(\\\"style\\\",\\\"display:none\\\");\");\n            w.println(\"<\/script>\");\n            \n            // all done\n            w.println(\"<\/body><\/html>\");\n            \n        } catch(RepositoryException re) {\n            throw new SlingException(\"RepositoryException in EctScriptEngine.eval()\",re);\n            \n        } catch(JSONException je) {\n            throw new SlingException(\"JSONException in EctScriptEngine.eval()\",je);\n            \n        }\n    }","id":2004,"modified_method":"public void eval(SlingScript script, Map<String, Object> props)\n        throws SlingException, IOException {\n        \n        // This engine does not really run the script, we simply dump it\n        // to the client inside a skeleton HTML document, and let the\n        // client run the script\n        final PrintWriter w = (PrintWriter)(props.get(SlingScriptEngine.OUT));\n        final EspReader er = new EspReader(script.getScriptReader());\n        er.setOutInitStatement(\"out=document;\\n\");\n        \n        try {\n            // access our data (need a Node)\n            final Resource r = (Resource)props.get(SlingScriptEngine.RESOURCE);\n            \n            // to render we must have either a Node or a SyntheticResourceData\n            final Node n = r.adaptTo(Node.class);\n            final SyntheticResourceData srd = r.adaptTo(SyntheticResourceData.class);\n            if(srd==null && n == null) {\n                throw new HttpStatusCodeException(\n                        HttpServletResponse.SC_NOT_FOUND,\n                        \"Resource does not provide a Node or a SyntheticResourceData, cannot render\");\n            }\n            \n            // output HEAD with javascript initializations\n            w.println(\"<html><head><title id=\\\"EctPageTitle\\\">\");\n            w.println(\"ECT rendering of \" + r.getURI());\n            w.println(\"<\/title>\");\n            \n            // library scripts\n            final SlingHttpServletRequest request = (SlingHttpServletRequest)props.get(SlingScriptEngine.REQUEST);\n            for(String lib : libraryScripts) {\n                final String fullScriptPath =             \n                    SlingRequestPaths.getContextPath(request)\n                    + SlingRequestPaths.getServletPath(request)\n                    + lib\n                ;\n                w.println(\"<script src=\\\"\" + fullScriptPath + \"\\\"><\/script>\");  \n            }\n            \n            // onLoad method\n            w.println(\"<script language=\\\"javascript\\\">\");\n            w.println(\"function ectOnLoad() { if(typeof onLoad == \\\"function\\\") { onLoad(); } }\");\n            w.println(\"<\/script>\");\n            \n            // data in JSON format\n            final JsonItemWriter j = new JsonItemWriter(null);\n            final int maxRecursionLevels = 1;\n            w.println(\"<script language='javascript'>\");\n            w.print(\"var currentNode=\");\n            if(n!=null) {\n                j.dump(n, w, maxRecursionLevels);\n            } else {\n                w.print(\"{}\");\n            }\n            w.println(\";\");\n            w.println(\"<\/script>\");\n            w.println(\"<\/head><body onLoad=\\\"ectOnLoad()\\\">\");\n            \n            // output our parsed script, first in body\n            w.println(\"<div id=\\\"EctRenderingScript\\\">\\n<script language='javascript'>\");\n            copier.copy(er,w);\n            w.println(\"<\/script>\\n<\/div>\");\n            \n            // default rendering, turned off automatically from the javascript that \n            // follows, if javascript is enabled\n            w.println(\"<div id=\\\"EctDefaultRendering\\\">\");\n            if(n!=null) {\n                htmlRenderer.render(w, r, n);\n            } else {\n                htmlRenderer.render(w, r, srd);\n            }\n            w.println(\"<\/div>\");\n            w.println(\"<script language=\\\"javascript\\\">\");\n            w.println(\"document.getElementById(\\\"EctDefaultRendering\\\").setAttribute(\\\"style\\\",\\\"display:none\\\");\");\n            w.println(\"<\/script>\");\n            \n            // all done\n            w.println(\"<\/body><\/html>\");\n            \n        } catch(RepositoryException re) {\n            throw new SlingException(\"RepositoryException in EctScriptEngine.eval()\",re);\n            \n        } catch(JSONException je) {\n            throw new SlingException(\"JSONException in EctScriptEngine.eval()\",je);\n            \n        }\n    }","commit_id":"bfedb8aa2aab1b1b99c6567a3fca2f78d86857c1","url":"https://github.com/apache/sling"},{"original_method":"/**\r\n\t * Draws all the images defined for the specified cache ID.\r\n\t */\r\n\tpublic void draw (int cacheID) {\r\n\t\tif (!drawing) throw new IllegalStateException(\"SpriteCache.begin must be called before draw.\");\r\n\r\n\t\tCache cache = caches.get(cacheID);\r\n\t\tint offset = cache.offset;\r\n\t\tTexture[] textures = cache.textures;\r\n\t\tint[] counts = cache.counts;\r\n\t\tif (Gdx.graphics.isGL20Available()) {\r\n\t\t\tfor (int i = 0, n = textures.length; i < n; i++) {\r\n\t\t\t\tint count = counts[i];\r\n\t\t\t\ttextures[i].bind();\r\n\t\t\t\tmesh.render(shader, GL10.GL_TRIANGLES, offset, count);\r\n\t\t\t\toffset += count;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (int i = 0, n = textures.length; i < n; i++) {\r\n\t\t\t\tint count = counts[i];\r\n\t\t\t\ttextures[i].bind();\r\n\t\t\t\tmesh.render(GL10.GL_TRIANGLES, offset, count);\r\n\t\t\t\toffset += count;\r\n\t\t\t}\r\n\t\t}\r\n\t}","id":2005,"modified_method":"/**\r\n\t * Draws all the images defined for the specified cache ID.\r\n\t */\r\n\tpublic void draw (int cacheID) {\r\n\t\tif (!drawing) throw new IllegalStateException(\"SpriteCache.begin must be called before draw.\");\r\n\r\n\t\tCache cache = caches.get(cacheID);\r\n\t\tint offset = cache.offset;\r\n\t\tTexture[] textures = cache.textures;\r\n\t\tint[] counts = cache.counts;\r\n\t\tif (Gdx.graphics.isGL20Available()) {\r\n\t\t\tfor (int i = 0, n = textures.length; i < n; i++) {\r\n\t\t\t\tint count = counts[i];\r\n\t\t\t\ttextures[i].bind();\r\n\t\t\t\tif(customShader != null) mesh.render(customShader, GL10.GL_TRIANGLES, offset, count); \r\n\t\t\t\telse mesh.render(shader, GL10.GL_TRIANGLES, offset, count);\r\n\t\t\t\toffset += count;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (int i = 0, n = textures.length; i < n; i++) {\r\n\t\t\t\tint count = counts[i];\r\n\t\t\t\ttextures[i].bind();\r\n\t\t\t\tmesh.render(GL10.GL_TRIANGLES, offset, count);\r\n\t\t\t\toffset += count;\r\n\t\t\t}\r\n\t\t}\r\n\t}","commit_id":"22f45469fc463e2e70a39032088531cc8d01bff4","url":"https://github.com/libgdx/libgdx"},{"original_method":"/**\r\n\t * Prepares the OpenGL state for SpriteCache rendering.\r\n\t */\r\n\tpublic void begin () {\r\n\t\tif (drawing) throw new IllegalStateException(\"end must be called before begin.\");\r\n\r\n\t\tif (Gdx.graphics.isGL20Available() == false) {\r\n\t\t\tGL10 gl = Gdx.gl10;\r\n\t\t\tgl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());\r\n\t\t\tgl.glDisable(GL10.GL_LIGHTING);\r\n\t\t\tgl.glDisable(GL10.GL_DEPTH_TEST);\r\n\t\t\tgl.glDisable(GL10.GL_CULL_FACE);\r\n\t\t\tgl.glDepthMask(false);\r\n\t\t\tgl.glEnable(GL10.GL_TEXTURE_2D);\r\n\r\n\t\t\tgl.glMatrixMode(GL10.GL_PROJECTION);\r\n\t\t\tgl.glLoadMatrixf(projectionMatrix.val, 0);\r\n\t\t\tgl.glMatrixMode(GL10.GL_MODELVIEW);\r\n\t\t\tgl.glLoadMatrixf(transformMatrix.val, 0);\r\n\r\n\t\t\tmesh.bind();\r\n\t\t} else {\r\n\t\t\tcombinedMatrix.set(projectionMatrix).mul(transformMatrix);\r\n\r\n\t\t\tGL20 gl = Gdx.gl20;\r\n\t\t\tgl.glViewport(0, 0, Gdx.graphics.getWidth(), Gdx.graphics.getHeight());\r\n\t\t\tgl.glDisable(GL20.GL_DEPTH_TEST);\r\n\t\t\tgl.glDisable(GL20.GL_CULL_FACE);\r\n\t\t\tgl.glDepthMask(false);\r\n\t\t\tgl.glEnable(GL20.GL_TEXTURE_2D);\r\n\r\n\t\t\tshader.begin();\r\n\t\t\tshader.setUniformMatrix(\"u_projectionViewMatrix\", combinedMatrix);\r\n\t\t\tshader.setUniformi(\"u_texture\", 0);\r\n\r\n\t\t\tmesh.bind(shader);\r\n\t\t}\r\n\t\tdrawing = true;\r\n\t}","id":2006,"modified_method":"/**\r\n\t * Prepares the OpenGL state for SpriteCache rendering.\r\n\t */\r\n\tpublic void begin () {\r\n\t\tif (drawing) throw new IllegalStateException(\"end must be called before begin.\");\r\n\r\n\t\tif (Gdx.graphics.isGL20Available() == false) {\r\n\t\t\tGL10 gl = Gdx.gl10;\r\n\t\t\tgl.glDepthMask(false);\r\n\t\t\tgl.glEnable(GL10.GL_TEXTURE_2D);\r\n\r\n\t\t\tgl.glMatrixMode(GL10.GL_PROJECTION);\r\n\t\t\tgl.glLoadMatrixf(projectionMatrix.val, 0);\r\n\t\t\tgl.glMatrixMode(GL10.GL_MODELVIEW);\r\n\t\t\tgl.glLoadMatrixf(transformMatrix.val, 0);\r\n\r\n\t\t\tmesh.bind();\r\n\t\t} else {\r\n\t\t\tcombinedMatrix.set(projectionMatrix).mul(transformMatrix);\r\n\r\n\t\t\tGL20 gl = Gdx.gl20;\t\t\t\r\n\t\t\tgl.glDepthMask(false);\r\n\t\t\tgl.glEnable(GL20.GL_TEXTURE_2D);\r\n\r\n\t\t\tif(customShader != null) {\r\n\t\t\t\tcustomShader.begin();\r\n\t\t\t\tcustomShader.setUniformMatrix(\"u_proj\", projectionMatrix);\r\n\t\t\t\tcustomShader.setUniformMatrix(\"u_trans\", transformMatrix);\r\n\t\t\t\tcustomShader.setUniformMatrix(\"u_projTrans\", combinedMatrix);\r\n\t\t\t\tcustomShader.setUniformi(\"u_texture\", 0);\r\n\t\t\t} else {\r\n\t\t\t\tshader.begin();\r\n\t\t\t\tshader.setUniformMatrix(\"u_projectionViewMatrix\", combinedMatrix);\r\n\t\t\t\tshader.setUniformi(\"u_texture\", 0);\r\n\t\t\t}\t\t\t\t\t\r\n\r\n\t\t\tmesh.bind(shader);\r\n\t\t}\r\n\t\tdrawing = true;\r\n\t}","commit_id":"22f45469fc463e2e70a39032088531cc8d01bff4","url":"https://github.com/libgdx/libgdx"},{"original_method":"/**\r\n\t * Draws a subset of images defined for the specified cache ID.\r\n\t * @param offset The first image to render.\r\n\t * @param length The number of images from the first image (inclusive) to render.\r\n\t */\r\n\tpublic void draw (int cacheID, int offset, int length) {\r\n\t\tif (!drawing) throw new IllegalStateException(\"SpriteCache.begin must be called before draw.\");\r\n\r\n\t\tCache cache = caches.get(cacheID);\r\n\t\toffset = offset * 6 + cache.offset;\r\n\t\tlength *= 6;\r\n\t\tTexture[] textures = cache.textures;\r\n\t\tint[] counts = cache.counts;\r\n\t\tif (Gdx.graphics.isGL20Available()) {\r\n\t\t\tfor (int i = 0, n = textures.length; i < n; i++) {\r\n\t\t\t\ttextures[i].bind();\r\n\t\t\t\tint count = counts[i];\r\n\t\t\t\tif (count > length) {\r\n\t\t\t\t\ti = n;\r\n\t\t\t\t\tcount = length;\r\n\t\t\t\t} else\r\n\t\t\t\t\tlength -= count;\r\n\t\t\t\tmesh.render(shader, GL10.GL_TRIANGLES, offset, count);\r\n\t\t\t\toffset += count;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (int i = 0, n = textures.length; i < n; i++) {\r\n\t\t\t\ttextures[i].bind();\r\n\t\t\t\tint count = counts[i];\r\n\t\t\t\tif (count > length) {\r\n\t\t\t\t\ti = n;\r\n\t\t\t\t\tcount = length;\r\n\t\t\t\t} else\r\n\t\t\t\t\tlength -= count;\r\n\t\t\t\tmesh.render(GL10.GL_TRIANGLES, offset, count);\r\n\t\t\t\toffset += count;\r\n\t\t\t}\r\n\t\t}\r\n\t}","id":2007,"modified_method":"/**\r\n\t * Draws a subset of images defined for the specified cache ID.\r\n\t * @param offset The first image to render.\r\n\t * @param length The number of images from the first image (inclusive) to render.\r\n\t */\r\n\tpublic void draw (int cacheID, int offset, int length) {\r\n\t\tif (!drawing) throw new IllegalStateException(\"SpriteCache.begin must be called before draw.\");\r\n\r\n\t\tCache cache = caches.get(cacheID);\r\n\t\toffset = offset * 6 + cache.offset;\r\n\t\tlength *= 6;\r\n\t\tTexture[] textures = cache.textures;\r\n\t\tint[] counts = cache.counts;\r\n\t\tif (Gdx.graphics.isGL20Available()) {\r\n\t\t\tfor (int i = 0, n = textures.length; i < n; i++) {\r\n\t\t\t\ttextures[i].bind();\r\n\t\t\t\tint count = counts[i];\r\n\t\t\t\tif (count > length) {\r\n\t\t\t\t\ti = n;\r\n\t\t\t\t\tcount = length;\r\n\t\t\t\t} else\r\n\t\t\t\t\tlength -= count;\r\n\t\t\t\tif(customShader != null) mesh.render(customShader, GL10.GL_TRIANGLES, offset, count);\r\n\t\t\t\telse mesh.render(shader, GL10.GL_TRIANGLES, offset, count);\r\n\t\t\t\toffset += count;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (int i = 0, n = textures.length; i < n; i++) {\r\n\t\t\t\ttextures[i].bind();\r\n\t\t\t\tint count = counts[i];\r\n\t\t\t\tif (count > length) {\r\n\t\t\t\t\ti = n;\r\n\t\t\t\t\tcount = length;\r\n\t\t\t\t} else\r\n\t\t\t\t\tlength -= count;\r\n\t\t\t\tmesh.render(GL10.GL_TRIANGLES, offset, count);\r\n\t\t\t\toffset += count;\r\n\t\t\t}\r\n\t\t}\r\n\t}","commit_id":"22f45469fc463e2e70a39032088531cc8d01bff4","url":"https://github.com/libgdx/libgdx"},{"original_method":"/**\n   * If the specified filepath or its parent was added with history, returns the URL of the copy source for this filepath.\n   *\n   * @param filePath the original filepath\n   * @return the copy source url, or null if the file isn't a copy of anything\n   */\n  @Nullable\n  public String getParentCopyFromURL(FilePath filePath) {\n    if (myCopyFromURLs == null) {\n      return null;\n    }\n    StringBuilder relPathBuilder = new StringBuilder();\n    while (filePath != null) {\n      String copyFromURL = myCopyFromURLs.get(filePath);\n      if (copyFromURL != null) {\n        return copyFromURL + relPathBuilder.toString();\n      }\n      relPathBuilder.insert(0, \"/\" + filePath.getName());\n      filePath = filePath.getParentPath();\n    }\n    return null;\n  }","id":2008,"modified_method":"/**\n   * If the specified filepath or its parent was added with history, returns the URL of the copy source for this filepath.\n   *\n   * @param filePath the original filepath\n   * @return the copy source url, or null if the file isn't a copy of anything\n   */\n  @Nullable\n  public String getParentCopyFromURL(@NotNull FilePath filePath) {\n    String result = null;\n    FilePath parent = filePath;\n\n    while (parent != null && !myCopyFromURLs.containsKey(parent)) {\n      parent = parent.getParentPath();\n    }\n\n    if (parent != null) {\n      String copyFromUrl = myCopyFromURLs.get(parent);\n\n      //noinspection ConstantConditions\n      result = parent == filePath\n               ? copyFromUrl\n               : SvnUtil.appendMultiParts(copyFromUrl, FileUtil.getRelativePath(parent.getIOFile(), filePath.getIOFile()));\n    }\n\n    return result;\n  }","commit_id":"f479370891746546d9a2bb0b37748e18006327fe","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public List<SvnChangedFile> getCopiedFiles() {\n    if (myCopiedFiles == null) {\n      return Collections.emptyList();\n    }\n    return myCopiedFiles;\n  }","id":2009,"modified_method":"@NotNull\n  public List<SvnChangedFile> getCopiedFiles() {\n    return myCopiedFiles;\n  }","commit_id":"f479370891746546d9a2bb0b37748e18006327fe","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private ConflictState getState(@Nullable final Status svnStatus) {\n    if (svnStatus == null) {\n      return ConflictState.none;\n    }\n\n    final StatusType propertiesStatus = svnStatus.getPropertiesStatus();\n\n    final boolean treeConflict = svnStatus.getTreeConflict() != null;\n    final boolean textConflict = StatusType.STATUS_CONFLICTED == svnStatus.getContentsStatus();\n    final boolean propertyConflict = StatusType.STATUS_CONFLICTED == propertiesStatus;\n    if (treeConflict) {\n      reportTreeConflict(svnStatus);\n    }\n\n    return ConflictState.getInstance(treeConflict, textConflict, propertyConflict);\n  }","id":2010,"modified_method":"@NotNull\n  private ConflictState getState(@Nullable Status svnStatus) {\n    ConflictState result = svnStatus != null ? ConflictState.from(svnStatus) : ConflictState.none;\n\n    if (result.isTree()) {\n      //noinspection ConstantConditions\n      reportTreeConflict(svnStatus);\n    }\n\n    return result;\n  }","commit_id":"f479370891746546d9a2bb0b37748e18006327fe","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void addModifiedNotSavedChange(final VirtualFile file) throws SVNException {\n    final FilePath filePath = new FilePathImpl(file);\n    final Info svnInfo = myVcs.getInfo(file);\n\n    if (svnInfo != null) {\n      final Status svnStatus = new Status();\n      svnStatus.setRevision(svnInfo.getRevision());\n      myChangelistBuilder.processChangeInList(\n        createChange(SvnContentRevision.createBaseRevision(myVcs, filePath, svnInfo.getRevision()), CurrentContentRevision.create(filePath),\n                     FileStatus.MODIFIED, svnStatus), (String)null, SvnVcs.getKey()\n      );\n    }\n  }","id":2011,"modified_method":"public void addModifiedNotSavedChange(@NotNull VirtualFile file) throws SVNException {\n    final FilePath filePath = new FilePathImpl(file);\n    final Info svnInfo = myVcs.getInfo(file);\n\n    if (svnInfo != null) {\n      final Status svnStatus = new Status();\n      svnStatus.setRevision(svnInfo.getRevision());\n      svnStatus.setKind(NodeKind.from(filePath.isDirectory()));\n      processChangeInList(SvnContentRevision.createBaseRevision(myVcs, filePath, svnInfo.getRevision()),\n                          CurrentContentRevision.create(filePath), FileStatus.MODIFIED, svnStatus);\n    }\n  }","commit_id":"f479370891746546d9a2bb0b37748e18006327fe","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"void processStatusFirstPass(@NotNull FilePath filePath, @NotNull Status status) throws SVNException {\n    if (status.getRemoteLock() != null) {\n      final Lock lock = status.getRemoteLock();\n      myChangelistBuilder.processLogicallyLockedFolder(filePath.getVirtualFile(),\n                                                       new LogicalLock(false, lock.getOwner(), lock.getComment(), lock.getCreationDate(),\n                                                                       lock.getExpirationDate()));\n    }\n    if (status.getLocalLock() != null) {\n      final Lock lock = status.getLocalLock();\n      myChangelistBuilder.processLogicallyLockedFolder(filePath.getVirtualFile(),\n                                                       new LogicalLock(true, lock.getOwner(), lock.getComment(), lock.getCreationDate(),\n                                                                       lock.getExpirationDate()));\n    }\n    if (filePath.isDirectory() && status.isLocked()) {\n      myChangelistBuilder.processLockedFolder(filePath.getVirtualFile());\n    }\n    if ((status.is(StatusType.STATUS_ADDED) || StatusType.STATUS_MODIFIED.equals(status.getNodeStatus())) &&\n        status.getCopyFromURL() != null) {\n      addCopiedFile(filePath, status, status.getCopyFromURL());\n    }\n    else if (status.is(StatusType.STATUS_DELETED)) {\n      myDeletedFiles.add(new SvnChangedFile(filePath, status));\n    }\n    else {\n      String parentCopyFromURL = getParentCopyFromURL(filePath);\n      if (parentCopyFromURL != null) {\n        addCopiedFile(filePath, status, parentCopyFromURL);\n      }\n      else {\n        processStatus(filePath, status);\n      }\n    }\n  }","id":2012,"modified_method":"void processStatusFirstPass(@NotNull FilePath filePath, @NotNull Status status) throws SVNException {\n    if (status.getRemoteLock() != null) {\n      myChangelistBuilder.processLogicallyLockedFolder(filePath.getVirtualFile(), status.getRemoteLock().toLogicalLock(false));\n    }\n    if (status.getLocalLock() != null) {\n      myChangelistBuilder.processLogicallyLockedFolder(filePath.getVirtualFile(), status.getLocalLock().toLogicalLock(true));\n    }\n    if (filePath.isDirectory() && status.isLocked()) {\n      myChangelistBuilder.processLockedFolder(filePath.getVirtualFile());\n    }\n    if ((status.is(StatusType.STATUS_ADDED) || StatusType.STATUS_MODIFIED.equals(status.getNodeStatus())) &&\n        status.getCopyFromURL() != null) {\n      addCopiedFile(filePath, status, status.getCopyFromURL());\n    }\n    else if (status.is(StatusType.STATUS_DELETED)) {\n      myDeletedFiles.add(new SvnChangedFile(filePath, status));\n    }\n    else {\n      String parentCopyFromURL = getParentCopyFromURL(filePath);\n      if (parentCopyFromURL != null) {\n        addCopiedFile(filePath, status, parentCopyFromURL);\n      }\n      else {\n        processStatus(filePath, status);\n      }\n    }\n  }","commit_id":"f479370891746546d9a2bb0b37748e18006327fe","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private Change patchWithPropertyChange(final Change change, final Status svnStatus, final Status deletedStatus)\n    throws SVNException {\n    if (svnStatus == null) return change;\n    if (svnStatus.isProperty(StatusType.STATUS_CONFLICTED, StatusType.CHANGED, StatusType.STATUS_ADDED, StatusType.STATUS_DELETED,\n                             StatusType.STATUS_MODIFIED, StatusType.STATUS_REPLACED, StatusType.MERGED)) {\n      final FilePath path = ChangesUtil.getFilePath(change);\n      final File ioFile = path.getIOFile();\n      final File beforeFile = deletedStatus != null ? deletedStatus.getFile() : ioFile;\n      final String beforeList = svnStatus.isProperty(StatusType.STATUS_ADDED) && deletedStatus == null ? null :\n                                AbstractShowPropertiesDiffAction.getPropertyList(myVcs, beforeFile, SVNRevision.BASE);\n      final String afterList = svnStatus.isProperty(StatusType.STATUS_DELETED) ? null :\n                               AbstractShowPropertiesDiffAction.getPropertyList(myVcs, ioFile, SVNRevision.WORKING);\n\n      // TODO: There are cases when status output is like (on newly added file with some properties that is locally deleted)\n      // <entry path=\"some_path\"> <wc-status item=\"missing\" revision=\"-1\" props=\"modified\"> <\/wc-status> <\/entry>\n      // TODO: For such cases in current logic we'll have Change with before revision containing SVNRevision.UNDEFINED\n      // TODO: Analyze if this logic is OK or we should update flow somehow (for instance, to have null before revision)\n      final String beforeRevisionNu = change.getBeforeRevision() == null ? null : change.getBeforeRevision().getRevisionNumber().asString();\n      final String afterRevisionNu = change.getAfterRevision() == null ? null : change.getAfterRevision().getRevisionNumber().asString();\n\n      final Change propertyChange = new Change(beforeList == null ? null : new SimpleContentRevision(beforeList, path, beforeRevisionNu),\n                                               afterList == null ? null : new SimpleContentRevision(afterList, path, afterRevisionNu),\n                                               deletedStatus != null\n                                               ? FileStatus.MODIFIED\n                                               : SvnStatusConvertor.convertPropertyStatus(svnStatus.getPropertiesStatus()));\n      change.addAdditionalLayerElement(SvnChangeProvider.PROPERTY_LAYER, propertyChange);\n    }\n    return change;\n  }","id":2013,"modified_method":"private void patchWithPropertyChange(@NotNull Change change, @NotNull Status svnStatus, @Nullable Status deletedStatus)\n    throws SVNException {\n    if (svnStatus.isProperty(StatusType.STATUS_CONFLICTED, StatusType.CHANGED, StatusType.STATUS_ADDED, StatusType.STATUS_DELETED,\n                             StatusType.STATUS_MODIFIED, StatusType.STATUS_REPLACED, StatusType.MERGED)) {\n      change.addAdditionalLayerElement(SvnChangeProvider.PROPERTY_LAYER, createPropertyChange(change, svnStatus, deletedStatus));\n    }\n  }","commit_id":"f479370891746546d9a2bb0b37748e18006327fe","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void addCopiedFile(@NotNull FilePath filePath, @NotNull Status status, @NotNull String copyFromURL) {\n    if (myCopiedFiles == null) {\n      myCopiedFiles = new ArrayList<SvnChangedFile>();\n    }\n    myCopiedFiles.add(new SvnChangedFile(filePath, status, copyFromURL));\n    final String url = status.getCopyFromURL();\n    if (url != null) {\n      addCopyFromURL(filePath, url);\n    }\n  }","id":2014,"modified_method":"public void addCopiedFile(@NotNull FilePath filePath, @NotNull Status status, @NotNull String copyFromURL) {\n    myCopiedFiles.add(new SvnChangedFile(filePath, status, copyFromURL));\n    ContainerUtil.putIfNotNull(filePath, status.getCopyFromURL(), myCopyFromURLs);\n  }","commit_id":"f479370891746546d9a2bb0b37748e18006327fe","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"Change createMovedChange(final ContentRevision before, final ContentRevision after, final Status copiedStatus,\n                           final Status deletedStatus) throws SVNException {\n    // todo no convertion needed for the contents status?\n    final ConflictedSvnChange conflictedSvnChange =\n      new ConflictedSvnChange(before, after, ConflictState.mergeState(getState(copiedStatus), getState(deletedStatus)),\n                              ((copiedStatus != null) && (copiedStatus.getTreeConflict() != null)) ? after.getFile() : before.getFile());\n    if (deletedStatus != null) {\n      conflictedSvnChange.setBeforeDescription(deletedStatus.getTreeConflict());\n    }\n    if (copiedStatus != null) {\n      conflictedSvnChange.setAfterDescription(copiedStatus.getTreeConflict());\n    }\n    return patchWithPropertyChange(conflictedSvnChange, copiedStatus, deletedStatus);\n  }","id":2015,"modified_method":"@NotNull\n  Change createMovedChange(@NotNull ContentRevision before,\n                           @NotNull ContentRevision after,\n                           @Nullable Status copiedStatus,\n                           @NotNull Status deletedStatus) throws SVNException {\n    // todo no convertion needed for the contents status?\n    ConflictedSvnChange change =\n      new ConflictedSvnChange(before, after, ConflictState.mergeState(getState(copiedStatus), getState(deletedStatus)),\n                              ((copiedStatus != null) && (copiedStatus.getTreeConflict() != null)) ? after.getFile() : before.getFile());\n    change.setBeforeDescription(deletedStatus.getTreeConflict());\n    if (copiedStatus != null) {\n      change.setAfterDescription(copiedStatus.getTreeConflict());\n      patchWithPropertyChange(change, copiedStatus, deletedStatus);\n    }\n\n    return change;\n  }","commit_id":"f479370891746546d9a2bb0b37748e18006327fe","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public SvnChangeProviderContext(SvnVcs vcs, final ChangelistBuilder changelistBuilder, final ProgressIndicator progress) {\n    myVcs = vcs;\n    myChangelistBuilder = changelistBuilder;\n    myProgress = progress;\n    myTreeConflicted = new HashMap<String, Status>();\n    myBranchConfigurationManager = SvnBranchConfigurationManager.getInstance(myVcs.getProject());\n  }","id":2016,"modified_method":"public SvnChangeProviderContext(@NotNull SvnVcs vcs, @NotNull ChangelistBuilder changelistBuilder, @Nullable ProgressIndicator progress) {\n    myVcs = vcs;\n    myChangelistBuilder = changelistBuilder;\n    myProgress = progress;\n    myBranchConfigurationManager = SvnBranchConfigurationManager.getInstance(myVcs.getProject());\n  }","commit_id":"f479370891746546d9a2bb0b37748e18006327fe","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private Change createChange(final ContentRevision before,\n                              final ContentRevision after,\n                              final FileStatus fStatus,\n                              final Status svnStatus)\n    throws SVNException {\n    final ConflictedSvnChange conflictedSvnChange = new ConflictedSvnChange(before, after, correctContentsStatus(fStatus, svnStatus),\n                                                                            getState(svnStatus),\n                                                                            after == null ? before.getFile() : after.getFile());\n    if (svnStatus != null) {\n      if (StatusType.STATUS_DELETED.equals(svnStatus.getNodeStatus()) && !svnStatus.getRevision().isValid()) {\n        conflictedSvnChange.setIsPhantom(true);\n      }\n      conflictedSvnChange.setBeforeDescription(svnStatus.getTreeConflict());\n    }\n    return patchWithPropertyChange(conflictedSvnChange, svnStatus, null);\n  }","id":2017,"modified_method":"@NotNull\n  private Change createChange(@Nullable ContentRevision before,\n                              @Nullable ContentRevision after,\n                              @NotNull FileStatus fStatus,\n                              @NotNull Status svnStatus)\n    throws SVNException {\n    ConflictedSvnChange change =\n      new ConflictedSvnChange(before, after, fStatus, getState(svnStatus), after == null ? before.getFile() : after.getFile());\n\n    change.setIsPhantom(StatusType.STATUS_DELETED.equals(svnStatus.getNodeStatus()) && !svnStatus.getRevision().isValid());\n    change.setBeforeDescription(svnStatus.getTreeConflict());\n    patchWithPropertyChange(change, svnStatus, null);\n\n    return change;\n  }","commit_id":"f479370891746546d9a2bb0b37748e18006327fe","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void checkSwitched(final FilePath filePath, final ChangelistBuilder builder, final Status status,\n                             final FileStatus convertedStatus) {\n    if (status.isSwitched() || (convertedStatus == FileStatus.SWITCHED)) {\n      final VirtualFile virtualFile = filePath.getVirtualFile();\n      if (virtualFile == null) return;\n      final String switchUrl = status.getURL().toString();\n      final VirtualFile vcsRoot = ProjectLevelVcsManager.getInstance(myVcs.getProject()).getVcsRootFor(virtualFile);\n      if (vcsRoot != null) {  // it will be null if we walked into an excluded directory\n        String baseUrl = null;\n        try {\n          baseUrl = myBranchConfigurationManager.get(vcsRoot).getBaseName(switchUrl);\n        }\n        catch (VcsException e) {\n          LOG.info(e);\n        }\n        builder.processSwitchedFile(virtualFile, baseUrl == null ? switchUrl : baseUrl, true);\n      }\n    }\n  }","id":2018,"modified_method":"private void checkSwitched(@NotNull FilePath filePath, @NotNull Status status, @NotNull FileStatus convertedStatus) {\n    if (status.isSwitched() || (convertedStatus == FileStatus.SWITCHED)) {\n      final VirtualFile virtualFile = filePath.getVirtualFile();\n      if (virtualFile == null) return;\n      final String switchUrl = status.getURL().toString();\n      final VirtualFile vcsRoot = ProjectLevelVcsManager.getInstance(myVcs.getProject()).getVcsRootFor(virtualFile);\n      if (vcsRoot != null) {  // it will be null if we walked into an excluded directory\n        String baseUrl = null;\n        try {\n          baseUrl = myBranchConfigurationManager.get(vcsRoot).getBaseName(switchUrl);\n        }\n        catch (VcsException e) {\n          LOG.info(e);\n        }\n        myChangelistBuilder.processSwitchedFile(virtualFile, baseUrl == null ? switchUrl : baseUrl, true);\n      }\n    }\n  }","commit_id":"f479370891746546d9a2bb0b37748e18006327fe","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"void processStatus(@NotNull FilePath filePath, @NotNull Status status) throws SVNException {\n    WorkingCopyFormat format = myVcs.getWorkingCopyFormat(filePath.getIOFile());\n    if (!WorkingCopyFormat.UNKNOWN.equals(format) && format.less(WorkingCopyFormat.ONE_DOT_SEVEN)) {\n      loadEntriesFile(filePath);\n    }\n\n    FileStatus fStatus = SvnStatusConvertor.convertStatus(status);\n\n    final StatusType statusType = status.getContentsStatus();\n    if (status.is(StatusType.STATUS_UNVERSIONED, StatusType.UNKNOWN)) {\n      final VirtualFile file = filePath.getVirtualFile();\n      if (file != null) {\n        myChangelistBuilder.processUnversionedFile(file);\n      }\n    }\n    else if (status.is(StatusType.STATUS_ADDED)) {\n      myChangelistBuilder.processChangeInList(createChange(null, CurrentContentRevision.create(filePath), fStatus, status),\n                                              SvnUtil.getChangelistName(status), SvnVcs.getKey());\n    }\n    else if (status.is(StatusType.STATUS_CONFLICTED, StatusType.STATUS_MODIFIED, StatusType.STATUS_REPLACED) ||\n             status.isProperty(StatusType.STATUS_MODIFIED, StatusType.STATUS_CONFLICTED)) {\n      myChangelistBuilder.processChangeInList(\n        createChange(SvnContentRevision.createBaseRevision(myVcs, filePath, status), CurrentContentRevision.create(filePath), fStatus,\n                     status), SvnUtil.getChangelistName(status), SvnVcs.getKey()\n      );\n      checkSwitched(filePath, myChangelistBuilder, status, fStatus);\n    }\n    else if (status.is(StatusType.STATUS_DELETED)) {\n      myChangelistBuilder.processChangeInList(\n        createChange(SvnContentRevision.createBaseRevision(myVcs, filePath, status), null, fStatus, status),\n        SvnUtil.getChangelistName(status), SvnVcs.getKey());\n    }\n    else if (status.is(StatusType.STATUS_MISSING)) {\n      myChangelistBuilder.processLocallyDeletedFile(createLocallyDeletedChange(filePath, status));\n    }\n    else if (status.is(StatusType.STATUS_IGNORED)) {\n      if (filePath.getVirtualFile() == null) {\n        filePath.hardRefresh();\n      }\n      if (filePath.getVirtualFile() == null) {\n        LOG.error(\"No virtual file for ignored file: \" + filePath.getPresentableUrl() + \", isNonLocal: \" + filePath.isNonLocal());\n      }\n      else if (!myVcs.isWcRoot(filePath)) {\n        myChangelistBuilder.processIgnoredFile(filePath.getVirtualFile());\n      }\n    }\n    else if (status.isCopied()) {\n      //\n    }\n    else if ((fStatus == FileStatus.NOT_CHANGED || fStatus == FileStatus.SWITCHED) && statusType != StatusType.STATUS_NONE) {\n      VirtualFile file = filePath.getVirtualFile();\n      if (file != null && FileDocumentManager.getInstance().isFileModified(file)) {\n        myChangelistBuilder.processChangeInList(\n          createChange(SvnContentRevision.createBaseRevision(myVcs, filePath, status), CurrentContentRevision.create(filePath),\n                       FileStatus.MODIFIED, status), SvnUtil.getChangelistName(status), SvnVcs.getKey()\n        );\n      }\n      else if (status.getTreeConflict() != null) {\n        myChangelistBuilder.processChange(createChange(SvnContentRevision.createBaseRevision(myVcs, filePath, status),\n                                                       CurrentContentRevision.create(filePath), FileStatus.MODIFIED, status),\n                                          SvnVcs.getKey());\n      }\n      checkSwitched(filePath, myChangelistBuilder, status, fStatus);\n    }\n  }","id":2019,"modified_method":"void processStatus(@NotNull FilePath filePath, @NotNull Status status) throws SVNException {\n    WorkingCopyFormat format = myVcs.getWorkingCopyFormat(filePath.getIOFile());\n    if (!WorkingCopyFormat.UNKNOWN.equals(format) && format.less(WorkingCopyFormat.ONE_DOT_SEVEN)) {\n      loadEntriesFile(filePath);\n    }\n\n    FileStatus fStatus = SvnStatusConvertor.convertStatus(status);\n\n    final StatusType statusType = status.getContentsStatus();\n    if (status.is(StatusType.STATUS_UNVERSIONED, StatusType.UNKNOWN)) {\n      final VirtualFile file = filePath.getVirtualFile();\n      if (file != null) {\n        myChangelistBuilder.processUnversionedFile(file);\n      }\n    }\n    else if (status.is(StatusType.STATUS_ADDED)) {\n      processChangeInList(null, CurrentContentRevision.create(filePath), fStatus, status);\n    }\n    else if (status.is(StatusType.STATUS_CONFLICTED, StatusType.STATUS_MODIFIED, StatusType.STATUS_REPLACED) ||\n             status.isProperty(StatusType.STATUS_MODIFIED, StatusType.STATUS_CONFLICTED)) {\n      processChangeInList(SvnContentRevision.createBaseRevision(myVcs, filePath, status), CurrentContentRevision.create(filePath), fStatus,\n                          status);\n      checkSwitched(filePath, status, fStatus);\n    }\n    else if (status.is(StatusType.STATUS_DELETED)) {\n      processChangeInList(SvnContentRevision.createBaseRevision(myVcs, filePath, status), null, fStatus, status);\n    }\n    else if (status.is(StatusType.STATUS_MISSING)) {\n      myChangelistBuilder.processLocallyDeletedFile(new SvnLocallyDeletedChange(filePath, getState(status)));\n    }\n    else if (status.is(StatusType.STATUS_IGNORED)) {\n      if (filePath.getVirtualFile() == null) {\n        filePath.hardRefresh();\n      }\n      if (filePath.getVirtualFile() == null) {\n        LOG.error(\"No virtual file for ignored file: \" + filePath.getPresentableUrl() + \", isNonLocal: \" + filePath.isNonLocal());\n      }\n      else if (!myVcs.isWcRoot(filePath)) {\n        myChangelistBuilder.processIgnoredFile(filePath.getVirtualFile());\n      }\n    }\n    else if ((fStatus == FileStatus.NOT_CHANGED || fStatus == FileStatus.SWITCHED) && statusType != StatusType.STATUS_NONE) {\n      VirtualFile file = filePath.getVirtualFile();\n      if (file != null && FileDocumentManager.getInstance().isFileModified(file)) {\n        processChangeInList(SvnContentRevision.createBaseRevision(myVcs, filePath, status), CurrentContentRevision.create(filePath),\n                            FileStatus.MODIFIED, status);\n      }\n      else if (status.getTreeConflict() != null) {\n        myChangelistBuilder.processChange(createChange(SvnContentRevision.createBaseRevision(myVcs, filePath, status),\n                                                       CurrentContentRevision.create(filePath), FileStatus.MODIFIED, status),\n                                          SvnVcs.getKey());\n      }\n      checkSwitched(filePath, status, fStatus);\n    }\n  }","commit_id":"f479370891746546d9a2bb0b37748e18006327fe","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n     * Creates an instance of GroupRightButtonMenu.\n     * \n     * @param mainFrame The parent <tt>MainFrame<\/tt> window.\n     */\n    public CommonRightButtonMenu(MainFrame mainFrame)\n    {\n        this.mainFrame = mainFrame;\n\n        this.add(addContactItem);\n        this.add(createGroupItem);\n\n        this.addContactItem.setMnemonic(GuiActivator.getResources()\n            .getI18nMnemonic(\"service.gui.ADD_CONTACT\"));\n        this.createGroupItem.setMnemonic(GuiActivator.getResources()\n            .getI18nMnemonic(\"service.gui.CREATE_GROUP\"));\n\n        this.addContactItem.addActionListener(this);\n        this.createGroupItem.addActionListener(this);\n\n        loadSkin();\n    }","id":2020,"modified_method":"/**\n     * Creates an instance of GroupRightButtonMenu.\n     * \n     * @param mainFrame The parent <tt>MainFrame<\/tt> window.\n     */\n    public CommonRightButtonMenu(MainFrame mainFrame)\n    {\n        this.mainFrame = mainFrame;\n\n        if (!ConfigurationManager.isAddContactDisabled())\n            this.add(addContactItem);\n\n        this.add(createGroupItem);\n\n        this.addContactItem.setMnemonic(GuiActivator.getResources()\n            .getI18nMnemonic(\"service.gui.ADD_CONTACT\"));\n        this.createGroupItem.setMnemonic(GuiActivator.getResources()\n            .getI18nMnemonic(\"service.gui.CREATE_GROUP\"));\n\n        this.addContactItem.addActionListener(this);\n        this.createGroupItem.addActionListener(this);\n\n        loadSkin();\n    }","commit_id":"76cecff08d03207c38e32abd8ec81852d5521fb7","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Loads all user interface configurations.\n     */\n    public static void loadGuiConfigurations()\n    {\n        configService.addPropertyChangeListener(\n            new ConfigurationChangeListener());\n\n        // Load the \"auPopupNewMessage\" property.\n        String autoPopupProperty = \n            \"service.gui.AUTO_POPUP_NEW_MESSAGE\";\n\n        String autoPopup = configService.getString(autoPopupProperty);\n\n        if(autoPopup == null)\n            autoPopup = GuiActivator.getResources().\n                getSettingsString(autoPopupProperty);\n\n        if(autoPopup != null && autoPopup.equalsIgnoreCase(\"yes\"))\n            autoPopupNewMessage = true;\n\n        // Load the \"sendMessageCommand\" property.\n        String messageCommandProperty\n            = \"service.gui.SEND_MESSAGE_COMMAND\";\n        String messageCommand = configService.getString(messageCommandProperty);\n\n        if(messageCommand == null)\n            messageCommand\n                = GuiActivator.getResources()\n                    .getSettingsString(messageCommandProperty);\n\n        if(messageCommand == null || messageCommand.length() == 0)\n            sendMessageCommand = messageCommand;\n\n        // Load the showCallPanel property.\n        String callPanelShown = configService.getString(\n            \"net.java.sip.communicator.impl.gui.showCallPanel\");\n\n        if(callPanelShown != null && callPanelShown.length() > 0)\n        {\n            isCallPanelShown = Boolean.parseBoolean(callPanelShown);\n        }\n\n        // Load the \"showOffline\" property.\n        String showOffline = configService.getString(\n            \"net.java.sip.communicator.impl.gui.showOffline\");\n        \n        if(showOffline != null && showOffline.length() > 0)\n        {\n            isShowOffline = Boolean.parseBoolean(showOffline);\n        }\n\n        // Load the \"showApplication\" property.\n        String isVisible = configService.getString(\n            \"net.java.sip.communicator.impl.systray.showApplication\");\n\n        if(isVisible != null && isVisible.length() > 0)\n        {\n            isApplicationVisible = new Boolean(isVisible).booleanValue();\n        }\n\n        // Load the \"showAppQuitWarning\" property.\n        String quitWarningShown = configService.getString(\n            \"net.java.sip.communicator.impl.gui.quitWarningShown\");\n\n        if(quitWarningShown != null && quitWarningShown.length() > 0)\n        {\n            isQuitWarningShown\n                = Boolean.parseBoolean(quitWarningShown);\n        }\n\n        // Load the \"sendTypingNotifications\" property.\n        String isSendTypingNotifProperty = \n            \"service.gui.SEND_TYPING_NOTIFICATIONS_ENABLED\";\n        String isSendTypingNotif = \n            configService.getString(isSendTypingNotifProperty);\n\n        if(isSendTypingNotif == null)\n            isSendTypingNotif = \n                GuiActivator.getResources().\n                    getSettingsString(isSendTypingNotifProperty);\n\n        if(isSendTypingNotif != null && isSendTypingNotif.length() > 0)\n        {\n            isSendTypingNotifications\n                = Boolean.parseBoolean(isSendTypingNotif);\n        }\n\n        // Load the \"isMoveContactConfirmationRequested\" property.\n        String isMoveContactConfirmationRequestedString\n            = configService.getString(\n            \"net.java.sip.communicator.impl.gui.isMoveContactConfirmationRequested\");\n\n        if(isMoveContactConfirmationRequestedString != null\n            && isMoveContactConfirmationRequestedString.length() > 0)\n        {\n            isMoveContactConfirmationRequested\n                = Boolean.parseBoolean(isMoveContactConfirmationRequestedString);\n        }\n\n        // Load the \"isMultiChatWindowEnabled\" property.\n        String isMultiChatWindowEnabledStringProperty\n            = \"service.gui.IS_MULTI_CHAT_WINDOW_ENABLED\";\n\n        String isMultiChatWindowEnabledString\n            = configService.getString(isMultiChatWindowEnabledStringProperty);\n\n        if(isMultiChatWindowEnabledString == null)\n            isMultiChatWindowEnabledString = \n                GuiActivator.getResources().\n                    getSettingsString(isMultiChatWindowEnabledStringProperty);\n\n        if(isMultiChatWindowEnabledString != null\n            && isMultiChatWindowEnabledString.length() > 0)\n        {\n            isMultiChatWindowEnabled\n                = Boolean.parseBoolean(isMultiChatWindowEnabledString);\n        }\n\n        // Load the \"isLeaveChatroomOnWindowCloseEnabled\" property.\n        String isLeaveChatRoomOnWindowCloseEnabledStringProperty\n            = \"service.gui.LEAVE_CHATROOM_ON_WINDOW_CLOSE\";\n\n        String isLeaveChatRoomOnWindowCloseEnabledString\n            = configService.getString(isLeaveChatRoomOnWindowCloseEnabledStringProperty);\n\n        if(isLeaveChatRoomOnWindowCloseEnabledString == null)\n            isLeaveChatRoomOnWindowCloseEnabledString =\n                GuiActivator.getResources().\n                getSettingsString(isLeaveChatRoomOnWindowCloseEnabledStringProperty);\n\n        if(isLeaveChatRoomOnWindowCloseEnabledString != null\n            && isLeaveChatRoomOnWindowCloseEnabledString.length() > 0)\n        {\n            isLeaveChatRoomOnWindowCloseEnabled\n                = new Boolean(isLeaveChatRoomOnWindowCloseEnabledString)\n                    .booleanValue();\n        }\n\n        // Load the \"isHistoryLoggingEnabled\" property.\n        String isHistoryLoggingEnabledString\n            = configService.getString(\n            \"net.java.sip.communicator.impl.gui.isHistoryLoggingEnabled\");\n\n        if(isHistoryLoggingEnabledString != null\n            && isHistoryLoggingEnabledString.length() > 0)\n        {\n            isHistoryLoggingEnabled\n                = Boolean.parseBoolean(isHistoryLoggingEnabledString);\n        }\n\n        // Load the \"isHistoryShown\" property.\n        String isHistoryShownStringProperty = \n            \"service.gui.IS_MESSAGE_HISTORY_SHOWN\";\n\n        String isHistoryShownString\n            = configService.getString(isHistoryShownStringProperty);\n\n        if(isHistoryShownString == null)\n            isHistoryShownString = \n                GuiActivator.getResources().\n                    getSettingsString(isHistoryShownStringProperty);\n\n        if(isHistoryShownString != null\n            && isHistoryShownString.length() > 0)\n        {\n            isHistoryShown\n                = Boolean.parseBoolean(isHistoryShownString);\n        }\n\n        // Load the \"chatHistorySize\" property.\n        String chatHistorySizeStringProperty =\n            \"service.gui.MESSAGE_HISTORY_SIZE\";\n        String chatHistorySizeString\n            = configService.getString(chatHistorySizeStringProperty);\n\n        if(chatHistorySizeString == null)\n            chatHistorySizeString = \n                GuiActivator.getResources().\n                    getSettingsString(chatHistorySizeStringProperty);\n\n        if(chatHistorySizeString != null\n            && chatHistorySizeString.length() > 0)\n        {\n            chatHistorySize = Integer.parseInt(chatHistorySizeString);\n        }\n\n        // Load the \"CHAT_WRITE_AREA_SIZE\" property.\n        String chatWriteAreaSizeStringProperty =\n            \"net.java.sip.communicator.impl.gui.CHAT_WRITE_AREA_SIZE\";\n        String chatWriteAreaSizeString\n            = configService.getString(chatWriteAreaSizeStringProperty);\n\n        if(chatWriteAreaSizeString == null)\n            chatWriteAreaSizeString = \n                GuiActivator.getResources().\n                    getSettingsString(chatWriteAreaSizeStringProperty);\n\n        if(chatWriteAreaSizeString != null\n            && chatWriteAreaSizeString.length() > 0)\n        {\n            chatWriteAreaSize\n                = Integer.parseInt(chatWriteAreaSizeString);\n        }\n\n        // Load the \"isTransparentWindowEnabled\" property.\n        String isTransparentWindowEnabledProperty =\n            \"impl.gui.IS_TRANSPARENT_WINDOW_ENABLED\";\n\n        String isTransparentWindowEnabledString\n            = configService.getString(isTransparentWindowEnabledProperty);\n\n        if(isTransparentWindowEnabledString == null)\n            isTransparentWindowEnabledString = \n                GuiActivator.getResources().\n                    getSettingsString(isTransparentWindowEnabledProperty);\n\n        if(isTransparentWindowEnabledString != null\n            && isTransparentWindowEnabledString.length() > 0)\n        {\n            isTransparentWindowEnabled\n                = Boolean.parseBoolean(isTransparentWindowEnabledString);\n        }\n\n        // Load the \"windowTransparency\" property.\n        String windowTransparencyProperty =\n            \"impl.gui.WINDOW_TRANSPARENCY\";\n\n        String windowTransparencyString\n            = configService.getString(windowTransparencyProperty);\n\n        if(windowTransparencyString == null)\n            windowTransparencyString = \n                GuiActivator.getResources().\n                    getSettingsString(windowTransparencyProperty);\n\n        if(windowTransparencyString != null\n            && windowTransparencyString.length() > 0)\n        {\n            windowTransparency\n                = Integer.parseInt(windowTransparencyString);\n        }\n\n        // Load the \"isWindowDecorated\" property.\n        String isWindowDecoratedProperty\n            = \"impl.gui.IS_WINDOW_DECORATED\";\n\n        String isWindowDecoratedString\n            = configService.getString(isWindowDecoratedProperty);\n\n        if(isWindowDecoratedString == null)\n            isWindowDecoratedString = \n                GuiActivator.getResources().\n                    getSettingsString(isWindowDecoratedProperty);\n\n        if(isWindowDecoratedString != null\n            && isWindowDecoratedString.length() > 0)\n        {\n            isWindowDecorated\n                = Boolean.parseBoolean(isWindowDecoratedString);\n        }\n\n        // Load the \"isChatToolbarVisible\" property\n        isChatToolbarVisible\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.chat.ChatWindow.showToolbar\",\n                true);\n        // Load the \"isChatToolbarVisible\" property\n        isChatStylebarVisible\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.chat.ChatWindow.showStylebar\",\n                true);\n\n        // Load the \"isShowSmileys\" property\n        isShowSmileys\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.chat.ChatWindow.showSmileys\",\n                true);\n\n        // Load the \"lastContactParent\" property.\n        lastContactParent = configService.getString(\n            \"net.java.sip.communicator.impl.gui.addcontact.lastContactParent\");\n\n        // Load the \"sendFileLastDir\" property.\n        sendFileLastDir = configService.getString(\n            \"net.java.sip.communicator.impl.gui.chat.filetransfer.SEND_FILE_LAST_DIR\");\n    }","id":2021,"modified_method":"/**\n     * Loads all user interface configurations.\n     */\n    public static void loadGuiConfigurations()\n    {\n        configService.addPropertyChangeListener(\n            new ConfigurationChangeListener());\n\n        // Load the \"auPopupNewMessage\" property.\n        String autoPopupProperty = \n            \"service.gui.AUTO_POPUP_NEW_MESSAGE\";\n\n        String autoPopup = configService.getString(autoPopupProperty);\n\n        if(autoPopup == null)\n            autoPopup = GuiActivator.getResources().\n                getSettingsString(autoPopupProperty);\n\n        if(autoPopup != null && autoPopup.equalsIgnoreCase(\"yes\"))\n            autoPopupNewMessage = true;\n\n        // Load the \"sendMessageCommand\" property.\n        String messageCommandProperty\n            = \"service.gui.SEND_MESSAGE_COMMAND\";\n        String messageCommand = configService.getString(messageCommandProperty);\n\n        if(messageCommand == null)\n            messageCommand\n                = GuiActivator.getResources()\n                    .getSettingsString(messageCommandProperty);\n\n        if(messageCommand == null || messageCommand.length() == 0)\n            sendMessageCommand = messageCommand;\n\n        // Load the showCallPanel property.\n        String callPanelShown = configService.getString(\n            \"net.java.sip.communicator.impl.gui.showCallPanel\");\n\n        if(callPanelShown != null && callPanelShown.length() > 0)\n        {\n            isCallPanelShown = Boolean.parseBoolean(callPanelShown);\n        }\n\n        // Load the \"showOffline\" property.\n        String showOffline = configService.getString(\n            \"net.java.sip.communicator.impl.gui.showOffline\");\n        \n        if(showOffline != null && showOffline.length() > 0)\n        {\n            isShowOffline = Boolean.parseBoolean(showOffline);\n        }\n\n        // Load the \"showApplication\" property.\n        String isVisible = configService.getString(\n            \"net.java.sip.communicator.impl.systray.showApplication\");\n\n        if(isVisible != null && isVisible.length() > 0)\n        {\n            isApplicationVisible = new Boolean(isVisible).booleanValue();\n        }\n\n        // Load the \"showAppQuitWarning\" property.\n        String quitWarningShown = configService.getString(\n            \"net.java.sip.communicator.impl.gui.quitWarningShown\");\n\n        if(quitWarningShown != null && quitWarningShown.length() > 0)\n        {\n            isQuitWarningShown\n                = Boolean.parseBoolean(quitWarningShown);\n        }\n\n        // Load the \"sendTypingNotifications\" property.\n        String isSendTypingNotifProperty = \n            \"service.gui.SEND_TYPING_NOTIFICATIONS_ENABLED\";\n        String isSendTypingNotif = \n            configService.getString(isSendTypingNotifProperty);\n\n        if(isSendTypingNotif == null)\n            isSendTypingNotif = \n                GuiActivator.getResources().\n                    getSettingsString(isSendTypingNotifProperty);\n\n        if(isSendTypingNotif != null && isSendTypingNotif.length() > 0)\n        {\n            isSendTypingNotifications\n                = Boolean.parseBoolean(isSendTypingNotif);\n        }\n\n        // Load the \"isMoveContactConfirmationRequested\" property.\n        String isMoveContactConfirmationRequestedString\n            = configService.getString(\n            \"net.java.sip.communicator.impl.gui.isMoveContactConfirmationRequested\");\n\n        if(isMoveContactConfirmationRequestedString != null\n            && isMoveContactConfirmationRequestedString.length() > 0)\n        {\n            isMoveContactConfirmationRequested\n                = Boolean.parseBoolean(isMoveContactConfirmationRequestedString);\n        }\n\n        // Load the \"isMultiChatWindowEnabled\" property.\n        String isMultiChatWindowEnabledStringProperty\n            = \"service.gui.IS_MULTI_CHAT_WINDOW_ENABLED\";\n\n        String isMultiChatWindowEnabledString\n            = configService.getString(isMultiChatWindowEnabledStringProperty);\n\n        if(isMultiChatWindowEnabledString == null)\n            isMultiChatWindowEnabledString = \n                GuiActivator.getResources().\n                    getSettingsString(isMultiChatWindowEnabledStringProperty);\n\n        if(isMultiChatWindowEnabledString != null\n            && isMultiChatWindowEnabledString.length() > 0)\n        {\n            isMultiChatWindowEnabled\n                = Boolean.parseBoolean(isMultiChatWindowEnabledString);\n        }\n\n        // Load the \"isLeaveChatroomOnWindowCloseEnabled\" property.\n        String isLeaveChatRoomOnWindowCloseEnabledStringProperty\n            = \"service.gui.LEAVE_CHATROOM_ON_WINDOW_CLOSE\";\n\n        String isLeaveChatRoomOnWindowCloseEnabledString\n            = configService.getString(isLeaveChatRoomOnWindowCloseEnabledStringProperty);\n\n        if(isLeaveChatRoomOnWindowCloseEnabledString == null)\n            isLeaveChatRoomOnWindowCloseEnabledString =\n                GuiActivator.getResources().\n                getSettingsString(isLeaveChatRoomOnWindowCloseEnabledStringProperty);\n\n        if(isLeaveChatRoomOnWindowCloseEnabledString != null\n            && isLeaveChatRoomOnWindowCloseEnabledString.length() > 0)\n        {\n            isLeaveChatRoomOnWindowCloseEnabled\n                = new Boolean(isLeaveChatRoomOnWindowCloseEnabledString)\n                    .booleanValue();\n        }\n\n        // Load the \"isHistoryLoggingEnabled\" property.\n        String isHistoryLoggingEnabledString\n            = configService.getString(\n            \"net.java.sip.communicator.impl.gui.isHistoryLoggingEnabled\");\n\n        if(isHistoryLoggingEnabledString != null\n            && isHistoryLoggingEnabledString.length() > 0)\n        {\n            isHistoryLoggingEnabled\n                = Boolean.parseBoolean(isHistoryLoggingEnabledString);\n        }\n\n        // Load the \"isHistoryShown\" property.\n        String isHistoryShownStringProperty = \n            \"service.gui.IS_MESSAGE_HISTORY_SHOWN\";\n\n        String isHistoryShownString\n            = configService.getString(isHistoryShownStringProperty);\n\n        if(isHistoryShownString == null)\n            isHistoryShownString = \n                GuiActivator.getResources().\n                    getSettingsString(isHistoryShownStringProperty);\n\n        if(isHistoryShownString != null\n            && isHistoryShownString.length() > 0)\n        {\n            isHistoryShown\n                = Boolean.parseBoolean(isHistoryShownString);\n        }\n\n        // Load the \"chatHistorySize\" property.\n        String chatHistorySizeStringProperty =\n            \"service.gui.MESSAGE_HISTORY_SIZE\";\n        String chatHistorySizeString\n            = configService.getString(chatHistorySizeStringProperty);\n\n        if(chatHistorySizeString == null)\n            chatHistorySizeString = \n                GuiActivator.getResources().\n                    getSettingsString(chatHistorySizeStringProperty);\n\n        if(chatHistorySizeString != null\n            && chatHistorySizeString.length() > 0)\n        {\n            chatHistorySize = Integer.parseInt(chatHistorySizeString);\n        }\n\n        // Load the \"CHAT_WRITE_AREA_SIZE\" property.\n        String chatWriteAreaSizeStringProperty =\n            \"net.java.sip.communicator.impl.gui.CHAT_WRITE_AREA_SIZE\";\n        String chatWriteAreaSizeString\n            = configService.getString(chatWriteAreaSizeStringProperty);\n\n        if(chatWriteAreaSizeString == null)\n            chatWriteAreaSizeString = \n                GuiActivator.getResources().\n                    getSettingsString(chatWriteAreaSizeStringProperty);\n\n        if(chatWriteAreaSizeString != null\n            && chatWriteAreaSizeString.length() > 0)\n        {\n            chatWriteAreaSize\n                = Integer.parseInt(chatWriteAreaSizeString);\n        }\n\n        // Load the \"isTransparentWindowEnabled\" property.\n        String isTransparentWindowEnabledProperty =\n            \"impl.gui.IS_TRANSPARENT_WINDOW_ENABLED\";\n\n        String isTransparentWindowEnabledString\n            = configService.getString(isTransparentWindowEnabledProperty);\n\n        if(isTransparentWindowEnabledString == null)\n            isTransparentWindowEnabledString = \n                GuiActivator.getResources().\n                    getSettingsString(isTransparentWindowEnabledProperty);\n\n        if(isTransparentWindowEnabledString != null\n            && isTransparentWindowEnabledString.length() > 0)\n        {\n            isTransparentWindowEnabled\n                = Boolean.parseBoolean(isTransparentWindowEnabledString);\n        }\n\n        // Load the \"windowTransparency\" property.\n        String windowTransparencyProperty =\n            \"impl.gui.WINDOW_TRANSPARENCY\";\n\n        String windowTransparencyString\n            = configService.getString(windowTransparencyProperty);\n\n        if(windowTransparencyString == null)\n            windowTransparencyString = \n                GuiActivator.getResources().\n                    getSettingsString(windowTransparencyProperty);\n\n        if(windowTransparencyString != null\n            && windowTransparencyString.length() > 0)\n        {\n            windowTransparency\n                = Integer.parseInt(windowTransparencyString);\n        }\n\n        // Load the \"isWindowDecorated\" property.\n        String isWindowDecoratedProperty\n            = \"impl.gui.IS_WINDOW_DECORATED\";\n\n        String isWindowDecoratedString\n            = configService.getString(isWindowDecoratedProperty);\n\n        if(isWindowDecoratedString == null)\n            isWindowDecoratedString = \n                GuiActivator.getResources().\n                    getSettingsString(isWindowDecoratedProperty);\n\n        if(isWindowDecoratedString != null\n            && isWindowDecoratedString.length() > 0)\n        {\n            isWindowDecorated\n                = Boolean.parseBoolean(isWindowDecoratedString);\n        }\n\n        // Load the \"isChatToolbarVisible\" property\n        isChatToolbarVisible\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.chat.ChatWindow.showToolbar\",\n                true);\n        // Load the \"isChatToolbarVisible\" property\n        isChatStylebarVisible\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.chat.ChatWindow.showStylebar\",\n                true);\n\n        // Load the \"isShowSmileys\" property\n        isShowSmileys\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.chat.ChatWindow.showSmileys\",\n                true);\n\n        // Load the \"lastContactParent\" property.\n        lastContactParent = configService.getString(\n            \"net.java.sip.communicator.impl.gui.addcontact.lastContactParent\");\n\n        // Load the \"sendFileLastDir\" property.\n        sendFileLastDir = configService.getString(\n            \"net.java.sip.communicator.impl.gui.chat.filetransfer.\" +\n            \"SEND_FILE_LAST_DIR\");\n\n        // Load the \"ADD_CONTACT_DISABLED\" property.\n        isAddContactDisabled\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.main.contactlist.\" +\n                \"CONTACT_ADD_DISABLED\",\n                false);\n\n        // Load the \"REMOVE_CONTACT_DISABLED\" property.\n        isRemoveContactDisabled\n            = configService.getBoolean(\n                \"net.java.sip.communicator.impl.gui.main.contactlist.\" +\n                \"CONTACT_REMOVE_DISABLED\",\n                false);\n    }","commit_id":"76cecff08d03207c38e32abd8ec81852d5521fb7","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Loads icons.\n     */\n    public void loadSkin()\n    {\n        newAccountMenuItem.setIcon(\n            new ImageIcon(ImageLoader.getImage(\n                ImageLoader.ADD_ACCOUNT_MENU_ICON)));\n        addContactItem.setIcon(\n            new ImageIcon(ImageLoader.getImage(\n                ImageLoader.ADD_CONTACT_16x16_ICON)));\n        createGroupItem.setIcon(\n            new ImageIcon(ImageLoader.getImage(\n                ImageLoader.GROUPS_16x16_ICON)));\n        myChatRoomsItem.setIcon(\n            new ImageIcon(ImageLoader.getImage(\n                ImageLoader.CHAT_ROOM_16x16_ICON)));\n\n        if(closeMenuItem != null)\n        {\n            closeMenuItem.setIcon(\n                new ImageIcon(ImageLoader.getImage(\n                    ImageLoader.QUIT_16x16_ICON)));\n        }\n    }","id":2022,"modified_method":"/**\n     * Loads icons.\n     */\n    public void loadSkin()\n    {\n        if (newAccountMenuItem != null)\n            newAccountMenuItem.setIcon(\n                new ImageIcon(ImageLoader.getImage(\n                    ImageLoader.ADD_ACCOUNT_MENU_ICON)));\n\n        if (addContactItem != null)\n            addContactItem.setIcon(\n                new ImageIcon(ImageLoader.getImage(\n                    ImageLoader.ADD_CONTACT_16x16_ICON)));\n\n        createGroupItem.setIcon(\n            new ImageIcon(ImageLoader.getImage(\n                ImageLoader.GROUPS_16x16_ICON)));\n        myChatRoomsItem.setIcon(\n            new ImageIcon(ImageLoader.getImage(\n                ImageLoader.CHAT_ROOM_16x16_ICON)));\n\n        if(closeMenuItem != null)\n        {\n            closeMenuItem.setIcon(\n                new ImageIcon(ImageLoader.getImage(\n                    ImageLoader.QUIT_16x16_ICON)));\n        }\n    }","commit_id":"76cecff08d03207c38e32abd8ec81852d5521fb7","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Creates an instance of <tt>FileMenu<\/tt>.\n     * @param parentWindow The parent <tt>ChatWindow<\/tt>.\n     */\n    public FileMenu(MainFrame parentWindow)\n    {\n        super(GuiActivator.getResources().getI18NString(\"service.gui.FILE\"));\n\n        ResourceManagementService resources = GuiActivator.getResources();\n        newAccountMenuItem = new JMenuItem(\n            resources.getI18NString(\"service.gui.NEW_ACCOUNT\"));\n        addContactItem = new JMenuItem(\n            resources.getI18NString(\"service.gui.ADD_CONTACT\") + \"...\");\n        createGroupItem = new JMenuItem(\n            resources.getI18NString(\"service.gui.CREATE_GROUP\"));\n        myChatRoomsItem = new JMenuItem(\n            resources.getI18NString(\"service.gui.MY_CHAT_ROOMS\"));\n\n        this.parentWindow = parentWindow;\n\n        Boolean showAccountConfig = GuiActivator.getConfigurationService()\n            .getBoolean(ConfigurationFrame.SHOW_ACCOUNT_CONFIG_PROPERTY, true);\n\n        if (showAccountConfig.booleanValue())\n            this.add(newAccountMenuItem);\n\n        this.addSeparator();\n\n        this.add(addContactItem);\n        this.add(createGroupItem);\n\n        this.addSeparator();\n\n        this.add(myChatRoomsItem);\n\n        registerCloseMenuItem();\n\n        // All items are now instantiated and could safely load the skin.\n        loadSkin();\n\n        //this.addContactItem.setIcon(new ImageIcon(ImageLoader\n        //        .getImage(ImageLoader.ADD_CONTACT_16x16_ICON)));\n\n        newAccountMenuItem.setName(\"newAccount\");\n        addContactItem.setName(\"addContact\");\n        createGroupItem.setName(\"createGroup\");\n        myChatRoomsItem.setName(\"myChatRooms\");\n\n        newAccountMenuItem.addActionListener(this);\n        addContactItem.addActionListener(this);\n        createGroupItem.addActionListener(this);\n        myChatRoomsItem.addActionListener(this);\n\n        this.setMnemonic(resources\n            .getI18nMnemonic(\"service.gui.FILE\"));\n        newAccountMenuItem.setMnemonic(resources\n            .getI18nMnemonic(\"service.gui.NEW_ACCOUNT\"));\n        addContactItem.setMnemonic(resources\n            .getI18nMnemonic(\"service.gui.ADD_CONTACT\"));\n        createGroupItem.setMnemonic(resources\n            .getI18nMnemonic(\"service.gui.CREATE_GROUP\"));\n        myChatRoomsItem.setMnemonic(resources\n            .getI18nMnemonic(\"service.gui.MY_CHAT_ROOMS\"));\n    }","id":2023,"modified_method":"/**\n     * Creates an instance of <tt>FileMenu<\/tt>.\n     * @param parentWindow The parent <tt>ChatWindow<\/tt>.\n     */\n    public FileMenu(MainFrame parentWindow)\n    {\n        super(GuiActivator.getResources().getI18NString(\"service.gui.FILE\"));\n\n        ResourceManagementService resources = GuiActivator.getResources();\n        createGroupItem = new JMenuItem(\n            resources.getI18NString(\"service.gui.CREATE_GROUP\"));\n        myChatRoomsItem = new JMenuItem(\n            resources.getI18NString(\"service.gui.MY_CHAT_ROOMS\"));\n\n        this.parentWindow = parentWindow;\n\n        Boolean showAccountConfig = GuiActivator.getConfigurationService()\n            .getBoolean(ConfigurationFrame.SHOW_ACCOUNT_CONFIG_PROPERTY, true);\n\n        if (showAccountConfig.booleanValue())\n        {\n            newAccountMenuItem = new JMenuItem(\n                resources.getI18NString(\"service.gui.NEW_ACCOUNT\"));\n\n            this.add(newAccountMenuItem);\n\n            newAccountMenuItem.setName(\"newAccount\");\n\n            newAccountMenuItem.addActionListener(this);\n\n            newAccountMenuItem.setMnemonic(resources\n                .getI18nMnemonic(\"service.gui.NEW_ACCOUNT\"));\n        }\n\n        this.addSeparator();\n\n        if (!ConfigurationManager.isAddContactDisabled())\n        {\n            addContactItem = new JMenuItem(\n                resources.getI18NString(\"service.gui.ADD_CONTACT\") + \"...\");\n\n            this.add(addContactItem);\n\n            addContactItem.setName(\"addContact\");\n\n            addContactItem.addActionListener(this);\n\n            addContactItem.setMnemonic(resources\n                .getI18nMnemonic(\"service.gui.ADD_CONTACT\"));\n        }\n\n        this.add(createGroupItem);\n\n        this.addSeparator();\n\n        this.add(myChatRoomsItem);\n\n        registerCloseMenuItem();\n\n        // All items are now instantiated and could safely load the skin.\n        loadSkin();\n\n        //this.addContactItem.setIcon(new ImageIcon(ImageLoader\n        //        .getImage(ImageLoader.ADD_CONTACT_16x16_ICON)));\n\n        createGroupItem.setName(\"createGroup\");\n        myChatRoomsItem.setName(\"myChatRooms\");\n\n        createGroupItem.addActionListener(this);\n        myChatRoomsItem.addActionListener(this);\n\n        this.setMnemonic(resources\n            .getI18nMnemonic(\"service.gui.FILE\"));\n\n        createGroupItem.setMnemonic(resources\n            .getI18nMnemonic(\"service.gui.CREATE_GROUP\"));\n        myChatRoomsItem.setMnemonic(resources\n            .getI18nMnemonic(\"service.gui.MY_CHAT_ROOMS\"));\n    }","commit_id":"76cecff08d03207c38e32abd8ec81852d5521fb7","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Creates an instance of GroupRightButtonMenu.\n     * \n     * @param mainFrame The parent <tt>MainFrame<\/tt> window.\n     * @param group The <tt>MetaContactGroup<\/tt> for which the menu is opened.\n     */\n    public GroupRightButtonMenu(MainFrame mainFrame, MetaContactGroup group)\n    {\n        this.group = group;\n        this.mainFrame = mainFrame;\n\n        this.add(addContactItem);\n\n        this.addSeparator();\n\n        this.add(renameGroupItem);\n        this.add(removeGroupItem);\n\n        this.addContactItem.setMnemonic(GuiActivator.getResources()\n            .getI18nMnemonic(\"service.gui.ADD_CONTACT\"));\n\n        this.renameGroupItem.setMnemonic(GuiActivator.getResources()\n            .getI18nMnemonic(\"service.gui.RENAME_GROUP\"));\n\n        this.removeGroupItem.setMnemonic(GuiActivator.getResources()\n            .getI18nMnemonic(\"service.gui.REMOVE_GROUP\"));\n\n        this.addContactItem.addActionListener(this);\n        this.renameGroupItem.addActionListener(this);\n        this.removeGroupItem.addActionListener(this);\n\n        loadSkin();\n\n        this.initPluginComponents();\n    }","id":2024,"modified_method":"/**\n     * Creates an instance of GroupRightButtonMenu.\n     * \n     * @param mainFrame The parent <tt>MainFrame<\/tt> window.\n     * @param group The <tt>MetaContactGroup<\/tt> for which the menu is opened.\n     */\n    public GroupRightButtonMenu(MainFrame mainFrame, MetaContactGroup group)\n    {\n        this.group = group;\n        this.mainFrame = mainFrame;\n\n        if (!ConfigurationManager.isAddContactDisabled())\n            this.add(addContactItem);\n\n        this.addSeparator();\n\n        this.add(renameGroupItem);\n        this.add(removeGroupItem);\n\n        this.addContactItem.setMnemonic(GuiActivator.getResources()\n            .getI18nMnemonic(\"service.gui.ADD_CONTACT\"));\n\n        this.renameGroupItem.setMnemonic(GuiActivator.getResources()\n            .getI18nMnemonic(\"service.gui.RENAME_GROUP\"));\n\n        this.removeGroupItem.setMnemonic(GuiActivator.getResources()\n            .getI18nMnemonic(\"service.gui.REMOVE_GROUP\"));\n\n        this.addContactItem.addActionListener(this);\n        this.renameGroupItem.addActionListener(this);\n        this.removeGroupItem.addActionListener(this);\n\n        loadSkin();\n\n        this.initPluginComponents();\n    }","commit_id":"76cecff08d03207c38e32abd8ec81852d5521fb7","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Initializes the menu, by adding all containing menu items.\n     */\n    private void init()\n    {\n        addContactItem.setText(GuiActivator.getResources()\n            .getI18NString(\"service.gui.ADD_CONTACT_TO\")\n                + \" \" + metaContact.getDisplayName());\n\n        //Initialize moveTo menu.\n        Iterator<MetaContactGroup> groups\n            = GuiActivator.getContactListService().getRoot().getSubgroups();\n\n        if(groups.hasNext())\n        {\n            JLabel infoLabel = new JLabel(\n                GuiActivator.getResources()\n                    .getI18NString(\"service.gui.SELECT_GROUP\"));\n\n            infoLabel.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 0));\n            infoLabel.setFont(infoLabel.getFont().deriveFont(Font.BOLD));\n\n            this.moveToMenu.add(infoLabel);\n            this.moveToMenu.addSeparator();\n        }\n\n        while (groups.hasNext())\n        {\n            MetaContactGroup group = groups.next();\n\n            JMenuItem menuItem = new JMenuItem(group.getGroupName());\n\n            menuItem.setName(moveToPrefix + group.getMetaUID());\n            menuItem.addActionListener(this);\n\n            this.moveToMenu.add(menuItem);\n        }\n\n        //Initialize removeContact menu.\n        Iterator<Contact> contacts = metaContact.getContacts();\n\n        if (metaContact.getContactCount() > 1)\n        {\n            JMenuItem allItem = new JMenuItem(allContactsString);\n            JMenuItem allItem1 = new JMenuItem(allContactsString);\n\n            allItem.addActionListener(this);\n            allItem1.addActionListener(this);\n\n            allItem.setName(removeContactPrefix + \"allContacts\");\n            allItem1.setName(moveSubcontactPrefix + \"allContacts\");\n\n            this.removeContactMenu.add(allItem);\n            this.moveSubcontactMenu.add(allItem1);\n            this.removeContactMenu.addSeparator();\n            this.moveSubcontactMenu.addSeparator();\n        }\n\n        while (contacts.hasNext())\n        {\n            Contact contact = contacts.next();\n\n            ProtocolProviderService protocolProvider\n                = contact.getProtocolProvider();\n\n            String contactAddress = contact.getAddress();\n\n            Icon protocolIcon = new ImageIcon(\n                    createContactStatusImage(contact));\n\n            this.removeContactMenu.add(\n                createMenuItem( contactAddress,\n                            removeContactPrefix + contact.getAddress()\n                            + protocolProvider.getProtocolName(),\n                            protocolIcon));\n\n            this.moveSubcontactMenu.add(\n                createMenuItem( contactAddress,\n                            moveSubcontactPrefix + contact.getAddress()\n                            + protocolProvider.getProtocolName(),\n                            protocolIcon));\n\n            // add all the contacts that support telephony to the call menu\n            if (metaContact.getContactCount() > 1)\n            {\n                if (protocolProvider.getOperationSet(\n                        OperationSetBasicTelephony.class) != null &&\n                        hasContactCapabilities(contact,\n                                OperationSetBasicTelephony.class))\n                {\n                    callContactMenu.add(\n                        createMenuItem( contactAddress,\n                                        callContactPrefix + contact.getAddress()\n                                        + protocolProvider.getProtocolName(),\n                                        protocolIcon));\n                }\n\n                if (protocolProvider.getOperationSet(\n                        OperationSetVideoTelephony.class) != null &&\n                        hasContactCapabilities(contact,\n                                OperationSetVideoTelephony.class))\n                {\n                    videoCallMenu.add(\n                        createMenuItem( contactAddress,\n                                        videoCallPrefix + contact.getAddress()\n                                        + protocolProvider.getProtocolName(),\n                                        protocolIcon));\n                }\n\n                if (protocolProvider.getOperationSet(\n                        OperationSetDesktopSharingServer.class) != null &&\n                        hasContactCapabilities(contact,\n                                OperationSetDesktopSharingServer.class))\n                {\n                    multiContactFullShareMenu.add(\n                        createMenuItem( contactAddress,\n                                        fullDesktopSharingPrefix\n                                        + contact.getAddress()\n                                        + protocolProvider.getProtocolName(),\n                                        protocolIcon));\n\n                    multiContactRegionShareMenu.add(\n                        createMenuItem( contactAddress,\n                                        regionDesktopSharingPrefix\n                                        + contact.getAddress()\n                                        + protocolProvider.getProtocolName(),\n                                        protocolIcon));\n                }\n            }\n        }\n\n        this.add(sendMessageItem);\n\n        if (metaContact.getDefaultContact(\n            OperationSetSmsMessaging.class) != null)\n        {\n            this.add(sendSmsItem);\n            sendSmsItem.addActionListener(this);\n            sendSmsItem.setName(\"sendSms\");\n        }\n\n        if (callContactMenu.getItemCount() > 1)\n        {\n            this.add(callContactMenu);\n        }\n        else\n        {\n            this.add(callItem);\n            this.callItem.setName(\"call\");\n            this.callItem.addActionListener(this);\n        }\n\n        if (videoCallMenu.getItemCount() > 1)\n        {\n            this.add(videoCallMenu);\n        }\n        else\n        {\n            this.add(videoCallItem);\n            this.videoCallItem.setName(\"videoCall\");\n            this.videoCallItem.addActionListener(this);\n        }\n\n        if (multiContactFullShareMenu.getItemCount() > 1)\n        {\n            add(multiContactFullShareMenu);\n            add(multiContactRegionShareMenu);\n        }\n        else\n        {\n            fullShareMenuItem.setName(\"shareFullScreen\");\n            fullShareMenuItem.addActionListener(this);\n            add(fullShareMenuItem);\n\n            regionShareMenuItem.setName(\"shareRegion\");\n            regionShareMenuItem.addActionListener(this);\n            add(regionShareMenuItem);\n        }\n\n        add(sendFileItem);\n\n        addSeparator();\n\n        add(moveToMenu);\n        add(moveSubcontactMenu);\n\n        addSeparator();\n\n        add(addContactItem);\n\n        addSeparator();\n\n        add(removeContactMenu);\n        add(renameContactItem);\n\n        addSeparator();\n\n        add(viewHistoryItem);\n\n        initPluginComponents();\n\n        sendMessageItem.setName(\"sendMessage\");\n        sendFileItem.setName(\"sendFile\");\n        moveToMenu.setName(\"moveToGroup\");\n        addContactItem.setName(\"addContact\");\n        renameContactItem.setName(\"renameContact\");\n        viewHistoryItem.setName(\"viewHistory\");\n\n        sendMessageItem.addActionListener(this);\n        sendFileItem.addActionListener(this);\n        renameContactItem.addActionListener(this);\n        viewHistoryItem.addActionListener(this);\n        addContactItem.addActionListener(this);\n\n        // Disable all menu items that do nothing.\n        if (metaContact.getDefaultContact(\n            OperationSetFileTransfer.class) == null)\n            this.sendFileItem.setEnabled(false);\n\n        if (metaContact.getDefaultContact(\n            OperationSetBasicTelephony.class) == null)\n            this.callItem.setEnabled(false);\n\n        if (metaContact.getDefaultContact(\n            OperationSetVideoTelephony.class) == null)\n            this.videoCallItem.setEnabled(false);\n\n        if (metaContact.getDefaultContact(\n            OperationSetDesktopSharingServer.class) == null)\n        {\n            fullShareMenuItem.setEnabled(false);\n            regionShareMenuItem.setEnabled(false);\n        }\n\n        if (metaContact.getDefaultContact(\n            OperationSetBasicInstantMessaging.class) == null)\n            this.sendMessageItem.setEnabled(false);\n    }","id":2025,"modified_method":"/**\n     * Initializes the menu, by adding all containing menu items.\n     */\n    private void init()\n    {\n        addContactItem.setText(GuiActivator.getResources()\n            .getI18NString(\"service.gui.ADD_CONTACT_TO\")\n                + \" \" + metaContact.getDisplayName());\n\n        //Initialize moveTo menu.\n        Iterator<MetaContactGroup> groups\n            = GuiActivator.getContactListService().getRoot().getSubgroups();\n\n        if(groups.hasNext())\n        {\n            JLabel infoLabel = new JLabel(\n                GuiActivator.getResources()\n                    .getI18NString(\"service.gui.SELECT_GROUP\"));\n\n            infoLabel.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 0));\n            infoLabel.setFont(infoLabel.getFont().deriveFont(Font.BOLD));\n\n            this.moveToMenu.add(infoLabel);\n            this.moveToMenu.addSeparator();\n        }\n\n        while (groups.hasNext())\n        {\n            MetaContactGroup group = groups.next();\n\n            JMenuItem menuItem = new JMenuItem(group.getGroupName());\n\n            menuItem.setName(moveToPrefix + group.getMetaUID());\n            menuItem.addActionListener(this);\n\n            this.moveToMenu.add(menuItem);\n        }\n\n        //Initialize removeContact menu.\n        Iterator<Contact> contacts = metaContact.getContacts();\n\n        if (metaContact.getContactCount() > 1)\n        {\n            JMenuItem allItem = new JMenuItem(allContactsString);\n            JMenuItem allItem1 = new JMenuItem(allContactsString);\n\n            allItem.addActionListener(this);\n            allItem1.addActionListener(this);\n\n            allItem.setName(removeContactPrefix + \"allContacts\");\n            allItem1.setName(moveSubcontactPrefix + \"allContacts\");\n\n            this.removeContactMenu.add(allItem);\n            this.moveSubcontactMenu.add(allItem1);\n            this.removeContactMenu.addSeparator();\n            this.moveSubcontactMenu.addSeparator();\n        }\n\n        while (contacts.hasNext())\n        {\n            Contact contact = contacts.next();\n\n            ProtocolProviderService protocolProvider\n                = contact.getProtocolProvider();\n\n            String contactAddress = contact.getAddress();\n\n            Icon protocolIcon = new ImageIcon(\n                    createContactStatusImage(contact));\n\n            this.removeContactMenu.add(\n                createMenuItem( contactAddress,\n                            removeContactPrefix + contact.getAddress()\n                            + protocolProvider.getProtocolName(),\n                            protocolIcon));\n\n            this.moveSubcontactMenu.add(\n                createMenuItem( contactAddress,\n                            moveSubcontactPrefix + contact.getAddress()\n                            + protocolProvider.getProtocolName(),\n                            protocolIcon));\n\n            // add all the contacts that support telephony to the call menu\n            if (metaContact.getContactCount() > 1)\n            {\n                if (protocolProvider.getOperationSet(\n                        OperationSetBasicTelephony.class) != null &&\n                        hasContactCapabilities(contact,\n                                OperationSetBasicTelephony.class))\n                {\n                    callContactMenu.add(\n                        createMenuItem( contactAddress,\n                                        callContactPrefix + contact.getAddress()\n                                        + protocolProvider.getProtocolName(),\n                                        protocolIcon));\n                }\n\n                if (protocolProvider.getOperationSet(\n                        OperationSetVideoTelephony.class) != null &&\n                        hasContactCapabilities(contact,\n                                OperationSetVideoTelephony.class))\n                {\n                    videoCallMenu.add(\n                        createMenuItem( contactAddress,\n                                        videoCallPrefix + contact.getAddress()\n                                        + protocolProvider.getProtocolName(),\n                                        protocolIcon));\n                }\n\n                if (protocolProvider.getOperationSet(\n                        OperationSetDesktopSharingServer.class) != null &&\n                        hasContactCapabilities(contact,\n                                OperationSetDesktopSharingServer.class))\n                {\n                    multiContactFullShareMenu.add(\n                        createMenuItem( contactAddress,\n                                        fullDesktopSharingPrefix\n                                        + contact.getAddress()\n                                        + protocolProvider.getProtocolName(),\n                                        protocolIcon));\n\n                    multiContactRegionShareMenu.add(\n                        createMenuItem( contactAddress,\n                                        regionDesktopSharingPrefix\n                                        + contact.getAddress()\n                                        + protocolProvider.getProtocolName(),\n                                        protocolIcon));\n                }\n            }\n        }\n\n        this.add(sendMessageItem);\n\n        if (metaContact.getDefaultContact(\n            OperationSetSmsMessaging.class) != null)\n        {\n            this.add(sendSmsItem);\n            sendSmsItem.addActionListener(this);\n            sendSmsItem.setName(\"sendSms\");\n        }\n\n        if (callContactMenu.getItemCount() > 1)\n        {\n            this.add(callContactMenu);\n        }\n        else\n        {\n            this.add(callItem);\n            this.callItem.setName(\"call\");\n            this.callItem.addActionListener(this);\n        }\n\n        if (videoCallMenu.getItemCount() > 1)\n        {\n            this.add(videoCallMenu);\n        }\n        else\n        {\n            this.add(videoCallItem);\n            this.videoCallItem.setName(\"videoCall\");\n            this.videoCallItem.addActionListener(this);\n        }\n\n        if (multiContactFullShareMenu.getItemCount() > 1)\n        {\n            add(multiContactFullShareMenu);\n            add(multiContactRegionShareMenu);\n        }\n        else\n        {\n            fullShareMenuItem.setName(\"shareFullScreen\");\n            fullShareMenuItem.addActionListener(this);\n            add(fullShareMenuItem);\n\n            regionShareMenuItem.setName(\"shareRegion\");\n            regionShareMenuItem.addActionListener(this);\n            add(regionShareMenuItem);\n        }\n\n        add(sendFileItem);\n\n        addSeparator();\n\n        add(moveToMenu);\n        add(moveSubcontactMenu);\n\n        addSeparator();\n\n        if (!ConfigurationManager.isAddContactDisabled())\n            add(addContactItem);\n\n        addSeparator();\n\n        if (!ConfigurationManager.isRemoveContactDisabled())\n            add(removeContactMenu);\n\n        add(renameContactItem);\n\n        addSeparator();\n\n        add(viewHistoryItem);\n\n        initPluginComponents();\n\n        sendMessageItem.setName(\"sendMessage\");\n        sendFileItem.setName(\"sendFile\");\n        moveToMenu.setName(\"moveToGroup\");\n        addContactItem.setName(\"addContact\");\n        renameContactItem.setName(\"renameContact\");\n        viewHistoryItem.setName(\"viewHistory\");\n\n        sendMessageItem.addActionListener(this);\n        sendFileItem.addActionListener(this);\n        renameContactItem.addActionListener(this);\n        viewHistoryItem.addActionListener(this);\n        addContactItem.addActionListener(this);\n\n        // Disable all menu items that do nothing.\n        if (metaContact.getDefaultContact(\n            OperationSetFileTransfer.class) == null)\n            this.sendFileItem.setEnabled(false);\n\n        if (metaContact.getDefaultContact(\n            OperationSetBasicTelephony.class) == null)\n            this.callItem.setEnabled(false);\n\n        if (metaContact.getDefaultContact(\n            OperationSetVideoTelephony.class) == null)\n            this.videoCallItem.setEnabled(false);\n\n        if (metaContact.getDefaultContact(\n            OperationSetDesktopSharingServer.class) == null)\n        {\n            fullShareMenuItem.setEnabled(false);\n            regionShareMenuItem.setEnabled(false);\n        }\n\n        if (metaContact.getDefaultContact(\n            OperationSetBasicInstantMessaging.class) == null)\n            this.sendMessageItem.setEnabled(false);\n    }","commit_id":"76cecff08d03207c38e32abd8ec81852d5521fb7","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Initializes menu items.\n     */\n    private void initItems()\n    {\n        ContactDetail cDetail = sourceContact\n            .getPreferredContactDetail(OperationSetBasicTelephony.class);\n\n        // Call menu.\n        if (cDetail != null)\n            add(initCallMenu());\n\n        addContactComponent\n            = TreeContactList.createAddContactMenu(sourceContact);\n\n        if (addContactComponent != null)\n            add(addContactComponent);\n    }","id":2026,"modified_method":"/**\n     * Initializes menu items.\n     */\n    private void initItems()\n    {\n        ContactDetail cDetail = sourceContact\n            .getPreferredContactDetail(OperationSetBasicTelephony.class);\n\n        // Call menu.\n        if (cDetail != null)\n            add(initCallMenu());\n\n        // Only create the menu if the add contact functionality is enabled.\n        if (!ConfigurationManager.isAddContactDisabled())\n        {\n            addContactComponent\n                = TreeContactList.createAddContactMenu(sourceContact);\n        }\n\n        if (addContactComponent != null)\n            add(addContactComponent);\n    }","commit_id":"76cecff08d03207c38e32abd8ec81852d5521fb7","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Creates the <tt>UnknownContactPanel<\/tt> by specifying the parent window.\n     * @param window the parent window\n     */\n    public UnknownContactPanel(MainFrame window)\n    {\n        super(new BorderLayout());\n\n        this.parentWindow = window;\n\n        TransparentPanel mainPanel = new TransparentPanel(new BorderLayout());\n\n        this.add(mainPanel, BorderLayout.NORTH);\n\n        addContact.setAlignmentX(JButton.CENTER_ALIGNMENT);\n        callContact.setAlignmentX(JButton.CENTER_ALIGNMENT);\n\n        addContact.setMnemonic(GuiActivator.getResources()\n            .getI18nMnemonic(\"service.gui.ADD_CONTACT\"));\n        callContact.setMnemonic(GuiActivator.getResources()\n            .getI18nMnemonic(\"service.gui.CALL_CONTACT\"));\n\n        initTextArea(parentWindow.getCurrentSearchText());\n\n        mainPanel.add(textArea, BorderLayout.CENTER);\n\n        TransparentPanel buttonPanel\n            = new TransparentPanel(new GridLayout(0, 1));\n\n        buttonPanel.add(addContact);\n        buttonPanel.add(callContact);\n\n        TransparentPanel southPanel\n            = new TransparentPanel(new FlowLayout(FlowLayout.CENTER));\n        southPanel.add(buttonPanel);\n\n        mainPanel.add(southPanel, BorderLayout.SOUTH);\n\n        addContact.addActionListener(new ActionListener()\n        {\n            public void actionPerformed(ActionEvent e)\n            {\n                AddContactDialog dialog\n                    = new AddContactDialog(parentWindow);\n\n                dialog.setContactAddress(parentWindow.getCurrentSearchText());\n                dialog.setVisible(true);\n            }\n        });\n\n        callContact.addActionListener(new ActionListener()\n        {\n            public void actionPerformed(ActionEvent e)\n            {\n                String searchText = parentWindow.getCurrentSearchText();\n\n                if (searchText == null)\n                    return;\n\n                CallManager.createCall(searchText, callContact);\n            }\n        });\n\n        loadSkin();\n    }","id":2027,"modified_method":"/**\n     * Creates the <tt>UnknownContactPanel<\/tt> by specifying the parent window.\n     * @param window the parent window\n     */\n    public UnknownContactPanel(MainFrame window)\n    {\n        super(new BorderLayout());\n\n        this.parentWindow = window;\n\n        TransparentPanel mainPanel = new TransparentPanel(new BorderLayout());\n\n        this.add(mainPanel, BorderLayout.NORTH);\n\n        initTextArea(parentWindow.getCurrentSearchText());\n\n        mainPanel.add(textArea, BorderLayout.CENTER);\n\n        TransparentPanel buttonPanel\n            = new TransparentPanel(new GridLayout(0, 1));\n\n        if (!ConfigurationManager.isAddContactDisabled())\n        {\n            addContact.setAlignmentX(JButton.CENTER_ALIGNMENT);\n\n            addContact.setMnemonic(GuiActivator.getResources()\n                .getI18nMnemonic(\"service.gui.ADD_CONTACT\"));\n\n            buttonPanel.add(addContact);\n\n            addContact.addActionListener(new ActionListener()\n            {\n                public void actionPerformed(ActionEvent e)\n                {\n                    AddContactDialog dialog\n                        = new AddContactDialog(parentWindow);\n\n                    dialog.setContactAddress(\n                        parentWindow.getCurrentSearchText());\n                    dialog.setVisible(true);\n                }\n            });\n        }\n\n        callContact.setAlignmentX(JButton.CENTER_ALIGNMENT);\n\n        callContact.setMnemonic(GuiActivator.getResources()\n            .getI18nMnemonic(\"service.gui.CALL_CONTACT\"));\n\n        buttonPanel.add(callContact);\n\n        TransparentPanel southPanel\n            = new TransparentPanel(new FlowLayout(FlowLayout.CENTER));\n        southPanel.add(buttonPanel);\n\n        mainPanel.add(southPanel, BorderLayout.SOUTH);\n\n        callContact.addActionListener(new ActionListener()\n        {\n            public void actionPerformed(ActionEvent e)\n            {\n                String searchText = parentWindow.getCurrentSearchText();\n\n                if (searchText == null)\n                    return;\n\n                CallManager.createCall(searchText, callContact);\n            }\n        });\n\n        loadSkin();\n    }","commit_id":"76cecff08d03207c38e32abd8ec81852d5521fb7","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Initializes account combo box.\n     */\n    private void initAccountCombo()\n    {\n        Iterator<ProtocolProviderService> providers\n            = mainFrame.getProtocolProviders();\n\n        accountCombo.addItem(GuiActivator.getResources()\n            .getI18NString(\"service.gui.SELECT_ACCOUNT\"));\n\n        accountCombo.addItemListener(new ItemListener()\n        {\n            public void itemStateChanged(ItemEvent e)\n            {\n                updateAddButtonState();\n            }\n        });\n\n        while (providers.hasNext())\n        {\n            ProtocolProviderService provider = providers.next();\n\n            boolean isHidden = provider.getAccountID().getAccountProperty(\n                    ProtocolProviderFactory.IS_PROTOCOL_HIDDEN) != null;\n\n            if(isHidden)\n                continue;\n\n            OperationSet opSet\n                = provider.getOperationSet(OperationSetPresence.class);\n\n            if (opSet == null)\n                continue;\n\n            accountCombo.addItem(provider);\n\n            if (isPreferredProvider(provider.getAccountID()))\n                accountCombo.setSelectedItem(provider);\n        }\n\n        // if we have only select account option and only one account\n        // select the available account\n        if(accountCombo.getItemCount() == 2)\n            accountCombo.setSelectedIndex(1);\n    }","id":2028,"modified_method":"/**\n     * Initializes account combo box.\n     */\n    private void initAccountCombo()\n    {\n        Iterator<ProtocolProviderService> providers\n            = AccountUtils.getRegisteredProviders().iterator();\n\n        accountCombo.addItem(GuiActivator.getResources()\n            .getI18NString(\"service.gui.SELECT_ACCOUNT\"));\n\n        accountCombo.addItemListener(new ItemListener()\n        {\n            public void itemStateChanged(ItemEvent e)\n            {\n                updateAddButtonState();\n            }\n        });\n\n        while (providers.hasNext())\n        {\n            ProtocolProviderService provider = providers.next();\n\n            boolean isHidden = provider.getAccountID().getAccountProperty(\n                    ProtocolProviderFactory.IS_PROTOCOL_HIDDEN) != null;\n\n            if(isHidden)\n                continue;\n\n            OperationSet opSet\n                = provider.getOperationSet(OperationSetPresence.class);\n\n            if (opSet == null)\n                continue;\n\n            accountCombo.addItem(provider);\n\n            if (isPreferredProvider(provider.getAccountID()))\n                accountCombo.setSelectedItem(provider);\n        }\n\n        // if we have only select account option and only one account\n        // select the available account\n        if(accountCombo.getItemCount() == 2)\n            accountCombo.setSelectedIndex(1);\n    }","commit_id":"cfb8e1e091f2f778bd0e2604bb4a774a57bebcf6","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Creates an <tt>AddContactDialog<\/tt> by specifying the parent window and\n     * a meta contact, to which to add the new contact.\n     * @param parentWindow the parent window\n     * @param metaContact the meta contact, to which to add the new contact\n     */\n    public AddContactDialog(MainFrame parentWindow, MetaContact metaContact)\n    {\n        this(parentWindow);\n\n        this.metaContact = metaContact;\n\n        groupCombo.setEnabled(false);\n\n        this.setSelectedGroup(metaContact.getParentMetaContactGroup());\n\n        this.setTitle(GuiActivator.getResources()\n                        .getI18NString(\"service.gui.ADD_CONTACT_TO\")\n                         + \" \" + metaContact.getDisplayName());\n\n    }","id":2029,"modified_method":"/**\n     * Creates an <tt>AddContactDialog<\/tt> by specifying the parent window and\n     * a meta contact, to which to add the new contact.\n     * @param parentWindow the parent window\n     * @param metaContact the meta contact, to which to add the new contact\n     */\n    public AddContactDialog(Frame parentWindow, MetaContact metaContact)\n    {\n        this(parentWindow);\n\n        this.metaContact = metaContact;\n\n        groupCombo.setEnabled(false);\n\n        this.setSelectedGroup(metaContact.getParentMetaContactGroup());\n\n        this.setTitle(GuiActivator.getResources()\n                        .getI18NString(\"service.gui.ADD_CONTACT_TO\")\n                         + \" \" + metaContact.getDisplayName());\n\n    }","commit_id":"cfb8e1e091f2f778bd0e2604bb4a774a57bebcf6","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Creates an instance of <tt>AddContactDialog<\/tt> that represents a dialog\n     * that adds a new contact to an already existing meta contact.\n     * \n     * @param mainFrame The <tt>MainFrame<\/tt> parent window.\n     */\n    public AddContactDialog(MainFrame mainFrame)\n    {\n        super(mainFrame);\n\n        this.mainFrame = mainFrame;\n\n        this.setTitle(GuiActivator.getResources()\n            .getI18NString(\"service.gui.ADD_CONTACT\"));\n\n        groupCombo = createGroupCombo(this);\n\n        this.init();\n    }","id":2030,"modified_method":"/**\n     * Creates an instance of <tt>AddContactDialog<\/tt> that represents a dialog\n     * that adds a new contact to an already existing meta contact.\n     * \n     * @param parentWindow the parent window of this dialog\n     */\n    public AddContactDialog(Frame parentWindow)\n    {\n        super(parentWindow);\n\n        this.setTitle(GuiActivator.getResources()\n            .getI18NString(\"service.gui.ADD_CONTACT\"));\n\n        groupCombo = createGroupCombo(this);\n\n        this.init();\n    }","commit_id":"cfb8e1e091f2f778bd0e2604bb4a774a57bebcf6","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Registers the close menu item for all NON-MacOSX platforms.\n     * @param addSeparator whether we should add separator before the menu item.\n     */\n    private void registerCloseMenuItemNonMacOSX(boolean addSeparator)\n    {\n        closeMenuItem = new JMenuItem(\n            GuiActivator.getResources().getI18NString(\"service.gui.QUIT\"));\n\n        if(addSeparator)\n            this.addSeparator();\n        \n        this.add(closeMenuItem);\n        closeMenuItem.setName(\"close\");\n        closeMenuItem.addActionListener(this);\n        closeMenuItem.setMnemonic(GuiActivator.getResources()\n            .getI18nMnemonic(\"service.gui.QUIT\"));\n    }","id":2031,"modified_method":"/**\n     * Registers the close menu item for all NON-MacOSX platforms.\n     * @param addSeparator whether we should add separator before the menu item.\n     */\n    private void registerCloseMenuItemNonMacOSX(boolean addSeparator)\n    {\n        closeMenuItem = new JMenuItem(\n            GuiActivator.getResources().getI18NString(\"service.gui.QUIT\"));\n\n        if(addSeparator)\n            this.addSeparator();\n\n        if (!isChatMenu)\n        {\n            this.add(closeMenuItem);\n            closeMenuItem.setName(\"close\");\n            closeMenuItem.addActionListener(this);\n            closeMenuItem.setMnemonic(GuiActivator.getResources()\n                .getI18nMnemonic(\"service.gui.QUIT\"));\n        }\n    }","commit_id":"cfb8e1e091f2f778bd0e2604bb4a774a57bebcf6","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Creates an instance of <tt>FileMenu<\/tt>.\n     * @param parentWindow The parent <tt>ChatWindow<\/tt>.\n     */\n    public FileMenu(MainFrame parentWindow)\n    {\n        super(GuiActivator.getResources().getI18NString(\"service.gui.FILE\"));\n\n        ResourceManagementService resources = GuiActivator.getResources();\n        createGroupItem = new JMenuItem(\n            resources.getI18NString(\"service.gui.CREATE_GROUP\"));\n        myChatRoomsItem = new JMenuItem(\n            resources.getI18NString(\"service.gui.MY_CHAT_ROOMS\"));\n\n        this.parentWindow = parentWindow;\n\n        // whether the last item added was a separator\n        boolean endsWithSeparator = false;\n\n        if (ConfigurationUtils.isShowAccountConfig())\n        {\n            newAccountMenuItem = new JMenuItem(\n                resources.getI18NString(\"service.gui.NEW_ACCOUNT\"));\n\n            this.add(newAccountMenuItem);\n\n            newAccountMenuItem.setName(\"newAccount\");\n\n            newAccountMenuItem.addActionListener(this);\n\n            newAccountMenuItem.setMnemonic(resources\n                .getI18nMnemonic(\"service.gui.NEW_ACCOUNT\"));\n\n            // add separator only if there are other items enabled\n            if(!ConfigurationUtils.isAddContactDisabled()\n               || !ConfigurationUtils.isCreateGroupDisabled()\n               || !ConfigurationUtils.isGoToChatroomDisabled())\n            {\n                this.addSeparator();\n                endsWithSeparator = true;\n            }\n        }\n\n        if (!ConfigurationUtils.isAddContactDisabled())\n        {\n            addContactItem = new JMenuItem(\n                resources.getI18NString(\"service.gui.ADD_CONTACT\") + \"...\");\n\n            this.add(addContactItem);\n\n            addContactItem.setName(\"addContact\");\n\n            addContactItem.addActionListener(this);\n\n            addContactItem.setMnemonic(resources\n                .getI18nMnemonic(\"service.gui.ADD_CONTACT\"));\n\n            // if next item is disabled add separator here\n            // only if there is something next\n            if(ConfigurationUtils.isCreateGroupDisabled()\n               && !ConfigurationUtils.isGoToChatroomDisabled())\n            {\n                this.addSeparator();\n                endsWithSeparator = true;\n            }\n            else\n                endsWithSeparator = false;\n        }\n\n        if (!ConfigurationUtils.isCreateGroupDisabled())\n        {\n            this.add(createGroupItem);\n\n            // add separator if there is something next\n            if(!ConfigurationUtils.isGoToChatroomDisabled())\n            {\n                this.addSeparator();\n                endsWithSeparator = true;\n            }\n        }\n\n        if (!ConfigurationUtils.isGoToChatroomDisabled())\n        {\n            this.add(myChatRoomsItem);\n            endsWithSeparator = false;\n        }\n\n        registerCloseMenuItem(!endsWithSeparator);\n\n        // All items are now instantiated and could safely load the skin.\n        loadSkin();\n\n        //this.addContactItem.setIcon(new ImageIcon(ImageLoader\n        //        .getImage(ImageLoader.ADD_CONTACT_16x16_ICON)));\n\n        createGroupItem.setName(\"createGroup\");\n        myChatRoomsItem.setName(\"myChatRooms\");\n\n        createGroupItem.addActionListener(this);\n        myChatRoomsItem.addActionListener(this);\n\n        this.setMnemonic(resources\n            .getI18nMnemonic(\"service.gui.FILE\"));\n\n        createGroupItem.setMnemonic(resources\n            .getI18nMnemonic(\"service.gui.CREATE_GROUP\"));\n        myChatRoomsItem.setMnemonic(resources\n            .getI18nMnemonic(\"service.gui.MY_CHAT_ROOMS\"));\n    }","id":2032,"modified_method":"/**\n     * Creates an instance of <tt>FileMenu<\/tt>.\n     * @param parentWindow The parent <tt>ChatWindow<\/tt>.\n     */\n    public FileMenu(Frame parentWindow)\n    {\n        this(parentWindow, false);\n    }","commit_id":"cfb8e1e091f2f778bd0e2604bb4a774a57bebcf6","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Initializes a new <tt>MainMenu<\/tt> instance.\n     */\n    public MainMenu(MainFrame mainFrame)\n    {\n        super(\"service.gui.MAIN_MENU_FOREGROUND\");\n\n        addMenu(new FileMenu(mainFrame), \"service.gui.FILE\");\n        addMenu(new ToolsMenu(mainFrame), \"service.gui.TOOLS\");\n        addMenu(new HelpMenu(mainFrame), \"service.gui.HELP\");\n    }","id":2033,"modified_method":"/**\n     * Initializes a new <tt>MainMenu<\/tt> instance.\n     */\n    public MainMenu(MainFrame mainFrame)\n    {\n        super(\"service.gui.MAIN_MENU_FOREGROUND\");\n\n        addMenu(new FileMenu(mainFrame), \"service.gui.FILE\");\n        addMenu(new ToolsMenu(), \"service.gui.TOOLS\");\n        addMenu(new HelpMenu(mainFrame), \"service.gui.HELP\");\n    }","commit_id":"cfb8e1e091f2f778bd0e2604bb4a774a57bebcf6","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Initializes a new <tt>MessageWindowMenuBar<\/tt> instance.\n     * \n     * @param parentWindow the ChatWindow which is to be the parent of the new\n     * instance\n     */\n    public MessageWindowMenuBar(ChatWindow parentWindow)\n    {\n        super(\"service.gui.CHAT_MENU_FOREGROUND\");\n\n        fileMenu = new FileMenu(parentWindow);\n        editMenu = new EditMenu(parentWindow);\n        optionsMenu = new OptionsMenu(parentWindow);\n        helpMenu = new HelpMenu(parentWindow);\n\n        this.init();\n\n        pluginContainer\n            = new PluginContainer(this, Container.CONTAINER_CHAT_MENU_BAR)\n                {\n\n                    /**\n                     * Overrides\n                     * {@link PluginContainer#addComponentToContainer(Component, JComponent, int)}.\n                     * Keeps the Help menu last as it is its conventional place.\n                     *\n                     * @param component the <tt>Component<\/tt> to be added to\n                     * <tt>container<\/tt>\n                     * @param container the <tt>JComponent<\/tt> container to\n                     * which <tt>component<\/tt> is to be added\n                     * @param preferredIndex ignored because\n                     * <tt>MessageWindowMenuBar<\/tt> keeps the Help menu last as\n                     * it is its conventional place\n                     */\n                    @Override\n                    protected void addComponentToContainer(\n                            Component component,\n                            JComponent container,\n                            int preferredIndex)\n                    {\n                        /*\n                         * Apply the opaque property in order to prevent plugin\n                         * menus from looking different than the built-in menus.\n                         */\n                        if (component instanceof SIPCommMenu)\n                            ((SIPCommMenu) component).setOpaque(false);\n\n                        container.add(component, getComponentIndex(helpMenu));\n                    }\n                };\n\n        parentWindow.addChatChangeListener(new ChatChangeListener()\n        {\n            public void chatChanged(ChatPanel panel)\n            {\n                MetaContact contact\n                    = GuiActivator.getUIService().getChatContact(panel);\n\n                for (PluginComponent c : pluginContainer.getPluginComponents())\n                    c.setCurrentContact(contact);\n            }\n        });\n    }","id":2034,"modified_method":"/**\n     * Initializes a new <tt>MessageWindowMenuBar<\/tt> instance.\n     * \n     * @param parentWindow the ChatWindow which is to be the parent of the new\n     * instance\n     */\n    public MessageWindowMenuBar(ChatWindow parentWindow)\n    {\n        super(\"service.gui.CHAT_MENU_FOREGROUND\");\n\n        fileMenu = new ChatFileMenu(parentWindow);\n        editMenu = new EditMenu(parentWindow);\n        optionsMenu = new ChatToolsMenu(parentWindow);\n        helpMenu = new HelpMenu(parentWindow);\n\n        this.init();\n\n        pluginContainer\n            = new PluginContainer(this, Container.CONTAINER_CHAT_MENU_BAR)\n                {\n\n                    /**\n                     * Overrides\n                     * {@link PluginContainer#addComponentToContainer(Component, JComponent, int)}.\n                     * Keeps the Help menu last as it is its conventional place.\n                     *\n                     * @param component the <tt>Component<\/tt> to be added to\n                     * <tt>container<\/tt>\n                     * @param container the <tt>JComponent<\/tt> container to\n                     * which <tt>component<\/tt> is to be added\n                     * @param preferredIndex ignored because\n                     * <tt>MessageWindowMenuBar<\/tt> keeps the Help menu last as\n                     * it is its conventional place\n                     */\n                    @Override\n                    protected void addComponentToContainer(\n                            Component component,\n                            JComponent container,\n                            int preferredIndex)\n                    {\n                        /*\n                         * Apply the opaque property in order to prevent plugin\n                         * menus from looking different than the built-in menus.\n                         */\n                        if (component instanceof SIPCommMenu)\n                            ((SIPCommMenu) component).setOpaque(false);\n\n                        container.add(component, getComponentIndex(helpMenu));\n                    }\n                };\n\n        parentWindow.addChatChangeListener(new ChatChangeListener()\n        {\n            public void chatChanged(ChatPanel panel)\n            {\n                MetaContact contact\n                    = GuiActivator.getUIService().getChatContact(panel);\n\n                for (PluginComponent c : pluginContainer.getPluginComponents())\n                    c.setCurrentContact(contact);\n            }\n        });\n    }","commit_id":"cfb8e1e091f2f778bd0e2604bb4a774a57bebcf6","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Registers all menu items.\n     */\n    private void registerMenuItems()\n    {\n        // We only add the options button if the property SHOW_OPTIONS_WINDOW\n        // specifies so or if it's not set.\n        ConfigurationService cfg = GuiActivator.getConfigurationService();\n        Boolean showOptionsProp\n            = cfg.getBoolean(\n                    ConfigurationFrame.SHOW_OPTIONS_WINDOW_PROPERTY,\n                    true);\n\n        if (showOptionsProp.booleanValue())\n        {\n            UIService uiService = GuiActivator.getUIService();\n\n            if ((uiService == null)\n                    || !uiService.useMacOSXScreenMenuBar()\n                    || !registerConfigMenuItemMacOSX())\n            {\n                registerConfigMenuItemNonMacOSX();\n            }\n        }\n\n        ResourceManagementService r = GuiActivator.getResources();\n\n        conferenceMenuItem\n            = new JMenuItem(\n                    r.getI18NString(\"service.gui.CREATE_CONFERENCE_CALL\"));\n        conferenceMenuItem.setMnemonic(\n                r.getI18nMnemonic(\"service.gui.CREATE_CONFERENCE_CALL\"));\n        conferenceMenuItem.setName(\"conference\");\n        conferenceMenuItem.addActionListener(this);\n        add(conferenceMenuItem);\n\n        // Add a service listener in order to be notified when a new protocol\n        // provider is added or removed and the list should be refreshed.\n        GuiActivator.bundleContext.addServiceListener(this);\n\n        initVideoBridgeMenu();\n\n        if(!cfg.getBoolean(AUTO_ANSWER_MENU_DISABLED_PROP, false))\n        {\n            if(ConfigurationUtils.isAutoAnswerDisableSubmenu())\n            {\n                this.addSeparator();\n                AutoAnswerMenu.registerMenuItems(this);\n            }\n            else\n            {\n                AutoAnswerMenu autoAnswerMenu = new AutoAnswerMenu();\n                this.add(autoAnswerMenu);\n            }\n        }\n\n        this.addSeparator();\n\n        // Show/hide offline contacts menu item.\n        String offlineTextKey = ConfigurationUtils.isShowOffline()\n                            ? \"service.gui.HIDE_OFFLINE_CONTACTS\"\n                            : \"service.gui.SHOW_OFFLINE_CONTACTS\";\n\n        hideOfflineMenuItem = new JMenuItem(r.getI18NString(offlineTextKey));\n        hideOfflineMenuItem.setMnemonic(r.getI18nMnemonic(offlineTextKey));\n        hideOfflineMenuItem.setName(\"showHideOffline\");\n        hideOfflineMenuItem.addActionListener(this);\n        this.add(hideOfflineMenuItem);\n\n        // Sound on/off menu item.\n        String soundTextKey\n            = GuiActivator.getAudioNotifier().isMute()\n                ? \"service.gui.SOUND_ON\"\n                : \"service.gui.SOUND_OFF\";\n\n        soundMenuItem = new JMenuItem(r.getI18NString(soundTextKey));\n        soundMenuItem.setMnemonic(r.getI18nMnemonic(soundTextKey));\n        soundMenuItem.setName(\"sound\");\n        soundMenuItem.addActionListener(this);\n        this.add(soundMenuItem);\n\n        // All items are now instantiated and we could safely load the skin.\n        loadSkin();\n    }","id":2035,"modified_method":"/**\n     * Registers all menu items.\n     */\n    private void registerMenuItems()\n    {\n        // We only add the options button if the property SHOW_OPTIONS_WINDOW\n        // specifies so or if it's not set.\n        ConfigurationService cfg = GuiActivator.getConfigurationService();\n        Boolean showOptionsProp\n            = cfg.getBoolean(\n                    ConfigurationFrame.SHOW_OPTIONS_WINDOW_PROPERTY,\n                    true);\n\n        if (showOptionsProp.booleanValue())\n        {\n            UIService uiService = GuiActivator.getUIService();\n\n            if ((uiService == null)\n                    || !uiService.useMacOSXScreenMenuBar()\n                    || !registerConfigMenuItemMacOSX())\n            {\n                registerConfigMenuItemNonMacOSX();\n            }\n        }\n\n        ResourceManagementService r = GuiActivator.getResources();\n\n        conferenceMenuItem\n            = new JMenuItem(\n                    r.getI18NString(\"service.gui.CREATE_CONFERENCE_CALL\"));\n        conferenceMenuItem.setMnemonic(\n                r.getI18nMnemonic(\"service.gui.CREATE_CONFERENCE_CALL\"));\n        conferenceMenuItem.setName(\"conference\");\n        conferenceMenuItem.addActionListener(this);\n        add(conferenceMenuItem);\n\n        // Add a service listener in order to be notified when a new protocol\n        // provider is added or removed and the list should be refreshed.\n        GuiActivator.bundleContext.addServiceListener(this);\n\n        initVideoBridgeMenu();\n\n        if(!cfg.getBoolean(AUTO_ANSWER_MENU_DISABLED_PROP, false))\n        {\n            if(ConfigurationUtils.isAutoAnswerDisableSubmenu())\n            {\n                this.addSeparator();\n                AutoAnswerMenu.registerMenuItems(this);\n            }\n            else\n            {\n                AutoAnswerMenu autoAnswerMenu = new AutoAnswerMenu();\n                this.add(autoAnswerMenu);\n            }\n        }\n\n        this.addSeparator();\n\n        // Show/hide offline contacts menu item.\n        String offlineTextKey = ConfigurationUtils.isShowOffline()\n                            ? \"service.gui.HIDE_OFFLINE_CONTACTS\"\n                            : \"service.gui.SHOW_OFFLINE_CONTACTS\";\n\n        // The hide offline menu item only makes sense in the contact list.\n        if (!isChatMenu)\n        {\n            hideOfflineMenuItem = new JMenuItem(r.getI18NString(offlineTextKey));\n            hideOfflineMenuItem.setMnemonic(r.getI18nMnemonic(offlineTextKey));\n            hideOfflineMenuItem.setName(\"showHideOffline\");\n            hideOfflineMenuItem.addActionListener(this);\n            this.add(hideOfflineMenuItem);\n        }\n\n        // Sound on/off menu item.\n        String soundTextKey\n            = GuiActivator.getAudioNotifier().isMute()\n                ? \"service.gui.SOUND_ON\"\n                : \"service.gui.SOUND_OFF\";\n\n        soundMenuItem = new JMenuItem(r.getI18NString(soundTextKey));\n        soundMenuItem.setMnemonic(r.getI18nMnemonic(soundTextKey));\n        soundMenuItem.setName(\"sound\");\n        soundMenuItem.addActionListener(this);\n        this.add(soundMenuItem);\n\n        // All items are now instantiated and we could safely load the skin.\n        loadSkin();\n    }","commit_id":"cfb8e1e091f2f778bd0e2604bb4a774a57bebcf6","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Creates an instance of <tt>FileMenu<\/tt>.\n     * @param parentWindow The parent <tt>ChatWindow<\/tt>.\n     */\n    public ToolsMenu(MainFrame parentWindow)\n    {\n        ResourceManagementService r = GuiActivator.getResources();\n\n        setText(r.getI18NString(\"service.gui.TOOLS\"));\n        setMnemonic(r.getI18nMnemonic(\"service.gui.TOOLS\"));\n\n        registerMenuItems();\n\n        initPluginComponents();\n    }","id":2036,"modified_method":"/**\n     * Creates an instance of <tt>FileMenu<\/tt>.\n     */\n    public ToolsMenu()\n    {\n        this(false);\n    }","commit_id":"cfb8e1e091f2f778bd0e2604bb4a774a57bebcf6","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Loads menu item icons.\n     */\n    public void loadSkin()\n    {\n        ResourceManagementService r = GuiActivator.getResources();\n\n        conferenceMenuItem.setIcon(\n                r.getImage(\"service.gui.icons.CONFERENCE_CALL\"));\n        if (configMenuItem != null)\n        {\n            configMenuItem.setIcon(\n                    r.getImage(\"service.gui.icons.CONFIGURE_ICON\"));\n        }\n        hideOfflineMenuItem.setIcon(\n                r.getImage(\"service.gui.icons.SHOW_HIDE_OFFLINE_ICON\"));\n        soundMenuItem.setIcon(\n                r.getImage(\"service.gui.icons.SOUND_MENU_ICON\"));\n        if (videoBridgeMenuItem != null)\n        {\n            videoBridgeMenuItem.setIcon(\n                    r.getImage(\"service.gui.icons.VIDEO_BRIDGE\"));\n        }\n    }","id":2037,"modified_method":"/**\n     * Loads menu item icons.\n     */\n    public void loadSkin()\n    {\n        ResourceManagementService r = GuiActivator.getResources();\n\n        conferenceMenuItem.setIcon(\n                r.getImage(\"service.gui.icons.CONFERENCE_CALL\"));\n        if (configMenuItem != null)\n        {\n            configMenuItem.setIcon(\n                    r.getImage(\"service.gui.icons.CONFIGURE_ICON\"));\n        }\n\n        // The hide offline menu item could be null if the parent window of this\n        // menu is a chat window.\n        if (hideOfflineMenuItem != null)\n            hideOfflineMenuItem.setIcon(\n                    r.getImage(\"service.gui.icons.SHOW_HIDE_OFFLINE_ICON\"));\n\n        soundMenuItem.setIcon(\n                r.getImage(\"service.gui.icons.SOUND_MENU_ICON\"));\n        if (videoBridgeMenuItem != null)\n        {\n            videoBridgeMenuItem.setIcon(\n                    r.getImage(\"service.gui.icons.VIDEO_BRIDGE\"));\n        }\n    }","commit_id":"cfb8e1e091f2f778bd0e2604bb4a774a57bebcf6","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Reloads icons.\n     */\n    public void loadSkin()\n    {\n        dialButton.setBackgroundImage(\n                ImageLoader.getImage(ImageLoader.CALL_SETTING_BUTTON_BG));\n        dialButton.setIconImage(\n                ImageLoader.getImage(ImageLoader.DIAL_BUTTON));\n\n        conferenceButton.setBackgroundImage(\n                ImageLoader.getImage(ImageLoader.CALL_SETTING_BUTTON_BG));\n        conferenceButton.setIconImage(\n                ImageLoader.getImage(ImageLoader.ADD_TO_CALL_BUTTON));\n\n        if (hangupButton != null)\n            hangupButton.setBackgroundImage(\n                    ImageLoader.getImage(ImageLoader.HANGUP_BUTTON_BG));\n    }","id":2038,"modified_method":"/**\n     * Reloads icons.\n     */\n    public void loadSkin()\n    {\n        dialButton.setBackgroundImage(\n                ImageLoader.getImage(ImageLoader.CALL_SETTING_BUTTON_BG));\n        dialButton.setIconImage(\n                ImageLoader.getImage(ImageLoader.DIAL_BUTTON));\n\n        if (conferenceButton != null)\n        {\n            conferenceButton.setBackgroundImage(\n                ImageLoader.getImage(ImageLoader.CALL_SETTING_BUTTON_BG));\n            conferenceButton.setIconImage(\n                    ImageLoader.getImage(ImageLoader.ADD_TO_CALL_BUTTON));\n        }\n\n        if (hangupButton != null)\n            hangupButton.setBackgroundImage(\n                    ImageLoader.getImage(ImageLoader.HANGUP_BUTTON_BG));\n    }","commit_id":"ad0ac5ec0ec2e93de090bf91625f608990104d7f","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Initializes buttons order in the call tool bar.\n     */\n    private void initButtonIndexes()\n    {\n        dialButton.setIndex(0);\n        conferenceButton.setIndex(1);\n        holdButton.setIndex(2);\n        if (recordButton != null)\n            recordButton.setIndex(3);\n        mergeButton.setIndex(4);\n        transferCallButton.setIndex(5);\n\n        localLevel.setIndex(6);\n        if (remoteLevel instanceof OrderedComponent)\n            ((OrderedComponent) remoteLevel).setIndex(7);\n\n        desktopSharingButton.setIndex(8);\n        fullScreenButton.setIndex(10);\n        videoButton.setIndex(11);\n        showHideVideoButton.setIndex(12);\n        chatButton.setIndex(19);\n\n        if (infoButton != null)\n            infoButton.setIndex(20);\n\n        hangupButton.setIndex(100);\n    }","id":2039,"modified_method":"/**\n     * Initializes buttons order in the call tool bar.\n     */\n    private void initButtonIndexes()\n    {\n        dialButton.setIndex(0);\n        if (conferenceButton != null)\n            conferenceButton.setIndex(1);\n        holdButton.setIndex(2);\n        if (recordButton != null)\n            recordButton.setIndex(3);\n        mergeButton.setIndex(4);\n        transferCallButton.setIndex(5);\n\n        localLevel.setIndex(6);\n        if (remoteLevel instanceof OrderedComponent)\n            ((OrderedComponent) remoteLevel).setIndex(7);\n\n        desktopSharingButton.setIndex(8);\n        fullScreenButton.setIndex(10);\n        videoButton.setIndex(11);\n        showHideVideoButton.setIndex(12);\n        chatButton.setIndex(19);\n\n        if (infoButton != null)\n            infoButton.setIndex(20);\n\n        hangupButton.setIndex(100);\n    }","commit_id":"ad0ac5ec0ec2e93de090bf91625f608990104d7f","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Updates {@link #settingsPanel} from the model of this view. The update is\n     * performed in the AWT event dispatching thread.\n     * <p>\n     * The center of this view is occupied by {@link #callPanel}, the bottom of\n     * this view is dedicated to <tt>settingsPanel<\/tt>. The method\n     * {@link #updateViewFromModelInEventDispatchThread()} updates\n     * <tt>callPanel<\/tt> from the model of this view and then invokes the\n     * method <tt>updateSettingsPanelInEventDispatchThread()<\/tt>. Thus this\n     * whole view is updated so that it depicts the current state of its model.\n     * <\/p>\n     *\n     * @param callConferenceIsEnded <tt>true<\/tt> if the method\n     * <tt>updateViewFromModelInEventDispatchThread()<\/tt> considers the\n     * {@link #callConference} ended; otherwise, <tt>false<\/tt>. When the\n     * <tt>callConference<\/tt> is considered ended, the <tt>callPanel<\/tt>\n     * instance will not be switched to a specific type (one-to-one, audio-only,\n     * or audio/video) because, otherwise, the switch will leave it\n     * <tt>null<\/tt> and this view will remain blank. In such a case,\n     * <tt>settingsPanel<\/tt> may wish to do pretty much the same but disable\n     * and/or hide the buttons it contains.\n     */\n    private void doUpdateSettingsPanelInEventDispatchThread(\n            boolean callConferenceIsEnded)\n    {\n        settingsPanel.setFullScreen(isFullScreen());\n\n        boolean isConference = (callPanel instanceof BasicConferenceCallPanel);\n\n        /*\n         * For whatever reason, we're treating the localLevel and the\n         * remoteLevel buttons differently and we're adding and removing them in\n         * accord with the conference state of the user interface.\n         */\n        if (isConference)\n        {\n            settingsPanel.add(localLevel);\n            settingsPanel.add(remoteLevel);\n        }\n        else\n        {\n            settingsPanel.remove(localLevel);\n            settingsPanel.remove(remoteLevel);\n        }\n\n        /*\n         * We do not support chat conferencing with the participants in a\n         * telephony conference at this time so we do not want the chatButton\n         * visible in such a scenario.\n         */\n        List<Contact> imContacts = getIMCapableCallPeers(1);\n        chatButton.setVisible(\n                !isConference && (imContacts.size() == 1));\n        if(chatButton.isVisible() && operationSetPresence == null)\n        {\n            Contact contact = imContacts.get(0);\n            operationSetPresence =\n                contact.getProtocolProvider()\n                    .getOperationSet(OperationSetPresence.class);\n            if(operationSetPresence != null)\n                operationSetPresence.addContactPresenceStatusListener(this);\n\n            chatButton.setIconImage(\n                Constants.getMessageStatusIcon(contact.getPresenceStatus()));\n            chatButton.repaint();\n        }\n\n        updateHoldButtonState();\n        updateMergeButtonState();\n\n        List<Call> calls = callConference.getCalls();\n        /*\n         * OperationSetAdvancedTelephony implements call transfer. The feature\n         * is not supported if the local user/peer is a conference focus.\n         * Instead of disabling the transferCallButton in this case though, we\n         * want it hidden.\n         */\n        boolean advancedTelephony = !calls.isEmpty();\n        boolean telephonyConferencing = false;\n        boolean videoTelephony = false;\n        boolean videoTelephonyIsLocalVideoAllowed = false;\n        boolean videoTelephonyIsLocalVideoStreaming = false;\n        boolean desktopSharing = false;\n        boolean desktopSharingIsStreamed = false;\n        boolean allCallsConnected = true;\n\n        for (Call call : calls)\n        {\n            ProtocolProviderService pps = call.getProtocolProvider();\n\n            /*\n             * The transferCallButton requires OperationSetAdvancedTelephony\n             * for all Calls.\n             */\n            if (advancedTelephony)\n            {\n                OperationSetAdvancedTelephony<?> osat\n                    = pps.getOperationSet(OperationSetAdvancedTelephony.class);\n\n                if (osat == null)\n                    advancedTelephony = false;\n            }\n\n            /*\n             * The conferenceButton needs at least one Call with\n             * OperationSetTelephonyConferencing,\n             */\n            if (!telephonyConferencing)\n            {\n                OperationSetTelephonyConferencing ostc\n                    = pps.getOperationSet(\n                            OperationSetTelephonyConferencing.class);\n\n                if (ostc != null)\n                    telephonyConferencing = true;\n            }\n\n            if (!videoTelephony\n                    || !videoTelephonyIsLocalVideoAllowed\n                    || !videoTelephonyIsLocalVideoStreaming)\n            {\n                OperationSetVideoTelephony osvt\n                    = pps.getOperationSet(OperationSetVideoTelephony.class);\n\n                if (osvt != null)\n                {\n                    if (!videoTelephony)\n                        videoTelephony = true;\n                    if (!videoTelephonyIsLocalVideoAllowed\n                            && osvt.isLocalVideoAllowed(call))\n                        videoTelephonyIsLocalVideoAllowed = true;\n                    if (!videoTelephonyIsLocalVideoStreaming\n                            && osvt.isLocalVideoStreaming(call))\n                        videoTelephonyIsLocalVideoStreaming = true;\n                }\n            }\n\n            if(!desktopSharing)\n            {\n                OperationSetDesktopStreaming osds\n                    = pps.getOperationSet(\n                            OperationSetDesktopStreaming.class);\n                if(osds != null)\n                {\n                    desktopSharing = true;\n\n                    if(videoTelephonyIsLocalVideoStreaming\n                            && call instanceof MediaAwareCall\n                            && ((MediaAwareCall<?,?,?>) call).getMediaUseCase()\n                                == MediaUseCase.DESKTOP)\n                    {\n                        desktopSharingIsStreamed = true;\n                    }\n                }\n            }\n\n            if (CallState.CALL_IN_PROGRESS != call.getCallState())\n            {\n                allCallsConnected = false;\n            }\n        }\n\n        conferenceButton.setEnabled(telephonyConferencing);\n        transferCallButton.setEnabled(advancedTelephony);\n        transferCallButton.setVisible(!callConference.isConferenceFocus());\n\n        /*\n         * The videoButton is a beast of its own kind because it depends not\n         * only on the state of the depicted telephony conference but also on\n         * the global application state.\n         */\n        videoButton.setEnabled(allCallsConnected && videoTelephony);\n        videoButton.setSelected(videoTelephonyIsLocalVideoAllowed);\n\n        /*\n         * Consequently, the showHideVideoButton which depends on videoButton\n         * has to be updated depending on the state of the videoButton as well.\n         */\n        showHideVideoButton.setEnabled(\n                videoButton.isEnabled()\n                    && videoTelephonyIsLocalVideoAllowed);\n        showHideVideoButton.setSelected(\n                showHideVideoButton.isEnabled()\n                    && uiVideoHandler.isLocalVideoVisible());\n        showHideVideoButton.setVisible(showHideVideoButton.isEnabled());\n\n        // The desktop sharing button depends on the operation set desktop\n        // sharing server.\n        desktopSharingButton.setEnabled(desktopSharing);\n        desktopSharingButton.setSelected(desktopSharingIsStreamed);\n        if (callPanel instanceof OneToOneCallPanel)\n        {\n            OneToOneCallPanel oneToOneCallPanel = (OneToOneCallPanel) callPanel;\n            if(desktopSharingIsStreamed)\n                oneToOneCallPanel.addDesktopSharingComponents();\n            else\n                oneToOneCallPanel.removeDesktopSharingComponents();\n        }\n    }","id":2040,"modified_method":"/**\n     * Updates {@link #settingsPanel} from the model of this view. The update is\n     * performed in the AWT event dispatching thread.\n     * <p>\n     * The center of this view is occupied by {@link #callPanel}, the bottom of\n     * this view is dedicated to <tt>settingsPanel<\/tt>. The method\n     * {@link #updateViewFromModelInEventDispatchThread()} updates\n     * <tt>callPanel<\/tt> from the model of this view and then invokes the\n     * method <tt>updateSettingsPanelInEventDispatchThread()<\/tt>. Thus this\n     * whole view is updated so that it depicts the current state of its model.\n     * <\/p>\n     *\n     * @param callConferenceIsEnded <tt>true<\/tt> if the method\n     * <tt>updateViewFromModelInEventDispatchThread()<\/tt> considers the\n     * {@link #callConference} ended; otherwise, <tt>false<\/tt>. When the\n     * <tt>callConference<\/tt> is considered ended, the <tt>callPanel<\/tt>\n     * instance will not be switched to a specific type (one-to-one, audio-only,\n     * or audio/video) because, otherwise, the switch will leave it\n     * <tt>null<\/tt> and this view will remain blank. In such a case,\n     * <tt>settingsPanel<\/tt> may wish to do pretty much the same but disable\n     * and/or hide the buttons it contains.\n     */\n    private void doUpdateSettingsPanelInEventDispatchThread(\n            boolean callConferenceIsEnded)\n    {\n        settingsPanel.setFullScreen(isFullScreen());\n\n        boolean isConference = (callPanel instanceof BasicConferenceCallPanel);\n\n        /*\n         * For whatever reason, we're treating the localLevel and the\n         * remoteLevel buttons differently and we're adding and removing them in\n         * accord with the conference state of the user interface.\n         */\n        if (isConference)\n        {\n            settingsPanel.add(localLevel);\n            settingsPanel.add(remoteLevel);\n        }\n        else\n        {\n            settingsPanel.remove(localLevel);\n            settingsPanel.remove(remoteLevel);\n        }\n\n        /*\n         * We do not support chat conferencing with the participants in a\n         * telephony conference at this time so we do not want the chatButton\n         * visible in such a scenario.\n         */\n        List<Contact> imContacts = getIMCapableCallPeers(1);\n        chatButton.setVisible(\n                !isConference && (imContacts.size() == 1));\n        if(chatButton.isVisible() && operationSetPresence == null)\n        {\n            Contact contact = imContacts.get(0);\n            operationSetPresence =\n                contact.getProtocolProvider()\n                    .getOperationSet(OperationSetPresence.class);\n            if(operationSetPresence != null)\n                operationSetPresence.addContactPresenceStatusListener(this);\n\n            chatButton.setIconImage(\n                Constants.getMessageStatusIcon(contact.getPresenceStatus()));\n            chatButton.repaint();\n        }\n\n        updateHoldButtonState();\n        updateMergeButtonState();\n\n        List<Call> calls = callConference.getCalls();\n        /*\n         * OperationSetAdvancedTelephony implements call transfer. The feature\n         * is not supported if the local user/peer is a conference focus.\n         * Instead of disabling the transferCallButton in this case though, we\n         * want it hidden.\n         */\n        boolean advancedTelephony = !calls.isEmpty();\n        boolean telephonyConferencing = false;\n        boolean videoTelephony = false;\n        boolean videoTelephonyIsLocalVideoAllowed = false;\n        boolean videoTelephonyIsLocalVideoStreaming = false;\n        boolean desktopSharing = false;\n        boolean desktopSharingIsStreamed = false;\n        boolean allCallsConnected = true;\n\n        for (Call call : calls)\n        {\n            ProtocolProviderService pps = call.getProtocolProvider();\n\n            /*\n             * The transferCallButton requires OperationSetAdvancedTelephony\n             * for all Calls.\n             */\n            if (advancedTelephony)\n            {\n                OperationSetAdvancedTelephony<?> osat\n                    = pps.getOperationSet(OperationSetAdvancedTelephony.class);\n\n                if (osat == null)\n                    advancedTelephony = false;\n            }\n\n            /*\n             * The conferenceButton needs at least one Call with\n             * OperationSetTelephonyConferencing,\n             */\n            if (!telephonyConferencing)\n            {\n                OperationSetTelephonyConferencing ostc\n                    = pps.getOperationSet(\n                            OperationSetTelephonyConferencing.class);\n\n                if (ostc != null)\n                    telephonyConferencing = true;\n            }\n\n            if (!videoTelephony\n                    || !videoTelephonyIsLocalVideoAllowed\n                    || !videoTelephonyIsLocalVideoStreaming)\n            {\n                OperationSetVideoTelephony osvt\n                    = pps.getOperationSet(OperationSetVideoTelephony.class);\n\n                if (osvt != null)\n                {\n                    if (!videoTelephony)\n                        videoTelephony = true;\n                    if (!videoTelephonyIsLocalVideoAllowed\n                            && osvt.isLocalVideoAllowed(call))\n                        videoTelephonyIsLocalVideoAllowed = true;\n                    if (!videoTelephonyIsLocalVideoStreaming\n                            && osvt.isLocalVideoStreaming(call))\n                        videoTelephonyIsLocalVideoStreaming = true;\n                }\n            }\n\n            if(!desktopSharing)\n            {\n                OperationSetDesktopStreaming osds\n                    = pps.getOperationSet(\n                            OperationSetDesktopStreaming.class);\n                if(osds != null)\n                {\n                    desktopSharing = true;\n\n                    if(videoTelephonyIsLocalVideoStreaming\n                            && call instanceof MediaAwareCall\n                            && ((MediaAwareCall<?,?,?>) call).getMediaUseCase()\n                                == MediaUseCase.DESKTOP)\n                    {\n                        desktopSharingIsStreamed = true;\n                    }\n                }\n            }\n\n            if (CallState.CALL_IN_PROGRESS != call.getCallState())\n            {\n                allCallsConnected = false;\n            }\n        }\n\n        if(conferenceButton != null)\n            conferenceButton.setEnabled(telephonyConferencing);\n\n        transferCallButton.setEnabled(advancedTelephony);\n        transferCallButton.setVisible(!callConference.isConferenceFocus());\n\n        /*\n         * The videoButton is a beast of its own kind because it depends not\n         * only on the state of the depicted telephony conference but also on\n         * the global application state.\n         */\n        videoButton.setEnabled(allCallsConnected && videoTelephony);\n        videoButton.setSelected(videoTelephonyIsLocalVideoAllowed);\n\n        /*\n         * Consequently, the showHideVideoButton which depends on videoButton\n         * has to be updated depending on the state of the videoButton as well.\n         */\n        showHideVideoButton.setEnabled(\n                videoButton.isEnabled()\n                    && videoTelephonyIsLocalVideoAllowed);\n        showHideVideoButton.setSelected(\n                showHideVideoButton.isEnabled()\n                    && uiVideoHandler.isLocalVideoVisible());\n        showHideVideoButton.setVisible(showHideVideoButton.isEnabled());\n\n        // The desktop sharing button depends on the operation set desktop\n        // sharing server.\n        desktopSharingButton.setEnabled(desktopSharing);\n        desktopSharingButton.setSelected(desktopSharingIsStreamed);\n        if (callPanel instanceof OneToOneCallPanel)\n        {\n            OneToOneCallPanel oneToOneCallPanel = (OneToOneCallPanel) callPanel;\n            if(desktopSharingIsStreamed)\n                oneToOneCallPanel.addDesktopSharingComponents();\n            else\n                oneToOneCallPanel.removeDesktopSharingComponents();\n        }\n    }","commit_id":"ad0ac5ec0ec2e93de090bf91625f608990104d7f","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Initializes the user interface hierarchy of this <tt>CallPanel<\/tt> i.e.\n     * the AWT <tt>Component<\/tt>s which constitute the user interface to be\n     * displayed by this <tt>Component<\/tt>. Their state does not have to depict\n     * the current state of the model of this view because\n     * {@link #updateViewFromModel()} will be invoked before this view becomes\n     * visible. At the center of the user interface of this view is\n     * {@link #callPanel} but it is dynamically added and removed multiple times\n     * as part of the execution of the <tt>updateViewFromModel<\/tt> method so\n     * it is not dealt with here.\n     */\n    private void initializeUserInterfaceHierarchy()\n    {\n        /*\n         * The settingsPanel will contain the buttons. It is initialized before\n         * the buttons in case any of the buttons need it (which is hard to\n         * determine at the time of this writing).\n         */\n        settingsPanel = new CallToolBar(isFullScreen(), false);\n\n        /*\n         * TODO CallPanel depicts a whole CallConference which may have multiple\n         * Calls, new Calls may be added to the CallConference and existing\n         * Calls may be removed from the CallConference. For example, the\n         * buttons which accept a Call as an argument should be changed to take\n         * into account the whole CallConference.\n         */\n        Call aCall = callConference.getCalls().get(0);\n\n        chatButton\n            = new CallToolBarButton(\n                    ImageLoader.getImage(ImageLoader.CHAT_BUTTON_SMALL_WHITE),\n                    CHAT_BUTTON,\n                    GuiActivator.getResources().getI18NString(\n                            \"service.gui.CHAT\"));\n        conferenceButton\n            = new CallToolBarButton(\n                    ImageLoader.getImage(ImageLoader.ADD_TO_CALL_BUTTON),\n                    CONFERENCE_BUTTON,\n                    GuiActivator.getResources().getI18NString(\n                            \"service.gui.CREATE_CONFERENCE_CALL\"));\n        desktopSharingButton = new DesktopSharingButton(aCall);\n        dialButton\n            = new CallToolBarButton(\n                    ImageLoader.getImage(ImageLoader.DIAL_BUTTON),\n                    DIAL_BUTTON,\n                    GuiActivator.getResources().getI18NString(\n                            \"service.gui.DIALPAD\"));\n        fullScreenButton = new FullScreenButton(this);\n        hangupButton = new HangupButton(this);\n        holdButton = new HoldButton(aCall);\n        if(!GuiActivator.getConfigurationService().getBoolean(\n                HIDE_CALL_INFO_BUTON_PROP,\n                false))\n        {\n            infoButton\n                = new CallToolBarButton(\n                        ImageLoader.getImage(ImageLoader.CALL_INFO),\n                        INFO_BUTTON,\n                        GuiActivator.getResources().getI18NString(\n                                \"service.gui.PRESS_FOR_CALL_INFO\"));\n        }\n        mergeButton\n            = new CallToolBarButton(\n                    ImageLoader.getImage(ImageLoader.MERGE_CALL_BUTTON),\n                    MERGE_BUTTON,\n                    GuiActivator.getResources().getI18NString(\n                            \"service.gui.MERGE_TO_CALL\"));\n\n        if(!GuiActivator.getConfigurationService().getBoolean(\n            HIDE_CALL_RECORD_BUTON_PROP,\n            false))\n        {\n            recordButton = new RecordButton(aCall);\n        }\n        showHideVideoButton = new ShowHideVideoButton(uiVideoHandler);\n        transferCallButton = new TransferCallButton(aCall);\n        videoButton = new LocalVideoButton(aCall);\n\n        localLevel\n            = new InputVolumeControlButton(\n                    aCall,\n                    ImageLoader.MICROPHONE,\n                    ImageLoader.MUTE_BUTTON,\n                    true,\n                    false);\n        remoteLevel\n            = new OutputVolumeControlButton(\n                    callConference,\n                    ImageLoader.VOLUME_CONTROL_BUTTON,\n                    false,\n                    true)\n                .getComponent();\n\n        /*\n         * Now that the buttons have been initialized, set their order indexes\n         * so that they get added in the correct order later on.\n         */\n        initButtonIndexes();\n\n        chatButton.addActionListener(this);\n        conferenceButton.addActionListener(this);\n        dialButton.addActionListener(this);\n        if (infoButton != null)\n            infoButton.addActionListener(this);\n        mergeButton.addActionListener(this);\n\n        settingsPanel.add(chatButton);\n        settingsPanel.add(conferenceButton);\n        settingsPanel.add(desktopSharingButton);\n        settingsPanel.add(dialButton);\n        settingsPanel.add(fullScreenButton);\n        settingsPanel.add(hangupButton);\n        settingsPanel.add(holdButton);\n        if (infoButton != null)\n            settingsPanel.add(infoButton);\n        settingsPanel.add(mergeButton);\n        if (recordButton != null)\n            settingsPanel.add(recordButton);\n        settingsPanel.add(showHideVideoButton);\n        settingsPanel.add(transferCallButton);\n        settingsPanel.add(videoButton);\n\n        // The bottom bar will contain the settingsPanel.\n        add(createBottomBar(), BorderLayout.SOUTH);\n    }","id":2041,"modified_method":"/**\n     * Initializes the user interface hierarchy of this <tt>CallPanel<\/tt> i.e.\n     * the AWT <tt>Component<\/tt>s which constitute the user interface to be\n     * displayed by this <tt>Component<\/tt>. Their state does not have to depict\n     * the current state of the model of this view because\n     * {@link #updateViewFromModel()} will be invoked before this view becomes\n     * visible. At the center of the user interface of this view is\n     * {@link #callPanel} but it is dynamically added and removed multiple times\n     * as part of the execution of the <tt>updateViewFromModel<\/tt> method so\n     * it is not dealt with here.\n     */\n    private void initializeUserInterfaceHierarchy()\n    {\n        /*\n         * The settingsPanel will contain the buttons. It is initialized before\n         * the buttons in case any of the buttons need it (which is hard to\n         * determine at the time of this writing).\n         */\n        settingsPanel = new CallToolBar(isFullScreen(), false);\n\n        /*\n         * TODO CallPanel depicts a whole CallConference which may have multiple\n         * Calls, new Calls may be added to the CallConference and existing\n         * Calls may be removed from the CallConference. For example, the\n         * buttons which accept a Call as an argument should be changed to take\n         * into account the whole CallConference.\n         */\n        Call aCall = callConference.getCalls().get(0);\n\n        chatButton\n            = new CallToolBarButton(\n                    ImageLoader.getImage(ImageLoader.CHAT_BUTTON_SMALL_WHITE),\n                    CHAT_BUTTON,\n                    GuiActivator.getResources().getI18NString(\n                            \"service.gui.CHAT\"));\n\n        if(!GuiActivator.getConfigurationService().getBoolean(\n           HIDE_CONFERENCE_BUTON_PROP,\n           false))\n        {\n            conferenceButton\n                = new CallToolBarButton(\n                    ImageLoader.getImage(ImageLoader.ADD_TO_CALL_BUTTON),\n                    CONFERENCE_BUTTON,\n                    GuiActivator.getResources().getI18NString(\n                        \"service.gui.CREATE_CONFERENCE_CALL\"));\n        }\n\n        desktopSharingButton = new DesktopSharingButton(aCall);\n        dialButton\n            = new CallToolBarButton(\n                    ImageLoader.getImage(ImageLoader.DIAL_BUTTON),\n                    DIAL_BUTTON,\n                    GuiActivator.getResources().getI18NString(\n                            \"service.gui.DIALPAD\"));\n        fullScreenButton = new FullScreenButton(this);\n        hangupButton = new HangupButton(this);\n        holdButton = new HoldButton(aCall);\n        if(!GuiActivator.getConfigurationService().getBoolean(\n                HIDE_CALL_INFO_BUTON_PROP,\n                false))\n        {\n            infoButton\n                = new CallToolBarButton(\n                        ImageLoader.getImage(ImageLoader.CALL_INFO),\n                        INFO_BUTTON,\n                        GuiActivator.getResources().getI18NString(\n                                \"service.gui.PRESS_FOR_CALL_INFO\"));\n        }\n        mergeButton\n            = new CallToolBarButton(\n                    ImageLoader.getImage(ImageLoader.MERGE_CALL_BUTTON),\n                    MERGE_BUTTON,\n                    GuiActivator.getResources().getI18NString(\n                            \"service.gui.MERGE_TO_CALL\"));\n\n        if(!GuiActivator.getConfigurationService().getBoolean(\n            HIDE_CALL_RECORD_BUTON_PROP,\n            false))\n        {\n            recordButton = new RecordButton(aCall);\n        }\n        showHideVideoButton = new ShowHideVideoButton(uiVideoHandler);\n        transferCallButton = new TransferCallButton(aCall);\n        videoButton = new LocalVideoButton(aCall);\n\n        localLevel\n            = new InputVolumeControlButton(\n                    aCall,\n                    ImageLoader.MICROPHONE,\n                    ImageLoader.MUTE_BUTTON,\n                    true,\n                    false);\n        remoteLevel\n            = new OutputVolumeControlButton(\n                    callConference,\n                    ImageLoader.VOLUME_CONTROL_BUTTON,\n                    false,\n                    true)\n                .getComponent();\n\n        /*\n         * Now that the buttons have been initialized, set their order indexes\n         * so that they get added in the correct order later on.\n         */\n        initButtonIndexes();\n\n        chatButton.addActionListener(this);\n        if (conferenceButton != null)\n            conferenceButton.addActionListener(this);\n        dialButton.addActionListener(this);\n        if (infoButton != null)\n            infoButton.addActionListener(this);\n        mergeButton.addActionListener(this);\n\n        settingsPanel.add(chatButton);\n        if (conferenceButton != null)\n            settingsPanel.add(conferenceButton);\n        settingsPanel.add(desktopSharingButton);\n        settingsPanel.add(dialButton);\n        settingsPanel.add(fullScreenButton);\n        settingsPanel.add(hangupButton);\n        settingsPanel.add(holdButton);\n        if (infoButton != null)\n            settingsPanel.add(infoButton);\n        settingsPanel.add(mergeButton);\n        if (recordButton != null)\n            settingsPanel.add(recordButton);\n        settingsPanel.add(showHideVideoButton);\n        settingsPanel.add(transferCallButton);\n        settingsPanel.add(videoButton);\n\n        // The bottom bar will contain the settingsPanel.\n        add(createBottomBar(), BorderLayout.SOUTH);\n    }","commit_id":"ad0ac5ec0ec2e93de090bf91625f608990104d7f","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Loads menu item icons.\n     */\n    public void loadSkin()\n    {\n        ResourceManagementService r = GuiActivator.getResources();\n\n        conferenceMenuItem.setIcon(\n                r.getImage(\"service.gui.icons.CONFERENCE_CALL\"));\n        if (configMenuItem != null)\n        {\n            configMenuItem.setIcon(\n                    r.getImage(\"service.gui.icons.CONFIGURE_ICON\"));\n        }\n\n        // The hide offline menu item could be null if the parent window of this\n        // menu is a chat window.\n        if (hideOfflineMenuItem != null)\n            hideOfflineMenuItem.setIcon(\n                    r.getImage(\"service.gui.icons.SHOW_HIDE_OFFLINE_ICON\"));\n\n        soundMenuItem.setIcon(\n                r.getImage(\"service.gui.icons.SOUND_MENU_ICON\"));\n        if (videoBridgeMenuItem != null)\n        {\n            videoBridgeMenuItem.setIcon(\n                    r.getImage(\"service.gui.icons.VIDEO_BRIDGE\"));\n        }\n    }","id":2042,"modified_method":"/**\n     * Loads menu item icons.\n     */\n    public void loadSkin()\n    {\n        ResourceManagementService r = GuiActivator.getResources();\n\n        if (conferenceMenuItem != null)\n        {\n            conferenceMenuItem.setIcon(\n                    r.getImage(\"service.gui.icons.CONFERENCE_CALL\"));\n        }\n\n        if (configMenuItem != null)\n        {\n            configMenuItem.setIcon(\n                    r.getImage(\"service.gui.icons.CONFIGURE_ICON\"));\n        }\n\n        // The hide offline menu item could be null if the parent window of this\n        // menu is a chat window.\n        if (hideOfflineMenuItem != null)\n            hideOfflineMenuItem.setIcon(\n                    r.getImage(\"service.gui.icons.SHOW_HIDE_OFFLINE_ICON\"));\n\n        soundMenuItem.setIcon(\n                r.getImage(\"service.gui.icons.SOUND_MENU_ICON\"));\n        if (videoBridgeMenuItem != null)\n        {\n            videoBridgeMenuItem.setIcon(\n                    r.getImage(\"service.gui.icons.VIDEO_BRIDGE\"));\n        }\n    }","commit_id":"ad0ac5ec0ec2e93de090bf91625f608990104d7f","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Registers all menu items.\n     */\n    private void registerMenuItems()\n    {\n        // We only add the options button if the property SHOW_OPTIONS_WINDOW\n        // specifies so or if it's not set.\n        ConfigurationService cfg = GuiActivator.getConfigurationService();\n        Boolean showOptionsProp\n            = cfg.getBoolean(\n                    ConfigurationFrame.SHOW_OPTIONS_WINDOW_PROPERTY,\n                    true);\n\n        if (showOptionsProp.booleanValue())\n        {\n            UIService uiService = GuiActivator.getUIService();\n\n            if ((uiService == null)\n                    || !uiService.useMacOSXScreenMenuBar()\n                    || !registerConfigMenuItemMacOSX())\n            {\n                registerConfigMenuItemNonMacOSX();\n            }\n        }\n\n        ResourceManagementService r = GuiActivator.getResources();\n\n        conferenceMenuItem\n            = new JMenuItem(\n                    r.getI18NString(\"service.gui.CREATE_CONFERENCE_CALL\"));\n        conferenceMenuItem.setMnemonic(\n                r.getI18nMnemonic(\"service.gui.CREATE_CONFERENCE_CALL\"));\n        conferenceMenuItem.setName(\"conference\");\n        conferenceMenuItem.addActionListener(this);\n        add(conferenceMenuItem);\n\n        // Add a service listener in order to be notified when a new protocol\n        // provider is added or removed and the list should be refreshed.\n        GuiActivator.bundleContext.addServiceListener(this);\n\n        initVideoBridgeMenu();\n\n        if(!cfg.getBoolean(AUTO_ANSWER_MENU_DISABLED_PROP, false))\n        {\n            if(ConfigurationUtils.isAutoAnswerDisableSubmenu())\n            {\n                this.addSeparator();\n                AutoAnswerMenu.registerMenuItems(this);\n            }\n            else\n            {\n                AutoAnswerMenu autoAnswerMenu = new AutoAnswerMenu();\n                this.add(autoAnswerMenu);\n            }\n        }\n\n        this.addSeparator();\n\n        // Show/hide offline contacts menu item.\n        String offlineTextKey = ConfigurationUtils.isShowOffline()\n                            ? \"service.gui.HIDE_OFFLINE_CONTACTS\"\n                            : \"service.gui.SHOW_OFFLINE_CONTACTS\";\n\n        // The hide offline menu item only makes sense in the contact list.\n        if (!isChatMenu)\n        {\n            hideOfflineMenuItem = new JMenuItem(r.getI18NString(offlineTextKey));\n            hideOfflineMenuItem.setMnemonic(r.getI18nMnemonic(offlineTextKey));\n            hideOfflineMenuItem.setName(\"showHideOffline\");\n            hideOfflineMenuItem.addActionListener(this);\n            this.add(hideOfflineMenuItem);\n        }\n\n        // Sound on/off menu item.\n        String soundTextKey\n            = GuiActivator.getAudioNotifier().isMute()\n                ? \"service.gui.SOUND_ON\"\n                : \"service.gui.SOUND_OFF\";\n\n        soundMenuItem = new JMenuItem(r.getI18NString(soundTextKey));\n        soundMenuItem.setMnemonic(r.getI18nMnemonic(soundTextKey));\n        soundMenuItem.setName(\"sound\");\n        soundMenuItem.addActionListener(this);\n        this.add(soundMenuItem);\n\n        // All items are now instantiated and we could safely load the skin.\n        loadSkin();\n    }","id":2043,"modified_method":"/**\n     * Registers all menu items.\n     */\n    private void registerMenuItems()\n    {\n        // We only add the options button if the property SHOW_OPTIONS_WINDOW\n        // specifies so or if it's not set.\n        ConfigurationService cfg = GuiActivator.getConfigurationService();\n        Boolean showOptionsProp\n            = cfg.getBoolean(\n                    ConfigurationFrame.SHOW_OPTIONS_WINDOW_PROPERTY,\n                    true);\n\n        if (showOptionsProp.booleanValue())\n        {\n            UIService uiService = GuiActivator.getUIService();\n\n            if ((uiService == null)\n                    || !uiService.useMacOSXScreenMenuBar()\n                    || !registerConfigMenuItemMacOSX())\n            {\n                registerConfigMenuItemNonMacOSX();\n            }\n        }\n\n        ResourceManagementService r = GuiActivator.getResources();\n\n        Boolean showConferenceMenuItemProp\n            = cfg.getBoolean(CONFERENCE_CALL_DISABLED_PROP,\n                            false);\n\n        if(!showConferenceMenuItemProp.booleanValue())\n        {\n            conferenceMenuItem\n                = new JMenuItem(\n                    r.getI18NString(\"service.gui.CREATE_CONFERENCE_CALL\"));\n            conferenceMenuItem.setMnemonic(\n                r.getI18nMnemonic(\"service.gui.CREATE_CONFERENCE_CALL\"));\n            conferenceMenuItem.setName(\"conference\");\n            conferenceMenuItem.addActionListener(this);\n            add(conferenceMenuItem);\n        }\n\n        // Add a service listener in order to be notified when a new protocol\n        // provider is added or removed and the list should be refreshed.\n        GuiActivator.bundleContext.addServiceListener(this);\n\n        initVideoBridgeMenu();\n\n        if(!cfg.getBoolean(AUTO_ANSWER_MENU_DISABLED_PROP, false))\n        {\n            if(ConfigurationUtils.isAutoAnswerDisableSubmenu())\n            {\n                this.addSeparator();\n                AutoAnswerMenu.registerMenuItems(this);\n            }\n            else\n            {\n                AutoAnswerMenu autoAnswerMenu = new AutoAnswerMenu();\n                this.add(autoAnswerMenu);\n            }\n        }\n\n        this.addSeparator();\n\n        // Show/hide offline contacts menu item.\n        String offlineTextKey = ConfigurationUtils.isShowOffline()\n                            ? \"service.gui.HIDE_OFFLINE_CONTACTS\"\n                            : \"service.gui.SHOW_OFFLINE_CONTACTS\";\n\n        // The hide offline menu item only makes sense in the contact list.\n        if (!isChatMenu)\n        {\n            hideOfflineMenuItem = new JMenuItem(r.getI18NString(offlineTextKey));\n            hideOfflineMenuItem.setMnemonic(r.getI18nMnemonic(offlineTextKey));\n            hideOfflineMenuItem.setName(\"showHideOffline\");\n            hideOfflineMenuItem.addActionListener(this);\n            this.add(hideOfflineMenuItem);\n        }\n\n        // Sound on/off menu item.\n        String soundTextKey\n            = GuiActivator.getAudioNotifier().isMute()\n                ? \"service.gui.SOUND_ON\"\n                : \"service.gui.SOUND_OFF\";\n\n        soundMenuItem = new JMenuItem(r.getI18NString(soundTextKey));\n        soundMenuItem.setMnemonic(r.getI18nMnemonic(soundTextKey));\n        soundMenuItem.setName(\"sound\");\n        soundMenuItem.addActionListener(this);\n        this.add(soundMenuItem);\n\n        // All items are now instantiated and we could safely load the skin.\n        loadSkin();\n    }","commit_id":"ad0ac5ec0ec2e93de090bf91625f608990104d7f","url":"https://github.com/jitsi/jitsi"},{"original_method":"public void run() {\n\t\tfreenet.support.Logger.OSThread.logPID(this);\n\t\ttry {\n\t\t\trealRun();\n\t\t//The last thing that realRun() does is register as a request-sender listener, so any exception here is the end.\n\t\t} catch(NotConnectedException e) {\n\t\t\tLogger.normal(this, \"requestor gone, could not start request handler wait\");\n\t\t\tnode.removeTransferringRequestHandler(uid);\n\t\t\ttag.handlerThrew(e);\n\t\t\tboolean dontUnlock;\n\t\t\tsynchronized(this) {\n\t\t\t\tdontUnlock = this.dontUnlock;\n\t\t\t}\n\t\t\tif(!dontUnlock)\n\t\t\t\ttag.unlockHandler();\n\t\t} catch(Throwable t) {\n\t\t\tLogger.error(this, \"Caught \" + t, t);\n\t\t\tnode.removeTransferringRequestHandler(uid);\n\t\t\ttag.handlerThrew(t);\n\t\t\tboolean dontUnlock;\n\t\t\tsynchronized(this) {\n\t\t\t\tdontUnlock = this.dontUnlock;\n\t\t\t}\n\t\t\tif(!dontUnlock)\n\t\t\t\ttag.unlockHandler();\n\t\t}\n\t}","id":2044,"modified_method":"public void run() {\n\t\tfreenet.support.Logger.OSThread.logPID(this);\n\t\ttry {\n\t\t\trealRun();\n\t\t//The last thing that realRun() does is register as a request-sender listener, so any exception here is the end.\n\t\t} catch(NotConnectedException e) {\n\t\t\tLogger.normal(this, \"requestor gone, could not start request handler wait\");\n\t\t\tnode.removeTransferringRequestHandler(uid);\n\t\t\ttag.handlerThrew(e);\n\t\t\ttag.unlockHandler();\n\t\t} catch(Throwable t) {\n\t\t\tLogger.error(this, \"Caught \" + t, t);\n\t\t\tnode.removeTransferringRequestHandler(uid);\n\t\t\ttag.handlerThrew(t);\n\t\t\ttag.unlockHandler();\n\t\t}\n\t}","commit_id":"ee7ea162a49eba7a706c9390ddcffeb7e06c55ab","url":"https://github.com/freenet/fred"},{"original_method":"public void onCHKTransferBegins() {\n\t\ttry {\n\t\t\t// Is a CHK.\n\t\t\tMessage df = DMT.createFNPCHKDataFound(uid, rs.getHeaders());\n\t\t\tsource.sendAsync(df, null, this);\n\n\t\t\tPartiallyReceivedBlock prb = rs.getPRB();\n\t\t\tbt =\n\t\t\t\tnew BlockTransmitter(node.usm, node.getTicker(), source, uid, prb, this, new ReceiverAbortHandler() {\n\n\t\t\t\t\tpublic boolean onAbort() {\n\t\t\t\t\t\tif(node.hasKey(key, false, false)) return true; // Don't want it\n\t\t\t\t\t\tif(node.failureTable.peersWantKey(key)) {\n\t\t\t\t\t\t\t// This may indicate downstream is having trouble communicating with us.\n\t\t\t\t\t\t\tLogger.error(this, \"Downstream transfer successful but upstream transfer failed. Reassigning tag to self because want the data for ourselves on \"+this);\n\t\t\t\t\t\t\tnode.reassignTagToSelf(tag);\n\t\t\t\t\t\t\trs.setMustUnlock();\n\t\t\t\t\t\t\tsynchronized(this) {\n\t\t\t\t\t\t\t\tdontUnlock = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// FIXME move unlocking logic into UIDTag and always wait for both the handler and the sender.\n\t\t\t\t\t\t\treturn false; // Want it\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t},\n\t\t\t\tnew BlockTransmitterCompletion() {\n\n\t\t\t\t\tpublic void blockTransferFinished(boolean success) {\n\t\t\t\t\t\tsynchronized(RequestHandler.this) {\n\t\t\t\t\t\t\ttransferCompleted = true;\n\t\t\t\t\t\t\ttransferSuccess = success;\n\t\t\t\t\t\t\tif(!waitingForTransferSuccess) return;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttransferFinished(success);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}, realTimeFlag);\n\t\t\tnode.addTransferringRequestHandler(uid);\n\t\t\tbt.sendAsync();\n\t\t} catch(NotConnectedException e) {\n\t\t\tsynchronized(this) {\n\t\t\t\tdisconnected = true;\n\t\t\t}\n\t\t\ttag.handlerDisconnected();\n\t\t\tLogger.normal(this, \"requestor is gone, can't begin CHK transfer\");\n\t\t}\n\t}","id":2045,"modified_method":"public void onCHKTransferBegins() {\n\t\ttry {\n\t\t\t// Is a CHK.\n\t\t\tMessage df = DMT.createFNPCHKDataFound(uid, rs.getHeaders());\n\t\t\tsource.sendAsync(df, null, this);\n\n\t\t\tPartiallyReceivedBlock prb = rs.getPRB();\n\t\t\tbt =\n\t\t\t\tnew BlockTransmitter(node.usm, node.getTicker(), source, uid, prb, this, new ReceiverAbortHandler() {\n\n\t\t\t\t\tpublic boolean onAbort() {\n\t\t\t\t\t\tif(node.hasKey(key, false, false)) return true; // Don't want it\n\t\t\t\t\t\tif(node.failureTable.peersWantKey(key)) {\n\t\t\t\t\t\t\t// This may indicate downstream is having trouble communicating with us.\n\t\t\t\t\t\t\tLogger.error(this, \"Downstream transfer successful but upstream transfer failed. Reassigning tag to self because want the data for ourselves on \"+this);\n\t\t\t\t\t\t\tnode.reassignTagToSelf(tag);\n\t\t\t\t\t\t\trs.setMustUnlock();\n\t\t\t\t\t\t\treturn false; // Want it\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t},\n\t\t\t\tnew BlockTransmitterCompletion() {\n\n\t\t\t\t\tpublic void blockTransferFinished(boolean success) {\n\t\t\t\t\t\tsynchronized(RequestHandler.this) {\n\t\t\t\t\t\t\ttransferCompleted = true;\n\t\t\t\t\t\t\ttransferSuccess = success;\n\t\t\t\t\t\t\tif(!waitingForTransferSuccess) return;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttransferFinished(success);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}, realTimeFlag);\n\t\t\tnode.addTransferringRequestHandler(uid);\n\t\t\tbt.sendAsync();\n\t\t} catch(NotConnectedException e) {\n\t\t\tsynchronized(this) {\n\t\t\t\tdisconnected = true;\n\t\t\t}\n\t\t\ttag.handlerDisconnected();\n\t\t\tLogger.normal(this, \"requestor is gone, can't begin CHK transfer\");\n\t\t}\n\t}","commit_id":"ee7ea162a49eba7a706c9390ddcffeb7e06c55ab","url":"https://github.com/freenet/fred"},{"original_method":"public void onCHKTransferBegins() {\n\t\ttry {\n\t\t\t// Is a CHK.\n\t\t\tMessage df = DMT.createFNPCHKDataFound(uid, rs.getHeaders());\n\t\t\tsource.sendAsync(df, null, this);\n\n\t\t\tPartiallyReceivedBlock prb = rs.getPRB();\n\t\t\tbt =\n\t\t\t\tnew BlockTransmitter(node.usm, node.getTicker(), source, uid, prb, this, new ReceiverAbortHandler() {\n\n\t\t\t\t\tpublic boolean onAbort() {\n\t\t\t\t\t\tif(node.hasKey(key, false, false)) return true; // Don't want it\n\t\t\t\t\t\tif(node.failureTable.peersWantKey(key)) {\n\t\t\t\t\t\t\t// This may indicate downstream is having trouble communicating with us.\n\t\t\t\t\t\t\tLogger.error(this, \"Downstream transfer successful but upstream transfer failed. Reassigning tag to self because want the data for ourselves on \"+this);\n\t\t\t\t\t\t\tnode.reassignTagToSelf(tag);\n\t\t\t\t\t\t\trs.setMustUnlock();\n\t\t\t\t\t\t\tsynchronized(this) {\n\t\t\t\t\t\t\t\tdontUnlock = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// FIXME move unlocking logic into UIDTag and always wait for both the handler and the sender.\n\t\t\t\t\t\t\treturn false; // Want it\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t},\n\t\t\t\tnew BlockTransmitterCompletion() {\n\n\t\t\t\t\tpublic void blockTransferFinished(boolean success) {\n\t\t\t\t\t\tsynchronized(RequestHandler.this) {\n\t\t\t\t\t\t\ttransferCompleted = true;\n\t\t\t\t\t\t\ttransferSuccess = success;\n\t\t\t\t\t\t\tif(!waitingForTransferSuccess) return;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttransferFinished(success);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}, realTimeFlag);\n\t\t\tnode.addTransferringRequestHandler(uid);\n\t\t\tbt.sendAsync();\n\t\t} catch(NotConnectedException e) {\n\t\t\tsynchronized(this) {\n\t\t\t\tdisconnected = true;\n\t\t\t}\n\t\t\ttag.handlerDisconnected();\n\t\t\tLogger.normal(this, \"requestor is gone, can't begin CHK transfer\");\n\t\t}\n\t}","id":2046,"modified_method":"public void onCHKTransferBegins() {\n\t\ttry {\n\t\t\t// Is a CHK.\n\t\t\tMessage df = DMT.createFNPCHKDataFound(uid, rs.getHeaders());\n\t\t\tsource.sendAsync(df, null, this);\n\n\t\t\tPartiallyReceivedBlock prb = rs.getPRB();\n\t\t\tbt =\n\t\t\t\tnew BlockTransmitter(node.usm, node.getTicker(), source, uid, prb, this, new ReceiverAbortHandler() {\n\n\t\t\t\t\tpublic boolean onAbort() {\n\t\t\t\t\t\tif(node.hasKey(key, false, false)) return true; // Don't want it\n\t\t\t\t\t\tif(node.failureTable.peersWantKey(key)) {\n\t\t\t\t\t\t\t// This may indicate downstream is having trouble communicating with us.\n\t\t\t\t\t\t\tLogger.error(this, \"Downstream transfer successful but upstream transfer failed. Reassigning tag to self because want the data for ourselves on \"+this);\n\t\t\t\t\t\t\tnode.reassignTagToSelf(tag);\n\t\t\t\t\t\t\trs.setMustUnlock();\n\t\t\t\t\t\t\treturn false; // Want it\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t},\n\t\t\t\tnew BlockTransmitterCompletion() {\n\n\t\t\t\t\tpublic void blockTransferFinished(boolean success) {\n\t\t\t\t\t\tsynchronized(RequestHandler.this) {\n\t\t\t\t\t\t\ttransferCompleted = true;\n\t\t\t\t\t\t\ttransferSuccess = success;\n\t\t\t\t\t\t\tif(!waitingForTransferSuccess) return;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttransferFinished(success);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}, realTimeFlag);\n\t\t\tnode.addTransferringRequestHandler(uid);\n\t\t\tbt.sendAsync();\n\t\t} catch(NotConnectedException e) {\n\t\t\tsynchronized(this) {\n\t\t\t\tdisconnected = true;\n\t\t\t}\n\t\t\ttag.handlerDisconnected();\n\t\t\tLogger.normal(this, \"requestor is gone, can't begin CHK transfer\");\n\t\t}\n\t}","commit_id":"76b403aa188eecfef8914af1b254aa70da57e191","url":"https://github.com/freenet/fred"},{"original_method":"public void run() {\n\t\tfreenet.support.Logger.OSThread.logPID(this);\n\t\ttry {\n\t\t\trealRun();\n\t\t//The last thing that realRun() does is register as a request-sender listener, so any exception here is the end.\n\t\t} catch(NotConnectedException e) {\n\t\t\tLogger.normal(this, \"requestor gone, could not start request handler wait\");\n\t\t\tnode.removeTransferringRequestHandler(uid);\n\t\t\ttag.handlerThrew(e);\n\t\t\tboolean dontUnlock;\n\t\t\tsynchronized(this) {\n\t\t\t\tdontUnlock = this.dontUnlock;\n\t\t\t}\n\t\t\tif(!dontUnlock)\n\t\t\t\ttag.unlockHandler();\n\t\t} catch(Throwable t) {\n\t\t\tLogger.error(this, \"Caught \" + t, t);\n\t\t\tnode.removeTransferringRequestHandler(uid);\n\t\t\ttag.handlerThrew(t);\n\t\t\tboolean dontUnlock;\n\t\t\tsynchronized(this) {\n\t\t\t\tdontUnlock = this.dontUnlock;\n\t\t\t}\n\t\t\tif(!dontUnlock)\n\t\t\t\ttag.unlockHandler();\n\t\t}\n\t}","id":2047,"modified_method":"public void run() {\n\t\tfreenet.support.Logger.OSThread.logPID(this);\n\t\ttry {\n\t\t\trealRun();\n\t\t//The last thing that realRun() does is register as a request-sender listener, so any exception here is the end.\n\t\t} catch(NotConnectedException e) {\n\t\t\tLogger.normal(this, \"requestor gone, could not start request handler wait\");\n\t\t\tnode.removeTransferringRequestHandler(uid);\n\t\t\ttag.handlerThrew(e);\n\t\t\ttag.unlockHandler();\n\t\t} catch(Throwable t) {\n\t\t\tLogger.error(this, \"Caught \" + t, t);\n\t\t\tnode.removeTransferringRequestHandler(uid);\n\t\t\ttag.handlerThrew(t);\n\t\t\ttag.unlockHandler();\n\t\t}\n\t}","commit_id":"76b403aa188eecfef8914af1b254aa70da57e191","url":"https://github.com/freenet/fred"},{"original_method":"private static SpacingBuilder createSpacingBuilder(CodeStyleSettings settings) {\n        JetCodeStyleSettings jetSettings = settings.getCustomSettings(JetCodeStyleSettings.class);\n        CommonCodeStyleSettings jetCommonSettings = settings.getCommonSettings(JetLanguage.INSTANCE);\n\n        return new SpacingBuilder(settings, JetLanguage.INSTANCE)\n                // ============ Line breaks ==============\n                .after(NAMESPACE_HEADER).blankLines(1)\n\n                .between(IMPORT_DIRECTIVE, IMPORT_DIRECTIVE).lineBreakInCode()\n                .after(IMPORT_LIST).blankLines(1)\n\n                .before(DOC_COMMENT).lineBreakInCode()\n                .before(FUN).lineBreakInCode()\n                .before(PROPERTY).lineBreakInCode()\n                .between(FUN, FUN).blankLines(1)\n                .between(FUN, PROPERTY).blankLines(1)\n\n                .afterInside(LBRACE, BLOCK).lineBreakInCode()\n                .beforeInside(RBRACE, CLASS_BODY).lineBreakInCode()\n                .beforeInside(RBRACE, BLOCK).lineBreakInCode()\n\n                // =============== Spacing ================\n                .before(COMMA).spaceIf(jetCommonSettings.SPACE_BEFORE_COMMA)\n                .after(COMMA).spaceIf(jetCommonSettings.SPACE_AFTER_COMMA)\n\n                .around(TokenSet.create(EQ, MULTEQ, DIVEQ, PLUSEQ, MINUSEQ, PERCEQ)).spaceIf(jetCommonSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n                .around(TokenSet.create(ANDAND, OROR)).spaceIf(jetCommonSettings.SPACE_AROUND_LOGICAL_OPERATORS)\n                .around(TokenSet.create(EQEQ, EXCLEQ, EQEQEQ, EXCLEQEQEQ)).spaceIf(jetCommonSettings.SPACE_AROUND_EQUALITY_OPERATORS)\n                .aroundInside(TokenSet.create(LT, GT, LTEQ, GTEQ), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_RELATIONAL_OPERATORS)\n                .aroundInside(TokenSet.create(PLUS, MINUS), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_ADDITIVE_OPERATORS)\n                .aroundInside(TokenSet.create(MUL, DIV, PERC), BINARY_EXPRESSION).spaceIf(\n                        jetCommonSettings.SPACE_AROUND_MULTIPLICATIVE_OPERATORS)\n                .around(TokenSet.create(PLUSPLUS, MINUSMINUS, EXCLEXCL, MINUS, PLUS, EXCL)).spaceIf(\n                        jetCommonSettings.SPACE_AROUND_UNARY_OPERATOR)\n                .around(RANGE).spaceIf(jetSettings.SPACE_AROUND_RANGE)\n\n                .beforeInside(BLOCK, FUN).spaceIf(jetCommonSettings.SPACE_BEFORE_METHOD_LBRACE)\n\n                .afterInside(LPAR, VALUE_PARAMETER_LIST).spaces(0)\n                .beforeInside(RPAR, VALUE_PARAMETER_LIST).spaces(0)\n                .afterInside(LT, TYPE_PARAMETER_LIST).spaces(0)\n                .beforeInside(GT, TYPE_PARAMETER_LIST).spaces(0)\n                .afterInside(LPAR, VALUE_ARGUMENT_LIST).spaces(0)\n                .beforeInside(RPAR, VALUE_ARGUMENT_LIST).spaces(0)\n                .afterInside(LT, TYPE_ARGUMENT_LIST).spaces(0)\n                .beforeInside(GT, TYPE_ARGUMENT_LIST).spaces(0)\n\n                .betweenInside(FOR_KEYWORD, LPAR, FOR).spacing(1, 1, 0, false, 0)\n                .betweenInside(IF_KEYWORD, LPAR, IF).spacing(1, 1, 0, false, 0)\n\n                // TODO: Ask for better API\n                // Type of the declaration colon\n                .beforeInside(COLON, PROPERTY).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, PROPERTY).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n                .beforeInside(COLON, FUN).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, FUN).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n                .beforeInside(COLON, VALUE_PARAMETER).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, VALUE_PARAMETER).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n\n                // Extends or constraint colon\n                .beforeInside(COLON, TYPE_CONSTRAINT).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, TYPE_CONSTRAINT).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                .beforeInside(COLON, CLASS).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, CLASS).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                .beforeInside(COLON, TYPE_PARAMETER).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, TYPE_PARAMETER).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n\n                .between(VALUE_ARGUMENT_LIST, FUNCTION_LITERAL_EXPRESSION).spaces(1)\n                .beforeInside(ARROW, FUNCTION_LITERAL).spaceIf(jetSettings.SPACE_BEFORE_LAMBDA_ARROW)\n\n                //when\n                .aroundInside(ARROW, WHEN_ENTRY).spaceIf(jetSettings.SPACE_AROUND_WHEN_ARROW)\n                .beforeInside(LBRACE, WHEN).spacing(1, 1, 0, true, 0)          //omit blank lines before '{' in 'when' statement\n\n                .aroundInside(ARROW, FUNCTION_TYPE).spaceIf(jetSettings.SPACE_AROUND_FUNCTION_TYPE_ARROW)\n\n                .betweenInside(REFERENCE_EXPRESSION, FUNCTION_LITERAL_EXPRESSION, CALL_EXPRESSION).spaces(1)\n\n                .aroundInside(ELSE_KEYWORD, IF).spaces(1)\n                .betweenInside(RPAR, THEN, IF).spaces(1)\n\n                .between(RPAR, BODY).spaces(1)\n                ;\n    }","id":2048,"modified_method":"private static SpacingBuilder createSpacingBuilder(CodeStyleSettings settings) {\n        JetCodeStyleSettings jetSettings = settings.getCustomSettings(JetCodeStyleSettings.class);\n        CommonCodeStyleSettings jetCommonSettings = settings.getCommonSettings(JetLanguage.INSTANCE);\n\n        return new SpacingBuilder(settings, JetLanguage.INSTANCE)\n                // ============ Line breaks ==============\n                .after(NAMESPACE_HEADER).blankLines(1)\n\n                .between(IMPORT_DIRECTIVE, IMPORT_DIRECTIVE).lineBreakInCode()\n                .after(IMPORT_LIST).blankLines(1)\n\n                .before(DOC_COMMENT).lineBreakInCode()\n                .before(FUN).lineBreakInCode()\n                .before(PROPERTY).lineBreakInCode()\n                .between(FUN, FUN).blankLines(1)\n                .between(FUN, PROPERTY).blankLines(1)\n\n                .afterInside(LBRACE, BLOCK).lineBreakInCode()\n                .beforeInside(RBRACE, CLASS_BODY).lineBreakInCode()\n                .beforeInside(RBRACE, BLOCK).lineBreakInCode()\n\n                // =============== Spacing ================\n                .before(COMMA).spaceIf(jetCommonSettings.SPACE_BEFORE_COMMA)\n                .after(COMMA).spaceIf(jetCommonSettings.SPACE_AFTER_COMMA)\n\n                .around(TokenSet.create(EQ, MULTEQ, DIVEQ, PLUSEQ, MINUSEQ, PERCEQ)).spaceIf(jetCommonSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n                .around(TokenSet.create(ANDAND, OROR)).spaceIf(jetCommonSettings.SPACE_AROUND_LOGICAL_OPERATORS)\n                .around(TokenSet.create(EQEQ, EXCLEQ, EQEQEQ, EXCLEQEQEQ)).spaceIf(jetCommonSettings.SPACE_AROUND_EQUALITY_OPERATORS)\n                .aroundInside(TokenSet.create(LT, GT, LTEQ, GTEQ), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_RELATIONAL_OPERATORS)\n                .aroundInside(TokenSet.create(PLUS, MINUS), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_ADDITIVE_OPERATORS)\n                .aroundInside(TokenSet.create(MUL, DIV, PERC), BINARY_EXPRESSION).spaceIf(\n                        jetCommonSettings.SPACE_AROUND_MULTIPLICATIVE_OPERATORS)\n                .around(TokenSet.create(PLUSPLUS, MINUSMINUS, EXCLEXCL, MINUS, PLUS, EXCL)).spaceIf(\n                        jetCommonSettings.SPACE_AROUND_UNARY_OPERATOR)\n                .around(RANGE).spaceIf(jetSettings.SPACE_AROUND_RANGE)\n\n                .beforeInside(BLOCK, FUN).spaceIf(jetCommonSettings.SPACE_BEFORE_METHOD_LBRACE)\n\n                .afterInside(LPAR, VALUE_PARAMETER_LIST).spaces(0)\n                .beforeInside(RPAR, VALUE_PARAMETER_LIST).spaces(0)\n                .afterInside(LT, TYPE_PARAMETER_LIST).spaces(0)\n                .beforeInside(GT, TYPE_PARAMETER_LIST).spaces(0)\n                .afterInside(LPAR, VALUE_ARGUMENT_LIST).spaces(0)\n                .beforeInside(RPAR, VALUE_ARGUMENT_LIST).spaces(0)\n                .afterInside(LT, TYPE_ARGUMENT_LIST).spaces(0)\n                .beforeInside(GT, TYPE_ARGUMENT_LIST).spaces(0)\n\n                .betweenInside(FOR_KEYWORD, LPAR, FOR).spacing(1, 1, 0, false, 0)\n                .betweenInside(IF_KEYWORD, LPAR, IF).spacing(1, 1, 0, false, 0)\n                .betweenInside(WHILE_KEYWORD, LPAR, WHILE).spacing(1, 1, 0, false, 0)\n\n                // TODO: Ask for better API\n                // Type of the declaration colon\n                .beforeInside(COLON, PROPERTY).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, PROPERTY).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n                .beforeInside(COLON, FUN).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, FUN).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n                .beforeInside(COLON, VALUE_PARAMETER).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, VALUE_PARAMETER).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n\n                // Extends or constraint colon\n                .beforeInside(COLON, TYPE_CONSTRAINT).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, TYPE_CONSTRAINT).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                .beforeInside(COLON, CLASS).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, CLASS).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                .beforeInside(COLON, TYPE_PARAMETER).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, TYPE_PARAMETER).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n\n                .between(VALUE_ARGUMENT_LIST, FUNCTION_LITERAL_EXPRESSION).spaces(1)\n                .beforeInside(ARROW, FUNCTION_LITERAL).spaceIf(jetSettings.SPACE_BEFORE_LAMBDA_ARROW)\n\n                //when\n                .aroundInside(ARROW, WHEN_ENTRY).spaceIf(jetSettings.SPACE_AROUND_WHEN_ARROW)\n                .beforeInside(LBRACE, WHEN).spacing(1, 1, 0, true, 0)          //omit blank lines before '{' in 'when' statement\n\n                .aroundInside(ARROW, FUNCTION_TYPE).spaceIf(jetSettings.SPACE_AROUND_FUNCTION_TYPE_ARROW)\n\n                .betweenInside(REFERENCE_EXPRESSION, FUNCTION_LITERAL_EXPRESSION, CALL_EXPRESSION).spaces(1)\n\n                .aroundInside(ELSE_KEYWORD, IF).spaces(1)\n                .betweenInside(RPAR, THEN, IF).spaces(1)\n\n                .between(RPAR, BODY).spaces(1)\n                ;\n    }","commit_id":"dddde11c6a66369c692edab522a683ba0a98b26d","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private static SpacingBuilder createSpacingBuilder(CodeStyleSettings settings) {\n        JetCodeStyleSettings jetSettings = settings.getCustomSettings(JetCodeStyleSettings.class);\n        CommonCodeStyleSettings jetCommonSettings = settings.getCommonSettings(JetLanguage.INSTANCE);\n\n        return new SpacingBuilder(settings, JetLanguage.INSTANCE)\n                // ============ Line breaks ==============\n                .after(NAMESPACE_HEADER).blankLines(1)\n\n                .between(IMPORT_DIRECTIVE, IMPORT_DIRECTIVE).lineBreakInCode()\n                .after(IMPORT_LIST).blankLines(1)\n\n                .before(DOC_COMMENT).lineBreakInCode()\n                .before(FUN).lineBreakInCode()\n                .before(PROPERTY).lineBreakInCode()\n                .between(FUN, FUN).blankLines(1)\n                .between(FUN, PROPERTY).blankLines(1)\n\n                .afterInside(LBRACE, BLOCK).lineBreakInCode()\n                .beforeInside(RBRACE, CLASS_BODY).lineBreakInCode()\n                .beforeInside(RBRACE, BLOCK).lineBreakInCode()\n\n                // =============== Spacing ================\n                .before(COMMA).spaceIf(jetCommonSettings.SPACE_BEFORE_COMMA)\n                .after(COMMA).spaceIf(jetCommonSettings.SPACE_AFTER_COMMA)\n\n                .around(TokenSet.create(EQ, MULTEQ, DIVEQ, PLUSEQ, MINUSEQ, PERCEQ)).spaceIf(jetCommonSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n                .around(TokenSet.create(ANDAND, OROR)).spaceIf(jetCommonSettings.SPACE_AROUND_LOGICAL_OPERATORS)\n                .around(TokenSet.create(EQEQ, EXCLEQ, EQEQEQ, EXCLEQEQEQ)).spaceIf(jetCommonSettings.SPACE_AROUND_EQUALITY_OPERATORS)\n                .aroundInside(TokenSet.create(LT, GT, LTEQ, GTEQ), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_RELATIONAL_OPERATORS)\n                .aroundInside(TokenSet.create(PLUS, MINUS), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_ADDITIVE_OPERATORS)\n                .aroundInside(TokenSet.create(MUL, DIV, PERC), BINARY_EXPRESSION).spaceIf(\n                        jetCommonSettings.SPACE_AROUND_MULTIPLICATIVE_OPERATORS)\n                .around(TokenSet.create(PLUSPLUS, MINUSMINUS, EXCLEXCL, MINUS, PLUS, EXCL)).spaceIf(\n                        jetCommonSettings.SPACE_AROUND_UNARY_OPERATOR)\n                .around(RANGE).spaceIf(jetSettings.SPACE_AROUND_RANGE)\n\n                .beforeInside(BLOCK, FUN).spaceIf(jetCommonSettings.SPACE_BEFORE_METHOD_LBRACE)\n\n                .afterInside(LPAR, VALUE_PARAMETER_LIST).spaces(0)\n                .beforeInside(RPAR, VALUE_PARAMETER_LIST).spaces(0)\n                .afterInside(LT, TYPE_PARAMETER_LIST).spaces(0)\n                .beforeInside(GT, TYPE_PARAMETER_LIST).spaces(0)\n                .afterInside(LPAR, VALUE_ARGUMENT_LIST).spaces(0)\n                .beforeInside(RPAR, VALUE_ARGUMENT_LIST).spaces(0)\n                .afterInside(LT, TYPE_ARGUMENT_LIST).spaces(0)\n                .beforeInside(GT, TYPE_ARGUMENT_LIST).spaces(0)\n\n                .betweenInside(FOR_KEYWORD, LPAR, FOR).spacing(1, 1, 0, false, 0)\n                .betweenInside(IF_KEYWORD, LPAR, IF).spacing(1, 1, 0, false, 0)\n                .betweenInside(WHILE_KEYWORD, LPAR, WHILE).spacing(1, 1, 0, false, 0)\n\n                // TODO: Ask for better API\n                // Type of the declaration colon\n                .beforeInside(COLON, PROPERTY).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, PROPERTY).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n                .beforeInside(COLON, FUN).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, FUN).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n                .beforeInside(COLON, VALUE_PARAMETER).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, VALUE_PARAMETER).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n\n                // Extends or constraint colon\n                .beforeInside(COLON, TYPE_CONSTRAINT).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, TYPE_CONSTRAINT).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                .beforeInside(COLON, CLASS).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, CLASS).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                .beforeInside(COLON, TYPE_PARAMETER).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, TYPE_PARAMETER).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n\n                .between(VALUE_ARGUMENT_LIST, FUNCTION_LITERAL_EXPRESSION).spaces(1)\n                .beforeInside(ARROW, FUNCTION_LITERAL).spaceIf(jetSettings.SPACE_BEFORE_LAMBDA_ARROW)\n\n                //when\n                .aroundInside(ARROW, WHEN_ENTRY).spaceIf(jetSettings.SPACE_AROUND_WHEN_ARROW)\n                .beforeInside(LBRACE, WHEN).spacing(1, 1, 0, true, 0)          //omit blank lines before '{' in 'when' statement\n\n                .aroundInside(ARROW, FUNCTION_TYPE).spaceIf(jetSettings.SPACE_AROUND_FUNCTION_TYPE_ARROW)\n\n                .betweenInside(REFERENCE_EXPRESSION, FUNCTION_LITERAL_EXPRESSION, CALL_EXPRESSION).spaces(1)\n\n                .aroundInside(ELSE_KEYWORD, IF).spaces(1)\n                .betweenInside(RPAR, THEN, IF).spaces(1)\n\n                .between(RPAR, BODY).spaces(1)\n                ;\n    }","id":2049,"modified_method":"private static SpacingBuilder createSpacingBuilder(CodeStyleSettings settings) {\n        JetCodeStyleSettings jetSettings = settings.getCustomSettings(JetCodeStyleSettings.class);\n        CommonCodeStyleSettings jetCommonSettings = settings.getCommonSettings(JetLanguage.INSTANCE);\n\n        return new SpacingBuilder(settings, JetLanguage.INSTANCE)\n                // ============ Line breaks ==============\n                .after(NAMESPACE_HEADER).blankLines(1)\n\n                .between(IMPORT_DIRECTIVE, IMPORT_DIRECTIVE).lineBreakInCode()\n                .after(IMPORT_LIST).blankLines(1)\n\n                .before(DOC_COMMENT).lineBreakInCode()\n                .before(FUN).lineBreakInCode()\n                .before(PROPERTY).lineBreakInCode()\n                .between(FUN, FUN).blankLines(1)\n                .between(FUN, PROPERTY).blankLines(1)\n\n                .afterInside(LBRACE, BLOCK).lineBreakInCode()\n                .beforeInside(RBRACE, CLASS_BODY).lineBreakInCode()\n                .beforeInside(RBRACE, BLOCK).lineBreakInCode()\n\n                // =============== Spacing ================\n                .before(COMMA).spaceIf(jetCommonSettings.SPACE_BEFORE_COMMA)\n                .after(COMMA).spaceIf(jetCommonSettings.SPACE_AFTER_COMMA)\n\n                .around(TokenSet.create(EQ, MULTEQ, DIVEQ, PLUSEQ, MINUSEQ, PERCEQ)).spaceIf(jetCommonSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n                .around(TokenSet.create(ANDAND, OROR)).spaceIf(jetCommonSettings.SPACE_AROUND_LOGICAL_OPERATORS)\n                .around(TokenSet.create(EQEQ, EXCLEQ, EQEQEQ, EXCLEQEQEQ)).spaceIf(jetCommonSettings.SPACE_AROUND_EQUALITY_OPERATORS)\n                .aroundInside(TokenSet.create(LT, GT, LTEQ, GTEQ), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_RELATIONAL_OPERATORS)\n                .aroundInside(TokenSet.create(PLUS, MINUS), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_ADDITIVE_OPERATORS)\n                .aroundInside(TokenSet.create(MUL, DIV, PERC), BINARY_EXPRESSION).spaceIf(\n                        jetCommonSettings.SPACE_AROUND_MULTIPLICATIVE_OPERATORS)\n                .around(TokenSet.create(PLUSPLUS, MINUSMINUS, EXCLEXCL, MINUS, PLUS, EXCL)).spaceIf(\n                        jetCommonSettings.SPACE_AROUND_UNARY_OPERATOR)\n                .around(RANGE).spaceIf(jetSettings.SPACE_AROUND_RANGE)\n\n                .beforeInside(BLOCK, FUN).spaceIf(jetCommonSettings.SPACE_BEFORE_METHOD_LBRACE)\n\n                .afterInside(LPAR, VALUE_PARAMETER_LIST).spaces(0)\n                .beforeInside(RPAR, VALUE_PARAMETER_LIST).spaces(0)\n                .afterInside(LT, TYPE_PARAMETER_LIST).spaces(0)\n                .beforeInside(GT, TYPE_PARAMETER_LIST).spaces(0)\n                .afterInside(LPAR, VALUE_ARGUMENT_LIST).spaces(0)\n                .beforeInside(RPAR, VALUE_ARGUMENT_LIST).spaces(0)\n                .afterInside(LT, TYPE_ARGUMENT_LIST).spaces(0)\n                .beforeInside(GT, TYPE_ARGUMENT_LIST).spaces(0)\n\n                .betweenInside(FOR_KEYWORD, LPAR, FOR).spacing(1, 1, 0, false, 0)\n                .betweenInside(IF_KEYWORD, LPAR, IF).spacing(1, 1, 0, false, 0)\n                .betweenInside(WHILE_KEYWORD, LPAR, WHILE).spacing(1, 1, 0, false, 0)\n                .betweenInside(WHILE_KEYWORD, LPAR, DO_WHILE).spacing(1, 1, 0, false, 0)\n\n                .aroundInside(WHILE_KEYWORD, DO_WHILE).spaces(1)\n                .afterInside(DO_KEYWORD, DO_WHILE).spaces(1)\n\n                // TODO: Ask for better API\n                // Type of the declaration colon\n                .beforeInside(COLON, PROPERTY).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, PROPERTY).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n                .beforeInside(COLON, FUN).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, FUN).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n                .beforeInside(COLON, VALUE_PARAMETER).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, VALUE_PARAMETER).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n\n                // Extends or constraint colon\n                .beforeInside(COLON, TYPE_CONSTRAINT).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, TYPE_CONSTRAINT).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                .beforeInside(COLON, CLASS).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, CLASS).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                .beforeInside(COLON, TYPE_PARAMETER).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, TYPE_PARAMETER).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n\n                .between(VALUE_ARGUMENT_LIST, FUNCTION_LITERAL_EXPRESSION).spaces(1)\n                .beforeInside(ARROW, FUNCTION_LITERAL).spaceIf(jetSettings.SPACE_BEFORE_LAMBDA_ARROW)\n\n                //when\n                .aroundInside(ARROW, WHEN_ENTRY).spaceIf(jetSettings.SPACE_AROUND_WHEN_ARROW)\n                .beforeInside(LBRACE, WHEN).spacing(1, 1, 0, true, 0)          //omit blank lines before '{' in 'when' statement\n\n                .aroundInside(ARROW, FUNCTION_TYPE).spaceIf(jetSettings.SPACE_AROUND_FUNCTION_TYPE_ARROW)\n\n                .betweenInside(REFERENCE_EXPRESSION, FUNCTION_LITERAL_EXPRESSION, CALL_EXPRESSION).spaces(1)\n\n                .aroundInside(ELSE_KEYWORD, IF).spaces(1)\n                .betweenInside(RPAR, THEN, IF).spaces(1)\n\n                .between(RPAR, BODY).spaces(1)\n                ;\n    }","commit_id":"80ab043d211acecf2dcf0f3777d41fb3065ae6f4","url":"https://github.com/JetBrains/kotlin"},{"original_method":"private static SpacingBuilder createSpacingBuilder(CodeStyleSettings settings) {\n        JetCodeStyleSettings jetSettings = settings.getCustomSettings(JetCodeStyleSettings.class);\n        CommonCodeStyleSettings jetCommonSettings = settings.getCommonSettings(JetLanguage.INSTANCE);\n\n        return new SpacingBuilder(settings, JetLanguage.INSTANCE)\n                // ============ Line breaks ==============\n                .after(NAMESPACE_HEADER).blankLines(1)\n\n                .between(IMPORT_DIRECTIVE, IMPORT_DIRECTIVE).lineBreakInCode()\n                .after(IMPORT_LIST).blankLines(1)\n\n                .before(DOC_COMMENT).lineBreakInCode()\n                .before(FUN).lineBreakInCode()\n                .before(PROPERTY).lineBreakInCode()\n                .between(FUN, FUN).blankLines(1)\n                .between(FUN, PROPERTY).blankLines(1)\n\n                .afterInside(LBRACE, BLOCK).lineBreakInCode()\n                .beforeInside(RBRACE, CLASS_BODY).lineBreakInCode()\n                .beforeInside(RBRACE, BLOCK).lineBreakInCode()\n\n                // =============== Spacing ================\n                .before(COMMA).spaceIf(jetCommonSettings.SPACE_BEFORE_COMMA)\n                .after(COMMA).spaceIf(jetCommonSettings.SPACE_AFTER_COMMA)\n\n                .around(TokenSet.create(EQ, MULTEQ, DIVEQ, PLUSEQ, MINUSEQ, PERCEQ)).spaceIf(jetCommonSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n                .around(TokenSet.create(ANDAND, OROR)).spaceIf(jetCommonSettings.SPACE_AROUND_LOGICAL_OPERATORS)\n                .around(TokenSet.create(EQEQ, EXCLEQ, EQEQEQ, EXCLEQEQEQ)).spaceIf(jetCommonSettings.SPACE_AROUND_EQUALITY_OPERATORS)\n                .aroundInside(TokenSet.create(LT, GT, LTEQ, GTEQ), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_RELATIONAL_OPERATORS)\n                .aroundInside(TokenSet.create(PLUS, MINUS), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_ADDITIVE_OPERATORS)\n                .aroundInside(TokenSet.create(MUL, DIV, PERC), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_MULTIPLICATIVE_OPERATORS)\n                .around(TokenSet.create(PLUSPLUS, MINUSMINUS, EXCLEXCL, MINUS, PLUS, EXCL)).spaceIf(jetCommonSettings.SPACE_AROUND_UNARY_OPERATOR)\n                .around(RANGE).spaceIf(jetSettings.SPACE_AROUND_RANGE)\n\n                .beforeInside(BLOCK, FUN).spaceIf(jetCommonSettings.SPACE_BEFORE_METHOD_LBRACE)\n\n                .afterInside(LPAR, VALUE_PARAMETER_LIST).spaces(0)\n                .beforeInside(RPAR, VALUE_PARAMETER_LIST).spaces(0)\n                .afterInside(LT, TYPE_PARAMETER_LIST).spaces(0)\n                .beforeInside(GT, TYPE_PARAMETER_LIST).spaces(0)\n                .afterInside(LPAR, VALUE_ARGUMENT_LIST).spaces(0)\n                .beforeInside(RPAR, VALUE_ARGUMENT_LIST).spaces(0)\n                .afterInside(LT, TYPE_ARGUMENT_LIST).spaces(0)\n                .beforeInside(GT, TYPE_ARGUMENT_LIST).spaces(0)\n\n                .betweenInside(FOR_KEYWORD, LPAR, FOR).spacing(1, 1, 0, false, 0)\n\n                // TODO: Ask for better API\n                // Type of the declaration colon\n                .beforeInside(COLON, PROPERTY).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, PROPERTY).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n                .beforeInside(COLON, FUN).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, FUN).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n                .beforeInside(COLON, VALUE_PARAMETER).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, VALUE_PARAMETER).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n\n                // Extends or constraint colon\n                .beforeInside(COLON, TYPE_CONSTRAINT).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, TYPE_CONSTRAINT).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                .beforeInside(COLON, CLASS).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, CLASS).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                .beforeInside(COLON, TYPE_PARAMETER).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, TYPE_PARAMETER).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n\n                .between(VALUE_ARGUMENT_LIST, FUNCTION_LITERAL_EXPRESSION).spaces(1)\n                .beforeInside(ARROW, FUNCTION_LITERAL).spaceIf(jetSettings.SPACE_BEFORE_LAMBDA_ARROW)\n\n                //when\n                .aroundInside(ARROW, WHEN_ENTRY).spaceIf(jetSettings.SPACE_AROUND_WHEN_ARROW)\n                .beforeInside(LBRACE, WHEN).spacing(1, 1, 0, true, 0)          //omit blank lines before '{' in 'when' statement\n\n                .aroundInside(ARROW, FUNCTION_TYPE).spaceIf(jetSettings.SPACE_AROUND_FUNCTION_TYPE_ARROW)\n\n                .betweenInside(REFERENCE_EXPRESSION, FUNCTION_LITERAL_EXPRESSION, CALL_EXPRESSION).spaces(1)\n                ;\n    }","id":2050,"modified_method":"private static SpacingBuilder createSpacingBuilder(CodeStyleSettings settings) {\n        JetCodeStyleSettings jetSettings = settings.getCustomSettings(JetCodeStyleSettings.class);\n        CommonCodeStyleSettings jetCommonSettings = settings.getCommonSettings(JetLanguage.INSTANCE);\n\n        return new SpacingBuilder(settings, JetLanguage.INSTANCE)\n                // ============ Line breaks ==============\n                .after(NAMESPACE_HEADER).blankLines(1)\n\n                .between(IMPORT_DIRECTIVE, IMPORT_DIRECTIVE).lineBreakInCode()\n                .after(IMPORT_LIST).blankLines(1)\n\n                .before(DOC_COMMENT).lineBreakInCode()\n                .before(FUN).lineBreakInCode()\n                .before(PROPERTY).lineBreakInCode()\n                .between(FUN, FUN).blankLines(1)\n                .between(FUN, PROPERTY).blankLines(1)\n\n                .afterInside(LBRACE, BLOCK).lineBreakInCode()\n                .beforeInside(RBRACE, CLASS_BODY).lineBreakInCode()\n                .beforeInside(RBRACE, BLOCK).lineBreakInCode()\n\n                // =============== Spacing ================\n                .before(COMMA).spaceIf(jetCommonSettings.SPACE_BEFORE_COMMA)\n                .after(COMMA).spaceIf(jetCommonSettings.SPACE_AFTER_COMMA)\n\n                .around(TokenSet.create(EQ, MULTEQ, DIVEQ, PLUSEQ, MINUSEQ, PERCEQ)).spaceIf(jetCommonSettings.SPACE_AROUND_ASSIGNMENT_OPERATORS)\n                .around(TokenSet.create(ANDAND, OROR)).spaceIf(jetCommonSettings.SPACE_AROUND_LOGICAL_OPERATORS)\n                .around(TokenSet.create(EQEQ, EXCLEQ, EQEQEQ, EXCLEQEQEQ)).spaceIf(jetCommonSettings.SPACE_AROUND_EQUALITY_OPERATORS)\n                .aroundInside(TokenSet.create(LT, GT, LTEQ, GTEQ), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_RELATIONAL_OPERATORS)\n                .aroundInside(TokenSet.create(PLUS, MINUS), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_ADDITIVE_OPERATORS)\n                .aroundInside(TokenSet.create(MUL, DIV, PERC), BINARY_EXPRESSION).spaceIf(jetCommonSettings.SPACE_AROUND_MULTIPLICATIVE_OPERATORS)\n                .around(TokenSet.create(PLUSPLUS, MINUSMINUS, EXCLEXCL, MINUS, PLUS, EXCL)).spaceIf(jetCommonSettings.SPACE_AROUND_UNARY_OPERATOR)\n                .around(RANGE).spaceIf(jetSettings.SPACE_AROUND_RANGE)\n\n                .beforeInside(BLOCK, FUN).spaceIf(jetCommonSettings.SPACE_BEFORE_METHOD_LBRACE)\n\n                .afterInside(LPAR, VALUE_PARAMETER_LIST).spaces(0)\n                .beforeInside(RPAR, VALUE_PARAMETER_LIST).spaces(0)\n                .afterInside(LT, TYPE_PARAMETER_LIST).spaces(0)\n                .beforeInside(GT, TYPE_PARAMETER_LIST).spaces(0)\n                .afterInside(LPAR, VALUE_ARGUMENT_LIST).spaces(0)\n                .beforeInside(RPAR, VALUE_ARGUMENT_LIST).spaces(0)\n                .afterInside(LT, TYPE_ARGUMENT_LIST).spaces(0)\n                .beforeInside(GT, TYPE_ARGUMENT_LIST).spaces(0)\n\n                .betweenInside(FOR_KEYWORD, LPAR, FOR).spacing(1, 1, 0, false, 0)\n                .betweenInside(IF_KEYWORD, LPAR, IF).spacing(1, 1, 0, false, 0)\n\n                // TODO: Ask for better API\n                // Type of the declaration colon\n                .beforeInside(COLON, PROPERTY).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, PROPERTY).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n                .beforeInside(COLON, FUN).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, FUN).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n                .beforeInside(COLON, VALUE_PARAMETER).spaceIf(jetSettings.SPACE_BEFORE_TYPE_COLON)\n                .afterInside(COLON, VALUE_PARAMETER).spaceIf(jetSettings.SPACE_AFTER_TYPE_COLON)\n\n                // Extends or constraint colon\n                .beforeInside(COLON, TYPE_CONSTRAINT).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, TYPE_CONSTRAINT).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                .beforeInside(COLON, CLASS).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, CLASS).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n                .beforeInside(COLON, TYPE_PARAMETER).spaceIf(jetSettings.SPACE_BEFORE_EXTEND_COLON)\n                .afterInside(COLON, TYPE_PARAMETER).spaceIf(jetSettings.SPACE_AFTER_EXTEND_COLON)\n\n                .between(VALUE_ARGUMENT_LIST, FUNCTION_LITERAL_EXPRESSION).spaces(1)\n                .beforeInside(ARROW, FUNCTION_LITERAL).spaceIf(jetSettings.SPACE_BEFORE_LAMBDA_ARROW)\n\n                //when\n                .aroundInside(ARROW, WHEN_ENTRY).spaceIf(jetSettings.SPACE_AROUND_WHEN_ARROW)\n                .beforeInside(LBRACE, WHEN).spacing(1, 1, 0, true, 0)          //omit blank lines before '{' in 'when' statement\n\n                .aroundInside(ARROW, FUNCTION_TYPE).spaceIf(jetSettings.SPACE_AROUND_FUNCTION_TYPE_ARROW)\n\n                .betweenInside(REFERENCE_EXPRESSION, FUNCTION_LITERAL_EXPRESSION, CALL_EXPRESSION).spaces(1)\n                ;\n    }","commit_id":"3e205d162ed94957a84bca4d590f5c6eccf631f3","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public GrStepDefinition(GrMethodCall stepDefinition) {\n    super(stepDefinition);\n\n    myText = GrCucumberUtil.getCucumberDescription(stepDefinition);\n  }","id":2051,"modified_method":"public GrStepDefinition(GrMethodCall stepDefinition) {\n    super(stepDefinition);\n\n    myText = GrCucumberUtil.getStepDefinitionPatternText(stepDefinition);\n  }","commit_id":"0cb045a6b4f459956058fecfa59f2afc59a79c13","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  @Override\n  public String getStepDefinitionFilePath(@NotNull PsiFile file) {\n    final VirtualFile vFile = file.getVirtualFile();\n    if (file instanceof GroovyFile && vFile != null) {\n      return ((GroovyFile)file).getPackageName() + \".\" + vFile.getNameWithoutExtension();\n    }\n    return file.getName();\n  }","id":2052,"modified_method":"@NotNull\n  @Override\n  public String getStepDefinitionFilePath(@NotNull PsiFile file) {\n    final VirtualFile vFile = file.getVirtualFile();\n    if (file instanceof GroovyFile && vFile != null) {\n      String packageName = ((GroovyFile)file).getPackageName();\n      if (StringUtil.isEmptyOrSpaces(packageName)) {\n        return vFile.getNameWithoutExtension();\n      }\n      else {\n        return packageName + \".\" + vFile.getNameWithoutExtension();\n      }\n    }\n    return file.getName();\n  }","commit_id":"0cb045a6b4f459956058fecfa59f2afc59a79c13","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public boolean createStepDefinition(@NotNull GherkinStep step, @NotNull PsiFile file) {\n    if (!(file instanceof GroovyFile)) return false;\n\n    final Project project = file.getProject();\n    final VirtualFile vFile = ObjectUtils.assertNotNull(file.getVirtualFile());\n    final OpenFileDescriptor descriptor = new OpenFileDescriptor(project, vFile);\n    FileEditorManager.getInstance(project).getAllEditors(vFile);\n    FileEditorManager.getInstance(project).openTextEditor(descriptor, true);\n    final Editor editor = FileEditorManager.getInstance(project).getSelectedTextEditor();\n\n    if (editor != null) {\n      final TemplateManager templateManager = TemplateManager.getInstance(file.getProject());\n      final TemplateState templateState = TemplateManagerImpl.getTemplateState(editor);\n      final Template template = templateManager.getActiveTemplate(editor);\n      if (templateState != null && template != null) {\n        templateState.gotoEnd();\n      }\n    }\n\n    // snippet text\n    final GrMethodCall element = buildStepDefinitionByStep(step);\n\n    GrStatement statement = ((GroovyFile)file).addStatementBefore(element, null);\n    statement = CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(statement);\n    GrReferenceAdjuster.shortenReferences(statement);\n    return true;\n  }","id":2053,"modified_method":"@Override\n  public boolean createStepDefinition(@NotNull GherkinStep step, @NotNull final PsiFile file) {\n    if (!(file instanceof GroovyFile)) return false;\n\n    final Project project = file.getProject();\n    final VirtualFile vFile = ObjectUtils.assertNotNull(file.getVirtualFile());\n    final OpenFileDescriptor descriptor = new OpenFileDescriptor(project, vFile);\n    FileEditorManager.getInstance(project).getAllEditors(vFile);\n    FileEditorManager.getInstance(project).openTextEditor(descriptor, true);\n    final Editor editor = FileEditorManager.getInstance(project).getSelectedTextEditor();\n\n    if (editor != null) {\n      final TemplateManager templateManager = TemplateManager.getInstance(file.getProject());\n      final TemplateState templateState = TemplateManagerImpl.getTemplateState(editor);\n      final Template template = templateManager.getActiveTemplate(editor);\n      if (templateState != null && template != null) {\n        templateState.gotoEnd();\n      }\n    }\n\n    // snippet text\n    final GrMethodCall element = buildStepDefinitionByStep(step);\n\n    GrMethodCall methodCall = (GrMethodCall)((GroovyFile)file).addStatementBefore(element, null);\n    GrReferenceAdjuster.shortenReferences(methodCall);\n    methodCall = CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(methodCall);\n\n    PsiDocumentManager.getInstance(project).commitAllDocuments();\n\n    final TemplateBuilderImpl builder = (TemplateBuilderImpl)TemplateBuilderFactory.getInstance().createTemplateBuilder(methodCall);\n\n    // regexp str\n    GrLiteral pattern = GrCucumberUtil.getStepDefinitionPattern(methodCall);\n    assert pattern != null;\n\n    String patternText = pattern.getText();\n\n    builder.replaceElement(pattern,\n                           new TextRange(1, patternText.length() - 1),\n                           patternText.substring(1, patternText.length() - 1));\n\n    // block vars\n    GrClosableBlock closure = methodCall.getClosureArguments()[0];\n    final GrParameter[] blockVars = closure.getAllParameters();\n    for (GrParameter var : blockVars) {\n      PsiElement identifier = var.getNameIdentifierGroovy();\n      builder.replaceElement(identifier, identifier.getText());\n    }\n\n    TemplateManager manager = TemplateManager.getInstance(project);\n\n    final Editor editorToRunTemplate;\n    if (editor == null) {\n      editorToRunTemplate = QuickfixUtil.positionCursor(project, file, methodCall);\n    }\n    else {\n      editorToRunTemplate = editor;\n    }\n\n    Template template = builder.buildTemplate();\n\n    TextRange range = methodCall.getTextRange();\n    editorToRunTemplate.getDocument().deleteString(range.getStartOffset(), range.getEndOffset());\n    editorToRunTemplate.getCaretModel().moveToOffset(range.getStartOffset());\n\n    manager.startTemplate(editorToRunTemplate, template, new TemplateEditingAdapter() {\n      @Override\n      public void templateFinished(Template template, boolean brokenOff) {\n        if (brokenOff) return;\n\n        ApplicationManager.getApplication().runWriteAction(new Runnable() {\n          @Override\n          public void run() {\n            PsiDocumentManager.getInstance(project).commitDocument(editorToRunTemplate.getDocument());\n            final int offset = editorToRunTemplate.getCaretModel().getOffset();\n            GrMethodCall methodCall = PsiTreeUtil.findElementOfClassAtOffset(file, offset - 1, GrMethodCall.class, false);\n            if (methodCall != null) {\n              GrClosableBlock[] closures = methodCall.getClosureArguments();\n              if (closures.length == 1) {\n                GrClosableBlock closure = closures[0];\n                selectBody(closure, editor);\n              }\n            }\n          }\n        });\n      }\n    });\n\n    return true;\n  }","commit_id":"0cb045a6b4f459956058fecfa59f2afc59a79c13","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private String getGlue(GherkinStep[] steps) {\n    for (GherkinStep step : steps) {\n      for (PsiReference ref : step.getReferences()) {\n        PsiElement refElement = ref.resolve();\n        if (refElement != null && refElement instanceof PsiMethod) {\n          PsiJavaFile javaFile = (PsiJavaFile)refElement.getContainingFile();\n          return \" --glue \" + javaFile.getPackageName();\n        }\n      }\n    }\n    return null;\n  }","id":2054,"modified_method":"@Nullable\n  private String getGlue(GherkinStep[] steps) {\n    for (GherkinStep step : steps) {\n      for (PsiReference ref : step.getReferences()) {\n        PsiElement refElement = ref.resolve();\n        if (refElement != null && refElement instanceof PsiMethod) {\n          PsiJavaFile javaFile = (PsiJavaFile)refElement.getContainingFile();\n          final String packageName = javaFile.getPackageName();\n          if (StringUtil.isNotEmpty(packageName)) {\n            return \" --glue \" + packageName;\n          }\n        }\n      }\n    }\n    return null;\n  }","commit_id":"1fb9d60ecc188309057c8e6f7dbd8a48aab6aba6","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private RunnerAndConfigurationSettings createConfiguration(final Location location, final ConfigurationContext context) {\n    final Project project = context.getProject();\n    final RunnerAndConfigurationSettings settings = cloneTemplateConfiguration(project, context);\n    final CucumberJavaRunConfiguration configuration = (CucumberJavaRunConfiguration)settings.getConfiguration();\n    final VirtualFile file = mySourceElement.getContainingFile().getVirtualFile();\n    assert file != null : mySourceElement.getContainingFile();\n    String glue = getGlue(mySourceElement);\n    configuration.setProgramParameters(file.getPath() + glue + \" --format org.jetbrains.plugins.cucumber.java.run.CucumberJavaSMFormatter --monochrome\");\n    configuration.MAIN_CLASS_NAME = \"cucumber.cli.Main\";\n    if (mySourceElement instanceof PsiNamedElement) {\n      if (mySourceElement instanceof GherkinFile) {\n        configuration.setName(((GherkinFile)mySourceElement).getVirtualFile().getNameWithoutExtension());\n      } else {\n        configuration.setName(((PsiNamedElement)mySourceElement).getName());\n      }\n    }\n\n    setupConfigurationModule(context, configuration);\n    JavaRunConfigurationExtensionManager.getInstance().extendCreatedConfiguration(configuration, location);\n    return settings;\n  }","id":2055,"modified_method":"private RunnerAndConfigurationSettings createConfiguration(final Location location, final ConfigurationContext context) {\n    final Project project = context.getProject();\n    final RunnerAndConfigurationSettings settings = cloneTemplateConfiguration(project, context);\n    final CucumberJavaRunConfiguration configuration = (CucumberJavaRunConfiguration)settings.getConfiguration();\n    final VirtualFile file = mySourceElement.getContainingFile().getVirtualFile();\n    assert file != null : mySourceElement.getContainingFile();\n    String glue = getGlue(mySourceElement);\n    configuration.setProgramParameters(file.getPath() + glue + \" --format org.jetbrains.plugins.cucumber.java.run.CucumberJavaSMFormatter --monochrome\");\n    configuration.MAIN_CLASS_NAME = \"cucumber.cli.Main\";\n    final PsiFile fileToRun = mySourceElement.getContainingFile();\n    if (fileToRun != null) {\n      final VirtualFile virtualFeatureFile = fileToRun.getVirtualFile();\n      if (virtualFeatureFile != null) {\n        configuration.setName(virtualFeatureFile.getNameWithoutExtension());\n      }\n    }\n\n    setupConfigurationModule(context, configuration);\n    JavaRunConfigurationExtensionManager.getInstance().extendCreatedConfiguration(configuration, location);\n    return settings;\n  }","commit_id":"1fb9d60ecc188309057c8e6f7dbd8a48aab6aba6","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"@NotNull\n  @Override\n  public String getStepDefinitionFilePath(@NotNull final PsiFile file) {\n    final VirtualFile vFile = file.getVirtualFile();\n    if (file instanceof PsiJavaFile && vFile != null) {\n      return ((PsiJavaFile)file).getPackageName() + \".\" + vFile.getNameWithoutExtension();\n    }\n    return file.getName();\n  }","id":2056,"modified_method":"@NotNull\n  @Override\n  public String getStepDefinitionFilePath(@NotNull final PsiFile file) {\n    final VirtualFile vFile = file.getVirtualFile();\n    if (file instanceof PsiJavaFile && vFile != null) {\n      String packageName = ((PsiJavaFile)file).getPackageName();\n      if (StringUtil.isEmptyOrSpaces(packageName)) {\n        return vFile.getNameWithoutExtension();\n      }\n      else {\n        return packageName + \".\" + vFile.getNameWithoutExtension();\n      }\n    }\n    return file.getName();\n  }","commit_id":"fc97d723bd760e6b2b0fa9c9c965270bcb09d780","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public List<Tuples._3<String, SNode, _FunctionTypes._void_P1_E0<? super SNode>>> getTransformations() {\n    List<Tuples._3<String, SNode, _FunctionTypes._void_P1_E0<? super SNode>>> transformations = ListSequence.fromList(new ArrayList<Tuples._3<String, SNode, _FunctionTypes._void_P1_E0<? super SNode>>>());\n\n    // ----------------- \n\n    String cat = \"getConceptFqName()->getConcept().getId()\";\n    SNode md = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a5a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a6a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat, md, transformer));\n\n    // ----------------- \n\n    String cat3 = \"setReferent()->setReferenceTarget()\";\n    SNode md3 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a31a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer3 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a41a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat3, md3, transformer3));\n\n    // ----------------- \n\n    String cat4 = \"isAncestor()->SNodeOperations.isAncestor()\";\n    SNode md4 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a12a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer4 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a22a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first()));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat4, md4, transformer4));\n\n    // ----------------- \n\n    String cat5 = \"getId()->getSNodeId().toString()\";\n    SNode md5 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a92a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer5 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a03a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat5, md5, transformer5));\n\n    // ----------------- \n\n    String cat7 = \"addReference()->setReference()\";\n    SNode md7 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a73a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer7 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        SNode replacer = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first();\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a1a0a83a1(replacer, replacer, SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat7, md7, transformer7));\n\n    // ----------------- \n\n    String cat8 = \"getRole_()->getRoleInParent()\";\n    SNode md8 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a54a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> transVerifier8 = new _FunctionTypes._return_P1_E0<Boolean, SNode>() {\n      public Boolean invoke(SNode n) {\n        return SNodeOperations.isInstanceOf(n, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\") && SNodeOperations.isInstanceOf(SNodeOperations.getParent(n), \"jetbrains.mps.baseLanguage.structure.DotExpression\") && (SNodeOperations.getAncestor(n, \"jetbrains.mps.lang.quotation.structure.Quotation\", false, false) == null);\n      }\n    };\n    _FunctionTypes._void_P1_E0<? super SNode> transformer8 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a74a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat8, md8, transformer8));\n\n    // ----------------- \n\n    String cat9 = \"isRegistered()->getModel()!=null\";\n    SNode md9 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a45a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer9 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a55a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat9, md9, transformer9));\n\n    // ----------------- \n\n    String cat10 = \"isDisposed()->SNodeOperations.isDisposed()\";\n    SNode md10 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a26a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer10 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a36a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat10, md10, transformer10));\n\n    // ----------------- \n\n    String cat12 = \"getContainingRoot()->getTopmostAncestor()\";\n    SNode md12 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a07a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer12 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a17a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat12, md12, transformer12));\n\n    // ----------------- \n\n    String cat13 = \"isRoot()->SNodeOperation.isRoot()\";\n    SNode md13 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a87a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer13 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a97a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat13, md13, transformer13));\n\n    // ----------------- \n\n    String cat14 = \"getConceptShortName()->getConcept().getShortName()\";\n    SNode md14 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a68a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer14 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a78a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat14, md14, transformer14));\n\n    // ----------------- \n\n    String cat15 = \"getChildren(boolean)->SNodeOperations.getChildren()\";\n    SNode md15 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a49a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer15 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a59a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first()));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat15, md15, transformer15));\n\n    // ----------------- \n\n    String cat16 = \"findParent(condition)->SNodeOperations.findParent(condition)\";\n    SNode md16 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a201a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer16 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a301a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first()));\n      }\n    });\n\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat16, md16, transformer16));\n\n    // ----------------- \n\n    String cat17 = \"getDescendants()->.descendants\";\n    SNode md17 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a111a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer17 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        SNode rep;\n        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), \"jetbrains.mps.lang.smodel.structure.SemanticDowncastExpression\")) {\n          rep = _quotation_createNode_f4dkew_a0a0b0a0ie0b(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), \"jetbrains.mps.lang.smodel.structure.SemanticDowncastExpression\"), \"leftExpression\", true));\n        } else {\n          rep = _quotation_createNode_f4dkew_a0a0a1a0a211a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true));\n        }\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), rep);\n\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat17, md17, transformer17));\n\n    // ----------------- \n\n    String cat18 = \"getDescendants(condition)->SNodeOperations.getDescendants(condition)\";\n    SNode md18 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a911a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer18 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a021a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first()));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat18, md18, transformer18));\n\n    // ----------------- \n\n    String cat19 = \"replaceChild(n1,n2)->n1.replace with(n2)\";\n    SNode md19 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a721a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer19 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a821a1(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).getElement(0), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).getElement(1)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat19, md19, transformer19));\n\n    // ----------------- \n\n    String cat20 = \"getProperties()->SNodeOperations.getProperties()\";\n    SNode md20 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a531a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer20 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a631a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat20, md20, transformer20));\n\n    // ----------------- \n\n    String cat22 = \"n.isInstanceOfConcept(c)->n.getConcept().isSubConceptOf(c)\";\n    SNode md22 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a341a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer22 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a441a1(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first(), SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat22, md22, transformer22));\n\n    // ----------------- \n\n    String cat23 = \"n.isInstanceOfConcept(string)->n.getConcept().isSubConceptOf(SNodeOperations.getConcept(string))\";\n    SNode md23 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a151a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer23 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a251a1(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first(), SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat23, md23, transformer23));\n\n    // ----------------- \n\n    String cat24 = \"toString()->getPresentation()\";\n    SNode md24 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a951a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer24 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a061a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat24, md24, transformer24));\n\n    // ----------------- \n\n    String cat25 = \"n.getChildrenIterable()->SNodeOperations.getChildren()\";\n    SNode md25 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a761a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer25 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a861a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat25, md25, transformer25));\n\n    // ----------------- \n\n    String cat26 = \"getConceptLanguage()->((Language)((node<>)n).concept/.getModel.?getModule()).getModuleReference()\";\n    SNode md26 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a571a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer26 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a671a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat26, md26, transformer26));\n\n    // ----------------- \n\n    String cat27 = \"getLanguageNamespace()->((Language)((node<>)n).concept/.getModel.?getModule()).getModuleFqName()\";\n    SNode md27 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a381a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer27 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a481a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat27, md27, transformer27));\n\n    // ----------------- \n\n    String cat28 = \"getLanguage()->(Language)((node<>)n).concept/.getModel.?getModule()\";\n    SNode md28 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a191a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer28 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a291a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat28, md28, transformer28));\n\n    // ----------------- \n\n    String cat29 = \"getIndexOfChild()->.children.indexOf()\";\n    SNode md29 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a991a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer29 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        SNode rep;\n        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), \"jetbrains.mps.lang.smodel.structure.SemanticDowncastExpression\")) {\n          rep = _quotation_createNode_f4dkew_a0a0b0a0sh0b(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first(), SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), \"jetbrains.mps.lang.smodel.structure.SemanticDowncastExpression\"), \"leftExpression\", true));\n        } else {\n          rep = _quotation_createNode_f4dkew_a0a0a1a0a002a1(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first(), SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true));\n        }\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), rep);\n\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat29, md29, transformer29));\n\n    // ----------------- \n\n    String cat30 = \"getNodeLanguage()->(Language)((node<>)n).concept/.getModel.?getModule()\";\n    SNode md30 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a702a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer30 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a802a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat30, md30, transformer30));\n\n    // ----------------- \n\n    String cat31 = \"getConceptProperty()->(Language)((node<>)n).concept/.getModel.?getModule()\";\n    SNode md31 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a512a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer31 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a612a1(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first(), SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat31, md31, transformer31));\n\n    // ----------------- \n\n    String cat32 = \"getDescendantsIterable()->SNodeOperations.getDescendants()\";\n    SNode md32 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a322a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer32 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a422a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).getElement(0), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).getElement(1)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat32, md32, transformer32));\n\n    // ----------------- \n\n    String cat33 = \"getReferencesIterable()->SNodeOperations.getReferences()\";\n    SNode md33 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a132a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer33 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a232a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat33, md33, transformer33));\n\n    // ----------------- \n\n    String cat34 = \"getDebugText()->SNodeOperations.getDebugText()\";\n    SNode md34 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a932a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer34 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a042a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat34, md34, transformer34));\n\n    // ----------------- \n\n    String cat35 = \"getChildRoles()->SNodeOperations.getChildRoles()\";\n    SNode md35 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a742a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer35 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a842a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat35, md35, transformer35));\n\n    // ----------------- \n\n    String cat36 = \"n.getChildren()->SNodeOperations.getChildren()\";\n    SNode md36 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a552a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer36 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a652a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat36, md36, transformer36));\n\n    // ----------------- \n\n    // todo \n    String cat37 = \"getRoleOf()->getRoleOf()\";\n    SNode md37 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a462a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer37 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a562a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first()));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat37, md37, transformer37));\n\n    // ----------------- \n\n    String cat38 = \"n.getReferenceRoles()->SNodeOperations.getReferenceRoles()\";\n    SNode md38 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a272a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer38 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a372a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat38, md38, transformer38));\n\n    // ----------------- \n\n    String cat39 = \"insertChild(a,r,c)->insertChild()\";\n    SNode md39 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a082a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer39 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        List<SNode> arg = SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true);\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a1a0a182a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(arg).getElement(1), ListSequence.fromList(arg).getElement(2), ListSequence.fromList(arg).getElement(0)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat39, md39, transformer39));\n\n    // ----------------- \n\n    String cat40 = \"insertChild(a,r,c,b)->SNodeOperations.insertChild()\";\n    SNode md40 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a882a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer40 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        List<SNode> arg = SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true);\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a1a0a982a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(arg).getElement(1), ListSequence.fromList(arg).getElement(2), ListSequence.fromList(arg).getElement(0), ListSequence.fromList(arg).getElement(3)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat40, md40, transformer40));\n\n    // ----------------- \n\n    String cat41 = \"removeReferent()->setReferenceTarget(null)\";\n    SNode md41 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a692a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> transVerifier41 = new _FunctionTypes._return_P1_E0<Boolean, SNode>() {\n      public Boolean invoke(SNode n) {\n        return SNodeOperations.isInstanceOf(n, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\") && SNodeOperations.isInstanceOf(SNodeOperations.getParent(n), \"jetbrains.mps.baseLanguage.structure.DotExpression\") && (SNodeOperations.getAncestor(n, \"jetbrains.mps.lang.quotation.structure.Quotation\", false, false) == null);\n      }\n    };\n    _FunctionTypes._void_P1_E0<? super SNode> transformer41 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a892a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first()));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat41, md41, transformer41));\n\n    // ----------------- \n\n    String cat42 = \"isDeleted()->getModel()==null\";\n    SNode md42 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a503a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer42 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a603a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat42, md42, transformer42));\n\n    // ----------------- \n\n    String cat43 = \"n.getResolveInfo()->SNodeOperations.getResolveInfo()\";\n    SNode md43 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a313a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer43 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a413a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat43, md43, transformer43));\n\n    // ----------------- \n\n    String cat44 = \"n.getDebugText()->SNodeUtil.getDebugText()\";\n    SNode md44 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a123a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer44 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a223a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat44, md44, transformer44));\n\n    // ----------------- \n\n    String cat45 = \"new SNode(model,concept)-new SNode(InternUtil.intern(concept))\";\n    SNode md45 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a923a1(), \"creator\", true), \"jetbrains.mps.baseLanguage.structure.ClassCreator\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer45 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(usage, _quotation_createNode_f4dkew_a0a0a0a033a1(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.ClassCreator\"), \"actualArgument\", true)).getElement(1)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat45, md45, transformer45));\n\n    // ----------------- \n\n    String cat46 = \"new SNode(model,concept,true-false)-new SNode(InternUtil.intern(concept))\";\n    SNode md46 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a733a1(), \"creator\", true), \"jetbrains.mps.baseLanguage.structure.ClassCreator\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer46 = new _FunctionTypes._void_P1_E0<SNode>() {\n      public void invoke(SNode usage) {\n        SNode intern = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.ClassCreator\"), \"actualArgument\", true)).getElement(2);\n        if (SNodeOperations.isInstanceOf(intern, \"jetbrains.mps.baseLanguage.structure.BooleanConstant\")) {\n          if (SPropertyOperations.getBoolean(SNodeOperations.cast(intern, \"jetbrains.mps.baseLanguage.structure.BooleanConstant\"), \"value\")) {\n            SNodeOperations.replaceWithAnother(usage, _quotation_createNode_f4dkew_a0a0a0a1a0a833a1(intern));\n          } else {\n            SNodeOperations.replaceWithAnother(usage, _quotation_createNode_f4dkew_a0a0a0a0b0a0an0b(intern));\n          }\n        } else {\n          // do not migrate usages where intern is an expr \n        }\n      }\n    };\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat46, md46, transformer46));\n\n    // ----------------- \n\n    return transformations;\n  }","id":2057,"modified_method":"public List<Tuples._3<String, SNode, _FunctionTypes._void_P1_E0<? super SNode>>> getTransformations() {\n    List<Tuples._3<String, SNode, _FunctionTypes._void_P1_E0<? super SNode>>> transformations = ListSequence.fromList(new ArrayList<Tuples._3<String, SNode, _FunctionTypes._void_P1_E0<? super SNode>>>());\n\n    // ----------------- \n\n    String cat = \"getConceptFqName()->getConcept().getId()\";\n    SNode md = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a5a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a6a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat, md, transformer));\n\n    // ----------------- \n\n    String cat3 = \"setReferent()->setReferenceTarget()\";\n    SNode md3 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a31a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer3 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a41a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat3, md3, transformer3));\n\n    // ----------------- \n\n    String cat4 = \"isAncestor()->SNodeOperations.isAncestor()\";\n    SNode md4 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a12a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer4 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a22a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first()));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat4, md4, transformer4));\n\n    // ----------------- \n\n    String cat5 = \"getId()->getSNodeId().toString()\";\n    SNode md5 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a92a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer5 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a03a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat5, md5, transformer5));\n\n    // ----------------- \n\n    String cat7 = \"addReference()->setReference()\";\n    SNode md7 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a73a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer7 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        SNode replacer = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first();\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a1a0a83a1(replacer, replacer, SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat7, md7, transformer7));\n\n    // ----------------- \n\n    String cat8 = \"getRole_()->getRoleInParent()\";\n    SNode md8 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a54a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> transVerifier8 = new _FunctionTypes._return_P1_E0<Boolean, SNode>() {\n      public Boolean invoke(SNode n) {\n        return SNodeOperations.isInstanceOf(n, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\") && SNodeOperations.isInstanceOf(SNodeOperations.getParent(n), \"jetbrains.mps.baseLanguage.structure.DotExpression\") && (SNodeOperations.getAncestor(n, \"jetbrains.mps.lang.quotation.structure.Quotation\", false, false) == null);\n      }\n    };\n    _FunctionTypes._void_P1_E0<? super SNode> transformer8 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a74a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat8, md8, transformer8));\n\n    // ----------------- \n\n    String cat9 = \"isRegistered()->getModel()!=null\";\n    SNode md9 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a45a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer9 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a55a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat9, md9, transformer9));\n\n    // ----------------- \n\n    String cat10 = \"isDisposed()->SNodeOperations.isDisposed()\";\n    SNode md10 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a26a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer10 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a36a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat10, md10, transformer10));\n\n    // ----------------- \n\n    String cat12 = \"getContainingRoot()->getTopmostAncestor()\";\n    SNode md12 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a07a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer12 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a17a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat12, md12, transformer12));\n\n    // ----------------- \n\n    String cat13 = \"isRoot()->SNodeOperation.isRoot()\";\n    SNode md13 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a87a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer13 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a97a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat13, md13, transformer13));\n\n    // ----------------- \n\n    String cat14 = \"getConceptShortName()->getConcept().getShortName()\";\n    SNode md14 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a68a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer14 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a78a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat14, md14, transformer14));\n\n    // ----------------- \n\n    String cat15 = \"getChildren(boolean)->SNodeOperations.getChildren()\";\n    SNode md15 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a49a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer15 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a59a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first()));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat15, md15, transformer15));\n\n    // ----------------- \n\n    String cat16 = \"findParent(condition)->SNodeOperations.findParent(condition)\";\n    SNode md16 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a201a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer16 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a301a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first()));\n      }\n    });\n\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat16, md16, transformer16));\n\n    // ----------------- \n\n    String cat17 = \"getDescendants()->.descendants\";\n    SNode md17 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a111a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer17 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        SNode rep;\n        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), \"jetbrains.mps.lang.smodel.structure.SemanticDowncastExpression\")) {\n          rep = _quotation_createNode_f4dkew_a0a0b0a0ie0b(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), \"jetbrains.mps.lang.smodel.structure.SemanticDowncastExpression\"), \"leftExpression\", true));\n        } else {\n          rep = _quotation_createNode_f4dkew_a0a0a1a0a211a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true));\n        }\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), rep);\n\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat17, md17, transformer17));\n\n    // ----------------- \n\n    String cat18 = \"getDescendants(condition)->SNodeOperations.getDescendants(condition)\";\n    SNode md18 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a911a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer18 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a021a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first()));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat18, md18, transformer18));\n\n    // ----------------- \n\n    String cat19 = \"replaceChild(n1,n2)->n1.replace with(n2)\";\n    SNode md19 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a721a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer19 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a821a1(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).getElement(0), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).getElement(1)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat19, md19, transformer19));\n\n    // ----------------- \n\n    String cat20 = \"getProperties()->SNodeOperations.getProperties()\";\n    SNode md20 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a531a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer20 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a631a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat20, md20, transformer20));\n\n    // ----------------- \n\n    String cat22 = \"n.isInstanceOfConcept(c)->n.getConcept().isSubConceptOf(c)\";\n    SNode md22 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a341a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer22 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a441a1(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first(), SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat22, md22, transformer22));\n\n    // ----------------- \n\n    String cat23 = \"n.isInstanceOfConcept(string)->n.getConcept().isSubConceptOf(SNodeOperations.getConcept(string))\";\n    SNode md23 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a151a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer23 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a251a1(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first(), SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat23, md23, transformer23));\n\n    // ----------------- \n\n    String cat24 = \"toString()->getPresentation()\";\n    SNode md24 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a951a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer24 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a061a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat24, md24, transformer24));\n\n    // ----------------- \n\n    String cat25 = \"n.getChildrenIterable()->SNodeOperations.getChildren()\";\n    SNode md25 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a761a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer25 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a861a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat25, md25, transformer25));\n\n    // ----------------- \n\n    String cat26 = \"getConceptLanguage()->((Language)((node<>)n).concept/.getModel.?getModule()).getModuleReference()\";\n    SNode md26 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a571a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer26 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a671a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat26, md26, transformer26));\n\n    // ----------------- \n\n    String cat27 = \"getLanguageNamespace()->((Language)((node<>)n).concept/.getModel.?getModule()).getModuleFqName()\";\n    SNode md27 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a381a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer27 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a481a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat27, md27, transformer27));\n\n    // ----------------- \n\n    String cat28 = \"getLanguage()->(Language)((node<>)n).concept/.getModel.?getModule()\";\n    SNode md28 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a191a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer28 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a291a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat28, md28, transformer28));\n\n    // ----------------- \n\n    String cat30 = \"getNodeLanguage()->(Language)((node<>)n).concept/.getModel.?getModule()\";\n    SNode md30 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a991a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer30 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a002a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat30, md30, transformer30));\n\n    // ----------------- \n\n    String cat31 = \"getConceptProperty()->(Language)((node<>)n).concept/.getModel.?getModule()\";\n    SNode md31 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a702a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer31 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a802a1(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first(), SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat31, md31, transformer31));\n\n    // ----------------- \n\n    String cat32 = \"getDescendantsIterable()->SNodeOperations.getDescendants()\";\n    SNode md32 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a512a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer32 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a612a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).getElement(0), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).getElement(1)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat32, md32, transformer32));\n\n    // ----------------- \n\n    String cat33 = \"getReferencesIterable()->SNodeOperations.getReferences()\";\n    SNode md33 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a322a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer33 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a422a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat33, md33, transformer33));\n\n    // ----------------- \n\n    String cat34 = \"getDebugText()->SNodeOperations.getDebugText()\";\n    SNode md34 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a132a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer34 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a232a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat34, md34, transformer34));\n\n    // ----------------- \n\n    String cat35 = \"getChildRoles()->SNodeOperations.getChildRoles()\";\n    SNode md35 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a932a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer35 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a042a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat35, md35, transformer35));\n\n    // ----------------- \n\n    String cat36 = \"n.getChildren()->SNodeOperations.getChildren()\";\n    SNode md36 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a742a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer36 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a842a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat36, md36, transformer36));\n\n    // ----------------- \n\n    // todo \n    String cat37 = \"getRoleOf()->getRoleOf()\";\n    SNode md37 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a652a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer37 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a752a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first()));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat37, md37, transformer37));\n\n    // ----------------- \n\n    String cat38 = \"n.getReferenceRoles()->SNodeOperations.getReferenceRoles()\";\n    SNode md38 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a462a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer38 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a562a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat38, md38, transformer38));\n\n    // ----------------- \n\n    String cat39 = \"insertChild(a,r,c)->insertChild()\";\n    SNode md39 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a272a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer39 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        List<SNode> arg = SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true);\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a1a0a372a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(arg).getElement(1), ListSequence.fromList(arg).getElement(2), ListSequence.fromList(arg).getElement(0)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat39, md39, transformer39));\n\n    // ----------------- \n\n    String cat40 = \"insertChild(a,r,c,b)->SNodeOperations.insertChild()\";\n    SNode md40 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a082a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer40 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        List<SNode> arg = SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true);\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a1a0a182a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(arg).getElement(1), ListSequence.fromList(arg).getElement(2), ListSequence.fromList(arg).getElement(0), ListSequence.fromList(arg).getElement(3)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat40, md40, transformer40));\n\n    // ----------------- \n\n    String cat41 = \"removeReferent()->setReferenceTarget(null)\";\n    SNode md41 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a882a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> transVerifier41 = new _FunctionTypes._return_P1_E0<Boolean, SNode>() {\n      public Boolean invoke(SNode n) {\n        return SNodeOperations.isInstanceOf(n, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\") && SNodeOperations.isInstanceOf(SNodeOperations.getParent(n), \"jetbrains.mps.baseLanguage.structure.DotExpression\") && (SNodeOperations.getAncestor(n, \"jetbrains.mps.lang.quotation.structure.Quotation\", false, false) == null);\n      }\n    };\n    _FunctionTypes._void_P1_E0<? super SNode> transformer41 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a092a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first()));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat41, md41, transformer41));\n\n    // ----------------- \n\n    String cat42 = \"isDeleted()->getModel()==null\";\n    SNode md42 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a792a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer42 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a892a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat42, md42, transformer42));\n\n    // ----------------- \n\n    String cat43 = \"n.getResolveInfo()->SNodeOperations.getResolveInfo()\";\n    SNode md43 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a503a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer43 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a603a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat43, md43, transformer43));\n\n    // ----------------- \n\n    String cat44 = \"n.getDebugText()->SNodeUtil.getDebugText()\";\n    SNode md44 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a313a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer44 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a413a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat44, md44, transformer44));\n\n    // ----------------- \n\n    String cat45 = \"new SNode(model,concept)-new SNode(InternUtil.intern(concept))\";\n    SNode md45 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a123a1(), \"creator\", true), \"jetbrains.mps.baseLanguage.structure.ClassCreator\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer45 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(usage, _quotation_createNode_f4dkew_a0a0a0a223a1(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.ClassCreator\"), \"actualArgument\", true)).getElement(1)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat45, md45, transformer45));\n\n    // ----------------- \n\n    String cat46 = \"new SNode(model,concept,true-false)-new SNode(InternUtil.intern(concept))\";\n    SNode md46 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a923a1(), \"creator\", true), \"jetbrains.mps.baseLanguage.structure.ClassCreator\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer46 = new _FunctionTypes._void_P1_E0<SNode>() {\n      public void invoke(SNode usage) {\n        SNode intern = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.ClassCreator\"), \"actualArgument\", true)).getElement(2);\n        if (SNodeOperations.isInstanceOf(intern, \"jetbrains.mps.baseLanguage.structure.BooleanConstant\")) {\n          if (SPropertyOperations.getBoolean(SNodeOperations.cast(intern, \"jetbrains.mps.baseLanguage.structure.BooleanConstant\"), \"value\")) {\n            SNodeOperations.replaceWithAnother(usage, _quotation_createNode_f4dkew_a0a0a0a1a0a033a1(intern));\n          } else {\n            SNodeOperations.replaceWithAnother(usage, _quotation_createNode_f4dkew_a0a0a0a0b0a0sm0b(intern));\n          }\n        } else {\n          // do not migrate usages where intern is an expr \n        }\n      }\n    };\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat46, md46, transformer46));\n\n    // ----------------- \n\n    return transformations;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a313a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_2.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getResolveInfo():java.lang.String\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_3);\n    return quotedNode_1;\n  }","id":2058,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a313a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getDebugText():java.lang.String\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_3);\n    return quotedNode_1;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a932a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_2.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getDebugText():java.lang.String\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_3);\n    return quotedNode_1;\n  }","id":2059,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a932a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_2.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getChildRoles():java.util.Set\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_3);\n    return quotedNode_1;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a742a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_2.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getChildRoles():java.util.Set\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_3);\n    return quotedNode_1;\n  }","id":2060,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a742a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getChildren():java.util.List\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_3);\n    return quotedNode_1;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a652a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606602\")));\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"1958256073813024441\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","id":2061,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a752a1(Object parameter_1, Object parameter_2) {\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = (SNode) parameter_1;\n    if (quotedNode_4 != null) {\n      quotedNode_3.addChild(\"operand\", HUtil.copyIfNecessary(quotedNode_4));\n    }\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_5.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_5, SModelReference.fromString(\"f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)\"), SNodeId.fromString(\"~SNode.getRoleOf(org.jetbrains.mps.openapi.model.SNode):java.lang.String\")));\n    quotedNode_7 = (SNode) parameter_2;\n    if (quotedNode_7 != null) {\n      quotedNode_5.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_7));\n    }\n    quotedNode_3.addChild(\"operation\", quotedNode_5);\n    return quotedNode_3;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a692a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.removeReferent(java.lang.String):void\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_3);\n    return quotedNode_1;\n  }","id":2062,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a792a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.isDeleted():boolean\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_3);\n    return quotedNode_1;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a232a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606602\")));\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"1958256073812999117\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","id":2063,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a232a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606602\")));\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"9117569544655367277\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a462a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_2.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getRoleOf(org.jetbrains.mps.openapi.model.SNode):java.lang.String\")));\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_6.addChild(\"expression\", quotedNode_7);\n    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassifierType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_8.setReference(\"classifier\", SReference.create(\"classifier\", quotedNode_8, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode\")));\n    quotedNode_6.addChild(\"type\", quotedNode_8);\n    quotedNode_5.addChild(\"expression\", quotedNode_6);\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_5);\n    quotedNode_1.addChild(\"operation\", quotedNode_3);\n    return quotedNode_1;\n  }","id":2064,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a462a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getReferenceRoles():java.util.Set\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_3);\n    return quotedNode_1;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a1a0a002a1(Object parameter_1, Object parameter_2) {\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    SNode quotedNode_12 = null;\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.collections.structure.GetIndexOfOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_6 = (SNode) parameter_1;\n    if (quotedNode_6 != null) {\n      quotedNode_4.addChild(\"argument\", HUtil.copyIfNecessary(quotedNode_6));\n    }\n    quotedNode_3.addChild(\"operation\", quotedNode_4);\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.Node_GetChildrenOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_5.addChild(\"operation\", quotedNode_7);\n    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SNodeType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9.addChild(\"type\", quotedNode_10);\n    quotedNode_11 = (SNode) parameter_2;\n    if (quotedNode_11 != null) {\n      quotedNode_9.addChild(\"expression\", HUtil.copyIfNecessary(quotedNode_11));\n    }\n    quotedNode_8.addChild(\"expression\", quotedNode_9);\n    quotedNode_5.addChild(\"operand\", quotedNode_8);\n    quotedNode_3.addChild(\"operand\", quotedNode_5);\n    return quotedNode_3;\n  }","id":2065,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a002a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    SNode quotedNode_12 = null;\n    SNode quotedNode_13 = null;\n    SNode quotedNode_14 = null;\n    SNode quotedNode_15 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassifierType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"classifier\", SReference.create(\"classifier\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~Language\")));\n    quotedNode_2.addChild(\"type\", quotedNode_3);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.checkedDots.structure.CheckedDotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_5.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_5, SModelReference.fromString(\"f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)\"), SNodeId.fromString(\"~SModel.getModule():org.jetbrains.mps.openapi.module.SModule\")));\n    quotedNode_4.addChild(\"operation\", quotedNode_5);\n    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_7.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_7, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getContainingModel():org.jetbrains.mps.openapi.model.SModel\")));\n    quotedNode_6.addChild(\"operation\", quotedNode_7);\n    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SemanticDowncastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.Node_GetConceptOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9.addChild(\"operation\", quotedNode_10);\n    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SNodeType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_12.addChild(\"type\", quotedNode_13);\n    quotedNode_14 = (SNode) parameter_1;\n    if (quotedNode_14 != null) {\n      quotedNode_12.addChild(\"expression\", HUtil.copyIfNecessary(quotedNode_14));\n    }\n    quotedNode_11.addChild(\"expression\", quotedNode_12);\n    quotedNode_9.addChild(\"operand\", quotedNode_11);\n    quotedNode_8.addChild(\"leftExpression\", quotedNode_9);\n    quotedNode_6.addChild(\"operand\", quotedNode_8);\n    quotedNode_4.addChild(\"operand\", quotedNode_6);\n    quotedNode_2.addChild(\"expression\", quotedNode_4);\n    return quotedNode_2;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a223a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)\"), SNodeId.fromString(\"~SNodeUtil.getDebugText(org.jetbrains.mps.openapi.model.SNode):java.lang.String\")));\n    quotedNode_2.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_2, SModelReference.fromString(\"f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)\"), SNodeId.fromString(\"~SNodeUtil\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","id":2066,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a223a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(java.lang.String)\")));\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.util(MPS.Core/jetbrains.mps.util@java_stub)\"), SNodeId.fromString(\"~InternUtil.intern(java.lang.String):java.lang.String\")));\n    quotedNode_3.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.util(MPS.Core/jetbrains.mps.util@java_stub)\"), SNodeId.fromString(\"~InternUtil\")));\n    quotedNode_4 = (SNode) parameter_1;\n    if (quotedNode_4 != null) {\n      quotedNode_3.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_4));\n    }\n    quotedNode_2.addChild(\"actualArgument\", quotedNode_3);\n    return quotedNode_2;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a0b0a0an0b(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(java.lang.String)\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","id":2067,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a0b0a0sm0b(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(java.lang.String)\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a272a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getReferenceRoles():java.util.Set\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_3);\n    return quotedNode_1;\n  }","id":2068,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a272a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    SNode quotedNode_12 = null;\n    SNode quotedNode_13 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_2.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.insertChild(jetbrains.mps.smodel.SNode,java.lang.String,jetbrains.mps.smodel.SNode):void\")));\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassifierType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_10.setReference(\"classifier\", SReference.create(\"classifier\", quotedNode_10, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode\")));\n    quotedNode_8.addChild(\"type\", quotedNode_10);\n    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_8.addChild(\"expression\", quotedNode_11);\n    quotedNode_5.addChild(\"expression\", quotedNode_8);\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_5);\n    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StringLiteral\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setProperty(quotedNode_6, \"value\", \"\");\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_6);\n    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9.addChild(\"expression\", quotedNode_12);\n    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassifierType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_13.setReference(\"classifier\", SReference.create(\"classifier\", quotedNode_13, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode\")));\n    quotedNode_9.addChild(\"type\", quotedNode_13);\n    quotedNode_7.addChild(\"expression\", quotedNode_9);\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_7);\n    quotedNode_1.addChild(\"operation\", quotedNode_3);\n    return quotedNode_1;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a612a1(Object parameter_1, Object parameter_2) {\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    SNode quotedNode_12 = null;\n    SNode quotedNode_13 = null;\n    SNode quotedNode_14 = null;\n    SNode quotedNode_15 = null;\n    SNode quotedNode_16 = null;\n    SNode quotedNode_17 = null;\n    SNode quotedNode_18 = null;\n    SNode quotedNode_19 = null;\n    SNode quotedNode_20 = null;\n    SNode quotedNode_21 = null;\n    SNode quotedNode_22 = null;\n    SNode quotedNode_23 = null;\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.collections.structure.FindFirstOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.collections.structure.SmartClosureParameterDeclaration\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setProperty(quotedNode_9, \"name\", \"it\");\n    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.UndefinedType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9.addChild(\"type\", quotedNode_13);\n    quotedNode_6.addChild(\"parameter\", quotedNode_9);\n    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StatementList\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_14 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ExpressionStatement\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_16 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NPEEqualsExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_19 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_22 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParameterReference\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_19.addChild(\"operand\", quotedNode_22);\n    quotedNode_23 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SPropertyAccess\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_23.setReference(\"property\", SReference.create(\"property\", quotedNode_23, SModelReference.fromString(\"r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)\"), SNodeId.fromString(\"1169194664001\")));\n    quotedNode_19.addChild(\"operation\", quotedNode_23);\n    quotedNode_16.addChild(\"leftExpression\", quotedNode_19);\n    quotedNode_20 = (SNode) parameter_1;\n    if (quotedNode_20 != null) {\n      quotedNode_16.addChild(\"rightExpression\", HUtil.copyIfNecessary(quotedNode_20));\n    }\n    quotedNode_14.addChild(\"expression\", quotedNode_16);\n    quotedNode_10.addChild(\"statement\", quotedNode_14);\n    quotedNode_6.addChild(\"body\", quotedNode_10);\n    quotedNode_4.addChild(\"closure\", quotedNode_6);\n    quotedNode_3.addChild(\"operation\", quotedNode_4);\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SLinkListAccess\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_7.setReference(\"link\", SReference.create(\"link\", quotedNode_7, SModelReference.fromString(\"r:00000000-0000-4000-0000-011c89590292(jetbrains.mps.lang.structure.structure)\"), SNodeId.fromString(\"1071489727084\")));\n    quotedNode_5.addChild(\"operation\", quotedNode_7);\n    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.Node_GetConceptOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_8.addChild(\"operation\", quotedNode_11);\n    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_15 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_17 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SNodeType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_15.addChild(\"type\", quotedNode_17);\n    quotedNode_18 = (SNode) parameter_2;\n    if (quotedNode_18 != null) {\n      quotedNode_15.addChild(\"expression\", HUtil.copyIfNecessary(quotedNode_18));\n    }\n    quotedNode_12.addChild(\"expression\", quotedNode_15);\n    quotedNode_8.addChild(\"operand\", quotedNode_12);\n    quotedNode_5.addChild(\"operand\", quotedNode_8);\n    quotedNode_3.addChild(\"operand\", quotedNode_5);\n    SNodeAccessUtil.setReferenceTarget(quotedNode_22, \"variableDeclaration\", quotedNode_9);\n    return quotedNode_3;\n  }","id":2069,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a612a1(Object parameter_1, Object parameter_2, Object parameter_3) {\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606648\")));\n    quotedNode_4.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_4, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606602\")));\n    quotedNode_5 = (SNode) parameter_1;\n    if (quotedNode_5 != null) {\n      quotedNode_4.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_5));\n    }\n    quotedNode_6 = (SNode) parameter_2;\n    if (quotedNode_6 != null) {\n      quotedNode_4.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_6));\n    }\n    quotedNode_7 = (SNode) parameter_3;\n    if (quotedNode_7 != null) {\n      quotedNode_4.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_7));\n    }\n    return quotedNode_4;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a1a0a982a1(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4, Object parameter_5) {\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_6.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_6, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606602\")));\n    quotedNode_6.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_6, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"3395068133255551311\")));\n    quotedNode_7 = (SNode) parameter_1;\n    if (quotedNode_7 != null) {\n      quotedNode_6.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_7));\n    }\n    quotedNode_8 = (SNode) parameter_2;\n    if (quotedNode_8 != null) {\n      quotedNode_6.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_8));\n    }\n    quotedNode_9 = (SNode) parameter_3;\n    if (quotedNode_9 != null) {\n      quotedNode_6.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_9));\n    }\n    quotedNode_10 = (SNode) parameter_4;\n    if (quotedNode_10 != null) {\n      quotedNode_6.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_10));\n    }\n    quotedNode_11 = (SNode) parameter_5;\n    if (quotedNode_11 != null) {\n      quotedNode_6.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_11));\n    }\n    return quotedNode_6;\n  }","id":2070,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a092a1(Object parameter_1, Object parameter_2) {\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = (SNode) parameter_1;\n    if (quotedNode_4 != null) {\n      quotedNode_3.addChild(\"operand\", HUtil.copyIfNecessary(quotedNode_4));\n    }\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_5.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_5, SModelReference.fromString(\"f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)\"), SNodeId.fromString(\"~SNode.setReferenceTarget(java.lang.String,org.jetbrains.mps.openapi.model.SNode):void\")));\n    quotedNode_7 = (SNode) parameter_2;\n    if (quotedNode_7 != null) {\n      quotedNode_5.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_7));\n    }\n    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_5.addChild(\"actualArgument\", quotedNode_8);\n    quotedNode_3.addChild(\"operation\", quotedNode_5);\n    return quotedNode_3;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a033a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(java.lang.String)\")));\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.util(MPS.Core/jetbrains.mps.util@java_stub)\"), SNodeId.fromString(\"~InternUtil.intern(java.lang.String):java.lang.String\")));\n    quotedNode_3.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.util(MPS.Core/jetbrains.mps.util@java_stub)\"), SNodeId.fromString(\"~InternUtil\")));\n    quotedNode_4 = (SNode) parameter_1;\n    if (quotedNode_4 != null) {\n      quotedNode_3.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_4));\n    }\n    quotedNode_2.addChild(\"actualArgument\", quotedNode_3);\n    return quotedNode_2;\n  }","id":2071,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a1a0a033a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(java.lang.String)\")));\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.util(MPS.Core/jetbrains.mps.util@java_stub)\"), SNodeId.fromString(\"~InternUtil\")));\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.util(MPS.Core/jetbrains.mps.util@java_stub)\"), SNodeId.fromString(\"~InternUtil.intern(java.lang.String):java.lang.String\")));\n    quotedNode_4 = (SNode) parameter_1;\n    if (quotedNode_4 != null) {\n      quotedNode_3.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_4));\n    }\n    quotedNode_2.addChild(\"actualArgument\", quotedNode_3);\n    return quotedNode_2;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a882a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    SNode quotedNode_12 = null;\n    SNode quotedNode_13 = null;\n    SNode quotedNode_14 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_2.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.insertChild(jetbrains.mps.smodel.SNode,java.lang.String,jetbrains.mps.smodel.SNode,boolean):void\")));\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9.addChild(\"expression\", quotedNode_11);\n    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassifierType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_12.setReference(\"classifier\", SReference.create(\"classifier\", quotedNode_12, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode\")));\n    quotedNode_9.addChild(\"type\", quotedNode_12);\n    quotedNode_5.addChild(\"expression\", quotedNode_9);\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_5);\n    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StringLiteral\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setProperty(quotedNode_6, \"value\", \"\");\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_6);\n    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassifierType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_13.setReference(\"classifier\", SReference.create(\"classifier\", quotedNode_13, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode\")));\n    quotedNode_10.addChild(\"type\", quotedNode_13);\n    quotedNode_14 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_10.addChild(\"expression\", quotedNode_14);\n    quotedNode_7.addChild(\"expression\", quotedNode_10);\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_7);\n    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.BooleanConstant\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setProperty(quotedNode_8, \"value\", \"true\");\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_8);\n    quotedNode_1.addChild(\"operation\", quotedNode_3);\n    return quotedNode_1;\n  }","id":2072,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a882a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.removeReferent(java.lang.String):void\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_3);\n    return quotedNode_1;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a042a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606602\")));\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"9117569544655367277\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","id":2073,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a042a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606602\")));\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"1958256073812969427\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a842a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606602\")));\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"1958256073812969427\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","id":2074,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a842a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606602\")));\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"1958256073813024441\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a991a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getIndexOfChild(jetbrains.mps.smodel.SNode):int\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_3);\n    return quotedNode_1;\n  }","id":2075,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a991a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getNodeLanguage():jetbrains.mps.smodel.Language\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_3);\n    return quotedNode_1;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a082a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    SNode quotedNode_12 = null;\n    SNode quotedNode_13 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_2.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.insertChild(jetbrains.mps.smodel.SNode,java.lang.String,jetbrains.mps.smodel.SNode):void\")));\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassifierType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_10.setReference(\"classifier\", SReference.create(\"classifier\", quotedNode_10, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode\")));\n    quotedNode_8.addChild(\"type\", quotedNode_10);\n    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_8.addChild(\"expression\", quotedNode_11);\n    quotedNode_5.addChild(\"expression\", quotedNode_8);\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_5);\n    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StringLiteral\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setProperty(quotedNode_6, \"value\", \"\");\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_6);\n    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9.addChild(\"expression\", quotedNode_12);\n    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassifierType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_13.setReference(\"classifier\", SReference.create(\"classifier\", quotedNode_13, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode\")));\n    quotedNode_9.addChild(\"type\", quotedNode_13);\n    quotedNode_7.addChild(\"expression\", quotedNode_9);\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_7);\n    quotedNode_1.addChild(\"operation\", quotedNode_3);\n    return quotedNode_1;\n  }","id":2076,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a082a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    SNode quotedNode_12 = null;\n    SNode quotedNode_13 = null;\n    SNode quotedNode_14 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_2.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.insertChild(jetbrains.mps.smodel.SNode,java.lang.String,jetbrains.mps.smodel.SNode,boolean):void\")));\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9.addChild(\"expression\", quotedNode_11);\n    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassifierType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_12.setReference(\"classifier\", SReference.create(\"classifier\", quotedNode_12, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode\")));\n    quotedNode_9.addChild(\"type\", quotedNode_12);\n    quotedNode_5.addChild(\"expression\", quotedNode_9);\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_5);\n    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StringLiteral\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setProperty(quotedNode_6, \"value\", \"\");\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_6);\n    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassifierType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_13.setReference(\"classifier\", SReference.create(\"classifier\", quotedNode_13, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode\")));\n    quotedNode_10.addChild(\"type\", quotedNode_13);\n    quotedNode_14 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_10.addChild(\"expression\", quotedNode_14);\n    quotedNode_7.addChild(\"expression\", quotedNode_10);\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_7);\n    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.BooleanConstant\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setProperty(quotedNode_8, \"value\", \"true\");\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_8);\n    quotedNode_1.addChild(\"operation\", quotedNode_3);\n    return quotedNode_1;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a322a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_2.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getDescendantsIterable(jetbrains.mps.util.Condition,boolean):java.lang.Iterable\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_3);\n    return quotedNode_1;\n  }","id":2077,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a322a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getReferencesIterable():java.util.Collection\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_3);\n    return quotedNode_1;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a923a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.addChild(\"actualArgument\", quotedNode_3);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StringLiteral\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setProperty(quotedNode_4, \"value\", \"concept\");\n    quotedNode_2.addChild(\"actualArgument\", quotedNode_4);\n    quotedNode_1.addChild(\"creator\", quotedNode_2);\n    return quotedNode_1;\n  }","id":2078,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a923a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String,boolean)\")));\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.addChild(\"actualArgument\", quotedNode_3);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StringLiteral\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setProperty(quotedNode_4, \"value\", \"concept\");\n    quotedNode_2.addChild(\"actualArgument\", quotedNode_4);\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.BooleanConstant\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setProperty(quotedNode_5, \"value\", \"false\");\n    quotedNode_2.addChild(\"actualArgument\", quotedNode_5);\n    quotedNode_1.addChild(\"creator\", quotedNode_2);\n    return quotedNode_1;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a413a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"6792623998776975955\")));\n    quotedNode_2.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606602\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","id":2079,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a413a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)\"), SNodeId.fromString(\"~SNodeUtil.getDebugText(org.jetbrains.mps.openapi.model.SNode):java.lang.String\")));\n    quotedNode_2.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_2, SModelReference.fromString(\"f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)\"), SNodeId.fromString(\"~SNodeUtil\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a1a0a182a1(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4) {\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    SNode quotedNode_12 = null;\n    SNode quotedNode_13 = null;\n    SNode quotedNode_14 = null;\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_6 = (SNode) parameter_1;\n    if (quotedNode_6 != null) {\n      quotedNode_5.addChild(\"operand\", HUtil.copyIfNecessary(quotedNode_6));\n    }\n    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_7.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_7, SModelReference.fromString(\"f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)\"), SNodeId.fromString(\"~SNode.insertChild(java.lang.String,org.jetbrains.mps.openapi.model.SNode,org.jetbrains.mps.openapi.model.SNode):void\")));\n    quotedNode_9 = (SNode) parameter_2;\n    if (quotedNode_9 != null) {\n      quotedNode_7.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_9));\n    }\n    quotedNode_10 = (SNode) parameter_3;\n    if (quotedNode_10 != null) {\n      quotedNode_7.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_10));\n    }\n    quotedNode_11 = (SNode) parameter_4;\n    if (quotedNode_11 != null) {\n      quotedNode_7.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_11));\n    }\n    quotedNode_5.addChild(\"operation\", quotedNode_7);\n    return quotedNode_5;\n  }","id":2080,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a1a0a182a1(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4, Object parameter_5) {\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_6.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_6, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606602\")));\n    quotedNode_6.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_6, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"3395068133255551311\")));\n    quotedNode_7 = (SNode) parameter_1;\n    if (quotedNode_7 != null) {\n      quotedNode_6.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_7));\n    }\n    quotedNode_8 = (SNode) parameter_2;\n    if (quotedNode_8 != null) {\n      quotedNode_6.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_8));\n    }\n    quotedNode_9 = (SNode) parameter_3;\n    if (quotedNode_9 != null) {\n      quotedNode_6.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_9));\n    }\n    quotedNode_10 = (SNode) parameter_4;\n    if (quotedNode_10 != null) {\n      quotedNode_6.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_10));\n    }\n    quotedNode_11 = (SNode) parameter_5;\n    if (quotedNode_11 != null) {\n      quotedNode_6.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_11));\n    }\n    return quotedNode_6;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a512a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_2.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getConceptProperty(java.lang.String):java.lang.String\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_3);\n    return quotedNode_1;\n  }","id":2081,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a512a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_2.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getDescendantsIterable(jetbrains.mps.util.Condition,boolean):java.lang.Iterable\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_3);\n    return quotedNode_1;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a562a1(Object parameter_1, Object parameter_2) {\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = (SNode) parameter_1;\n    if (quotedNode_4 != null) {\n      quotedNode_3.addChild(\"operand\", HUtil.copyIfNecessary(quotedNode_4));\n    }\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_5.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_5, SModelReference.fromString(\"f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)\"), SNodeId.fromString(\"~SNode.getRoleOf(org.jetbrains.mps.openapi.model.SNode):java.lang.String\")));\n    quotedNode_7 = (SNode) parameter_2;\n    if (quotedNode_7 != null) {\n      quotedNode_5.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_7));\n    }\n    quotedNode_3.addChild(\"operation\", quotedNode_5);\n    return quotedNode_3;\n  }","id":2082,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a562a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606602\")));\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"1958256073813316681\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a702a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getNodeLanguage():jetbrains.mps.smodel.Language\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_3);\n    return quotedNode_1;\n  }","id":2083,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a702a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_2.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getConceptProperty(java.lang.String):java.lang.String\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_3);\n    return quotedNode_1;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a603a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.EqualsExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_5.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_5, SModelReference.fromString(\"f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)\"), SNodeId.fromString(\"~SNode.getContainingModel():org.jetbrains.mps.openapi.model.SModel\")));\n    quotedNode_3.addChild(\"operation\", quotedNode_5);\n    quotedNode_6 = (SNode) parameter_1;\n    if (quotedNode_6 != null) {\n      quotedNode_3.addChild(\"operand\", HUtil.copyIfNecessary(quotedNode_6));\n    }\n    quotedNode_2.addChild(\"leftExpression\", quotedNode_3);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.addChild(\"rightExpression\", quotedNode_4);\n    return quotedNode_2;\n  }","id":2084,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a603a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"6792623998776975955\")));\n    quotedNode_2.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606602\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a892a1(Object parameter_1, Object parameter_2) {\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = (SNode) parameter_1;\n    if (quotedNode_4 != null) {\n      quotedNode_3.addChild(\"operand\", HUtil.copyIfNecessary(quotedNode_4));\n    }\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_5.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_5, SModelReference.fromString(\"f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)\"), SNodeId.fromString(\"~SNode.setReferenceTarget(java.lang.String,org.jetbrains.mps.openapi.model.SNode):void\")));\n    quotedNode_7 = (SNode) parameter_2;\n    if (quotedNode_7 != null) {\n      quotedNode_5.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_7));\n    }\n    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_5.addChild(\"actualArgument\", quotedNode_8);\n    quotedNode_3.addChild(\"operation\", quotedNode_5);\n    return quotedNode_3;\n  }","id":2085,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a892a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.EqualsExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_5.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_5, SModelReference.fromString(\"f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)\"), SNodeId.fromString(\"~SNode.getContainingModel():org.jetbrains.mps.openapi.model.SModel\")));\n    quotedNode_3.addChild(\"operation\", quotedNode_5);\n    quotedNode_6 = (SNode) parameter_1;\n    if (quotedNode_6 != null) {\n      quotedNode_3.addChild(\"operand\", HUtil.copyIfNecessary(quotedNode_6));\n    }\n    quotedNode_2.addChild(\"leftExpression\", quotedNode_3);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.addChild(\"rightExpression\", quotedNode_4);\n    return quotedNode_2;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a552a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getChildren():java.util.List\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_3);\n    return quotedNode_1;\n  }","id":2086,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a652a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_2.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getRoleOf(org.jetbrains.mps.openapi.model.SNode):java.lang.String\")));\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_6.addChild(\"expression\", quotedNode_7);\n    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassifierType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_8.setReference(\"classifier\", SReference.create(\"classifier\", quotedNode_8, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode\")));\n    quotedNode_6.addChild(\"type\", quotedNode_8);\n    quotedNode_5.addChild(\"expression\", quotedNode_6);\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_5);\n    quotedNode_1.addChild(\"operation\", quotedNode_3);\n    return quotedNode_1;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a132a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getReferencesIterable():java.util.Collection\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_3);\n    return quotedNode_1;\n  }","id":2087,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a132a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_2.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getDebugText():java.lang.String\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_3);\n    return quotedNode_1;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a422a1(Object parameter_1, Object parameter_2, Object parameter_3) {\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606648\")));\n    quotedNode_4.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_4, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606602\")));\n    quotedNode_5 = (SNode) parameter_1;\n    if (quotedNode_5 != null) {\n      quotedNode_4.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_5));\n    }\n    quotedNode_6 = (SNode) parameter_2;\n    if (quotedNode_6 != null) {\n      quotedNode_4.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_6));\n    }\n    quotedNode_7 = (SNode) parameter_3;\n    if (quotedNode_7 != null) {\n      quotedNode_4.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_7));\n    }\n    return quotedNode_4;\n  }","id":2088,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a422a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606602\")));\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"1958256073812999117\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a123a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getDebugText():java.lang.String\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_3);\n    return quotedNode_1;\n  }","id":2089,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a123a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.addChild(\"actualArgument\", quotedNode_3);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StringLiteral\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setProperty(quotedNode_4, \"value\", \"concept\");\n    quotedNode_2.addChild(\"actualArgument\", quotedNode_4);\n    quotedNode_1.addChild(\"creator\", quotedNode_2);\n    return quotedNode_1;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a802a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    SNode quotedNode_12 = null;\n    SNode quotedNode_13 = null;\n    SNode quotedNode_14 = null;\n    SNode quotedNode_15 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassifierType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"classifier\", SReference.create(\"classifier\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~Language\")));\n    quotedNode_2.addChild(\"type\", quotedNode_3);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.checkedDots.structure.CheckedDotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_5.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_5, SModelReference.fromString(\"f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)\"), SNodeId.fromString(\"~SModel.getModule():org.jetbrains.mps.openapi.module.SModule\")));\n    quotedNode_4.addChild(\"operation\", quotedNode_5);\n    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_7.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_7, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getContainingModel():org.jetbrains.mps.openapi.model.SModel\")));\n    quotedNode_6.addChild(\"operation\", quotedNode_7);\n    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SemanticDowncastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.Node_GetConceptOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9.addChild(\"operation\", quotedNode_10);\n    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SNodeType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_12.addChild(\"type\", quotedNode_13);\n    quotedNode_14 = (SNode) parameter_1;\n    if (quotedNode_14 != null) {\n      quotedNode_12.addChild(\"expression\", HUtil.copyIfNecessary(quotedNode_14));\n    }\n    quotedNode_11.addChild(\"expression\", quotedNode_12);\n    quotedNode_9.addChild(\"operand\", quotedNode_11);\n    quotedNode_8.addChild(\"leftExpression\", quotedNode_9);\n    quotedNode_6.addChild(\"operand\", quotedNode_8);\n    quotedNode_4.addChild(\"operand\", quotedNode_6);\n    quotedNode_2.addChild(\"expression\", quotedNode_4);\n    return quotedNode_2;\n  }","id":2090,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a802a1(Object parameter_1, Object parameter_2) {\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    SNode quotedNode_12 = null;\n    SNode quotedNode_13 = null;\n    SNode quotedNode_14 = null;\n    SNode quotedNode_15 = null;\n    SNode quotedNode_16 = null;\n    SNode quotedNode_17 = null;\n    SNode quotedNode_18 = null;\n    SNode quotedNode_19 = null;\n    SNode quotedNode_20 = null;\n    SNode quotedNode_21 = null;\n    SNode quotedNode_22 = null;\n    SNode quotedNode_23 = null;\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.collections.structure.FindFirstOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.collections.structure.SmartClosureParameterDeclaration\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setProperty(quotedNode_9, \"name\", \"it\");\n    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.UndefinedType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9.addChild(\"type\", quotedNode_13);\n    quotedNode_6.addChild(\"parameter\", quotedNode_9);\n    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StatementList\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_14 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ExpressionStatement\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_16 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NPEEqualsExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_19 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_22 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParameterReference\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_19.addChild(\"operand\", quotedNode_22);\n    quotedNode_23 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SPropertyAccess\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_23.setReference(\"property\", SReference.create(\"property\", quotedNode_23, SModelReference.fromString(\"r:00000000-0000-4000-0000-011c89590288(jetbrains.mps.lang.core.structure)\"), SNodeId.fromString(\"1169194664001\")));\n    quotedNode_19.addChild(\"operation\", quotedNode_23);\n    quotedNode_16.addChild(\"leftExpression\", quotedNode_19);\n    quotedNode_20 = (SNode) parameter_1;\n    if (quotedNode_20 != null) {\n      quotedNode_16.addChild(\"rightExpression\", HUtil.copyIfNecessary(quotedNode_20));\n    }\n    quotedNode_14.addChild(\"expression\", quotedNode_16);\n    quotedNode_10.addChild(\"statement\", quotedNode_14);\n    quotedNode_6.addChild(\"body\", quotedNode_10);\n    quotedNode_4.addChild(\"closure\", quotedNode_6);\n    quotedNode_3.addChild(\"operation\", quotedNode_4);\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SLinkListAccess\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_7.setReference(\"link\", SReference.create(\"link\", quotedNode_7, SModelReference.fromString(\"r:00000000-0000-4000-0000-011c89590292(jetbrains.mps.lang.structure.structure)\"), SNodeId.fromString(\"1071489727084\")));\n    quotedNode_5.addChild(\"operation\", quotedNode_7);\n    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.Node_GetConceptOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_8.addChild(\"operation\", quotedNode_11);\n    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_15 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_17 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.lang.smodel.structure.SNodeType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_15.addChild(\"type\", quotedNode_17);\n    quotedNode_18 = (SNode) parameter_2;\n    if (quotedNode_18 != null) {\n      quotedNode_15.addChild(\"expression\", HUtil.copyIfNecessary(quotedNode_18));\n    }\n    quotedNode_12.addChild(\"expression\", quotedNode_15);\n    quotedNode_8.addChild(\"operand\", quotedNode_12);\n    quotedNode_5.addChild(\"operand\", quotedNode_8);\n    quotedNode_3.addChild(\"operand\", quotedNode_5);\n    SNodeAccessUtil.setReferenceTarget(quotedNode_22, \"variableDeclaration\", quotedNode_9);\n    return quotedNode_3;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a372a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606602\")));\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"1958256073813316681\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","id":2091,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a1a0a372a1(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4) {\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    SNode quotedNode_12 = null;\n    SNode quotedNode_13 = null;\n    SNode quotedNode_14 = null;\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_6 = (SNode) parameter_1;\n    if (quotedNode_6 != null) {\n      quotedNode_5.addChild(\"operand\", HUtil.copyIfNecessary(quotedNode_6));\n    }\n    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_7.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_7, SModelReference.fromString(\"f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)\"), SNodeId.fromString(\"~SNode.insertChild(java.lang.String,org.jetbrains.mps.openapi.model.SNode,org.jetbrains.mps.openapi.model.SNode):void\")));\n    quotedNode_9 = (SNode) parameter_2;\n    if (quotedNode_9 != null) {\n      quotedNode_7.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_9));\n    }\n    quotedNode_10 = (SNode) parameter_3;\n    if (quotedNode_10 != null) {\n      quotedNode_7.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_10));\n    }\n    quotedNode_11 = (SNode) parameter_4;\n    if (quotedNode_11 != null) {\n      quotedNode_7.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_11));\n    }\n    quotedNode_5.addChild(\"operation\", quotedNode_7);\n    return quotedNode_5;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a503a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.isDeleted():boolean\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_3);\n    return quotedNode_1;\n  }","id":2092,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a503a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_2.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getResolveInfo():java.lang.String\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_3);\n    return quotedNode_1;\n  }","commit_id":"f792af554bae3d36ec9e16a7aa251e13e423ab41","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\r\n\tpublic boolean remove(Object o) {\r\n\t\tlazyLoad(true);\r\n\t\tfinal boolean result = super.remove(o);\r\n\t\tif (size() == 0)\r\n\t\t\tcontentType = MULTIVALUE_CONTENT_TYPE.EMPTY;\r\n\t\treturn result;\r\n\t}","id":2093,"modified_method":"@Override\r\n\tpublic boolean remove(final Object iElement) {\r\n\t\tfinal boolean result;\r\n\t\tif (OGlobalConfiguration.LAZYSET_WORK_ON_STREAM.getValueAsBoolean() && getStreamedContent() != null) {\r\n\t\t\t// WORK ON STREAM\r\n\t\t\tfinal StringBuilder stream = getStreamedContent();\r\n\t\t\tfinal String rid = ((OIdentifiable) iElement).getIdentity().toString();\r\n\t\t\tint pos = stream.indexOf(rid);\r\n\t\t\tif (pos > -1) {\r\n\t\t\t\t// FOUND: REMOVE IT DIRECTLY FROM STREAM\r\n\t\t\t\tif (pos > 0)\r\n\t\t\t\t\tpos--;\r\n\t\t\t\tstream.delete(pos, pos + rid.length() + 1);\r\n\t\t\t\tif (stream.length() == 0)\r\n\t\t\t\t\tsetStreamedContent(null);\r\n\t\t\t}\r\n\t\t\tresult = true;\r\n\t\t} else {\r\n\t\t\tlazyLoad(true);\r\n\t\t\tresult = super.remove(iElement);\r\n\t\t}\r\n\r\n\t\tif (isEmpty())\r\n\t\t\tcontentType = MULTIVALUE_CONTENT_TYPE.EMPTY;\r\n\r\n\t\treturn result;\r\n\t}","commit_id":"31143cbe9ac26b9912bc56f4b65a04d09cb414cd","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Override\r\n\tpublic boolean contains(final Object o) {\r\n\t\tlazyLoad(false);\r\n\t\treturn super.contains(o);\r\n\t}","id":2094,"modified_method":"@Override\r\n\tpublic boolean contains(final Object o) {\r\n\t\tif (OGlobalConfiguration.LAZYSET_WORK_ON_STREAM.getValueAsBoolean() && getStreamedContent() != null)\r\n\t\t\treturn getStreamedContent().indexOf(((OIdentifiable) o).getIdentity().toString()) > -1;\r\n\r\n\t\tlazyLoad(false);\r\n\t\treturn super.contains(o);\r\n\t}","commit_id":"31143cbe9ac26b9912bc56f4b65a04d09cb414cd","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public boolean remove(final Object o) {\r\n\t\tlazyLoad(true);\r\n\r\n\t\tfinal int pos = indexOf((OIdentifiable) o);\r\n\t\tif (pos > -1) {\r\n\t\t\tdelegate.remove(pos);\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif (hasNewItems()) {\r\n\t\t\t// SEARCH INSIDE NEW ITEMS MAP\r\n\t\t\tfinal boolean removed = newItems.remove(o) != null;\r\n\t\t\tif (newItems.size() == 0)\r\n\t\t\t\t// EARLY REMOVE THE MAP TO SAVE MEMORY\r\n\t\t\t\tnewItems = null;\r\n\t\t\treturn removed;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}","id":2095,"modified_method":"public boolean remove(final Object o) {\r\n\t\tif (OGlobalConfiguration.LAZYSET_WORK_ON_STREAM.getValueAsBoolean() && getStreamedContent() != null) {\r\n\t\t\t// WORK ON STREAM\r\n\t\t\tif (delegate.remove(o))\r\n\t\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\tlazyLoad(true);\r\n\t\t\tfinal int pos = indexOf((OIdentifiable) o);\r\n\t\t\tif (pos > -1) {\r\n\t\t\t\tdelegate.remove(pos);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (hasNewItems()) {\r\n\t\t\t// SEARCH INSIDE NEW ITEMS MAP\r\n\t\t\tfinal boolean removed = newItems.remove(o) != null;\r\n\t\t\tif (newItems.size() == 0)\r\n\t\t\t\t// EARLY REMOVE THE MAP TO SAVE MEMORY\r\n\t\t\t\tnewItems = null;\r\n\t\t\treturn removed;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}","commit_id":"31143cbe9ac26b9912bc56f4b65a04d09cb414cd","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public boolean contains(final Object o) {\r\n\t\tlazyLoad(false);\r\n\t\tboolean found = indexOf((OIdentifiable) o) > -1;\r\n\t\tif (!found && hasNewItems())\r\n\t\t\t// SEARCH INSIDE NEW ITEMS MAP\r\n\t\t\tfound = newItems.containsKey(o);\r\n\r\n\t\treturn found;\r\n\t}","id":2096,"modified_method":"public boolean contains(final Object o) {\r\n\t\tboolean found;\r\n\r\n\t\tfinal OIdentifiable obj = (OIdentifiable) o;\r\n\r\n\t\tif (OGlobalConfiguration.LAZYSET_WORK_ON_STREAM.getValueAsBoolean() && getStreamedContent() != null) {\r\n\t\t\tfound = getStreamedContent().indexOf(obj.getIdentity().toString()) > -1;\r\n\t\t} else {\r\n\t\t\tlazyLoad(false);\r\n\t\t\tfound = indexOf((OIdentifiable) o) > -1;\r\n\t\t}\r\n\r\n\t\tif (!found && hasNewItems())\r\n\t\t\t// SEARCH INSIDE NEW ITEMS MAP\r\n\t\t\tfound = newItems.containsKey(o);\r\n\r\n\t\treturn found;\r\n\t}","commit_id":"31143cbe9ac26b9912bc56f4b65a04d09cb414cd","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public void actuallyDisplayCredentialsTab (VerticalPanel parent)\n    {\n        History.newItem(\"credentials\");\n\n        VerticalPanel ppanel = new VerticalPanel();\n        ppanel.setSpacing (5);\n        ppanel.add (new HTML (\"<h3>User account Information<\/h3>\"));\n        ppanel.add (new HTML (\"<b>Login:<\/b> \" + loggedInUser.getUserName()));\n        ppanel.add (new HTML (\"<b>Name:<\/b> \" + loggedInUser.getRealName()));\n        ppanel.add (new HTML (\"<b>Email:<\/b> \" + loggedInUser.getEmail()));\n        ppanel.add (new HTML (user_account_text));\n        ppanel.setStyleName( \"euca-text\" );\n        Button passwordButton = new Button ( \"Change Password\",\n                new ClickListener() {\n                    public void onClick(Widget sender) {\n                        displayPasswordChangePage (false);\n                    }\n                });\n        Button editButton = new Button ( \"Edit Account Information\",\n                new ClickListener() {\n                    public void onClick (Widget sender) {\n                        displayUserRecordPage (RootPanel.get(), loggedInUser);\n                    }\n                });\n        VerticalPanel ppanel2 = new VerticalPanel();\n        ppanel2.setSpacing( 5 );\n        ppanel2.add(editButton);\n        ppanel2.add(passwordButton);\n\n        VerticalPanel cpanel = new VerticalPanel();\n        cpanel.add ( new HTML (certificate_download_text) );\n        cpanel.setStyleName( \"euca-text\" );\n        Button certButton = new Button (\"Download Certificate\",new ClickListener() {\n            public void onClick (Widget sender) {\n                Window.open(GWT.getModuleBaseURL() +\n                        \"getX509?user=\" + loggedInUser.getUserName() +\n                        \"&keyValue=\" + loggedInUser.getUserName() +\n                        \"&code=\" + loggedInUser.getCertificateCode(),\n                        \"_self\", \"\");\n            }\n        });\n\n        VerticalPanel rpanel = new VerticalPanel();\n        rpanel.setSpacing (5);\n        rpanel.add( new HTML (rest_credentials_text) );\n        Grid g0 = new Grid (2, 2);\n        g0.setWidget (0, 0, new HTML (\"<b><font size=\\\"2\\\">Query ID:<\/font><\/b>\"));\n        final HTML queryId = new HTML (\"<font color=#666666 size=\\\"1\\\">\" + loggedInUser.getQueryId() + \"<\/font>\");\n        queryId.setVisible (false);\n        g0.setWidget (0, 1, queryId);\n        g0.setWidget (1, 0, new HTML (\"<b><font size=\\\"2\\\">Secret key:<\/font><\/b>\"));\n        final HTML secretKey = new HTML (\"<font color=#666666 size=\\\"1\\\">\" + loggedInUser.getSecretKey() + \"<\/font>\");\n        secretKey.setVisible (false);\n        g0.setWidget (1, 1, secretKey);\n        rpanel.add (g0);\n        rpanel.setStyleName( \"euca-text\" );\n        final Button secretButton = new Button ( \"Show keys\" );\n        secretButton.addClickListener(new ClickListener() {\n            public void onClick(Widget sender) {\n                if (secretKey.isVisible()) {\n                    secretKey.setVisible(false);\n                    queryId.setVisible(false);\n                    secretButton.setText (\"Show keys\");\n                } else {\n                    secretKey.setVisible(true);\n                    queryId.setVisible(true);\n                    secretButton.setText (\"Hide keys\");\n                }\n            }\n        });\n\n        int gridRows = 3;\n        if (loggedInUser.isAdministrator() && show_cloud_registration) {\n            gridRows++;\n        }\n\n        final Grid g = new Grid( gridRows, 2 );\n        g.getColumnFormatter().setWidth(0, \"400\");\n        g.getColumnFormatter().setWidth(1, \"200\");\n        g.setCellSpacing( 30 );\n\n        g.setWidget( 0, 0, ppanel ); g.getCellFormatter().setVerticalAlignment(0, 0, HasVerticalAlignment.ALIGN_TOP);\n        g.setWidget( 0, 1, ppanel2); g.getCellFormatter().setVerticalAlignment(0, 1, HasVerticalAlignment.ALIGN_TOP);\n\n        g.setWidget( 1, 0, cpanel ); g.getCellFormatter().setVerticalAlignment(1, 0, HasVerticalAlignment.ALIGN_TOP);\n        g.setWidget( 1, 1, certButton ); g.getCellFormatter().setVerticalAlignment(1, 1, HasVerticalAlignment.ALIGN_TOP);\n\n        g.setWidget( 2, 0, rpanel ); g.getCellFormatter().setVerticalAlignment(2, 0, HasVerticalAlignment.ALIGN_TOP);\n        g.setWidget( 2, 1, secretButton ); g.getCellFormatter().setVerticalAlignment(2, 1, HasVerticalAlignment.ALIGN_TOP);\n\n        if (loggedInUser.isAdministrator() && show_cloud_registration) {\n            VerticalPanel cloud_panel = new VerticalPanel();\n            cloud_panel.setSpacing (5);\n            cloud_panel.add( new HTML (cloud_registration_text) );\n            Grid g1 = new Grid (2, 2);\n            g1.setWidget (0, 0, new HTML (\"<b><font size=\\\"2\\\">Cloud URL:<\/font><\/b>\"));\n            final HTML cloudUrl = new HTML (\"<font color=#666666 size=\\\"1\\\">http://\"\n                    + cloudInfo.getInternalHostPort()\n                    + cloudInfo.getServicePath()\n                    + \"<\/font>\");\n            g1.setWidget (0, 1, cloudUrl);\n            g1.setWidget (1, 0, new HTML (\"<b><font size=\\\"2\\\">Cloud ID:<\/font><\/b>\"));\n            final HTML cloudId = new HTML (\"<font color=#666666 size=\\\"1\\\">\"\n                    + cloudInfo.getCloudId()\n                    + \"<\/font>\");\n            g1.setWidget (1, 1, cloudId);\n            cloud_panel.add (g1);\n            cloud_panel.setStyleName( \"euca-text\" );\n            final Button cloudButton = new Button ( \"Register\" );\n            cloudButton.addClickListener(new ClickListener() {\n                public void onClick(Widget sender) {\n                    new RightscaleDialog().center();\n                }\n            });\n            g.setWidget (3, 0, cloud_panel );\n            g.getCellFormatter().setVerticalAlignment(3, 0, HasVerticalAlignment.ALIGN_TOP);\n            VerticalPanel vp = new VerticalPanel();\n            vp.setSpacing (3);\n            HorizontalPanel hp = new HorizontalPanel();\n            hp.setSpacing (3);\n            hp.add (cloudButton);\n            hp.add (new HTML (\"with\"));\n            vp.add (hp);\n            vp.add (new Image (\"img/rightscale_logo_blue.gif\"));\n            g.setWidget( 3, 1, vp );\n            g.getCellFormatter().setVerticalAlignment(3, 1, HasVerticalAlignment.ALIGN_TOP);\n        }\n\n        parent.add(g);\n    }","id":2097,"modified_method":"public void actuallyDisplayCredentialsTab (VerticalPanel parent)\n    {\n        History.newItem(\"credentials\");\n\n        VerticalPanel ppanel = new VerticalPanel();\n        ppanel.setSpacing (5);\n        ppanel.add (new HTML (\"<h3>User account Information<\/h3>\"));\n        ppanel.add (new HTML (\"<b>Login:<\/b> \" + loggedInUser.getUserName()));\n        ppanel.add (new HTML (\"<b>Name:<\/b> \" + loggedInUser.getRealName()));\n        ppanel.add (new HTML (\"<b>Email:<\/b> \" + loggedInUser.getEmail()));\n        ppanel.add (new HTML (user_account_text));\n        ppanel.setStyleName( \"euca-text\" );\n        Button passwordButton = new Button ( \"Change Password\",\n                new ClickListener() {\n                    public void onClick(Widget sender) {\n                        displayPasswordChangePage (false);\n                    }\n                });\n        Button editButton = new Button ( \"Edit Account Information\",\n                new ClickListener() {\n                    public void onClick (Widget sender) {\n                        displayUserRecordPage (RootPanel.get(), loggedInUser);\n                    }\n                });\n        VerticalPanel ppanel2 = new VerticalPanel();\n        ppanel2.setSpacing( 5 );\n        ppanel2.add(editButton);\n        ppanel2.add(passwordButton);\n\n        VerticalPanel cpanel = new VerticalPanel();\n        cpanel.add ( new HTML (certificate_download_text) );\n        cpanel.setStyleName( \"euca-text\" );\n        Button certButton = new Button (\"Download Certificate\",new ClickListener() {\n            public void onClick (Widget sender) {\n                Window.open(GWT.getModuleBaseURL() +\n                        \"getX509?user=\" + loggedInUser.getUserName() +\n                        \"&keyValue=\" + loggedInUser.getUserName() +\n                        \"&code=\" + loggedInUser.getCertificateCode(),\n                        \"_self\", \"\");\n            }\n        });\n\n        VerticalPanel rpanel = new VerticalPanel();\n        rpanel.setSpacing (5);\n        rpanel.add( new HTML (rest_credentials_text) );\n        Grid g0 = new Grid (2, 2);\n        g0.setWidget (0, 0, new HTML (\"<b><font size=\\\"2\\\">Query ID:<\/font><\/b>\"));\n        final HTML queryId = new HTML (\"<font color=#666666 size=\\\"1\\\">\" + loggedInUser.getQueryId() + \"<\/font>\");\n        queryId.setVisible (false);\n        g0.setWidget (0, 1, queryId);\n        g0.setWidget (1, 0, new HTML (\"<b><font size=\\\"2\\\">Secret key:<\/font><\/b>\"));\n        final HTML secretKey = new HTML (\"<font color=#666666 size=\\\"1\\\">\" + loggedInUser.getSecretKey() + \"<\/font>\");\n        secretKey.setVisible (false);\n        g0.setWidget (1, 1, secretKey);\n        rpanel.add (g0);\n        rpanel.setStyleName( \"euca-text\" );\n        final Button secretButton = new Button ( \"Show keys\" );\n        secretButton.addClickListener(new ClickListener() {\n            public void onClick(Widget sender) {\n                if (secretKey.isVisible()) {\n                    secretKey.setVisible(false);\n                    queryId.setVisible(false);\n                    secretButton.setText (\"Show keys\");\n                } else {\n                    secretKey.setVisible(true);\n                    queryId.setVisible(true);\n                    secretButton.setText (\"Hide keys\");\n                }\n            }\n        });\n\n        int gridRows = 3;\n        if (loggedInUser.isAdministrator() && show_cloud_registration) {\n            gridRows++;\n        }\n\n        final Grid g = new Grid( gridRows, 2 );\n        g.getColumnFormatter().setWidth(0, \"400\");\n        g.getColumnFormatter().setWidth(1, \"200\");\n        g.setCellSpacing( 30 );\n\n        g.setWidget( 0, 0, ppanel ); g.getCellFormatter().setVerticalAlignment(0, 0, HasVerticalAlignment.ALIGN_TOP);\n        g.setWidget( 0, 1, ppanel2); g.getCellFormatter().setVerticalAlignment(0, 1, HasVerticalAlignment.ALIGN_TOP);\n\n        g.setWidget( 1, 0, cpanel ); g.getCellFormatter().setVerticalAlignment(1, 0, HasVerticalAlignment.ALIGN_TOP);\n        g.setWidget( 1, 1, certButton ); g.getCellFormatter().setVerticalAlignment(1, 1, HasVerticalAlignment.ALIGN_TOP);\n\n        g.setWidget( 2, 0, rpanel ); g.getCellFormatter().setVerticalAlignment(2, 0, HasVerticalAlignment.ALIGN_TOP);\n        g.setWidget( 2, 1, secretButton ); g.getCellFormatter().setVerticalAlignment(2, 1, HasVerticalAlignment.ALIGN_TOP);\n\n        if (loggedInUser.isAdministrator() && show_cloud_registration) {\n            VerticalPanel cloud_panel = new VerticalPanel();\n            cloud_panel.setSpacing (5);\n            cloud_panel.add( new HTML (cloud_registration_text) );\n            Grid g1 = new Grid (2, 2);\n            g1.setWidget (0, 0, new HTML (\"<b><font size=\\\"2\\\">Cloud URL:<\/font><\/b>\"));\n            final HTML cloudUrl = new HTML (\"<font color=#666666 size=\\\"1\\\">https://\"\n                    + cloudInfo.getInternalHostPort()\n                    + cloudInfo.getServicePath()\n                    + \"<\/font>\");\n            g1.setWidget (0, 1, cloudUrl);\n            g1.setWidget (1, 0, new HTML (\"<b><font size=\\\"2\\\">Cloud ID:<\/font><\/b>\"));\n            final HTML cloudId = new HTML (\"<font color=#666666 size=\\\"1\\\">\"\n                    + cloudInfo.getCloudId()\n                    + \"<\/font>\");\n            g1.setWidget (1, 1, cloudId);\n            cloud_panel.add (g1);\n            cloud_panel.setStyleName( \"euca-text\" );\n            final Button cloudButton = new Button ( \"Register\" );\n            cloudButton.addClickListener(new ClickListener() {\n                public void onClick(Widget sender) {\n                    new RightscaleDialog().center();\n                }\n            });\n            g.setWidget (3, 0, cloud_panel );\n            g.getCellFormatter().setVerticalAlignment(3, 0, HasVerticalAlignment.ALIGN_TOP);\n            VerticalPanel vp = new VerticalPanel();\n            vp.setSpacing (3);\n            HorizontalPanel hp = new HorizontalPanel();\n            hp.setSpacing (3);\n            hp.add (cloudButton);\n            hp.add (new HTML (\"with\"));\n            vp.add (hp);\n            vp.add (new Image (\"img/rightscale_logo_blue.gif\"));\n            g.setWidget( 3, 1, vp );\n            g.getCellFormatter().setVerticalAlignment(3, 1, HasVerticalAlignment.ALIGN_TOP);\n        }\n\n        parent.add(g);\n    }","commit_id":"5e6680108c0b8a7541e0871a99c9d76b346a4d3f","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"private SystemBootstrapper( ) {}","id":2098,"modified_method":"public SystemBootstrapper( ) {}","commit_id":"5e6680108c0b8a7541e0871a99c9d76b346a4d3f","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public static void deleteRecord(String zoneName, Record record) {\n        try {\n            Zone zone = getZone(zoneName);\n            RRset rrSet = zone.findExactMatch(record.getName(), record.getDClass());\n            Iterator<Record> rrIterator = rrSet.rrs();\n            while(rrIterator.hasNext()) {\n                Record rec = rrIterator.next();\n                if(rec.getName().equals(record.getName())) {\n                    zone.removeRecord(rec);\n                }\n            }\n        } catch(Exception ex) {\n            LOG.error(ex);\n        }\n    }","id":2099,"modified_method":"public static void deleteRecord(String zoneName, Record record) {\n        try {\n            Zone zone = getZone(zoneName);\n            RRset rrSet = zone.findExactMatch(record.getName(), record.getDClass());\n            Iterator<Record> rrIterator = rrSet.rrs();\n            Record recordToRemove = null;\n            while(rrIterator.hasNext()) {\n                Record rec = rrIterator.next();\n                if(rec.getName().equals(record.getName())) {\n                    recordToRemove = rec;\n                }\n            }\n            if(recordToRemove != null)\n            \tzone.removeRecord(recordToRemove);\n        } catch(Exception ex) {\n            LOG.error(ex);\n        }\n    }","commit_id":"5e6680108c0b8a7541e0871a99c9d76b346a4d3f","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public static void updateARecord(String zoneName, ARecord record) {\n        try {\n            Zone zone = getZone(zoneName);\n            RRset rrSet = zone.findExactMatch(record.getName(), record.getDClass());\n            Iterator<Record> rrIterator = rrSet.rrs();\n            while(rrIterator.hasNext()) {\n                Record rec = rrIterator.next();\n                if(rec.getName().equals(record.getName())) {\n                    zone.removeRecord(rec);\n                }\n            }\n            zone.addRecord(record);\n            //now change the persistent store\n            EntityWrapper<ARecordInfo> db = new EntityWrapper<ARecordInfo>();\n            ARecordInfo arecInfo = new ARecordInfo();\n            arecInfo.setZone(zoneName);\n            arecInfo.setName(record.getName().toString());\n            ARecordInfo foundARecInfo = db.getUnique(arecInfo);\n            foundARecInfo.setName(record.getName().toString());\n            foundARecInfo.setAddress(record.getAddress().toString());\n            foundARecInfo.setRecordclass(record.getDClass());\n            foundARecInfo.setTtl(record.getTTL());\n            db.commit();\n        } catch(Exception ex) {\n            LOG.error(ex);\n        }\n    }","id":2100,"modified_method":"public static void updateARecord(String zoneName, ARecord record) {\n        try {\n            Zone zone = getZone(zoneName);\n            RRset rrSet = zone.findExactMatch(record.getName(), record.getDClass());\n            Iterator<Record> rrIterator = rrSet.rrs();\n            Record recordToRemove = null;\n            while(rrIterator.hasNext()) {\n                Record rec = rrIterator.next();\n                if(rec.getName().equals(record.getName())) {\n        \t\trecordToRemove = rec;            \n                }\n            }\n\t    if(recordToRemove != null) \n\t\tzone.removeRecord(recordToRemove);\n            zone.addRecord(record);\n            //now change the persistent store\n            EntityWrapper<ARecordInfo> db = new EntityWrapper<ARecordInfo>();\n            ARecordInfo arecInfo = new ARecordInfo();\n            arecInfo.setZone(zoneName);\n            arecInfo.setName(record.getName().toString());\n            ARecordInfo foundARecInfo = db.getUnique(arecInfo);\n            foundARecInfo.setName(record.getName().toString());\n            foundARecInfo.setAddress(record.getAddress().toString());\n            foundARecInfo.setRecordclass(record.getDClass());\n            foundARecInfo.setTtl(record.getTTL());\n            db.commit();\n        } catch(Exception ex) {\n            LOG.error(ex);\n        }\n    }","commit_id":"5e6680108c0b8a7541e0871a99c9d76b346a4d3f","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public static void updateCNAMERecord(String zoneName, CNAMERecord record) {\n        try {\n            Zone zone = getZone(zoneName);\n            RRset rrSet = zone.findExactMatch(record.getName(), record.getDClass());\n            Iterator<Record> rrIterator = rrSet.rrs();\n            while(rrIterator.hasNext()) {\n                Record rec = rrIterator.next();\n                if(rec.getName().equals(record.getName())) {\n                    zone.removeRecord(rec);\n                }\n            }\n            zone.addRecord(record);\n            //now change the persistent store\n            EntityWrapper<CNAMERecordInfo> db = new EntityWrapper<CNAMERecordInfo>();\n            CNAMERecordInfo cnameRecordInfo = new CNAMERecordInfo();\n            cnameRecordInfo.setZone(zoneName);\n            cnameRecordInfo.setName(record.getName().toString());\n            CNAMERecordInfo foundCNAMERecInfo = db.getUnique(cnameRecordInfo);\n            foundCNAMERecInfo.setName(record.getName().toString());\n            foundCNAMERecInfo.setAlias(record.getAlias().toString());\n            foundCNAMERecInfo.setRecordclass(record.getDClass());\n            foundCNAMERecInfo.setTtl(record.getTTL());\n            db.commit();\n        } catch(Exception ex) {\n            LOG.error(ex);\n        }\n    }","id":2101,"modified_method":"public static void updateCNAMERecord(String zoneName, CNAMERecord record) {\n        try {\n            Zone zone = getZone(zoneName);\n            RRset rrSet = zone.findExactMatch(record.getName(), record.getDClass());\n            Iterator<Record> rrIterator = rrSet.rrs();\n\t    Record recordToRemove = null;\n            while(rrIterator.hasNext()) {\n                Record rec = rrIterator.next();\n                if(rec.getName().equals(record.getName())) {\n\t\t    recordToRemove = rec;\n                }\n            }\n\t    if(recordToRemove != null)\n\t\tzone.removeRecord(recordToRemove);\n            zone.addRecord(record);\n            //now change the persistent store\n            EntityWrapper<CNAMERecordInfo> db = new EntityWrapper<CNAMERecordInfo>();\n            CNAMERecordInfo cnameRecordInfo = new CNAMERecordInfo();\n            cnameRecordInfo.setZone(zoneName);\n            cnameRecordInfo.setName(record.getName().toString());\n            CNAMERecordInfo foundCNAMERecInfo = db.getUnique(cnameRecordInfo);\n            foundCNAMERecInfo.setName(record.getName().toString());\n            foundCNAMERecInfo.setAlias(record.getAlias().toString());\n            foundCNAMERecInfo.setRecordclass(record.getDClass());\n            foundCNAMERecInfo.setTtl(record.getTTL());\n            db.commit();\n        } catch(Exception ex) {\n            LOG.error(ex);\n        }\n    }","commit_id":"5e6680108c0b8a7541e0871a99c9d76b346a4d3f","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"protected EndPoint findEndpointForImageStorage(DataStore store) {\n        Long dcId = null;\n        Scope storeScope = store.getScope();\n        if (storeScope.getScopeType() == ScopeType.ZONE) {\n            dcId = storeScope.getScopeId();\n        }\n        // find ssvm that can be used to download data to store. For zone-wide\n        // image store, use SSVM for that zone. For region-wide store,\n        // we can arbitrarily pick one ssvm to do that task\n        List<HostVO> ssAHosts = listUpAndConnectingSecondaryStorageVmHost(dcId);\n        if (ssAHosts == null || ssAHosts.isEmpty()) {\n            return null;\n        }\n        Collections.shuffle(ssAHosts);\n        HostVO host = ssAHosts.get(0);\n        return RemoteHostEndPoint.getHypervisorHostEndPoint(host.getId(), host.getPrivateIpAddress(), host.getPublicIpAddress());\n    }","id":2102,"modified_method":"protected EndPoint findEndpointForImageStorage(DataStore store) {\n        Long dcId = null;\n        Scope storeScope = store.getScope();\n        if (storeScope.getScopeType() == ScopeType.ZONE) {\n            dcId = storeScope.getScopeId();\n        }\n        // find ssvm that can be used to download data to store. For zone-wide\n        // image store, use SSVM for that zone. For region-wide store,\n        // we can arbitrarily pick one ssvm to do that task\n        List<HostVO> ssAHosts = listUpAndConnectingSecondaryStorageVmHost(dcId);\n        if (ssAHosts == null || ssAHosts.isEmpty()) {\n            return null;\n        }\n        Collections.shuffle(ssAHosts);\n        HostVO host = ssAHosts.get(0);\n        return RemoteHostEndPoint.getHypervisorHostEndPoint(host);\n    }","commit_id":"c40d03b41728c012012147a5f159d71aadf8b064","url":"https://github.com/apache/cloudstack"},{"original_method":"@DB\n    protected EndPoint findEndPointInScope(Scope scope, String sqlBase, Long poolId) {\n        StringBuilder sbuilder = new StringBuilder();\n        sbuilder.append(sqlBase);\n\n        if (scope.getScopeType() == ScopeType.HOST) {\n            sbuilder.append(\" and h.id = \");\n            sbuilder.append(scope.getScopeId());\n        } else if (scope.getScopeType() == ScopeType.CLUSTER) {\n            sbuilder.append(\" and h.cluster_id = \");\n            sbuilder.append(scope.getScopeId());\n        } else if (scope.getScopeType() == ScopeType.ZONE) {\n            sbuilder.append(\" and h.data_center_id = \");\n            sbuilder.append(scope.getScopeId());\n        }\n        // TODO: order by rand() is slow if there are lot of hosts\n        sbuilder.append(\" ORDER by rand() limit 1\");\n        String sql = sbuilder.toString();\n        PreparedStatement pstmt = null;\n        ResultSet rs = null;\n        HostVO host = null;\n        TransactionLegacy txn = TransactionLegacy.currentTxn();\n\n        try {\n            pstmt = txn.prepareStatement(sql);\n            pstmt.setLong(1, poolId);\n            rs = pstmt.executeQuery();\n            while (rs.next()) {\n                long id = rs.getLong(1);\n                host = hostDao.findById(id);\n            }\n        } catch (SQLException e) {\n            s_logger.warn(\"can't find endpoint\", e);\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (pstmt != null) {\n                    pstmt.close();\n                }\n            } catch (SQLException e) {\n            }\n        }\n\n        if (host == null) {\n            return null;\n        }\n\n        return RemoteHostEndPoint.getHypervisorHostEndPoint(host.getId(), host.getPrivateIpAddress(), host.getPublicIpAddress());\n    }","id":2103,"modified_method":"@DB\n    protected EndPoint findEndPointInScope(Scope scope, String sqlBase, Long poolId) {\n        StringBuilder sbuilder = new StringBuilder();\n        sbuilder.append(sqlBase);\n\n        if (scope.getScopeType() == ScopeType.HOST) {\n            sbuilder.append(\" and h.id = \");\n            sbuilder.append(scope.getScopeId());\n        } else if (scope.getScopeType() == ScopeType.CLUSTER) {\n            sbuilder.append(\" and h.cluster_id = \");\n            sbuilder.append(scope.getScopeId());\n        } else if (scope.getScopeType() == ScopeType.ZONE) {\n            sbuilder.append(\" and h.data_center_id = \");\n            sbuilder.append(scope.getScopeId());\n        }\n        // TODO: order by rand() is slow if there are lot of hosts\n        sbuilder.append(\" ORDER by rand() limit 1\");\n        String sql = sbuilder.toString();\n        PreparedStatement pstmt = null;\n        ResultSet rs = null;\n        HostVO host = null;\n        TransactionLegacy txn = TransactionLegacy.currentTxn();\n\n        try {\n            pstmt = txn.prepareStatement(sql);\n            pstmt.setLong(1, poolId);\n            rs = pstmt.executeQuery();\n            while (rs.next()) {\n                long id = rs.getLong(1);\n                host = hostDao.findById(id);\n            }\n        } catch (SQLException e) {\n            s_logger.warn(\"can't find endpoint\", e);\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n                if (pstmt != null) {\n                    pstmt.close();\n                }\n            } catch (SQLException e) {\n            }\n        }\n\n        if (host == null) {\n            return null;\n        }\n\n        return RemoteHostEndPoint.getHypervisorHostEndPoint(host);\n    }","commit_id":"c40d03b41728c012012147a5f159d71aadf8b064","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public List<EndPoint> selectAll(DataStore store) {\n        List<EndPoint> endPoints = new ArrayList<EndPoint>();\n        if (store.getScope().getScopeType() == ScopeType.HOST) {\n            HostVO host = hostDao.findById(store.getScope().getScopeId());\n            endPoints.add(RemoteHostEndPoint.getHypervisorHostEndPoint(host.getId(), host.getPrivateIpAddress(), host.getPublicIpAddress()));\n        } else if (store.getScope().getScopeType() == ScopeType.CLUSTER) {\n            QueryBuilder<HostVO> sc = QueryBuilder.create(HostVO.class);\n            sc.and(sc.entity().getClusterId(), Op.EQ, store.getScope().getScopeId());\n            sc.and(sc.entity().getStatus(), Op.EQ, Status.Up);\n            List<HostVO> hosts = sc.list();\n            for (HostVO host : hosts) {\n                endPoints.add(RemoteHostEndPoint.getHypervisorHostEndPoint(host.getId(), host.getPrivateIpAddress(), host.getPublicIpAddress()));\n            }\n\n        } else {\n            throw new CloudRuntimeException(\"shouldn't use it for other scope\");\n        }\n        return endPoints;\n    }","id":2104,"modified_method":"@Override\n    public List<EndPoint> selectAll(DataStore store) {\n        List<EndPoint> endPoints = new ArrayList<EndPoint>();\n        if (store.getScope().getScopeType() == ScopeType.HOST) {\n            HostVO host = hostDao.findById(store.getScope().getScopeId());\n\n            endPoints.add(RemoteHostEndPoint.getHypervisorHostEndPoint(host));\n        } else if (store.getScope().getScopeType() == ScopeType.CLUSTER) {\n            QueryBuilder<HostVO> sc = QueryBuilder.create(HostVO.class);\n            sc.and(sc.entity().getClusterId(), Op.EQ, store.getScope().getScopeId());\n            sc.and(sc.entity().getStatus(), Op.EQ, Status.Up);\n            List<HostVO> hosts = sc.list();\n            for (HostVO host : hosts) {\n                endPoints.add(RemoteHostEndPoint.getHypervisorHostEndPoint(host));\n            }\n\n        } else {\n            throw new CloudRuntimeException(\"shouldn't use it for other scope\");\n        }\n        return endPoints;\n    }","commit_id":"c40d03b41728c012012147a5f159d71aadf8b064","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public long getId() {\n        return this.hostId;\n    }","id":2105,"modified_method":"public static RemoteHostEndPoint getHypervisorHostEndPoint(Host host) {\n        RemoteHostEndPoint ep = ComponentContext.inject(RemoteHostEndPoint.class);\n        ep.configure(host);\n        return ep;\n    }","commit_id":"c40d03b41728c012012147a5f159d71aadf8b064","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    protected void injectMockito() {\n        List<HostVO> hosts = new ArrayList<HostVO>();\n        hosts.add(this.host);\n        Mockito.when(resourceMgr.listAllUpAndEnabledHosts((Type)Matchers.any(), Matchers.anyLong(), Matchers.anyLong(), Matchers.anyLong())).thenReturn(hosts);\n\n        remoteEp = RemoteHostEndPoint.getHypervisorHostEndPoint(this.host.getId(), this.host.getPrivateIpAddress(), this.host.getPublicIpAddress());\n        Mockito.when(epSelector.select(Matchers.any(DataObject.class), Matchers.any(DataObject.class))).thenReturn(remoteEp);\n        Mockito.when(epSelector.select(Matchers.any(DataObject.class))).thenReturn(remoteEp);\n        Mockito.when(epSelector.select(Matchers.any(DataStore.class))).thenReturn(remoteEp);\n        Mockito.when(hyGuruMgr.getGuruProcessedCommandTargetHost(Matchers.anyLong(), Matchers.any(Command.class))).thenReturn(this.host.getId());\n\n    }","id":2106,"modified_method":"@Override\n    protected void injectMockito() {\n        List<HostVO> hosts = new ArrayList<HostVO>();\n        hosts.add(this.host);\n        Mockito.when(resourceMgr.listAllUpAndEnabledHosts((Type)Matchers.any(), Matchers.anyLong(), Matchers.anyLong(), Matchers.anyLong())).thenReturn(hosts);\n        remoteEp = RemoteHostEndPoint.getHypervisorHostEndPoint(this.host);\n        Mockito.when(epSelector.select(Matchers.any(DataObject.class), Matchers.any(DataObject.class))).thenReturn(remoteEp);\n        Mockito.when(epSelector.select(Matchers.any(DataObject.class))).thenReturn(remoteEp);\n        Mockito.when(epSelector.select(Matchers.any(DataStore.class))).thenReturn(remoteEp);\n        Mockito.when(hyGuruMgr.getGuruProcessedCommandTargetHost(Matchers.anyLong(), Matchers.any(Command.class))).thenReturn(this.host.getId());\n\n    }","commit_id":"c40d03b41728c012012147a5f159d71aadf8b064","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    protected void injectMockito() {\n        if (host == null) {\n            return;\n        }\n        List<HostVO> results = new ArrayList<HostVO>();\n        results.add(host);\n        Mockito.when(hostDao.listAll()).thenReturn(results);\n        Mockito.when(hostDao.findById(Matchers.anyLong())).thenReturn(host);\n        Mockito.when(hostDao.findHypervisorHostInCluster(Matchers.anyLong())).thenReturn(results);\n        List<EndPoint> eps = new ArrayList<EndPoint>();\n        eps.add(RemoteHostEndPoint.getHypervisorHostEndPoint(host.getId(), host.getPrivateIpAddress(), host.getPublicIpAddress()));\n        Mockito.when(selector.selectAll(Matchers.any(DataStore.class))).thenReturn(eps);\n        Mockito.when(selector.select(Matchers.any(DataObject.class))).thenReturn(eps.get(0));\n        Mockito.when(selector.select(Matchers.any(DataObject.class), Matchers.any(DataObject.class))).thenReturn(eps.get(0));\n    }","id":2107,"modified_method":"@Override\n    protected void injectMockito() {\n        if (host == null) {\n            return;\n        }\n        List<HostVO> results = new ArrayList<HostVO>();\n        results.add(host);\n        Mockito.when(hostDao.listAll()).thenReturn(results);\n        Mockito.when(hostDao.findById(Matchers.anyLong())).thenReturn(host);\n        Mockito.when(hostDao.findHypervisorHostInCluster(Matchers.anyLong())).thenReturn(results);\n        List<EndPoint> eps = new ArrayList<EndPoint>();\n        eps.add(RemoteHostEndPoint.getHypervisorHostEndPoint(host));\n        Mockito.when(selector.selectAll(Matchers.any(DataStore.class))).thenReturn(eps);\n        Mockito.when(selector.select(Matchers.any(DataObject.class))).thenReturn(eps.get(0));\n        Mockito.when(selector.select(Matchers.any(DataObject.class), Matchers.any(DataObject.class))).thenReturn(eps.get(0));\n    }","commit_id":"c40d03b41728c012012147a5f159d71aadf8b064","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    protected void injectMockito() {\n        List<HostVO> hosts = new ArrayList<HostVO>();\n        hosts.add(this.host);\n        Mockito.when(resourceMgr.listAllUpAndEnabledHosts((Type)Matchers.any(), Matchers.anyLong(), Matchers.anyLong(), Matchers.anyLong())).thenReturn(hosts);\n\n        RemoteHostEndPoint ep = RemoteHostEndPoint.getHypervisorHostEndPoint(this.host.getId(), this.host.getPrivateIpAddress(), this.host.getPublicIpAddress());\n        Mockito.when(epSelector.select(Matchers.any(DataObject.class), Matchers.any(DataObject.class))).thenReturn(ep);\n        Mockito.when(epSelector.select(Matchers.any(DataObject.class))).thenReturn(ep);\n        Mockito.when(epSelector.select(Matchers.any(DataStore.class))).thenReturn(ep);\n        Mockito.when(hyGuruMgr.getGuruProcessedCommandTargetHost(Matchers.anyLong(), Matchers.any(Command.class))).thenReturn(this.host.getId());\n    }","id":2108,"modified_method":"@Override\n    protected void injectMockito() {\n        List<HostVO> hosts = new ArrayList<HostVO>();\n        hosts.add(this.host);\n        Mockito.when(resourceMgr.listAllUpAndEnabledHosts((Type)Matchers.any(), Matchers.anyLong(), Matchers.anyLong(), Matchers.anyLong())).thenReturn(hosts);\n\n        RemoteHostEndPoint ep = RemoteHostEndPoint.getHypervisorHostEndPoint(this.host);\n        Mockito.when(epSelector.select(Matchers.any(DataObject.class), Matchers.any(DataObject.class))).thenReturn(ep);\n        Mockito.when(epSelector.select(Matchers.any(DataObject.class))).thenReturn(ep);\n        Mockito.when(epSelector.select(Matchers.any(DataStore.class))).thenReturn(ep);\n        Mockito.when(hyGuruMgr.getGuruProcessedCommandTargetHost(Matchers.anyLong(), Matchers.any(Command.class))).thenReturn(this.host.getId());\n    }","commit_id":"c40d03b41728c012012147a5f159d71aadf8b064","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    protected void injectMockito() {\n        List<HostVO> hosts = new ArrayList<HostVO>();\n        hosts.add(this.host);\n        Mockito.when(resourceMgr.listAllUpAndEnabledHosts((Type)Matchers.any(), Matchers.anyLong(), Matchers.anyLong(), Matchers.anyLong())).thenReturn(hosts);\n\n        RemoteHostEndPoint ep = RemoteHostEndPoint.getHypervisorHostEndPoint(this.host.getId(), this.host.getPrivateIpAddress(), this.host.getPublicIpAddress());\n        Mockito.when(epSelector.select(Matchers.any(DataObject.class), Matchers.any(DataObject.class))).thenReturn(ep);\n        Mockito.when(epSelector.select(Matchers.any(DataObject.class))).thenReturn(ep);\n        Mockito.when(epSelector.select(Matchers.any(DataStore.class))).thenReturn(ep);\n    }","id":2109,"modified_method":"@Override\n    protected void injectMockito() {\n        List<HostVO> hosts = new ArrayList<HostVO>();\n        hosts.add(this.host);\n        Mockito.when(resourceMgr.listAllUpAndEnabledHosts((Type)Matchers.any(), Matchers.anyLong(), Matchers.anyLong(), Matchers.anyLong())).thenReturn(hosts);\n\n        RemoteHostEndPoint ep = RemoteHostEndPoint.getHypervisorHostEndPoint(this.host);\n        Mockito.when(epSelector.select(Matchers.any(DataObject.class), Matchers.any(DataObject.class))).thenReturn(ep);\n        Mockito.when(epSelector.select(Matchers.any(DataObject.class))).thenReturn(ep);\n        Mockito.when(epSelector.select(Matchers.any(DataStore.class))).thenReturn(ep);\n    }","commit_id":"c40d03b41728c012012147a5f159d71aadf8b064","url":"https://github.com/apache/cloudstack"},{"original_method":"public void setDetectorHandler(IoHandlerAdapter detectorHandler) {\n        m_detectorHandler = detectorHandler;\n    }","id":2110,"modified_method":"public IoHandler getDetectorHandler() {\n        return m_detectorHandler;\n    }","commit_id":"72b6ad2e223de954857e4b33231f9eac4f95d2f0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public IoHandlerAdapter createDetectorHandler(DetectFuture future) {\n        //return new MyDetectorHandler(future);\n        return null;\n    }","id":2111,"modified_method":"public IoHandler createDetectorHandler(DetectFuture future) {\n        m_detectorHandler.setConversation(getConversation());\n        m_detectorHandler.setFuture(future);\n        return m_detectorHandler;\n    }","commit_id":"72b6ad2e223de954857e4b33231f9eac4f95d2f0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public DetectFuture isServiceDetected(InetAddress address, DetectorMonitor monitor) {\n        SocketConnector connector = new NioSocketConnector();\n        \n        DetectFuture future = new DefaultDetectFuture(this);\n\n        // Set connect timeout.\n         //connector.getDefaultConfig().setConnectTimeout(30);\n        connector.setConnectTimeoutMillis( 3000 );\n        connector.setHandler( createDetectorHandler(future) );\n        connector.getFilterChain().addLast( \"logger\", getLoggingFilter() != null ? getLoggingFilter() : new LoggingFilter() );\n        connector.getFilterChain().addLast( \"codec\", getProtocolCodecFilter());\n        connector.getSessionConfig().setIdleTime( IdleStatus.READER_IDLE, getIdleTime() );\n\n        // Start communication\n        connector.connect( new InetSocketAddress( address, 9123 ));\n\n        return future;\n    }","id":2112,"modified_method":"@Override\n    public DetectFuture isServiceDetected(InetAddress address, DetectorMonitor monitor) {\n        SocketConnector connector = new NioSocketConnector();\n        \n        DetectFuture future = new DefaultDetectFuture(this);\n\n        // Set connect timeout.\n        connector.setConnectTimeoutMillis( 3000 );\n        connector.setHandler( createDetectorHandler(future) );\n        connector.getFilterChain().addLast( \"logger\", getLoggingFilter() != null ? getLoggingFilter() : new LoggingFilter() );\n        connector.getFilterChain().addLast( \"codec\", getProtocolCodecFilter());\n        connector.getSessionConfig().setIdleTime( IdleStatus.READER_IDLE, getIdleTime() );\n\n        // Start communication\n        connector.connect( new InetSocketAddress( address, getPort() ));\n\n        return future;\n    }","commit_id":"72b6ad2e223de954857e4b33231f9eac4f95d2f0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void init() {\n        // TODO Auto-generated method stub\n        \n    }","id":2113,"modified_method":"@Override\n    protected void onInit() {\n        expectBanner(startsWith(\"+OK\"));\n        send(request(\"QUIT\"), startsWith(\"+OK\"));\n    }","commit_id":"72b6ad2e223de954857e4b33231f9eac4f95d2f0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testAsyncDetector() throws Exception{\n        m_detector.testDetectorConnection(InetAddress.getLocalHost());\n    }","id":2114,"modified_method":"@Test\n    public void testAsyncDetector() throws Exception{\n        m_detector.setPort(9123);\n        m_detector.setDetectorHandler(new AsyncPop3Handler());\n        m_detector.init();\n        \n        DetectFuture future = m_detector.isServiceDetected(InetAddress.getLocalHost(), new NullDetectorMonitor());\n        assertNotNull(future);\n        \n        future.await();\n        \n        System.out.printf(\"future is complete, isServiceDetected: %s\\n\", future.isServiceDetected());\n    }","commit_id":"72b6ad2e223de954857e4b33231f9eac4f95d2f0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static void main(String[] args) throws Exception {\n//        IoAcceptor acceptor = new NioSocketAcceptor();\n//        \n//        acceptor.getFilterChain().addLast(\"logger\", new LoggingFilter());\n//        acceptor.getFilterChain().addLast(\"codec\", new ProtocolCodecFilter(new TextLineCodecFactory(Charset.forName( \"UTF-8\" ))));\n//        \n//        acceptor.setHandler(new TimeServerHandler());\n//        acceptor.getSessionConfig().setReadBufferSize(2048);\n//        acceptor.getSessionConfig().setIdleTime(IdleStatus.BOTH_IDLE, 10);\n//        acceptor.bind(new InetSocketAddress(PORT));\n        \n    }","id":2115,"modified_method":"public static void main(String[] args) throws Exception {\n        IoAcceptor acceptor = new NioSocketAcceptor();\n        \n        acceptor.getFilterChain().addLast(\"logger\", new LoggingFilter());\n        acceptor.getFilterChain().addLast(\"codec\", new ProtocolCodecFilter(new TextLineCodecFactory(Charset.forName( \"UTF-8\" ))));\n        \n        acceptor.setHandler(new TimeServerHandler());\n        acceptor.getSessionConfig().setReadBufferSize(2048);\n        acceptor.getSessionConfig().setIdleTime(IdleStatus.BOTH_IDLE, 10);\n        acceptor.bind(new InetSocketAddress(PORT));\n        \n    }","commit_id":"72b6ad2e223de954857e4b33231f9eac4f95d2f0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public void messageReceived (IoSession session, Object message) throws Exception {\n        \n        String str = message.toString();\n        if(str.trim().equalsIgnoreCase(m_conversation.getExpectedClose())) {\n            if(m_conversation.getExpectedCloseResponse() != null) {\n                session.write(m_conversation.getExpectedCloseResponse());\n            }\n            session.close();\n            return;\n        }\n        \n        System.out.printf(\"Writing: %s \\n\", m_conversation.getResponse(str.trim()));\n        session.write(m_conversation.getResponse(str.trim()));\n    }","id":2116,"modified_method":"@Override\n    public void messageReceived (IoSession session, Object message) throws Exception {\n        System.out.printf(\"Server received: %s\\n\", message.toString().trim());\n        String str = message.toString();\n        if(str.trim().equalsIgnoreCase(m_conversation.getExpectedClose())) {\n            if(m_conversation.getExpectedCloseResponse() != null) {\n                session.write(m_conversation.getExpectedCloseResponse());\n            }\n            session.close();\n            return;\n        }\n        \n        System.out.printf(\"Writing: %s \\n\", m_conversation.getResponse(str.trim()));\n        session.write(m_conversation.getResponse(str.trim()));\n    }","commit_id":"72b6ad2e223de954857e4b33231f9eac4f95d2f0","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public IoHandlerAdapter createDetectorHandler(DetectFuture future) {\n        //return new MyDetectorHandler(future);\n        return null;\n    }","id":2117,"modified_method":"public IoHandler createDetectorHandler(DetectFuture future) {\n        m_detectorHandler.setConversation(getConversation());\n        m_detectorHandler.setFuture(future);\n        return m_detectorHandler;\n    }","commit_id":"35445d942e2b68c20dde753d4a0f0ca33378de71","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public DetectFuture isServiceDetected(InetAddress address, DetectorMonitor monitor) {\n        SocketConnector connector = new NioSocketConnector();\n        \n        DetectFuture future = new DefaultDetectFuture(this);\n\n        // Set connect timeout.\n         //connector.getDefaultConfig().setConnectTimeout(30);\n        connector.setConnectTimeoutMillis( 3000 );\n        connector.setHandler( createDetectorHandler(future) );\n        connector.getFilterChain().addLast( \"logger\", getLoggingFilter() != null ? getLoggingFilter() : new LoggingFilter() );\n        connector.getFilterChain().addLast( \"codec\", getProtocolCodecFilter());\n        connector.getSessionConfig().setIdleTime( IdleStatus.READER_IDLE, getIdleTime() );\n\n        // Start communication\n        connector.connect( new InetSocketAddress( address, 9123 ));\n\n        return future;\n    }","id":2118,"modified_method":"@Override\n    public DetectFuture isServiceDetected(InetAddress address, DetectorMonitor monitor) {\n        SocketConnector connector = new NioSocketConnector();\n        \n        DetectFuture future = new DefaultDetectFuture(this);\n\n        // Set connect timeout.\n        connector.setConnectTimeoutMillis( 3000 );\n        connector.setHandler( createDetectorHandler(future) );\n        connector.getFilterChain().addLast( \"logger\", getLoggingFilter() != null ? getLoggingFilter() : new LoggingFilter() );\n        connector.getFilterChain().addLast( \"codec\", getProtocolCodecFilter());\n        connector.getSessionConfig().setIdleTime( IdleStatus.READER_IDLE, getIdleTime() );\n\n        // Start communication\n        connector.connect( new InetSocketAddress( address, getPort() ));\n\n        return future;\n    }","commit_id":"35445d942e2b68c20dde753d4a0f0ca33378de71","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setDetectorHandler(IoHandlerAdapter detectorHandler) {\n        m_detectorHandler = detectorHandler;\n    }","id":2119,"modified_method":"public IoHandler getDetectorHandler() {\n        return m_detectorHandler;\n    }","commit_id":"35445d942e2b68c20dde753d4a0f0ca33378de71","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void init() {\n        // TODO Auto-generated method stub\n        \n    }","id":2120,"modified_method":"@Override\n    protected void onInit() {\n        expectBanner(startsWith(\"+OK\"));\n        send(request(\"QUIT\"), startsWith(\"+OK\"));\n    }","commit_id":"35445d942e2b68c20dde753d4a0f0ca33378de71","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testAsyncDetector() throws Exception{\n        m_detector.testDetectorConnection(InetAddress.getLocalHost());\n    }","id":2121,"modified_method":"@Test\n    public void testAsyncDetector() throws Exception{\n        m_detector.setPort(9123);\n        m_detector.setDetectorHandler(new AsyncPop3Handler());\n        m_detector.init();\n        \n        DetectFuture future = m_detector.isServiceDetected(InetAddress.getLocalHost(), new NullDetectorMonitor());\n        assertNotNull(future);\n        \n        future.await();\n        \n        System.out.printf(\"future is complete, isServiceDetected: %s\\n\", future.isServiceDetected());\n    }","commit_id":"35445d942e2b68c20dde753d4a0f0ca33378de71","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static void main(String[] args) throws Exception {\n//        IoAcceptor acceptor = new NioSocketAcceptor();\n//        \n//        acceptor.getFilterChain().addLast(\"logger\", new LoggingFilter());\n//        acceptor.getFilterChain().addLast(\"codec\", new ProtocolCodecFilter(new TextLineCodecFactory(Charset.forName( \"UTF-8\" ))));\n//        \n//        acceptor.setHandler(new TimeServerHandler());\n//        acceptor.getSessionConfig().setReadBufferSize(2048);\n//        acceptor.getSessionConfig().setIdleTime(IdleStatus.BOTH_IDLE, 10);\n//        acceptor.bind(new InetSocketAddress(PORT));\n        \n    }","id":2122,"modified_method":"public static void main(String[] args) throws Exception {\n        IoAcceptor acceptor = new NioSocketAcceptor();\n        \n        acceptor.getFilterChain().addLast(\"logger\", new LoggingFilter());\n        acceptor.getFilterChain().addLast(\"codec\", new ProtocolCodecFilter(new TextLineCodecFactory(Charset.forName( \"UTF-8\" ))));\n        \n        acceptor.setHandler(new TimeServerHandler());\n        acceptor.getSessionConfig().setReadBufferSize(2048);\n        acceptor.getSessionConfig().setIdleTime(IdleStatus.BOTH_IDLE, 10);\n        acceptor.bind(new InetSocketAddress(PORT));\n        \n    }","commit_id":"35445d942e2b68c20dde753d4a0f0ca33378de71","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public void messageReceived (IoSession session, Object message) throws Exception {\n        \n        String str = message.toString();\n        if(str.trim().equalsIgnoreCase(m_conversation.getExpectedClose())) {\n            if(m_conversation.getExpectedCloseResponse() != null) {\n                session.write(m_conversation.getExpectedCloseResponse());\n            }\n            session.close();\n            return;\n        }\n        \n        System.out.printf(\"Writing: %s \\n\", m_conversation.getResponse(str.trim()));\n        session.write(m_conversation.getResponse(str.trim()));\n    }","id":2123,"modified_method":"@Override\n    public void messageReceived (IoSession session, Object message) throws Exception {\n        System.out.printf(\"Server received: %s\\n\", message.toString().trim());\n        String str = message.toString();\n        if(str.trim().equalsIgnoreCase(m_conversation.getExpectedClose())) {\n            if(m_conversation.getExpectedCloseResponse() != null) {\n                session.write(m_conversation.getExpectedCloseResponse());\n            }\n            session.close();\n            return;\n        }\n        \n        System.out.printf(\"Writing: %s \\n\", m_conversation.getResponse(str.trim()));\n        session.write(m_conversation.getResponse(str.trim()));\n    }","commit_id":"35445d942e2b68c20dde753d4a0f0ca33378de71","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setDetectorHandler(IoHandlerAdapter detectorHandler) {\n        m_detectorHandler = detectorHandler;\n    }","id":2124,"modified_method":"public IoHandler getDetectorHandler() {\n        return m_detectorHandler;\n    }","commit_id":"f0ca00612a86fcaa1ab8280ffb0b6860b3282e71","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public IoHandlerAdapter createDetectorHandler(DetectFuture future) {\n        //return new MyDetectorHandler(future);\n        return null;\n    }","id":2125,"modified_method":"public IoHandler createDetectorHandler(DetectFuture future) {\n        m_detectorHandler.setConversation(getConversation());\n        m_detectorHandler.setFuture(future);\n        return m_detectorHandler;\n    }","commit_id":"f0ca00612a86fcaa1ab8280ffb0b6860b3282e71","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public DetectFuture isServiceDetected(InetAddress address, DetectorMonitor monitor) {\n        SocketConnector connector = new NioSocketConnector();\n        \n        DetectFuture future = new DefaultDetectFuture(this);\n\n        // Set connect timeout.\n         //connector.getDefaultConfig().setConnectTimeout(30);\n        connector.setConnectTimeoutMillis( 3000 );\n        connector.setHandler( createDetectorHandler(future) );\n        connector.getFilterChain().addLast( \"logger\", getLoggingFilter() != null ? getLoggingFilter() : new LoggingFilter() );\n        connector.getFilterChain().addLast( \"codec\", getProtocolCodecFilter());\n        connector.getSessionConfig().setIdleTime( IdleStatus.READER_IDLE, getIdleTime() );\n\n        // Start communication\n        connector.connect( new InetSocketAddress( address, 9123 ));\n\n        return future;\n    }","id":2126,"modified_method":"@Override\n    public DetectFuture isServiceDetected(InetAddress address, DetectorMonitor monitor) {\n        SocketConnector connector = new NioSocketConnector();\n        \n        DetectFuture future = new DefaultDetectFuture(this);\n\n        // Set connect timeout.\n        connector.setConnectTimeoutMillis( 3000 );\n        connector.setHandler( createDetectorHandler(future) );\n        connector.getFilterChain().addLast( \"logger\", getLoggingFilter() != null ? getLoggingFilter() : new LoggingFilter() );\n        connector.getFilterChain().addLast( \"codec\", getProtocolCodecFilter());\n        connector.getSessionConfig().setIdleTime( IdleStatus.READER_IDLE, getIdleTime() );\n\n        // Start communication\n        connector.connect( new InetSocketAddress( address, getPort() ));\n\n        return future;\n    }","commit_id":"f0ca00612a86fcaa1ab8280ffb0b6860b3282e71","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void init() {\n        // TODO Auto-generated method stub\n        \n    }","id":2127,"modified_method":"@Override\n    protected void onInit() {\n        expectBanner(startsWith(\"+OK\"));\n        send(request(\"QUIT\"), startsWith(\"+OK\"));\n    }","commit_id":"f0ca00612a86fcaa1ab8280ffb0b6860b3282e71","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testAsyncDetector() throws Exception{\n        m_detector.testDetectorConnection(InetAddress.getLocalHost());\n    }","id":2128,"modified_method":"@Test\n    public void testAsyncDetector() throws Exception{\n        m_detector.setPort(9123);\n        m_detector.setDetectorHandler(new AsyncPop3Handler());\n        m_detector.init();\n        \n        DetectFuture future = m_detector.isServiceDetected(InetAddress.getLocalHost(), new NullDetectorMonitor());\n        assertNotNull(future);\n        \n        future.await();\n        \n        System.out.printf(\"future is complete, isServiceDetected: %s\\n\", future.isServiceDetected());\n    }","commit_id":"f0ca00612a86fcaa1ab8280ffb0b6860b3282e71","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static void main(String[] args) throws Exception {\n//        IoAcceptor acceptor = new NioSocketAcceptor();\n//        \n//        acceptor.getFilterChain().addLast(\"logger\", new LoggingFilter());\n//        acceptor.getFilterChain().addLast(\"codec\", new ProtocolCodecFilter(new TextLineCodecFactory(Charset.forName( \"UTF-8\" ))));\n//        \n//        acceptor.setHandler(new TimeServerHandler());\n//        acceptor.getSessionConfig().setReadBufferSize(2048);\n//        acceptor.getSessionConfig().setIdleTime(IdleStatus.BOTH_IDLE, 10);\n//        acceptor.bind(new InetSocketAddress(PORT));\n        \n    }","id":2129,"modified_method":"public static void main(String[] args) throws Exception {\n        IoAcceptor acceptor = new NioSocketAcceptor();\n        \n        acceptor.getFilterChain().addLast(\"logger\", new LoggingFilter());\n        acceptor.getFilterChain().addLast(\"codec\", new ProtocolCodecFilter(new TextLineCodecFactory(Charset.forName( \"UTF-8\" ))));\n        \n        acceptor.setHandler(new TimeServerHandler());\n        acceptor.getSessionConfig().setReadBufferSize(2048);\n        acceptor.getSessionConfig().setIdleTime(IdleStatus.BOTH_IDLE, 10);\n        acceptor.bind(new InetSocketAddress(PORT));\n        \n    }","commit_id":"f0ca00612a86fcaa1ab8280ffb0b6860b3282e71","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public void messageReceived (IoSession session, Object message) throws Exception {\n        \n        String str = message.toString();\n        if(str.trim().equalsIgnoreCase(m_conversation.getExpectedClose())) {\n            if(m_conversation.getExpectedCloseResponse() != null) {\n                session.write(m_conversation.getExpectedCloseResponse());\n            }\n            session.close();\n            return;\n        }\n        \n        System.out.printf(\"Writing: %s \\n\", m_conversation.getResponse(str.trim()));\n        session.write(m_conversation.getResponse(str.trim()));\n    }","id":2130,"modified_method":"@Override\n    public void messageReceived (IoSession session, Object message) throws Exception {\n        System.out.printf(\"Server received: %s\\n\", message.toString().trim());\n        String str = message.toString();\n        if(str.trim().equalsIgnoreCase(m_conversation.getExpectedClose())) {\n            if(m_conversation.getExpectedCloseResponse() != null) {\n                session.write(m_conversation.getExpectedCloseResponse());\n            }\n            session.close();\n            return;\n        }\n        \n        System.out.printf(\"Writing: %s \\n\", m_conversation.getResponse(str.trim()));\n        session.write(m_conversation.getResponse(str.trim()));\n    }","commit_id":"f0ca00612a86fcaa1ab8280ffb0b6860b3282e71","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n\t@DB\n\tpublic long addTemplateToZone(VMTemplateVO tmplt, long zoneId) {\n\t\tTransaction txn = Transaction.currentTxn();\n\t\ttxn.start();\n\t\tVMTemplateVO tmplt2 = findById(tmplt.getId());\n\t\tif (tmplt2 == null){\n\t\t\tpersist(tmplt);\n\t\t}\n\t\tVMTemplateZoneVO tmpltZoneVO = new VMTemplateZoneVO(zoneId, tmplt.getId(), new Date());\n\t\t_templateZoneDao.persist(tmpltZoneVO);\n\t\ttxn.commit();\n\t\t\n\t\treturn tmplt.getId();\n\t}","id":2131,"modified_method":"@Override\n\t@DB\n\tpublic long addTemplateToZone(VMTemplateVO tmplt, long zoneId) {\n\t\tTransaction txn = Transaction.currentTxn();\n\t\ttxn.start();\n\t\tVMTemplateVO tmplt2 = findById(tmplt.getId());\n\t\tif (tmplt2 == null){\n\t\t\tpersist(tmplt);\n\t\t}\n\t\tVMTemplateZoneVO tmpltZoneVO = _templateZoneDao.findByZoneTemplate(zoneId, tmplt.getId());\n\t\tif ( tmpltZoneVO == null ) {\n\t\t    tmpltZoneVO = new VMTemplateZoneVO(zoneId, tmplt.getId(), new Date());\n\t\t    _templateZoneDao.persist(tmpltZoneVO);\n\t\t} else {\n\t\t    tmpltZoneVO.setRemoved(null);\n\t\t    tmpltZoneVO.setLastUpdated(new Date());\n\t\t    _templateZoneDao.update(tmpltZoneVO.getId(), tmpltZoneVO);\n\t\t}\n\t\ttxn.commit();\n\t\t\n\t\treturn tmplt.getId();\n\t}","commit_id":"c0f22970d3958093918c6f38bcc3d8a95a8eb373","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n\t@DB\n\tpublic long addTemplateToZone(VMTemplateVO tmplt, long zoneId) {\n\t\tTransaction txn = Transaction.currentTxn();\n\t\ttxn.start();\n\t\tVMTemplateVO tmplt2 = findById(tmplt.getId());\n\t\tif (tmplt2 == null){\n\t\t\tpersist(tmplt);\n\t\t}\n\t\tVMTemplateZoneVO tmpltZoneVO = new VMTemplateZoneVO(zoneId, tmplt.getId(), new Date());\n\t\t_templateZoneDao.persist(tmpltZoneVO);\n\t\ttxn.commit();\n\t\t\n\t\treturn tmplt.getId();\n\t}","id":2132,"modified_method":"@Override\n\t@DB\n\tpublic long addTemplateToZone(VMTemplateVO tmplt, long zoneId) {\n\t\tTransaction txn = Transaction.currentTxn();\n\t\ttxn.start();\n\t\tVMTemplateVO tmplt2 = findById(tmplt.getId());\n\t\tif (tmplt2 == null){\n\t\t\tpersist(tmplt);\n\t\t}\n\t\tVMTemplateZoneVO tmpltZoneVO = _templateZoneDao.findByZoneTemplate(zoneId, tmplt.getId());\n\t\tif ( tmpltZoneVO == null ) {\n\t\t    tmpltZoneVO = new VMTemplateZoneVO(zoneId, tmplt.getId(), new Date());\n\t\t    _templateZoneDao.persist(tmpltZoneVO);\n\t\t} else {\n\t\t    tmpltZoneVO.setRemoved(null);\n\t\t    tmpltZoneVO.setLastUpdated(new Date());\n\t\t    _templateZoneDao.update(tmpltZoneVO.getId(), tmpltZoneVO);\n\t\t}\n\t\ttxn.commit();\n\t\t\n\t\treturn tmplt.getId();\n\t}","commit_id":"09562e771c9e14d81fcdab81bd408611b31f3ef8","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public Host updateHost(UpdateHostCmd cmd) throws NoTransitionException {\n        Long hostId = cmd.getId();\n        Long guestOSCategoryId = cmd.getOsCategoryId();\n\n        // Verify that the host exists\n        HostVO host = _hostDao.findById(hostId);\n        if (host == null) {\n            throw new InvalidParameterValueException(\"Host with id \" + hostId + \" doesn't exist\");\n        }\n\n        if (cmd.getAllocationState() != null) {\n            ResourceState.Event resourceEvent = ResourceState.Event.toEvent(cmd.getAllocationState());\n            if (resourceEvent != ResourceState.Event.Enable && resourceEvent != ResourceState.Event.Disable) {\n                throw new CloudRuntimeException(\"Invalid allocation state:\" + cmd.getAllocationState() + \", only Enable/Disable are allowed\");\n            }\n\n            resourceStateTransitTo(host, resourceEvent, _nodeId);\n        }\n\n        if (guestOSCategoryId != null) {\n            // Verify that the guest OS Category exists\n            if (guestOSCategoryId > 0) {\n                if (_guestOSCategoryDao.findById(guestOSCategoryId) == null) {\n                    throw new InvalidParameterValueException(\"Please specify a valid guest OS category.\");\n                }\n            }\n\n            GuestOSCategoryVO guestOSCategory = _guestOSCategoryDao.findById(guestOSCategoryId);\n            Map<String, String> hostDetails = _hostDetailsDao.findDetails(hostId);\n\n            if (guestOSCategory != null) {\n                // Save a new entry for guest.os.category.id\n                hostDetails.put(\"guest.os.category.id\", String.valueOf(guestOSCategory.getId()));\n            } else {\n                // Delete any existing entry for guest.os.category.id\n                hostDetails.remove(\"guest.os.category.id\");\n            }\n            _hostDetailsDao.persist(hostId, hostDetails);\n        }\n\n        List<String> hostTags = cmd.getHostTags();\n        if (hostTags != null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Updating Host Tags to :\" + hostTags);\n            }\n            _hostTagsDao.persist(hostId, hostTags);\n        }\n\n        String url = cmd.getUrl();\n        if (url != null) {\n            _storageMgr.updateSecondaryStorage(cmd.getId(), cmd.getUrl());\n        }\n\n        HostVO updatedHost = _hostDao.findById(hostId);\n        return updatedHost;\n    }","id":2133,"modified_method":"@Override\n    public Host updateHost(UpdateHostCmd cmd) throws NoTransitionException {\n        Long hostId = cmd.getId();\n        Long guestOSCategoryId = cmd.getOsCategoryId();\n\n        // Verify that the host exists\n        HostVO host = _hostDao.findById(hostId);\n        if (host == null) {\n            throw new InvalidParameterValueException(\"Host with id \" + hostId + \" doesn't exist\");\n        }\n\n        if (cmd.getAllocationState() != null) {\n            ResourceState.Event resourceEvent = ResourceState.Event.toEvent(cmd.getAllocationState());\n            if (resourceEvent != ResourceState.Event.Enable && resourceEvent != ResourceState.Event.Disable) {\n                throw new CloudRuntimeException(\"Invalid allocation state:\" + cmd.getAllocationState() + \", only Enable/Disable are allowed\");\n            }\n\n            resourceStateTransitTo(host, resourceEvent, _nodeId);\n        }\n\n        if (guestOSCategoryId != null) {\n            // Verify that the guest OS Category exists\n            if (!(guestOSCategoryId > 0) || _guestOSCategoryDao.findById(guestOSCategoryId) == null) {\n                throw new InvalidParameterValueException(\"Please specify a valid guest OS category.\");\n            }\n\n            GuestOSCategoryVO guestOSCategory = _guestOSCategoryDao.findById(guestOSCategoryId);\n            DetailVO guestOSDetail = _hostDetailsDao.findDetail(hostId, \"guest.os.category.id\");\n\n            if (guestOSCategory != null && !GuestOSCategoryVO.CATEGORY_NONE.equalsIgnoreCase(guestOSCategory.getName())) {\n                // Create/Update an entry for guest.os.category.id\n                if (guestOSDetail != null) {\n                    guestOSDetail.setValue(String.valueOf(guestOSCategory.getId()));\n                    _hostDetailsDao.update(guestOSDetail.getId(), guestOSDetail);\n                } else {\n                    Map<String, String> detail = new HashMap<String, String>();\n                    detail.put(\"guest.os.category.id\", String.valueOf(guestOSCategory.getId()));\n                    _hostDetailsDao.persist(hostId, detail);\n                }\n            } else {\n                // Delete any existing entry for guest.os.category.id\n                if (guestOSDetail != null) {\n                    _hostDetailsDao.remove(guestOSDetail.getId());\n                }\n            }\n        }\n\n        List<String> hostTags = cmd.getHostTags();\n        if (hostTags != null) {\n            if (s_logger.isDebugEnabled()) {\n                s_logger.debug(\"Updating Host Tags to :\" + hostTags);\n            }\n            _hostTagsDao.persist(hostId, hostTags);\n        }\n\n        String url = cmd.getUrl();\n        if (url != null) {\n            _storageMgr.updateSecondaryStorage(cmd.getId(), cmd.getUrl());\n        }\n\n        HostVO updatedHost = _hostDao.findById(hostId);\n        return updatedHost;\n    }","commit_id":"a782d17caa33d94805d9357a9d85e0bcebe2bac9","url":"https://github.com/apache/cloudstack"},{"original_method":"public void makeDoc() throws IOException{\n    \t\n    \tfor (PhasedUnit pu : phasedUnits) {\n            for (Declaration decl : pu.getUnit().getDeclarations()) {\n                if(!include(decl)) {\n                    continue;\n                }\n                 if (decl instanceof ClassOrInterface) {\n                     getObjectFile(decl);\n                     ClassOrInterface c = (ClassOrInterface) decl;            \t\t \n            \t\t // subclasses map\n            \t\t if (c instanceof Class) {\n\t            \t\t ClassOrInterface superclass = c.getExtendedTypeDeclaration();            \t\t \n\t            \t\t if (superclass != null) {\n\t                \t\t if (subclasses.get(superclass) ==  null) {\n\t                \t\t\t subclasses.put(superclass, new ArrayList<ClassOrInterface>());\n\t                \t\t }\n\t                \t\t subclasses.get(superclass).add(c);\n\t            \t\t }\n            \t\t }\n            \t\t \n            \t\t List<TypeDeclaration> satisfiedTypes = new ArrayList<TypeDeclaration>(c.getSatisfiedTypeDeclarations());            \t\t \n            \t\t if (satisfiedTypes != null && satisfiedTypes.isEmpty() == false) {\n            \t\t\t // satisfying classes or interfaces map\n            \t\t\tfor (TypeDeclaration satisfiedType : satisfiedTypes) {\n                    \t\t if (satisfyingClassesOrInterfaces.get(satisfiedType) ==  null) {\n                    \t\t\t satisfyingClassesOrInterfaces.put(satisfiedType, new ArrayList<ClassOrInterface>());\n                    \t\t }\n                    \t\t satisfyingClassesOrInterfaces.get(satisfiedType).add(c);\n\t\t\t\t\t\t}\n            \t\t }\n                 }\n            }\n        }\n\n        Module module = null;\n        for (PhasedUnit pu : phasedUnits) {\n            if (module == null) {\n                module = pu.getPackage().getModule();\n                getObjectFile(module);\n        \t\tfor (Package pkg : module.getPackages()) {\n                    getObjectFile(pkg);\n        \t\t}\n            } else if (pu.getPackage().getModule() != module) {\n                throw new RuntimeException(\"Documentation of multiple modules not supported yet\");\n            }\n            for (Declaration decl : pu.getUnit().getDeclarations()) {\n                doc(decl);\n            }\n        }\n\n        for (Package pkg : module.getPackages()) {\n            doc(pkg);\n        }\n        doc(module);\n        \n        for (PhasedUnit pu : phasedUnits) {\n            copy(pu.getUnitFile().getInputStream(), pu.getPathRelativeToSrcDir());\n        }\n        \n        copyResource(\"resources/style.css\", \"style.css\");\n        copyResource(\"resources/jquery-1.7.min.js\", \"jquery-1.7.min.js\");\n        copyResource(\"resources/ceylond.js\", \"ceylond.js\");\n    }","id":2134,"modified_method":"public void makeDoc() throws IOException{\n    \t\n    \tfor (PhasedUnit pu : phasedUnits) {\n            for (Declaration decl : pu.getUnit().getDeclarations()) {\n                if(!include(decl)) {\n                    continue;\n                }\n                 if (decl instanceof ClassOrInterface) {\n                     getObjectFile(decl);\n                     ClassOrInterface c = (ClassOrInterface) decl;            \t\t \n            \t\t // subclasses map\n            \t\t if (c instanceof Class) {\n\t            \t\t ClassOrInterface superclass = c.getExtendedTypeDeclaration();            \t\t \n\t            \t\t if (superclass != null) {\n\t                \t\t if (subclasses.get(superclass) ==  null) {\n\t                \t\t\t subclasses.put(superclass, new ArrayList<ClassOrInterface>());\n\t                \t\t }\n\t                \t\t subclasses.get(superclass).add(c);\n\t            \t\t }\n            \t\t }\n            \t\t \n            \t\t List<TypeDeclaration> satisfiedTypes = new ArrayList<TypeDeclaration>(c.getSatisfiedTypeDeclarations());            \t\t \n            \t\t if (satisfiedTypes != null && satisfiedTypes.isEmpty() == false) {\n            \t\t\t // satisfying classes or interfaces map\n            \t\t\tfor (TypeDeclaration satisfiedType : satisfiedTypes) {\n                    \t\t if (satisfyingClassesOrInterfaces.get(satisfiedType) ==  null) {\n                    \t\t\t satisfyingClassesOrInterfaces.put(satisfiedType, new ArrayList<ClassOrInterface>());\n                    \t\t }\n                    \t\t satisfyingClassesOrInterfaces.get(satisfiedType).add(c);\n\t\t\t\t\t\t}\n            \t\t }\n                 }\n            }\n        }\n\n        Module module = null;\n        for (PhasedUnit pu : phasedUnits) {\n            if (module == null) {\n                module = pu.getPackage().getModule();\n                getObjectFile(module);\n        \t\tfor (Package pkg : module.getPackages()) {\n                    getObjectFile(pkg);\n        \t\t}\n            } else if (pu.getPackage().getModule() != module) {\n                throw new RuntimeException(\"Documentation of multiple modules not supported yet\");\n            }\n            for (Declaration decl : pu.getUnit().getDeclarations()) {\n                doc(decl);\n            }\n        }\n\n        for (Package pkg : module.getPackages()) {\n            doc(pkg);\n        }\n        doc(module);\n        \n        if (!omitSource) {\n            for (PhasedUnit pu : phasedUnits) {\n                copy(pu.getUnitFile().getInputStream(), pu.getPathRelativeToSrcDir());\n            }\n        }\n        \n        copyResource(\"resources/style.css\", \"style.css\");\n        copyResource(\"resources/jquery-1.7.min.js\", \"jquery-1.7.min.js\");\n        copyResource(\"resources/ceylond.js\", \"ceylond.js\");\n    }","commit_id":"b3edd548c59c90255ac9001adaf0b50c244a8731","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"private void summary() throws IOException {\n        Package pkg = tool.getPackage(klass);\n\n        open(\"div class='nav menu'\");\n        open(\"div\");\n        around(\"a href='\" + getObjectUrl(module) + \"'\", \"Overview\");\n        close(\"div\");\n        open(\"div\");\n        around(\"a href='index.html'\", \"Package\");\n        close(\"div\");\n        open(\"div class='selected'\");\n        write(\"Class\");\n        close(\"div\");\n        open(\"div\");\n        write(pkg.getModule().getNameAsString() + \"/\" + pkg.getModule().getVersion());\n        close(\"div\");\n        open(\"div class='source-code'\");\n        around(\"a href='\" + getSrcUrl(klass) + \"'\", \"Source Code\");\n        close(\"div\");\n        close(\"div\");\n\n        open(\"div class='head summary'\");\n\n        // name\n        around(\"div class='package'\", \"<code>\" + pkg.getNameAsString() + \"<\/code>\");\n\n        around(\"div class='type'\", klass instanceof Class ? \"Class \" : \"Interface \", \"<code>\", getClassName(), \"<\/code>\");\n\n        // hierarchy tree - only for classes\n        if (klass instanceof Class) {\n            LinkedList<ProducedType> superTypes = new LinkedList<ProducedType>();\n            superTypes.add(klass.getType());\n            ProducedType type = klass.getExtendedType();\n            while (type != null) {\n                superTypes.add(0, type);\n                type = type.getDeclaration().getExtendedType();\n            }\n            int i = 0;\n            for (ProducedType superType : superTypes) {\n                open(\"ul class='inheritance'\", \"li\");\n                link(superType);\n                i++;\n            }\n            while (i-- > 0) {\n                close(\"li\", \"ul\");\n            }\n        }\n\n        tag(\"br\");\n        // interfaces\n        writeListOnSummary2(\"satisfied\", \"Satisfied Interfaces: \", superInterfaces);\n\n        // subclasses\n        writeListOnSummary(\"subclasses\", \"Direct Known Subclasses: \", subclasses);\n\n        // satisfying classes\n        writeListOnSummary(\"satisfyingClasses\", \"All Known Satisfying Classes: \", satisfyingClasses);\n\n        // satisfying interfaces\n        writeListOnSummary(\"satisfyingClasses\", \"All Known Satisfying Interfaces: \", satisfyingInterfaces);\n\n        // description\n        around(\"div class='doc'\", getDoc(klass));\n\n        writeSee(klass);\n        \n        close(\"div\");\n    }","id":2135,"modified_method":"private void summary() throws IOException {\n        Package pkg = tool.getPackage(klass);\n\n        open(\"div class='nav menu'\");\n        open(\"div\");\n        around(\"a href='\" + getObjectUrl(module) + \"'\", \"Overview\");\n        close(\"div\");\n        open(\"div\");\n        around(\"a href='index.html'\", \"Package\");\n        close(\"div\");\n        open(\"div class='selected'\");\n        write(\"Class\");\n        close(\"div\");\n        open(\"div\");\n        write(pkg.getModule().getNameAsString() + \"/\" + pkg.getModule().getVersion());\n        close(\"div\");\n        if (!tool.isOmitSource()) {\n            open(\"div class='source-code'\");\n            around(\"a href='\" + getSrcUrl(klass) + \"'\", \"Source Code\");\n            close(\"div\");\n        }\n        close(\"div\");\n\n        open(\"div class='head summary'\");\n\n        // name\n        around(\"div class='package'\", \"<code>\" + pkg.getNameAsString() + \"<\/code>\");\n\n        around(\"div class='type'\", klass instanceof Class ? \"Class \" : \"Interface \", \"<code>\", getClassName(), \"<\/code>\");\n\n        // hierarchy tree - only for classes\n        if (klass instanceof Class) {\n            LinkedList<ProducedType> superTypes = new LinkedList<ProducedType>();\n            superTypes.add(klass.getType());\n            ProducedType type = klass.getExtendedType();\n            while (type != null) {\n                superTypes.add(0, type);\n                type = type.getDeclaration().getExtendedType();\n            }\n            int i = 0;\n            for (ProducedType superType : superTypes) {\n                open(\"ul class='inheritance'\", \"li\");\n                link(superType);\n                i++;\n            }\n            while (i-- > 0) {\n                close(\"li\", \"ul\");\n            }\n        }\n\n        tag(\"br\");\n        // interfaces\n        writeListOnSummary2(\"satisfied\", \"Satisfied Interfaces: \", superInterfaces);\n\n        // subclasses\n        writeListOnSummary(\"subclasses\", \"Direct Known Subclasses: \", subclasses);\n\n        // satisfying classes\n        writeListOnSummary(\"satisfyingClasses\", \"All Known Satisfying Classes: \", satisfyingClasses);\n\n        // satisfying interfaces\n        writeListOnSummary(\"satisfyingClasses\", \"All Known Satisfying Interfaces: \", satisfyingInterfaces);\n\n        // description\n        around(\"div class='doc'\", getDoc(klass));\n\n        writeSee(klass);\n        \n        close(\"div\");\n    }","commit_id":"b3edd548c59c90255ac9001adaf0b50c244a8731","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"public static void main(String[] args) throws IOException {\n        String destDir = null;\n        String srcDir = null;\n        boolean showPrivate = false;\n        for (int i = 0; i < args.length; i++) {\n            String arg = args[i];\n            if (\"-d\".equals(arg)) {\n                System.err.println(\"-d: option not yet supported (though perhaps you meant -dest-dir?)\");\n                System.exit(1);\n            } else if (\"-dest-dir\".equals(arg)) {\n                destDir = args[++i];\n            } else if (\"-src\".equals(arg)) {\n                srcDir = args[++i];\n            } else if (\"-rep\".equals(arg)) {\n                System.err.println(\"-rep: option not yet supported\");\n                System.exit(1);\n            } else if (\"-private\".equals(arg)) {\n                showPrivate = true;\n            } else {\n                System.err.println(\"Processing modules by name is not supported yet\");                \n            }\n            \n        }\n        if (destDir == null) {\n            System.err.println(\"-dest-dir <dest-dir>: option required\");\n            System.exit(1);\n        }\n        if (srcDir == null) {\n            System.err.println(\"-src <src-dir>: option required\");\n            System.exit(1);\n        }\n\n        File file = new File(srcDir);\n        if (file.exists() == false) {\n            System.err.println(srcDir + \" is not a file or directory\");\n            System.exit(1);\n        }\n\n        TypeChecker typeChecker = new TypeCheckerBuilder().addSrcDirectory(file).getTypeChecker();\n        typeChecker.process();\n        CeylonDocTool ceylonDocTool = new CeylonDocTool(typeChecker.getPhasedUnits().getPhasedUnits(), typeChecker.getContext().getModules(), showPrivate);\n        ceylonDocTool.setDestDir(destDir);\n        ceylonDocTool.setSrcDir(srcDir);\n        ceylonDocTool.makeDoc();\n    }","id":2136,"modified_method":"public static void main(String[] args) throws IOException {\n        String destDir = null;\n        String srcDir = null;\n        boolean showPrivate = false;\n        boolean omitSource = false;\n        for (int i = 0; i < args.length; i++) {\n            String arg = args[i];\n            if (\"-d\".equals(arg)) {\n                System.err.println(\"-d: option not yet supported (though perhaps you meant -dest-dir?)\");\n                System.exit(1);\n            } else if (\"-dest-dir\".equals(arg)) {\n                destDir = args[++i];\n            } else if (\"-src\".equals(arg)) {\n                srcDir = args[++i];\n            } else if (\"-rep\".equals(arg)) {\n                System.err.println(\"-rep: option not yet supported\");\n                System.exit(1);\n            } else if (\"-private\".equals(arg)) {\n                showPrivate = true;\n            } else if (\"-omit-source\".equals(arg)) {\n                omitSource = true;\n            } else {\n                System.err.println(\"Processing modules by name is not supported yet\");                \n            }\n            \n        }\n        if (destDir == null) {\n            System.err.println(\"-dest-dir <dest-dir>: option required\");\n            System.exit(1);\n        }\n        if (srcDir == null) {\n            System.err.println(\"-src <src-dir>: option required\");\n            System.exit(1);\n        }\n\n        File file = new File(srcDir);\n        if (file.exists() == false) {\n            System.err.println(srcDir + \" is not a file or directory\");\n            System.exit(1);\n        }\n\n        TypeChecker typeChecker = new TypeCheckerBuilder().addSrcDirectory(file).getTypeChecker();\n        typeChecker.process();\n        CeylonDocTool ceylonDocTool = new CeylonDocTool(typeChecker.getPhasedUnits().getPhasedUnits(), typeChecker.getContext().getModules(), showPrivate);\n        ceylonDocTool.setDestDir(destDir);\n        ceylonDocTool.setSrcDir(srcDir);\n        ceylonDocTool.setOmitSource(omitSource);\n        ceylonDocTool.makeDoc();\n    }","commit_id":"b3edd548c59c90255ac9001adaf0b50c244a8731","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"private void summary() throws IOException {\n        open(\"div class='nav menu'\");\n        open(\"div\");\n        around(\"a href='\"+getObjectUrl(module)+\"'\", \"Overview\");\n        close(\"div\");\n        open(\"div class='selected'\");\n        write(\"Package\");\n        close(\"div\");\n        open(\"div\");\n        write(\"Class\");\n        close(\"div\");\n        open(\"div\");\n        write(pkg.getModule().getNameAsString() + \"/\" + pkg.getModule().getVersion());\n        close(\"div\");\n        open(\"div class='source-code'\");\n        around(\"a href='\" + getSrcUrl(pkg) + \"'\", \"Source Code\");\n        close(\"div\");\n        close(\"div\");\n\n        open(\"div class='head summary'\");\n        around(\"h1\", \"Package \", \"<code>\", pkg.getNameAsString(), \"<\/code>\");\n        close(\"div\");\n    }","id":2137,"modified_method":"private void summary() throws IOException {\n        open(\"div class='nav menu'\");\n        open(\"div\");\n        around(\"a href='\"+getObjectUrl(module)+\"'\", \"Overview\");\n        close(\"div\");\n        open(\"div class='selected'\");\n        write(\"Package\");\n        close(\"div\");\n        open(\"div\");\n        write(\"Class\");\n        close(\"div\");\n        open(\"div\");\n        write(pkg.getModule().getNameAsString() + \"/\" + pkg.getModule().getVersion());\n        close(\"div\");\n        if (!tool.isOmitSource()) {\n            open(\"div class='source-code'\");\n            around(\"a href='\" + getSrcUrl(pkg) + \"'\", \"Source Code\");\n            close(\"div\");\n        }\n        close(\"div\");\n\n        open(\"div class='head summary'\");\n        around(\"h1\", \"Package \", \"<code>\", pkg.getNameAsString(), \"<\/code>\");\n        close(\"div\");\n    }","commit_id":"b3edd548c59c90255ac9001adaf0b50c244a8731","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"private void overview() throws IOException {\n        open(\"div class='nav'\");\n        open(\"div class='selected'\");\n        write(\"Overview\");\n        close(\"div\");\n        open(\"div\");\n        write(\"Package\");\n        close(\"div\");\n        open(\"div\");\n        write(\"Class\");\n        close(\"div\");\n        open(\"div\");\n        write(module.getNameAsString() + \"/\" + module.getVersion());\n        close(\"div\");\n        open(\"div class='source-code'\");\n        around(\"a href='\" + getSrcUrl(module) + \"'\", \"Source Code\");\n        close(\"div\");\n        close(\"div\");\n    }","id":2138,"modified_method":"private void overview() throws IOException {\n        open(\"div class='nav'\");\n        open(\"div class='selected'\");\n        write(\"Overview\");\n        close(\"div\");\n        open(\"div\");\n        write(\"Package\");\n        close(\"div\");\n        open(\"div\");\n        write(\"Class\");\n        close(\"div\");\n        open(\"div\");\n        write(module.getNameAsString() + \"/\" + module.getVersion());\n        close(\"div\");\n        if (!tool.isOmitSource()) {\n            open(\"div class='source-code'\");\n            around(\"a href='\" + getSrcUrl(module) + \"'\", \"Source Code\");\n            close(\"div\");\n        }\n        close(\"div\");\n    }","commit_id":"b3edd548c59c90255ac9001adaf0b50c244a8731","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"protected List<JavaFileObject> listFromDependencies(\n\t\tboolean recurse, String packagePath) {\n\n\t\tList<JavaFileObject> javaFileObjects = new ArrayList<>();\n\n\t\tint options = 0;\n\n\t\tif (recurse) {\n\t\t\toptions = BundleWiring.LISTRESOURCES_RECURSE;\n\t\t}\n\n\t\tfor (BundleWiring bundleWiring : _bundleWirings) {\n\t\t\tjavaFileObjects.addAll(\n\t\t\t\t_classResolver.resolveClasses(\n\t\t\t\t\tbundleWiring, packagePath, options));\n\t\t}\n\n\t\tif (javaFileObjects.isEmpty()) {\n\t\t\tjavaFileObjects.addAll(\n\t\t\t\t_classResolver.resolveClasses(\n\t\t\t\t\t_bundleWiring, packagePath, options));\n\t\t}\n\n\t\treturn javaFileObjects;\n\t}","id":2139,"modified_method":"protected List<JavaFileObject> listFromDependencies(\n\t\tboolean recurse, String packagePath) {\n\n\t\tList<JavaFileObject> javaFileObjects = new ArrayList<>();\n\n\t\tint options = 0;\n\n\t\tif (recurse) {\n\t\t\toptions = BundleWiring.LISTRESOURCES_RECURSE;\n\t\t}\n\n\t\tfor (BundleWiring bundleWiring : _bundleWirings) {\n\t\t\tlist(packagePath, options, bundleWiring, javaFileObjects);\n\t\t}\n\n\t\tif (javaFileObjects.isEmpty()) {\n\t\t\tlist(packagePath, options, _bundleWiring, javaFileObjects);\n\t\t}\n\n\t\treturn javaFileObjects;\n\t}","commit_id":"34dae74748eefa45ba9fd2d0797de890d3a71d08","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic Collection<JavaFileObject> resolveClasses(\n\t\tBundleWiring bundleWiring, String path, int options) {\n\n\t\tBundle bundle = bundleWiring.getBundle();\n\n\t\tif (bundle.equals(_bundle) || bundle.equals(_jspBundle)) {\n\t\t\treturn toJavaFileObjects(\n\t\t\t\tbundle, bundleWiring.listResources(path, \"*.class\", options));\n\t\t}\n\n\t\tif (!isExportsPackage(bundleWiring, path.replace('/', '.'))) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\n\t\tif (bundle.getBundleId() == 0) {\n\t\t\treturn handleSystemBundle(bundleWiring, path);\n\t\t}\n\n\t\treturn toJavaFileObjects(\n\t\t\tbundle, bundleWiring.listResources(path, \"*.class\", options));\n\t}","id":2140,"modified_method":"@Override\n\tpublic Collection<String> resolveClasses(\n\t\tBundleWiring bundleWiring, String path, int options) {\n\n\t\tCollection<String> resources = null;\n\n\t\tBundle bundle = bundleWiring.getBundle();\n\n\t\tif (bundle.equals(_bundle) || bundle.equals(_jspBundle)) {\n\t\t\tresources = bundleWiring.listResources(path, \"*.class\", options);\n\t\t}\n\t\telse if (isExportsPackage(bundleWiring, path.replace('/', '.'))) {\n\t\t\tif (bundle.getBundleId() == 0) {\n\t\t\t\tresources = handleSystemBundle(bundleWiring, path);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresources = bundleWiring.listResources(\n\t\t\t\t\tpath, \"*.class\", options);\n\t\t\t}\n\t\t}\n\n\t\treturn resources;\n\t}","commit_id":"34dae74748eefa45ba9fd2d0797de890d3a71d08","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected Collection<JavaFileObject> handleSystemBundle(\n\t\tBundleWiring bundleWiring, String path) {\n\n\t\tCollection<JavaFileObject> javaFileObjects = _javaFileObjectCache.get(\n\t\t\tpath);\n\n\t\tif (javaFileObjects != null) {\n\t\t\treturn javaFileObjects;\n\t\t}\n\n\t\tList<URL> urls = null;\n\n\t\tMap<String, List<URL>> extraPackageMap = _serviceTracker.getService();\n\n\t\tif (extraPackageMap != null) {\n\t\t\turls = extraPackageMap.get(path.replace('/', '.'));\n\t\t}\n\n\t\tif ((urls == null) || urls.isEmpty()) {\n\t\t\tClassLoader classLoader = bundleWiring.getClassLoader();\n\n\t\t\ttry {\n\t\t\t\tEnumeration<URL> enumeration = classLoader.getResources(path);\n\n\t\t\t\tif ((enumeration != null) && enumeration.hasMoreElements()) {\n\t\t\t\t\turls = Collections.list(enumeration);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (IOException ioe) {\n\t\t\t\t_logger.log(Logger.LOG_ERROR, ioe.getMessage(), ioe);\n\t\t\t}\n\t\t}\n\n\t\tif ((urls == null) || urls.isEmpty()) {\n\t\t\t_javaFileObjectCache.put(\n\t\t\t\tpath, Collections.<JavaFileObject>emptyList());\n\n\t\t\treturn Collections.emptyList();\n\t\t}\n\n\t\tfor (URL url : urls) {\n\t\t\ttry (FileSystem fileSystem = openFileSystem(url)) {\n\t\t\t\tFileSystemProvider fileSystemProvider = fileSystem.provider();\n\n\t\t\t\ttry (DirectoryStream<Path> directoryStream =\n\t\t\t\t\t\tfileSystemProvider.newDirectoryStream(\n\t\t\t\t\t\t\tfileSystem.getPath(path),\n\t\t\t\t\t\t\tnew Filter<Path>() {\n\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic boolean accept(Path entryPath) {\n\t\t\t\t\t\t\t\t\tPath fileNamePath = entryPath.getFileName();\n\n\t\t\t\t\t\t\t\t\tString fileName = fileNamePath.toString();\n\n\t\t\t\t\t\t\t\t\treturn fileName.endsWith(\".class\");\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t})) {\n\n\t\t\t\t\tfor (Path filePath : directoryStream) {\n\t\t\t\t\t\tif (javaFileObjects == null) {\n\t\t\t\t\t\t\tjavaFileObjects = new ArrayList<>();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tURI uri = filePath.toUri();\n\n\t\t\t\t\t\tString filePathString = filePath.toString();\n\n\t\t\t\t\t\tjavaFileObjects.add(\n\t\t\t\t\t\t\tgetJavaFileObject(\n\t\t\t\t\t\t\t\turi.toURL(), filePathString.substring(1)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_logger.log(Logger.LOG_ERROR, e.getMessage(), e);\n\t\t\t}\n\t\t}\n\n\t\tif (javaFileObjects == null) {\n\t\t\tjavaFileObjects = Collections.<JavaFileObject>emptyList();\n\t\t}\n\n\t\t_javaFileObjectCache.put(path, javaFileObjects);\n\n\t\treturn javaFileObjects;\n\t}","id":2141,"modified_method":"protected Collection<String> handleSystemBundle(\n\t\tBundleWiring bundleWiring, String path) {\n\n\t\tCollection<String> resources = _jspResourceCache.get(path);\n\n\t\tif (resources != null) {\n\t\t\treturn resources;\n\t\t}\n\n\t\tList<URL> urls = null;\n\n\t\tMap<String, List<URL>> extraPackageMap = _serviceTracker.getService();\n\n\t\tif (extraPackageMap != null) {\n\t\t\turls = extraPackageMap.get(path.replace('/', '.'));\n\t\t}\n\n\t\tif ((urls == null) || urls.isEmpty()) {\n\t\t\tClassLoader classLoader = bundleWiring.getClassLoader();\n\n\t\t\ttry {\n\t\t\t\tEnumeration<URL> enumeration = classLoader.getResources(path);\n\n\t\t\t\tif ((enumeration != null) && enumeration.hasMoreElements()) {\n\t\t\t\t\turls = Collections.list(enumeration);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (IOException ioe) {\n\t\t\t\t_logger.log(Logger.LOG_ERROR, ioe.getMessage(), ioe);\n\t\t\t}\n\t\t}\n\n\t\tif ((urls == null) || urls.isEmpty()) {\n\t\t\t_jspResourceCache.put(path, Collections.<String>emptyList());\n\n\t\t\treturn null;\n\t\t}\n\n\t\tfor (URL url : urls) {\n\t\t\ttry (FileSystem fileSystem = openFileSystem(url)) {\n\t\t\t\tFileSystemProvider fileSystemProvider = fileSystem.provider();\n\n\t\t\t\ttry (DirectoryStream<Path> directoryStream =\n\t\t\t\t\t\tfileSystemProvider.newDirectoryStream(\n\t\t\t\t\t\t\tfileSystem.getPath(path),\n\t\t\t\t\t\t\tnew Filter<Path>() {\n\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic boolean accept(Path entryPath) {\n\t\t\t\t\t\t\t\t\tPath fileNamePath = entryPath.getFileName();\n\n\t\t\t\t\t\t\t\t\tString fileName = fileNamePath.toString();\n\n\t\t\t\t\t\t\t\t\treturn fileName.endsWith(\".class\");\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t})) {\n\n\t\t\t\t\tfor (Path filePath : directoryStream) {\n\t\t\t\t\t\tString filePathString = filePath.toString();\n\n\t\t\t\t\t\tif (resources == null) {\n\t\t\t\t\t\t\tresources = new ArrayList<>();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresources.add(filePathString.substring(1));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_logger.log(Logger.LOG_ERROR, e.getMessage(), e);\n\t\t\t}\n\t\t}\n\n\t\tif (resources == null) {\n\t\t\t_jspResourceCache.put(path, Collections.<String>emptyList());\n\t\t}\n\t\telse {\n\t\t\t_jspResourceCache.put(path, resources);\n\t\t}\n\n\t\treturn resources;\n\t}","commit_id":"34dae74748eefa45ba9fd2d0797de890d3a71d08","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected List<JavaFileObject> listFromDependencies(\n\t\tboolean recurse, String packagePath) {\n\n\t\tList<JavaFileObject> javaFileObjects = new ArrayList<>();\n\n\t\tint options = 0;\n\n\t\tif (recurse) {\n\t\t\toptions = BundleWiring.LISTRESOURCES_RECURSE;\n\t\t}\n\n\t\tfor (BundleWiring bundleWiring : _bundleWirings) {\n\t\t\tlist(packagePath, options, bundleWiring, javaFileObjects);\n\t\t}\n\n\t\tif (javaFileObjects.isEmpty()) {\n\t\t\tlist(packagePath, options, _bundleWiring, javaFileObjects);\n\t\t}\n\n\t\treturn javaFileObjects;\n\t}","id":2142,"modified_method":"protected List<JavaFileObject> listFromDependencies(\n\t\tboolean recurse, String packagePath) {\n\n\t\tList<JavaFileObject> javaFileObjects = new ArrayList<>();\n\n\t\tint options = 0;\n\n\t\tif (recurse) {\n\t\t\toptions = BundleWiring.LISTRESOURCES_RECURSE;\n\t\t}\n\n\t\tfor (BundleWiring bundleWiring : _bundleWirings) {\n\t\t\tjavaFileObjects.addAll(\n\t\t\t\t_classResolver.resolveClasses(\n\t\t\t\t\tbundleWiring, packagePath, options));\n\t\t}\n\n\t\tif (javaFileObjects.isEmpty()) {\n\t\t\tjavaFileObjects.addAll(\n\t\t\t\t_classResolver.resolveClasses(\n\t\t\t\t\t_bundleWiring, packagePath, options));\n\t\t}\n\n\t\treturn javaFileObjects;\n\t}","commit_id":"103a4e25bd2e922941bf6006658ddfa120dbddbf","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic Collection<String> resolveClasses(\n\t\tBundleWiring bundleWiring, String path, int options) {\n\n\t\tCollection<String> resources = null;\n\n\t\tBundle bundle = bundleWiring.getBundle();\n\n\t\tif (bundle.equals(_bundle) || bundle.equals(_jspBundle)) {\n\t\t\tresources = bundleWiring.listResources(path, \"*.class\", options);\n\t\t}\n\t\telse if (isExportsPackage(bundleWiring, path.replace('/', '.'))) {\n\t\t\tif (bundle.getBundleId() == 0) {\n\t\t\t\tresources = handleSystemBundle(bundleWiring, path);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresources = bundleWiring.listResources(\n\t\t\t\t\tpath, \"*.class\", options);\n\t\t\t}\n\t\t}\n\n\t\treturn resources;\n\t}","id":2143,"modified_method":"@Override\n\tpublic Collection<JavaFileObject> resolveClasses(\n\t\tBundleWiring bundleWiring, String path, int options) {\n\n\t\tBundle bundle = bundleWiring.getBundle();\n\n\t\tif (bundle.equals(_bundle) || bundle.equals(_jspBundle)) {\n\t\t\treturn toJavaFileObjects(\n\t\t\t\tbundle, bundleWiring.listResources(path, \"*.class\", options));\n\t\t}\n\n\t\tif (!isExportsPackage(bundleWiring, path.replace('/', '.'))) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\n\t\tif (bundle.getBundleId() == 0) {\n\t\t\treturn handleSystemBundle(bundleWiring, path);\n\t\t}\n\n\t\treturn toJavaFileObjects(\n\t\t\tbundle, bundleWiring.listResources(path, \"*.class\", options));\n\t}","commit_id":"103a4e25bd2e922941bf6006658ddfa120dbddbf","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected Collection<String> handleSystemBundle(\n\t\tBundleWiring bundleWiring, String path) {\n\n\t\tCollection<String> resources = _jspResourceCache.get(path);\n\n\t\tif (resources != null) {\n\t\t\treturn resources;\n\t\t}\n\n\t\tList<URL> urls = null;\n\n\t\tMap<String, List<URL>> extraPackageMap = _serviceTracker.getService();\n\n\t\tif (extraPackageMap != null) {\n\t\t\turls = extraPackageMap.get(path.replace('/', '.'));\n\t\t}\n\n\t\tif ((urls == null) || urls.isEmpty()) {\n\t\t\tClassLoader classLoader = bundleWiring.getClassLoader();\n\n\t\t\ttry {\n\t\t\t\tEnumeration<URL> enumeration = classLoader.getResources(path);\n\n\t\t\t\tif ((enumeration != null) && enumeration.hasMoreElements()) {\n\t\t\t\t\turls = Collections.list(enumeration);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (IOException ioe) {\n\t\t\t\t_logger.log(Logger.LOG_ERROR, ioe.getMessage(), ioe);\n\t\t\t}\n\t\t}\n\n\t\tif ((urls == null) || urls.isEmpty()) {\n\t\t\t_jspResourceCache.put(path, Collections.<String>emptyList());\n\n\t\t\treturn null;\n\t\t}\n\n\t\tfor (URL url : urls) {\n\t\t\ttry (FileSystem fileSystem = openFileSystem(url)) {\n\t\t\t\tFileSystemProvider fileSystemProvider = fileSystem.provider();\n\n\t\t\t\ttry (DirectoryStream<Path> directoryStream =\n\t\t\t\t\t\tfileSystemProvider.newDirectoryStream(\n\t\t\t\t\t\t\tfileSystem.getPath(path),\n\t\t\t\t\t\t\tnew Filter<Path>() {\n\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic boolean accept(Path entryPath) {\n\t\t\t\t\t\t\t\t\tPath fileNamePath = entryPath.getFileName();\n\n\t\t\t\t\t\t\t\t\tString fileName = fileNamePath.toString();\n\n\t\t\t\t\t\t\t\t\treturn fileName.endsWith(\".class\");\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t})) {\n\n\t\t\t\t\tfor (Path filePath : directoryStream) {\n\t\t\t\t\t\tString filePathString = filePath.toString();\n\n\t\t\t\t\t\tif (resources == null) {\n\t\t\t\t\t\t\tresources = new ArrayList<>();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresources.add(filePathString.substring(1));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_logger.log(Logger.LOG_ERROR, e.getMessage(), e);\n\t\t\t}\n\t\t}\n\n\t\tif (resources == null) {\n\t\t\t_jspResourceCache.put(path, Collections.<String>emptyList());\n\t\t}\n\t\telse {\n\t\t\t_jspResourceCache.put(path, resources);\n\t\t}\n\n\t\treturn resources;\n\t}","id":2144,"modified_method":"protected Collection<JavaFileObject> handleSystemBundle(\n\t\tBundleWiring bundleWiring, String path) {\n\n\t\tCollection<JavaFileObject> javaFileObjects = _javaFileObjectCache.get(\n\t\t\tpath);\n\n\t\tif (javaFileObjects != null) {\n\t\t\treturn javaFileObjects;\n\t\t}\n\n\t\tList<URL> urls = null;\n\n\t\tMap<String, List<URL>> extraPackageMap = _serviceTracker.getService();\n\n\t\tif (extraPackageMap != null) {\n\t\t\turls = extraPackageMap.get(path.replace('/', '.'));\n\t\t}\n\n\t\tif ((urls == null) || urls.isEmpty()) {\n\t\t\tClassLoader classLoader = bundleWiring.getClassLoader();\n\n\t\t\ttry {\n\t\t\t\tEnumeration<URL> enumeration = classLoader.getResources(path);\n\n\t\t\t\tif ((enumeration != null) && enumeration.hasMoreElements()) {\n\t\t\t\t\turls = Collections.list(enumeration);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (IOException ioe) {\n\t\t\t\t_logger.log(Logger.LOG_ERROR, ioe.getMessage(), ioe);\n\t\t\t}\n\t\t}\n\n\t\tif ((urls == null) || urls.isEmpty()) {\n\t\t\t_javaFileObjectCache.put(\n\t\t\t\tpath, Collections.<JavaFileObject>emptyList());\n\n\t\t\treturn Collections.emptyList();\n\t\t}\n\n\t\tfor (URL url : urls) {\n\t\t\ttry (FileSystem fileSystem = openFileSystem(url)) {\n\t\t\t\tFileSystemProvider fileSystemProvider = fileSystem.provider();\n\n\t\t\t\ttry (DirectoryStream<Path> directoryStream =\n\t\t\t\t\t\tfileSystemProvider.newDirectoryStream(\n\t\t\t\t\t\t\tfileSystem.getPath(path),\n\t\t\t\t\t\t\tnew Filter<Path>() {\n\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic boolean accept(Path entryPath) {\n\t\t\t\t\t\t\t\t\tPath fileNamePath = entryPath.getFileName();\n\n\t\t\t\t\t\t\t\t\tString fileName = fileNamePath.toString();\n\n\t\t\t\t\t\t\t\t\treturn fileName.endsWith(\".class\");\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t})) {\n\n\t\t\t\t\tfor (Path filePath : directoryStream) {\n\t\t\t\t\t\tif (javaFileObjects == null) {\n\t\t\t\t\t\t\tjavaFileObjects = new ArrayList<>();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tURI uri = filePath.toUri();\n\n\t\t\t\t\t\tString filePathString = filePath.toString();\n\n\t\t\t\t\t\tjavaFileObjects.add(\n\t\t\t\t\t\t\tgetJavaFileObject(\n\t\t\t\t\t\t\t\turi.toURL(), filePathString.substring(1)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_logger.log(Logger.LOG_ERROR, e.getMessage(), e);\n\t\t\t}\n\t\t}\n\n\t\tif (javaFileObjects == null) {\n\t\t\tjavaFileObjects = Collections.<JavaFileObject>emptyList();\n\t\t}\n\n\t\t_javaFileObjectCache.put(path, javaFileObjects);\n\n\t\treturn javaFileObjects;\n\t}","commit_id":"103a4e25bd2e922941bf6006658ddfa120dbddbf","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected List<JavaFileObject> listFromDependencies(\n\t\tboolean recurse, String packagePath) {\n\n\t\tList<JavaFileObject> javaFileObjects = new ArrayList<>();\n\n\t\tint options = 0;\n\n\t\tif (recurse) {\n\t\t\toptions = BundleWiring.LISTRESOURCES_RECURSE;\n\t\t}\n\n\t\tfor (BundleWiring bundleWiring : _bundleWirings) {\n\t\t\tlist(packagePath, options, bundleWiring, javaFileObjects);\n\t\t}\n\n\t\tif (javaFileObjects.isEmpty()) {\n\t\t\tlist(packagePath, options, _bundleWiring, javaFileObjects);\n\t\t}\n\n\t\treturn javaFileObjects;\n\t}","id":2145,"modified_method":"protected List<JavaFileObject> listFromDependencies(\n\t\tboolean recurse, String packagePath) {\n\n\t\tList<JavaFileObject> javaFileObjects = new ArrayList<>();\n\n\t\tint options = 0;\n\n\t\tif (recurse) {\n\t\t\toptions = BundleWiring.LISTRESOURCES_RECURSE;\n\t\t}\n\n\t\tfor (BundleWiring bundleWiring : _bundleWirings) {\n\t\t\tjavaFileObjects.addAll(\n\t\t\t\t_classResolver.resolveClasses(\n\t\t\t\t\tbundleWiring, packagePath, options));\n\t\t}\n\n\t\tif (javaFileObjects.isEmpty()) {\n\t\t\tjavaFileObjects.addAll(\n\t\t\t\t_classResolver.resolveClasses(\n\t\t\t\t\t_bundleWiring, packagePath, options));\n\t\t}\n\n\t\treturn javaFileObjects;\n\t}","commit_id":"a4da7d36bc50e2b620124f35d660758d9ad4b586","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic Collection<String> resolveClasses(\n\t\tBundleWiring bundleWiring, String path, int options) {\n\n\t\tCollection<String> resources = null;\n\n\t\tBundle bundle = bundleWiring.getBundle();\n\n\t\tif (bundle.equals(_bundle) || bundle.equals(_jspBundle)) {\n\t\t\tresources = bundleWiring.listResources(path, \"*.class\", options);\n\t\t}\n\t\telse if (isExportsPackage(bundleWiring, path.replace('/', '.'))) {\n\t\t\tif (bundle.getBundleId() == 0) {\n\t\t\t\tresources = handleSystemBundle(bundleWiring, path);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresources = bundleWiring.listResources(\n\t\t\t\t\tpath, \"*.class\", options);\n\t\t\t}\n\t\t}\n\n\t\treturn resources;\n\t}","id":2146,"modified_method":"@Override\n\tpublic Collection<JavaFileObject> resolveClasses(\n\t\tBundleWiring bundleWiring, String path, int options) {\n\n\t\tBundle bundle = bundleWiring.getBundle();\n\n\t\tif (bundle.equals(_bundle) || bundle.equals(_jspBundle)) {\n\t\t\treturn toJavaFileObjects(\n\t\t\t\tbundle, bundleWiring.listResources(path, \"*.class\", options));\n\t\t}\n\n\t\tif (!isExportsPackage(bundleWiring, path.replace('/', '.'))) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\n\t\tif (bundle.getBundleId() == 0) {\n\t\t\treturn handleSystemBundle(bundleWiring, path);\n\t\t}\n\n\t\treturn toJavaFileObjects(\n\t\t\tbundle, bundleWiring.listResources(path, \"*.class\", options));\n\t}","commit_id":"a4da7d36bc50e2b620124f35d660758d9ad4b586","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected Collection<String> handleSystemBundle(\n\t\tBundleWiring bundleWiring, String path) {\n\n\t\tCollection<String> resources = _jspResourceCache.get(path);\n\n\t\tif (resources != null) {\n\t\t\treturn resources;\n\t\t}\n\n\t\tList<URL> urls = null;\n\n\t\tMap<String, List<URL>> extraPackageMap = _serviceTracker.getService();\n\n\t\tif (extraPackageMap != null) {\n\t\t\turls = extraPackageMap.get(path.replace('/', '.'));\n\t\t}\n\n\t\tif ((urls == null) || urls.isEmpty()) {\n\t\t\tClassLoader classLoader = bundleWiring.getClassLoader();\n\n\t\t\ttry {\n\t\t\t\tEnumeration<URL> enumeration = classLoader.getResources(path);\n\n\t\t\t\tif ((enumeration != null) && enumeration.hasMoreElements()) {\n\t\t\t\t\turls = Collections.list(enumeration);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (IOException ioe) {\n\t\t\t\t_logger.log(Logger.LOG_ERROR, ioe.getMessage(), ioe);\n\t\t\t}\n\t\t}\n\n\t\tif ((urls == null) || urls.isEmpty()) {\n\t\t\t_jspResourceCache.put(path, Collections.<String>emptyList());\n\n\t\t\treturn null;\n\t\t}\n\n\t\tfor (URL url : urls) {\n\t\t\ttry (FileSystem fileSystem = openFileSystem(url)) {\n\t\t\t\tFileSystemProvider fileSystemProvider = fileSystem.provider();\n\n\t\t\t\ttry (DirectoryStream<Path> directoryStream =\n\t\t\t\t\t\tfileSystemProvider.newDirectoryStream(\n\t\t\t\t\t\t\tfileSystem.getPath(path),\n\t\t\t\t\t\t\tnew Filter<Path>() {\n\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic boolean accept(Path entryPath) {\n\t\t\t\t\t\t\t\t\tPath fileNamePath = entryPath.getFileName();\n\n\t\t\t\t\t\t\t\t\tString fileName = fileNamePath.toString();\n\n\t\t\t\t\t\t\t\t\treturn fileName.endsWith(\".class\");\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t})) {\n\n\t\t\t\t\tfor (Path filePath : directoryStream) {\n\t\t\t\t\t\tString filePathString = filePath.toString();\n\n\t\t\t\t\t\tif (resources == null) {\n\t\t\t\t\t\t\tresources = new ArrayList<>();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresources.add(filePathString.substring(1));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_logger.log(Logger.LOG_ERROR, e.getMessage(), e);\n\t\t\t}\n\t\t}\n\n\t\tif (resources == null) {\n\t\t\t_jspResourceCache.put(path, Collections.<String>emptyList());\n\t\t}\n\t\telse {\n\t\t\t_jspResourceCache.put(path, resources);\n\t\t}\n\n\t\treturn resources;\n\t}","id":2147,"modified_method":"protected Collection<JavaFileObject> handleSystemBundle(\n\t\tBundleWiring bundleWiring, String path) {\n\n\t\tCollection<JavaFileObject> javaFileObjects = _javaFileObjectCache.get(\n\t\t\tpath);\n\n\t\tif (javaFileObjects != null) {\n\t\t\treturn javaFileObjects;\n\t\t}\n\n\t\tList<URL> urls = null;\n\n\t\tMap<String, List<URL>> extraPackageMap = _serviceTracker.getService();\n\n\t\tif (extraPackageMap != null) {\n\t\t\turls = extraPackageMap.get(path.replace('/', '.'));\n\t\t}\n\n\t\tif ((urls == null) || urls.isEmpty()) {\n\t\t\tClassLoader classLoader = bundleWiring.getClassLoader();\n\n\t\t\ttry {\n\t\t\t\tEnumeration<URL> enumeration = classLoader.getResources(path);\n\n\t\t\t\tif ((enumeration != null) && enumeration.hasMoreElements()) {\n\t\t\t\t\turls = Collections.list(enumeration);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (IOException ioe) {\n\t\t\t\t_logger.log(Logger.LOG_ERROR, ioe.getMessage(), ioe);\n\t\t\t}\n\t\t}\n\n\t\tif ((urls == null) || urls.isEmpty()) {\n\t\t\t_javaFileObjectCache.put(\n\t\t\t\tpath, Collections.<JavaFileObject>emptyList());\n\n\t\t\treturn Collections.emptyList();\n\t\t}\n\n\t\tfor (URL url : urls) {\n\t\t\ttry (FileSystem fileSystem = openFileSystem(url)) {\n\t\t\t\tFileSystemProvider fileSystemProvider = fileSystem.provider();\n\n\t\t\t\ttry (DirectoryStream<Path> directoryStream =\n\t\t\t\t\t\tfileSystemProvider.newDirectoryStream(\n\t\t\t\t\t\t\tfileSystem.getPath(path),\n\t\t\t\t\t\t\tnew Filter<Path>() {\n\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic boolean accept(Path entryPath) {\n\t\t\t\t\t\t\t\t\tPath fileNamePath = entryPath.getFileName();\n\n\t\t\t\t\t\t\t\t\tString fileName = fileNamePath.toString();\n\n\t\t\t\t\t\t\t\t\treturn fileName.endsWith(\".class\");\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t})) {\n\n\t\t\t\t\tfor (Path filePath : directoryStream) {\n\t\t\t\t\t\tif (javaFileObjects == null) {\n\t\t\t\t\t\t\tjavaFileObjects = new ArrayList<>();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tURI uri = filePath.toUri();\n\n\t\t\t\t\t\tString filePathString = filePath.toString();\n\n\t\t\t\t\t\tjavaFileObjects.add(\n\t\t\t\t\t\t\tgetJavaFileObject(\n\t\t\t\t\t\t\t\turi.toURL(), filePathString.substring(1)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_logger.log(Logger.LOG_ERROR, e.getMessage(), e);\n\t\t\t}\n\t\t}\n\n\t\tif (javaFileObjects == null) {\n\t\t\tjavaFileObjects = Collections.<JavaFileObject>emptyList();\n\t\t}\n\n\t\t_javaFileObjectCache.put(path, javaFileObjects);\n\n\t\treturn javaFileObjects;\n\t}","commit_id":"a4da7d36bc50e2b620124f35d660758d9ad4b586","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void actionPerformed(AnActionEvent e) {\n    final Project project = e.getData(PlatformDataKeys.PROJECT);\n    final CreateAirDescriptorDialog dialog = new CreateAirDescriptorDialog(project);\n    dialog.show();\n    if (dialog.isOK()) {\n      try {\n        final VirtualFile descriptorFile = createAirDescriptor(dialog.getAirDescriptorParameters());\n\n        final ToolWindowManager manager = ToolWindowManager.getInstance(project);\n        manager.notifyByBalloon(ToolWindowId.PROJECT_VIEW, MessageType.INFO,\n                                FlexBundle.message(\"file.created\", descriptorFile.getName()), null,\n                                new HyperlinkListener() {\n                                  public void hyperlinkUpdate(HyperlinkEvent e) {\n                                    if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED && descriptorFile.isValid()) {\n                                      FileEditorManager.getInstance(project)\n                                        .openTextEditor(new OpenFileDescriptor(project, descriptorFile), true);\n                                    }\n                                  }\n                                });\n      }\n      catch (IOException ex) {\n        Messages.showErrorDialog(project, FlexBundle.message(\"air.descriptor.creation.failed\", ex.getMessage()),\n                                 FlexBundle.message(\"error.title\"));\n      }\n    }\n  }","id":2148,"modified_method":"public void actionPerformed(AnActionEvent e) {\n    final Project project = e.getData(PlatformDataKeys.PROJECT);\n    final CreateAirDescriptorDialog dialog = new CreateAirDescriptorDialog(project);\n    dialog.show();\n    if (dialog.isOK()) {\n      try {\n        final VirtualFile descriptorFile = createAirDescriptor(dialog.getAirDescriptorParameters());\n\n        NOTIFICATION_GROUP.createNotification(\"\", FlexBundle.message(\"file.created\", descriptorFile.getName()),\n                                              NotificationType.INFORMATION, new NotificationListener() {\n          @Override\n          public void hyperlinkUpdate(@NotNull Notification notification, @NotNull HyperlinkEvent e) {\n                                    if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED && descriptorFile.isValid()) {\n                                      FileEditorManager.getInstance(project)\n                                        .openTextEditor(new OpenFileDescriptor(project, descriptorFile), true);\n                                    }\n                                  }\n                                }).notify(project);\n      }\n      catch (IOException ex) {\n        Messages.showErrorDialog(project, FlexBundle.message(\"air.descriptor.creation.failed\", ex.getMessage()),\n                                 FlexBundle.message(\"error.title\"));\n      }\n    }\n  }","commit_id":"41568cf31e67bcae15ef55fe6d344190649e7806","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public void actionPerformed(AnActionEvent e) {\n    final Project project = e.getData(PlatformDataKeys.PROJECT);\n    final CreateHtmlWrapperDialog dialog = new CreateHtmlWrapperDialog(project);\n    dialog.show();\n    if (dialog.isOK()) {\n      try {\n        final HTMLWrapperParameters htmlWrapperParameters = dialog.getHTMLWrapperParameters();\n        final VirtualFile htmlFile = createHtmlWrapper(htmlWrapperParameters);\n\n        if (htmlFile != null) {\n          if (dialog.isCreateRunConfigurationSelected() && project != null) {\n            FlexModuleBuilder.createFlexRunConfiguration(project, htmlFile);\n          }\n\n          final ToolWindowManager manager = ToolWindowManager.getInstance(project);\n          manager.notifyByBalloon(ToolWindowId.PROJECT_VIEW, MessageType.INFO,\n                                  FlexBundle.message(\"file.created\", htmlFile.getName()), null,\n                                  new HyperlinkListener() {\n                                    public void hyperlinkUpdate(final HyperlinkEvent e) {\n                                      if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED && htmlFile.isValid()) {\n                                        FileEditorManager.getInstance(project)\n                                          .openTextEditor(new OpenFileDescriptor(project, htmlFile), true);\n                                      }\n                                    }\n                                  });\n        }\n        else {\n          Messages.showErrorDialog(project, FlexBundle.message(\"html.wrapper.creation.failed\", \"\"), FlexBundle.message(\"error.title\"));\n        }\n      }\n      catch (IOException ex) {\n        Messages.showErrorDialog(project, FlexBundle.message(\"html.wrapper.creation.failed\", ex.getMessage()), \"Error\");\n      }\n    }\n  }","id":2149,"modified_method":"public void actionPerformed(AnActionEvent e) {\n    final Project project = e.getData(PlatformDataKeys.PROJECT);\n    final CreateHtmlWrapperDialog dialog = new CreateHtmlWrapperDialog(project);\n    dialog.show();\n    if (dialog.isOK()) {\n      try {\n        final HTMLWrapperParameters htmlWrapperParameters = dialog.getHTMLWrapperParameters();\n        final VirtualFile htmlFile = createHtmlWrapper(htmlWrapperParameters);\n\n        if (htmlFile != null) {\n          if (dialog.isCreateRunConfigurationSelected() && project != null) {\n            FlexModuleBuilder.createFlexRunConfiguration(project, htmlFile);\n          }\n\n          CreateAirDescriptorAction.NOTIFICATION_GROUP.createNotification(\"\", FlexBundle.message(\"file.created\", htmlFile.getName()),\n                                                                          NotificationType.INFORMATION, new NotificationListener() {\n            @Override\n            public void hyperlinkUpdate(@NotNull Notification notification, @NotNull HyperlinkEvent e) {\n                                      if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED && htmlFile.isValid()) {\n                                        FileEditorManager.getInstance(project)\n                                          .openTextEditor(new OpenFileDescriptor(project, htmlFile), true);\n                                      }\n                                    }\n                                  }).notify(project);\n        }\n        else {\n          Messages.showErrorDialog(project, FlexBundle.message(\"html.wrapper.creation.failed\", \"\"), FlexBundle.message(\"error.title\"));\n        }\n      }\n      catch (IOException ex) {\n        Messages.showErrorDialog(project, FlexBundle.message(\"html.wrapper.creation.failed\", ex.getMessage()), \"Error\");\n      }\n    }\n  }","commit_id":"41568cf31e67bcae15ef55fe6d344190649e7806","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private boolean packageAirInstaller() {\n    final AirInstallerParameters parameters = getAirInstallerParameters();\n    saveAsDefaultParameters(parameters);\n\n    FileDocumentManager.getInstance().saveAllDocuments();\n    final boolean ok = ExternalTask.runWithProgress(createAirInstallerTask(myProject, parameters), \"Packaging AIR installer\", TITLE);\n\n    if (ok) {\n      final String message = parameters.DO_NOT_SIGN\n                             ? MessageFormat.format(\"Unsigned AIR package created: {0}\", parameters.INSTALLER_FILE_NAME)\n                             : MessageFormat.format(\"AIR installation file created: {0}\", parameters.INSTALLER_FILE_NAME);\n      ToolWindowManager.getInstance(myProject).notifyByBalloon(ToolWindowId.PROJECT_VIEW, MessageType.INFO, message);\n    }\n\n    return ok;\n  }","id":2150,"modified_method":"private boolean packageAirInstaller() {\n    final AirInstallerParameters parameters = getAirInstallerParameters();\n    saveAsDefaultParameters(parameters);\n\n    FileDocumentManager.getInstance().saveAllDocuments();\n    final boolean ok = ExternalTask.runWithProgress(createAirInstallerTask(myProject, parameters), \"Packaging AIR installer\", TITLE);\n\n    if (ok) {\n      final String message = parameters.DO_NOT_SIGN\n                             ? MessageFormat.format(\"Unsigned AIR package created: {0}\", parameters.INSTALLER_FILE_NAME)\n                             : MessageFormat.format(\"AIR installation file created: {0}\", parameters.INSTALLER_FILE_NAME);\n      CreateAirDescriptorAction.NOTIFICATION_GROUP.createNotification(message, MessageType.INFO).notify(myProject);\n    }\n\n    return ok;\n  }","commit_id":"41568cf31e67bcae15ef55fe6d344190649e7806","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private boolean packageMobileApplication() {\n    final MobileAirPackageParameters parameters = getPackageParameters();\n    saveAsDefaultParameters(parameters);\n\n    FileDocumentManager.getInstance().saveAllDocuments();\n\n    final String adtVersion = MobileAirUtil.getAdtVersion(myProject, parameters.getFlexSdk());\n    final boolean ok = MobileAirUtil.checkAdtVersionForPackaging(myProject, adtVersion, parameters) &&\n                       ExternalTask.runWithProgress(MobileAirUtil.createMobileAirPackageTask(myProject, parameters),\n                                                    FlexBundle.message(\"packaging.application\", parameters.MOBILE_PLATFORM), TITLE);\n\n    if (ok) {\n      final String message = FlexBundle.message(\"application.created\", parameters.MOBILE_PLATFORM, parameters.INSTALLER_FILE_NAME);\n      ToolWindowManager.getInstance(myProject).notifyByBalloon(ToolWindowId.PROJECT_VIEW, MessageType.INFO, message);\n    }\n\n    return ok;\n  }","id":2151,"modified_method":"private boolean packageMobileApplication() {\n    final MobileAirPackageParameters parameters = getPackageParameters();\n    saveAsDefaultParameters(parameters);\n\n    FileDocumentManager.getInstance().saveAllDocuments();\n\n    final String adtVersion = MobileAirUtil.getAdtVersion(myProject, parameters.getFlexSdk());\n    final boolean ok = MobileAirUtil.checkAdtVersionForPackaging(myProject, adtVersion, parameters) &&\n                       ExternalTask.runWithProgress(MobileAirUtil.createMobileAirPackageTask(myProject, parameters),\n                                                    FlexBundle.message(\"packaging.application\", parameters.MOBILE_PLATFORM), TITLE);\n\n    if (ok) {\n      final String message = FlexBundle.message(\"application.created\", parameters.MOBILE_PLATFORM, parameters.INSTALLER_FILE_NAME);\n      CreateAirDescriptorAction.NOTIFICATION_GROUP.createNotification(message, MessageType.INFO).notify(myProject);\n    }\n\n    return ok;\n  }","commit_id":"41568cf31e67bcae15ef55fe6d344190649e7806","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"/**\n\t * Save the grade and comment for a student's assignment and do concurrency checking\n\t *\n\t * @param assignmentId id of the gradebook assignment\n\t * @param studentUuid uuid of the user\n\t * @param oldGrade old grade, passed in for concurrency checking/ If null, concurrency checking is skipped.\n\t * @param newGrade new grade for the assignment/user\n\t * @param comment optional comment for the grade. Can be null.\n\t *\n\t * @return\n\t *\n\t * \t\tTODO make the concurrency check a boolean instead of the null oldGrade\n\t */\n\tpublic GradeSaveResponse saveGrade(final Long assignmentId, final String studentUuid, final String oldGrade,\n\t\t\tfinal String newGrade, final String comment) {\n\n\t\tfinal Gradebook gradebook = this.getGradebook();\n\t\tif (gradebook == null) {\n\t\t\treturn GradeSaveResponse.ERROR;\n\t\t}\n\n\t\t// get current grade\n\t\tfinal String storedGrade = this.gradebookService.getAssignmentScoreString(gradebook.getUid(), assignmentId,\n\t\t\t\tstudentUuid);\n\n\t\t// get assignment config\n\t\tfinal Assignment assignment = this.getAssignment(assignmentId);\n\t\tfinal Double maxPoints = assignment.getPoints();\n\n\t\t// check what grading mode we are in\n\t\tfinal GbGradingType gradingType = GbGradingType.valueOf(gradebook.getGrade_type());\n\n\t\t// if percentage entry type, additional formatting, otherwise use points as is\n\t\tString gradeString = null;\n\t\tif (gradingType == GbGradingType.PERCENTAGE) {\n\t\t\t// the passed in grade represents a percentage so the number needs to be adjusted back to points\n\t\t\tfinal Double percentage = NumberUtils.toDouble(newGrade);\n\t\t\tfinal Double pointsFromPercentage = percentage / maxPoints;\n\n\t\t\tlog.debug(\"pointsFromPercentage: \" + pointsFromPercentage);\n\t\t\tgradeString = pointsFromPercentage.toString();\n\t\t} else {\n\t\t\tgradeString = newGrade;\n\t\t}\n\n\t\t// trim the .0 from the grades if present. UI removes it so lets standardise\n\t\tString processedStoredGrade = StringUtils.removeEnd(storedGrade, \".0\");\n\t\tString processedOldGrade = StringUtils.removeEnd(oldGrade, \".0\");\n\t\tString processedNewGrade = StringUtils.removeEnd(gradeString, \".0\");\n\n\t\t// trim to null so we can better compare against no previous grade being\n\t\t// recorded (as it will be null)\n\t\t// note that we also trim newGrade so that don't add the grade if the\n\t\t// new grade is blank and there was no grade previously\n\t\tprocessedStoredGrade = StringUtils.trimToNull(processedStoredGrade);\n\t\tprocessedOldGrade = StringUtils.trimToNull(processedOldGrade);\n\t\tprocessedNewGrade = StringUtils.trimToNull(processedNewGrade);\n\n\t\tif (log.isDebugEnabled()) {\n\t\t\tlog.debug(\"storedGrade: \" + processedStoredGrade);\n\t\t\tlog.debug(\"oldGrade: \" + processedOldGrade);\n\t\t\tlog.debug(\"newGrade: \" + processedNewGrade);\n\t\t}\n\n\t\t// if comment longer than 500 chars, error.\n\t\t// the field is a CLOB, probably by mistake. Loading this field up may cause performance issues\n\t\t// see SAK-29595\n\t\tif (StringUtils.length(comment) > 500) {\n\t\t\tlog.error(\"Comment too long. Maximum 500 characters.\");\n\t\t\treturn GradeSaveResponse.ERROR;\n\t\t}\n\n\t\t// no change\n\t\tif (StringUtils.equals(processedStoredGrade, processedNewGrade)) {\n\t\t\tfinal Double storedGradePoints = NumberUtils.toDouble(processedStoredGrade);\n\t\t\tif (storedGradePoints.compareTo(maxPoints) > 0) {\n\t\t\t\treturn GradeSaveResponse.OVER_LIMIT;\n\t\t\t} else {\n\t\t\t\treturn GradeSaveResponse.NO_CHANGE;\n\t\t\t}\n\t\t}\n\n\t\t// concurrency check, if stored grade != old grade that was passed in,\n\t\t// someone else has edited.\n\t\t// if oldGrade == null, ignore concurrency check\n\t\tif (oldGrade != null && !StringUtils.equals(processedStoredGrade, processedOldGrade)) {\n\t\t\treturn GradeSaveResponse.CONCURRENT_EDIT;\n\t\t}\n\n\t\t// about to edit so push a notification\n\t\tpushEditingNotification(gradebook.getUid(), getCurrentUser(), studentUuid, assignmentId);\n\n\t\tGradeSaveResponse rval = null;\n\n\t\tif (StringUtils.isNotBlank(gradeString)) {\n\t\t\tfinal Double newGradePoints = NumberUtils.toDouble(processedNewGrade);\n\n\t\t\t// if over limit, still save but return the warning\n\t\t\tif (newGradePoints.compareTo(maxPoints) > 0) {\n\t\t\t\tlog.debug(\"over limit. Max: \" + maxPoints);\n\t\t\t\trval = GradeSaveResponse.OVER_LIMIT;\n\t\t\t}\n\t\t}\n\n\t\t// save\n\t\ttry {\n\t\t\t// note, you must pass in the comment or it wil lbe nulled out by\n\t\t\t// the GB service\n\t\t\tthis.gradebookService.saveGradeAndCommentForStudent(gradebook.getUid(), assignmentId, studentUuid,\n\t\t\t\t\tprocessedNewGrade, comment);\n\t\t\tif (rval == null) {\n\t\t\t\t// if we don't have some other warning, it was all OK\n\t\t\t\trval = GradeSaveResponse.OK;\n\t\t\t}\n\t\t} catch (InvalidGradeException | GradebookNotFoundException | AssessmentNotFoundException e) {\n\t\t\tlog.error(\"An error occurred saving the grade. \" + e.getClass() + \": \" + e.getMessage());\n\t\t\trval = GradeSaveResponse.ERROR;\n\t\t}\n\t\treturn rval;\n\t}","id":2152,"modified_method":"/**\n\t * Save the grade and comment for a student's assignment and do concurrency checking\n\t *\n\t * @param assignmentId id of the gradebook assignment\n\t * @param studentUuid uuid of the user\n\t * @param oldGrade old grade, passed in for concurrency checking/ If null, concurrency checking is skipped.\n\t * @param newGrade new grade for the assignment/user\n\t * @param comment optional comment for the grade. Can be null.\n\t *\n\t * @return\n\t *\n\t * \t\tTODO make the concurrency check a boolean instead of the null oldGrade\n\t */\n\tpublic GradeSaveResponse saveGrade(final Long assignmentId, final String studentUuid, final String oldGrade,\n\t\t\tfinal String newGrade, final String comment) {\n\n\t\tfinal Gradebook gradebook = this.getGradebook();\n\t\tif (gradebook == null) {\n\t\t\treturn GradeSaveResponse.ERROR;\n\t\t}\n\n\t\t// get current grade\n\t\tfinal String storedGrade = this.gradebookService.getAssignmentScoreString(gradebook.getUid(), assignmentId,\n\t\t\t\tstudentUuid);\n\n\t\t// get assignment config\n\t\tfinal Assignment assignment = this.getAssignment(assignmentId);\n\t\tfinal Double maxPoints = assignment.getPoints();\n\n\t\t// check what grading mode we are in\n\t\tfinal GbGradingType gradingType = GbGradingType.valueOf(gradebook.getGrade_type());\n\n\t\t// if percentage entry type, reformat the grades, otherwise use points as is\n\t\tString newGradeAdjusted = newGrade;\n\t\tString oldGradeAdjusted = oldGrade;\n\t\tString storedGradeAdjusted = storedGrade;\n\n\t\tif (gradingType == GbGradingType.PERCENTAGE) {\n\t\t\t// the passed in grades represents a percentage so the number needs to be adjusted back to points\n\t\t\tfinal Double newGradePercentage = NumberUtils.toDouble(newGrade);\n\t\t\tfinal Double newGradePointsFromPercentage = newGradePercentage / maxPoints;\n\t\t\tnewGradeAdjusted = newGradePointsFromPercentage.toString();\n\n\t\t\tfinal Double oldGradePercentage = NumberUtils.toDouble(oldGrade);\n\t\t\tfinal Double oldGradePointsFromPercentage = oldGradePercentage / maxPoints;\n\t\t\toldGradeAdjusted = oldGradePointsFromPercentage.toString();\n\n\t\t\tfinal Double storedGradePercentage = NumberUtils.toDouble(storedGrade);\n\t\t\tfinal Double storedGradePointsFromPercentage = storedGradePercentage / maxPoints;\n\t\t\tstoredGradeAdjusted = storedGradePointsFromPercentage.toString();\n\t\t}\n\n\t\t// trim the .0 from the grades if present. UI removes it so lets standardise\n\t\t// trim to null so we can better compare against no previous grade being recorded (as it will be null)\n\t\t// Note that we also trim newGrade so that don't add the grade if the new grade is blank and there was no grade previously\n\t\tstoredGradeAdjusted = StringUtils.trimToNull(StringUtils.removeEnd(storedGradeAdjusted, \".0\"));\n\t\toldGradeAdjusted = StringUtils.trimToNull(StringUtils.removeEnd(oldGradeAdjusted, \".0\"));\n\t\tnewGradeAdjusted = StringUtils.trimToNull(StringUtils.removeEnd(newGradeAdjusted, \".0\"));\n\n\t\tif (log.isDebugEnabled()) {\n\t\t\tlog.debug(\"storedGrade: \" + storedGradeAdjusted);\n\t\t\tlog.debug(\"oldGrade: \" + oldGradeAdjusted);\n\t\t\tlog.debug(\"newGrade: \" + newGradeAdjusted);\n\t\t}\n\n\t\t// if comment longer than 500 chars, error.\n\t\t// the field is a CLOB, probably by mistake. Loading this field up may cause performance issues\n\t\t// see SAK-29595\n\t\tif (StringUtils.length(comment) > 500) {\n\t\t\tlog.error(\"Comment too long. Maximum 500 characters.\");\n\t\t\treturn GradeSaveResponse.ERROR;\n\t\t}\n\n\t\t// no change\n\t\tif (StringUtils.equals(storedGradeAdjusted, newGradeAdjusted)) {\n\t\t\tfinal Double storedGradePoints = NumberUtils.toDouble(storedGradeAdjusted);\n\t\t\tif (storedGradePoints.compareTo(maxPoints) > 0) {\n\t\t\t\treturn GradeSaveResponse.OVER_LIMIT;\n\t\t\t} else {\n\t\t\t\treturn GradeSaveResponse.NO_CHANGE;\n\t\t\t}\n\t\t}\n\n\t\t// concurrency check, if stored grade != old grade that was passed in,\n\t\t// someone else has edited.\n\t\t// if oldGrade == null, ignore concurrency check\n\t\tif (oldGrade != null && !StringUtils.equals(storedGradeAdjusted, oldGradeAdjusted)) {\n\t\t\treturn GradeSaveResponse.CONCURRENT_EDIT;\n\t\t}\n\n\t\t// about to edit so push a notification\n\t\tpushEditingNotification(gradebook.getUid(), getCurrentUser(), studentUuid, assignmentId);\n\n\t\tGradeSaveResponse rval = null;\n\n\t\tif (StringUtils.isNotBlank(newGradeAdjusted)) {\n\t\t\tfinal Double newGradePoints = NumberUtils.toDouble(newGradeAdjusted);\n\n\t\t\t// if over limit, still save but return the warning\n\t\t\tif (newGradePoints.compareTo(maxPoints) > 0) {\n\t\t\t\tlog.debug(\"over limit. Max: \" + maxPoints);\n\t\t\t\trval = GradeSaveResponse.OVER_LIMIT;\n\t\t\t}\n\t\t}\n\n\t\t// save\n\t\ttry {\n\t\t\t// note, you must pass in the comment or it will be nulled out by the GB service\n\t\t\t// also, must pass in the raw grade as the service does conversions between percentage etc\n\t\t\tthis.gradebookService.saveGradeAndCommentForStudent(gradebook.getUid(), assignmentId, studentUuid,\n\t\t\t\t\tnewGrade, comment);\n\t\t\tif (rval == null) {\n\t\t\t\t// if we don't have some other warning, it was all OK\n\t\t\t\trval = GradeSaveResponse.OK;\n\t\t\t}\n\t\t} catch (InvalidGradeException | GradebookNotFoundException | AssessmentNotFoundException e) {\n\t\t\tlog.error(\"An error occurred saving the grade. \" + e.getClass() + \": \" + e.getMessage());\n\t\t\trval = GradeSaveResponse.ERROR;\n\t\t}\n\t\treturn rval;\n\t}","commit_id":"d58b9fa3a66fcc5a36f7302336d7406b9ff80f04","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Override\n  public ClusterConfiguration add( String partitionName, String name, String host, Integer port ) throws ServiceRegistrationException {\n    ClusterConfiguration config = this.newInstance( partitionName, name, host, port );\n    try {\n      Partition part = Partitions.lookup( config );\n      ServiceConfigurations.getInstance( ).store( config );\n      part.syncKeysToDisk( );\n    } catch ( ServiceRegistrationException ex ) {\n      Partitions.maybeRemove( config.getPartition( ) );\n      throw ex;\n    } catch ( Throwable ex ) {\n      Partitions.maybeRemove( config.getPartition( ) );\n      LOG.error( ex, ex );\n      throw new ServiceRegistrationException( String.format( \"Unexpected error caused cluster registration to fail for: partition=%s name=%s host=%s port=%d\",\n                                                             partitionName, name, host, port ), ex );\n    }\n    return config;\n  }","id":2153,"modified_method":"@Override\n  public ClusterConfiguration add( String partitionName, String name, String host, Integer port ) throws ServiceRegistrationException {\n    ClusterConfiguration config = this.newInstance( partitionName, name, host, port );\n    try {\n      Partition part = Partitions.lookup( config );\n      part.syncKeysToDisk( );\n      ServiceConfigurations.getInstance( ).store( config );\n    } catch ( ServiceRegistrationException ex ) {\n//      Partitions.maybeRemove( config.getPartition( ) );//TODO:GRZE:restore\n      throw ex;\n    } catch ( Throwable ex ) {\n//      Partitions.maybeRemove( config.getPartition( ) );//TODO:GRZE:restore\n      LOG.error( ex, ex );\n      throw new ServiceRegistrationException( String.format( \"Unexpected error caused cluster registration to fail for: partition=%s name=%s host=%s port=%d\",\n                                                             partitionName, name, host, port ), ex );\n    }\n    return config;\n  }","commit_id":"a99b87c7df00484dfdec66b1c0e5e0fe90fffc2e","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public static boolean register( final Component component, String part, String name, String hostName, Integer port ) throws ServiceRegistrationException {\n    \n    final ServiceBuilder builder = component.getBuilder( );\n    String partition = part;\n    \n    if ( !component.getComponentId( ).isPartitioned( ) ) {\n      partition = name;\n    } else if ( component.getComponentId( ).isCloudLocal( ) ) {\n      partition = Components.lookup( Eucalyptus.class ).getComponentId( ).name( );\n    } else if ( partition == null ) {\n      LOG.error( \"BUG: Provided partition is null.  Using the service name as the partition name for the time being.\" );\n      partition = name;\n    }\n    InetAddress addr;\n    try {\n      addr = InetAddress.getByName( hostName );\n    } catch ( UnknownHostException ex1 ) {\n      LOG.error( \"Inavlid hostname: \" + hostName + \" failure: \" + ex1.getMessage( ), ex1 );\n      throw new ServiceRegistrationException( builder.getClass( ).getSimpleName( ) + \": registration failed because the hostname \" + hostName + \" is invalid: \"\n                                              + ex1.getMessage( ), ex1 );\n    }\n    LOG.info( \"Using builder: \" + builder.getClass( ).getSimpleName( ) + \" for: \" + partition + \".\" + name + \"@\" + hostName + \":\" + port );\n    if ( !builder.checkAdd( partition, name, hostName, port ) ) {\n      LOG.info( builder.getClass( ).getSimpleName( ) + \": checkAdd failed.\" );\n      return false;\n    }\n    \n    try {\n      final ServiceConfiguration newComponent = builder.add( partition, name, hostName, port );\n      Partition p = Partitions.lookup( newComponent );\n      Logs.exhaust( ).info( p.getCertificate( ) );\n      Logs.exhaust( ).info( p.getNodeCertificate( ) );\n      try {\n        doServiceStart( newComponent );\n      } catch ( Throwable ex ) {\n        LOG.info( builder.getClass( ).getSimpleName( ) + \": enable failed because of: \" + ex.getMessage( ) );\n      }\n      return true;\n    } catch ( Throwable e ) {\n      e = Exceptions.filterStackTrace( e );\n      LOG.info( builder.getClass( ).getSimpleName( ) + \": registration failed because of: \" + e.getMessage( ) );\n      LOG.error( e, e );\n      throw new ServiceRegistrationException( builder.getClass( ).getSimpleName( ) + \": registration failed with message: \" + e.getMessage( ), e );\n    }\n  }","id":2154,"modified_method":"public static boolean register( final Component component, String part, String name, String hostName, Integer port ) throws ServiceRegistrationException {\n    \n    final ServiceBuilder builder = component.getBuilder( );\n    String partition = part;\n    \n    if ( !component.getComponentId( ).isPartitioned( ) ) {\n      partition = name;\n    } else if ( !component.getComponentId( ).isPartitioned( ) && component.getComponentId( ).isCloudLocal( ) ) {\n      partition = Components.lookup( Eucalyptus.class ).getComponentId( ).name( );\n    } else if ( partition == null ) {\n      LOG.error( \"BUG: Provided partition is null.  Using the service name as the partition name for the time being.\" );\n      partition = name;\n    }\n    InetAddress addr;\n    try {\n      addr = InetAddress.getByName( hostName );\n    } catch ( UnknownHostException ex1 ) {\n      LOG.error( \"Inavlid hostname: \" + hostName + \" failure: \" + ex1.getMessage( ), ex1 );\n      throw new ServiceRegistrationException( builder.getClass( ).getSimpleName( ) + \": registration failed because the hostname \" + hostName + \" is invalid: \"\n                                              + ex1.getMessage( ), ex1 );\n    }\n    LOG.info( \"Using builder: \" + builder.getClass( ).getSimpleName( ) + \" for: \" + partition + \".\" + name + \"@\" + hostName + \":\" + port );\n    if ( !builder.checkAdd( partition, name, hostName, port ) ) {\n      LOG.info( builder.getClass( ).getSimpleName( ) + \": checkAdd failed.\" );\n      return false;\n    }\n    \n    try {\n      final ServiceConfiguration newComponent = builder.add( partition, name, hostName, port );\n      Partition p = Partitions.lookup( newComponent );\n      Logs.exhaust( ).info( p.getCertificate( ) );\n      Logs.exhaust( ).info( p.getNodeCertificate( ) );\n      try {\n        doServiceStart( newComponent );\n      } catch ( Throwable ex ) {\n        LOG.info( builder.getClass( ).getSimpleName( ) + \": enable failed because of: \" + ex.getMessage( ) );\n      }\n      return true;\n    } catch ( Throwable e ) {\n      e = Exceptions.filterStackTrace( e );\n      LOG.info( builder.getClass( ).getSimpleName( ) + \": registration failed because of: \" + e.getMessage( ) );\n      LOG.error( e, e );\n      throw new ServiceRegistrationException( builder.getClass( ).getSimpleName( ) + \": registration failed with message: \" + e.getMessage( ), e );\n    }\n  }","commit_id":"a99b87c7df00484dfdec66b1c0e5e0fe90fffc2e","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@Override\n  public <T extends ServiceConfiguration> T store( T t ) throws ServiceRegistrationException {\n    EntityWrapper<T> db = EntityWrapper.get( t );\n    try {\n      db.add( t );\n      t = db.getUnique( t );\n      db.commit( );\n      EventRecord.here( ServiceConfigurationProvider.class, EventClass.COMPONENT, EventType.COMPONENT_REGISTERED ).withDetails( t.getComponentId( ).name( ), t.getName( ), \"host\", t.getHostName( ) ).info( );\n    } catch ( Exception e ) {\n      db.rollback( );\n      LOG.error( e, e );\n      throw new ServiceRegistrationException( e );\n    }\n    return t;\n  }","id":2155,"modified_method":"@Override\n  public <T extends ServiceConfiguration> T store( T t ) throws ServiceRegistrationException {\n    EntityWrapper<T> db = EntityWrapper.get( t );\n    try {\n      db.add( t );\n      t = db.getUnique( t );\n      db.commit( );\n      EventRecord.here( ServiceConfigurationProvider.class, EventClass.COMPONENT, EventType.COMPONENT_REGISTERED, t.toString( ) ).info( );\n    } catch ( Exception e ) {\n      db.rollback( );\n      EventRecord.here( ServiceConfigurationProvider.class, EventClass.COMPONENT, EventType.COMPONENT_REGISTERED, t.toString( ) ).error( );\n      LOG.error( e, e );\n      throw new ServiceRegistrationException( e );\n    }\n    return t;\n  }","commit_id":"a99b87c7df00484dfdec66b1c0e5e0fe90fffc2e","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"@Override\n  public <T extends ServiceConfiguration> T remove( T t ) throws ServiceRegistrationException {\n    EntityWrapper<T> db = EntityWrapper.get( t );\n    try {\n      T searchConfig = ( T ) t.getClass( ).newInstance( );\n      searchConfig.setName( t.getName( ) );\n      T exists = db.getUnique( searchConfig );\n      db.delete( exists );\n      db.commit( );\n      EventRecord.here( ServiceConfigurationProvider.class, EventClass.COMPONENT, EventType.COMPONENT_DEREGISTERED ).withDetails( t.getComponentId( ).name( ), t.getName( ), \"host\", t.getHostName( )  ).info( );\n    } catch ( Exception e ) {\n      db.rollback( );\n      LOG.error( e, e );\n      throw new ServiceRegistrationException( e );\n    }\n    return t;\n  }","id":2156,"modified_method":"@Override\n  public <T extends ServiceConfiguration> T remove( T t ) throws ServiceRegistrationException {\n    EntityWrapper<T> db = EntityWrapper.get( t );\n    try {\n      T searchConfig = ( T ) t.getClass( ).newInstance( );\n      searchConfig.setName( t.getName( ) );\n      T exists = db.getUnique( searchConfig );\n      db.delete( exists );\n      db.commit( );\n      EventRecord.here( ServiceConfigurationProvider.class, EventClass.COMPONENT, EventType.COMPONENT_DEREGISTERED, t.toString( ) ).info( );\n    } catch ( Exception e ) {\n      db.rollback( );\n      EventRecord.here( ServiceConfigurationProvider.class, EventClass.COMPONENT, EventType.COMPONENT_DEREGISTERED, t.toString( ) ).error( );\n      LOG.error( e, e );\n      throw new ServiceRegistrationException( e );\n    }\n    return t;\n  }","commit_id":"a99b87c7df00484dfdec66b1c0e5e0fe90fffc2e","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"private void init( ) throws Exception {\n    if( this.componentId.hasCredentials( ) ) {\n      if ( EucaKeyStore.getInstance( ).containsEntry( this.name ) ) {\n        try {\n          SystemCredentialProvider.certs.put( this.name, EucaKeyStore.getInstance( ).getCertificate( this.name ) );\n          SystemCredentialProvider.keypairs.put( this.name, EucaKeyStore.getInstance( ).getKeyPair( this.name, this.name ) );\n          EventRecord.here( SystemCredentialProvider.class, EventType.COMPONENT_INFO, \"initialized\", this.name, this.getCertificate( ).getSubjectDN( ).toString( ) );\n          return;\n        } catch ( Exception e ) {\n          SystemCredentialProvider.certs.remove( this );\n          SystemCredentialProvider.keypairs.remove( this );\n          LOG.fatal( \"Failed to read keys from the keystore.  Please repair the keystore by hand.\" );\n          LOG.fatal( e, e );\n          throw e;\n        }\n      } else if ( Components.lookup( Eucalyptus.class ).isAvailableLocally( ) ) {\n        this.createSystemCredentialProviderKey( this.name );\n        return;\n      }\n      throw new RuntimeException( \"Failed to load credentials because of an unknown error.\" );\n    }\n  }","id":2157,"modified_method":"private void init( ) throws Exception {\n    if( this.componentId.hasCredentials( ) ) {\n      if ( EucaKeyStore.getInstance( ).containsEntry( this.name ) ) {\n        try {\n          EventRecord.here( SystemCredentialProvider.class, EventType.COMPONENT_INFO, \"initializing\", this.name, this.getCertificate( ).getSubjectDN( ).toString( ) ).info( );\n          SystemCredentialProvider.certs.put( this.name, EucaKeyStore.getInstance( ).getCertificate( this.name ) );\n          SystemCredentialProvider.keypairs.put( this.name, EucaKeyStore.getInstance( ).getKeyPair( this.name, this.name ) );\n          EventRecord.here( SystemCredentialProvider.class, EventType.COMPONENT_INFO, \"initialized\", this.name, this.getCertificate( ).getSubjectDN( ).toString( ) ).info( );\n          return;\n        } catch ( Exception e ) {\n          SystemCredentialProvider.certs.remove( this );\n          SystemCredentialProvider.keypairs.remove( this );\n          LOG.fatal( \"Failed to read keys from the keystore.  Please repair the keystore by hand.\" );\n          LOG.fatal( e, e );\n          throw e;\n        }\n      } else if ( Components.lookup( Eucalyptus.class ).isAvailableLocally( ) ) {\n        this.createSystemCredentialProviderKey( this.name );\n        return;\n      }\n      throw new RuntimeException( \"Failed to load credentials because of an unknown error.\" );\n    }\n  }","commit_id":"74dae7cfb12e9ae4521725af9e9a3ab3dcf7e39b","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"/**\n     * Write all DOAP releases.\n     *\n     * @param writer not null\n     * @throws MojoExecutionException if any\n     * @see <a href=\"http://usefulinc.com/ns/doap#release\">http://usefulinc.com/ns/doap#release<\/a>\n     * @see <a href=\"http://usefulinc.com/ns/doap#Version\">http://usefulinc.com/ns/doap#Version<\/a>\n     */\n    private void writeReleases( XMLWriter writer )\n        throws MojoExecutionException\n    {\n        Artifact artifact = artifactFactory.createArtifact( project.getGroupId(), project.getArtifactId(), project\n            .getVersion(), null, project.getPackaging() );\n        RepositoryMetadata metadata = new ArtifactRepositoryMetadata( artifact );\n        try\n        {\n            repositoryMetadataManager.resolve( metadata, remoteRepositories, localRepository );\n        }\n        catch ( RepositoryMetadataResolutionException e )\n        {\n            throw new MojoExecutionException( metadata + \" could not be retrieved from repositories due to an error: \"\n                + e.getMessage(), e );\n        }\n\n        if ( metadata.getMetadata().getVersioning() == null )\n        {\n            getLog().info( \"No versioning was found - ignored writing <release/> tag.\" );\n            return;\n        }\n\n        List versions = metadata.getMetadata().getVersioning().getVersions();\n        // Recent releases in first\n        Collections.reverse( versions );\n        boolean addComment = false;\n        for ( Iterator it = versions.iterator(); it.hasNext(); )\n        {\n            String version = (String) it.next();\n\n            // we want only release\n            if ( StringUtils.isEmpty( metadata.getMetadata().getVersioning().getRelease() ) )\n            {\n                continue;\n            }\n\n            // we don't write the latest\n            if ( version.equals( metadata.getMetadata().getVersioning().getLatest() ) )\n            {\n                continue;\n            }\n\n            if ( !addComment )\n            {\n                XmlWriterUtil.writeLineBreak( writer );\n                XmlWriterUtil.writeCommentText( writer, \"Project releases.\", 2 );\n                addComment = true;\n            }\n\n            writer.startElement( \"release\" );\n            writer.startElement( \"Version\" );\n\n            writer.startElement( \"name\" );\n            if ( version.equals( metadata.getMetadata().getVersioning().getRelease() ))\n            {\n                writer.writeText( \"Latest stable release\" );\n            }\n            else\n            {\n                writer.writeText( project.getName() + \" - \" + version );\n            }\n            writer.endElement(); // name\n\n            writer.startElement( \"revision\" );\n            writer.writeText( version );\n            writer.endElement(); // revision\n\n            // list all file release from all remote repos\n            for ( Iterator it2 = remoteRepositories.iterator(); it2.hasNext(); )\n            {\n                ArtifactRepository repo = (ArtifactRepository) it2.next();\n\n                Artifact artifactRelease = artifactFactory.createArtifact( project.getGroupId(), project\n                    .getArtifactId(), version, null, project.getPackaging() );\n\n                if ( artifactRelease == null )\n                {\n                    continue;\n                }\n\n                String fileRelease = repo.getUrl() + \"/\" + repo.pathOf( artifactRelease );\n                // try to ping the url\n                try\n                {\n                    URL urlRelease = new URL( fileRelease );\n                    urlRelease.openStream();\n                }\n                catch ( MalformedURLException e )\n                {\n                    getLog().debug( e.getMessage(), e );\n                    continue;\n                }\n                catch ( IOException e )\n                {\n                    // Not found, ignored\n                    getLog().debug( e.getMessage(), e );\n                    continue;\n                }\n\n                writer.startElement( \"file-release\" );\n                writer.writeText( fileRelease );\n                writer.endElement(); // file-release\n            }\n\n            // TODO: how to handle release date?\n\n            writer.endElement(); // Version\n            writer.endElement(); // release\n        }\n    }","id":2158,"modified_method":"/**\n     * Write all DOAP releases.\n     *\n     * @param writer not null\n     * @throws MojoExecutionException if any\n     * @see <a href=\"http://usefulinc.com/ns/doap#release\">http://usefulinc.com/ns/doap#release<\/a>\n     * @see <a href=\"http://usefulinc.com/ns/doap#Version\">http://usefulinc.com/ns/doap#Version<\/a>\n     */\n    private void writeReleases( XMLWriter writer )\n        throws MojoExecutionException\n    {\n        Artifact artifact = artifactFactory.createArtifact( project.getGroupId(), project.getArtifactId(), project\n            .getVersion(), null, project.getPackaging() );\n        RepositoryMetadata metadata = new ArtifactRepositoryMetadata( artifact );\n\n        for ( Iterator it = remoteRepositories.iterator(); it.hasNext(); )\n        {\n            ArtifactRepository repo = (ArtifactRepository) it.next();\n\n            if ( repo.isBlacklisted() )\n            {\n                continue;\n            }\n            if ( repo.getSnapshots().isEnabled() )\n            {\n                continue;\n            }\n            if ( repo.getReleases().isEnabled() )\n            {\n                try\n                {\n                    repositoryMetadataManager.resolveAlways( metadata, localRepository, repo );\n                    break;\n                }\n                catch ( RepositoryMetadataResolutionException e )\n                {\n                    throw new MojoExecutionException( metadata\n                        + \" could not be retrieved from repositories due to an error: \" + e.getMessage(), e );\n                }\n            }\n        }\n\n        if ( metadata.getMetadata().getVersioning() == null )\n        {\n            getLog().info( \"No versioning was found - ignored writing <release/> tag.\" );\n            return;\n        }\n\n        List versions = metadata.getMetadata().getVersioning().getVersions();\n\n        // Recent releases in first\n        Collections.reverse( versions );\n        boolean addComment = false;\n        int i = 0;\n        for ( Iterator it = versions.iterator(); it.hasNext(); )\n        {\n            String version = (String) it.next();\n\n            if ( !addComment )\n            {\n                XmlWriterUtil.writeLineBreak( writer );\n                XmlWriterUtil.writeCommentText( writer, \"Project releases.\", 2 );\n                addComment = true;\n            }\n\n            writer.startElement( \"release\" );\n            writer.startElement( \"Version\" );\n\n            writer.startElement( \"name\" );\n            if ( version.equals( metadata.getMetadata().getVersioning().getRelease() ) )\n            {\n                writer.writeText( \"Latest stable release\" );\n            }\n            else\n            {\n                writer.writeText( project.getName() + \" - \" + version );\n            }\n            writer.endElement(); // name\n\n            writer.startElement( \"revision\" );\n            writer.writeText( version );\n            writer.endElement(); // revision\n\n            // list all file release from all remote repos\n            for ( Iterator it2 = remoteRepositories.iterator(); it2.hasNext(); )\n            {\n                ArtifactRepository repo = (ArtifactRepository) it2.next();\n\n                Artifact artifactRelease = artifactFactory.createArtifact( project.getGroupId(), project\n                    .getArtifactId(), version, null, project.getPackaging() );\n\n                if ( artifactRelease == null )\n                {\n                    continue;\n                }\n\n                String fileRelease = repo.getUrl() + \"/\" + repo.pathOf( artifactRelease );\n                // try to ping the url\n                try\n                {\n                    URL urlRelease = new URL( fileRelease );\n                    urlRelease.openStream();\n                }\n                catch ( MalformedURLException e )\n                {\n                    getLog().debug( e.getMessage(), e );\n                    continue;\n                }\n                catch ( IOException e )\n                {\n                    // Not found, ignored\n                    getLog().debug( e.getMessage(), e );\n                    continue;\n                }\n\n                writer.startElement( \"file-release\" );\n                writer.writeText( fileRelease );\n                writer.endElement(); // file-release\n\n                Date releaseDate = null;\n                try\n                {\n                    releaseDate =\n                        REPOSITORY_DATE_FORMAT.parse( metadata.getMetadata().getVersioning().getLastUpdated() );\n                }\n                catch ( ParseException e )\n                {\n                    getLog().error(\n                                    \"Unable to parse date '\"\n                                        + metadata.getMetadata().getVersioning().getLastUpdated() + \"'\" );\n                    continue;\n                }\n\n                // See MDOAP-11\n                if ( i == 0 )\n                {\n                    writer.startElement( \"created\" );\n                    writer.writeText( DOAP_DATE_FORMAT.format( releaseDate ) );\n                    writer.endElement(); // created\n                }\n            }\n\n            writer.endElement(); // Version\n            writer.endElement(); // release\n\n            i++;\n        }\n    }","commit_id":"b0fb7b6c239cba642c2190c58eac894de375232b","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Compose a URL from two parts: a base URL and a file path. This method\n     * makes sure that there will not be two slash '/' characters after each\n     * other.\n     *\n     * @param base The base URL\n     * @param path The file\n     */\n    private static String composeUrl( String base, String path )\n    {\n        if ( base.endsWith( \"/\" ) && path.startsWith( \"/\" ) )\n        {\n            return base + path.substring( 1 );\n        }\n\n        return base + path;\n    }","id":2159,"modified_method":"/**\n     * Compose a URL from two parts: a base URL and a file path. This method\n     * makes sure that there will not be two slash '/' characters after each\n     * other.\n     *\n     * @param base The base URL\n     * @param path The file\n     * @return the url with base and path\n     */\n    private static String composeUrl( String base, String path )\n    {\n        if ( base.endsWith( \"/\" ) && path.startsWith( \"/\" ) )\n        {\n            return base + path.substring( 1 );\n        }\n\n        return base + path;\n    }","commit_id":"b0fb7b6c239cba642c2190c58eac894de375232b","url":"https://github.com/apache/maven-plugins"},{"original_method":"public void reset() {\n\t\tmContext.reset();\n\t}","id":2160,"modified_method":"public void reset() {\n        mContext.reset();\n        mStaticVariables.clear();\n    }","commit_id":"85e25b50990be727598552f799b7ce50d6ea7a15","url":"https://github.com/eXist-db/exist"},{"original_method":"/**\n     * Creates an XQuery to call an XQWS function from a SOAP Request\n     * \n     * @param broker\tThe Database Broker to use\n     * @param xqwsFileUri\tThe XmldbURI of the XQWS file\n     * @param xqwsNamespace\tThe namespace of the xqws\n     * @param xqwsCollectionUri\tThe XmldbUri of the collection where the XQWS resides\n     * @param xqwsSOAPFunction\tThe Node from the SOAP request for the Function call from the Http Request\n     * @param xqwsDescription\tThe internal description of the XQWS\n     * @param request\tThe Http Servlet Request\n     * @param response The Http Servlet Response\n     * \n     * @return The compiled XQuery\n     */\n    private CompiledXQuery XQueryExecuteXQWSFunction(DBBroker broker, Node xqwsSOAPFunction, XQWSDescription xqwsDescription, HttpServletRequest request, HttpServletResponse response) throws XPathException\n    {\t\n    \tString query = \"xquery version \\\"1.0\\\";\" + SEPERATOR;\n        query += SEPERATOR;\n        query += \"import module namespace \" + xqwsDescription.getNamespace().getLocalName() + \"=\\\"\" + xqwsDescription.getNamespace().getNamespaceURI() + \"\\\" at \\\"\" + xqwsDescription.getFileURI().toString() + \"\\\";\" + SEPERATOR;\n        query += SEPERATOR;\n        \n        //add the function call to the xquery\n        String functionName = xqwsSOAPFunction.getNodeName();\n        query += xqwsDescription.getNamespace().getLocalName() + \":\" + functionName + \"(\";\n        \n        //add the arguments for the function call if any\n        NodeList xqwsSOAPFunctionParams = xqwsSOAPFunction.getChildNodes();\n        Node nInternalFunction = xqwsDescription.getFunction(functionName);\n        NodeList nlInternalFunctionParams = xqwsDescription.getFunctionParameters(nInternalFunction);\n        \n        int j = 0;\n        for(int i = 0; i < xqwsSOAPFunctionParams.getLength(); i++)\n        {\n        \tNode nSOAPFunctionParam = xqwsSOAPFunctionParams.item(i);\n        \tif(nSOAPFunctionParam.getNodeType() == Node.ELEMENT_NODE)\n        \t{\n\t        \tquery += writeXQueryFunctionParameter(xqwsDescription.getFunctionParameterType(nlInternalFunctionParams.item(j)), xqwsDescription.getFunctionParameterCardinality(nlInternalFunctionParams.item(j)), nSOAPFunctionParam.getFirstChild().getNodeValue());\n\t        \t\n\t        \t//add a comma if this isnt the last parameter\n\t        \tif(j != nlInternalFunctionParams.getLength()-1)\n\t        \t{\n\t        \t\tquery += \",\";\n\t        \t}\n\t        \tj++;\n        \t}\n        }\n        \n        query += \")\";\n        \n        //compile the query\n        return compileXQuery(broker, new StringSource(query), new XmldbURI[] { xqwsDescription.getCollectionURI() }, xqwsDescription.getCollectionURI(), request, response);\n    }","id":2161,"modified_method":"/**\n     * Creates an XQuery to call an XQWS function from a SOAP Request\n     * \n     * @param broker\tThe Database Broker to use\n     * @param xqwsFileUri\tThe XmldbURI of the XQWS file\n     * @param xqwsNamespace\tThe namespace of the xqws\n     * @param xqwsCollectionUri\tThe XmldbUri of the collection where the XQWS resides\n     * @param xqwsSOAPFunction\tThe Node from the SOAP request for the Function call from the Http Request\n     * @param xqwsDescription\tThe internal description of the XQWS\n     * @param request\tThe Http Servlet Request\n     * @param response The Http Servlet Response\n     * \n     * @return The compiled XQuery\n     */\n    private CompiledXQuery XQueryExecuteXQWSFunction(DBBroker broker, Node xqwsSOAPFunction, XQWSDescription xqwsDescription, HttpServletRequest request, HttpServletResponse response) throws XPathException\n    {\t\n    \tStringBuffer query = new StringBuffer();\n    \tquery.append(\"xquery version \\\"1.0\\\";\" + SEPERATOR);\n    \tquery.append(SEPERATOR);\n        query.append(\"import module namespace \" + xqwsDescription.getNamespace().getLocalName() + \"=\\\"\" + xqwsDescription.getNamespace().getNamespaceURI() + \"\\\" at \\\"\" + xqwsDescription.getFileURI().toString() + \"\\\";\" + SEPERATOR);\n        query.append(SEPERATOR);\n        \n        //add the function call to the xquery\n        String functionName = xqwsSOAPFunction.getNodeName();\n        query.append(xqwsDescription.getNamespace().getLocalName() + \":\" + functionName + \"(\");\n        \n        //add the arguments for the function call if any\n        NodeList xqwsSOAPFunctionParams = xqwsSOAPFunction.getChildNodes();\n        Node nInternalFunction = xqwsDescription.getFunction(functionName);\n        NodeList nlInternalFunctionParams = xqwsDescription.getFunctionParameters(nInternalFunction);\n        \n        int j = 0;\n        for(int i = 0; i < xqwsSOAPFunctionParams.getLength(); i++)\n        {\n        \tNode nSOAPFunctionParam = xqwsSOAPFunctionParams.item(i);\n        \tif(nSOAPFunctionParam.getNodeType() == Node.ELEMENT_NODE)\n        \t{\n\t        \tquery.append(writeXQueryFunctionParameter(xqwsDescription.getFunctionParameterType(nlInternalFunctionParams.item(j)), xqwsDescription.getFunctionParameterCardinality(nlInternalFunctionParams.item(j)), nSOAPFunctionParam));\n        \t\tquery.append(\",\"); //add function seperator\n\t        \t\n\t        \tj++;\n        \t}\n        }\n        \n        //remove last superflurous seperator\n\t\tif(query.charAt(query.length()-1) == ',')\n\t\t{\n\t\t\tquery.deleteCharAt(query.length()-1);\n\t\t}\n        \n        query.append(\")\");\n        \n        //compile the query\n        return compileXQuery(broker, new StringSource(query.toString()), new XmldbURI[] { xqwsDescription.getCollectionURI() }, xqwsDescription.getCollectionURI(), request, response);\n    }","commit_id":"85e25b50990be727598552f799b7ce50d6ea7a15","url":"https://github.com/eXist-db/exist"},{"original_method":"/**\n    \t * Describes an XQWS function by building an XML node representation of the function signature\n    \t * \n    \t * \t<function>\n    \t * \t\t<name/>\n    \t * \t\t<description/>\n    \t * \t\t<parameters>\n    \t * \t\t\t<parameter>\n    \t * \t\t\t\t<name/>\n    \t * \t\t\t\t<type/>\n    \t * \t\t\t\t<cardinality/>\n    \t * \t\t\t<\/parameter>\n    \t * \t\t<\/parameters>\n    \t * \t\t<return>\n    \t * \t\t\t<type/>\n    \t * \t\t\t<cardinality/>\n    \t * \t\t\t<result/>\t\t//Only displayed if this is after the function has been executed\n    \t * \t\t<\/return>\n    \t * \t<\/function>\n    \t * \n    \t * @param signature\tThe function signature to describe\n    \t * @param builderFunction\tThe MemTreeBuilder to write the description to\n    \t * @param functionResult\tA Sequence containing the function results or null if the function has not yet been executed\n    \t */\n    \tprivate void describeWebServiceFunction(FunctionSignature signature, MemTreeBuilder builderFunction, Sequence functionResult) throws XPathException\n    \t{\n    \t\t//Generate an XML snippet for each function\n        \tbuilderFunction.startElement(new QName(\"function\", null, null), null);\n        \tbuilderFunction.startElement(new QName(\"name\", null, null), null);\n        \tbuilderFunction.characters(signature.getName().getLocalName());\n        \tbuilderFunction.endElement();\n        \tif(signature.getDescription() != null)\n        \t{\n        \t\tbuilderFunction.startElement(new QName(\"description\", null, null), null);\n        \t\tbuilderFunction.characters(signature.getDescription());\n        \t\tbuilderFunction.endElement();\n        \t}\n        \tSequenceType[] xqwsArguments = signature.getArgumentTypes();\n        \tbuilderFunction.startElement(new QName(\"parameters\", null, null), null);\n        \tfor(int a = 0; a < xqwsArguments.length; a++)\n        \t{\n        \t\tbuilderFunction.startElement(new QName(\"parameter\",null, null), null);\n        \t\tbuilderFunction.startElement(new QName(\"name\",null, null), null);\n        \t\t//builderFunction.characters(xqwsArguments[a].getNodeName().getLocalName()); //TODO: how to get parameter name?\n        \t\tbuilderFunction.endElement();\n        \t\tbuilderFunction.startElement(new QName(\"type\",null, null), null);\n        \t\tbuilderFunction.characters(Type.getTypeName(xqwsArguments[a].getPrimaryType()));\n        \t\tbuilderFunction.endElement();\n        \t\tbuilderFunction.startElement(new QName(\"cardinality\",null, null), null);\n        \t\tbuilderFunction.characters(Integer.toString(xqwsArguments[a].getCardinality()));\n        \t\tbuilderFunction.endElement();\n        \t\tbuilderFunction.endElement();\n        \t}\n        \tbuilderFunction.endElement();\n        \tbuilderFunction.startElement(new QName(\"return\",null, null), null);\n        \tbuilderFunction.startElement(new QName(\"type\",null, null), null);\n        \tbuilderFunction.characters(Type.getTypeName(signature.getReturnType().getPrimaryType()));\n        \tbuilderFunction.endElement();\n        \tbuilderFunction.startElement(new QName(\"cardinality\",null, null), null);\n        \tbuilderFunction.characters(Integer.toString(signature.getReturnType().getCardinality()));\n        \tbuilderFunction.endElement();\n        \tif(functionResult != null)\n        \t{\n        \t\tbuilderFunction.startElement(new QName(\"result\", null, null), null);\n\n        \t\t//TODO: this will work for a single string result, but need to add much more logic for other types and complex cardinalities\n        \t\tbuilderFunction.characters(functionResult.itemAt(0).getStringValue());\n        \t\t\n        \t\tbuilderFunction.endElement();\n        \t}\n        \tbuilderFunction.endElement();\n        \tbuilderFunction.endElement();\n    \t}","id":2162,"modified_method":"/**\n    \t * Describes an XQWS function by building an XML node representation of the function signature\n    \t * \n    \t * \t<function>\n    \t * \t\t<name/>\n    \t * \t\t<description/>\n    \t * \t\t<parameters>\n    \t * \t\t\t<parameter>\t{ unbounded }\n    \t * \t\t\t\t<name/>\n    \t * \t\t\t\t<type/>\n    \t * \t\t\t\t<cardinality/>\n    \t * \t\t\t<\/parameter>\n    \t * \t\t<\/parameters>\n    \t * \t\t<return>\n    \t * \t\t\t<type/>\n    \t * \t\t\t<cardinality/>\n    \t * \t\t\t<result>\t\t{ Only displayed if this is after the function has been executed }\n    \t * \t\t\t\teither {\n    \t * \t\t\t\t\t<value/> or\n    \t * \t\t\t\t\t<sequence>\n    \t * \t\t\t\t\t\t<value/> { unbounded }\n    \t * \t\t\t\t\t<\/sequence>\n    \t * \t\t\t\t}\n    \t * \t\t\t<\/result>\n    \t * \t\t<\/return>\n    \t * \t<\/function>\n    \t * \n    \t * @param signature\tThe function signature to describe\n    \t * @param builderFunction\tThe MemTreeBuilder to write the description to\n    \t * @param functionResult\tA Sequence containing the function results or null if the function has not yet been executed\n    \t */\n    \tprivate void describeWebServiceFunction(FunctionSignature signature, MemTreeBuilder builderFunction, Sequence functionResult) throws XPathException\n    \t{\n    \t\t//Generate an XML snippet for each function\n        \tbuilderFunction.startElement(new QName(\"function\", null, null), null);\n        \tbuilderFunction.startElement(new QName(\"name\", null, null), null);\n        \tbuilderFunction.characters(signature.getName().getLocalName());\n        \tbuilderFunction.endElement();\n        \tif(signature.getDescription() != null)\n        \t{\n        \t\tbuilderFunction.startElement(new QName(\"description\", null, null), null);\n        \t\tbuilderFunction.characters(signature.getDescription());\n        \t\tbuilderFunction.endElement();\n        \t}\n        \tSequenceType[] xqwsArguments = signature.getArgumentTypes();\n        \tbuilderFunction.startElement(new QName(\"parameters\", null, null), null);\n        \tfor(int a = 0; a < xqwsArguments.length; a++)\n        \t{\n        \t\tbuilderFunction.startElement(new QName(\"parameter\",null, null), null);\n        \t\tbuilderFunction.startElement(new QName(\"name\",null, null), null);\n        \t\t//builderFunction.characters(xqwsArguments[a].getNodeName().getLocalName()); //TODO: how to get parameter name?\n        \t\tbuilderFunction.endElement();\n        \t\tbuilderFunction.startElement(new QName(\"type\",null, null), null);\n        \t\tbuilderFunction.characters(Type.getTypeName(xqwsArguments[a].getPrimaryType()));\n        \t\tbuilderFunction.endElement();\n        \t\tbuilderFunction.startElement(new QName(\"cardinality\",null, null), null);\n        \t\tbuilderFunction.characters(Integer.toString(xqwsArguments[a].getCardinality()));\n        \t\tbuilderFunction.endElement();\n        \t\tbuilderFunction.endElement();\n        \t}\n        \tbuilderFunction.endElement();\n        \tbuilderFunction.startElement(new QName(\"return\",null, null), null);\n        \tbuilderFunction.startElement(new QName(\"type\",null, null), null);\n        \tbuilderFunction.characters(Type.getTypeName(signature.getReturnType().getPrimaryType()));\n        \tbuilderFunction.endElement();\n        \tint iReturnCardinality = signature.getReturnType().getCardinality();\n        \tbuilderFunction.startElement(new QName(\"cardinality\",null, null), null);\n        \tbuilderFunction.characters(Integer.toString(iReturnCardinality));\n        \tbuilderFunction.endElement();\n        \tif(functionResult != null)\n        \t{\n        \t\tbuilderFunction.startElement(new QName(\"result\", null, null), null);\n        \t\t\n        \t\t//determine result cardinality\n        \t\tif(iReturnCardinality >= Cardinality.MANY)\n        \t\t{\n        \t\t\t//sequence of values\n        \t\t\tbuilderFunction.startElement(new QName(\"sequence\", null, null), null);\n        \t\t\t\n        \t\t\tfor(int i=0; i < functionResult.getLength(); i++)\n        \t\t\t{\n            \t\t\tbuilderFunction.startElement(new QName(\"value\", null, null), null);\n            \t\t\tbuilderFunction.characters(functionResult.itemAt(i).getStringValue());\n            \t\t\tbuilderFunction.endElement();\n        \t\t\t}\n        \t\t\t\n        \t\t\tbuilderFunction.endElement();\n        \t\t}\n        \t\telse\n        \t\t{\n        \t\t\t//atomic value\n        \t\t\tbuilderFunction.startElement(new QName(\"value\", null, null), null);\n        \t\t\tbuilderFunction.characters(functionResult.itemAt(0).getStringValue());\n        \t\t\tbuilderFunction.endElement();\n        \t\t}\n        \t\t\n        \t\tbuilderFunction.endElement();\n        \t}\n        \tbuilderFunction.endElement();\n        \tbuilderFunction.endElement();\n    \t}","commit_id":"85e25b50990be727598552f799b7ce50d6ea7a15","url":"https://github.com/eXist-db/exist"},{"original_method":"/**\n     * Writes a parameter for an XQuery function call\n     * \n     * @param paramType\tThe type of the Parameter (from the internal description of the XQWS)\n     * @param paramCardinality The cardinality of the Parameter (from the internal description of the XQWS)\n     * @param SOAPParam\tThe Node from the SOAP request for the Paremeter of the Function call from the Http Request \n     * \n     * @return A String representation of the parameter, suitable for use in the function call \n     */\n    private String writeXQueryFunctionParameter(String paramType, int paramCardinality, String strSOAPParamValue) throws XPathException\n    {\n    \tString prefix = new String();\n    \tString postfix = new String();\n    \t\n    \t//determine the type of the parameter\n    \tint type = Type.getType(paramType);\n    \t\n    \tswitch(type)\n    \t{\n    \t\tcase Type.BASE64_BINARY:\n    \t\t\tprefix =\"xs:base64Binary(\\\"\";\n    \t\t\tpostfix = \"\\\")\";\n    \t\tbreak;\n    \t\t\n    \t\tcase Type.STRING:\n    \t\t\tprefix = \"\\\"\";\n    \t\t\tpostfix = \"\\\"\";\n    \t\tbreak;\n    \t\t\n    \t\tcase Type.DATE:\n    \t\t\tprefix = \"xs:date(\\\"\";\n    \t\t\tpostfix = \"\\\")\";\n    \t\tbreak;\n    \t\t\n    \t\tcase Type.DATE_TIME:\n    \t\t\tprefix = \"xs:dateTime(\\\"\";\n    \t\t\tpostfix = \"\\\")\";\n    \t\tbreak;\n    \t\t\n    \t\tdefault:\n    \t}\n    \t\n    \treturn prefix +  strSOAPParamValue + postfix;\n    }","id":2163,"modified_method":"/**\n     * Writes a parameter for an XQuery function call\n     * \n     * @param paramType\tThe type of the Parameter (from the internal description of the XQWS)\n     * @param paramCardinality The cardinality of the Parameter (from the internal description of the XQWS)\n     * @param SOAPParam\tThe Node from the SOAP request for the Paremeter of the Function call from the Http Request \n     * \n     * @return A String representation of the parameter, suitable for use in the function call \n     */\n    private String writeXQueryFunctionParameter(String paramType, int paramCardinality, Node nSOAPParam) throws XPathException\n    {\n    \tString prefix = new String();\n    \tString postfix = new String();\n    \t\n    \t//determine the type of the parameter\n    \tint type = Type.getType(paramType);\n    \t\n    \tswitch(type)\n    \t{\n    \t\tcase Type.BASE64_BINARY:\n    \t\t\tprefix =\"xs:base64Binary(\\\"\";\n    \t\t\tpostfix = \"\\\")\";\n    \t\tbreak;\n    \t\t\n    \t\tcase Type.STRING:\n    \t\t\tprefix = \"\\\"\";\n    \t\t\tpostfix = \"\\\"\";\n    \t\tbreak;\n    \t\t\n    \t\tcase Type.DATE:\n    \t\t\tprefix = \"xs:date(\\\"\";\n    \t\t\tpostfix = \"\\\")\";\n    \t\tbreak;\n    \t\t\n    \t\tcase Type.DATE_TIME:\n    \t\t\tprefix = \"xs:dateTime(\\\"\";\n    \t\t\tpostfix = \"\\\")\";\n    \t\tbreak;\n    \t\t\n    \t\tdefault:\n    \t}\n    \n    \t//determine the cardinality of the parameter\n    \tif(paramCardinality >= Cardinality.MANY)\n    \t{\n    \t\t//sequence\n    \t\tStringBuffer param = new StringBuffer();\n    \t\t\n    \t\tparam.append(\"(\");\n    \t\t\n    \t\tNodeList nlParamSequenceItems = nSOAPParam.getChildNodes();\n    \t\tfor(int i=0; i < nlParamSequenceItems.getLength(); i++)\n    \t\t{\n    \t\t\tNode nParamSeqItem = nlParamSequenceItems.item(i);\n    \t\t\tif(nParamSeqItem.getNodeType() == Node.ELEMENT_NODE)\n    \t\t\t{\n    \t\t\t\tparam.append(prefix);\n    \t\t\t\tparam.append(nParamSeqItem.getFirstChild().getNodeValue());\n    \t\t\t\tparam.append(postfix);\n    \t        \t\n\t        \t\tparam.append(\",\");\t//seperator for next item in sequence\n    \t        \t\n    \t\t\t}\n    \t\t}\n    \t\t\n    \t\t//remove last superflurous seperator\n    \t\tif(param.charAt(param.length()-1) == ',')\n    \t\t{\n    \t\t\tparam.deleteCharAt(param.length()-1);\n    \t\t}\n    \t\t\n    \t\tparam.append(\")\");\n    \t\t\n    \t\treturn param.toString();\n    \t}\n    \telse\n    \t{\n    \t\t//atomic value\n    \t\treturn prefix +  nSOAPParam.getFirstChild().getNodeValue() + postfix;\n    \t}\n    }","commit_id":"85e25b50990be727598552f799b7ce50d6ea7a15","url":"https://github.com/eXist-db/exist"},{"original_method":"/**\n    \t * Describes an XQWS by building an XML node representation of the XQWS module\n    \t * \n    \t * <webservice>\n    \t * \t<name/>\n    \t * \t<description/>\n    \t * \t<host/>\n    \t * \t<path/>\n    \t * \t<URL/>\n    \t * \t<functions>\n    \t * \t\t@see org.exist.http.SOAPServer#describeWebServiceFunction(org.exist.xquery.FunctionSignature, org.exist.memtree.MemTreeBuilder)\n    \t * \t<\/functions>\n    \t * <\/webservice>\n    \t *\n    \t * @param modXQWS\tThe XQWS XQuery module\n    \t * @param xqwsFileUri\tThe File URI of the XQWS\n    \t * @param request\tThe Http Servlet request for this webservice\n    \t * @param path\tThe request path\n    \t * @param functionName\tUsed when only a single function should be described, linked to functionResult\n    \t * @param functionResult For writting out the results of a function call, should be used with functionName \n    \t * @return\tAn in-memory document describing the webservice\n    \t */\n    \tprivate org.exist.memtree.DocumentImpl describeWebService(Module modXQWS, XmldbURI xqwsFileUri, HttpServletRequest request, String path, String functionName, Sequence functionResult) throws XPathException\n    \t{\n    \t\tFunctionSignature[] xqwsFunctions = modXQWS.listFunctions();\n            MemTreeBuilder builderWebserviceDoc = new MemTreeBuilder();\n    \t\tbuilderWebserviceDoc.startDocument();\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"webservice\", null, null), null);\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"name\", null, null), null);\n    \t\tbuilderWebserviceDoc.characters(xqwsFileUri.toString().substring(0, xqwsFileUri.toString().indexOf(WEBSERVICE_MODULE_EXTENSION)));\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"description\", null, null), null);\n    \t\tbuilderWebserviceDoc.characters(modXQWS.getDescription());\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"host\", null, null), null);\n    \t\tbuilderWebserviceDoc.characters(request.getServerName() + \":\" + request.getServerPort());\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"path\", null, null), null);\n    \t\tbuilderWebserviceDoc.characters(path);\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"URL\", null, null), null);\n    \t\tbuilderWebserviceDoc.characters(request.getRequestURL());\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"functions\", null, null), null);\n    \t\tfor(int f = 0; f < xqwsFunctions.length; f++)\n            {\n    \t\t\tif(functionName == null)\n    \t\t\t{\n    \t\t\t\t//All Function Descriptions\n    \t\t\t\tdescribeWebServiceFunction(xqwsFunctions[f], builderWebserviceDoc, null);\n    \t\t\t}\n    \t\t\telse\n    \t\t\t{\n    \t\t\t\t//Only a Single Function Description for showing function call results\n    \t\t\t\tif(xqwsFunctions[f].getName().getLocalName().equals(functionName))\n    \t\t\t\t{\n    \t\t\t\t\tdescribeWebServiceFunction(xqwsFunctions[f], builderWebserviceDoc, functionResult);\n    \t\t\t\t\tbreak;\n    \t\t\t\t}\n    \t\t\t}\n            }\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.endDocument();\n    \t\t\n    \t\treturn builderWebserviceDoc.getDocument();\n    \t}","id":2164,"modified_method":"/**\n    \t * Describes an XQWS by building an XML node representation of the XQWS module\n    \t * \n    \t * <webservice>\n    \t * \t<name/>\n    \t * \t<description/>\n    \t * \t<host/>\n    \t * \t<path/>\n    \t * \t<URL/>\n    \t * \t<functions>\n    \t * \t\t<function/> { unbounded } { @see org.exist.http.SOAPServer#describeWebServiceFunction(org.exist.xquery.FunctionSignature, org.exist.memtree.MemTreeBuilder) }\n    \t * \t<\/functions>\n    \t * <\/webservice>\n    \t *\n    \t * @param modXQWS\tThe XQWS XQuery module\n    \t * @param xqwsFileUri\tThe File URI of the XQWS\n    \t * @param request\tThe Http Servlet request for this webservice\n    \t * @param path\tThe request path\n    \t * @param functionName\tUsed when only a single function should be described, linked to functionResult\n    \t * @param functionResult For writting out the results of a function call, should be used with functionName \n    \t * @return\tAn in-memory document describing the webservice\n    \t */\n    \tprivate org.exist.memtree.DocumentImpl describeWebService(Module modXQWS, XmldbURI xqwsFileUri, HttpServletRequest request, String path, String functionName, Sequence functionResult) throws XPathException\n    \t{\n    \t\tFunctionSignature[] xqwsFunctions = modXQWS.listFunctions();\n            MemTreeBuilder builderWebserviceDoc = new MemTreeBuilder();\n    \t\tbuilderWebserviceDoc.startDocument();\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"webservice\", null, null), null);\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"name\", null, null), null);\n    \t\tbuilderWebserviceDoc.characters(xqwsFileUri.toString().substring(0, xqwsFileUri.toString().indexOf(WEBSERVICE_MODULE_EXTENSION)));\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"description\", null, null), null);\n    \t\tbuilderWebserviceDoc.characters(modXQWS.getDescription());\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"host\", null, null), null);\n    \t\tbuilderWebserviceDoc.characters(request.getServerName() + \":\" + request.getServerPort());\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"path\", null, null), null);\n    \t\tbuilderWebserviceDoc.characters(path);\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"URL\", null, null), null);\n    \t\tbuilderWebserviceDoc.characters(request.getRequestURL());\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"functions\", null, null), null);\n    \t\tfor(int f = 0; f < xqwsFunctions.length; f++)\n            {\n    \t\t\tif(functionName == null)\n    \t\t\t{\n    \t\t\t\t//All Function Descriptions\n    \t\t\t\tdescribeWebServiceFunction(xqwsFunctions[f], builderWebserviceDoc, null);\n    \t\t\t}\n    \t\t\telse\n    \t\t\t{\n    \t\t\t\t//Only a Single Function Description for showing function call results\n    \t\t\t\tif(xqwsFunctions[f].getName().getLocalName().equals(functionName))\n    \t\t\t\t{\n    \t\t\t\t\tdescribeWebServiceFunction(xqwsFunctions[f], builderWebserviceDoc, functionResult);\n    \t\t\t\t\tbreak;\n    \t\t\t\t}\n    \t\t\t}\n            }\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.endDocument();\n    \t\t\n    \t\treturn builderWebserviceDoc.getDocument();\n    \t}","commit_id":"85e25b50990be727598552f799b7ce50d6ea7a15","url":"https://github.com/eXist-db/exist"},{"original_method":"public void print( XMLWriter writer )\n    {\n        writer.startElement( \"link\" );\n\n        writer.startElement( \"name\" );\n        writer.writeText( name );\n        writer.endElement(); // name\n\n        writer.startElement( \"type\" );\n        writer.writeText( type );\n        writer.endElement(); // type\n\n        writer.startElement( \"location\" );\n        writer.writeText( location );\n        writer.endElement(); // location\n        writer.endElement();// link\n    }","id":2165,"modified_method":"public void print( XMLWriter writer )\n    {\n        writer.startElement( \"link\" );\n\n        writer.startElement( \"name\" );\n        writer.writeText( name );\n        writer.endElement(); // name\n\n        writer.startElement( \"type\" );\n        writer.writeText( type );\n        writer.endElement(); // type\n\n        if ( location != null )\n        {\n            writer.startElement( \"location\" );\n            writer.writeText( location );\n            writer.endElement(); // location\n        }\n        else if ( locationURI != null )\n        {\n            writer.startElement( \"locationURI\" );\n            writer.writeText( locationURI );\n            writer.endElement(); // locationURI\n        }\n        writer.endElement();// link\n    }","commit_id":"a680fde2ff92c613a93fb0353cf642357cd77eb5","url":"https://github.com/apache/maven-plugins"},{"original_method":"public boolean equals( Object obj )\n    {\n        if ( obj instanceof LinkedResource )\n        {\n            LinkedResource b = (LinkedResource) obj;\n\n            return name.equals( b.name ) && ( type == null ? b.type == null : type.equals( b.type ) )\n                && ( location == null ? b.location == null : location.equals( b.location ) );\n        }\n        else\n        {\n            return false;\n        }\n    }","id":2166,"modified_method":"public boolean equals( Object obj )\n    {\n        if ( obj instanceof LinkedResource )\n        {\n            LinkedResource b = (LinkedResource) obj;\n\n            return name.equals( b.name ) && ( type == null ? b.type == null : type.equals( b.type ) )\n                && ( location == null ? b.location == null : location.equals( b.location ) )\n                && ( locationURI == null ? b.locationURI == null : locationURI.equals( b.locationURI ) );\n        }\n        else\n        {\n            return false;\n        }\n    }","commit_id":"a680fde2ff92c613a93fb0353cf642357cd77eb5","url":"https://github.com/apache/maven-plugins"},{"original_method":"public int hashCode()\n    {\n        return name.hashCode() + ( type == null ? 0 : 13 * type.hashCode() )\n            + ( location == null ? 0 : 17 * location.hashCode() );\n    }","id":2167,"modified_method":"public int hashCode()\n    {\n        return name.hashCode() + ( type == null ? 0 : 13 * type.hashCode() )\n            + ( location == null ? 0 : 17 * location.hashCode() )\n            + ( locationURI == null ? 0 : 19 * locationURI.hashCode() );\n    }","commit_id":"a680fde2ff92c613a93fb0353cf642357cd77eb5","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Creates a LinkedResource from a DOM subtree\n     * <p>\n     * The subtree must represent a &lt;linkedResources&gt; section from an Eclipse .project file\n     * \n     * @param node DOM node\n     */\n    public LinkedResource( Xpp3Dom node )\n    {\n        Xpp3Dom nameNode = node.getChild( \"name\" );\n\n        if ( nameNode == null )\n        {\n            throw new IllegalArgumentException( \"No name node.\" );\n        }\n\n        name = nameNode.getValue();\n\n        Xpp3Dom typeNode = node.getChild( \"type\" );\n\n        if ( typeNode == null )\n        {\n            throw new IllegalArgumentException( \"No type node.\" );\n        }\n\n        type = typeNode.getValue();\n\n        Xpp3Dom locationNode = node.getChild( \"location\" );\n\n        if ( locationNode == null )\n        {\n            throw new IllegalArgumentException( \"No location node.\" );\n        }\n\n        location = locationNode.getValue();\n    }","id":2168,"modified_method":"/**\n     * Creates a LinkedResource from a DOM subtree\n     * <p>\n     * The subtree must represent a &lt;linkedResources&gt; section from an Eclipse .project file\n     * \n     * @param node DOM node\n     */\n    public LinkedResource( Xpp3Dom node )\n    {\n        Xpp3Dom nameNode = node.getChild( \"name\" );\n\n        if ( nameNode == null )\n        {\n            throw new IllegalArgumentException( \"No name node.\" );\n        }\n\n        name = nameNode.getValue();\n\n        Xpp3Dom typeNode = node.getChild( \"type\" );\n\n        if ( typeNode == null )\n        {\n            throw new IllegalArgumentException( \"No type node.\" );\n        }\n\n        type = typeNode.getValue();\n\n        Xpp3Dom locationNode = node.getChild( \"location\" );\n        Xpp3Dom locationURINode = node.getChild( \"locationURI\" );\n\n        if ( locationNode == null && locationURINode == null )\n        {\n            throw new IllegalArgumentException( \"No location or locationURI node.\" );\n        }\n        else if ( locationNode != null && locationURINode != null )\n        {\n            throw new IllegalArgumentException( \"Both location and locationURI nodes are set.\" );\n        }\n\n        location = locationNode.getValue();\n    }","commit_id":"a680fde2ff92c613a93fb0353cf642357cd77eb5","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n    \t * Describes an XQWS by building an XML node representation of the XQWS module\n    \t * \n    \t * <webservice>\n    \t * \t<name/>\n    \t * \t<description/>\n    \t * \t<host/>\n    \t * \t<path/>\n    \t * \t<URL/>\n    \t * \t<functions>\n    \t * \t\t@see org.exist.http.SOAPServer#describeWebServiceFunction(org.exist.xquery.FunctionSignature, org.exist.memtree.MemTreeBuilder)\n    \t * \t<\/functions>\n    \t * <\/webservice>\n    \t *\n    \t * @param modXQWS\tThe XQWS XQuery module\n    \t * @param xqwsFileUri\tThe File URI of the XQWS\n    \t * @param request\tThe Http Servlet request for this webservice\n    \t * @param path\tThe request path\n    \t * @param functionName\tUsed when only a single function should be described, linked to functionResult\n    \t * @param functionResult For writting out the results of a function call, should be used with functionName \n    \t * @return\tAn in-memory document describing the webservice\n    \t */\n    \tprivate org.exist.memtree.DocumentImpl describeWebService(Module modXQWS, XmldbURI xqwsFileUri, HttpServletRequest request, String path, String functionName, Sequence functionResult) throws XPathException\n    \t{\n    \t\tFunctionSignature[] xqwsFunctions = modXQWS.listFunctions();\n            MemTreeBuilder builderWebserviceDoc = new MemTreeBuilder();\n    \t\tbuilderWebserviceDoc.startDocument();\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"webservice\", null, null), null);\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"name\", null, null), null);\n    \t\tbuilderWebserviceDoc.characters(xqwsFileUri.toString().substring(0, xqwsFileUri.toString().indexOf(WEBSERVICE_MODULE_EXTENSION)));\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"description\", null, null), null);\n    \t\tbuilderWebserviceDoc.characters(modXQWS.getDescription());\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"host\", null, null), null);\n    \t\tbuilderWebserviceDoc.characters(request.getServerName() + \":\" + request.getServerPort());\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"path\", null, null), null);\n    \t\tbuilderWebserviceDoc.characters(path);\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"URL\", null, null), null);\n    \t\tbuilderWebserviceDoc.characters(request.getRequestURL());\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"functions\", null, null), null);\n    \t\tfor(int f = 0; f < xqwsFunctions.length; f++)\n            {\n    \t\t\tif(functionName == null)\n    \t\t\t{\n    \t\t\t\t//All Function Descriptions\n    \t\t\t\tdescribeWebServiceFunction(xqwsFunctions[f], builderWebserviceDoc, null);\n    \t\t\t}\n    \t\t\telse\n    \t\t\t{\n    \t\t\t\t//Only a Single Function Description for showing function call results\n    \t\t\t\tif(xqwsFunctions[f].getName().getLocalName().equals(functionName))\n    \t\t\t\t{\n    \t\t\t\t\tdescribeWebServiceFunction(xqwsFunctions[f], builderWebserviceDoc, functionResult);\n    \t\t\t\t\tbreak;\n    \t\t\t\t}\n    \t\t\t}\n            }\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.endDocument();\n    \t\t\n    \t\treturn builderWebserviceDoc.getDocument();\n    \t}","id":2169,"modified_method":"/**\n    \t * Describes an XQWS by building an XML node representation of the XQWS module\n    \t * \n    \t * <webservice>\n    \t * \t<name/>\n    \t * \t<description/>\n    \t * \t<host/>\n    \t * \t<path/>\n    \t * \t<URL/>\n    \t * \t<functions>\n    \t * \t\t<function/> { unbounded } { @see org.exist.http.SOAPServer#describeWebServiceFunction(org.exist.xquery.FunctionSignature, org.exist.memtree.MemTreeBuilder) }\n    \t * \t<\/functions>\n    \t * <\/webservice>\n    \t *\n    \t * @param modXQWS\tThe XQWS XQuery module\n    \t * @param xqwsFileUri\tThe File URI of the XQWS\n    \t * @param request\tThe Http Servlet request for this webservice\n    \t * @param path\tThe request path\n    \t * @param functionName\tUsed when only a single function should be described, linked to functionResult\n    \t * @param functionResult For writting out the results of a function call, should be used with functionName \n    \t * @return\tAn in-memory document describing the webservice\n    \t */\n    \tprivate org.exist.memtree.DocumentImpl describeWebService(Module modXQWS, XmldbURI xqwsFileUri, HttpServletRequest request, String path, String functionName, Sequence functionResult) throws XPathException\n    \t{\n    \t\tFunctionSignature[] xqwsFunctions = modXQWS.listFunctions();\n            MemTreeBuilder builderWebserviceDoc = new MemTreeBuilder();\n    \t\tbuilderWebserviceDoc.startDocument();\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"webservice\", null, null), null);\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"name\", null, null), null);\n    \t\tbuilderWebserviceDoc.characters(xqwsFileUri.toString().substring(0, xqwsFileUri.toString().indexOf(WEBSERVICE_MODULE_EXTENSION)));\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"description\", null, null), null);\n    \t\tbuilderWebserviceDoc.characters(modXQWS.getDescription());\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"host\", null, null), null);\n    \t\tbuilderWebserviceDoc.characters(request.getServerName() + \":\" + request.getServerPort());\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"path\", null, null), null);\n    \t\tbuilderWebserviceDoc.characters(path);\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"URL\", null, null), null);\n    \t\tbuilderWebserviceDoc.characters(request.getRequestURL());\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.startElement(new QName(\"functions\", null, null), null);\n    \t\tfor(int f = 0; f < xqwsFunctions.length; f++)\n            {\n    \t\t\tif(functionName == null)\n    \t\t\t{\n    \t\t\t\t//All Function Descriptions\n    \t\t\t\tdescribeWebServiceFunction(xqwsFunctions[f], builderWebserviceDoc, null);\n    \t\t\t}\n    \t\t\telse\n    \t\t\t{\n    \t\t\t\t//Only a Single Function Description for showing function call results\n    \t\t\t\tif(xqwsFunctions[f].getName().getLocalName().equals(functionName))\n    \t\t\t\t{\n    \t\t\t\t\tdescribeWebServiceFunction(xqwsFunctions[f], builderWebserviceDoc, functionResult);\n    \t\t\t\t\tbreak;\n    \t\t\t\t}\n    \t\t\t}\n            }\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.endElement();\n    \t\tbuilderWebserviceDoc.endDocument();\n    \t\t\n    \t\treturn builderWebserviceDoc.getDocument();\n    \t}","commit_id":"f42834cba159a41a04f3bb10d6248aa5d22925d7","url":"https://github.com/eXist-db/exist"},{"original_method":"/**\n     * Writes a parameter for an XQuery function call\n     * \n     * @param paramType\tThe type of the Parameter (from the internal description of the XQWS)\n     * @param paramCardinality The cardinality of the Parameter (from the internal description of the XQWS)\n     * @param SOAPParam\tThe Node from the SOAP request for the Paremeter of the Function call from the Http Request \n     * \n     * @return A String representation of the parameter, suitable for use in the function call \n     */\n    private String writeXQueryFunctionParameter(String paramType, int paramCardinality, String strSOAPParamValue) throws XPathException\n    {\n    \tString prefix = new String();\n    \tString postfix = new String();\n    \t\n    \t//determine the type of the parameter\n    \tint type = Type.getType(paramType);\n    \t\n    \tswitch(type)\n    \t{\n    \t\tcase Type.BASE64_BINARY:\n    \t\t\tprefix =\"xs:base64Binary(\\\"\";\n    \t\t\tpostfix = \"\\\")\";\n    \t\tbreak;\n    \t\t\n    \t\tcase Type.STRING:\n    \t\t\tprefix = \"\\\"\";\n    \t\t\tpostfix = \"\\\"\";\n    \t\tbreak;\n    \t\t\n    \t\tcase Type.DATE:\n    \t\t\tprefix = \"xs:date(\\\"\";\n    \t\t\tpostfix = \"\\\")\";\n    \t\tbreak;\n    \t\t\n    \t\tcase Type.DATE_TIME:\n    \t\t\tprefix = \"xs:dateTime(\\\"\";\n    \t\t\tpostfix = \"\\\")\";\n    \t\tbreak;\n    \t\t\n    \t\tdefault:\n    \t}\n    \t\n    \treturn prefix +  strSOAPParamValue + postfix;\n    }","id":2170,"modified_method":"/**\n     * Writes a parameter for an XQuery function call\n     * \n     * @param paramType\tThe type of the Parameter (from the internal description of the XQWS)\n     * @param paramCardinality The cardinality of the Parameter (from the internal description of the XQWS)\n     * @param SOAPParam\tThe Node from the SOAP request for the Paremeter of the Function call from the Http Request \n     * \n     * @return A String representation of the parameter, suitable for use in the function call \n     */\n    private String writeXQueryFunctionParameter(String paramType, int paramCardinality, Node nSOAPParam) throws XPathException\n    {\n    \tString prefix = new String();\n    \tString postfix = new String();\n    \t\n    \t//determine the type of the parameter\n    \tint type = Type.getType(paramType);\n    \t\n    \tswitch(type)\n    \t{\n    \t\tcase Type.BASE64_BINARY:\n    \t\t\tprefix =\"xs:base64Binary(\\\"\";\n    \t\t\tpostfix = \"\\\")\";\n    \t\tbreak;\n    \t\t\n    \t\tcase Type.STRING:\n    \t\t\tprefix = \"\\\"\";\n    \t\t\tpostfix = \"\\\"\";\n    \t\tbreak;\n    \t\t\n    \t\tcase Type.DATE:\n    \t\t\tprefix = \"xs:date(\\\"\";\n    \t\t\tpostfix = \"\\\")\";\n    \t\tbreak;\n    \t\t\n    \t\tcase Type.DATE_TIME:\n    \t\t\tprefix = \"xs:dateTime(\\\"\";\n    \t\t\tpostfix = \"\\\")\";\n    \t\tbreak;\n    \t\t\n    \t\tdefault:\n    \t}\n    \n    \t//determine the cardinality of the parameter\n    \tif(paramCardinality >= Cardinality.MANY)\n    \t{\n    \t\t//sequence\n    \t\tStringBuffer param = new StringBuffer();\n    \t\t\n    \t\tparam.append(\"(\");\n    \t\t\n    \t\tNodeList nlParamSequenceItems = nSOAPParam.getChildNodes();\n    \t\tfor(int i=0; i < nlParamSequenceItems.getLength(); i++)\n    \t\t{\n    \t\t\tNode nParamSeqItem = nlParamSequenceItems.item(i);\n    \t\t\tif(nParamSeqItem.getNodeType() == Node.ELEMENT_NODE)\n    \t\t\t{\n    \t\t\t\tparam.append(prefix);\n    \t\t\t\tparam.append(nParamSeqItem.getFirstChild().getNodeValue());\n    \t\t\t\tparam.append(postfix);\n    \t        \t\n\t        \t\tparam.append(\",\");\t//seperator for next item in sequence\n    \t        \t\n    \t\t\t}\n    \t\t}\n    \t\t\n    \t\t//remove last superflurous seperator\n    \t\tif(param.charAt(param.length()-1) == ',')\n    \t\t{\n    \t\t\tparam.deleteCharAt(param.length()-1);\n    \t\t}\n    \t\t\n    \t\tparam.append(\")\");\n    \t\t\n    \t\treturn param.toString();\n    \t}\n    \telse\n    \t{\n    \t\t//atomic value\n    \t\treturn prefix +  nSOAPParam.getFirstChild().getNodeValue() + postfix;\n    \t}\n    }","commit_id":"f42834cba159a41a04f3bb10d6248aa5d22925d7","url":"https://github.com/eXist-db/exist"},{"original_method":"/**\n     * Creates an XQuery to call an XQWS function from a SOAP Request\n     * \n     * @param broker\tThe Database Broker to use\n     * @param xqwsFileUri\tThe XmldbURI of the XQWS file\n     * @param xqwsNamespace\tThe namespace of the xqws\n     * @param xqwsCollectionUri\tThe XmldbUri of the collection where the XQWS resides\n     * @param xqwsSOAPFunction\tThe Node from the SOAP request for the Function call from the Http Request\n     * @param xqwsDescription\tThe internal description of the XQWS\n     * @param request\tThe Http Servlet Request\n     * @param response The Http Servlet Response\n     * \n     * @return The compiled XQuery\n     */\n    private CompiledXQuery XQueryExecuteXQWSFunction(DBBroker broker, Node xqwsSOAPFunction, XQWSDescription xqwsDescription, HttpServletRequest request, HttpServletResponse response) throws XPathException\n    {\t\n    \tString query = \"xquery version \\\"1.0\\\";\" + SEPERATOR;\n        query += SEPERATOR;\n        query += \"import module namespace \" + xqwsDescription.getNamespace().getLocalName() + \"=\\\"\" + xqwsDescription.getNamespace().getNamespaceURI() + \"\\\" at \\\"\" + xqwsDescription.getFileURI().toString() + \"\\\";\" + SEPERATOR;\n        query += SEPERATOR;\n        \n        //add the function call to the xquery\n        String functionName = xqwsSOAPFunction.getNodeName();\n        query += xqwsDescription.getNamespace().getLocalName() + \":\" + functionName + \"(\";\n        \n        //add the arguments for the function call if any\n        NodeList xqwsSOAPFunctionParams = xqwsSOAPFunction.getChildNodes();\n        Node nInternalFunction = xqwsDescription.getFunction(functionName);\n        NodeList nlInternalFunctionParams = xqwsDescription.getFunctionParameters(nInternalFunction);\n        \n        int j = 0;\n        for(int i = 0; i < xqwsSOAPFunctionParams.getLength(); i++)\n        {\n        \tNode nSOAPFunctionParam = xqwsSOAPFunctionParams.item(i);\n        \tif(nSOAPFunctionParam.getNodeType() == Node.ELEMENT_NODE)\n        \t{\n\t        \tquery += writeXQueryFunctionParameter(xqwsDescription.getFunctionParameterType(nlInternalFunctionParams.item(j)), xqwsDescription.getFunctionParameterCardinality(nlInternalFunctionParams.item(j)), nSOAPFunctionParam.getFirstChild().getNodeValue());\n\t        \t\n\t        \t//add a comma if this isnt the last parameter\n\t        \tif(j != nlInternalFunctionParams.getLength()-1)\n\t        \t{\n\t        \t\tquery += \",\";\n\t        \t}\n\t        \tj++;\n        \t}\n        }\n        \n        query += \")\";\n        \n        //compile the query\n        return compileXQuery(broker, new StringSource(query), new XmldbURI[] { xqwsDescription.getCollectionURI() }, xqwsDescription.getCollectionURI(), request, response);\n    }","id":2171,"modified_method":"/**\n     * Creates an XQuery to call an XQWS function from a SOAP Request\n     * \n     * @param broker\tThe Database Broker to use\n     * @param xqwsFileUri\tThe XmldbURI of the XQWS file\n     * @param xqwsNamespace\tThe namespace of the xqws\n     * @param xqwsCollectionUri\tThe XmldbUri of the collection where the XQWS resides\n     * @param xqwsSOAPFunction\tThe Node from the SOAP request for the Function call from the Http Request\n     * @param xqwsDescription\tThe internal description of the XQWS\n     * @param request\tThe Http Servlet Request\n     * @param response The Http Servlet Response\n     * \n     * @return The compiled XQuery\n     */\n    private CompiledXQuery XQueryExecuteXQWSFunction(DBBroker broker, Node xqwsSOAPFunction, XQWSDescription xqwsDescription, HttpServletRequest request, HttpServletResponse response) throws XPathException\n    {\t\n    \tStringBuffer query = new StringBuffer();\n    \tquery.append(\"xquery version \\\"1.0\\\";\" + SEPERATOR);\n    \tquery.append(SEPERATOR);\n        query.append(\"import module namespace \" + xqwsDescription.getNamespace().getLocalName() + \"=\\\"\" + xqwsDescription.getNamespace().getNamespaceURI() + \"\\\" at \\\"\" + xqwsDescription.getFileURI().toString() + \"\\\";\" + SEPERATOR);\n        query.append(SEPERATOR);\n        \n        //add the function call to the xquery\n        String functionName = xqwsSOAPFunction.getNodeName();\n        query.append(xqwsDescription.getNamespace().getLocalName() + \":\" + functionName + \"(\");\n        \n        //add the arguments for the function call if any\n        NodeList xqwsSOAPFunctionParams = xqwsSOAPFunction.getChildNodes();\n        Node nInternalFunction = xqwsDescription.getFunction(functionName);\n        NodeList nlInternalFunctionParams = xqwsDescription.getFunctionParameters(nInternalFunction);\n        \n        int j = 0;\n        for(int i = 0; i < xqwsSOAPFunctionParams.getLength(); i++)\n        {\n        \tNode nSOAPFunctionParam = xqwsSOAPFunctionParams.item(i);\n        \tif(nSOAPFunctionParam.getNodeType() == Node.ELEMENT_NODE)\n        \t{\n\t        \tquery.append(writeXQueryFunctionParameter(xqwsDescription.getFunctionParameterType(nlInternalFunctionParams.item(j)), xqwsDescription.getFunctionParameterCardinality(nlInternalFunctionParams.item(j)), nSOAPFunctionParam));\n        \t\tquery.append(\",\"); //add function seperator\n\t        \t\n\t        \tj++;\n        \t}\n        }\n        \n        //remove last superflurous seperator\n\t\tif(query.charAt(query.length()-1) == ',')\n\t\t{\n\t\t\tquery.deleteCharAt(query.length()-1);\n\t\t}\n        \n        query.append(\")\");\n        \n        //compile the query\n        return compileXQuery(broker, new StringSource(query.toString()), new XmldbURI[] { xqwsDescription.getCollectionURI() }, xqwsDescription.getCollectionURI(), request, response);\n    }","commit_id":"f42834cba159a41a04f3bb10d6248aa5d22925d7","url":"https://github.com/eXist-db/exist"},{"original_method":"/**\n    \t * Describes an XQWS function by building an XML node representation of the function signature\n    \t * \n    \t * \t<function>\n    \t * \t\t<name/>\n    \t * \t\t<description/>\n    \t * \t\t<parameters>\n    \t * \t\t\t<parameter>\n    \t * \t\t\t\t<name/>\n    \t * \t\t\t\t<type/>\n    \t * \t\t\t\t<cardinality/>\n    \t * \t\t\t<\/parameter>\n    \t * \t\t<\/parameters>\n    \t * \t\t<return>\n    \t * \t\t\t<type/>\n    \t * \t\t\t<cardinality/>\n    \t * \t\t\t<result/>\t\t//Only displayed if this is after the function has been executed\n    \t * \t\t<\/return>\n    \t * \t<\/function>\n    \t * \n    \t * @param signature\tThe function signature to describe\n    \t * @param builderFunction\tThe MemTreeBuilder to write the description to\n    \t * @param functionResult\tA Sequence containing the function results or null if the function has not yet been executed\n    \t */\n    \tprivate void describeWebServiceFunction(FunctionSignature signature, MemTreeBuilder builderFunction, Sequence functionResult) throws XPathException\n    \t{\n    \t\t//Generate an XML snippet for each function\n        \tbuilderFunction.startElement(new QName(\"function\", null, null), null);\n        \tbuilderFunction.startElement(new QName(\"name\", null, null), null);\n        \tbuilderFunction.characters(signature.getName().getLocalName());\n        \tbuilderFunction.endElement();\n        \tif(signature.getDescription() != null)\n        \t{\n        \t\tbuilderFunction.startElement(new QName(\"description\", null, null), null);\n        \t\tbuilderFunction.characters(signature.getDescription());\n        \t\tbuilderFunction.endElement();\n        \t}\n        \tSequenceType[] xqwsArguments = signature.getArgumentTypes();\n        \tbuilderFunction.startElement(new QName(\"parameters\", null, null), null);\n        \tfor(int a = 0; a < xqwsArguments.length; a++)\n        \t{\n        \t\tbuilderFunction.startElement(new QName(\"parameter\",null, null), null);\n        \t\tbuilderFunction.startElement(new QName(\"name\",null, null), null);\n        \t\t//builderFunction.characters(xqwsArguments[a].getNodeName().getLocalName()); //TODO: how to get parameter name?\n        \t\tbuilderFunction.endElement();\n        \t\tbuilderFunction.startElement(new QName(\"type\",null, null), null);\n        \t\tbuilderFunction.characters(Type.getTypeName(xqwsArguments[a].getPrimaryType()));\n        \t\tbuilderFunction.endElement();\n        \t\tbuilderFunction.startElement(new QName(\"cardinality\",null, null), null);\n        \t\tbuilderFunction.characters(Integer.toString(xqwsArguments[a].getCardinality()));\n        \t\tbuilderFunction.endElement();\n        \t\tbuilderFunction.endElement();\n        \t}\n        \tbuilderFunction.endElement();\n        \tbuilderFunction.startElement(new QName(\"return\",null, null), null);\n        \tbuilderFunction.startElement(new QName(\"type\",null, null), null);\n        \tbuilderFunction.characters(Type.getTypeName(signature.getReturnType().getPrimaryType()));\n        \tbuilderFunction.endElement();\n        \tbuilderFunction.startElement(new QName(\"cardinality\",null, null), null);\n        \tbuilderFunction.characters(Integer.toString(signature.getReturnType().getCardinality()));\n        \tbuilderFunction.endElement();\n        \tif(functionResult != null)\n        \t{\n        \t\tbuilderFunction.startElement(new QName(\"result\", null, null), null);\n\n        \t\t//TODO: this will work for a single string result, but need to add much more logic for other types and complex cardinalities\n        \t\tbuilderFunction.characters(functionResult.itemAt(0).getStringValue());\n        \t\t\n        \t\tbuilderFunction.endElement();\n        \t}\n        \tbuilderFunction.endElement();\n        \tbuilderFunction.endElement();\n    \t}","id":2172,"modified_method":"/**\n    \t * Describes an XQWS function by building an XML node representation of the function signature\n    \t * \n    \t * \t<function>\n    \t * \t\t<name/>\n    \t * \t\t<description/>\n    \t * \t\t<parameters>\n    \t * \t\t\t<parameter>\t{ unbounded }\n    \t * \t\t\t\t<name/>\n    \t * \t\t\t\t<type/>\n    \t * \t\t\t\t<cardinality/>\n    \t * \t\t\t<\/parameter>\n    \t * \t\t<\/parameters>\n    \t * \t\t<return>\n    \t * \t\t\t<type/>\n    \t * \t\t\t<cardinality/>\n    \t * \t\t\t<result>\t\t{ Only displayed if this is after the function has been executed }\n    \t * \t\t\t\teither {\n    \t * \t\t\t\t\t<value/> or\n    \t * \t\t\t\t\t<sequence>\n    \t * \t\t\t\t\t\t<value/> { unbounded }\n    \t * \t\t\t\t\t<\/sequence>\n    \t * \t\t\t\t}\n    \t * \t\t\t<\/result>\n    \t * \t\t<\/return>\n    \t * \t<\/function>\n    \t * \n    \t * @param signature\tThe function signature to describe\n    \t * @param builderFunction\tThe MemTreeBuilder to write the description to\n    \t * @param functionResult\tA Sequence containing the function results or null if the function has not yet been executed\n    \t */\n    \tprivate void describeWebServiceFunction(FunctionSignature signature, MemTreeBuilder builderFunction, Sequence functionResult) throws XPathException\n    \t{\n    \t\t//Generate an XML snippet for each function\n        \tbuilderFunction.startElement(new QName(\"function\", null, null), null);\n        \tbuilderFunction.startElement(new QName(\"name\", null, null), null);\n        \tbuilderFunction.characters(signature.getName().getLocalName());\n        \tbuilderFunction.endElement();\n        \tif(signature.getDescription() != null)\n        \t{\n        \t\tbuilderFunction.startElement(new QName(\"description\", null, null), null);\n        \t\tbuilderFunction.characters(signature.getDescription());\n        \t\tbuilderFunction.endElement();\n        \t}\n        \tSequenceType[] xqwsArguments = signature.getArgumentTypes();\n        \tbuilderFunction.startElement(new QName(\"parameters\", null, null), null);\n        \tfor(int a = 0; a < xqwsArguments.length; a++)\n        \t{\n        \t\tbuilderFunction.startElement(new QName(\"parameter\",null, null), null);\n        \t\tbuilderFunction.startElement(new QName(\"name\",null, null), null);\n        \t\t//builderFunction.characters(xqwsArguments[a].getNodeName().getLocalName()); //TODO: how to get parameter name?\n        \t\tbuilderFunction.endElement();\n        \t\tbuilderFunction.startElement(new QName(\"type\",null, null), null);\n        \t\tbuilderFunction.characters(Type.getTypeName(xqwsArguments[a].getPrimaryType()));\n        \t\tbuilderFunction.endElement();\n        \t\tbuilderFunction.startElement(new QName(\"cardinality\",null, null), null);\n        \t\tbuilderFunction.characters(Integer.toString(xqwsArguments[a].getCardinality()));\n        \t\tbuilderFunction.endElement();\n        \t\tbuilderFunction.endElement();\n        \t}\n        \tbuilderFunction.endElement();\n        \tbuilderFunction.startElement(new QName(\"return\",null, null), null);\n        \tbuilderFunction.startElement(new QName(\"type\",null, null), null);\n        \tbuilderFunction.characters(Type.getTypeName(signature.getReturnType().getPrimaryType()));\n        \tbuilderFunction.endElement();\n        \tint iReturnCardinality = signature.getReturnType().getCardinality();\n        \tbuilderFunction.startElement(new QName(\"cardinality\",null, null), null);\n        \tbuilderFunction.characters(Integer.toString(iReturnCardinality));\n        \tbuilderFunction.endElement();\n        \tif(functionResult != null)\n        \t{\n        \t\tbuilderFunction.startElement(new QName(\"result\", null, null), null);\n        \t\t\n        \t\t//determine result cardinality\n        \t\tif(iReturnCardinality >= Cardinality.MANY)\n        \t\t{\n        \t\t\t//sequence of values\n        \t\t\tbuilderFunction.startElement(new QName(\"sequence\", null, null), null);\n        \t\t\t\n        \t\t\tfor(int i=0; i < functionResult.getLength(); i++)\n        \t\t\t{\n            \t\t\tbuilderFunction.startElement(new QName(\"value\", null, null), null);\n            \t\t\tbuilderFunction.characters(functionResult.itemAt(i).getStringValue());\n            \t\t\tbuilderFunction.endElement();\n        \t\t\t}\n        \t\t\t\n        \t\t\tbuilderFunction.endElement();\n        \t\t}\n        \t\telse\n        \t\t{\n        \t\t\t//atomic value\n        \t\t\tbuilderFunction.startElement(new QName(\"value\", null, null), null);\n        \t\t\tbuilderFunction.characters(functionResult.itemAt(0).getStringValue());\n        \t\t\tbuilderFunction.endElement();\n        \t\t}\n        \t\t\n        \t\tbuilderFunction.endElement();\n        \t}\n        \tbuilderFunction.endElement();\n        \tbuilderFunction.endElement();\n    \t}","commit_id":"f42834cba159a41a04f3bb10d6248aa5d22925d7","url":"https://github.com/eXist-db/exist"},{"original_method":"@Test\n    public void testWeighting() throws Exception {\n        http2Connect();\n\n        // Default connection window size is 64k - 1. Initial request will have\n        // used 8k (56k -1). Increase it to 57k\n        sendWindowUpdate(0, 1 + 1024);\n\n        // Use up 56k of the connection window\n        for (int i = 3; i < 17; i += 2) {\n            sendSimpleGetRequest(i);\n            readSimpleGetResponse();\n        }\n\n        // Set the default window size to 1024 bytes\n        sendSettings(0, false, new SettingValue(4, 1024));\n        // Wait for the ack\n        parser.readFrame(true);\n        // Debugging Gump failure\n        log.info(output.getTrace());\n        output.clearTrace();\n\n        // At this point the connection window should be 1k and any new stream\n        // should have a window of 1k as well\n\n        // Set up streams A=17, B=19, C=21\n        sendPriority(17,  0, 15);\n        sendPriority(19, 17,  3);\n        sendPriority(21, 17, 11);\n\n        // First, process a request on stream 17. This should consume both\n        // stream 17's window and the connection window.\n        sendSimpleGetRequest(17);\n        // 17-headers, 17-1k-body\n        parser.readFrame(true);\n        // Debugging Gump failure\n        log.info(output.getTrace());\n        parser.readFrame(true);\n        // Debugging Gump failure\n        log.info(output.getTrace());\n        output.clearTrace();\n\n        // Send additional requests. Connection window is empty so only headers\n        // will be returned.\n        sendSimpleGetRequest(19);\n        sendSimpleGetRequest(21);\n\n        // Open up the flow control windows for stream 19 & 21 to more than the\n        // size of a simple request (8k)\n        sendWindowUpdate(19, 16*1024);\n        sendWindowUpdate(21, 16*1024);\n\n        // Read some frames\n        // 19-headers, 21-headers\n        parser.readFrame(true);\n        // Debugging Gump failure\n        log.info(output.getTrace());\n        parser.readFrame(true);\n        // Debugging Gump failure\n        log.info(output.getTrace());\n        output.clearTrace();\n\n        // At this point 17 is blocked because the stream window is zero and\n        // 19 & 21 are blocked because the connection window is zero.\n\n        // This should release a single byte from each of 19 and 21 (the update\n        // is allocated by weight and then rounded up).\n        sendWindowUpdate(0, 1);\n        parser.readFrame(true);\n        // Debugging Gump failure\n        log.info(output.getTrace());\n\n        // This frame is not always written\n        int count = 0;\n        while (!parser.readFrame(false) && count < 10) {\n            Thread.sleep(100);\n            count++;\n        }\n        if (count == 10) {\n            Assert.fail(\"Second 1 byte body frame not received\");\n        }\n\n        // Debugging Gump failure\n        log.info(output.getTrace());\n\n        String trace = output.getTrace();\n        Assert.assertTrue(trace, trace.contains(\"19-Body-1\"));\n        Assert.assertTrue(trace, trace.contains(\"21-Body-1\"));\n        output.clearTrace();\n\n        // This should address the 'overrun' of the connection flow control\n        // window above.\n        sendWindowUpdate(0, 1);\n\n        sendWindowUpdate(0, 1024);\n        parser.readFrame(true);\n        // Debugging Gump failure\n        log.info(output.getTrace());\n        parser.readFrame(true);\n        // Debugging Gump failure\n        log.info(output.getTrace());\n\n        trace = output.getTrace();\n        Assert.assertTrue(trace, trace.contains(\"19-Body-256\"));\n        Assert.assertTrue(trace, trace.contains(\"21-Body-768\"));\n\n        // Release everything and read all the remaining data\n        sendWindowUpdate(0, 1024 * 1024);\n        sendWindowUpdate(17, 1024 * 1024);\n\n        // Read remaining frames\n        // 17-7k-body, 19~8k-body, 21~8k-body\n        for (int i = 0; i < 3; i++) {\n            parser.readFrame(true);\n            // Debugging Gump failure\n            log.info(output.getTrace());\n        }\n    }","id":2173,"modified_method":"@Test\n    public void testWeighting() throws Exception {\n        http2Connect();\n\n        // Default connection window size is 64k - 1. Initial request will have\n        // used 8k (56k -1). Increase it to 57k\n        sendWindowUpdate(0, 1 + 1024);\n\n        // Use up 56k of the connection window\n        for (int i = 3; i < 17; i += 2) {\n            sendSimpleGetRequest(i);\n            readSimpleGetResponse();\n        }\n\n        // Set the default window size to 1024 bytes\n        sendSettings(0, false, new SettingValue(4, 1024));\n        // Wait for the ack\n        parser.readFrame(true);\n        // Debugging Gump failure\n        log.info(output.getTrace());\n        output.clearTrace();\n\n        // At this point the connection window should be 1k and any new stream\n        // should have a window of 1k as well\n\n        // Set up streams A=17, B=19, C=21\n        sendPriority(17,  0, 15);\n        sendPriority(19, 17,  3);\n        sendPriority(21, 17, 11);\n\n        // First, process a request on stream 17. This should consume both\n        // stream 17's window and the connection window.\n        sendSimpleGetRequest(17);\n        // 17-headers, 17-1k-body\n        parser.readFrame(true);\n        // Debugging Gump failure\n        log.info(output.getTrace());\n        parser.readFrame(true);\n        // Debugging Gump failure\n        log.info(output.getTrace());\n        output.clearTrace();\n\n        // Send additional requests. Connection window is empty so only headers\n        // will be returned.\n        sendSimpleGetRequest(19);\n        sendSimpleGetRequest(21);\n\n        // Open up the flow control windows for stream 19 & 21 to more than the\n        // size of a simple request (8k)\n        sendWindowUpdate(19, 16*1024);\n        sendWindowUpdate(21, 16*1024);\n\n        // Read some frames\n        // 19-headers, 21-headers\n        parser.readFrame(true);\n        // Debugging Gump failure\n        log.info(output.getTrace());\n        parser.readFrame(true);\n        // Debugging Gump failure\n        log.info(output.getTrace());\n        output.clearTrace();\n\n        // At this point 17 is blocked because the stream window is zero and\n        // 19 & 21 are blocked because the connection window is zero.\n        //\n        // Note: All these streams are processed in their own threads so it is\n        //       possible that not all of them reach the point where output\n        //       is blocked at the same time.\n        //\n        // The loop below handles 0, 1 or 2 stream being blocked\n        // - If 0 streams are blocked the connection window will be set to one\n        //   and that will be consumed by the first stream to attempt to write.\n        //   That body frame will be read by the client. The stream will then be\n        //   blocked and the loop will start again.\n        // - If 1 stream is blocked, the connection window will be set to one\n        //   which will then be consumed by the blocked stream. After writing\n        //   the single byte the stream will again be blocked and the loop will\n        //   start again.\n        // - If 2 streams are blocked the connection window will be set to one\n        //   but one byte will be permitted for both streams (due to rounding in\n        //   the allocation). The window size will be -1. Two frames (one for\n        //   each stream will be written) one of which will be consumed by the\n        //   client. The loop will start again and the Window size incremented\n        //   to zero. No data will be written by the streams but the second data\n        //   frame written in the last iteration of the loop will be read. The\n        //   loop will then exit since frames from both streams will have been\n        //   observed.\n        boolean seen19 = false;\n        boolean seen21 = false;\n        while (!seen19 || !seen21) {\n            sendWindowUpdate(0, 1);\n            parser.readFrame(true);\n            if (output.getTrace().contains(\"19-Body-1\")) {\n                seen19 = true;\n            } else if (output.getTrace().contains(\"21-Body-1\")) {\n                seen21 = true;\n            } else {\n                // Unexpected trace\n                Assert.fail(output.getTrace());\n            }\n            output.clearTrace();\n        }\n\n        sendWindowUpdate(0, 1024);\n        parser.readFrame(true);\n        // Debugging Gump failure\n        log.info(output.getTrace());\n        parser.readFrame(true);\n        // Debugging Gump failure\n        log.info(output.getTrace());\n\n        String trace = output.getTrace();\n        Assert.assertTrue(trace, trace.contains(\"19-Body-256\"));\n        Assert.assertTrue(trace, trace.contains(\"21-Body-768\"));\n\n        // Release everything and read all the remaining data\n        sendWindowUpdate(0, 1024 * 1024);\n        sendWindowUpdate(17, 1024 * 1024);\n\n        // Read remaining frames\n        // 17-7k-body, 19~8k-body, 21~8k-body\n        for (int i = 0; i < 3; i++) {\n            parser.readFrame(true);\n            // Debugging Gump failure\n            log.info(output.getTrace());\n        }\n    }","commit_id":"3af1963670f9114f30ce2a405eb96a3497b3a871","url":"https://github.com/apache/tomcat"},{"original_method":"public void info(String msg, Object... args)\n    {\n        if (_logger.isLoggable(Level.INFO))\n            _logger.log(Level.INFO, format(msg, args));\n    }","id":2174,"modified_method":"public void info(String msg, Object... args)\n    {\n        if (_logger.isLoggable(Level.INFO))\n            log(Level.INFO, format(msg, args),null);\n    }","commit_id":"dcb4c0d0a8ecb2d198977334b8b6a8c6180359b5","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void ignore(Throwable ignored)\n    {\n        if (Log.isIgnored())\n        {\n            warn(Log.IGNORED, ignored);\n        }\n    }","id":2175,"modified_method":"public void ignore(Throwable ignored)\n    {\n        if (_logger.isLoggable(Level.WARNING))\n            log(Level.WARNING,Log.IGNORED,ignored);\n    }","commit_id":"dcb4c0d0a8ecb2d198977334b8b6a8c6180359b5","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void warn(Throwable thrown)\n    {\n        warn(\"\", thrown);\n    }","id":2176,"modified_method":"public void warn(Throwable thrown)\n    {\n        if (_logger.isLoggable(Level.WARNING))\n            log(Level.WARNING,\"\",thrown);\n    }","commit_id":"dcb4c0d0a8ecb2d198977334b8b6a8c6180359b5","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void debug(String msg, long arg)\n    {\n        if (_logger.isLoggable(Level.FINE))\n            _logger.log(Level.FINE,format(msg, arg));\n    }","id":2177,"modified_method":"public void debug(String msg, long arg)\n    {\n        if (_logger.isLoggable(Level.FINE))\n            log(Level.FINE,format(msg, arg),null);\n    }","commit_id":"dcb4c0d0a8ecb2d198977334b8b6a8c6180359b5","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void warn(String msg, Throwable thrown)\n    {\n        _logger.log(Level.WARNING, msg, thrown);\n    }","id":2178,"modified_method":"public void warn(String msg, Throwable thrown)\n    {\n        if (_logger.isLoggable(Level.WARNING))\n            log(Level.WARNING,msg,thrown);\n    }","commit_id":"dcb4c0d0a8ecb2d198977334b8b6a8c6180359b5","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void debug(Throwable thrown)\n    {\n        debug(\"\", thrown);\n    }","id":2179,"modified_method":"public void debug(Throwable thrown)\n    {\n        if (_logger.isLoggable(Level.FINE))\n            log(Level.FINE,\"\",thrown);\n    }","commit_id":"dcb4c0d0a8ecb2d198977334b8b6a8c6180359b5","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void warn(String msg, Object... args)\n    {\n        if (_logger.isLoggable(Level.WARNING))\n            _logger.log(Level.WARNING,format(msg,args));\n    }","id":2180,"modified_method":"public void warn(String msg, Object... args)\n    {\n        if (_logger.isLoggable(Level.WARNING))\n            log(Level.WARNING,format(msg,args),null);\n    }","commit_id":"dcb4c0d0a8ecb2d198977334b8b6a8c6180359b5","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void debug(String msg, Object... args)\n    {\n        if (_logger.isLoggable(Level.FINE))\n            _logger.log(Level.FINE,format(msg, args));\n    }","id":2181,"modified_method":"public void debug(String msg, Object... args)\n    {\n        if (_logger.isLoggable(Level.FINE))\n            log(Level.FINE,format(msg, args),null);\n    }","commit_id":"dcb4c0d0a8ecb2d198977334b8b6a8c6180359b5","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void info(Throwable thrown)\n    {\n        info(\"\", thrown);\n    }","id":2182,"modified_method":"public void info(Throwable thrown)\n    {\n        if (_logger.isLoggable(Level.INFO))\n            log(Level.INFO, \"\",thrown);\n    }","commit_id":"dcb4c0d0a8ecb2d198977334b8b6a8c6180359b5","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void info(String msg, Throwable thrown)\n    {\n        _logger.log(Level.INFO, msg, thrown);\n    }","id":2183,"modified_method":"public void info(String msg, Throwable thrown)\n    {\n        if (_logger.isLoggable(Level.INFO))\n            log(Level.INFO,msg,thrown);\n    }","commit_id":"dcb4c0d0a8ecb2d198977334b8b6a8c6180359b5","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void debug(String msg, Throwable thrown)\n    {\n        _logger.log(Level.FINE, msg, thrown);\n    }","id":2184,"modified_method":"public void debug(String msg, Throwable thrown)\n    {\n        if (_logger.isLoggable(Level.FINE))\n            log(Level.FINE,msg,thrown);\n    }","commit_id":"dcb4c0d0a8ecb2d198977334b8b6a8c6180359b5","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Override\r\n    //FIXME: why no sessionId here???\r\n    public List<String> getConnectedPlayers(UUID roomId) throws MageException {\r\n        try {\r\n            return GamesRoomManager.getInstance().getRoom(roomId).getPlayers();\r\n        }\r\n        catch (Exception ex) {\r\n            handleException(ex);\r\n        }\r\n        return null;\r\n    }","id":2185,"modified_method":"@Override\r\n    //FIXME: why no sessionId here???\r\n    public List<String> getConnectedPlayers(UUID roomId) throws MageException {\r\n        try {\r\n            GamesRoom room = GamesRoomManager.getInstance().getRoom(roomId);\r\n            if (room != null) {\r\n                return room.getPlayers();\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n        catch (Exception ex) {\r\n            handleException(ex);\r\n        }\r\n        return null;\r\n    }","commit_id":"faafa3f8be1d06ad7ee2523245c079e12da5d2a2","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    //FIXME: why no sessionId here???\r\n    public List<TableView> getTables(UUID roomId) throws MageException {\r\n        try {\r\n            return GamesRoomManager.getInstance().getRoom(roomId).getTables();\r\n        }\r\n        catch (Exception ex) {\r\n            handleException(ex);\r\n        }\r\n        return null;\r\n    }","id":2186,"modified_method":"@Override\r\n    //FIXME: why no sessionId here???\r\n    public List<TableView> getTables(UUID roomId) throws MageException {\r\n        try {\r\n            GamesRoom room = GamesRoomManager.getInstance().getRoom(roomId);\r\n            if (room != null) {\r\n                return room.getTables();\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n        catch (Exception ex) {\r\n            handleException(ex);\r\n        }\r\n        return null;\r\n    }","commit_id":"faafa3f8be1d06ad7ee2523245c079e12da5d2a2","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    //FIXME: why no sessionId here???\r\n    public TableView getTable(UUID roomId, UUID tableId) throws MageException {\r\n        try {\r\n            return GamesRoomManager.getInstance().getRoom(roomId).getTable(tableId);\r\n        }\r\n        catch (Exception ex) {\r\n            handleException(ex);\r\n        }\r\n        return null;\r\n    }","id":2187,"modified_method":"@Override\r\n    //FIXME: why no sessionId here???\r\n    public TableView getTable(UUID roomId, UUID tableId) throws MageException {\r\n        try {\r\n            GamesRoom room = GamesRoomManager.getInstance().getRoom(roomId);\r\n            if (room != null) {\r\n                return room.getTable(tableId);\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n        catch (Exception ex) {\r\n            handleException(ex);\r\n        }\r\n        return null;\r\n    }","commit_id":"faafa3f8be1d06ad7ee2523245c079e12da5d2a2","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    //FIXME: why no sessionId here???\r\n    public List<MatchView> getFinishedMatches(UUID roomId) throws MageException {\r\n        try {\r\n            return GamesRoomManager.getInstance().getRoom(roomId).getFinished();\r\n        }\r\n        catch (Exception ex) {\r\n            handleException(ex);\r\n        }\r\n        return null;\r\n    }","id":2188,"modified_method":"@Override\r\n    //FIXME: why no sessionId here???\r\n    public List<MatchView> getFinishedMatches(UUID roomId) throws MageException {\r\n        try {\r\n            GamesRoom room = GamesRoomManager.getInstance().getRoom(roomId);\r\n            if (room != null) {\r\n                return room.getFinished();\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n        catch (Exception ex) {\r\n            handleException(ex);\r\n        }\r\n        return null;\r\n    }","commit_id":"faafa3f8be1d06ad7ee2523245c079e12da5d2a2","url":"https://github.com/magefree/mage"},{"original_method":"private void fillIdeaMappings() {\n    try {\n      addIdeaMappingsExt(\"DEFAULT_NULL_TEXT_COLOR\",\"NOT_USED_ELEMENT_ATTRIBUTES\");\n\n      addIdeaMappingsExt(\"FOLDED_TEXT\",\"FOLDED_TEXT_ATTRIBUTES\");\n      addIdeaMappingsExt(\"URL\",\"HYPERLINK_ATTRIBUTES\");\n\n      addIdeaMappingsExt(\"LOCAL_VARIABLE\",\"LOCAL_VARIABLE_ATTRIBUTES\");\n      addIdeaMappingsExt(\"PARAMETER\",\"PARAMETER_ATTRIBUTES\");\n      addIdeaMappingsExt(\"INSTANCE_FIELD\",\"INSTANCE_FIELD_ATTRIBUTES\");\n      addIdeaMappingsExt(\"METHOD_DECLARATION\",\"METHOD_DECLARATION_ATTRIBUTES\");\n      addIdeaMappingsExt(\"METHOD_CALL\",\"METHOD_CALL_ATTRIBUTES\");\n      addIdeaMappingsExt(\"STATIC_FIELD\",\"STATIC_FIELD_ATTRIBUTES\");\n      addIdeaMappingsExt(\"STATIC_FINAL_FIELD\",\"STATIC_FINAL_FIELD_ATTRIBUTES\");\n      addIdeaMappingsExt(\"STATIC_METHOD\",\"STATIC_METHOD_ATTRIBUTES\");\n      addIdeaMappingsExt(\"DEPRECATED\",\"DEPRECATED_ATTRIBUTES\");\n\n      addIdeaMappingsExt(\"CLASS_NAME\",\"CLASS_NAME_ATTRIBUTES\");\n\n      addIdeaMappingsExt(\"ANNOTATION\",\"ANNOTATION_NAME_ATTRIBUTES\");\n      addIdeaMappingsExt(\"NOT_USED_ELEMENT\",\"NOT_USED_ELEMENT_ATTRIBUTES\");\n      addIdeaMappingsExt(\"TODO\",\"TODO_DEFAULT_ATTRIBUTES\");\n\n      if(ApplicationInfo.getInstance().getFullVersion().equals(\"3.0\")\n          || ApplicationInfo.getInstance().getFullVersion().contains(\"12.1\"))\n      {\n        addIdeaMappingsExt(\"DOC_COMMENT\",\"DEFAULT_DOC_COMMENT\");\n        addIdeaMappingsExt(\"DOC_TAG\",\"JAVA_DOC_TAG\");\n        addIdeaMappingsExt(\"KEYWORD\",\"DEFAULT_KEYWORD\");\n        addIdeaMappingsExt(\"LINE_COMMENT\",\"DEFAULT_LINE_COMMENT\");\n        addIdeaMappingsExt(\"BLOCK_COMMENT\",\"DEFAULT_BLOCK_COMMENT\");\n        addIdeaMappingsExt(\"NUMBER\",\"DEFAULT_NUMBER\");\n        addIdeaMappingsExt(\"STRING\",\"DEFAULT_STRING\");\n        addIdeaMappingsExt(\"OPERATION_SIGN\",\"DEFAULT_OPERATION_SIGN\");\n        addIdeaMappingsExt(\"PARENTH\",\"DEFAULT_PARENTHS\");\n        addIdeaMappingsExt(\"BRACKETS\",\"DEFAULT_BRACKETS\");\n        addIdeaMappingsExt(\"BRACES\",\"DEFAULT_BRACES\");\n        addIdeaMappingsExt(\"SEMICOLON\",\"DEFAULT_SEMICOLON\");\n        addIdeaMappingsExt(\"DOT\",\"DEFAULT_DOT\");\n      } else if(ApplicationInfo.getInstance().getFullVersion().contains(\"12.0\")) {\n      /*For compatibility with IDEA 12.0x */\n        addIdeaMappingsExt(\"DOC_COMMENT\",\"JAVA_DOC_COMMENT\");\n        addIdeaMappingsExt(\"KEYWORD\",\"JAVA_KEYWORD\");\n        addIdeaMappingsExt(\"LINE_COMMENT\",\"JAVA_LINE_COMMENT\");\n        addIdeaMappingsExt(\"BLOCK_COMMENT\",\"JAVA_BLOCK_COMMENT\");\n        addIdeaMappingsExt(\"NUMBER\",\"JAVA_NUMBER\");\n        addIdeaMappingsExt(\"STRING\",\"JAVA_STRING\");\n        addIdeaMappingsExt(\"OPERATION_SIGN\",\"JAVA_OPERATION_SIGN\");\n        addIdeaMappingsExt(\"PARENTH\",\"JAVA_PARENTH\");\n        addIdeaMappingsExt(\"BRACKETS\",\"JAVA_BRACKETS\");\n        addIdeaMappingsExt(\"BRACES\",\"JAVA_BRACES\");\n        addIdeaMappingsExt(\"SEMICOLON\",\"JAVA_SEMICOLON\");\n        addIdeaMappingsExt(\"DOT\",\"JAVA_DOT\");\n      }\n\n      addIdeaMappingsExt(\"BREAKPOINT\",\"BREAKPOINT_ATTRIBUTES\");\n      addIdeaMappingsExt(\"EXECUTIONPOINT\",\"EXECUTIONPOINT_ATTRIBUTES\");\n\n      //addIdeaMappingsExt(\"\",\"\");\n    }\n    catch (StyleRegistryMappingKeyException e){\n\n    }\n  }","id":2189,"modified_method":"private void fillIdeaMappings() {\n    try {\n      addIdeaMappingsExt(\"DEFAULT_NULL_TEXT_COLOR\",\"NOT_USED_ELEMENT_ATTRIBUTES\");\n\n      addIdeaMappingsExt(\"FOLDED_TEXT\",\"FOLDED_TEXT_ATTRIBUTES\");\n      addIdeaMappingsExt(\"URL\",\"HYPERLINK_ATTRIBUTES\");\n\n      addIdeaMappingsExt(\"LOCAL_VARIABLE\",\"LOCAL_VARIABLE_ATTRIBUTES\");\n      addIdeaMappingsExt(\"PARAMETER\",\"PARAMETER_ATTRIBUTES\");\n      addIdeaMappingsExt(\"INSTANCE_FIELD\",\"INSTANCE_FIELD_ATTRIBUTES\");\n      addIdeaMappingsExt(\"METHOD_DECLARATION\",\"METHOD_DECLARATION_ATTRIBUTES\");\n      addIdeaMappingsExt(\"METHOD_CALL\",\"METHOD_CALL_ATTRIBUTES\");\n      addIdeaMappingsExt(\"STATIC_FIELD\",\"STATIC_FIELD_ATTRIBUTES\");\n      addIdeaMappingsExt(\"STATIC_FINAL_FIELD\",\"STATIC_FINAL_FIELD_ATTRIBUTES\");\n      addIdeaMappingsExt(\"STATIC_METHOD\",\"STATIC_METHOD_ATTRIBUTES\");\n      addIdeaMappingsExt(\"DEPRECATED\",\"DEPRECATED_ATTRIBUTES\");\n\n      addIdeaMappingsExt(\"CLASS_NAME\",\"CLASS_NAME_ATTRIBUTES\");\n\n      addIdeaMappingsExt(\"ANNOTATION\",\"ANNOTATION_NAME_ATTRIBUTES\");\n      addIdeaMappingsExt(\"NOT_USED_ELEMENT\",\"NOT_USED_ELEMENT_ATTRIBUTES\");\n      addIdeaMappingsExt(\"TODO\",\"TODO_DEFAULT_ATTRIBUTES\");\n\n      //HACK: find out right way to init Syntax Highlighters\n      Object o = SyntaxHighlighterColors.KEYWORD;\n      addIdeaMappingsExt(\"DOC_TAG\",\"JAVA_DOC_TAG\");\n      addIdeaMappingsExt(\"DOC_COMMENT\",\"JAVA_DOC_COMMENT\");\n      addIdeaMappingsExt(\"KEYWORD\",\"JAVA_KEYWORD\");\n      addIdeaMappingsExt(\"LINE_COMMENT\",\"JAVA_LINE_COMMENT\");\n      addIdeaMappingsExt(\"BLOCK_COMMENT\",\"JAVA_BLOCK_COMMENT\");\n      addIdeaMappingsExt(\"NUMBER\",\"JAVA_NUMBER\");\n      addIdeaMappingsExt(\"STRING\",\"JAVA_STRING\");\n      addIdeaMappingsExt(\"OPERATION_SIGN\",\"JAVA_OPERATION_SIGN\");\n      addIdeaMappingsExt(\"PARENTH\",\"JAVA_PARENTH\");\n      addIdeaMappingsExt(\"BRACKETS\",\"JAVA_BRACKETS\");\n      addIdeaMappingsExt(\"BRACES\",\"JAVA_BRACES\");\n      addIdeaMappingsExt(\"SEMICOLON\",\"JAVA_SEMICOLON\");\n      addIdeaMappingsExt(\"DOT\",\"JAVA_DOT\");\n\n      addIdeaMappingsExt(\"BREAKPOINT\",\"BREAKPOINT_ATTRIBUTES\");\n      addIdeaMappingsExt(\"EXECUTIONPOINT\",\"EXECUTIONPOINT_ATTRIBUTES\");\n\n      //addIdeaMappingsExt(\"\",\"\");\n    }\n    catch (StyleRegistryMappingKeyException e){\n\n    }\n  }","commit_id":"f5fab222badd4017ee559566d1a62f01a9add8b1","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void moveCidrsToTheirOwnTable(Connection conn) {\n        PreparedStatement pstmtItem = null;\n        PreparedStatement pstmtCidr = null;\n        ResultSet rsItems = null;\n\n        String networkAclItemSql = \"SELECT id, cidr FROM `cloud`.`network_acl_item`\";\n\n        s_logger.debug(\"Moving network acl item cidrs to a row per cidr\");\n        try {\n            pstmtItem = conn.prepareStatement(networkAclItemSql);\n            rsItems = pstmtItem.executeQuery();\n\n            String networkAclItemCidrSql = \"INSERT INTO `cloud`.`network_acl_item_cidrs` (network_acl_item_id, cidr) VALUES (?,?)\";\n            pstmtCidr = conn.prepareStatement(networkAclItemCidrSql);\n\n            // for each network acl item\n            while(rsItems.next()) {\n                long itemId = rsItems.getLong(1);\n                // get the source cidr list\n                String cidrList = rsItems.getString(2);\n                s_logger.debug(\"Moving '\" + cidrList +  \"' to a row per cidr\");\n                // split it\n                String[] cidrArray = cidrList.split(\",\");\n                // insert a record per cidr\n                pstmtCidr.setLong(1, itemId);\n                for (String cidr : cidrArray) {\n                    pstmtCidr.setString(2, cidr);\n                    pstmtCidr.executeUpdate();\n                }\n            }\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Exception while Moving network acl item cidrs to a row per cidr\", e);\n        } finally {\n\n            if (pstmtItem != null) {\n                try {\n                    pstmtItem.close();\n\n                } catch (SQLException e) {\n                }\n            }\n            if (pstmtCidr != null) {\n                try {\n                    pstmtCidr.close();\n\n                } catch (SQLException e) {\n                }\n            }\n        }\n        s_logger.debug(\"Done moving network acl item cidrs to a row per cidr\");\n    }","id":2190,"modified_method":"private void moveCidrsToTheirOwnTable(Connection conn) {\n        s_logger.debug(\"Moving network acl item cidrs to a row per cidr\");\n\n        String networkAclItemSql = \"SELECT id, cidr FROM `cloud`.`network_acl_item`\";\n        String networkAclItemCidrSql = \"INSERT INTO `cloud`.`network_acl_item_cidrs` (network_acl_item_id, cidr) VALUES (?,?)\";\n\n        try (PreparedStatement pstmtItem = conn.prepareStatement(networkAclItemSql);\n             ResultSet rsItems = pstmtItem.executeQuery();\n             PreparedStatement pstmtCidr = conn.prepareStatement(networkAclItemCidrSql);\n            ) {\n\n\n            // for each network acl item\n            while(rsItems.next()) {\n                long itemId = rsItems.getLong(1);\n                // get the source cidr list\n                String cidrList = rsItems.getString(2);\n                s_logger.debug(\"Moving '\" + cidrList +  \"' to a row per cidr\");\n                // split it\n                String[] cidrArray = cidrList.split(\",\");\n                // insert a record per cidr\n                pstmtCidr.setLong(1, itemId);\n                for (String cidr : cidrArray) {\n                    pstmtCidr.setString(2, cidr);\n                    pstmtCidr.executeUpdate();\n                }\n            }\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Exception while Moving network acl item cidrs to a row per cidr\", e);\n        }\n        s_logger.debug(\"Done moving network acl item cidrs to a row per cidr\");\n    }","commit_id":"39f775c38126bb25a0418f82196caaba463f8c1c","url":"https://github.com/apache/cloudstack"},{"original_method":"private void updateVlanUris(Connection conn) {\n        s_logger.debug(\"updating vlan URIs\");\n        PreparedStatement pstmt = null;\n        ResultSet rs = null;\n        try {\n            pstmt = conn.prepareStatement(\"SELECT id, vlan_id FROM `cloud`.`vlan` where vlan_id not like '%:%'\");\n            rs = pstmt.executeQuery();\n            while (rs.next()) {\n                long id = rs.getLong(1);\n                String vlan = rs.getString(2);\n                if (vlan == null || \"\".equals(vlan)) {\n                    continue;\n                }\n                String vlanUri = BroadcastDomainType.Vlan.toUri(vlan).toString();\n                pstmt = conn.prepareStatement(\"update `cloud`.`vlan` set vlan_id=? where id=?\");\n                pstmt.setString(1, vlanUri);\n                pstmt.setLong(2, id);\n                pstmt.executeUpdate();\n            }\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to update vlan URIs \", e);\n        } finally {\n            try {\n                if (rs != null) {\n                    rs.close();\n                }\n\n                if (pstmt != null) {\n                    pstmt.close();\n                }\n            } catch (SQLException e) {\n            }\n        }\n        s_logger.debug(\"Done updateing vlan URIs\");\n    }","id":2191,"modified_method":"private void updateVlanUris(Connection conn) {\n        s_logger.debug(\"updating vlan URIs\");\n        try(PreparedStatement selectstatement = conn.prepareStatement(\"SELECT id, vlan_id FROM `cloud`.`vlan` where vlan_id not like '%:%'\");\n            ResultSet results = selectstatement.executeQuery()) {\n\n            while (results.next()) {\n                long id = results.getLong(1);\n                String vlan = results.getString(2);\n                if (vlan == null || \"\".equals(vlan)) {\n                    continue;\n                }\n                String vlanUri = BroadcastDomainType.Vlan.toUri(vlan).toString();\n                try(PreparedStatement updatestatement = conn.prepareStatement(\"update `cloud`.`vlan` set vlan_id=? where id=?\");)\n                {\n                    updatestatement.setString(1, vlanUri);\n                    updatestatement.setLong(2, id);\n                    updatestatement.executeUpdate();\n                } catch (SQLException e) {\n                    throw new CloudRuntimeException(\"Unable to update vlan URI \" + vlanUri + \" for vlan record \" + id, e);\n                }\n            }\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to update vlan URIs \", e);\n        }\n        s_logger.debug(\"Done updateing vlan URIs\");\n    }","commit_id":"39f775c38126bb25a0418f82196caaba463f8c1c","url":"https://github.com/apache/cloudstack"},{"original_method":"private void secondaryIpsAccountAndDomainIdsUpdate(Connection conn) {\n        PreparedStatement pstmt = null;\n        PreparedStatement pstmtVm = null;\n        PreparedStatement pstmtNw = null;\n        PreparedStatement pstmtUpdate = null;\n\n        ResultSet rs1 = null;\n        ResultSet vmRs = null;\n        ResultSet networkRs = null;\n\n        String secondIpsSql = \"SELECT id, vmId, network_id, account_id, domain_id, ip4_address FROM `cloud`.`nic_secondary_ips`\";\n\n        try {\n            pstmt = conn.prepareStatement(secondIpsSql);\n            rs1 = pstmt.executeQuery();\n\n            while(rs1.next()) {\n                long ipId = rs1.getLong(1);\n                long vmId = rs1.getLong(2);\n                long networkId = rs1.getLong(3);\n                long accountId = rs1.getLong(4);\n                long domainId = rs1.getLong(5);\n                String ipAddr = rs1.getString(6);\n\n                pstmtVm = conn.prepareStatement(\"SELECT account_id, domain_id FROM `cloud`.`vm_instance` where id = ?\");\n                pstmtVm.setLong(1,vmId);\n\n                vmRs = pstmtVm.executeQuery();\n\n                if (vmRs.next()) {\n                    long vmAccountId = vmRs.getLong(1);\n                    long vmDomainId = vmRs.getLong(2);\n\n                    if (vmAccountId != accountId && vmAccountId != domainId) {\n                        // update the secondary ip accountid and domainid to vm accountid domainid\n                        // check the network type. If network is shared accountid doaminid needs to be updated in\n                        // in both nic_secondary_ips table and user_ip_address table\n\n                        pstmtUpdate = conn.prepareStatement(\"UPDATE `cloud`.`nic_secondary_ips` SET account_id = ?, domain_id= ? WHERE id = ?\");\n                        pstmtUpdate.setLong(1, vmAccountId);\n                        pstmtUpdate.setLong(2,vmDomainId);\n                        pstmtUpdate.setLong(3,ipId);\n                        pstmtUpdate.executeUpdate();\n                        pstmtUpdate.close();\n\n                        pstmtNw = conn.prepareStatement(\"SELECT guest_type FROM `cloud`.`networks` where id = ?\");\n                        pstmtNw.setLong(1,networkId);\n\n                        networkRs = pstmtNw.executeQuery();\n                        if (networkRs.next()) {\n                            String guesttype = networkRs.getString(1);\n\n                            if (guesttype.equals(Network.GuestType.Shared.toString())) {\n                                pstmtUpdate = conn.prepareStatement(\"UPDATE `cloud`.`user_ip_address` SET account_id = ?, domain_id= ? WHERE public_ip_address = ?\");\n                                pstmtUpdate.setLong(1,vmAccountId);\n                                pstmtUpdate.setLong(2,vmDomainId);\n                                pstmtUpdate.setString(3,ipAddr);\n                                pstmtUpdate.executeUpdate();\n                                pstmtUpdate.close();\n\n                            }\n                        }\n                                networkRs.close();\n                        networkRs = null;\n                                pstmtNw.close();\n                        pstmtNw = null;\n                    }\n                } //if\n\n                pstmtVm.close();\n                pstmtVm = null;\n                        vmRs.close();\n                vmRs = null;\n            } // while\n\n\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Exception while Moving private zone information to dedicated resources\", e);\n        } finally {\n\n            if (pstmt != null) {\n                try {\n                    pstmt.close();\n\n                } catch (SQLException e) {\n                }\n            }\n\n\n            if (rs1 != null) {\n                try {\n                    rs1.close();\n                } catch (SQLException e) {\n                }\n            }\n\n\n\n            if (pstmtVm != null) {\n                try {\n                    pstmtVm.close();\n                } catch (SQLException e) {\n                }\n            }\n\n            if (vmRs != null) {\n                try {\n                    vmRs.close();\n                } catch (SQLException e) {\n                }\n            }\n\n\n\n            if (pstmtNw != null) {\n                try {\n                    pstmtNw.close();\n\n                } catch (SQLException e) {\n                }\n            }\n\n\n            if (networkRs != null) {\n                try {\n                    networkRs.close();\n                } catch (SQLException e) {\n                }\n            }\n        }\n        s_logger.debug(\"Done updating vm nic secondary ip  account and domain ids\");\n    }","id":2192,"modified_method":"private void secondaryIpsAccountAndDomainIdsUpdate(Connection conn) {\n        String secondIpsSql = \"SELECT id, vmId, network_id, account_id, domain_id, ip4_address FROM `cloud`.`nic_secondary_ips`\";\n\n        try (PreparedStatement pstmt = conn.prepareStatement(secondIpsSql);\n             ResultSet rs1 = pstmt.executeQuery();\n            ) {\n            while(rs1.next()) {\n                long ipId = rs1.getLong(1);\n                long vmId = rs1.getLong(2);\n                long networkId = rs1.getLong(3);\n                long accountId = rs1.getLong(4);\n                long domainId = rs1.getLong(5);\n                String ipAddr = rs1.getString(6);\n\n                try(PreparedStatement pstmtVm = conn.prepareStatement(\"SELECT account_id, domain_id FROM `cloud`.`vm_instance` where id = ?\");) {\n                    pstmtVm.setLong(1,vmId);\n\n                    try(ResultSet vmRs = pstmtVm.executeQuery();) {\n\n                        if (vmRs.next()) {\n                            long vmAccountId = vmRs.getLong(1);\n                            long vmDomainId = vmRs.getLong(2);\n\n                            if (vmAccountId != accountId && vmAccountId != domainId) {\n                                // update the secondary ip accountid and domainid to vm accountid domainid\n                                // check the network type. If network is shared accountid doaminid needs to be updated in\n                                // in both nic_secondary_ips table and user_ip_address table\n\n                                try(PreparedStatement pstmtUpdate = conn.prepareStatement(\"UPDATE `cloud`.`nic_secondary_ips` SET account_id = ?, domain_id= ? WHERE id = ?\");) {\n                                    pstmtUpdate.setLong(1, vmAccountId);\n                                    pstmtUpdate.setLong(2,vmDomainId);\n                                    pstmtUpdate.setLong(3,ipId);\n                                    pstmtUpdate.executeUpdate();\n                                } catch (SQLException e) {\n                                    throw new CloudRuntimeException(\"Exception while updating secondary ip for nic \" + ipId, e);\n                                }\n\n                                try(PreparedStatement pstmtNw = conn.prepareStatement(\"SELECT guest_type FROM `cloud`.`networks` where id = ?\");) {\n                                    pstmtNw.setLong(1,networkId);\n\n                                    try(ResultSet networkRs = pstmtNw.executeQuery();) {\n                                        if (networkRs.next()) {\n                                            String guesttype = networkRs.getString(1);\n\n                                            if (guesttype.equals(Network.GuestType.Shared.toString())) {\n                                                try(PreparedStatement pstmtUpdate = conn.prepareStatement(\"UPDATE `cloud`.`user_ip_address` SET account_id = ?, domain_id= ? WHERE public_ip_address = ?\");) {\n                                                    pstmtUpdate.setLong(1,vmAccountId);\n                                                    pstmtUpdate.setLong(2,vmDomainId);\n                                                    pstmtUpdate.setString(3,ipAddr);\n                                                    pstmtUpdate.executeUpdate();\n                                                } catch (SQLException e) {\n                                                    throw new CloudRuntimeException(\"Exception while updating public ip  \" + ipAddr, e);\n                                                }\n                                            }\n                                        }\n                                    } catch (SQLException e) {\n                                        throw new CloudRuntimeException(\"Exception while retrieving guest type for network \" + networkId, e);\n                                    }\n\n                                } catch (SQLException e) {\n                                    throw new CloudRuntimeException(\"Exception while retrieving guest type for network \" + networkId, e);\n                                }\n                            } // if\n                        } // if\n                    }\n                }\n            } // while\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Exception while Moving private zone information to dedicated resources\", e);\n        }\n        s_logger.debug(\"Done updating vm nic secondary ip  account and domain ids\");\n    }","commit_id":"39f775c38126bb25a0418f82196caaba463f8c1c","url":"https://github.com/apache/cloudstack"},{"original_method":"private void addExtractTemplateAndVolumeColumns(Connection conn) {\n        PreparedStatement pstmt = null;\n        ResultSet rs = null;\n\n        try {\n\n            // Add download_url_created, download_url to template_store_ref\n            pstmt = conn.prepareStatement(\"SELECT *  FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'cloud' AND TABLE_NAME = 'template_store_ref' AND COLUMN_NAME = 'download_url_created'\");\n            rs = pstmt.executeQuery();\n            if (!rs.next()) {\n                pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`template_store_ref` ADD COLUMN `download_url_created` datetime\");\n                pstmt.executeUpdate();\n\n                pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`template_store_ref` ADD COLUMN `download_url` varchar(255)\");\n                pstmt.executeUpdate();\n            }\n\n            // Add download_url_created to volume_store_ref - note download_url already exists\n            pstmt = conn.prepareStatement(\"SELECT *  FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'cloud' AND TABLE_NAME = 'volume_store_ref' AND COLUMN_NAME = 'download_url_created'\");\n            rs = pstmt.executeQuery();\n            if (!rs.next()) {\n                pstmt = conn.prepareStatement(\"ALTER TABLE `cloud`.`volume_store_ref` ADD COLUMN `download_url_created` datetime\");\n                pstmt.executeUpdate();\n            }\n\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Adding columns for Extract Template And Volume functionality failed\");\n        }\n    }","id":2193,"modified_method":"private void addExtractTemplateAndVolumeColumns(Connection conn) {\n\n        try (PreparedStatement selectTemplateInfostmt = conn.prepareStatement(\"SELECT *  FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'cloud' AND TABLE_NAME = 'template_store_ref' AND COLUMN_NAME = 'download_url_created'\");\n             ResultSet templateInfoResults = selectTemplateInfostmt.executeQuery();\n             PreparedStatement addDownloadUrlCreatedToTemplateStorerefstatement = conn.prepareStatement(\"ALTER TABLE `cloud`.`template_store_ref` ADD COLUMN `download_url_created` datetime\");\n             PreparedStatement addDownloadUrlToTemplateStorerefstatement = conn.prepareStatement(\"ALTER TABLE `cloud`.`template_store_ref` ADD COLUMN `download_url` varchar(255)\");\n             PreparedStatement selectVolumeInfostmt = conn.prepareStatement(\"SELECT *  FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'cloud' AND TABLE_NAME = 'volume_store_ref' AND COLUMN_NAME = 'download_url_created'\");\n             ResultSet volumeInfoResults = selectVolumeInfostmt.executeQuery();\n             PreparedStatement addDownloadUrlCreatedToVolumeStorerefstatement = conn.prepareStatement(\"ALTER TABLE `cloud`.`volume_store_ref` ADD COLUMN `download_url_created` datetime\");\n            ) {\n\n            // Add download_url_created, download_url to template_store_ref\n            if (!templateInfoResults.next()) {\n                addDownloadUrlCreatedToTemplateStorerefstatement.executeUpdate();\n                addDownloadUrlToTemplateStorerefstatement.executeUpdate();\n            }\n\n            // Add download_url_created to volume_store_ref - note download_url already exists\n            if (!volumeInfoResults.next()) {\n                addDownloadUrlCreatedToVolumeStorerefstatement.executeUpdate();\n            }\n\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Adding columns for Extract Template And Volume functionality failed\");\n        }\n    }","commit_id":"39f775c38126bb25a0418f82196caaba463f8c1c","url":"https://github.com/apache/cloudstack"},{"original_method":"private void encryptStoragePoolUserInfo(Connection conn) {\n        List<PreparedStatement> listOfStatements = new ArrayList<PreparedStatement>();\n        try {\n            PreparedStatement preparedStatement = conn.prepareStatement(\"SELECT id, user_info FROM `cloud`.`storage_pool` WHERE user_info IS NOT NULL\");\n            listOfStatements.add(preparedStatement);\n            ResultSet resultSet = preparedStatement.executeQuery();\n            while (resultSet.next()) {\n                long id = resultSet.getLong(1);\n                String userInfo = resultSet.getString(2);\n                String encryptedUserInfo = DBEncryptionUtil.encrypt(userInfo);\n                preparedStatement = conn.prepareStatement(\"UPDATE `cloud`.`storage_pool` SET user_info=? WHERE id=?\");\n                listOfStatements.add(preparedStatement);\n                if (encryptedUserInfo == null)\n                    preparedStatement.setNull(1, 12);\n                else {\n                    preparedStatement.setBytes(1, encryptedUserInfo.getBytes(\"UTF-8\"));\n                }\n                preparedStatement.setLong(2, id);\n                preparedStatement.executeUpdate();\n                preparedStatement.close();\n            }\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable encrypt storage pool user info \", e);\n        } catch (UnsupportedEncodingException e) {\n            throw new CloudRuntimeException(\"Unable encrypt storage pool user info \", e);\n        } finally {\n            TransactionLegacy.closePstmts(listOfStatements);\n        }\n        s_logger.debug(\"Done encrypting storage_pool's user_info column\");\n    }","id":2194,"modified_method":"private void encryptStoragePoolUserInfo(Connection conn) {\n        List<PreparedStatement> listOfStatements = new ArrayList<PreparedStatement>();\n        try (\n                PreparedStatement selectStatement = conn.prepareStatement(\"SELECT id, user_info FROM `cloud`.`storage_pool` WHERE user_info IS NOT NULL\");\n                ResultSet resultSet = selectStatement.executeQuery();\n            ) {\n            while (resultSet.next()) {\n                long id = resultSet.getLong(1);\n                String userInfo = resultSet.getString(2);\n                String encryptedUserInfo = DBEncryptionUtil.encrypt(userInfo);\n                try (PreparedStatement preparedStatement = conn.prepareStatement(\"UPDATE `cloud`.`storage_pool` SET user_info=? WHERE id=?\");) {\n                    listOfStatements.add(preparedStatement);\n                    if (encryptedUserInfo == null)\n                        preparedStatement.setNull(1, 12);\n                    else {\n                        preparedStatement.setBytes(1, encryptedUserInfo.getBytes(\"UTF-8\"));\n                    }\n                    preparedStatement.setLong(2, id);\n                    preparedStatement.executeUpdate();\n                }\n            }\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable encrypt storage pool user info \", e);\n        } catch (UnsupportedEncodingException e) {\n            throw new CloudRuntimeException(\"Unable encrypt storage pool user info \", e);\n        }\n        s_logger.debug(\"Done encrypting storage_pool's user_info column\");\n    }","commit_id":"2f0813aa3ecd0f99815b5ecd4e9cd40dc165a097","url":"https://github.com/apache/cloudstack"},{"original_method":"private void encryptKeyInKeyStore(Connection conn) {\n        PreparedStatement selectStatement = null;\n        ResultSet selectResultSet = null;\n        PreparedStatement updateStatement = null;\n        try {\n            selectStatement = conn.prepareStatement(\"SELECT ks.id, ks.key FROM cloud.keystore ks WHERE ks.key IS NOT null\");\n            selectResultSet = selectStatement.executeQuery();\n            while (selectResultSet.next()) {\n                Long keyId = selectResultSet.getLong(1);\n                String preSharedKey = selectResultSet.getString(2);\n                updateStatement = conn.prepareStatement(\"UPDATE cloud.keystore ks SET ks.key = ? WHERE ks.id = ?\");\n                updateStatement.setString(1, DBEncryptionUtil.encrypt(preSharedKey));\n                updateStatement.setLong(2, keyId);\n                updateStatement.executeUpdate();\n                updateStatement.close();\n            }\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Exception while encrypting key column in keystore table\", e);\n        } finally {\n            if (selectResultSet != null)\n                try {\n                    selectResultSet.close();\n                } catch (SQLException e) {\n                }\n            if (selectStatement != null)\n                try {\n                    selectStatement.close();\n                } catch (SQLException e) {\n                }\n            if (updateStatement != null)\n                try {\n                    updateStatement.close();\n                } catch (SQLException e) {\n                }\n        }\n        s_logger.debug(\"Done encrypting keystore's key column\");\n    }","id":2195,"modified_method":"private void encryptKeyInKeyStore(Connection conn) {\n        try (\n                PreparedStatement selectStatement = conn.prepareStatement(\"SELECT ks.id, ks.key FROM cloud.keystore ks WHERE ks.key IS NOT null\");\n                ResultSet selectResultSet = selectStatement.executeQuery();\n            ) {\n            while (selectResultSet.next()) {\n                Long keyId = selectResultSet.getLong(1);\n                String preSharedKey = selectResultSet.getString(2);\n                try (PreparedStatement updateStatement = conn.prepareStatement(\"UPDATE cloud.keystore ks SET ks.key = ? WHERE ks.id = ?\");) {\n                    updateStatement.setString(1, DBEncryptionUtil.encrypt(preSharedKey));\n                    updateStatement.setLong(2, keyId);\n                    updateStatement.executeUpdate();\n                }\n            }\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Exception while encrypting key column in keystore table\", e);\n        }\n        s_logger.debug(\"Done encrypting keystore's key column\");\n    }","commit_id":"2f0813aa3ecd0f99815b5ecd4e9cd40dc165a097","url":"https://github.com/apache/cloudstack"},{"original_method":"private void encryptIpSecPresharedKeysOfRemoteAccessVpn(Connection conn) {\n        PreparedStatement selectStatement = null;\n        PreparedStatement updateStatement = null;\n        ResultSet resultSet = null;\n        try {\n            selectStatement = conn.prepareStatement(\"SELECT id, ipsec_psk FROM `cloud`.`remote_access_vpn`\");\n            resultSet = selectStatement.executeQuery();\n            while (resultSet.next()) {\n                Long rowId = resultSet.getLong(1);\n                String preSharedKey = resultSet.getString(2);\n                try {\n                    preSharedKey = DBEncryptionUtil.decrypt(preSharedKey);\n                } catch (EncryptionOperationNotPossibleException ignored) {\n                    s_logger.debug(\"The ipsec_psk preshared key id=\" + rowId + \"in remote_access_vpn is not encrypted, encrypting it.\");\n                }\n                updateStatement = conn.prepareStatement(\"UPDATE `cloud`.`remote_access_vpn` SET ipsec_psk=? WHERE id=?\");\n                updateStatement.setString(1, DBEncryptionUtil.encrypt(preSharedKey));\n                updateStatement.setLong(2, rowId);\n                updateStatement.executeUpdate();\n                updateStatement.close();\n            }\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to update the remote_access_vpn's preshared key ipsec_psk column\", e);\n        } finally {\n            try {\n                if (resultSet != null) {\n                    resultSet.close();\n                }\n                if ((selectStatement != null) && (!selectStatement.isClosed())) {\n                    selectStatement.close();\n                }\n                if ((updateStatement != null) && (!updateStatement.isClosed()))\n                    updateStatement.close();\n            } catch (SQLException e) {\n            }\n        }\n        s_logger.debug(\"Done encrypting remote_access_vpn's ipsec_psk column\");\n    }","id":2196,"modified_method":"private void encryptIpSecPresharedKeysOfRemoteAccessVpn(Connection conn) {\n        try (\n                PreparedStatement selectStatement = conn.prepareStatement(\"SELECT id, ipsec_psk FROM `cloud`.`remote_access_vpn`\");\n                ResultSet resultSet = selectStatement.executeQuery();\n            ) {\n            while (resultSet.next()) {\n                Long rowId = resultSet.getLong(1);\n                String preSharedKey = resultSet.getString(2);\n                try {\n                    preSharedKey = DBEncryptionUtil.decrypt(preSharedKey);\n                } catch (EncryptionOperationNotPossibleException ignored) {\n                    s_logger.debug(\"The ipsec_psk preshared key id=\" + rowId + \"in remote_access_vpn is not encrypted, encrypting it.\");\n                }\n                try (PreparedStatement updateStatement = conn.prepareStatement(\"UPDATE `cloud`.`remote_access_vpn` SET ipsec_psk=? WHERE id=?\");) {\n                    updateStatement.setString(1, DBEncryptionUtil.encrypt(preSharedKey));\n                    updateStatement.setLong(2, rowId);\n                    updateStatement.executeUpdate();\n                }\n            }\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to update the remote_access_vpn's preshared key ipsec_psk column\", e);\n        }\n        s_logger.debug(\"Done encrypting remote_access_vpn's ipsec_psk column\");\n    }","commit_id":"2f0813aa3ecd0f99815b5ecd4e9cd40dc165a097","url":"https://github.com/apache/cloudstack"},{"original_method":"private void updateUserVmDetailsWithNicAdapterType(Connection conn) {\n        PreparedStatement insertPstmt = null;\n        try {\n            insertPstmt = conn.prepareStatement(\"INSERT INTO `cloud`.`user_vm_details`(vm_id,name,value,display) select v.id as vm_id, details.name, details.value, details.display from `cloud`.`vm_instance` as v, `cloud`.`vm_template_details` as details  where v.removed is null and v.vm_template_id=details.template_id and details.name='nicAdapter' and details.template_id in (select id from `cloud`.`vm_template` where hypervisor_type = 'vmware') and v.id not in (select vm_id from `cloud`.`user_vm_details` where name='nicAdapter');\");\n            insertPstmt.executeUpdate();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Failed to update user_vm_details table with nicAdapter entries by copying from vm_template_detail table\", e);\n        } finally {\n            try {\n                if (insertPstmt != null)\n                    insertPstmt.close();\n            } catch (SQLException e) {\n            }\n        }\n        s_logger.debug(\"Done. Updated user_vm_details table with nicAdapter entries by copying from vm_template_detail table. This affects only VM/templates with hypervisor_type as VMware.\");\n    }","id":2197,"modified_method":"private void updateUserVmDetailsWithNicAdapterType(Connection conn) {\n        try (PreparedStatement insertPstmt = conn.prepareStatement(\"INSERT INTO `cloud`.`user_vm_details`(vm_id,name,value,display) select v.id as vm_id, details.name, details.value, details.display from `cloud`.`vm_instance` as v, `cloud`.`vm_template_details` as details  where v.removed is null and v.vm_template_id=details.template_id and details.name='nicAdapter' and details.template_id in (select id from `cloud`.`vm_template` where hypervisor_type = 'vmware') and v.id not in (select vm_id from `cloud`.`user_vm_details` where name='nicAdapter');\");) {\n            insertPstmt.executeUpdate();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Failed to update user_vm_details table with nicAdapter entries by copying from vm_template_detail table\", e);\n        }\n        s_logger.debug(\"Done. Updated user_vm_details table with nicAdapter entries by copying from vm_template_detail table. This affects only VM/templates with hypervisor_type as VMware.\");\n    }","commit_id":"2f0813aa3ecd0f99815b5ecd4e9cd40dc165a097","url":"https://github.com/apache/cloudstack"},{"original_method":"private void upgradeVMWareLocalStorage(Connection conn) {\n        PreparedStatement updatePstmt = null;\n        try {\n            updatePstmt = conn.prepareStatement(\"UPDATE storage_pool SET pool_type='VMFS',host_address=@newaddress WHERE (@newaddress:=concat('VMFS datastore: ', path)) IS NOT NULL AND scope = 'HOST' AND pool_type = 'LVM' AND id IN (SELECT * FROM (SELECT storage_pool.id FROM storage_pool,cluster WHERE storage_pool.cluster_id = cluster.id AND cluster.hypervisor_type='VMware') AS t);\");\n            updatePstmt.executeUpdate();\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to upgrade VMWare local storage pool type\", e);\n        } finally {\n            try {\n                if (updatePstmt != null)\n                    updatePstmt.close();\n            } catch (SQLException e) {\n            }\n            s_logger.debug(\"Done, upgraded VMWare local storage pool type to VMFS and host_address to the VMFS format\");\n        }\n    }","id":2198,"modified_method":"private void upgradeVMWareLocalStorage(Connection conn) {\n        try (PreparedStatement updatePstmt = conn.prepareStatement(\"UPDATE storage_pool SET pool_type='VMFS',host_address=@newaddress WHERE (@newaddress:=concat('VMFS datastore: ', path)) IS NOT NULL AND scope = 'HOST' AND pool_type = 'LVM' AND id IN (SELECT * FROM (SELECT storage_pool.id FROM storage_pool,cluster WHERE storage_pool.cluster_id = cluster.id AND cluster.hypervisor_type='VMware') AS t);\");) {\n            updatePstmt.executeUpdate();\n            s_logger.debug(\"Done, upgraded VMWare local storage pool type to VMFS and host_address to the VMFS format\");\n        } catch (SQLException e) {\n            throw new CloudRuntimeException(\"Unable to upgrade VMWare local storage pool type\", e);\n        }\n    }","commit_id":"2f0813aa3ecd0f99815b5ecd4e9cd40dc165a097","url":"https://github.com/apache/cloudstack"},{"original_method":"public void testHex() {\n    String text = \"0xacvfgt\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getWordSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{});\n  }","id":2199,"modified_method":"public void testHex() {\n    String text = \"0xacvfgt\";\n    correctListToCheck(SplitterFactory.getInstance().getWordSplitter(), text);\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testSemicolonSeparatedList() {\n    String text = \"properties;test;properties\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getPlainTextSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"properties\", \"test\", \"properties\"});\n\n  }","id":2200,"modified_method":"public void testSemicolonSeparatedList() {\n    String text = \"properties;test;properties\";\n    correctListToCheck(SplitterFactory.getInstance().getPlainTextSplitter(), text, \"properties\", \"test\", \"properties\");\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testUrl() {\n    String text = \"http://www.jetbrains.com/idea\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getPlainTextSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{});\n\n  }","id":2201,"modified_method":"public void testUrl() {\n    String text = \"http://www.jetbrains.com/idea\";\n    correctListToCheck(SplitterFactory.getInstance().getPlainTextSplitter(), text);\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testCommentWithHtmlTagsAndAtr() {\n    String text = \"<!-- <li style='color:red;'>something go here<\/li> foooo <li style='color:red;'>barrrr<\/li> <p> text text -->\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getCommentSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"something\", \"here\", \"foooo\", \"barrrr\", \"text\", \"text\"});\n\n  }","id":2202,"modified_method":"public void testCommentWithHtmlTagsAndAtr() {\n    String text = \"<!-- <li style='color:red;'>something go here<\/li> foooo <li style='color:red;'>barrrr<\/li> <p> text text -->\";\n    correctListToCheck(SplitterFactory.getInstance().getCommentSplitter(), text, \"something\", \"here\", \"foooo\", \"barrrr\", \"text\", \"text\");\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testWordBeforeDelimiter() {\n    String text = \"badd,\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getPlainTextSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"badd\"});\n\n  }","id":2203,"modified_method":"public void testWordBeforeDelimiter() {\n    String text = \"badd,\";\n    correctListToCheck(SplitterFactory.getInstance().getPlainTextSplitter(), text, \"badd\");\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testWordUpperCasedWithUmlauts() {\n    String text = \"RECHTSB\\u00DCNDIG\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getPlainTextSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{text});\n\n  }","id":2204,"modified_method":"public void testWordUpperCasedWithUmlauts() {\n    String text = \"RECHTSB\\u00DCNDIG\";\n    correctListToCheck(SplitterFactory.getInstance().getPlainTextSplitter(), text, text);\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testWordWithApostrophe4() {\n    String text = \"we'll\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getStringLiteralSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"we'll\"});\n  }","id":2205,"modified_method":"public void testWordWithApostrophe4() {\n    String text = \"we'll\";\n    correctListToCheck(SplitterFactory.getInstance().getStringLiteralSplitter(), text, \"we'll\");\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testCheckXmlIgnored() {\n    String text = \"abcdef\" + new String(new char[]{0xDC00}) + \"test\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getPlainTextSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{});\n  }","id":2206,"modified_method":"public void testCheckXmlIgnored() {\n    String text = \"abcdef\" + new String(new char[]{0xDC00}) + \"test\";\n    correctListToCheck(SplitterFactory.getInstance().getPlainTextSplitter(), text);\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testWordUpperCasedWithUmlautsInTheBeginning() {\n    String text = \"\\u00DCNDIG\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getPlainTextSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{text});\n\n  }","id":2207,"modified_method":"public void testWordUpperCasedWithUmlautsInTheBeginning() {\n    String text = \"\\u00DCNDIG\";\n    correctListToCheck(SplitterFactory.getInstance().getPlainTextSplitter(), text, text);\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private static List<String> wordsToCheck(List<CheckArea> toCheck, String text) {\n    if (text == null || toCheck == null) return null;\n    List<String> words = new ArrayList<String>();\n    for (CheckArea area : toCheck) {\n      words.add(area.getWord());\n    }\n    return (words.size() != 0) ? words : null;\n  }","id":2208,"modified_method":"private static List<String> wordsToCheck(Splitter splitter, final String text) {\n    final List<String> words = new ArrayList<String>();\n    splitter.split(text, TextRange.allOf(text), new Consumer<TextRange>() {\n      @Override\n      public void consume(TextRange textRange) {\n        words.add(textRange.substring(text));\n      }\n    });\n    return words;\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testWords() {\n    String text = \"first-last\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getIdentifierSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"first\", \"last\"});\n  }","id":2209,"modified_method":"public void testWords() {\n    String text = \"first-last\";\n    correctListToCheck(SplitterFactory.getInstance().getIdentifierSplitter(), text, \"first\", \"last\");\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testPhpVariableCorrect() {\n    String text = \"$this_this$this\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getIdentifierSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"this\", \"this\", \"this\"});\n\n  }","id":2210,"modified_method":"public void testPhpVariableCorrect() {\n    String text = \"$this_this$this\";\n    correctListToCheck(SplitterFactory.getInstance().getIdentifierSplitter(), text, \"this\", \"this\", \"this\");\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testPhpVariableCorrectSimple() {\n    String text = \"$this\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getIdentifierSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"this\"});\n\n  }","id":2211,"modified_method":"public void testPhpVariableCorrectSimple() {\n    String text = \"$this\";\n    correctListToCheck(SplitterFactory.getInstance().getIdentifierSplitter(), text, \"this\");\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testWordInCapsAfterDelimiter() {\n    String text = \",BADD\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getPlainTextSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"BADD\"});\n\n  }","id":2212,"modified_method":"public void testWordInCapsAfterDelimiter() {\n    String text = \",BADD\";\n    correctListToCheck(SplitterFactory.getInstance().getPlainTextSplitter(), text, \"BADD\");\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testComplexWordsInQuotes() {\n    String text = \"\\\"test-customer's'\\\"\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getPlainTextSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"test\", \"customer's\"});\n  }","id":2213,"modified_method":"public void testComplexWordsInQuotes() {\n    String text = \"\\\"test-customer's'\\\"\";\n    correctListToCheck(SplitterFactory.getInstance().getPlainTextSplitter(), text, \"test\", \"customer's\");\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testWordWithApostrophe5() {\n    String text = \"I'm you're we'll\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getStringLiteralSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"you're\", \"we'll\"});\n  }","id":2214,"modified_method":"public void testWordWithApostrophe5() {\n    String text = \"I'm you're we'll\";\n    correctListToCheck(SplitterFactory.getInstance().getStringLiteralSplitter(), text, \"you're\", \"we'll\");\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testEmail() {\n    String text = \"some text with email (shkate.test@gmail.com) inside\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getStringLiteralSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"some\", \"text\", \"with\", \"email\", \"inside\"});\n\n  }","id":2215,"modified_method":"public void testEmail() {\n    String text = \"some text with email (shkate.test@gmail.com) inside\";\n    correctListToCheck(SplitterFactory.getInstance().getStringLiteralSplitter(), text, \"some\", \"text\", \"with\", \"email\", \"inside\");\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testCamelCaseInXmlComments() {\n    String text = \"<!--specialCase symbols-->\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getCommentSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"special\", \"Case\", \"symbols\"});\n\n  }","id":2216,"modified_method":"public void testCamelCaseInXmlComments() {\n    String text = \"<!--specialCase symbols-->\";\n    correctListToCheck(SplitterFactory.getInstance().getCommentSplitter(), text, \"special\", \"Case\", \"symbols\");\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void correctListToCheck(List<CheckArea> toCheck, String text, @NotNull String[] expected) {\n    List<String> words = wordsToCheck(toCheck, text);\n    List<String> expectedWords = Arrays.asList(expected);\n    Assert.assertEquals(\"Splitting:'\" + text + \"'\", expectedWords.toString(), words!=null ? words.toString() : \"[]\");\n  }","id":2217,"modified_method":"private static void correctListToCheck(Splitter splitter, String text, @NotNull String... expected) {\n    List<String> words = wordsToCheck(splitter, text);\n    List<String> expectedWords = Arrays.asList(expected);\n    Assert.assertEquals(\"Splitting:'\" + text + \"'\", expectedWords.toString(), words!=null ? words.toString() : \"[]\");\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testCapitalizedWithShortAndLongWords() {\n    String text = \"IntelliJTestTest\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getIdentifierSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"Intelli\", \"Test\", \"Test\"});\n  }","id":2218,"modified_method":"public void testCapitalizedWithShortAndLongWords() {\n    String text = \"IntelliJTestTest\";\n    correctListToCheck(SplitterFactory.getInstance().getIdentifierSplitter(), text, \"Intelli\", \"Test\", \"Test\");\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testProperties1() {\n    String text = \"properties.test.properties\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getPropertiesSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"properties\", \"test\", \"properties\"});\n\n  }","id":2219,"modified_method":"public void testProperties1() {\n    String text = \"properties.test.properties\";\n    correctListToCheck(SplitterFactory.getInstance().getPropertiesSplitter(), text, \"properties\", \"test\", \"properties\");\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testCommentsWithAbr() {\n    String text = \"<!--JSPTestClass-->\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getCommentSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"Test\", \"Class\"});\n\n  }","id":2220,"modified_method":"public void testCommentsWithAbr() {\n    String text = \"<!--JSPTestClass-->\";\n    correctListToCheck(SplitterFactory.getInstance().getCommentSplitter(), text, \"Test\", \"Class\");\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testSplitCamelCaseWithUpperCasedWord() {\n    String text = \"camelCaseJSP\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getIdentifierSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"camel\", \"Case\"});\n  }","id":2221,"modified_method":"public void testSplitCamelCaseWithUpperCasedWord() {\n    String text = \"camelCaseJSP\";\n    correctListToCheck(SplitterFactory.getInstance().getIdentifierSplitter(), text, \"camel\", \"Case\");\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testXmlComments() {\n    String text = \"<!--special symbols-->\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getCommentSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"special\", \"symbols\"});\n\n  }","id":2222,"modified_method":"public void testXmlComments() {\n    String text = \"<!--special symbols-->\";\n    correctListToCheck(SplitterFactory.getInstance().getCommentSplitter(), text, \"special\", \"symbols\");\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testHexInStringLiteral() {\n    String text = \"qwerty 0x12acfgt test\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getStringLiteralSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"qwerty\", \"test\"});\n  }","id":2223,"modified_method":"public void testHexInStringLiteral() {\n    String text = \"qwerty 0x12acfgt test\";\n    correctListToCheck(SplitterFactory.getInstance().getStringLiteralSplitter(), text, \"qwerty\", \"test\");\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testWordInCapsAfterDelimiter3() {\n    String text = \";BADD;\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getPlainTextSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"BADD\"});\n\n  }","id":2224,"modified_method":"public void testWordInCapsAfterDelimiter3() {\n    String text = \";BADD;\";\n    correctListToCheck(SplitterFactory.getInstance().getPlainTextSplitter(), text, \"BADD\");\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testArrays() {\n    String text = \"Token[]\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getIdentifierSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"Token\"});\n  }","id":2225,"modified_method":"public void testArrays() {\n    String text = \"Token[]\";\n    correctListToCheck(SplitterFactory.getInstance().getIdentifierSplitter(), text, \"Token\");\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testCapitalizedWithShortWords() {\n    String text = \"IntelliJ\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getIdentifierSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"Intelli\"});\n  }","id":2226,"modified_method":"public void testCapitalizedWithShortWords() {\n    String text = \"IntelliJ\";\n    correctListToCheck(SplitterFactory.getInstance().getIdentifierSplitter(), text, \"Intelli\");\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testPropertiesWithCamelCase() {\n    String text = \"upgrade.testCommit.propertiesSomeNews\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getPropertiesSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"upgrade\", \"test\", \"Commit\", \"properties\", \"Some\", \"News\"});\n\n  }","id":2227,"modified_method":"public void testPropertiesWithCamelCase() {\n    String text = \"upgrade.testCommit.propertiesSomeNews\";\n    correctListToCheck(SplitterFactory.getInstance().getPropertiesSplitter(), text, \"upgrade\", \"test\", \"Commit\", \"properties\", \"Some\",\n                       \"News\");\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testStringLiterals() {\n    String text = \"test\\ntest\\n\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getStringLiteralSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"test\", \"test\"});\n\n  }","id":2228,"modified_method":"public void testStringLiterals() {\n    String text = \"test\\ntest\\n\";\n    correctListToCheck(SplitterFactory.getInstance().getStringLiteralSplitter(), text, \"test\", \"test\");\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testColorUCSC() {\n    String text = \"#AABBFF;\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getWordSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{});\n\n  }","id":2229,"modified_method":"public void testColorUCSC() {\n    String text = \"#AABBFF;\";\n    correctListToCheck(SplitterFactory.getInstance().getWordSplitter(), text);\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testWordInCapsBeforeDelimiter() {\n    String text = \"BADD,\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getPlainTextSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"BADD\"});\n\n  }","id":2230,"modified_method":"public void testWordInCapsBeforeDelimiter() {\n    String text = \"BADD,\";\n    correctListToCheck(SplitterFactory.getInstance().getPlainTextSplitter(), text, \"BADD\");\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testWordInCapsAfterDelimiter2() {\n    String text = \"BADD;\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getPlainTextSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"BADD\"});\n\n  }","id":2231,"modified_method":"public void testWordInCapsAfterDelimiter2() {\n    String text = \"BADD;\";\n    correctListToCheck(SplitterFactory.getInstance().getPlainTextSplitter(), text, \"BADD\");\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testWordsInSingleQuotesWithSep() {\n    String text = \"'test-something'\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getStringLiteralSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"test\", \"something\"});\n  }","id":2232,"modified_method":"public void testWordsInSingleQuotesWithSep() {\n    String text = \"'test-something'\";\n    correctListToCheck(SplitterFactory.getInstance().getStringLiteralSplitter(), text, \"test\", \"something\");\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testSplitSimpleCamelCase() {\n    String text = \"simpleCamelCase\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getIdentifierSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"simple\", \"Camel\", \"Case\"});\n  }","id":2233,"modified_method":"public void testSplitSimpleCamelCase() {\n    String text = \"simpleCamelCase\";\n    correctListToCheck(SplitterFactory.getInstance().getIdentifierSplitter(), text, \"simple\", \"Camel\", \"Case\");\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testCommentsWithWordsWithNumbers() {\n    String text = \"<!--specialCase456 symbols-->\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getCommentSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"special\", \"Case\", \"symbols\"});\n\n  }","id":2234,"modified_method":"public void testCommentsWithWordsWithNumbers() {\n    String text = \"<!--specialCase456 symbols-->\";\n    correctListToCheck(SplitterFactory.getInstance().getCommentSplitter(), text, \"special\", \"Case\", \"symbols\");\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testColorLC() {\n    String text = \"#fff\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getAttributeValueSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{});\n\n  }","id":2235,"modified_method":"public void testColorLC() {\n    String text = \"#fff\";\n    correctListToCheck(SplitterFactory.getInstance().getAttributeValueSplitter(), text);\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testIdentifiersWithNumbersInside() {\n    String text = \"result1result\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getIdentifierSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"result\",\"result\"});\n  }","id":2236,"modified_method":"public void testIdentifiersWithNumbersInside() {\n    String text = \"result1result\";\n    correctListToCheck(SplitterFactory.getInstance().getIdentifierSplitter(), text, \"result\",\"result\");\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testWordWithApostrophe3() {\n    String text = \"customer's\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getStringLiteralSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"customer's\"});\n  }","id":2237,"modified_method":"public void testWordWithApostrophe3() {\n    String text = \"customer's\";\n    correctListToCheck(SplitterFactory.getInstance().getStringLiteralSplitter(), text, \"customer's\");\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testTCData() {\n    final InputStream stream = SplitterTest.class.getResourceAsStream(\"contents.txt\");\n    String text = convertStreamToString(stream);\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getPlainTextSplitter().split(text);\n    List<String> words = wordsToCheck(checkAreas, text);\n    assertNull(words);\n  }","id":2238,"modified_method":"public void testTCData() {\n    final InputStream stream = SplitterTest.class.getResourceAsStream(\"contents.txt\");\n    String text = convertStreamToString(stream);\n    List<String> words = wordsToCheck(SplitterFactory.getInstance().getPlainTextSplitter(), text);\n    assertEquals(0, words.size());\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testWordWithUmlauts() {\n    String text = \"rechtsb\\u00FCndig\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getPlainTextSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{text});\n\n  }","id":2239,"modified_method":"public void testWordWithUmlauts() {\n    String text = \"rechtsb\\u00FCndig\";\n    correctListToCheck(SplitterFactory.getInstance().getPlainTextSplitter(), text, text);\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testColorUCSurrounded() {\n    String text = \"\\\"#AABBFF\\\"\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getWordSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{});\n\n  }","id":2240,"modified_method":"public void testColorUCSurrounded() {\n    String text = \"\\\"#AABBFF\\\"\";\n    correctListToCheck(SplitterFactory.getInstance().getWordSplitter(), text);\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testColorUC() {\n    String text = \"#AABBFF\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getWordSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{});\n\n  }","id":2241,"modified_method":"public void testColorUC() {\n    String text = \"#AABBFF\";\n    correctListToCheck(SplitterFactory.getInstance().getWordSplitter(), text);\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testIdentifierInSingleQuotes() {\n    String text = \"'fill'\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getIdentifierSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"fill\"});\n  }","id":2242,"modified_method":"public void testIdentifierInSingleQuotes() {\n    String text = \"'fill'\";\n    correctListToCheck(SplitterFactory.getInstance().getIdentifierSplitter(), text, \"fill\");\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testSpecial() {\n    String text = \"test &nbsp; test\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getPlainTextSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"test\", \"test\"});\n\n  }","id":2243,"modified_method":"public void testSpecial() {\n    String text = \"test &nbsp; test\";\n    correctListToCheck(SplitterFactory.getInstance().getPlainTextSplitter(), text, \"test\", \"test\");\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testConstantName() {\n    String text = \"TEST_CONSTANT\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getIdentifierSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"TEST\", \"CONSTANT\"});\n\n  }","id":2244,"modified_method":"public void testConstantName() {\n    String text = \"TEST_CONSTANT\";\n    correctListToCheck(SplitterFactory.getInstance().getIdentifierSplitter(), text, \"TEST\", \"CONSTANT\");\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testJavaComments() {\n    String text = \"/*special symbols*/\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getCommentSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"special\", \"symbols\"});\n\n  }","id":2245,"modified_method":"public void testJavaComments() {\n    String text = \"/*special symbols*/\";\n    correctListToCheck(SplitterFactory.getInstance().getCommentSplitter(), text, \"special\", \"symbols\");\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testWordAfterDelimiter() {\n    String text = \",badd\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getPlainTextSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"badd\"});\n\n  }","id":2246,"modified_method":"public void testWordAfterDelimiter() {\n    String text = \",badd\";\n    correctListToCheck(SplitterFactory.getInstance().getPlainTextSplitter(), text, \"badd\");\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testEmailOnly() {\n    String text = \"shkate123-\\u00DC.test@gmail.com\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getPlainTextSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{});\n\n  }","id":2247,"modified_method":"public void testEmailOnly() {\n    String text = \"shkate123-\\u00DC.test@gmail.com\";\n    correctListToCheck(SplitterFactory.getInstance().getPlainTextSplitter(), text);\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testWordWithApostrophe1() {\n    String text = \"don't check\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getStringLiteralSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"don't\", \"check\"});\n  }","id":2248,"modified_method":"public void testWordWithApostrophe1() {\n    String text = \"don't check\";\n    correctListToCheck(SplitterFactory.getInstance().getStringLiteralSplitter(), text, \"don't\", \"check\");\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testTooShort() {\n    String text = \"bgColor carLight\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getStringLiteralSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"Color\", \"Light\"});\n\n  }","id":2249,"modified_method":"public void testTooShort() {\n    String text = \"bgColor carLight\";\n    correctListToCheck(SplitterFactory.getInstance().getStringLiteralSplitter(), text, \"Color\", \"Light\");\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testWordsWithNumbers() {\n    String text = \"testCamelCase123\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getIdentifierSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"test\", \"Camel\", \"Case\"});\n\n  }","id":2250,"modified_method":"public void testWordsWithNumbers() {\n    String text = \"testCamelCase123\";\n    correctListToCheck(SplitterFactory.getInstance().getIdentifierSplitter(), text, \"test\", \"Camel\", \"Case\");\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testLongConstantName() {\n    String text = \"TEST_VERY_VERY_LONG_AND_COMPLEX_CONSTANT\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getIdentifierSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"TEST\", \"VERY\", \"VERY\", \"LONG\", \"COMPLEX\", \"CONSTANT\"});\n\n  }","id":2251,"modified_method":"public void testLongConstantName() {\n    String text = \"TEST_VERY_VERY_LONG_AND_COMPLEX_CONSTANT\";\n    correctListToCheck(SplitterFactory.getInstance().getIdentifierSplitter(), text, \"TEST\", \"VERY\", \"VERY\", \"LONG\", \"COMPLEX\", \"CONSTANT\");\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testCommentWithHtml() {\n    String text = \"<!--<li>something go here<\/li> <li>next content<\/li> foooo barrrr <p> text -->\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getCommentSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"something\", \"here\", \"next\", \"content\", \"foooo\", \"barrrr\", \"text\"});\n\n  }","id":2252,"modified_method":"public void testCommentWithHtml() {\n    String text = \"<!--<li>something go here<\/li> <li>next content<\/li> foooo barrrr <p> text -->\";\n    correctListToCheck(SplitterFactory.getInstance().getCommentSplitter(), text, \"something\", \"here\", \"next\", \"content\", \"foooo\", \"barrrr\",\n                       \"text\");\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testHexInPlainText() {\n    String text = \"some text 0xacvfgt\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getPlainTextSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"some\", \"text\"});\n  }","id":2253,"modified_method":"public void testHexInPlainText() {\n    String text = \"some text 0xacvfgt\";\n    correctListToCheck(SplitterFactory.getInstance().getPlainTextSplitter(), text, \"some\", \"text\");\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testWordWithApostrophe2() {\n    String text = \"customers'\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getStringLiteralSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"customers\"});\n  }","id":2254,"modified_method":"public void testWordWithApostrophe2() {\n    String text = \"customers'\";\n    correctListToCheck(SplitterFactory.getInstance().getStringLiteralSplitter(), text, \"customers\");\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testCommaSeparatedList() {\n    String text = \"properties,test,properties\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getPlainTextSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"properties\", \"test\", \"properties\"});\n\n  }","id":2255,"modified_method":"public void testCommaSeparatedList() {\n    String text = \"properties,test,properties\";\n    correctListToCheck(SplitterFactory.getInstance().getPlainTextSplitter(), text, \"properties\", \"test\", \"properties\");\n\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void testIdentifiersWithNumbers() {\n    String text = \"result1\";\n    List<CheckArea> checkAreas = SplitterFactory.getInstance().getIdentifierSplitter().split(text);\n    correctListToCheck(checkAreas, text, new String[]{\"result\"});\n  }","id":2256,"modified_method":"public void testIdentifiersWithNumbers() {\n    String text = \"result1\";\n    correctListToCheck(SplitterFactory.getInstance().getIdentifierSplitter(), text, \"result\");\n  }","commit_id":"377e3ef61745143d4b055ef533342b0aec1ba696","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static Vector getPublishableDataSources(int i) {\n        Vector mDataSources = new Vector();\n        try {\n            mDataSources.add(new FedoraDataSource(\"Tufts Digital Library\",\"vue-dl.tccs.tufts.edu\",\"test\",\"test\"));\n            \n        } catch (Exception ex) {\n            System.out.println(\"Datasources can't be loaded\");\n        }\n        \n        /**\n         * Iterator i = dataSources.iterator();\n         * while(i.hasNext() ) {\n         * DataSource mDataSource = (DataSource)i.next();\n         * if(mDataSource.getType() == DataSource.DR_FEDORA)\n         * mDataSources.add(mDataSource);\n         * }\n         */\n        return mDataSources;\n        \n    }","id":2257,"modified_method":"public static Vector getPublishableDataSources(int i) {\n        Vector mDataSources = new Vector();\n        /**\n         * try {\n         * mDataSources.add(new FedoraDataSource(\"Tufts Digital Library\",\"vue-dl.tccs.tufts.edu\",\"test\",\"test\"));\n         *\n         * } catch (Exception ex) {\n         * System.out.println(\"Datasources can't be loaded\");\n         * }\n         **/\n        \n        Enumeration e = dataSourceList.getContents().elements();\n        while(e.hasMoreElements() ) {\n            Object mDataSource = e.nextElement();\n            if(mDataSource instanceof Publishable)\n                mDataSources.add(mDataSource);\n        }\n        \n        return mDataSources;\n        \n    }","commit_id":"3ba6b958f1c9d29142f3b9506b663fdf31282d3d","url":"https://github.com/VUE/VUE"},{"original_method":"public void putEntry(String entryName,File file) throws ZipException, IOException {\n        \n        byte[] buf = new byte[1024]; // buffer for reading file\n        int len;\n        if(zos == null) \n            throw new ZipException(\"IMSCP.putEntry(File file): ZipOutputstream not initialized\");\n        try {\n        ZipEntry ze = new ZipEntry(entryName);\n        zos.putNextEntry(ze);\n        BufferedInputStream fis = new BufferedInputStream(new FileInputStream(file));\n        while ((len = fis.read(buf)) > 0) {\n           zos.write(buf, 0, len);\n        }\n        fis.close();\n        zos.closeEntry();\n        } catch(ZipException ex) {\n           if(!ex.getMessage().startsWith(\"duplicate\")) // ignoring duplicate entries\n               throw ex;\n        }\n    }","id":2258,"modified_method":"public void putEntry(String entryName,File file) throws ZipException, IOException {\n        \n        byte[] buf = new byte[1024]; // buffer for reading file\n        int len;\n        if(zos == null) \n            throw new ZipException(\"IMSCP.putEntry(File file): ZipOutputstream not initialized\");\n        try {\n        ZipEntry ze = new ZipEntry(entryName);\n        zos.putNextEntry(ze);\n        BufferedInputStream fis = new BufferedInputStream(new FileInputStream(file.getAbsolutePath().replaceAll(\"%20\",\" \")));\n        while ((len = fis.read(buf)) > 0) {\n           zos.write(buf, 0, len);\n        }\n        fis.close();\n        zos.closeEntry();\n        } catch(ZipException ex) {\n           if(!ex.getMessage().startsWith(\"duplicate\")) // ignoring duplicate entries\n               throw ex;\n        }\n    }","commit_id":"3ba6b958f1c9d29142f3b9506b663fdf31282d3d","url":"https://github.com/VUE/VUE"},{"original_method":"public void publishCMap() {\n        try {\n            File savedCMap = createIMSCP();\n            /*\n           if(((DataSource)dataSourceComboBox.getSelectedItem()).getType() == DataSource.FILING_LOCAL) {\n            \n       \n                InputStream istream = new BufferedInputStream(new FileInputStream(savedCMap));\n                OutputStream ostream = new BufferedOutputStream(new FileOutputStream(ActionUtil.selectFile(\"IMSCP\",\"zip\")));\n                \n                int fileLength = (int)savedCMap.length();\n                byte bytes[] = new  byte[fileLength];\n                while (istream.read(bytes,0,fileLength) != -1)\n                    ostream.write(bytes,0,fileLength);\n                istream.close();\n                ostream.close();\n            } else {\n                Properties metadata  = VUE.getActiveMap().getMetadata();\n                String pid = getDR().ingest(savedCMap.getName(), \"obj-vue-concept-map-mc.xml\",ZIP_MIME_TYPE, savedCMap, metadata).getIdString();\n                JOptionPane.showMessageDialog(VUE.getInstance(), \"Map successfully exported. Asset ID for Map = \"+pid, \"Map Exported\",JOptionPane.INFORMATION_MESSAGE);\n                System.out.println(\"Exported Map: id = \"+pid);\n                \n            }\n            */\n            \n            this.dispose();\n        } catch (Exception ex) {\n            VueUtil.alert(null, \"Export Not Supported:\"+ex.getMessage(), \"Export Error\");\n            ex.printStackTrace();\n        }\n        \n    }","id":2259,"modified_method":"public void publishCMap() {\n        try {\n            \n            ((Publishable)dataSourceComboBox.getSelectedItem()).publish(Publishable.PUBLISH_CMAP,tufts.vue.VUE.getActiveMap());\n   \n            this.dispose();\n        } catch (Exception ex) {\n            VueUtil.alert(null, \"Export Not Supported:\"+ex.getMessage(), \"Export Error\");\n            ex.printStackTrace();\n        }\n        \n    }","commit_id":"3ba6b958f1c9d29142f3b9506b663fdf31282d3d","url":"https://github.com/VUE/VUE"},{"original_method":"public void publishMap(LWMap map) {\n        \n        try {\n            saveMap(map);\n            Properties metadata = map.getMetadata();\n            \n            String pid = getDR().ingest(activeMapFile.getName() ,\"obj-binary.xml\", VUE_MIME_TYPE,activeMapFile, metadata).getIdString();\n            JOptionPane.showMessageDialog(VUE.getInstance(), \"Map successfully exported. Asset ID for Map = \"+pid, \"Map Exported\",JOptionPane.INFORMATION_MESSAGE);\n            System.out.println(\"Exported Map: id = \"+pid);\n            this.dispose();\n        } catch (Exception ex) {\n            alert(VUE.getInstance(),  \"Export Not Supported:\"+ex.getMessage(), \"Export Error\");\n            ex.printStackTrace();\n        }\n    }","id":2260,"modified_method":"public void publishMap(LWMap map) {\n        \n        try {\n            ((Publishable)dataSourceComboBox.getSelectedItem()).publish(Publishable.PUBLISH_MAP,tufts.vue.VUE.getActiveMap());\n            this.dispose();\n        } catch (Exception ex) {\n            alert(VUE.getInstance(),  \"Export Not Supported:\"+ex.getMessage(), \"Export Error\");\n            ex.printStackTrace();\n        }\n    }","commit_id":"3ba6b958f1c9d29142f3b9506b663fdf31282d3d","url":"https://github.com/VUE/VUE"},{"original_method":"public  void publishAll() {\n        try {\n            LWMap saveMap = (LWMap) tufts.vue.VUE.getActiveMap().clone();\n            \n            Iterator i = resourceVector.iterator();\n            while(i.hasNext()) {\n                Vector vector = (Vector)i.next();\n                Resource r = (Resource)(vector.elementAt(1));\n                Boolean b = (Boolean)(vector.elementAt(0));\n                // File file = new File((String)vector.elementAt(1));\n                System.out.println(\"RESOURCE = \"+r.getSpec());\n                URL url = new URL(r.getSpec());\n                File file = new File(url.getFile());\n                if(file.isFile() && b.booleanValue()) {\n                    resourceTable.getModel().setValueAt(\"Processing\",resourceVector.indexOf(vector),STATUS_COL);\n                    String pid = getDR().ingest(file.getName(),\"obj-binary.xml\",url.openConnection().getContentType(),file, r.getProperties()).getIdString();\n                    resourceTable.getModel().setValueAt(\"Done\",resourceVector.indexOf(vector),STATUS_COL);\n                    replaceResource(saveMap,r,new AssetResource(getDR().getAsset(new tufts.oki.dr.fedora.PID(pid))));\n                    \n                }\n                \n            }\n            publishMap(saveMap);\n            this.dispose();\n            System.out.println(\"Export All\");\n        } catch (Exception ex) {\n            VueUtil.alert(null, ex.getMessage(), \"Export Error\");\n            ex.printStackTrace();\n        }\n    }","id":2261,"modified_method":"public  void publishAll() {\n        try {\n             ((Publishable)dataSourceComboBox.getSelectedItem()).publish(Publishable.PUBLISH_ALL,tufts.vue.VUE.getActiveMap());\n    \n            this.dispose();\n            \n        } catch (Exception ex) {\n            VueUtil.alert(null, ex.getMessage(), \"Export Error\");\n            ex.printStackTrace();\n        }\n    }","commit_id":"3ba6b958f1c9d29142f3b9506b663fdf31282d3d","url":"https://github.com/VUE/VUE"},{"original_method":"private void updatePublishPanel() {\n        informationArea.setText(PUBLISH_INFORMATION[publishMode]);\n        this.dataSourceComboBox.setModel(new DefaultComboBoxModel(DataSourceViewer.getPublishableDataSources(publishMode)));\n    }","id":2262,"modified_method":"private void updatePublishPanel() {\n        informationArea.setText(PUBLISH_INFORMATION[publishMode]);\n        //this.dataSourceComboBox.setModel(new DefaultComboBoxModel(DataSourceViewer.getPublishableDataSources(publishMode)));\n    }","commit_id":"3ba6b958f1c9d29142f3b9506b663fdf31282d3d","url":"https://github.com/VUE/VUE"},{"original_method":"public Publisher(Frame owner,String title) {\n        //testing\n        super(owner,title);\n        \n        nextButton = new JButton(\"Next >\");\n        finishButton = new JButton(\"Finish\");\n        cancelButton = new JButton(\"Cancel\");\n        backButton = new JButton(\"< Back\");\n        cancelButton.addActionListener(this);\n        finishButton.addActionListener(this);\n        nextButton.addActionListener(this);\n        backButton.addActionListener(this);\n        setUpModeSelectionPanel();\n        \n        getContentPane().add(modeSelectionPanel);\n        \n        stage = 1;\n        \n        setLocation(X_LOCATION,Y_LOCATION);\n        setModal(true);\n        setSize(WIDTH,HEIGHT);\n        setResizable(false);\n        show();\n        \n    }","id":2263,"modified_method":"public Publisher(Frame owner,String title) {\n        //testing\n        super(owner,title);\n        nextButton = new JButton(\"Next >\");\n        finishButton = new JButton(\"Finish\");\n        cancelButton = new JButton(\"Cancel\");\n        backButton = new JButton(\"< Back\");\n        cancelButton.addActionListener(this);\n        finishButton.addActionListener(this);\n        nextButton.addActionListener(this);\n        backButton.addActionListener(this);\n        setUpModeSelectionPanel();\n        getContentPane().setLayout(new BorderLayout());\n        getContentPane().add(BorderLayout.NORTH,modeSelectionPanel);\n        \n        stage = 1;\n        setLocation(X_LOCATION,Y_LOCATION);\n        setModal(true);\n        setSize(WIDTH,HEIGHT);\n        setResizable(false);\n        show();\n    }","commit_id":"3ba6b958f1c9d29142f3b9506b663fdf31282d3d","url":"https://github.com/VUE/VUE"},{"original_method":"private void setUpModeSelectionPanel() {\n        \n        modeSelectionPanel = new JPanel();\n        GridBagLayout gridbag = new GridBagLayout();\n        GridBagConstraints c = new GridBagConstraints();\n        modeSelectionPanel.setLayout(gridbag);\n        Insets defaultInsets = new Insets(2,9,2,2);\n        \n        ButtonGroup modeSelectionGroup = new ButtonGroup();\n        JLabel topLabel = new JLabel(\"Select the Export Mode\");\n        \n        //area for displaying information about publishing mode\n        informationArea = new JTextArea(\" The �Export� function allows a user to deposit a concept map into a registered digital repository. Select the different modes to learn more.\");\n        informationArea.setEditable(false);\n        informationArea.setLineWrap(true);\n        informationArea.setWrapStyleWord(true);\n        informationArea.setRows(4);\n        informationArea.setBorder(new LineBorder(Color.BLACK));\n        //informationArea.setBackground(Color.WHITE);\n        informationArea.setSize(WIDTH-50, HEIGHT/3);\n        \n        JLabel dsLabel = new JLabel(\"Where would you like to save the map:\");\n        dataSourceComboBox = new JComboBox(DataSourceViewer.getPublishableDataSources(Publisher.PUBLISH_ALL_MODES));\n      \n        JPanel buttonPanel = new JPanel();\n        publishMapRButton = new JRadioButton(\"Export Map\");\n        publishCMapRButton = new JRadioButton(\"Export IMSCP Map\");\n        publishAllRButton = new JRadioButton(\"Export All\");\n        publishMapRButton.addActionListener(this);\n        publishCMapRButton.addActionListener(this);\n        publishAllRButton.addActionListener(this);\n        \n        modeSelectionGroup.add(publishMapRButton);\n        modeSelectionGroup.add(publishCMapRButton);\n        modeSelectionGroup.add(publishAllRButton);\n        buttonPanel.add(publishMapRButton);\n        buttonPanel.add(publishCMapRButton);\n        buttonPanel.add(publishAllRButton);\n        \n        JPanel bottomPanel = new JPanel();\n        // bottomPanel.setBorder(new LineBorder(Color.BLACK));\n        bottomPanel.add(nextButton);\n        bottomPanel.add(finishButton);\n        bottomPanel.add(cancelButton);\n        //bottomPanel.setSize(WIDTH/3, HEIGHT/10);\n        \n        \n        nextButton.setEnabled(false);\n        finishButton.setEnabled(false);\n        \n        c.gridy = 0;\n        c.gridx = 0;\n        c.gridwidth = 6;\n        c.anchor = GridBagConstraints.WEST;\n        c.insets = defaultInsets;\n        gridbag.setConstraints(topLabel, c);\n        modeSelectionPanel.add(topLabel);\n        \n        c.gridy = 1;\n        c.insets = new Insets(2,0,2, 2);\n        gridbag.setConstraints(buttonPanel, c);\n        modeSelectionPanel.add(buttonPanel);\n        \n        c.gridy = 2;\n        c.gridwidth = 6;\n        c.insets = defaultInsets;\n        gridbag.setConstraints(informationArea, c);\n        modeSelectionPanel.add(informationArea);\n        \n        c.gridy = 3;\n        c.gridwidth =2;\n        c.insets = new Insets(10,9,2, 2);\n        gridbag.setConstraints(dsLabel,c);\n        modeSelectionPanel.add(dsLabel);\n        \n        c.gridy = 4;\n        c.gridwidth =2;\n        c.insets = defaultInsets;\n        gridbag.setConstraints(dataSourceComboBox,c);\n        modeSelectionPanel.add(dataSourceComboBox);\n        \n        c.gridy = 5;\n        c.gridx = 3;\n        c.gridwidth =3;\n        c.anchor = GridBagConstraints.EAST;\n        c.insets = defaultInsets;\n        gridbag.setConstraints(bottomPanel, c);\n        modeSelectionPanel.add(bottomPanel);\n    }","id":2264,"modified_method":"private void setUpModeSelectionPanel() {\n        \n        modeSelectionPanel = new JPanel();\n        GridBagLayout gridbag = new GridBagLayout();\n        GridBagConstraints c = new GridBagConstraints();\n        modeSelectionPanel.setLayout(gridbag);\n        Insets defaultInsets = new Insets(2,0,2,2);\n        \n        ButtonGroup modeSelectionGroup = new ButtonGroup();\n        JLabel topLabel = new JLabel(\"Location\");\n        JLabel modeLabel = new JLabel(\"Mode\");\n        \n        //area for displaying information about publishing mode\n        informationArea = new JTextArea(\" The �Export� function allows a user to deposit a concept map into a registered digital repository. Select the different modes to learn more.\");\n        informationArea.setEditable(false);\n        informationArea.setLineWrap(true);\n        informationArea.setWrapStyleWord(true);\n        informationArea.setRows(4);\n        informationArea.setBorder(new LineBorder(Color.BLACK));\n        //informationArea.setBackground(Color.WHITE);\n        informationArea.setSize(WIDTH-50, HEIGHT/3);\n        JLabel dsLabel = new JLabel(\"Where would you like to save the map:\");\n        dataSourceComboBox = new JComboBox(DataSourceViewer.getPublishableDataSources(Publisher.PUBLISH_ALL_MODES));\n        dataSourceComboBox.setToolTipText(\"Select export location.\");\n        \n        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));\n        publishMapRButton = new JRadioButton(\"Export Map\");\n        publishCMapRButton = new JRadioButton(\"Export IMSCP Map\");\n        publishAllRButton = new JRadioButton(\"Export All\");\n        publishMapRButton.setToolTipText(\"Export map only without local resource files.\");\n        publishCMapRButton.setToolTipText(\"Export IMS content package that include local resource files.\");\n        publishAllRButton.setToolTipText(\"Export map and local resources as separate files.\");\n        publishMapRButton.addActionListener(this);\n        publishCMapRButton.addActionListener(this);\n        publishAllRButton.addActionListener(this);\n        modeSelectionGroup.add(publishMapRButton);\n        modeSelectionGroup.add(publishCMapRButton);\n        modeSelectionGroup.add(publishAllRButton);\n        buttonPanel.add(modeLabel);\n        buttonPanel.add(publishMapRButton);\n        buttonPanel.add(publishCMapRButton);\n        buttonPanel.add(publishAllRButton);\n        JPanel bottomPanel = new JPanel();\n        // bottomPanel.setBorder(new LineBorder(Color.BLACK));\n        \n        bottomPanel.add(nextButton);\n        bottomPanel.add(finishButton);\n        bottomPanel.add(cancelButton);\n        //bottomPanel.setSize(WIDTH/3, HEIGHT/10);\n        \n        \n        nextButton.setEnabled(false);\n        finishButton.setEnabled(false);\n        \n        c.weightx = 0;\n        c.gridwidth = GridBagConstraints.RELATIVE;\n        c.anchor = GridBagConstraints.WEST;\n        c.insets = new Insets(40,5,10, 2);;\n        gridbag.setConstraints(topLabel, c);\n        modeSelectionPanel.add(topLabel);\n        \n        c.gridwidth = GridBagConstraints.REMAINDER;\n        c.insets = new Insets(40,30,10, 2);;\n        gridbag.setConstraints(dataSourceComboBox,c);\n        modeSelectionPanel.add(dataSourceComboBox);\n        \n        c.gridwidth = GridBagConstraints.REMAINDER;\n        c.insets = new Insets(10,0,10, 2);\n        c.fill = GridBagConstraints.HORIZONTAL;\n        gridbag.setConstraints(buttonPanel, c);\n        modeSelectionPanel.add(buttonPanel);\n        \n        /**\n         * c.gridy = 2;\n         * c.gridwidth = 6;\n         * c.insets = defaultInsets;\n         * gridbag.setConstraints(informationArea, c);\n         * modeSelectionPanel.add(informationArea);\n         *\n         * c.gridy = 3;\n         * c.gridwidth =2;\n         * c.insets = new Insets(10,9,2, 2);\n         * gridbag.setConstraints(dsLabel,c);\n         * modeSelectionPanel.add(dsLabel);\n         **/\n        \n        c.fill = GridBagConstraints.NONE;\n        c.gridwidth = GridBagConstraints.REMAINDER;\n        c.anchor = GridBagConstraints.EAST;\n        c.insets = new Insets(10,0,10, 2);\n        gridbag.setConstraints(bottomPanel, c);\n        modeSelectionPanel.add(bottomPanel);\n    }","commit_id":"3ba6b958f1c9d29142f3b9506b663fdf31282d3d","url":"https://github.com/VUE/VUE"},{"original_method":"private MapsSelectionPanel() \n    {\n        setOpaque(false);\n        GridBagLayout gridBag = new GridBagLayout();\n        GridBagConstraints gridBagConstraints = new GridBagConstraints();\n        setLayout(gridBag);\n        \n        fileNameField = new JTextField(20);\n        browseButton = new JButton(\"Browse\");\n        browseButton.addActionListener(new ActionListener()\n        {\n           public void actionPerformed(ActionEvent e)\n           {\n               JFileChooser choose = new JFileChooser();\n               VueFileFilter vff = new VueFileFilter(VueFileFilter.VUE_DESCRIPTION);\n               choose.setFileFilter(vff);\n               choose.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);\n               choose.showOpenDialog(MapsSelectionPanel.this);\n               File choice = choose.getSelectedFile();\n               if(choice.isDirectory())\n               {\n                  java.io.FileFilter iff = new java.io.FileFilter()\n                  {\n                      public boolean accept(File file)\n                      {\n                          if(file.getName().substring(file.getName().lastIndexOf(\".\")+1,file.getName().length()).equals(\"vue\"))\n                            return true;\n                          else \n                            return false;\n                      }\n                      \n                      public String getDescrption()\n                      {\n                          return \"VUE FILE\";\n                      }\n                  };\n                  File[] files =  choice.listFiles(iff);\n                  for(int i=0;i<files.length;i++)\n                  {\n                      File file = files[files.length-1-i];\n                      String name = file.getAbsolutePath();\n                      ((MapTableModel)maps.getModel()).addRow(name);\n                      String shortName = getShortNameForFile(name); \n                      fileNameField.setText(shortName);\n                      revalidate();\n                      scroll.getViewport().revalidate();\n                  }\n               }\n               else\n               {    \n                  String name = choice.getAbsolutePath();\n                  ((MapTableModel)maps.getModel()).addRow(name);\n                  fileNameField.setText(getShortNameForFile(name));\n                  revalidate();\n                  scroll.getViewport().revalidate();\n               }\n           }\n        });\n        VUE.getTabbedPane().addContainerListener(new java.awt.event.ContainerListener()\n        {\n            public void componentAdded(java.awt.event.ContainerEvent e)\n            {\n                //System.out.println(\"MSP: VUE tabbed pane component added \" + e);\n                revalidate();\n            }\n            \n            public void componentRemoved(java.awt.event.ContainerEvent e)\n            {\n                //System.out.println(\"MSP: VUE tabbed pane component removed \" + e);\n                revalidate();\n            }\n        });\n        VUE.getTabbedPane().addChangeListener(new ChangeListener()\n        {\n            public void stateChanged(javax.swing.event.ChangeEvent e)\n            {\n                //System.out.println(\"MSP: VUE tabbed pane change event \" + e);\n            }\n        });\n        \n        VUE.getTabbedPane().addPropertyChangeListener(new PropertyChangeListener()\n        {\n            public void propertyChange(PropertyChangeEvent e)\n            {\n                revalidate();\n                repaint();\n                scroll.getViewport().revalidate();\n                //System.out.println(\"MSP: VUE tabbed pane property change event \" + e.getPropertyName());\n            }\n        });\n\n        JLabel stepOneLabel = new JLabel(stepOneMessage);\n        gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;\n        gridBagConstraints.anchor = GridBagConstraints.WEST;\n        gridBag.setConstraints(stepOneLabel,gridBagConstraints);\n        stepOneLabel.setBorder(BorderFactory.createEmptyBorder(15,0,0,0));\n        add(stepOneLabel);\n        \n        JLabel stepTwoLabel = new JLabel(stepTwoMessage);\n        //gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;\n        gridBag.setConstraints(stepTwoLabel,gridBagConstraints);\n        stepTwoLabel.setBorder(BorderFactory.createEmptyBorder(0,0,15,0));\n        add(stepTwoLabel);  \n               \n        bottomPanel = new JPanel();\n        filterOnBaseMap = new JCheckBox();\n        JLabel filterOnBaseMapMessage = new JLabel(filterOnBaseMapMessageString);\n        //filterOnBaseMapMessage.setOpaque(false);\n        bottomPanel.setOpaque(false);\n        bottomPanel.add(filterOnBaseMap);\n        bottomPanel.add(filterOnBaseMapMessage);\n        gridBagConstraints.weighty = 0.0;\n        gridBagConstraints.anchor = GridBagConstraints.WEST;\n        gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;\n        gridBag.setConstraints(bottomPanel,gridBagConstraints);\n        add(bottomPanel);\n        \n        JLabel selectMapsLabel = new JLabel(\"Select maps:\");\n        selectMapsLabel.setBorder(BorderFactory.createEmptyBorder(0,0,0,8));\n        gridBagConstraints.gridwidth = 1;\n        gridBag.setConstraints(selectMapsLabel,gridBagConstraints);\n        add(selectMapsLabel);\n        \n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.weighty = 0.0;\n        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\n        gridBag.setConstraints(fileNameField,gridBagConstraints);\n        add(fileNameField);\n        gridBagConstraints.weightx = 0.0;\n        gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;\n        gridBag.setConstraints(browseButton,gridBagConstraints);\n        add(browseButton);\n        maps = new JTable(new MapTableModel());\n        maps.setRowHeight(maps.getRowHeight()+6);\n        maps.getTableHeader().setReorderingAllowed(false);\n        maps.addMouseListener(new java.awt.event.MouseAdapter() {\n          public void mousePressed(java.awt.event.MouseEvent e)\n          {\n            MapTableModel model = (MapTableModel)maps.getModel();\n            //System.out.println(\"MSP mouse pressed, row column: \" + maps.getSelectedRow() + \",\" + maps.getSelectedColumn());\n            if(maps.getSelectedColumn() == 0)\n            {\n                if(model.isSelected(maps.getSelectedRow()))\n                    model.setSelected(false,maps.getSelectedRow());\n                else\n                    model.setSelected(true,maps.getSelectedRow());\n            }\n            if(maps.getSelectedColumn() == 2)\n            {\n                model.setBaseMapIndex(maps.getSelectedRow());\n            }\n            if(maps.getSelectedColumn() == 3)\n            {\n                deleteDown = true;\n            }\n            else\n            {\n                deleteDown = false;\n            }\n            repaint();\n            \n          }\n          \n          public void mouseReleased(java.awt.event.MouseEvent e)\n          {\n            if(maps.getSelectedColumn() == 3 && ((MapTableModel)maps.getModel()).getMapType(maps.getSelectedRow()) == LOCAL_FILE)\n            {\n                ((MapTableModel)maps.getModel()).localFiles.remove(maps.getSelectedRow());\n                deleteDown = false;\n            }     \n            repaint();\n          }\n          \n        });\n        maps.setDefaultRenderer(Object.class,new MapTableCellRenderer());\n        maps.getColumnModel().getColumn(0).setMinWidth(50);\n        maps.getColumnModel().getColumn(1).setMinWidth(360);\n        maps.getColumnModel().getColumn(2).setMinWidth(50);\n        maps.getColumnModel().getColumn(3).setMinWidth(80);\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.weighty = 1.0;\n        gridBagConstraints.anchor = GridBagConstraints.NORTH;\n        gridBagConstraints.fill = gridBagConstraints.BOTH;\n        scroll = new JScrollPane(maps);\n        gridBag.setConstraints(scroll,gridBagConstraints);\n        add(scroll);\n        \n    }","id":2265,"modified_method":"private MapsSelectionPanel() \n    {\n        setOpaque(false);\n        GridBagLayout gridBag = new GridBagLayout();\n        GridBagConstraints gridBagConstraints = new GridBagConstraints();\n        setLayout(gridBag);\n        \n        //fileNameField = new JTextField(20);\n        browseButton = new JButton(\"Add Maps\");\n        browseButton.addActionListener(new ActionListener()\n        {\n           public void actionPerformed(ActionEvent e)\n           {\n               JFileChooser choose = new JFileChooser();\n               VueFileFilter vff = new VueFileFilter(VueFileFilter.VUE_DESCRIPTION);\n               choose.setFileFilter(vff);\n               choose.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);\n               choose.showOpenDialog(MapsSelectionPanel.this);\n               File choice = choose.getSelectedFile();\n               if(choice.isDirectory())\n               {\n                  java.io.FileFilter iff = new java.io.FileFilter()\n                  {\n                      public boolean accept(File file)\n                      {\n                          if(file.getName().substring(file.getName().lastIndexOf(\".\")+1,file.getName().length()).equals(\"vue\"))\n                            return true;\n                          else \n                            return false;\n                      }\n                      \n                      public String getDescription()\n                      {\n                          return \"VUE FILE\";\n                      }\n                  };\n                  File[] files =  choice.listFiles(iff);\n                  for(int i=0;i<files.length;i++)\n                  {\n                      File file = files[files.length-1-i];\n                      String name = file.getAbsolutePath();\n                      ((MapTableModel)maps.getModel()).addRow(name);\n                      //String shortName = getShortNameForFile(name); \n                      //fileNameField.setText(shortName);\n                      revalidate();\n                      scroll.getViewport().revalidate();\n                  }\n               }\n               else\n               {    \n                  String name = choice.getAbsolutePath();\n                  ((MapTableModel)maps.getModel()).addRow(name);\n                  //fileNameField.setText(getShortNameForFile(name));\n                  revalidate();\n                  scroll.getViewport().revalidate();\n               }\n           }\n        });\n        VUE.getTabbedPane().addContainerListener(new java.awt.event.ContainerListener()\n        {\n            public void componentAdded(java.awt.event.ContainerEvent e)\n            {\n                //System.out.println(\"MSP: VUE tabbed pane component added \" + e);\n                revalidate();\n            }\n            \n            public void componentRemoved(java.awt.event.ContainerEvent e)\n            {\n                //System.out.println(\"MSP: VUE tabbed pane component removed \" + e);\n                revalidate();\n            }\n        });\n        VUE.getTabbedPane().addChangeListener(new ChangeListener()\n        {\n            public void stateChanged(javax.swing.event.ChangeEvent e)\n            {\n                //System.out.println(\"MSP: VUE tabbed pane change event \" + e);\n            }\n        });\n        \n        VUE.getTabbedPane().addPropertyChangeListener(new PropertyChangeListener()\n        {\n            public void propertyChange(PropertyChangeEvent e)\n            {\n                revalidate();\n                repaint();\n                scroll.getViewport().revalidate();\n                //System.out.println(\"MSP: VUE tabbed pane property change event \" + e.getPropertyName());\n            }\n        });\n\n        JLabel stepOneLabel = new JLabel(stepOneMessage);\n        gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;\n        gridBagConstraints.anchor = GridBagConstraints.WEST;\n        gridBag.setConstraints(stepOneLabel,gridBagConstraints);\n        stepOneLabel.setBorder(BorderFactory.createEmptyBorder(15,0,0,0));\n        add(stepOneLabel);\n        \n        JLabel stepTwoLabel = new JLabel(stepTwoMessage);\n        //gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;\n        gridBag.setConstraints(stepTwoLabel,gridBagConstraints);\n        stepTwoLabel.setBorder(BorderFactory.createEmptyBorder(0,0,15,0));\n        add(stepTwoLabel);  \n               \n        //bottomPanel = new JPanel();\n        filterOnBaseMap = new JCheckBox();\n        JLabel filterOnBaseMapMessage = new JLabel(filterOnBaseMapMessageString);\n        ////filterOnBaseMapMessage.setOpaque(false);\n        //bottomPanel.setOpaque(false);\n        //bottomPanel.add(filterOnBaseMap);\n        //bottomPanel.add(filterOnBaseMapMessage);\n        //gridBagConstraints.weighty = 0.0;\n        //gridBagConstraints.anchor = GridBagConstraints.WEST;\n        //gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;\n        //gridBag.setConstraints(bottomPanel,gridBagConstraints);\n        //add(bottomPanel);\n        \n        \n        //JLabel selectMapsLabel = new JLabel(\"Select maps:\");\n        //selectMapsLabel.setBorder(BorderFactory.createEmptyBorder(0,0,0,8));\n        //gridBagConstraints.gridwidth = 1;\n        //gridBag.setConstraints(selectMapsLabel,gridBagConstraints);\n        //add(selectMapsLabel);\n        \n        //gridBagConstraints.weightx = 1.0;\n        //gridBagConstraints.weighty = 0.0;\n        //gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\n        //gridBag.setConstraints(fileNameField,gridBagConstraints);\n        //add(fileNameField);\n        gridBagConstraints.weightx = 0.0;\n        gridBagConstraints.anchor = GridBagConstraints.WEST;\n        gridBagConstraints.gridwidth = 1;\n        //gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;\n        gridBag.setConstraints(browseButton,gridBagConstraints);\n        browseButton.setOpaque(false);\n        add(browseButton);\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.anchor = GridBagConstraints.EAST;\n        gridBag.setConstraints(filterOnBaseMap,gridBagConstraints);\n        filterOnBaseMap.setOpaque(false);\n        add(filterOnBaseMap);\n        gridBagConstraints.weightx = 0.0;\n        gridBagConstraints.insets = new Insets(0,0,0,5);\n        gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;\n        filterOnBaseMapMessage.setForeground(new Color(77,109,109));\n        gridBag.setConstraints(filterOnBaseMapMessage,gridBagConstraints);\n        add(filterOnBaseMapMessage);\n        gridBagConstraints.insets = new Insets(0,0,0,0);\n        maps = new JTable(new MapTableModel());\n        maps.setRowHeight(maps.getRowHeight()+6);\n        maps.getTableHeader().setReorderingAllowed(false);\n        maps.addMouseListener(new java.awt.event.MouseAdapter() {\n          public void mousePressed(java.awt.event.MouseEvent e)\n          {\n            MapTableModel model = (MapTableModel)maps.getModel();\n            //System.out.println(\"MSP mouse pressed, row column: \" + maps.getSelectedRow() + \",\" + maps.getSelectedColumn());\n            if(maps.getSelectedColumn() == 0)\n            {\n                if(model.isSelected(maps.getSelectedRow()))\n                    model.setSelected(false,maps.getSelectedRow());\n                else\n                    model.setSelected(true,maps.getSelectedRow());\n            }\n            if(maps.getSelectedColumn() == 2)\n            {\n                model.setBaseMapIndex(maps.getSelectedRow());\n            }\n            if(maps.getSelectedColumn() == 3)\n            {\n                deleteDown = true;\n            }\n            else\n            {\n                deleteDown = false;\n            }\n            repaint();\n            \n          }\n          \n          public void mouseReleased(java.awt.event.MouseEvent e)\n          {\n            if(maps.getSelectedColumn() == 3 && ((MapTableModel)maps.getModel()).getMapType(maps.getSelectedRow()) == LOCAL_FILE)\n            {\n                ((MapTableModel)maps.getModel()).localFiles.remove(maps.getSelectedRow());\n                deleteDown = false;\n            }     \n            repaint();\n          }\n          \n        });\n        maps.setDefaultRenderer(Object.class,new MapTableCellRenderer());\n        maps.getColumnModel().getColumn(0).setMinWidth(50);\n        maps.getColumnModel().getColumn(1).setMinWidth(360);\n        maps.getColumnModel().getColumn(2).setMinWidth(50);\n        maps.getColumnModel().getColumn(3).setMinWidth(80);\n        gridBagConstraints.weightx = 1.0;\n        gridBagConstraints.weighty = 1.0;\n        gridBagConstraints.anchor = GridBagConstraints.NORTH;\n        gridBagConstraints.fill = gridBagConstraints.BOTH;\n        scroll = new JScrollPane(maps);\n        gridBag.setConstraints(scroll,gridBagConstraints);\n        add(scroll);\n        \n    }","commit_id":"47e107519d1785bf8cd7d0437614683a1860af85","url":"https://github.com/VUE/VUE"},{"original_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        TargetCardInLibrary target = new TargetCardInLibrary(0, 2, new FilterBasicLandCard());\n        Player player = game.getPlayer(source.getControllerId());\n        if (player.searchLibrary(target, game)) {\n            if (target.getTargets().size() > 0) {\n                Cards revealed = new CardsImpl();\n                for (UUID cardId: (List<UUID>)target.getTargets()) {\n                    Card card = player.getLibrary().getCard(cardId, game);\n                    revealed.add(card);\n                }\n                player.revealCards(\"Cultivate\", revealed, game);\n                if (target.getTargets().size() == 2) {\n                    TargetCard target2 = new TargetCard(Zone.PICK, filter);\n                    player.choose(Outcome.Benefit, revealed, target2, game);\n                    Card card = revealed.get(target2.getFirstTarget(), game);\n                    card.putOntoBattlefield(game, Zone.LIBRARY, source.getId(), source.getControllerId());\n                    revealed.remove(card);\n                    Permanent permanent = game.getPermanent(card.getId());\n                    if (permanent != null) {\n                        permanent.setTapped(true);\n                    }\n                    card = revealed.getCards(game).iterator().next();\n                    card.moveToZone(Zone.HAND, source.getId(), game, false);\n                }\n                else if (target.getTargets().size() == 1) {\n                    Card card = revealed.getCards(game).iterator().next();\n                    card.putOntoBattlefield(game, Zone.LIBRARY, source.getId(), source.getControllerId());\n                    Permanent permanent = game.getPermanent(card.getId());\n                    if (permanent != null)\n                        permanent.setTapped(true);\n                }\n\n            }\n            player.shuffleLibrary(game);\n            return true;\n        }\n        player.shuffleLibrary(game);\n        return false;\n\n    }","id":2266,"modified_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        TargetCardInLibrary target = new TargetCardInLibrary(0, 2, new FilterBasicLandCard());\n        Player player = game.getPlayer(source.getControllerId());\n        if (player.searchLibrary(target, game)) {\n            if (target.getTargets().size() > 0) {\n                Cards revealed = new CardsImpl();\n                for (UUID cardId: (List<UUID>)target.getTargets()) {\n                    Card card = player.getLibrary().getCard(cardId, game);\n                    revealed.add(card);\n                }\n                player.revealCards(\"Cultivate\", revealed, game);\n                if (target.getTargets().size() == 2) {\n                    TargetCard target2 = new TargetCard(Zone.PICK, filter);\n                    player.choose(Outcome.Benefit, revealed, target2, game);\n                    Card card = revealed.get(target2.getFirstTarget(), game);\n                    if (card != null) {\n                        player.putOntoBattlefieldWithInfo(card, game, Zone.LIBRARY, source.getSourceId(), true);\n                        revealed.remove(card);\n                    }\n                    card = revealed.getCards(game).iterator().next();\n                    if (card != null) {\n                        player.moveCardToHandWithInfo(card, source.getSourceId(), game, Zone.LIBRARY);\n                    }\n                }\n                else if (target.getTargets().size() == 1) {\n                    Card card = revealed.getCards(game).iterator().next();\n                    if (card != null) {\n                        player.putOntoBattlefieldWithInfo(card, game, Zone.LIBRARY, source.getSourceId(), true);\n                    }\n                }\n\n            }\n            player.shuffleLibrary(game);\n            return true;\n        }\n        player.shuffleLibrary(game);\n        return false;\n\n    }","commit_id":"2bf987fe9a443c998490ae50f74cd9aee70a0ac5","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        TargetCardInLibrary target = new TargetCardInLibrary(0, 2, new FilterBasicLandCard());\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        if (player.searchLibrary(target, game)) {\r\n            if (target.getTargets().size() > 0) {\r\n                Cards revealed = new CardsImpl();\r\n                for (UUID cardId: (List<UUID>)target.getTargets()) {\r\n                    Card card = player.getLibrary().getCard(cardId, game);\r\n                    revealed.add(card);\r\n                }\r\n                player.revealCards(\"Kodama's Reach\", revealed, game);\r\n                if (target.getTargets().size() == 2) {\r\n                    TargetCard target2 = new TargetCard(Zone.PICK, filter);\r\n                    player.choose(Outcome.Benefit, revealed, target2, game);\r\n                    Card card = revealed.get(target2.getFirstTarget(), game);\r\n                    card.putOntoBattlefield(game, Zone.LIBRARY, source.getId(), source.getControllerId());\r\n                    revealed.remove(card);\r\n                    Permanent permanent = game.getPermanent(card.getId());\r\n                    if (permanent != null) {\r\n                        permanent.setTapped(true);\r\n                    }\r\n                    card = revealed.getCards(game).iterator().next();\r\n                    card.moveToZone(Zone.HAND, source.getId(), game, false);\r\n                }\r\n                else if (target.getTargets().size() == 1) {\r\n                    Card card = revealed.getCards(game).iterator().next();\r\n                    card.putOntoBattlefield(game, Zone.LIBRARY, source.getId(), source.getControllerId());\r\n                    Permanent permanent = game.getPermanent(card.getId());\r\n                    if (permanent != null) {\r\n                        permanent.setTapped(true);\r\n                    }\r\n                }\r\n\r\n            }\r\n            player.shuffleLibrary(game);\r\n            return true;\r\n        }\r\n        player.shuffleLibrary(game);\r\n        return false;\r\n\r\n    }","id":2267,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        TargetCardInLibrary target = new TargetCardInLibrary(0, 2, new FilterBasicLandCard());\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        if (player.searchLibrary(target, game)) {\r\n            if (target.getTargets().size() > 0) {\r\n                Cards revealed = new CardsImpl();\r\n                for (UUID cardId: (List<UUID>)target.getTargets()) {\r\n                    Card card = player.getLibrary().getCard(cardId, game);\r\n                    revealed.add(card);\r\n                }\r\n                player.revealCards(\"Kodama's Reach\", revealed, game);\r\n                if (target.getTargets().size() == 2) {\r\n                    TargetCard target2 = new TargetCard(Zone.PICK, filter);\r\n                    player.choose(Outcome.Benefit, revealed, target2, game);\r\n                    Card card = revealed.get(target2.getFirstTarget(), game);\r\n                    if (card != null) {\r\n                        player.putOntoBattlefieldWithInfo(card, game, Zone.LIBRARY, source.getSourceId(), true);\r\n                        revealed.remove(card);\r\n                    }\r\n                    card = revealed.getCards(game).iterator().next();\r\n                    if (card != null) {\r\n                        player.moveCardToHandWithInfo(card, source.getSourceId(), game, Zone.LIBRARY);\r\n                    }\r\n                }\r\n                else if (target.getTargets().size() == 1) {\r\n                    Card card = revealed.getCards(game).iterator().next();\r\n                    if (card != null) {\r\n                        player.putOntoBattlefieldWithInfo(card, game, Zone.LIBRARY, source.getSourceId(), true);\r\n                    }\r\n                }\r\n\r\n            }\r\n            player.shuffleLibrary(game);\r\n            return true;\r\n        }\r\n        player.shuffleLibrary(game);\r\n        return false;\r\n\r\n    }","commit_id":"2bf987fe9a443c998490ae50f74cd9aee70a0ac5","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {\n        boolean result = false;\n        for (UUID permanentId : targetPointer.getTargets(game, source)) {\n            Permanent permanent = game.getPermanent(permanentId);\n            if (permanent != null) {\n                switch (layer) {\n                    case TypeChangingEffects_4:\n                        if (sublayer == SubLayer.NA) {\n                            if (type == null) {\n                                permanent.getSubtype().clear();\n                                if (token.getSubtype().size() > 0) {\n                                    permanent.getSubtype().addAll(token.getSubtype());\n                                }\n                            } else {\n                                if (token.getCardType().size() > 0) {\n                                    for (CardType t : token.getCardType()) {\n                                        if (!permanent.getCardType().contains(t)) {\n                                            permanent.getCardType().add(t);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        break;\n                    case ColorChangingEffects_5:\n                        if (sublayer == SubLayer.NA) {\n                            if (token.getColor().hasColor()) {\n                                permanent.getColor().setColor(token.getColor());\n                            }\n                        }\n                        break;\n                    case AbilityAddingRemovingEffects_6:\n                        if (sublayer == SubLayer.NA) {\n                            if (token.getAbilities().size() > 0) {\n                                for (Ability ability : token.getAbilities()) {\n                                    permanent.addAbility(ability, game);\n                                }\n                            }\n                        }\n                        break;\n                    case PTChangingEffects_7:\n                        if (sublayer == SubLayer.SetPT_7b) {\n                            permanent.getToughness().setValue(token.getToughness().getValue());\n                            permanent.getPower().setValue(token.getPower().getValue());\n                        }\n                }\n            }\n            result |= true;\n        }\n        return result;\n    }","id":2268,"modified_method":"@Override\n    public boolean apply(Layer layer, SubLayer sublayer, Ability source, Game game) {\n        boolean result = false;\n        for (UUID permanentId : targetPointer.getTargets(game, source)) {\n            Permanent permanent = game.getPermanent(permanentId);\n            if (permanent != null) {\n                switch (layer) {\n                    case TypeChangingEffects_4:\n                        if (sublayer == SubLayer.NA) {\n                            if (type == null) {\n                                permanent.getSubtype().clear();\n                                if (token.getSubtype().size() > 0) {\n                                    permanent.getSubtype().addAll(token.getSubtype());\n                                }\n                            } else {\n                                if (token.getCardType().size() > 0) {\n                                    for (CardType t : token.getCardType()) {\n                                        if (!permanent.getCardType().contains(t)) {\n                                            permanent.getCardType().add(t);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        break;\n                    case ColorChangingEffects_5:\n                        if (sublayer == SubLayer.NA) {\n                            if (token.getColor().hasColor()) {\n                                permanent.getColor().setColor(token.getColor());\n                            }\n                        }\n                        break;\n                    case AbilityAddingRemovingEffects_6:\n                        if (sublayer == SubLayer.NA) {\n                            if (token.getAbilities().size() > 0) {\n                                for (Ability ability : token.getAbilities()) {\n                                    permanent.addAbility(ability, game);\n                                }\n                            }\n                        }\n                        break;\n                    case PTChangingEffects_7:\n                        if (sublayer == SubLayer.SetPT_7b) {\n                            permanent.getToughness().setValue(token.getToughness().getValue());\n                            permanent.getPower().setValue(token.getPower().getValue());\n                        }\n                }\n                result = true;\n            }\n        }\n        if (!result && this.duration.equals(Duration.Custom) ) {\n            this.discard();\n        }\n        return result;\n    }","commit_id":"ad85d4e7f62e07fc93950261b9529792e08fae64","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Permanent sacrificedPermanent = null;\r\n        for (Cost cost : source.getCosts()) {\r\n            if (cost instanceof SacrificeTargetCost) {\r\n                SacrificeTargetCost sacrificeCost = (SacrificeTargetCost) cost;\r\n                if (sacrificeCost.getPermanents().size() > 0) {\r\n                    sacrificedPermanent = sacrificeCost.getPermanents().get(0);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        if (sacrificedPermanent != null && player != null) {\r\n            int newConvertedCost = sacrificedPermanent.getManaCost().convertedManaCost() + 1;\r\n            FilterCard filter = new FilterCard(\"creature card with converted mana cost \" + newConvertedCost);\r\n            filter.add(new ConvertedManaCostPredicate(Filter.ComparisonType.Equal, newConvertedCost));\r\n            filter.add(new CardTypePredicate(CardType.CREATURE));\r\n            TargetCardInLibrary target = new TargetCardInLibrary(filter);\r\n            if (player.searchLibrary(target, game)) {\r\n                for (UUID cardId : target.getTargets()) {\r\n                    Card card = player.getLibrary().getCard(cardId, game);\r\n                    if (card != null) {\r\n                        card.putOntoBattlefield(game, Zone.LIBRARY, source.getId(), source.getControllerId());\r\n                    }\r\n                }\r\n            }\r\n            player.shuffleLibrary(game);\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":2269,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Permanent sacrificedPermanent = null;\r\n        for (Cost cost : source.getCosts()) {\r\n            if (cost instanceof SacrificeTargetCost) {\r\n                SacrificeTargetCost sacrificeCost = (SacrificeTargetCost) cost;\r\n                if (sacrificeCost.getPermanents().size() > 0) {\r\n                    sacrificedPermanent = sacrificeCost.getPermanents().get(0);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        if (sacrificedPermanent != null && player != null) {\r\n            int newConvertedCost = sacrificedPermanent.getManaCost().convertedManaCost() + 1;\r\n            FilterCard filter = new FilterCard(\"creature card with converted mana cost \" + newConvertedCost);\r\n            filter.add(new ConvertedManaCostPredicate(Filter.ComparisonType.Equal, newConvertedCost));\r\n            filter.add(new CardTypePredicate(CardType.CREATURE));\r\n            TargetCardInLibrary target = new TargetCardInLibrary(filter);\r\n            if (player.searchLibrary(target, game)) {\r\n                for (UUID cardId : target.getTargets()) {\r\n                    Card card = player.getLibrary().getCard(cardId, game);\r\n                    if (card != null) {\r\n                        player.putOntoBattlefieldWithInfo(card, game, Zone.LIBRARY, source.getSourceId());\r\n                    }\r\n                }\r\n            }\r\n            player.shuffleLibrary(game);\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"ad85d4e7f62e07fc93950261b9529792e08fae64","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public String getText(Mode mode) {\r\n        if (staticText != null && !staticText.isEmpty()) {\r\n            return staticText;\r\n        }\r\n        StringBuilder sb = new StringBuilder();\r\n        Target target = mode.getTargets().get(0);\r\n        if(target.getMaxNumberOfTargets() > 1){\r\n            if (target.getNumberOfTargets() < target.getMaxNumberOfTargets()) {\r\n                sb.append(\"Up to\");\r\n            }\r\n            sb.append(target.getMaxNumberOfTargets()).append(\" target \").append(target.getTargetName()).append(\" gain \");\r\n        } else {\r\n            if (!target.getTargetName().startsWith(\"another\")) {\r\n                sb.append(\"Target \");\r\n            }\r\n            sb.append(target.getTargetName()).append(\" gains \");\r\n\r\n        }\r\n        if (durationPhaseStep != null) {\r\n            sb.append(\" until your next \").append(durationPhaseStep.toString().toLowerCase(Locale.ENGLISH));\r\n        }\r\n        if (!duration.toString().isEmpty()) {\r\n            sb.append(ability.getRule()).append(\" \").append(duration.toString());\r\n        }\r\n        return sb.toString();\r\n    }","id":2270,"modified_method":"@Override\r\n    public String getText(Mode mode) {\r\n        if (staticText != null && !staticText.isEmpty()) {\r\n            return staticText;\r\n        }\r\n        StringBuilder sb = new StringBuilder();\r\n        Target target = mode.getTargets().get(0);\r\n        if(target.getMaxNumberOfTargets() > 1){\r\n            if (target.getNumberOfTargets() < target.getMaxNumberOfTargets()) {\r\n                sb.append(\"Up to\");\r\n            }\r\n            sb.append(target.getMaxNumberOfTargets()).append(\" target \").append(target.getTargetName()).append(\" gain \");\r\n        } else {\r\n            if (!target.getTargetName().toUpperCase().startsWith(\"ANOTHER\")) {\r\n                sb.append(\"Target \");\r\n            }\r\n            sb.append(target.getTargetName()).append(\" gains \");\r\n\r\n        }\r\n        if (durationPhaseStep != null) {\r\n            sb.append(\" until your next \").append(durationPhaseStep.toString().toLowerCase(Locale.ENGLISH));\r\n        }\r\n        if (!duration.toString().isEmpty()) {\r\n            sb.append(ability.getRule()).append(\" \").append(duration.toString());\r\n        }\r\n        return sb.toString();\r\n    }","commit_id":"ad85d4e7f62e07fc93950261b9529792e08fae64","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        if (player == null) {\r\n            return false;\r\n        }\r\n        TargetCardInLibrary target = new TargetCardInLibrary(0,Integer.MAX_VALUE, new FilterBasicLandCard());\r\n        if (player.searchLibrary(target, game)) {\r\n            if (target.getTargets().size() > 0) {\r\n                for (UUID cardId: target.getTargets()) {\r\n                    Card card = player.getLibrary().getCard(cardId, game);\r\n                    if (card != null) {\r\n                        player.putOntoBattlefieldWithInfo(card, game, Zone.LIBRARY, source.getSourceId());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        player.shuffleLibrary(game);\r\n\r\n        ContinuousEffect effect = new BecomesCreatureTargetEffect(new NissaWorldwakerToken(), \"land\", Duration.EndOfGame);\r\n        game.addEffect(effect, source);\r\n\r\n        return true;\r\n    }","id":2271,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        if (player == null) {\r\n            return false;\r\n        }\r\n        TargetCardInLibrary target = new TargetCardInLibrary(0,Integer.MAX_VALUE, new FilterBasicLandCard());\r\n        if (player.searchLibrary(target, game)) {\r\n            if (target.getTargets().size() > 0) {\r\n                for (UUID cardId: target.getTargets()) {\r\n                    Card card = player.getLibrary().getCard(cardId, game);\r\n                    if (card != null) {\r\n                        if (player.putOntoBattlefieldWithInfo(card, game, Zone.LIBRARY, source.getSourceId())) {\r\n                            ContinuousEffect effect = new BecomesCreatureTargetEffect(new NissaWorldwakerToken(), \"land\", Duration.Custom);\r\n                            effect.setTargetPointer(new FixedTarget(card.getId()));\r\n                            game.addEffect(effect, source);                                                    \r\n                        }                                             \r\n                    }\r\n                }\r\n            }\r\n        }\r\n        player.shuffleLibrary(game);\r\n        return true;\r\n    }","commit_id":"ad85d4e7f62e07fc93950261b9529792e08fae64","url":"https://github.com/magefree/mage"},{"original_method":"public NissaWorldwaker(UUID ownerId) {\r\n        super(ownerId, 187, \"Nissa, Worldwaker\", Rarity.MYTHIC, new CardType[]{CardType.PLANESWALKER}, \"{3}{G}{G}\");\r\n        this.expansionSetCode = \"M15\";\r\n        this.subtype.add(\"Nissa\");\r\n\r\n        this.color.setGreen(true);\r\n\r\n        // +1: Target land you control becomes a 4/4 Elemental creature with trample.  It's still a land.\r\n        LoyaltyAbility ability = new LoyaltyAbility(new BecomesCreatureTargetEffect(new NissaWorldwakerToken(), \"land\", Duration.EndOfTurn), 1);\r\n        ability.addTarget(new TargetLandPermanent(filter));\r\n        this.addAbility(ability);\r\n\r\n        // +1: Untap up to four target Forests.\r\n        ability = new LoyaltyAbility(new UntapTargetEffect(), 1);\r\n        ability.addTarget(new TargetPermanent(0,4,filterForest, false));\r\n        this.addAbility(ability);\r\n\r\n        // -7: Search your library for any number of basic land cards, put them onto the battlefield, then shuffle your library.  Those lands become 4/4 Elemental creatures with trample.  They're still lands.\r\n       this.addAbility(new LoyaltyAbility(new NissaWorldwakerSearchEffect(), -7));\r\n    }","id":2272,"modified_method":"public NissaWorldwaker(UUID ownerId) {\r\n        super(ownerId, 187, \"Nissa, Worldwaker\", Rarity.MYTHIC, new CardType[]{CardType.PLANESWALKER}, \"{3}{G}{G}\");\r\n        this.expansionSetCode = \"M15\";\r\n        this.subtype.add(\"Nissa\");\r\n\r\n        this.color.setGreen(true);\r\n\r\n        this.addAbility(new EntersBattlefieldAbility(new AddCountersSourceEffect(CounterType.LOYALTY.createInstance(3)), false));\r\n        \r\n        // +1: Target land you control becomes a 4/4 Elemental creature with trample.  It's still a land.\r\n        LoyaltyAbility ability = new LoyaltyAbility(new BecomesCreatureTargetEffect(new NissaWorldwakerToken(), \"land\", Duration.Custom), 1);\r\n        ability.addTarget(new TargetLandPermanent(filter));\r\n        this.addAbility(ability);\r\n\r\n        // +1: Untap up to four target Forests.\r\n        ability = new LoyaltyAbility(new UntapTargetEffect(), 1);\r\n        ability.addTarget(new TargetPermanent(0,4,filterForest, false));\r\n        this.addAbility(ability);\r\n\r\n        // -7: Search your library for any number of basic land cards, put them onto the battlefield, then shuffle your library.  Those lands become 4/4 Elemental creatures with trample.  They're still lands.\r\n       this.addAbility(new LoyaltyAbility(new NissaWorldwakerSearchEffect(), -7));\r\n    }","commit_id":"ad85d4e7f62e07fc93950261b9529792e08fae64","url":"https://github.com/magefree/mage"},{"original_method":"public Overwhelm(UUID ownerId) {\r\n      super(ownerId, 175, \"Overwhelm\", Rarity.UNCOMMON, new CardType[]{CardType.SORCERY}, \"{5}{G}{G}\");\r\n      this.expansionSetCode = \"RAV\";\r\n\r\n      // Convoke (Each creature you tap while casting this spell reduces its cost by {1} or by one mana of that creature's color.)\r\n      this.addAbility(new ConvokeAbility());\r\n\r\n      // Creatures you control get +3/+3 until end of turn.\r\n      this.getSpellAbility().addEffect(new BoostControlledEffect(3, 3, Duration.EndOfTurn));\r\n    }","id":2273,"modified_method":"public Overwhelm(UUID ownerId) {\r\n      super(ownerId, 175, \"Overwhelm\", Rarity.UNCOMMON, new CardType[]{CardType.SORCERY}, \"{5}{G}{G}\");      \r\n      this.expansionSetCode = \"RAV\";\r\n\r\n      this.color.setGreen(true);\r\n      \r\n      // Convoke (Each creature you tap while casting this spell reduces its cost by {1} or by one mana of that creature's color.)\r\n      this.addAbility(new ConvokeAbility());\r\n\r\n      // Creatures you control get +3/+3 until end of turn.\r\n      this.getSpellAbility().addEffect(new BoostControlledEffect(3, 3, Duration.EndOfTurn));\r\n    }","commit_id":"ad85d4e7f62e07fc93950261b9529792e08fae64","url":"https://github.com/magefree/mage"},{"original_method":"private void setText() {\n        if (tapped)\n            staticText = \"Return {this} from your graveyard to the battlefield tapped\";\n        else\n            staticText = \"Return {this} from your graveyard to the battlefield\";\n    }","id":2274,"modified_method":"private void setText() {\n        StringBuilder sb = new StringBuilder(\"Return {this} from your graveyard to the battlefield\");\n        if (tapped) {\n            sb.append(\" tapped\");\n        }        \n        if (ownerControl) {\n               sb.append(\" under its owner's control\");\n        }\n        staticText = sb.toString();\n    }","commit_id":"ad85d4e7f62e07fc93950261b9529792e08fae64","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        Player player = game.getPlayer(source.getControllerId());\n        Card card = player.getGraveyard().get(source.getSourceId(), game);\n        if (card != null) {\n            if(card.putOntoBattlefield(game, Zone.GRAVEYARD, source.getId(), source.getControllerId(), tapped))\n            {\n                return true;\n            }\n        }\n        return false;\n    }","id":2275,"modified_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        if (!game.getState().getZone(source.getSourceId()).equals(Zone.GRAVEYARD)) {\n            return false;\n        }        \n        Card card = game.getCard(source.getSourceId());\n        if (card == null) {\n            return false;\n        }\n        \n        Player player;   \n        if (ownerControl) {\n            player = game.getPlayer(card.getOwnerId());\n        } else {\n            player = game.getPlayer(source.getControllerId());\n        }                \n        if (player == null) {            \n            return false;\n        }        \n        \n        return player.putOntoBattlefieldWithInfo(card, game, Zone.GRAVEYARD, source.getSourceId(), tapped);\n    }","commit_id":"ad85d4e7f62e07fc93950261b9529792e08fae64","url":"https://github.com/magefree/mage"},{"original_method":"public ReturnSourceFromGraveyardToBattlefieldEffect(final ReturnSourceFromGraveyardToBattlefieldEffect effect) {\n        super(effect);\n        this.tapped = effect.tapped;\n    }","id":2276,"modified_method":"public ReturnSourceFromGraveyardToBattlefieldEffect(final ReturnSourceFromGraveyardToBattlefieldEffect effect) {\n        super(effect);\n        this.tapped = effect.tapped;\n        this.ownerControl = effect.ownerControl;\n    }","commit_id":"ad85d4e7f62e07fc93950261b9529792e08fae64","url":"https://github.com/magefree/mage"},{"original_method":"protected RouteBuilder createRouteBuilder() throws Exception {\n        final String sqsEndpointUri = String.format(\"aws-sqs://MyNewCamelQueue?accessKey=%s&secretKey=%s&messageRetentionPeriod=%s&maximumMessageSize=%s&policy=%s\",\n                accessKey, secretKey, \"1209600\", \"65536\", \"%7B%22Version%22%3A%222008-10-17%22%2C%22Id%22%3A%22%2F195004372649%2FMyNewCamelQueue%2FSQSDefaultPolicy%22%2C%22\"\n                        + \"Statement%22%3A%5B%7B%22Sid%22%3A%22Queue1ReceiveMessage%22%2C%22Effect%22%3A%22Allow%22%2C%22Principal%22%3A%7B%22AWS%22%3A%22*%22%7D%2C%22\"\n                        + \"Action%22%3A%22SQS%3AReceiveMessage%22%2C%22Resource%22%3A%22%2F195004372649%2FMyNewCamelQueue%22%7D%5D%7D\");\n        \n        return new RouteBuilder() {\n            @Override\n            public void configure() throws Exception {\n                from(\"direct:start\")\n                    .to(sqsEndpointUri);\n                \n                from(sqsEndpointUri)\n                    .to(\"mock:result\");\n            }\n        };\n    }","id":2277,"modified_method":"protected RouteBuilder createRouteBuilder() throws Exception {\n        final String sqsEndpointUri = String.format(\"aws-sqs://MyNewCamelQueue?accessKey=%s&secretKey=%s&messageRetentionPeriod=%s&maximumMessageSize=%s&visibilityTimeout=%s&policy=%s\",\n                accessKey, secretKey, \"1209600\", \"65536\", \"60\", \"%7B%22Version%22%3A%222008-10-17%22%2C%22Id%22%3A%22%2F195004372649%2FMyNewCamelQueue%2FSQSDefaultPolicy%22%2C%22\"\n                        + \"Statement%22%3A%5B%7B%22Sid%22%3A%22Queue1ReceiveMessage%22%2C%22Effect%22%3A%22Allow%22%2C%22Principal%22%3A%7B%22AWS%22%3A%22*%22%7D%2C%22\"\n                        + \"Action%22%3A%22SQS%3AReceiveMessage%22%2C%22Resource%22%3A%22%2F195004372649%2FMyNewCamelQueue%22%7D%5D%7D\");\n        \n        return new RouteBuilder() {\n            @Override\n            public void configure() throws Exception {\n                from(\"direct:start\")\n                    .to(sqsEndpointUri);\n                \n                from(sqsEndpointUri)\n                    .to(\"mock:result\");\n            }\n        };\n    }","commit_id":"b2a26edba028760b6b228add3462e07949b5065c","url":"https://github.com/apache/camel"},{"original_method":"@Override\n    protected void doStart() throws Exception {\n        client = getConfiguration().getAmazonSQSClient() != null\n                ? getConfiguration().getAmazonSQSClient() : getClient();\n        \n        // creates a new queue, or returns the URL of an existing one\n        CreateQueueRequest request = new CreateQueueRequest(configuration.getQueueName());\n        \n        LOG.trace(\"Creating queue [{}] with request [{}]...\", configuration.getQueueName(), request);\n        \n        CreateQueueResult queueResult = client.createQueue(request);\n        queueUrl = queueResult.getQueueUrl();\n        \n        LOG.trace(\"Queue created and available at: {}\", queueUrl);\n\n        // According to the documentation, only one setting can be made at a time, even though they go into a Map.\n        if (getConfiguration().getDefaultVisibilityTimeout() != null) {\n            updateAttribute(\"VisibilityTimeout\", getConfiguration().getDefaultVisibilityTimeout());\n        }\n        if (getConfiguration().getMaximumMessageSize() != null) {\n            updateAttribute(\"MaximumMessageSize\", getConfiguration().getMaximumMessageSize());\n        }\n        if (getConfiguration().getMessageRetentionPeriod() != null) {\n            updateAttribute(\"MessageRetentionPeriod\", getConfiguration().getMessageRetentionPeriod());\n        }\n        if (getConfiguration().getPolicy() != null) {\n            updateAttribute(\"Policy\", getConfiguration().getPolicy());\n        }\n    }","id":2278,"modified_method":"@Override\n    protected void doStart() throws Exception {\n        client = getConfiguration().getAmazonSQSClient() != null\n                ? getConfiguration().getAmazonSQSClient() : getClient();\n        \n        // creates a new queue, or returns the URL of an existing one\n        CreateQueueRequest request = new CreateQueueRequest(configuration.getQueueName());\n        if (getConfiguration().getDefaultVisibilityTimeout() != null) {\n            request.getAttributes().put(QueueAttributeName.VisibilityTimeout.name(), String.valueOf(getConfiguration().getDefaultVisibilityTimeout()));\n        }\n        if (getConfiguration().getMaximumMessageSize() != null) {\n            request.getAttributes().put(QueueAttributeName.MaximumMessageSize.name(), String.valueOf(getConfiguration().getMaximumMessageSize()));\n        }\n        if (getConfiguration().getMessageRetentionPeriod() != null) {\n            request.getAttributes().put(QueueAttributeName.MessageRetentionPeriod.name(), String.valueOf(getConfiguration().getMessageRetentionPeriod()));\n        }\n        if (getConfiguration().getPolicy() != null) {\n            request.getAttributes().put(QueueAttributeName.Policy.name(), String.valueOf(getConfiguration().getPolicy()));\n        }        \n        LOG.trace(\"Creating queue [{}] with request [{}]...\", configuration.getQueueName(), request);\n        \n        CreateQueueResult queueResult = client.createQueue(request);\n        queueUrl = queueResult.getQueueUrl();\n        \n        LOG.trace(\"Queue created and available at: {}\", queueUrl);\n    }","commit_id":"b2a26edba028760b6b228add3462e07949b5065c","url":"https://github.com/apache/camel"},{"original_method":"public static DefaultResolvedArtifact createResolvedArtifact(Mockery context, final String name, final String type, final String extension, File file) {\n        final Artifact artifactStub = context.mock(Artifact.class, \"artifact\" + name);\n        context.checking(new Expectations() {{\n            allowing(artifactStub).getName();\n            will(returnValue(name));\n            allowing(artifactStub).getType();\n            will(returnValue(type));\n            allowing(artifactStub).getExt();\n            will(returnValue(extension));\n        }});\n        final ResolveEngine resolveEngineMock = context.mock(ResolveEngine.class, \"engine\" + name);\n        final ArtifactDownloadReport artifactDownloadReport = new ArtifactDownloadReport(artifactStub);\n        artifactDownloadReport.setLocalFile(file);\n        context.checking(new Expectations() {{\n            one(resolveEngineMock).download(with(equal(artifactStub)), with(any(DownloadOptions.class)));\n            will(returnValue(artifactDownloadReport));\n        }});\n        return new DefaultResolvedArtifact(artifactStub, resolveEngineMock);\n    }","id":2279,"modified_method":"public static DefaultResolvedArtifact createResolvedArtifact(Mockery context, final String name, final String type, final String extension, File file) {\n        final Artifact artifactStub = context.mock(Artifact.class, \"artifact\" + name);\n        context.checking(new Expectations() {{\n            allowing(artifactStub).getName();\n            will(returnValue(name));\n            allowing(artifactStub).getType();\n            will(returnValue(type));\n            allowing(artifactStub).getExt();\n            will(returnValue(extension));\n            allowing(artifactStub).getExtraAttributes();\n            will(returnValue(Collections.emptyMap()));\n            allowing(artifactStub).getExtraAttribute(with(org.hamcrest.Matchers.notNullValue(String.class)));\n            will(returnValue(null));\n        }});\n        final ResolveEngine resolveEngineMock = context.mock(ResolveEngine.class, \"engine\" + name);\n        final ArtifactDownloadReport artifactDownloadReport = new ArtifactDownloadReport(artifactStub);\n        artifactDownloadReport.setLocalFile(file);\n        context.checking(new Expectations() {{\n            one(resolveEngineMock).download(with(equal(artifactStub)), with(any(DownloadOptions.class)));\n            will(returnValue(artifactDownloadReport));\n        }});\n        return new DefaultResolvedArtifact(context.mock(ResolvedDependency.class), artifactStub, resolveEngineMock);\n    }","commit_id":"2b1737765506a30990d0678287344deaecc0bed0","url":"https://github.com/gradle/gradle"},{"original_method":"IvyService createIvyService(DefaultRepositoryHandler resolverProvider) {\n            DependencyDescriptorFactory dependencyDescriptorFactoryDelegate = createDependencyDescriptorFactory(ProjectDependencyDescriptorFactory.RESOLVE_DESCRIPTOR_STRATEGY);\n            PublishModuleDescriptorConverter fileModuleDescriptorConverter = new PublishModuleDescriptorConverter(\n                    createResolveModuleDescriptorConverter(ProjectDependencyDescriptorFactory.IVY_FILE_DESCRIPTOR_STRATEGY),\n                    new DefaultArtifactsToModuleDescriptorConverter(DefaultArtifactsToModuleDescriptorConverter.IVY_FILE_STRATEGY));\n            InternalRepository internalRepository = new DefaultInternalRepository(projectFinder, parent.get(ModuleDescriptorConverter.class));\n            Factory<Ivy> resolveIvyFactory = new ResolveIvyFactory(parent.get(IvyFactory.class), resolverProvider, parent.get(SettingsConverter.class), internalRepository, clientModuleRegistry);\n\n            return new ErrorHandlingIvyService(\n                    new EventBroadcastingIvyService(\n                            new ShortcircuitEmptyConfigsIvyService(\n                                    new DefaultIvyService(\n                                            resolverProvider,\n                                            parent.get(SettingsConverter.class),\n                                            parent.get(PublishModuleDescriptorConverter.class),\n                                            fileModuleDescriptorConverter,\n                                            parent.get(IvyFactory.class),\n                                            new SelfResolvingDependencyResolver(\n                                                    new DefaultIvyDependencyResolver(\n                                                            new DefaultIvyReportConverter(dependencyDescriptorFactoryDelegate),\n                                                            parent.get(PublishModuleDescriptorConverter.class),\n                                                            resolveIvyFactory)),\n                                            new DefaultIvyDependencyPublisher(\n                                                    new DefaultPublishOptionsFactory())))));\n        }","id":2280,"modified_method":"IvyService createIvyService(DefaultRepositoryHandler resolverProvider) {\n            DependencyDescriptorFactory dependencyDescriptorFactoryDelegate = createDependencyDescriptorFactory(ProjectDependencyDescriptorFactory.RESOLVE_DESCRIPTOR_STRATEGY);\n            PublishModuleDescriptorConverter fileModuleDescriptorConverter = new PublishModuleDescriptorConverter(\n                    createResolveModuleDescriptorConverter(ProjectDependencyDescriptorFactory.IVY_FILE_DESCRIPTOR_STRATEGY),\n                    new DefaultArtifactsToModuleDescriptorConverter(DefaultArtifactsToModuleDescriptorConverter.IVY_FILE_STRATEGY));\n            InternalRepository internalRepository = new DefaultInternalRepository(projectFinder, parent.get(ModuleDescriptorConverter.class));\n            Factory<Ivy> resolveIvyFactory = new ResolveIvyFactory(parent.get(IvyFactory.class), resolverProvider, parent.get(SettingsConverter.class), internalRepository, clientModuleRegistry);\n\n            return new ErrorHandlingIvyService(\n                    new EventBroadcastingIvyService(\n                            new ShortcircuitEmptyConfigsIvyService(\n                                    new DefaultIvyService(\n                                            resolverProvider,\n                                            parent.get(SettingsConverter.class),\n                                            parent.get(PublishModuleDescriptorConverter.class),\n                                            fileModuleDescriptorConverter,\n                                            parent.get(IvyFactory.class),\n                                            new SelfResolvingDependencyResolver(\n                                                    new DefaultIvyDependencyResolver(\n                                                            new DefaultIvyReportConverter(\n                                                                    dependencyDescriptorFactoryDelegate,\n                                                                    new ResolvedArtifactFactory()),\n                                                            parent.get(PublishModuleDescriptorConverter.class),\n                                                            resolveIvyFactory)),\n                                            new DefaultIvyDependencyPublisher(\n                                                    new DefaultPublishOptionsFactory())))));\n        }","commit_id":"2b1737765506a30990d0678287344deaecc0bed0","url":"https://github.com/gradle/gradle"},{"original_method":"public IvyConversionResult convertReport(ResolveReport resolveReport, Configuration configuration) {\n        Clock clock = new Clock();\n        ReportConversionContext context = new ReportConversionContext(resolveReport, configuration);\n        List<IvyNode> resolvedNodes = findResolvedNodes(resolveReport, context);\n        for (IvyNode node : resolvedNodes) {\n            constructConfigurationsForNode(node, context);\n        }\n        for (IvyNode node : resolvedNodes) {\n            attachToParents(node, context);\n        }\n\n        if (context.root == null) {\n            context.root = new DefaultResolvedDependency(resolveReport.getModuleDescriptor().getModuleRevisionId().getOrganisation(),\n                    resolveReport.getModuleDescriptor().getModuleRevisionId().getName(),\n                    resolveReport.getModuleDescriptor().getModuleRevisionId().getRevision(), configuration.getName(),\n                    Collections.EMPTY_SET);\n        }\n\n        logger.debug(\"Timing: Translating report for {} took {}\", configuration, clock.getTime());\n        return new DefaultIvyConversionResult(context.root, context.firstLevelResolvedDependencies, context.resolvedArtifacts);\n    }","id":2281,"modified_method":"public IvyConversionResult convertReport(ResolveReport resolveReport, Configuration configuration) {\n        Clock clock = new Clock();\n        ReportConversionContext context = new ReportConversionContext(resolveReport, configuration);\n        List<IvyNode> resolvedNodes = findResolvedNodes(resolveReport, context);\n        for (IvyNode node : resolvedNodes) {\n            constructConfigurationsForNode(node, context);\n        }\n        for (IvyNode node : resolvedNodes) {\n            attachToParents(node, context);\n        }\n\n        if (context.root == null) {\n            context.root = new DefaultResolvedDependency(resolveReport.getModuleDescriptor().getModuleRevisionId().getOrganisation(),\n                    resolveReport.getModuleDescriptor().getModuleRevisionId().getName(),\n                    resolveReport.getModuleDescriptor().getModuleRevisionId().getRevision(), configuration.getName());\n        }\n\n        logger.debug(\"Timing: Translating report for {} took {}\", configuration, clock.getTime());\n        return new DefaultIvyConversionResult(context.root, context.firstLevelResolvedDependencies, context.resolvedArtifacts);\n    }","commit_id":"2b1737765506a30990d0678287344deaecc0bed0","url":"https://github.com/gradle/gradle"},{"original_method":"private DefaultResolvedArtifact createResolvedArtifact(Artifact artifact, IvyNode ivyNode) {\n        return new DefaultResolvedArtifact(artifact, ivyNode.getData().getEngine());\n    }","id":2282,"modified_method":"private ResolvedArtifact createResolvedArtifact(ResolvedDependency owner, Artifact artifact, IvyNode ivyNode) {\n        return artifactFactory.create(owner, artifact, ivyNode.getData().getEngine());\n    }","commit_id":"2b1737765506a30990d0678287344deaecc0bed0","url":"https://github.com/gradle/gradle"},{"original_method":"private Set<ResolvedArtifact> getArtifacts(IvyNode dependencyNode) {\n        Set<ResolvedArtifact> resolvedArtifacts = new LinkedHashSet<ResolvedArtifact>();\n        Artifact[] artifacts = dependencyNode.getSelectedArtifacts(null);\n        for (Artifact artifact : artifacts) {\n            resolvedArtifacts.add(createResolvedArtifact(artifact, dependencyNode));\n        }\n        return resolvedArtifacts;\n    }","id":2283,"modified_method":"private Set<ResolvedArtifact> getArtifacts(ResolvedDependency owner, IvyNode dependencyNode) {\n        Set<ResolvedArtifact> resolvedArtifacts = new LinkedHashSet<ResolvedArtifact>();\n        Artifact[] artifacts = dependencyNode.getSelectedArtifacts(null);\n        for (Artifact artifact : artifacts) {\n            resolvedArtifacts.add(createResolvedArtifact(owner, artifact, dependencyNode));\n        }\n        return resolvedArtifacts;\n    }","commit_id":"2b1737765506a30990d0678287344deaecc0bed0","url":"https://github.com/gradle/gradle"},{"original_method":"private Set<ResolvedArtifact> getParentSpecificArtifacts(DefaultResolvedDependency resolvedDependency, String parentConfiguration, IvyNode callerNode,\n                                                             IvyNodeCallers.Caller caller, IvyNode childNode) {\n        Set<String> parentConfigurations = getConfigurationHierarchy(callerNode, parentConfiguration);\n        Set<DependencyArtifactDescriptor> parentArtifacts = new LinkedHashSet<DependencyArtifactDescriptor>();\n        for (String configuration : parentConfigurations) {\n            parentArtifacts.addAll(WrapUtil.toSet(caller.getDependencyDescriptor().getDependencyArtifacts(configuration)));\n        }\n\n        Artifact[] allArtifacts = childNode.getSelectedArtifacts(null);\n        Set<ResolvedArtifact> artifacts = new LinkedHashSet<ResolvedArtifact>();\n        for (Artifact artifact : allArtifacts) {\n            for (DependencyArtifactDescriptor parentArtifact : parentArtifacts) {\n                if (isEquals(parentArtifact, artifact)) {\n                    DefaultResolvedArtifact resolvedArtifact = createResolvedArtifact(artifact, childNode);\n                    resolvedArtifact.setResolvedDependency(resolvedDependency);\n                    artifacts.add(resolvedArtifact);\n                    break;\n                }\n            }\n        }\n        return artifacts;\n    }","id":2284,"modified_method":"private Set<ResolvedArtifact> getParentSpecificArtifacts(DefaultResolvedDependency resolvedDependency, String parentConfiguration, IvyNode callerNode,\n                                                             IvyNodeCallers.Caller caller, IvyNode childNode) {\n        Set<String> parentConfigurations = getConfigurationHierarchy(callerNode, parentConfiguration);\n        Set<DependencyArtifactDescriptor> parentArtifacts = new LinkedHashSet<DependencyArtifactDescriptor>();\n        for (String configuration : parentConfigurations) {\n            parentArtifacts.addAll(WrapUtil.toSet(caller.getDependencyDescriptor().getDependencyArtifacts(configuration)));\n        }\n\n        Artifact[] allArtifacts = childNode.getSelectedArtifacts(null);\n        Set<ResolvedArtifact> artifacts = new LinkedHashSet<ResolvedArtifact>();\n        for (Artifact artifact : allArtifacts) {\n            for (DependencyArtifactDescriptor parentArtifact : parentArtifacts) {\n                if (isEquals(parentArtifact, artifact)) {\n                    ResolvedArtifact resolvedArtifact = createResolvedArtifact(resolvedDependency, artifact, childNode);\n                    artifacts.add(resolvedArtifact);\n                    break;\n                }\n            }\n        }\n        return artifacts;\n    }","commit_id":"2b1737765506a30990d0678287344deaecc0bed0","url":"https://github.com/gradle/gradle"},{"original_method":"public DefaultIvyReportConverter(DependencyDescriptorFactory dependencyDescriptorFactory) {\n        this.dependencyDescriptorFactory = dependencyDescriptorFactory;\n    }","id":2285,"modified_method":"public DefaultIvyReportConverter(DependencyDescriptorFactory dependencyDescriptorFactory, ResolvedArtifactFactory artifactFactory) {\n        this.dependencyDescriptorFactory = dependencyDescriptorFactory;\n        this.artifactFactory = artifactFactory;\n    }","commit_id":"2b1737765506a30990d0678287344deaecc0bed0","url":"https://github.com/gradle/gradle"},{"original_method":"private void createAssociationsBetweenChildAndParentResolvedDependencies(IvyNode childNode, Map<String, ConfigurationDetails> childConfigurations,\n                                                                             Set<ResolvedArtifact> resolvedArtifacts,\n                                                                             IvyNode parentNode, IvyNodeCallers.Caller caller,\n                                                                             Set<String> childConfigurationsToAttach,\n                                                                             Collection<ConfigurationDetails> parentConfigurations) {\n        for (String dependencyConfiguration : childConfigurationsToAttach) {\n            Set<String> callerConfigurations = getCallerConfigurationsByDependencyConfiguration(caller, childNode, dependencyConfiguration);\n            Set<ConfigurationDetails> parentCallerConfigurations = selectParentConfigurations(parentConfigurations,\n                    callerConfigurations);\n            for (ConfigurationDetails parentConfiguration : parentCallerConfigurations) {\n                ConfigurationDetails childConfiguration = childConfigurations.get(dependencyConfiguration);\n                parentConfiguration.dependency.getChildren().add(childConfiguration.dependency);\n                childConfiguration.dependency.getParents().add(parentConfiguration.dependency);\n                Set<ResolvedArtifact> parentSpecificResolvedArtifacts = getParentSpecificArtifacts(childConfiguration.dependency, parentConfiguration.dependency.getConfiguration(),\n                        parentNode, caller, childNode);\n                childConfiguration.dependency.addParentSpecificArtifacts(parentConfiguration.dependency, parentSpecificResolvedArtifacts);\n                resolvedArtifacts.addAll(parentSpecificResolvedArtifacts);\n            }\n        }\n    }","id":2286,"modified_method":"private void createAssociationsBetweenChildAndParentResolvedDependencies(IvyNode childNode, Map<String, ConfigurationDetails> childConfigurations,\n                                                                             Set<ResolvedArtifact> resolvedArtifacts,\n                                                                             IvyNode parentNode, IvyNodeCallers.Caller caller,\n                                                                             Set<String> childConfigurationsToAttach,\n                                                                             Collection<ConfigurationDetails> parentConfigurations) {\n        for (String dependencyConfiguration : childConfigurationsToAttach) {\n            Set<String> callerConfigurations = getCallerConfigurationsByDependencyConfiguration(caller, childNode, dependencyConfiguration);\n            Set<ConfigurationDetails> parentCallerConfigurations = selectParentConfigurations(parentConfigurations,\n                    callerConfigurations);\n            for (ConfigurationDetails parentConfiguration : parentCallerConfigurations) {\n                ConfigurationDetails childConfiguration = childConfigurations.get(dependencyConfiguration);\n                parentConfiguration.dependency.getChildren().add(childConfiguration.dependency);\n                childConfiguration.dependency.getParents().add(parentConfiguration.dependency);\n                Set<ResolvedArtifact> parentSpecificResolvedArtifacts = getParentSpecificArtifacts(childConfiguration.dependency, parentConfiguration.dependency.getConfiguration(),\n                        parentNode, caller, childNode);\n                childConfiguration.dependency.addParentSpecificArtifacts(parentConfiguration.dependency, parentSpecificResolvedArtifacts);\n                resolvedArtifacts.addAll(childConfiguration.dependency.getParentArtifacts(parentConfiguration.dependency));\n            }\n        }\n    }","commit_id":"2b1737765506a30990d0678287344deaecc0bed0","url":"https://github.com/gradle/gradle"},{"original_method":"public ConfigurationDetails addConfiguration(IvyNode ivyNode, String configuration) {\n            ModuleRevisionId actualId = ivyNode.getResolvedId();\n            Set<String> configurations = getConfigurationHierarchy(ivyNode, configuration);\n            DefaultResolvedDependency resolvedDependency;\n            if (actualId.getAttribute(DependencyDescriptorFactory.PROJECT_PATH_KEY) != null) {\n                resolvedDependency = new DefaultResolvedDependency(\n                        actualId.getAttribute(DependencyDescriptorFactory.PROJECT_PATH_KEY),\n                        actualId.getOrganisation(), actualId.getName(), actualId.getRevision(),\n                        configuration, getArtifacts(ivyNode));\n            } else {\n                resolvedDependency = new DefaultResolvedDependency(\n                        actualId.getOrganisation(), actualId.getName(), actualId.getRevision(),\n                        configuration, getArtifacts(ivyNode));\n            }\n            for (ResolvedArtifact resolvedArtifact : resolvedDependency.getModuleArtifacts()) {\n                ((DefaultResolvedArtifact) resolvedArtifact).setResolvedDependency(resolvedDependency);\n            }\n            ConfigurationDetails configurationDetails = new ConfigurationDetails(resolvedDependency, ivyNode,\n                    configurations);\n            this.configurations.put(resolvedDependency.getId(), configurationDetails);\n\n            // Collect top level dependencies\n            ResolvedConfigurationIdentifier originalId = new ResolvedConfigurationIdentifier(ivyNode.getId(),\n                    configuration);\n            if (firstLevelDependenciesModuleRevisionIds.containsKey(originalId)) {\n                ModuleDependency firstLevelNode = firstLevelDependenciesModuleRevisionIds.get(originalId);\n                firstLevelResolvedDependencies.get(firstLevelNode).add(resolvedDependency);\n            }\n\n            return configurationDetails;\n        }","id":2287,"modified_method":"public ConfigurationDetails addConfiguration(IvyNode ivyNode, String configuration) {\n            ModuleRevisionId actualId = ivyNode.getResolvedId();\n            Set<String> configurations = getConfigurationHierarchy(ivyNode, configuration);\n            DefaultResolvedDependency resolvedDependency;\n            if (actualId.getAttribute(DependencyDescriptorFactory.PROJECT_PATH_KEY) != null) {\n                resolvedDependency = new DefaultResolvedDependency(\n                        actualId.getAttribute(DependencyDescriptorFactory.PROJECT_PATH_KEY),\n                        actualId.getOrganisation(), actualId.getName(), actualId.getRevision(),\n                        configuration);\n            } else {\n                resolvedDependency = new DefaultResolvedDependency(\n                        actualId.getOrganisation(), actualId.getName(), actualId.getRevision(),\n                        configuration);\n            }\n            Set<ResolvedArtifact> moduleArtifacts = getArtifacts(resolvedDependency, ivyNode);\n            for (ResolvedArtifact artifact : moduleArtifacts) {\n                resolvedDependency.addModuleArtifact(artifact);\n            }\n            ConfigurationDetails configurationDetails = new ConfigurationDetails(resolvedDependency, ivyNode,\n                    configurations);\n            this.configurations.put(resolvedDependency.getId(), configurationDetails);\n\n            // Collect top level dependencies\n            ResolvedConfigurationIdentifier originalId = new ResolvedConfigurationIdentifier(ivyNode.getId(),\n                    configuration);\n            if (firstLevelDependenciesModuleRevisionIds.containsKey(originalId)) {\n                ModuleDependency firstLevelNode = firstLevelDependenciesModuleRevisionIds.get(originalId);\n                firstLevelResolvedDependencies.get(firstLevelNode).add(resolvedDependency);\n            }\n\n            return configurationDetails;\n        }","commit_id":"2b1737765506a30990d0678287344deaecc0bed0","url":"https://github.com/gradle/gradle"},{"original_method":"public DefaultResolvedArtifact(Artifact artifact, ResolveEngine resolvedEngine) {\n        this.artifact = artifact;\n        this.resolvedEngine = resolvedEngine;\n    }","id":2288,"modified_method":"public DefaultResolvedArtifact(ResolvedDependency resolvedDependency, Artifact artifact, ResolveEngine resolvedEngine) {\n        this.resolvedDependency = resolvedDependency;\n        this.artifact = artifact;\n        this.resolvedEngine = resolvedEngine;\n    }","commit_id":"2b1737765506a30990d0678287344deaecc0bed0","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n    public String toString() {\n        return String.format(\"%s;%s\", resolvedDependency, artifact.getName());\n    }","id":2289,"modified_method":"@Override\n    public String toString() {\n        return String.format(\"[ResolvedArtifact dependency:%s name:%s classifier:%s extension:%s type:%s]\", resolvedDependency, getName(), getClassifier(), getExtension(), getType());\n    }","commit_id":"2b1737765506a30990d0678287344deaecc0bed0","url":"https://github.com/gradle/gradle"},{"original_method":"public void addParentSpecificArtifacts(ResolvedDependency parent, Set<ResolvedArtifact> artifacts) {\n        parentArtifacts.put(parent, artifacts);\n    }","id":2290,"modified_method":"public void addParentSpecificArtifacts(ResolvedDependency parent, Set<ResolvedArtifact> artifacts) {\n        TreeSet<ResolvedArtifact> sortedArtifacts = new TreeSet<ResolvedArtifact>(new ResolvedArtifactComparator());\n        sortedArtifacts.addAll(artifacts);\n        parentArtifacts.put(parent, sortedArtifacts);\n    }","commit_id":"2b1737765506a30990d0678287344deaecc0bed0","url":"https://github.com/gradle/gradle"},{"original_method":"public DefaultResolvedDependency(String moduleGroup, String moduleName, String moduleVersion, String configuration,\n                                     Set<ResolvedArtifact> moduleArtifacts) {\n        this(moduleGroup + \":\" + moduleName + \":\" + moduleVersion, moduleGroup, moduleName, moduleVersion,\n                configuration, moduleArtifacts);\n    }","id":2291,"modified_method":"public DefaultResolvedDependency(String name, String moduleGroup, String moduleName, String moduleVersion, String configuration) {\n        this.name = name;\n        id = new ResolvedConfigurationIdentifier(moduleGroup, moduleName, moduleVersion, configuration);\n        this.moduleArtifacts = new TreeSet<ResolvedArtifact>(new ResolvedArtifactComparator());\n    }","commit_id":"2b1737765506a30990d0678287344deaecc0bed0","url":"https://github.com/gradle/gradle"},{"original_method":"public DefaultResolvedDependency(String name, String moduleGroup, String moduleName, String moduleVersion,\n                                     String configuration, Set<ResolvedArtifact> moduleArtifacts) {\n        assert name != null;\n        assert moduleArtifacts != null;\n\n        this.name = name;\n        id = new ResolvedConfigurationIdentifier(moduleGroup, moduleName, moduleVersion, configuration);\n        this.moduleArtifacts = moduleArtifacts;\n    }","id":2292,"modified_method":"public DefaultResolvedDependency(String moduleGroup, String moduleName, String moduleVersion, String configuration) {\n        this(moduleGroup + \":\" + moduleName + \":\" + moduleVersion, moduleGroup, moduleName, moduleVersion, configuration);\n    }","commit_id":"2b1737765506a30990d0678287344deaecc0bed0","url":"https://github.com/gradle/gradle"},{"original_method":"private DefaultResolvedDependency createAndAddParent(String parentName, DefaultResolvedDependency resolvedDependency, Set<ResolvedArtifact> parentSpecificArtifacts) {\n        DefaultResolvedDependency parent = new DefaultResolvedDependency(\"someGroup\", parentName, \"someVersion\", \"someConfiguration\",\n                Collections.<ResolvedArtifact>emptySet());\n        resolvedDependency.getParents().add(parent);\n        resolvedDependency.addParentSpecificArtifacts(parent, parentSpecificArtifacts);\n        return parent;\n    }","id":2293,"modified_method":"private DefaultResolvedDependency createAndAddParent(String parentName, DefaultResolvedDependency resolvedDependency, Set<ResolvedArtifact> parentSpecificArtifacts) {\n        DefaultResolvedDependency parent = new DefaultResolvedDependency(\"someGroup\", parentName, \"someVersion\", \"someConfiguration\");\n        resolvedDependency.getParents().add(parent);\n        resolvedDependency.addParentSpecificArtifacts(parent, parentSpecificArtifacts);\n        return parent;\n    }","commit_id":"2b1737765506a30990d0678287344deaecc0bed0","url":"https://github.com/gradle/gradle"},{"original_method":"@Test\n    public void equalsAndHashCode() {\n        DefaultResolvedDependency dependency = new DefaultResolvedDependency(\"group\", \"name\", \"version\", \"config\",\n                Collections.EMPTY_SET);\n        DefaultResolvedDependency same = new DefaultResolvedDependency(\"group\", \"name\", \"version\", \"config\", Collections.EMPTY_SET);\n        DefaultResolvedDependency differentGroup = new DefaultResolvedDependency(\"other\", \"name\", \"version\", \"config\",\n                Collections.EMPTY_SET);\n        DefaultResolvedDependency differentName = new DefaultResolvedDependency(\"group\", \"other\", \"version\", \"config\",\n                Collections.EMPTY_SET);\n        DefaultResolvedDependency differentVersion = new DefaultResolvedDependency(\"group\", \"name\", \"other\", \"config\",\n                Collections.EMPTY_SET);\n        DefaultResolvedDependency differentConfiguration = new DefaultResolvedDependency(\"group\", \"name\", \"version\",\n                \"other\", Collections.EMPTY_SET);\n\n        assertThat(dependency, strictlyEqual(same));\n        assertThat(dependency, not(equalTo(differentGroup)));\n        assertThat(dependency, not(equalTo(differentName)));\n        assertThat(dependency, not(equalTo(differentVersion)));\n        assertThat(dependency, not(equalTo(differentConfiguration)));\n    }","id":2294,"modified_method":"@Test\n    public void equalsAndHashCode() {\n        DefaultResolvedDependency dependency = new DefaultResolvedDependency(\"group\", \"name\", \"version\", \"config\");\n        DefaultResolvedDependency same = new DefaultResolvedDependency(\"group\", \"name\", \"version\", \"config\");\n        DefaultResolvedDependency differentGroup = new DefaultResolvedDependency(\"other\", \"name\", \"version\", \"config\");\n        DefaultResolvedDependency differentName = new DefaultResolvedDependency(\"group\", \"other\", \"version\", \"config\");\n        DefaultResolvedDependency differentVersion = new DefaultResolvedDependency(\"group\", \"name\", \"other\", \"config\");\n        DefaultResolvedDependency differentConfiguration = new DefaultResolvedDependency(\"group\", \"name\", \"version\", \"other\");\n\n        assertThat(dependency, strictlyEqual(same));\n        assertThat(dependency, not(equalTo(differentGroup)));\n        assertThat(dependency, not(equalTo(differentName)));\n        assertThat(dependency, not(equalTo(differentVersion)));\n        assertThat(dependency, not(equalTo(differentConfiguration)));\n    }","commit_id":"2b1737765506a30990d0678287344deaecc0bed0","url":"https://github.com/gradle/gradle"},{"original_method":"@Test(expected = InvalidUserDataException.class)\n    public void getParentArtifactsWithUnknownParent() {\n        DefaultResolvedDependency resolvedDependency = createResolvedDependency(Collections.<ResolvedArtifact>emptySet());\n        DefaultResolvedDependency unknownParent = new DefaultResolvedDependency(\"someGroup\", \"parent2\", \"someVersion\", \"someConfiguration\",\n                Collections.<ResolvedArtifact>emptySet());\n        assertThat(resolvedDependency.getParentArtifacts(unknownParent),\n                equalTo(Collections.<ResolvedArtifact>emptySet()));\n    }","id":2295,"modified_method":"@Test(expected = InvalidUserDataException.class)\n    public void getParentArtifactsWithUnknownParent() {\n        DefaultResolvedDependency resolvedDependency = createResolvedDependency(Collections.<ResolvedArtifact>emptySet());\n        DefaultResolvedDependency unknownParent = new DefaultResolvedDependency(\"someGroup\", \"parent2\", \"someVersion\", \"someConfiguration\");\n        assertThat(resolvedDependency.getParentArtifacts(unknownParent),\n                equalTo(Collections.<ResolvedArtifact>emptySet()));\n    }","commit_id":"2b1737765506a30990d0678287344deaecc0bed0","url":"https://github.com/gradle/gradle"},{"original_method":"private DefaultResolvedDependency createResolvedDependency(Set<ResolvedArtifact> moduleArtifacts) {\n        return new DefaultResolvedDependency(\"someGroup\", \"someName\", \"someVersion\", \"someConfiguration\",\n                moduleArtifacts);\n    }","id":2296,"modified_method":"private DefaultResolvedDependency createResolvedDependency(Set<ResolvedArtifact> moduleArtifacts) {\n        DefaultResolvedDependency dependency = new DefaultResolvedDependency(\"someGroup\", \"someName\", \"someVersion\", \"someConfiguration\");\n        for (ResolvedArtifact moduleArtifact : moduleArtifacts) {\n            dependency.addModuleArtifact(moduleArtifact);\n        }\n        return dependency;\n    }","commit_id":"2b1737765506a30990d0678287344deaecc0bed0","url":"https://github.com/gradle/gradle"},{"original_method":"@Test\n    public void getAllArtifacts() {\n        Set<ResolvedArtifact> someModuleArtifacts = WrapUtil.toSet(createArtifact(\"someModuleResolvedArtifact\"));\n        Set<ResolvedArtifact> someChildModuleArtifacts = WrapUtil.toSet(createArtifact(\"someChildModuleResolvedArtifact\"));\n        DefaultResolvedDependency resolvedDependency = createResolvedDependency(someModuleArtifacts);\n\n        Set<ResolvedArtifact> parent1SpecificArtifacts = WrapUtil.toSet(createArtifact(\"parent1Specific\"));\n        DefaultResolvedDependency parentResolvedDependency1 = createAndAddParent(\"parent1\", resolvedDependency, parent1SpecificArtifacts);\n\n        createAndAddParent(\"parent2\", resolvedDependency, WrapUtil.toSet(createArtifact(\"parent2Specific\")));\n\n        DefaultResolvedDependency child = new DefaultResolvedDependency(\"someGroup\", \"someChild\", \"someVersion\", \"someChildConfiguration\",\n                someChildModuleArtifacts);\n        resolvedDependency.getChildren().add(child);\n\n        Set<ResolvedArtifact> childParent1SpecificArtifacts = WrapUtil.toSet(createArtifact(\"childParent1Specific\"));\n        createAndAddParent(\"childParent1\", child, childParent1SpecificArtifacts);\n\n        Set<ResolvedArtifact> childParent2SpecificArtifacts = WrapUtil.toSet(createArtifact(\"childParent2Specific\"));\n        createAndAddParent(\"childParent2\", child, childParent2SpecificArtifacts);\n\n        assertThat(resolvedDependency.getAllArtifacts(parentResolvedDependency1),\n                equalTo(GUtil.addSets(someModuleArtifacts, parent1SpecificArtifacts, someChildModuleArtifacts, childParent1SpecificArtifacts, childParent2SpecificArtifacts)));\n    }","id":2297,"modified_method":"@Test\n    public void getAllArtifacts() {\n        Set<ResolvedArtifact> someModuleArtifacts = WrapUtil.toSet(createArtifact(\"someModuleResolvedArtifact\"));\n        ResolvedArtifact childModuleResolvedArtifact = createArtifact(\"someChildModuleResolvedArtifact\");\n        DefaultResolvedDependency resolvedDependency = createResolvedDependency(someModuleArtifacts);\n\n        Set<ResolvedArtifact> parent1SpecificArtifacts = WrapUtil.toSet(createArtifact(\"parent1Specific\"));\n        DefaultResolvedDependency parentResolvedDependency1 = createAndAddParent(\"parent1\", resolvedDependency, parent1SpecificArtifacts);\n\n        createAndAddParent(\"parent2\", resolvedDependency, WrapUtil.toSet(createArtifact(\"parent2Specific\")));\n\n        DefaultResolvedDependency child = new DefaultResolvedDependency(\"someGroup\", \"someChild\", \"someVersion\", \"someChildConfiguration\");\n        child.addModuleArtifact(childModuleResolvedArtifact);\n        resolvedDependency.getChildren().add(child);\n\n        Set<ResolvedArtifact> childParent1SpecificArtifacts = WrapUtil.toSet(createArtifact(\"childParent1Specific\"));\n        createAndAddParent(\"childParent1\", child, childParent1SpecificArtifacts);\n\n        Set<ResolvedArtifact> childParent2SpecificArtifacts = WrapUtil.toSet(createArtifact(\"childParent2Specific\"));\n        createAndAddParent(\"childParent2\", child, childParent2SpecificArtifacts);\n\n        assertThat(resolvedDependency.getAllArtifacts(parentResolvedDependency1),\n                equalTo(GUtil.addSets(someModuleArtifacts, parent1SpecificArtifacts, WrapUtil.toSet(childModuleResolvedArtifact), childParent1SpecificArtifacts, childParent2SpecificArtifacts)));\n    }","commit_id":"2b1737765506a30990d0678287344deaecc0bed0","url":"https://github.com/gradle/gradle"},{"original_method":"@Test\n    public void init() {\n        String someGroup = \"someGroup\";\n        String someName = \"someName\";\n        String someVersion = \"someVersion\";\n        String someConfiguration = \"someConfiguration\";\n        Set<ResolvedArtifact> someArtifacts = WrapUtil.toSet(createArtifact(\"someName\"));\n        DefaultResolvedDependency resolvedDependency = new DefaultResolvedDependency(someGroup, someName, someVersion, someConfiguration,\n                someArtifacts);\n        assertThat(resolvedDependency.getName(), equalTo(someGroup + \":\" + someName + \":\" + someVersion));\n        assertThat(resolvedDependency.getModuleGroup(), equalTo(someGroup));\n        assertThat(resolvedDependency.getModuleName(), equalTo(someName));\n        assertThat(resolvedDependency.getModuleVersion(), equalTo(someVersion));\n        assertThat(resolvedDependency.getConfiguration(), equalTo(someConfiguration));\n        assertThat(resolvedDependency.getModuleArtifacts(), equalTo(someArtifacts));\n        assertThat(resolvedDependency.getChildren(), equalTo(Collections.<ResolvedDependency>emptySet()));\n        assertThat(resolvedDependency.getParents(), equalTo(Collections.<ResolvedDependency>emptySet()));\n    }","id":2298,"modified_method":"@Test\n    public void init() {\n        String someGroup = \"someGroup\";\n        String someName = \"someName\";\n        String someVersion = \"someVersion\";\n        String someConfiguration = \"someConfiguration\";\n        Set<ResolvedArtifact> someArtifacts = WrapUtil.toSet(createArtifact(\"someName\"));\n        DefaultResolvedDependency resolvedDependency = new DefaultResolvedDependency(someGroup, someName, someVersion, someConfiguration);\n        assertThat(resolvedDependency.getName(), equalTo(someGroup + \":\" + someName + \":\" + someVersion));\n        assertThat(resolvedDependency.getModuleGroup(), equalTo(someGroup));\n        assertThat(resolvedDependency.getModuleName(), equalTo(someName));\n        assertThat(resolvedDependency.getModuleVersion(), equalTo(someVersion));\n        assertThat(resolvedDependency.getConfiguration(), equalTo(someConfiguration));\n        assertThat(resolvedDependency.getModuleArtifacts(), equalTo(Collections.<ResolvedArtifact>emptySet()));\n        assertThat(resolvedDependency.getChildren(), equalTo(Collections.<ResolvedDependency>emptySet()));\n        assertThat(resolvedDependency.getParents(), equalTo(Collections.<ResolvedDependency>emptySet()));\n    }","commit_id":"2b1737765506a30990d0678287344deaecc0bed0","url":"https://github.com/gradle/gradle"},{"original_method":"@Test\n    public void getArtifactsWithParentWithoutParentArtifacts() {\n        Set<ResolvedArtifact> moduleArtifacts = WrapUtil.toSet(createArtifact(\"someModuleResolvedArtifact\"));\n        DefaultResolvedDependency resolvedDependency = createResolvedDependency(moduleArtifacts);\n\n        DefaultResolvedDependency parent = new DefaultResolvedDependency(\"someGroup\", \"parent\", \"someVersion\", \"someConfiguration\",\n                Collections.<ResolvedArtifact>emptySet());\n        resolvedDependency.getParents().add(parent);\n        assertThat(resolvedDependency.getArtifacts(parent), equalTo(moduleArtifacts));\n    }","id":2299,"modified_method":"@Test\n    public void getArtifactsWithParentWithoutParentArtifacts() {\n        Set<ResolvedArtifact> moduleArtifacts = WrapUtil.toSet(createArtifact(\"someModuleResolvedArtifact\"));\n        DefaultResolvedDependency resolvedDependency = createResolvedDependency(moduleArtifacts);\n\n        DefaultResolvedDependency parent = new DefaultResolvedDependency(\"someGroup\", \"parent\", \"someVersion\", \"someConfiguration\");\n        resolvedDependency.getParents().add(parent);\n        assertThat(resolvedDependency.getArtifacts(parent), equalTo(moduleArtifacts));\n    }","commit_id":"2b1737765506a30990d0678287344deaecc0bed0","url":"https://github.com/gradle/gradle"},{"original_method":"@Test\n    public void getParentArtifactsWithParentWithoutParentArtifacts() {\n        Set<ResolvedArtifact> moduleArtifacts = WrapUtil.toSet(createArtifact(\"someModuleResolvedArtifact\"));\n        DefaultResolvedDependency resolvedDependency = createResolvedDependency(moduleArtifacts);\n\n        DefaultResolvedDependency parent = new DefaultResolvedDependency(\"someGroup\", \"parent\", \"someVersion\", \"someConfiguration\",\n                Collections.<ResolvedArtifact>emptySet());\n        resolvedDependency.getParents().add(parent);\n        assertThat(resolvedDependency.getParentArtifacts(parent), equalTo(Collections.<ResolvedArtifact>emptySet()));\n    }","id":2300,"modified_method":"@Test\n    public void getParentArtifactsWithParentWithoutParentArtifacts() {\n        Set<ResolvedArtifact> moduleArtifacts = WrapUtil.toSet(createArtifact(\"someModuleResolvedArtifact\"));\n        DefaultResolvedDependency resolvedDependency = createResolvedDependency(moduleArtifacts);\n\n        DefaultResolvedDependency parent = new DefaultResolvedDependency(\"someGroup\", \"parent\", \"someVersion\", \"someConfiguration\");\n        resolvedDependency.getParents().add(parent);\n        assertThat(resolvedDependency.getParentArtifacts(parent), equalTo(Collections.<ResolvedArtifact>emptySet()));\n    }","commit_id":"2b1737765506a30990d0678287344deaecc0bed0","url":"https://github.com/gradle/gradle"},{"original_method":"@Test\n    public void getAllModuleArtifacts() {\n        Set<ResolvedArtifact> someModuleArtifacts = WrapUtil.<ResolvedArtifact>toSet(createArtifact(\"moduleArtifact\"));\n        Set<ResolvedArtifact> someChildModuleArtifacts = WrapUtil.<ResolvedArtifact>toSet(createArtifact(\"childModuleArtifact\"));\n        DefaultResolvedDependency resolvedDependency = new DefaultResolvedDependency(\"someGroup\", \"someName\", \"someVersion\", \"someConfiguration\",\n                someModuleArtifacts);\n        resolvedDependency.getChildren().add(new DefaultResolvedDependency(\"someGroup\", \"someChild\", \"someVersion\", \"someChildConfiguration\",\n                someChildModuleArtifacts));\n        assertThat(resolvedDependency.getAllModuleArtifacts(), equalTo(GUtil.addSets(someChildModuleArtifacts, someModuleArtifacts)));\n    }","id":2301,"modified_method":"@Test\n    public void getAllModuleArtifacts() {\n        ResolvedArtifact moduleArtifact = createArtifact(\"moduleArtifact\");\n        ResolvedArtifact childModuleArtifact = createArtifact(\"childModuleArtifact\");\n        DefaultResolvedDependency resolvedDependency = new DefaultResolvedDependency(\"someGroup\", \"someName\", \"someVersion\", \"someConfiguration\");\n        resolvedDependency.addModuleArtifact(moduleArtifact);\n        DefaultResolvedDependency childDependency = new DefaultResolvedDependency(\"someGroup\", \"someChild\", \"someVersion\", \"someChildConfiguration\");\n        childDependency.addModuleArtifact(childModuleArtifact);\n        resolvedDependency.getChildren().add(childDependency);\n        assertThat(resolvedDependency.getAllModuleArtifacts(), equalTo(WrapUtil.toSet(moduleArtifact, childModuleArtifact)));\n    }","commit_id":"2b1737765506a30990d0678287344deaecc0bed0","url":"https://github.com/gradle/gradle"},{"original_method":"@Test(expected = InvalidUserDataException.class)\n    public void getArtifactsWithUnknownParent() {\n        Set<ResolvedArtifact> someModuleArtifacts = WrapUtil.toSet(createArtifact(\"someModuleResolvedArtifact\"));\n        DefaultResolvedDependency resolvedDependency = createResolvedDependency(Collections.<ResolvedArtifact>emptySet());\n\n        DefaultResolvedDependency unknownParent = new DefaultResolvedDependency(\"someGroup\", \"parent2\", \"someVersion\", \"someConfiguration\",\n                Collections.<ResolvedArtifact>emptySet());\n        assertThat(resolvedDependency.getParentArtifacts(unknownParent),\n                equalTo(someModuleArtifacts));\n    }","id":2302,"modified_method":"@Test(expected = InvalidUserDataException.class)\n    public void getArtifactsWithUnknownParent() {\n        Set<ResolvedArtifact> someModuleArtifacts = WrapUtil.toSet(createArtifact(\"someModuleResolvedArtifact\"));\n        DefaultResolvedDependency resolvedDependency = createResolvedDependency(Collections.<ResolvedArtifact>emptySet());\n\n        DefaultResolvedDependency unknownParent = new DefaultResolvedDependency(\"someGroup\", \"parent2\", \"someVersion\", \"someConfiguration\");\n        assertThat(resolvedDependency.getParentArtifacts(unknownParent),\n                equalTo(someModuleArtifacts));\n    }","commit_id":"2b1737765506a30990d0678287344deaecc0bed0","url":"https://github.com/gradle/gradle"},{"original_method":"/**\n     * Append generated reports to the toc only if <code>generateReports<\/code> is enabled, for instance:\n     * <pre>\n     * &lt;item name=\"Project Reports\" ref=\"/project-info\"&gt;\n     * &nbsp;&nbsp;&lt;item name=\"Project License\" ref=\"/license\" /&gt;\n     * &nbsp;&nbsp;&lt;item name=\"Project Team\" ref=\"/team-list\" /&gt;\n     * &nbsp;&nbsp;&lt;item name=\"Continuous Integration\" ref=\"/integration\" /&gt;\n     * &nbsp;&nbsp;...\n     * &lt;/item&gt;\n     * <\/pre>\n     *\n     * @param model not null\n     * @param locale not null\n     * @see #generateMavenReports(Locale)\n     * @since 1.1\n     */\n    private void appendGeneratedReports( DocumentModel model, Locale locale )\n    {\n        if ( !includeReports )\n        {\n            return;\n        }\n        if ( getGeneratedMavenReports( locale ).isEmpty() )\n        {\n            return;\n        }\n\n        final DocumentTOCItem documentTOCItem = new DocumentTOCItem();\n        documentTOCItem.setName( i18n.getString( \"pdf-plugin\", locale, \"toc.project-info.item\" ) );\n        documentTOCItem.setRef( \"/project-info\" ); // see #generateMavenReports(Locale)\n\n        List addedRef = new ArrayList( 4 );\n\n        List items = new ArrayList( 4 );\n\n        // append generated report defined as MavenReport\n        for ( final Iterator it = getGeneratedMavenReports( locale ).iterator(); it.hasNext(); )\n        {\n            final MavenReport report = (MavenReport) it.next();\n\n            final DocumentTOCItem reportItem = new DocumentTOCItem();\n            reportItem.setName( report.getName( locale ) );\n            reportItem.setRef( \"/\" + report.getOutputName() );\n\n            items.add( reportItem );\n\n            addedRef.add( report.getOutputName() );\n        }\n\n        // append all generated reports from generated-site\n        try\n        {\n            if ( generatedSiteDirectory.exists() )\n            {\n                String excludes = getDefaultExcludesWithLocales( getAvailableLocales(), getDefaultLocale() );\n                List generatedDirs = FileUtils.getDirectoryNames( generatedSiteDirectory, \"*\", excludes, true );\n                if ( !locale.getLanguage().equals( getDefaultLocale().getLanguage() ) )\n                {\n                    generatedDirs =\n                        FileUtils.getFileNames( new File( generatedSiteDirectory, locale.getLanguage() ), \"*\",\n                                                excludes, true );\n                }\n\n                for ( final Iterator it = generatedDirs.iterator(); it.hasNext(); )\n                {\n                    final String generatedDir = it.next().toString();\n\n                    List generatedFiles =\n                        FileUtils.getFileNames( new File( generatedDir ), \"**.*\", excludes, false );\n\n                    for ( final Iterator it2 = generatedFiles.iterator(); it2.hasNext(); )\n                    {\n                        final String generatedFile = it2.next().toString();\n                        final String ref = generatedFile.substring( 0, generatedFile.lastIndexOf( '.') );\n\n                        if ( !addedRef.contains( ref ) )\n                        {\n                            final String title =\n                                getGeneratedDocumentTitle( new File( generatedDir, generatedFile ) );\n\n                            if ( title != null )\n                            {\n                                final DocumentTOCItem reportItem = new DocumentTOCItem();\n                                reportItem.setName( title );\n                                reportItem.setRef( \"/\" + ref );\n\n                                items.add( reportItem );\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        catch ( IOException e )\n        {\n            if ( getLog().isDebugEnabled() )\n            {\n                getLog().error( \"IOException: \" + e.getMessage(), e );\n            }\n            else\n            {\n                getLog().error( \"IOException: \" + e.getMessage() );\n            }\n        }\n\n        // append to Toc\n        documentTOCItem.setItems( items );\n        model.getToc().addItem( documentTOCItem );\n    }","id":2303,"modified_method":"/**\n     * Append generated reports to the toc only if <code>generateReports<\/code> is enabled, for instance:\n     * <pre>\n     * &lt;item name=\"Project Reports\" ref=\"/project-info\"&gt;\n     * &nbsp;&nbsp;&lt;item name=\"Project License\" ref=\"/license\" /&gt;\n     * &nbsp;&nbsp;&lt;item name=\"Project Team\" ref=\"/team-list\" /&gt;\n     * &nbsp;&nbsp;&lt;item name=\"Continuous Integration\" ref=\"/integration\" /&gt;\n     * &nbsp;&nbsp;...\n     * &lt;/item&gt;\n     * <\/pre>\n     *\n     * @param model not null\n     * @param locale not null\n     * @see #generateMavenReports(Locale)\n     * @since 1.1\n     */\n    private void appendGeneratedReports( DocumentModel model, Locale locale )\n    {\n        if ( !includeReports )\n        {\n            return;\n        }\n        if ( getGeneratedMavenReports( locale ).isEmpty() )\n        {\n            return;\n        }\n\n        final DocumentTOCItem documentTOCItem = new DocumentTOCItem();\n        documentTOCItem.setName( i18n.getString( \"pdf-plugin\", locale, \"toc.project-info.item\" ) );\n        documentTOCItem.setRef( \"/project-info\" ); // see #generateMavenReports(Locale)\n\n        List addedRef = new ArrayList( 4 );\n\n        List items = new ArrayList( 4 );\n\n        // append generated report defined as MavenReport\n        for ( final Iterator it = getGeneratedMavenReports( locale ).iterator(); it.hasNext(); )\n        {\n            final MavenReport report = (MavenReport) it.next();\n\n            final DocumentTOCItem reportItem = new DocumentTOCItem();\n            reportItem.setName( report.getName( locale ) );\n            reportItem.setRef( \"/\" + report.getOutputName() );\n\n            items.add( reportItem );\n\n            addedRef.add( report.getOutputName() );\n        }\n\n        // append all generated reports from generated-site\n        try\n        {\n            if ( generatedSiteDirectory.exists() )\n            {\n                String excludes = getDefaultExcludesWithLocales( getAvailableLocales(), getDefaultLocale() );\n                List generatedDirs = FileUtils.getDirectoryNames( generatedSiteDirectory, \"*\", excludes, true );\n                if ( !locale.getLanguage().equals( getDefaultLocale().getLanguage() ) )\n                {\n                    generatedDirs =\n                        FileUtils.getFileNames( new File( generatedSiteDirectory, locale.getLanguage() ), \"*\",\n                                                excludes, true );\n                }\n\n                for ( final Iterator it = generatedDirs.iterator(); it.hasNext(); )\n                {\n                    final String generatedDir = it.next().toString();\n\n                    List generatedFiles =\n                        FileUtils.getFileNames( new File( generatedDir ), \"**.*\", excludes, false );\n\n                    for ( final Iterator it2 = generatedFiles.iterator(); it2.hasNext(); )\n                    {\n                        final String generatedFile = it2.next().toString();\n                        final String ref = generatedFile.substring( 0, generatedFile.lastIndexOf( '.') );\n\n                        if ( !addedRef.contains( ref ) )\n                        {\n                            final String title =\n                                getGeneratedDocumentTitle( new File( generatedDir, generatedFile ) );\n\n                            if ( title != null )\n                            {\n                                final DocumentTOCItem reportItem = new DocumentTOCItem();\n                                reportItem.setName( title );\n                                reportItem.setRef( \"/\" + ref );\n\n                                items.add( reportItem );\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        catch ( IOException e )\n        {\n            getLog().error( \"IOException: \" + e.getMessage() );\n            getLog().debug( e );\n        }\n\n        // append to Toc\n        documentTOCItem.setItems( items );\n        model.getToc().addItem( documentTOCItem );\n    }","commit_id":"403582849433b594f9588c92c1183f4080c99e91","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Parse a generated Doxia file and returns its title.\n     *\n     * @param f not null\n     * @return the xdoc file title or null if an error occurs.\n     * @throws IOException if any\n     * @since 1.1\n     */\n    private String getGeneratedDocumentTitle( final File f )\n        throws IOException\n    {\n        final IndexEntry entry = new IndexEntry( \"index\" );\n        final IndexingSink titleSink = new IndexingSink( entry );\n\n        Reader reader = null;\n        try\n        {\n            reader = ReaderFactory.newXmlReader( f );\n\n            doxia.parse( reader, f.getParentFile().getName(), titleSink );\n        }\n        catch ( ParseException e )\n        {\n            if ( getLog().isDebugEnabled() )\n            {\n                getLog().error( \"ParseException: \" + e.getMessage(), e );\n            }\n            else\n            {\n                getLog().error( \"ParseException: \" + e.getMessage() );\n            }\n            return null;\n        }\n        catch ( ParserNotFoundException e )\n        {\n            if ( getLog().isDebugEnabled() )\n            {\n                getLog().error( \"ParserNotFoundException: \" + e.getMessage(), e );\n            }\n            else\n            {\n                getLog().error( \"ParserNotFoundException: \" + e.getMessage() );\n            }\n            return null;\n        }\n        finally\n        {\n            IOUtil.close( reader );\n        }\n\n        return titleSink.getTitle();\n    }","id":2304,"modified_method":"/**\n     * Parse a generated Doxia file and returns its title.\n     *\n     * @param f not null\n     * @return the xdoc file title or null if an error occurs.\n     * @throws IOException if any\n     * @since 1.1\n     */\n    private String getGeneratedDocumentTitle( final File f )\n        throws IOException\n    {\n        final IndexEntry entry = new IndexEntry( \"index\" );\n        final IndexingSink titleSink = new IndexingSink( entry );\n\n        Reader reader = null;\n        try\n        {\n            reader = ReaderFactory.newXmlReader( f );\n\n            doxia.parse( reader, f.getParentFile().getName(), titleSink );\n        }\n        catch ( ParseException e )\n        {\n            getLog().error( \"ParseException: \" + e.getMessage() );\n            getLog().debug( e );\n            return null;\n        }\n        catch ( ParserNotFoundException e )\n        {\n            getLog().error( \"ParserNotFoundException: \" + e.getMessage() );\n            getLog().debug( e );\n            return null;\n        }\n        finally\n        {\n            IOUtil.close( reader );\n        }\n\n        return titleSink.getTitle();\n    }","commit_id":"403582849433b594f9588c92c1183f4080c99e91","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Parsing the generated report to see if it is correct or not. Log the error for the user.\n     *\n     * @param mojoDescriptor not null\n     * @param generatedReport not null\n     * @param localReportName not null\n     * @return <code>true<\/code> if Doxia is able to parse the generated report, <code>false<\/code> otherwise.\n     * @since 1.1\n     */\n    private boolean isValidGeneratedReport( MojoDescriptor mojoDescriptor, File generatedReport,\n                                            String localReportName )\n    {\n        SinkAdapter sinkAdapter = new SinkAdapter();\n        Reader reader = null;\n        try\n        {\n            reader = ReaderFactory.newXmlReader( generatedReport );\n\n            doxia.parse( reader, generatedReport.getParentFile().getName(), sinkAdapter );\n        }\n        catch ( ParseException e )\n        {\n            StringBuffer sb = new StringBuffer( 1024 );\n\n            sb.append( EOL ).append( EOL );\n            sb.append( \"Error when parsing the generated report: \" ).append( generatedReport.getAbsolutePath() );\n            sb.append( EOL );\n            sb.append( e.getMessage() );\n            sb.append( EOL ).append( EOL );\n\n            sb.append( \"You could:\" ).append( EOL );\n            sb.append( \"  * exclude all reports using -DincludeReports=false\" ).append( EOL );\n            sb.append( \"  * remove the \" );\n            sb.append( mojoDescriptor.getPluginDescriptor().getGroupId() );\n            sb.append( \":\" );\n            sb.append( mojoDescriptor.getPluginDescriptor().getArtifactId() );\n            sb.append( \":\" );\n            sb.append( mojoDescriptor.getPluginDescriptor().getVersion() );\n            sb.append( \" from the <reporting/> part. To not affect the site generation, \" );\n            sb.append( \"you could create a PDF profile.\" ).append( EOL );\n            sb.append( EOL );\n\n            MavenProject pluginProject = getReportPluginProject( mojoDescriptor.getPluginDescriptor() );\n\n            if ( pluginProject == null )\n            {\n                sb.append( \"You could also contact the Plugin team.\" ).append( EOL );\n            }\n            else\n            {\n                sb.append( \"You could also contact the Plugin team:\" ).append( EOL );\n                if ( pluginProject.getMailingLists() != null && !pluginProject.getMailingLists().isEmpty() )\n                {\n                    boolean appended = false;\n                    for ( Iterator i = pluginProject.getMailingLists().iterator(); i.hasNext(); )\n                    {\n                        MailingList mailingList = (MailingList) i.next();\n\n                        if ( StringUtils.isNotEmpty( mailingList.getName() )\n                            && StringUtils.isNotEmpty( mailingList.getPost() ) )\n                        {\n                            if ( !appended )\n                            {\n                                sb.append( \"  Mailing Lists:\" ).append( EOL );\n                                appended = true;\n                            }\n                            sb.append( \"    \" ).append( mailingList.getName() );\n                            sb.append( \": \" ).append( mailingList.getPost() );\n                            sb.append( EOL );\n                        }\n                    }\n                }\n                if ( StringUtils.isNotEmpty( pluginProject.getUrl() ) )\n                {\n                    sb.append( \"  Web Site:\" ).append( EOL );\n                    sb.append( \"    \" ).append( pluginProject.getUrl() );\n                    sb.append( EOL );\n                }\n                if ( pluginProject.getIssueManagement() != null\n                    && StringUtils.isNotEmpty( pluginProject.getIssueManagement().getUrl() ) )\n                {\n                    sb.append( \"  Issue Tracking:\" ).append( EOL );\n                    sb.append( \"    \" ).append( pluginProject.getIssueManagement().getUrl() );\n                    sb.append( EOL );\n                }\n            }\n\n            sb.append( EOL ).append( \"Ignoring the \\\"\" ).append( localReportName ).append( \"\\\" report in the PDF.\").append( EOL );\n\n            if ( getLog().isDebugEnabled() )\n            {\n                getLog().error( sb.toString(), e );\n            }\n            else\n            {\n                getLog().error( sb.toString() );\n            }\n\n            return false;\n        }\n        catch ( ParserNotFoundException e )\n        {\n            if ( getLog().isDebugEnabled() )\n            {\n                getLog().error( \"ParserNotFoundException: \" + e.getMessage(), e );\n            }\n            else\n            {\n                getLog().error( \"ParserNotFoundException: \" + e.getMessage() );\n            }\n\n            return false;\n        }\n        catch ( IOException e )\n        {\n            if ( getLog().isDebugEnabled() )\n            {\n                getLog().error( \"IOException: \" + e.getMessage(), e );\n            }\n            else\n            {\n                getLog().error( \"IOException: \" + e.getMessage() );\n            }\n\n            return false;\n        }\n        finally\n        {\n            IOUtil.close( reader );\n        }\n\n        return true;\n    }","id":2305,"modified_method":"/**\n     * Parsing the generated report to see if it is correct or not. Log the error for the user.\n     *\n     * @param mojoDescriptor not null\n     * @param generatedReport not null\n     * @param localReportName not null\n     * @return <code>true<\/code> if Doxia is able to parse the generated report, <code>false<\/code> otherwise.\n     * @since 1.1\n     */\n    private boolean isValidGeneratedReport( MojoDescriptor mojoDescriptor, File generatedReport,\n                                            String localReportName )\n    {\n        SinkAdapter sinkAdapter = new SinkAdapter();\n        Reader reader = null;\n        try\n        {\n            reader = ReaderFactory.newXmlReader( generatedReport );\n\n            doxia.parse( reader, generatedReport.getParentFile().getName(), sinkAdapter );\n        }\n        catch ( ParseException e )\n        {\n            StringBuffer sb = new StringBuffer( 1024 );\n\n            sb.append( EOL ).append( EOL );\n            sb.append( \"Error when parsing the generated report: \" ).append( generatedReport.getAbsolutePath() );\n            sb.append( EOL );\n            sb.append( e.getMessage() );\n            sb.append( EOL ).append( EOL );\n\n            sb.append( \"You could:\" ).append( EOL );\n            sb.append( \"  * exclude all reports using -DincludeReports=false\" ).append( EOL );\n            sb.append( \"  * remove the \" );\n            sb.append( mojoDescriptor.getPluginDescriptor().getGroupId() );\n            sb.append( \":\" );\n            sb.append( mojoDescriptor.getPluginDescriptor().getArtifactId() );\n            sb.append( \":\" );\n            sb.append( mojoDescriptor.getPluginDescriptor().getVersion() );\n            sb.append( \" from the <reporting/> part. To not affect the site generation, \" );\n            sb.append( \"you could create a PDF profile.\" ).append( EOL );\n            sb.append( EOL );\n\n            MavenProject pluginProject = getReportPluginProject( mojoDescriptor.getPluginDescriptor() );\n\n            if ( pluginProject == null )\n            {\n                sb.append( \"You could also contact the Plugin team.\" ).append( EOL );\n            }\n            else\n            {\n                sb.append( \"You could also contact the Plugin team:\" ).append( EOL );\n                if ( pluginProject.getMailingLists() != null && !pluginProject.getMailingLists().isEmpty() )\n                {\n                    boolean appended = false;\n                    for ( Iterator i = pluginProject.getMailingLists().iterator(); i.hasNext(); )\n                    {\n                        MailingList mailingList = (MailingList) i.next();\n\n                        if ( StringUtils.isNotEmpty( mailingList.getName() )\n                            && StringUtils.isNotEmpty( mailingList.getPost() ) )\n                        {\n                            if ( !appended )\n                            {\n                                sb.append( \"  Mailing Lists:\" ).append( EOL );\n                                appended = true;\n                            }\n                            sb.append( \"    \" ).append( mailingList.getName() );\n                            sb.append( \": \" ).append( mailingList.getPost() );\n                            sb.append( EOL );\n                        }\n                    }\n                }\n                if ( StringUtils.isNotEmpty( pluginProject.getUrl() ) )\n                {\n                    sb.append( \"  Web Site:\" ).append( EOL );\n                    sb.append( \"    \" ).append( pluginProject.getUrl() );\n                    sb.append( EOL );\n                }\n                if ( pluginProject.getIssueManagement() != null\n                    && StringUtils.isNotEmpty( pluginProject.getIssueManagement().getUrl() ) )\n                {\n                    sb.append( \"  Issue Tracking:\" ).append( EOL );\n                    sb.append( \"    \" ).append( pluginProject.getIssueManagement().getUrl() );\n                    sb.append( EOL );\n                }\n            }\n\n            sb.append( EOL ).append( \"Ignoring the \\\"\" ).append( localReportName ).append( \"\\\" report in the PDF.\").append( EOL );\n\n            getLog().error( sb.toString() );\n            getLog().debug( e );\n\n            return false;\n        }\n        catch ( ParserNotFoundException e )\n        {\n            getLog().error( \"ParserNotFoundException: \" + e.getMessage() );\n            getLog().debug( e );\n\n            return false;\n        }\n        catch ( IOException e )\n        {\n            getLog().error( \"IOException: \" + e.getMessage() );\n            getLog().debug( e );\n\n            return false;\n        }\n        finally\n        {\n            IOUtil.close( reader );\n        }\n\n        return true;\n    }","commit_id":"403582849433b594f9588c92c1183f4080c99e91","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Generate the given Maven report only if it is not an external report and the report could be generated.\n     *\n     * @param mojoDescriptor not null, to catch linkage error\n     * @param report could be null\n     * @param locale not null\n     * @throws IOException if any\n     * @throws MojoExecutionException if any\n     * @see #isValidGeneratedReport(MojoDescriptor, File, String)\n     * @since 1.1\n     */\n    private void generateMavenReport( MojoDescriptor mojoDescriptor, MavenReport report, Locale locale )\n        throws IOException, MojoExecutionException\n    {\n        if ( report == null )\n        {\n            return;\n        }\n\n        String localReportName = report.getName( locale );\n        if ( !report.canGenerateReport() )\n        {\n            if ( getLog().isInfoEnabled() )\n            {\n                getLog().info( \"Skipped \\\"\" + localReportName + \"\\\" report.\" );\n            }\n            getLog().debug( \"canGenerateReport() was false.\" );\n\n            return;\n        }\n\n        if ( report.isExternalReport() )\n        {\n            if ( getLog().isInfoEnabled() )\n            {\n                getLog().info( \"Skipped external \\\"\" + localReportName + \"\\\" report.\" );\n            }\n            getLog().debug( \"isExternalReport() was false.\" );\n\n            return;\n        }\n\n        for ( final Iterator it = getGeneratedMavenReports( locale ).iterator(); it.hasNext(); )\n        {\n            MavenReport generatedReport = (MavenReport) it.next();\n\n            if ( report.getName( locale ).equals( generatedReport.getName( locale ) ) )\n            {\n                if ( getLog().isDebugEnabled() )\n                {\n                    getLog().debug( report.getName( locale ) + \" was already generated.\" );\n                }\n                return;\n            }\n        }\n\n        File outDir = new File( getGeneratedSiteDirectoryTmp(), \"xdoc\" );\n        if ( !locale.getLanguage().equals( defaultLocale.getLanguage() ) )\n        {\n            outDir = new File( new File( getGeneratedSiteDirectoryTmp(), locale.getLanguage() ), \"xdoc\" );\n        }\n        outDir.mkdirs();\n\n        File generatedReport = new File( outDir, report.getOutputName() + \".xml\" );\n\n        String excludes = getDefaultExcludesWithLocales( getAvailableLocales(), getDefaultLocale() );\n        List files = FileUtils.getFileNames( siteDirectory, \"*/\" + report.getOutputName() + \".*\", excludes, false );\n        if ( !locale.getLanguage().equals( defaultLocale.getLanguage() ) )\n        {\n            files =\n                FileUtils.getFileNames( new File( siteDirectory, locale.getLanguage() ), \"*/\"\n                    + report.getOutputName() + \".*\", excludes, false );\n        }\n\n        if ( files.size() != 0 )\n        {\n            String displayLanguage = locale.getDisplayLanguage( Locale.ENGLISH );\n\n            if ( getLog().isInfoEnabled() )\n            {\n                getLog().info(\n                               \"Skipped \\\"\" + report.getName( locale ) + \"\\\" report, file \\\"\"\n                                   + report.getOutputName() + \"\\\" already exists for the \" + displayLanguage\n                                   + \" version.\" );\n            }\n\n            return;\n        }\n\n        if ( getLog().isInfoEnabled() )\n        {\n            getLog().info( \"Generating \\\"\" + localReportName + \"\\\" report.\" );\n        }\n\n        StringWriter sw = new StringWriter();\n\n        PdfSink sink = null;\n        try\n        {\n            sink = new PdfSink( sw );\n            org.codehaus.doxia.sink.Sink proxy =\n                (org.codehaus.doxia.sink.Sink) Proxy\n                                                    .newProxyInstance(\n                                                                       org.codehaus.doxia.sink.Sink.class\n                                                                                                         .getClassLoader(),\n                                                                       new Class[] { org.codehaus.doxia.sink.Sink.class },\n                                                                       new SinkDelegate( sink ) );\n            report.generate( proxy, locale );\n        }\n        catch ( MavenReportException e )\n        {\n            throw new MojoExecutionException( \"MavenReportException: \" + e.getMessage(), e );\n        }\n        catch ( LinkageError e )\n        {\n            if ( getLog().isErrorEnabled() )\n            {\n                ClassRealm reportPluginRealm = mojoDescriptor.getPluginDescriptor().getClassRealm();\n                StringBuffer sb = new StringBuffer( 1024 );\n                sb.append( report.getClass().getName() ).append( \"#generate(...) caused a linkage error (\" );\n                sb.append( e.getClass().getName() )\n                        .append( \") and may be out-of-date. Check the realms:\" ).append( EOL );\n                sb.append( \"Maven Report Plugin realm = \" ).append( reportPluginRealm.getId()).append( EOL );\n                for ( int i = 0; i < reportPluginRealm.getConstituents().length; i++ )\n                {\n                    sb.append( \"urls[\" ).append( i ).append( \"] = \" ).append( reportPluginRealm.getConstituents()[i]);\n                    if ( i != ( reportPluginRealm.getConstituents().length - 1 ) )\n                    {\n                        sb.append( EOL );\n                    }\n                }\n\n                getLog().error( sb.toString() );\n            }\n\n            throw e;\n        }\n        finally\n        {\n            if ( sink != null )\n            {\n                sink.close();\n            }\n        }\n\n        writeGeneratedReport( sw.toString(), generatedReport );\n\n        if ( isValidGeneratedReport( mojoDescriptor, generatedReport, localReportName ) )\n        {\n            getGeneratedMavenReports( locale ).add( report );\n        }\n    }","id":2306,"modified_method":"/**\n     * Generate the given Maven report only if it is not an external report and the report could be generated.\n     *\n     * @param mojoDescriptor not null, to catch linkage error\n     * @param report could be null\n     * @param locale not null\n     * @throws IOException if any\n     * @throws MojoExecutionException if any\n     * @see #isValidGeneratedReport(MojoDescriptor, File, String)\n     * @since 1.1\n     */\n    private void generateMavenReport( MojoDescriptor mojoDescriptor, MavenReport report, Locale locale )\n        throws IOException, MojoExecutionException\n    {\n        if ( report == null )\n        {\n            return;\n        }\n\n        String localReportName = report.getName( locale );\n        if ( !report.canGenerateReport() )\n        {\n            getLog().info( \"Skipped \\\"\" + localReportName + \"\\\" report.\" );\n            getLog().debug( \"canGenerateReport() was false.\" );\n\n            return;\n        }\n\n        if ( report.isExternalReport() )\n        {\n            getLog().info( \"Skipped external \\\"\" + localReportName + \"\\\" report.\" );\n            getLog().debug( \"isExternalReport() was false.\" );\n\n            return;\n        }\n\n        for ( final Iterator it = getGeneratedMavenReports( locale ).iterator(); it.hasNext(); )\n        {\n            MavenReport generatedReport = (MavenReport) it.next();\n\n            if ( report.getName( locale ).equals( generatedReport.getName( locale ) ) )\n            {\n                if ( getLog().isDebugEnabled() )\n                {\n                    getLog().debug( report.getName( locale ) + \" was already generated.\" );\n                }\n                return;\n            }\n        }\n\n        File outDir = new File( getGeneratedSiteDirectoryTmp(), \"xdoc\" );\n        if ( !locale.getLanguage().equals( defaultLocale.getLanguage() ) )\n        {\n            outDir = new File( new File( getGeneratedSiteDirectoryTmp(), locale.getLanguage() ), \"xdoc\" );\n        }\n        outDir.mkdirs();\n\n        File generatedReport = new File( outDir, report.getOutputName() + \".xml\" );\n\n        String excludes = getDefaultExcludesWithLocales( getAvailableLocales(), getDefaultLocale() );\n        List files = FileUtils.getFileNames( siteDirectory, \"*/\" + report.getOutputName() + \".*\", excludes, false );\n        if ( !locale.getLanguage().equals( defaultLocale.getLanguage() ) )\n        {\n            files =\n                FileUtils.getFileNames( new File( siteDirectory, locale.getLanguage() ), \"*/\"\n                    + report.getOutputName() + \".*\", excludes, false );\n        }\n\n        if ( files.size() != 0 )\n        {\n            String displayLanguage = locale.getDisplayLanguage( Locale.ENGLISH );\n\n            if ( getLog().isInfoEnabled() )\n            {\n                getLog().info(\n                               \"Skipped \\\"\" + report.getName( locale ) + \"\\\" report, file \\\"\"\n                                   + report.getOutputName() + \"\\\" already exists for the \" + displayLanguage\n                                   + \" version.\" );\n            }\n\n            return;\n        }\n\n        if ( getLog().isInfoEnabled() )\n        {\n            getLog().info( \"Generating \\\"\" + localReportName + \"\\\" report.\" );\n        }\n\n        StringWriter sw = new StringWriter();\n\n        PdfSink sink = null;\n        try\n        {\n            sink = new PdfSink( sw );\n            org.codehaus.doxia.sink.Sink proxy =\n                (org.codehaus.doxia.sink.Sink) Proxy\n                                                    .newProxyInstance(\n                                                                       org.codehaus.doxia.sink.Sink.class\n                                                                                                         .getClassLoader(),\n                                                                       new Class[] { org.codehaus.doxia.sink.Sink.class },\n                                                                       new SinkDelegate( sink ) );\n            report.generate( proxy, locale );\n        }\n        catch ( MavenReportException e )\n        {\n            throw new MojoExecutionException( \"MavenReportException: \" + e.getMessage(), e );\n        }\n        catch ( LinkageError e )\n        {\n            if ( getLog().isErrorEnabled() )\n            {\n                ClassRealm reportPluginRealm = mojoDescriptor.getPluginDescriptor().getClassRealm();\n                StringBuffer sb = new StringBuffer( 1024 );\n                sb.append( report.getClass().getName() ).append( \"#generate(...) caused a linkage error (\" );\n                sb.append( e.getClass().getName() )\n                        .append( \") and may be out-of-date. Check the realms:\" ).append( EOL );\n                sb.append( \"Maven Report Plugin realm = \" ).append( reportPluginRealm.getId()).append( EOL );\n                for ( int i = 0; i < reportPluginRealm.getConstituents().length; i++ )\n                {\n                    sb.append( \"urls[\" ).append( i ).append( \"] = \" ).append( reportPluginRealm.getConstituents()[i]);\n                    if ( i != ( reportPluginRealm.getConstituents().length - 1 ) )\n                    {\n                        sb.append( EOL );\n                    }\n                }\n\n                getLog().error( sb.toString() );\n            }\n\n            throw e;\n        }\n        finally\n        {\n            if ( sink != null )\n            {\n                sink.close();\n            }\n        }\n\n        writeGeneratedReport( sw.toString(), generatedReport );\n\n        if ( isValidGeneratedReport( mojoDescriptor, generatedReport, localReportName ) )\n        {\n            getGeneratedMavenReports( locale ).add( report );\n        }\n    }","commit_id":"403582849433b594f9588c92c1183f4080c99e91","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * @param pluginDescriptor not null\n     * @return the MavenProject for the current plugin descriptor or null if an error occurred.\n     * @since 1.1\n     */\n    private MavenProject getReportPluginProject( PluginDescriptor pluginDescriptor )\n    {\n        Artifact artifact =\n            artifactFactory.createProjectArtifact( pluginDescriptor.getGroupId(),\n                                                   pluginDescriptor.getArtifactId(),\n                                                   pluginDescriptor.getVersion(), Artifact.SCOPE_COMPILE );\n        try\n        {\n            return mavenProjectBuilder.buildFromRepository( artifact, remoteRepositories, localRepository );\n        }\n        catch ( ProjectBuildingException e )\n        {\n            if ( getLog().isDebugEnabled() )\n            {\n                getLog().error( \"ProjectBuildingException: \" + e.getMessage(), e );\n            }\n            else\n            {\n                getLog().error( \"ProjectBuildingException: \" + e.getMessage() );\n            }\n        }\n\n        return null;\n    }","id":2307,"modified_method":"/**\n     * @param pluginDescriptor not null\n     * @return the MavenProject for the current plugin descriptor or null if an error occurred.\n     * @since 1.1\n     */\n    private MavenProject getReportPluginProject( PluginDescriptor pluginDescriptor )\n    {\n        Artifact artifact =\n            artifactFactory.createProjectArtifact( pluginDescriptor.getGroupId(),\n                                                   pluginDescriptor.getArtifactId(),\n                                                   pluginDescriptor.getVersion(), Artifact.SCOPE_COMPILE );\n        try\n        {\n            return mavenProjectBuilder.buildFromRepository( artifact, remoteRepositories, localRepository );\n        }\n        catch ( ProjectBuildingException e )\n        {\n            getLog().error( \"ProjectBuildingException: \" + e.getMessage() );\n            getLog().debug( e );\n        }\n\n        return null;\n    }","commit_id":"403582849433b594f9588c92c1183f4080c99e91","url":"https://github.com/apache/maven-plugins"},{"original_method":"public HttpResponse execute() throws IOException {\n        CloseableHttpResponse closeableHttpResponse = null;\n        try {\n            HttpUriRequest httpUriRequest = buildRequest();\n            if (logger.isTraceEnabled()) {\n                StringBuilder stringBuilder = new StringBuilder(httpUriRequest.getMethod()).append(\" \").append(httpUriRequest.getURI());\n                if (Strings.hasLength(body)) {\n                    stringBuilder.append(\"\\n\").append(body);\n                }\n                logger.trace(\"sending request \\n{}\", stringBuilder.toString());\n            }\n            closeableHttpResponse = httpClient.execute(httpUriRequest);\n            HttpResponse httpResponse = new HttpResponse(httpUriRequest, closeableHttpResponse);\n            logger.trace(\"got response \\n{}\\n{}\", closeableHttpResponse, httpResponse.hasBody() ? httpResponse.getBody() : \"\");\n            return httpResponse;\n        } finally {\n            try {\n                IOUtils.close(closeableHttpResponse);\n            } catch (IOException e) {\n                logger.error(\"error closing http response\", e);\n            }\n        }\n    }","id":2308,"modified_method":"public HttpResponse execute() throws IOException {\n        HttpUriRequest httpUriRequest = buildRequest();\n        if (logger.isTraceEnabled()) {\n            StringBuilder stringBuilder = new StringBuilder(httpUriRequest.getMethod()).append(\" \").append(httpUriRequest.getURI());\n            if (Strings.hasLength(body)) {\n                stringBuilder.append(\"\\n\").append(body);\n            }\n            logger.trace(\"sending request \\n{}\", stringBuilder.toString());\n        }\n        for (Map.Entry<String, String> entry : this.headers.entrySet()) {\n            httpUriRequest.addHeader(entry.getKey(), entry.getValue());\n        }\n        try (CloseableHttpResponse closeableHttpResponse = httpClient.execute(httpUriRequest)) {\n            HttpResponse httpResponse = new HttpResponse(httpUriRequest, closeableHttpResponse);\n            logger.trace(\"got response \\n{}\\n{}\", closeableHttpResponse, httpResponse.hasBody() ? httpResponse.getBody() : \"\");\n            return httpResponse;\n        }\n    }","commit_id":"35e562343f71282271b05104eadd7ee66e51af81","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private URI buildUri() {\n        String query;\n        if (params.size() == 0) {\n            query = null;\n        } else {\n            query = Joiner.on('&').withKeyValueSeparator(\"=\").join(params);\n        }\n        try {\n            return new URI(\"http\", null, host, port, path, query, null);\n        } catch (URISyntaxException e) {\n            throw new IllegalArgumentException(e);\n        }\n    }","id":2309,"modified_method":"private URI buildUri() {\n        String query;\n        if (params.size() == 0) {\n            query = null;\n        } else {\n            query = Joiner.on('&').withKeyValueSeparator(\"=\").join(params);\n        }\n        try {\n            return new URI(protocol, null, host, port, path, query, null);\n        } catch (URISyntaxException e) {\n            throw new IllegalArgumentException(e);\n        }\n    }","commit_id":"35e562343f71282271b05104eadd7ee66e51af81","url":"https://github.com/elastic/elasticsearch"},{"original_method":"HttpResponse(HttpUriRequest httpRequest, CloseableHttpResponse httpResponse) {\n        this.httpRequest = httpRequest;\n        this.statusCode = httpResponse.getStatusLine().getStatusCode();\n        this.reasonPhrase = httpResponse.getStatusLine().getReasonPhrase();\n        if (httpResponse.getEntity() != null) {\n            try {\n                this.body = EntityUtils.toString(httpResponse.getEntity(), HttpRequestBuilder.DEFAULT_CHARSET);\n            } catch (IOException e) {\n                EntityUtils.consumeQuietly(httpResponse.getEntity());\n                throw new RuntimeException(e);\n            } finally {\n                try {\n                    httpResponse.close();\n                } catch (IOException e) {\n                    logger.error(e.getMessage(), e);\n                }\n            }\n        } else {\n            this.body = null;\n        }\n    }","id":2310,"modified_method":"HttpResponse(HttpUriRequest httpRequest, CloseableHttpResponse httpResponse) {\n        this.httpRequest = httpRequest;\n        this.statusCode = httpResponse.getStatusLine().getStatusCode();\n        this.reasonPhrase = httpResponse.getStatusLine().getReasonPhrase();\n        for (Header header : httpResponse.getAllHeaders()) {\n            this.headers.put(header.getName(), header.getValue());\n        }\n        if (httpResponse.getEntity() != null) {\n            try {\n                this.body = EntityUtils.toString(httpResponse.getEntity(), HttpRequestBuilder.DEFAULT_CHARSET);\n            } catch (IOException e) {\n                EntityUtils.consumeQuietly(httpResponse.getEntity());\n                throw new RuntimeException(e);\n            } finally {\n                try {\n                    httpResponse.close();\n                } catch (IOException e) {\n                    logger.error(e.getMessage(), e);\n                }\n            }\n        } else {\n            this.body = null;\n        }\n    }","commit_id":"35e562343f71282271b05104eadd7ee66e51af81","url":"https://github.com/elastic/elasticsearch"},{"original_method":"void handlePluginSite(HttpRequest request, HttpChannel channel) {\n        if (disableSites) {\n            channel.sendResponse(new BytesRestResponse(FORBIDDEN));\n            return;\n        }\n        if (request.method() == RestRequest.Method.OPTIONS) {\n            // when we have OPTIONS request, simply send OK by default (with the Access Control Origin header which gets automatically added)\n            channel.sendResponse(new BytesRestResponse(OK));\n            return;\n        }\n        if (request.method() != RestRequest.Method.GET) {\n            channel.sendResponse(new BytesRestResponse(FORBIDDEN));\n            return;\n        }\n        // TODO for a \"/_plugin\" endpoint, we should have a page that lists all the plugins?\n\n        String path = request.rawPath().substring(\"/_plugin/\".length());\n        int i1 = path.indexOf('/');\n        String pluginName;\n        String sitePath;\n        if (i1 == -1) {\n            pluginName = path;\n            sitePath = null;\n            // If a trailing / is missing, we redirect to the right page #2654\n            channel.sendResponse(new BytesRestResponse(RestStatus.MOVED_PERMANENTLY, \"text/html\", \"<head><meta http-equiv=\\\"refresh\\\" content=\\\"0; URL=\" + request.rawPath() + \"/\\\"><\/head>\"));\n            return;\n        } else {\n            pluginName = path.substring(0, i1);\n            sitePath = path.substring(i1 + 1);\n        }\n\n        if (sitePath.length() == 0) {\n            sitePath = \"/index.html\";\n        }\n\n        // Convert file separators.\n        sitePath = sitePath.replace('/', File.separatorChar);\n\n        // this is a plugin provided site, serve it as static files from the plugin location\n        File siteFile = new File(new File(environment.pluginsFile(), pluginName), \"_site\");\n        File file = new File(siteFile, sitePath);\n        if (!file.exists() || file.isHidden()) {\n            channel.sendResponse(new BytesRestResponse(NOT_FOUND));\n            return;\n        }\n        if (!file.isFile()) {\n            // If it's not a dir, we send a 403\n            if (!file.isDirectory()) {\n                channel.sendResponse(new BytesRestResponse(FORBIDDEN));\n                return;\n            }\n            // We don't serve dir but if index.html exists in dir we should serve it\n            file = new File(file, \"index.html\");\n            if (!file.exists() || file.isHidden() || !file.isFile()) {\n                channel.sendResponse(new BytesRestResponse(FORBIDDEN));\n                return;\n            }\n        }\n        if (!file.getAbsolutePath().startsWith(siteFile.getAbsolutePath())) {\n            channel.sendResponse(new BytesRestResponse(FORBIDDEN));\n            return;\n        }\n        try {\n            byte[] data = Streams.copyToByteArray(file);\n            channel.sendResponse(new BytesRestResponse(OK, guessMimeType(sitePath), data));\n        } catch (IOException e) {\n            channel.sendResponse(new BytesRestResponse(INTERNAL_SERVER_ERROR));\n        }\n    }","id":2311,"modified_method":"void handlePluginSite(HttpRequest request, HttpChannel channel) {\n        if (disableSites) {\n            channel.sendResponse(new BytesRestResponse(FORBIDDEN));\n            return;\n        }\n        if (request.method() == RestRequest.Method.OPTIONS) {\n            // when we have OPTIONS request, simply send OK by default (with the Access Control Origin header which gets automatically added)\n            channel.sendResponse(new BytesRestResponse(OK));\n            return;\n        }\n        if (request.method() != RestRequest.Method.GET) {\n            channel.sendResponse(new BytesRestResponse(FORBIDDEN));\n            return;\n        }\n        // TODO for a \"/_plugin\" endpoint, we should have a page that lists all the plugins?\n\n        String path = request.rawPath().substring(\"/_plugin/\".length());\n        int i1 = path.indexOf('/');\n        String pluginName;\n        String sitePath;\n        if (i1 == -1) {\n            pluginName = path;\n            sitePath = null;\n            // If a trailing / is missing, we redirect to the right page #2654\n            String redirectUrl = request.rawPath() + \"/\";\n            BytesRestResponse restResponse = new BytesRestResponse(RestStatus.MOVED_PERMANENTLY, \"text/html\", \"<head><meta http-equiv=\\\"refresh\\\" content=\\\"0; URL=\" + redirectUrl + \"><\/head>\");\n            restResponse.addHeader(\"Location\", redirectUrl);\n            channel.sendResponse(restResponse);\n            return;\n        } else {\n            pluginName = path.substring(0, i1);\n            sitePath = path.substring(i1 + 1);\n        }\n\n        if (sitePath.length() == 0) {\n            sitePath = \"/index.html\";\n        }\n\n        // Convert file separators.\n        sitePath = sitePath.replace('/', File.separatorChar);\n\n        // this is a plugin provided site, serve it as static files from the plugin location\n        File siteFile = new File(new File(environment.pluginsFile(), pluginName), \"_site\");\n        File file = new File(siteFile, sitePath);\n        if (!file.exists() || file.isHidden()) {\n            channel.sendResponse(new BytesRestResponse(NOT_FOUND));\n            return;\n        }\n        if (!file.isFile()) {\n            // If it's not a dir, we send a 403\n            if (!file.isDirectory()) {\n                channel.sendResponse(new BytesRestResponse(FORBIDDEN));\n                return;\n            }\n            // We don't serve dir but if index.html exists in dir we should serve it\n            file = new File(file, \"index.html\");\n            if (!file.exists() || file.isHidden() || !file.isFile()) {\n                channel.sendResponse(new BytesRestResponse(FORBIDDEN));\n                return;\n            }\n        }\n        if (!file.getAbsolutePath().startsWith(siteFile.getAbsolutePath())) {\n            channel.sendResponse(new BytesRestResponse(FORBIDDEN));\n            return;\n        }\n        try {\n            byte[] data = Streams.copyToByteArray(file);\n            channel.sendResponse(new BytesRestResponse(OK, guessMimeType(sitePath), data));\n        } catch (IOException e) {\n            channel.sendResponse(new BytesRestResponse(INTERNAL_SERVER_ERROR));\n        }\n    }","commit_id":"35e562343f71282271b05104eadd7ee66e51af81","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testThatJSONPisDisabled() throws Exception {\n        // Make the HTTP request\n        HttpServerTransport httpServerTransport = internalCluster().getDataNodeInstance(HttpServerTransport.class);\n        HttpClient httpClient = new HttpClient(httpServerTransport.boundAddress().publishAddress());\n        HttpClientResponse response = httpClient.request(\"/?callback=DisabledJSONPCallback\");\n        assertThat(response.getHeader(\"Content-Type\"), is(\"application/javascript\"));\n        assertThat(response.response(), containsString(\"DisabledJSONPCallback(\"));\n        assertThat(response.response(), containsString(\"JSONP is disabled\"));\n    }","id":2312,"modified_method":"@Test\n    public void testThatJSONPisDisabled() throws Exception {\n        // Make the HTTP request\n        HttpResponse response = new HttpRequestBuilder(HttpClients.createDefault()).httpTransport(internalCluster().getDataNodeInstance(HttpServerTransport.class))\n                .path(\"/\")\n                .addParam(\"callback\", \"DisabledJSONPCallback\").execute();\n\n        assertThat(response.getHeaders().get(\"Content-Type\"), is(\"application/javascript\"));\n        assertThat(response.getBody(), containsString(\"DisabledJSONPCallback(\"));\n        assertThat(response.getBody(), containsString(\"JSONP is disabled\"));\n    }","commit_id":"35e562343f71282271b05104eadd7ee66e51af81","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testThatJSONPisEnabled() throws Exception {\n        // Make the HTTP request\n        HttpServerTransport httpServerTransport = internalCluster().getDataNodeInstance(HttpServerTransport.class);\n        HttpClient httpClient = new HttpClient(httpServerTransport.boundAddress().publishAddress());\n        HttpClientResponse response = httpClient.request(\"/?callback=EnabledJSONPCallback\");\n        assertThat(response.getHeader(\"Content-Type\"), is(\"application/javascript\"));\n        assertThat(response.response(), containsString(\"EnabledJSONPCallback(\"));\n        assertThat(response.response(), containsString(\"You Know, for Search\"));\n    }","id":2313,"modified_method":"@Test\n    public void testThatJSONPisEnabled() throws Exception {\n        // Make the HTTP request\n        HttpResponse response = new HttpRequestBuilder(HttpClients.createDefault()).httpTransport(internalCluster().getDataNodeInstance(HttpServerTransport.class)).path(\"/\").addParam(\"callback\", \"EnabledJSONPCallback\").execute();\n        assertThat(response.getHeaders().get(\"Content-Type\"), is(\"application/javascript\"));\n        assertThat(response.getBody(), containsString(\"EnabledJSONPCallback(\"));\n        assertThat(response.getBody(), containsString(\"You Know, for Search\"));\n    }","commit_id":"35e562343f71282271b05104eadd7ee66e51af81","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * We are ignoring by default these tests as they require to have an internet access\n     * To activate the test, use -Dtests.network=true\n     * We test regular form: groupId/artifactId/version\n     * It should find it in maven central service\n     */\n    @Test\n    @Network\n    public void testInstallPluginWithMavenCentral() throws IOException {\n        assumeTrue(isDownloadServiceWorking(\"http://search.maven.org/\", \"/\"));\n        singlePluginInstallAndRemove(\"org.elasticsearch/elasticsearch-transport-thrift/1.5.0\", null);\n    }","id":2314,"modified_method":"/**\n     * We are ignoring by default these tests as they require to have an internet access\n     * To activate the test, use -Dtests.network=true\n     * We test regular form: groupId/artifactId/version\n     * It should find it in maven central service\n     */\n    @Test\n    @Network\n    public void testInstallPluginWithMavenCentral() throws IOException {\n        assumeTrue(isDownloadServiceWorking(\"search.maven.org\", 80, \"/\"));\n        singlePluginInstallAndRemove(\"org.elasticsearch/elasticsearch-transport-thrift/1.5.0\", null);\n    }","commit_id":"35e562343f71282271b05104eadd7ee66e51af81","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private void assertPluginAvailable(String pluginName) throws InterruptedException {\n        HttpServerTransport httpServerTransport = internalCluster().getInstance(HttpServerTransport.class);\n        final HttpClient httpClient = new HttpClient(httpServerTransport.boundAddress().publishAddress());\n        logger.info(\"--> tested http address [{}]\", httpServerTransport.info().getAddress());\n\n        //checking that the http connector is working properly\n        // We will try it for some seconds as it could happen that the REST interface is not yet fully started\n        assertThat(awaitBusy(new Predicate<Object>() {\n            public boolean apply(Object obj) {\n                HttpClientResponse response = httpClient.request(\"\");\n                if (response.errorCode() != RestStatus.OK.getStatus()) {\n                    // We want to trace what's going on here before failing the test\n                    logger.info(\"--> error caught [{}], headers [{}]\", response.errorCode(), response.getHeaders());\n                    logger.info(\"--> cluster state [{}]\", internalCluster().clusterService().state());\n                    return false;\n                }\n                return true;\n            }\n        }, 5, TimeUnit.SECONDS), equalTo(true));\n\n\n        //checking now that the plugin is available\n        HttpClientResponse response = httpClient.request(\"_plugin/\" + pluginName + \"/\");\n        assertThat(response, notNullValue());\n        assertThat(response.errorCode(), equalTo(RestStatus.OK.getStatus()));\n    }","id":2315,"modified_method":"private void assertPluginAvailable(String pluginName) throws InterruptedException, IOException {\n        final HttpRequestBuilder httpRequestBuilder = getHttpRequestBuilder();\n\n        //checking that the http connector is working properly\n        // We will try it for some seconds as it could happen that the REST interface is not yet fully started\n        assertThat(awaitBusy(new Predicate<Object>() {\n            public boolean apply(Object obj) {\n                try {\n                    HttpResponse response = httpRequestBuilder.method(\"GET\").path(\"/\").execute();\n                    if (response.getStatusCode() != RestStatus.OK.getStatus()) {\n                        // We want to trace what's going on here before failing the test\n                        logger.info(\"--> error caught [{}], headers [{}]\", response.getStatusCode(), response.getHeaders());\n                        logger.info(\"--> cluster state [{}]\", internalCluster().clusterService().state());\n                        return false;\n                    }\n                    return true;\n                } catch (IOException e) {\n                    throw new ElasticsearchException(\"HTTP problem\", e);\n                }\n            }\n        }, 5, TimeUnit.SECONDS), equalTo(true));\n\n\n        //checking now that the plugin is available\n        HttpResponse response = getHttpRequestBuilder().method(\"GET\").path(\"/_plugin/\" + pluginName + \"/\").execute();\n        assertThat(response, notNullValue());\n        assertThat(response.getStatusCode(), equalTo(RestStatus.OK.getStatus()));\n    }","commit_id":"35e562343f71282271b05104eadd7ee66e51af81","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * We are ignoring by default these tests as they require to have an internet access\n     * To activate the test, use -Dtests.network=true\n     * We test regular form: username/reponame/version\n     * It should find it in download.elasticsearch.org service\n     */\n    @Test\n    @Network\n    public void testInstallPluginWithElasticsearchDownloadService() throws IOException {\n        assumeTrue(isDownloadServiceWorking(\"http://download.elasticsearch.org/\", \"elasticsearch/ci-test.txt\"));\n        singlePluginInstallAndRemove(\"elasticsearch/elasticsearch-transport-thrift/1.5.0\", null);\n    }","id":2316,"modified_method":"/**\n     * We are ignoring by default these tests as they require to have an internet access\n     * To activate the test, use -Dtests.network=true\n     * We test regular form: username/reponame/version\n     * It should find it in download.elasticsearch.org service\n     */\n    @Test\n    @Network\n    public void testInstallPluginWithElasticsearchDownloadService() throws IOException {\n        assumeTrue(isDownloadServiceWorking(\"download.elasticsearch.org\", 80, \"/elasticsearch/ci-test.txt\"));\n        singlePluginInstallAndRemove(\"elasticsearch/elasticsearch-transport-thrift/1.5.0\", null);\n    }","commit_id":"35e562343f71282271b05104eadd7ee66e51af81","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * We are ignoring by default these tests as they require to have an internet access\n     * To activate the test, use -Dtests.network=true\n     * We test site plugins from github: userName/repoName\n     * It should find it on github\n     */\n    @Test\n    @Network\n    public void testInstallPluginWithGithub() throws IOException {\n        assumeTrue(isDownloadServiceWorking(\"https://github.com/\", \"/\"));\n        singlePluginInstallAndRemove(\"elasticsearch/kibana\", null);\n    }","id":2317,"modified_method":"/**\n     * We are ignoring by default these tests as they require to have an internet access\n     * To activate the test, use -Dtests.network=true\n     * We test site plugins from github: userName/repoName\n     * It should find it on github\n     */\n    @Test\n    @Network\n    public void testInstallPluginWithGithub() throws IOException {\n        assumeTrue(isDownloadServiceWorking(\"github.com\", 443, \"/\"));\n        singlePluginInstallAndRemove(\"elasticsearch/kibana\", null);\n    }","commit_id":"35e562343f71282271b05104eadd7ee66e51af81","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private boolean isDownloadServiceWorking(String url, String resource) {\n        HttpClient client = new HttpClient(url);\n        try {\n            if (client.request(resource).errorCode() != 200) {\n                logger.warn(\"[{}{}] download service is not working. Disabling current test.\", url, resource);\n                return false;\n            }\n            return true;\n        } catch (Throwable t) {\n            logger.warn(\"[{}{}] download service is not working. Disabling current test.\", url, resource);\n        }\n        return false;\n    }","id":2318,"modified_method":"private boolean isDownloadServiceWorking(String host, int port, String resource) {\n        try {\n            String protocol = port == 443 ? \"https\" : \"http\";\n            HttpResponse response = new HttpRequestBuilder(HttpClients.createDefault()).protocol(protocol).host(host).port(port).path(resource).execute();\n            if (response.getStatusCode() != 200) {\n                logger.warn(\"[{}{}] download service is not working. Disabling current test.\", host, resource);\n                return false;\n            }\n            return true;\n        } catch (Throwable t) {\n            logger.warn(\"[{}{}] download service is not working. Disabling current test.\", host, resource);\n        }\n        return false;\n    }","commit_id":"35e562343f71282271b05104eadd7ee66e51af81","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private HttpClient httpClient() {\n        HttpServerTransport httpServerTransport = internalCluster().getDataNodeInstance(HttpServerTransport.class);\n        return new HttpClient(httpServerTransport.boundAddress().publishAddress());\n    }","id":2319,"modified_method":"private HttpRequestBuilder httpClient() {\n        return new HttpRequestBuilder(HttpClients.createDefault()).httpTransport(internalCluster().getDataNodeInstance(HttpServerTransport.class));\n    }","commit_id":"35e562343f71282271b05104eadd7ee66e51af81","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testThatSettingHeadersWorks() throws Exception {\n        ensureGreen();\n        HttpClientResponse response = httpClient().request(\"/_protected\");\n        assertThat(response.errorCode(), equalTo(RestStatus.UNAUTHORIZED.getStatus()));\n        assertThat(response.getHeader(\"Secret\"), equalTo(\"required\"));\n\n        Map<String, String> headers = Maps.newHashMap();\n        headers.put(\"Secret\", \"password\");\n        HttpClientResponse authResponse = httpClient().request(\"GET\", \"_protected\", headers);\n        assertThat(authResponse.errorCode(), equalTo(RestStatus.OK.getStatus()));\n        assertThat(authResponse.getHeader(\"Secret\"), equalTo(\"granted\"));\n    }","id":2320,"modified_method":"@Test\n    public void testThatSettingHeadersWorks() throws Exception {\n        ensureGreen();\n        HttpResponse response = httpClient().method(\"GET\").path(\"/_protected\").execute();\n        assertThat(response.getStatusCode(), equalTo(RestStatus.UNAUTHORIZED.getStatus()));\n        assertThat(response.getHeaders().get(\"Secret\"), equalTo(\"required\"));\n\n        HttpResponse authResponse = httpClient().method(\"GET\").path(\"/_protected\").addHeader(\"Secret\", \"password\").execute();\n        assertThat(authResponse.getStatusCode(), equalTo(RestStatus.OK.getStatus()));\n        assertThat(authResponse.getHeaders().get(\"Secret\"), equalTo(\"granted\"));\n    }","commit_id":"35e562343f71282271b05104eadd7ee66e51af81","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * Test case for #4845: https://github.com/elasticsearch/elasticsearch/issues/4845\n     * Serving _site plugins do not pick up on index.html for sub directories\n     */\n    @Test\n    public void testWelcomePageInSubDirs() throws Exception {\n        HttpClientResponse response = httpClient().request(\"/_plugin/subdir/dir/\");\n        assertThat(response.errorCode(), equalTo(RestStatus.OK.getStatus()));\n        assertThat(response.response(), containsString(\"<title>Dummy Site Plugin (subdir)<\/title>\"));\n\n        response = httpClient().request(\"/_plugin/subdir/dir_without_index/\");\n        assertThat(response.errorCode(), equalTo(RestStatus.FORBIDDEN.getStatus()));\n\n        response = httpClient().request(\"/_plugin/subdir/dir_without_index/page.html\");\n        assertThat(response.errorCode(), equalTo(RestStatus.OK.getStatus()));\n        assertThat(response.response(), containsString(\"<title>Dummy Site Plugin (page)<\/title>\"));\n    }","id":2321,"modified_method":"/**\n     * Test case for #4845: https://github.com/elasticsearch/elasticsearch/issues/4845\n     * Serving _site plugins do not pick up on index.html for sub directories\n     */\n    @Test\n    public void testWelcomePageInSubDirs() throws Exception {\n        HttpResponse response = httpClient().path(\"/_plugin/subdir/dir/\").execute();\n        assertThat(response.getStatusCode(), equalTo(RestStatus.OK.getStatus()));\n        assertThat(response.getBody(), containsString(\"<title>Dummy Site Plugin (subdir)<\/title>\"));\n\n        response = httpClient().path(\"/_plugin/subdir/dir_without_index/\").execute();\n        assertThat(response.getStatusCode(), equalTo(RestStatus.FORBIDDEN.getStatus()));\n\n        response = httpClient().path(\"/_plugin/subdir/dir_without_index/page.html\").execute();\n        assertThat(response.getStatusCode(), equalTo(RestStatus.OK.getStatus()));\n        assertThat(response.getBody(), containsString(\"<title>Dummy Site Plugin (page)<\/title>\"));\n    }","commit_id":"35e562343f71282271b05104eadd7ee66e51af81","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * Test direct access to an existing file (index.html)\n     */\n    @Test\n    public void testAnyPage() throws Exception {\n        HttpClientResponse response = httpClient().request(\"/_plugin/dummy/index.html\");\n        assertThat(response.errorCode(), equalTo(RestStatus.OK.getStatus()));\n        assertThat(response.response(), containsString(\"<title>Dummy Site Plugin<\/title>\"));\n    }","id":2322,"modified_method":"/**\n     * Test direct access to an existing file (index.html)\n     */\n    @Test\n    public void testAnyPage() throws Exception {\n        HttpResponse response = httpClient().path(\"/_plugin/dummy/index.html\").execute();\n        assertThat(response.getStatusCode(), equalTo(RestStatus.OK.getStatus()));\n        assertThat(response.getBody(), containsString(\"<title>Dummy Site Plugin<\/title>\"));\n    }","commit_id":"35e562343f71282271b05104eadd7ee66e51af81","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public HttpClient httpClient() {\n        HttpServerTransport httpServerTransport = internalCluster().getDataNodeInstance(HttpServerTransport.class);\n        return new HttpClient(httpServerTransport.boundAddress().publishAddress());\n    }","id":2323,"modified_method":"public HttpRequestBuilder httpClient() {\n        RequestConfig.Builder builder = RequestConfig.custom().setRedirectsEnabled(false);\n        CloseableHttpClient httpClient = HttpClients.custom().setDefaultRequestConfig(builder.build()).build();\n        return new HttpRequestBuilder(httpClient).httpTransport(internalCluster().getDataNodeInstance(HttpServerTransport.class));\n    }","commit_id":"35e562343f71282271b05104eadd7ee66e51af81","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testRedirectSitePlugin() throws Exception {\n        // We use an HTTP Client to test redirection\n        HttpClientResponse response = httpClient().request(\"/_plugin/dummy\");\n        assertThat(response.errorCode(), equalTo(RestStatus.MOVED_PERMANENTLY.getStatus()));\n        assertThat(response.response(), containsString(\"/_plugin/dummy/\"));\n\n        // We test the real URL\n        response = httpClient().request(\"/_plugin/dummy/\");\n        assertThat(response.errorCode(), equalTo(RestStatus.OK.getStatus()));\n        assertThat(response.response(), containsString(\"<title>Dummy Site Plugin<\/title>\"));\n    }","id":2324,"modified_method":"@Test\n    public void testRedirectSitePlugin() throws Exception {\n        // We use an HTTP Client to test redirection\n        HttpResponse response = httpClient().method(\"GET\").path(\"/_plugin/dummy\").execute();\n        assertThat(response.getStatusCode(), equalTo(RestStatus.MOVED_PERMANENTLY.getStatus()));\n        assertThat(response.getBody(), containsString(\"/_plugin/dummy/\"));\n\n        // We test the real URL\n        response = httpClient().method(\"GET\").path(\"/_plugin/dummy/\").execute();\n        assertThat(response.getStatusCode(), equalTo(RestStatus.OK.getStatus()));\n        assertThat(response.getBody(), containsString(\"<title>Dummy Site Plugin<\/title>\"));\n    }","commit_id":"35e562343f71282271b05104eadd7ee66e51af81","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public static void submitDelete(GAuthenticator gAuthenticator, String url)\n\t\tthrows GoogleAppsException {\n\n\t\ttry {\n\t\t\tHttp.Options options = _getOptions(gAuthenticator);\n\n\t\t\toptions.setDelete(true);\n\t\t\toptions.setLocation(url);\n\n\t\t\tHttpUtil.URLtoString(options);\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new GoogleAppsException(ioe);\n\t\t}\n\t}","id":2325,"modified_method":"public static void submitDelete(GAuthenticator gAuthenticator, String url)\n\t\tthrows GoogleAppsException {\n\n\t\ttry {\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\"submitDelete request \" + url);\n\t\t\t}\n\n\t\t\tHttp.Options options = _getOptions(gAuthenticator);\n\n\t\t\toptions.setDelete(true);\n\t\t\toptions.setLocation(url);\n\n\t\t\tString response = HttpUtil.URLtoString(options);\n\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\"submitDelete response \" + response);\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new GoogleAppsException(ioe);\n\t\t}\n\t}","commit_id":"decb0cda9c950c472128b64788d276899d202777","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void submitAdd(\n\t\t\tGAuthenticator gAuthenticator, String url, Document document)\n\t\tthrows GoogleAppsException {\n\n\t\ttry {\n\t\t\tHttp.Options options = _getOptions(gAuthenticator);\n\n\t\t\toptions.setBody(\n\t\t\t\tdocument.formattedString(), ContentTypes.APPLICATION_ATOM_XML,\n\t\t\t\tStringPool.UTF8);\n\t\t\toptions.setLocation(url);\n\t\t\toptions.setPost(true);\n\n\t\t\tHttpUtil.URLtoString(options);\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new GoogleAppsException(ioe);\n\t\t}\n\t}","id":2326,"modified_method":"public static void submitAdd(\n\t\t\tGAuthenticator gAuthenticator, String url, Document document)\n\t\tthrows GoogleAppsException {\n\n\t\ttry {\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\"submitAdd request \" + url);\n\t\t\t}\n\n\t\t\tHttp.Options options = _getOptions(gAuthenticator);\n\n\t\t\toptions.setBody(\n\t\t\t\tdocument.formattedString(), ContentTypes.APPLICATION_ATOM_XML,\n\t\t\t\tStringPool.UTF8);\n\t\t\toptions.setLocation(url);\n\t\t\toptions.setPost(true);\n\n\t\t\tString response = HttpUtil.URLtoString(options);\n\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\"submitAdd response \" + response);\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new GoogleAppsException(ioe);\n\t\t}\n\t}","commit_id":"decb0cda9c950c472128b64788d276899d202777","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static Document getDocument(\n\t\t\tGAuthenticator gAuthenticator, String url)\n\t\tthrows GoogleAppsException {\n\n\t\ttry {\n\t\t\tHttp.Options options = _getOptions(gAuthenticator);\n\n\t\t\toptions.setLocation(url);\n\n\t\t\tString xml = HttpUtil.URLtoString(options);\n\n\t\t\treturn SAXReaderUtil.read(new UnsyncStringReader(xml));\n\t\t}\n\t\tcatch (DocumentException de) {\n\t\t\tthrow new GoogleAppsException(de);\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new GoogleAppsException(ioe);\n\t\t}\n\t}","id":2327,"modified_method":"public static Document getDocument(\n\t\t\tGAuthenticator gAuthenticator, String url)\n\t\tthrows GoogleAppsException {\n\n\t\ttry {\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\"getDocument request \" + url);\n\t\t\t}\n\n\t\t\tHttp.Options options = _getOptions(gAuthenticator);\n\n\t\t\toptions.setLocation(url);\n\n\t\t\tString xml = HttpUtil.URLtoString(options);\n\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\"getDocument response \" + xml);\n\t\t\t}\n\n\t\t\treturn SAXReaderUtil.read(new UnsyncStringReader(xml));\n\t\t}\n\t\tcatch (DocumentException de) {\n\t\t\tthrow new GoogleAppsException(de);\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new GoogleAppsException(ioe);\n\t\t}\n\t}","commit_id":"decb0cda9c950c472128b64788d276899d202777","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void submitUpdate(\n\t\t\tGAuthenticator gAuthenticator, String url, Document document)\n\t\tthrows GoogleAppsException {\n\n\t\ttry {\n\t\t\tHttp.Options options = _getOptions(gAuthenticator);\n\n\t\t\toptions.setBody(\n\t\t\t\tdocument.formattedString(), ContentTypes.APPLICATION_ATOM_XML,\n\t\t\t\tStringPool.UTF8);\n\t\t\toptions.setLocation(url);\n\t\t\toptions.setPut(true);\n\n\t\t\tHttpUtil.URLtoString(options);\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new GoogleAppsException(ioe);\n\t\t}\n\t}","id":2328,"modified_method":"public static void submitUpdate(\n\t\t\tGAuthenticator gAuthenticator, String url, Document document)\n\t\tthrows GoogleAppsException {\n\n\t\ttry {\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\"submitUpdate request \" + url);\n\t\t\t}\n\n\t\t\tHttp.Options options = _getOptions(gAuthenticator);\n\n\t\t\toptions.setBody(\n\t\t\t\tdocument.formattedString(), ContentTypes.APPLICATION_ATOM_XML,\n\t\t\t\tStringPool.UTF8);\n\t\t\toptions.setLocation(url);\n\t\t\toptions.setPut(true);\n\n\t\t\tString response = HttpUtil.URLtoString(options);\n\n\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t_log.info(\"submitUpdate response \" + response);\n\t\t\t}\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new GoogleAppsException(ioe);\n\t\t}\n\t}","commit_id":"decb0cda9c950c472128b64788d276899d202777","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\n     * @param contextSequence\n     * @param contextItem\n     * @param input\n     * @return The resulting sequence\n\t * @throws XPathException\n     */\n    private Sequence evalWithIndex(Sequence contextSequence, Item contextItem, Sequence input) throws XPathException {\n        if (context.getProfiler().isEnabled()) {\n            context.getProfiler().start(this);       \n            context.getProfiler().message(this, Profiler.DEPENDENCIES, \"DEPENDENCIES\", Dependency.getDependenciesName(this.getDependencies()));\n            if (contextSequence != null)\n                context.getProfiler().message(this, Profiler.START_SEQUENCES, \"CONTEXT SEQUENCE\", contextSequence);\n            if (contextItem != null)\n                context.getProfiler().message(this, Profiler.START_SEQUENCES, \"CONTEXT ITEM\", contextItem.toSequence());\n        }  \n        \n        boolean caseSensitive = true;\n        int flags = 0;       \n        if(getSignature().getArgumentCount() == 3) {\n            String flagsArg = getArgument(2).eval(contextSequence, contextItem).getStringValue();\n            caseSensitive = (flagsArg.indexOf('i') == Constants.STRING_NOT_FOUND);\n            flags = parseFlags(flagsArg);\n        }\n        \n        Sequence result = null;\n        String pattern = translateRegexp(getArgument(1).eval(contextSequence, contextItem).getStringValue());\n        NodeSet nodes = input.toNodeSet();\n        // get the type of a possible index\n\t\tint indexType = nodes.getIndexType();\n\t\tif (LOG.isTraceEnabled())\n    \t\tLOG.trace(\"found an index of type: \" + Type.getTypeName(indexType));\n\t\tif(Type.subTypeOf(indexType, Type.STRING)) {\n            boolean indexScan = false;\n            if (contextSequence != null) {\n                GeneralComparison.IndexFlags iflags = GeneralComparison.checkForQNameIndex(idxflags, context, contextSequence, contextQName);\n                boolean indexFound = false;\n                if (!iflags.indexOnQName()) {\n                    // if contextQName != null and no index is defined on\n                    // contextQName, we don't need to scan other QName indexes\n                    // and can just use the generic range index\n                    indexFound = contextQName != null;\n                    // set contextQName to null so the index lookup below is not\n                    // restricted to that QName\n                    contextQName = null;\n                }\n                if (!indexFound && contextQName == null) {\n                    // if there are some indexes defined on a qname,\n                    // we need to check them all\n                    if (iflags.hasIndexOnQNames())\n                        indexScan = true;\n                    // else use range index defined on path by default\n                }\n            } else\n                result = evalFallback(nodes, pattern, flags, indexType);\n\n            if (result == null) {\n                DocumentSet docs = nodes.getDocumentSet();\n                try {\n                    NativeValueIndex index = context.getBroker().getValueIndex();\n                    hasUsedIndex = true;\n                    //TODO : check index' case compatibility with flags' one ? -pb \n                    if (context.isProfilingEnabled())\n                        context.getProfiler().message(this, Profiler.OPTIMIZATIONS, \"Using vlaue index '\" + index.toString() + \"'\", \"Regex: \" + pattern);\n                    if (LOG.isTraceEnabled())\n                        LOG.trace(\"Using range index for fn:matches expression: \" + pattern);\n                    if (indexScan)\n                        result = index.matchAll(docs, nodes, NodeSet.ANCESTOR, pattern, DBBroker.MATCH_REGEXP, flags, caseSensitive);\n                    else\n                        result = index.match(docs, nodes, NodeSet.ANCESTOR, pattern, contextQName, DBBroker.MATCH_REGEXP, flags, caseSensitive);\n                } catch (EXistException e) {\n                    throw new XPathException(this, e.getMessage(), e);\n                }\n            }\n        } else {\n            result = evalFallback(nodes, pattern, flags, indexType);\n\t\t}\n        \n        if (context.getProfiler().isEnabled()) \n            context.getProfiler().end(this, \"\", result); \n        \n        return result;           \n        \n    }","id":2329,"modified_method":"/**\n     * @param contextSequence\n     * @param contextItem\n     * @param input\n     * @return The resulting sequence\n\t * @throws XPathException\n     */\n    private Sequence evalWithIndex(Sequence contextSequence, Item contextItem, Sequence input) throws XPathException {\n        if (context.getProfiler().isEnabled()) {\n            context.getProfiler().start(this);       \n            context.getProfiler().message(this, Profiler.DEPENDENCIES, \"DEPENDENCIES\", Dependency.getDependenciesName(this.getDependencies()));\n            if (contextSequence != null)\n                context.getProfiler().message(this, Profiler.START_SEQUENCES, \"CONTEXT SEQUENCE\", contextSequence);\n            if (contextItem != null)\n                context.getProfiler().message(this, Profiler.START_SEQUENCES, \"CONTEXT ITEM\", contextItem.toSequence());\n        }  \n        \n        boolean caseSensitive = true;\n        int flags = 0;       \n        if(getSignature().getArgumentCount() == 3) {\n            String flagsArg = getArgument(2).eval(contextSequence, contextItem).getStringValue();\n            caseSensitive = (flagsArg.indexOf('i') == Constants.STRING_NOT_FOUND);\n            flags = parseFlags(flagsArg);\n        }\n        \n        Sequence result = null;\n\t\t\n        String pattern;\n\t\t\n\t\tif( isCalledAs( \"matches-regex\" ) ) {\n\t\t\tpattern = getArgument(1).eval(contextSequence, contextItem).getStringValue();\n\t\t} else {\n\t\t\tpattern = translateRegexp(getArgument(1).eval(contextSequence, contextItem).getStringValue());\n\t\t}\n\t\t\n        NodeSet nodes = input.toNodeSet();\n        // get the type of a possible index\n\t\tint indexType = nodes.getIndexType();\n\t\tif (LOG.isTraceEnabled())\n    \t\tLOG.trace(\"found an index of type: \" + Type.getTypeName(indexType));\n\t\tif(Type.subTypeOf(indexType, Type.STRING)) {\n            boolean indexScan = false;\n            if (contextSequence != null) {\n                GeneralComparison.IndexFlags iflags = GeneralComparison.checkForQNameIndex(idxflags, context, contextSequence, contextQName);\n                boolean indexFound = false;\n                if (!iflags.indexOnQName()) {\n                    // if contextQName != null and no index is defined on\n                    // contextQName, we don't need to scan other QName indexes\n                    // and can just use the generic range index\n                    indexFound = contextQName != null;\n                    // set contextQName to null so the index lookup below is not\n                    // restricted to that QName\n                    contextQName = null;\n                }\n                if (!indexFound && contextQName == null) {\n                    // if there are some indexes defined on a qname,\n                    // we need to check them all\n                    if (iflags.hasIndexOnQNames())\n                        indexScan = true;\n                    // else use range index defined on path by default\n                }\n            } else\n                result = evalFallback(nodes, pattern, flags, indexType);\n\n            if (result == null) {\n                DocumentSet docs = nodes.getDocumentSet();\n                try {\n                    NativeValueIndex index = context.getBroker().getValueIndex();\n                    hasUsedIndex = true;\n                    //TODO : check index' case compatibility with flags' one ? -pb \n                    if (context.isProfilingEnabled())\n                        context.getProfiler().message(this, Profiler.OPTIMIZATIONS, \"Using vlaue index '\" + index.toString() + \"'\", \"Regex: \" + pattern);\n                    if (LOG.isTraceEnabled())\n                        LOG.trace(\"Using range index for fn:matches expression: \" + pattern);\n                    if (indexScan)\n                        result = index.matchAll(docs, nodes, NodeSet.ANCESTOR, pattern, DBBroker.MATCH_REGEXP, flags, caseSensitive);\n                    else\n                        result = index.match(docs, nodes, NodeSet.ANCESTOR, pattern, contextQName, DBBroker.MATCH_REGEXP, flags, caseSensitive);\n                } catch (EXistException e) {\n                    throw new XPathException(this, e.getMessage(), e);\n                }\n            }\n        } else {\n            result = evalFallback(nodes, pattern, flags, indexType);\n\t\t}\n        \n        if (context.getProfiler().isEnabled()) \n            context.getProfiler().end(this, \"\", result); \n        \n        return result;           \n        \n    }","commit_id":"c17ca8e2bfdd44097538edfdff623d64ec5e5913","url":"https://github.com/eXist-db/exist"},{"original_method":"public NodeSet preSelect(Sequence contextSequence, boolean useContext) throws XPathException {\n        long start = System.currentTimeMillis();\n        // the expression can be called multiple times, so we need to clear the previous preselectResult\n        preselectResult = null;\n        \n        int indexType = Optimize.getQNameIndexType(context, contextSequence, contextQName);\n        if (LOG.isTraceEnabled())\n            LOG.trace(\"Using QName index on type \" + Type.getTypeName(indexType));\n        String pattern = translateRegexp(getArgument(1).eval(contextSequence).getStringValue());\n        boolean caseSensitive = true;\n        int flags = 0;\n        if(getSignature().getArgumentCount() == 3) {\n            String flagsArg = getArgument(2).eval(contextSequence).getStringValue();\n            caseSensitive = (flagsArg.indexOf('i') == Constants.STRING_NOT_FOUND);\n            flags = parseFlags(flagsArg);\n        }\n        try {\n            preselectResult = context.getBroker().getValueIndex().match(contextSequence.getDocumentSet(),\n                    useContext ? contextSequence.toNodeSet() : null, NodeSet.DESCENDANT, pattern,\n                    contextQName, DBBroker.MATCH_REGEXP, flags, caseSensitive);\n            hasUsedIndex = true;\n        } catch (EXistException e) {\n            throw new XPathException(this, \"Error during index lookup: \" + e.getMessage(), e);\n        }\n        if (context.getProfiler().traceFunctions())\n            context.getProfiler().traceIndexUsage(context, PerformanceStats.RANGE_IDX_TYPE, this,\n                PerformanceStats.OPTIMIZED_INDEX, System.currentTimeMillis() - start);\n        return preselectResult;\n    }","id":2330,"modified_method":"public NodeSet preSelect(Sequence contextSequence, boolean useContext) throws XPathException {\n        long start = System.currentTimeMillis();\n        // the expression can be called multiple times, so we need to clear the previous preselectResult\n        preselectResult = null;\n        \n        int indexType = Optimize.getQNameIndexType(context, contextSequence, contextQName);\n        if (LOG.isTraceEnabled())\n            LOG.trace(\"Using QName index on type \" + Type.getTypeName(indexType));\n\t\t\n        String pattern;\n\t\t\n\t\tif( isCalledAs( \"matches-regex\" ) ) {\n\t\t\tpattern = getArgument(1).eval(contextSequence).getStringValue();\n\t\t} else {\n\t\t\tpattern = translateRegexp(getArgument(1).eval(contextSequence).getStringValue());\n\t\t}\n\t\t\n        boolean caseSensitive = true;\n        int flags = 0;\n        if(getSignature().getArgumentCount() == 3) {\n            String flagsArg = getArgument(2).eval(contextSequence).getStringValue();\n            caseSensitive = (flagsArg.indexOf('i') == Constants.STRING_NOT_FOUND);\n            flags = parseFlags(flagsArg);\n        }\n        try {\n            preselectResult = context.getBroker().getValueIndex().match(contextSequence.getDocumentSet(),\n                    useContext ? contextSequence.toNodeSet() : null, NodeSet.DESCENDANT, pattern,\n                    contextQName, DBBroker.MATCH_REGEXP, flags, caseSensitive);\n            hasUsedIndex = true;\n        } catch (EXistException e) {\n            throw new XPathException(this, \"Error during index lookup: \" + e.getMessage(), e);\n        }\n        if (context.getProfiler().traceFunctions())\n            context.getProfiler().traceIndexUsage(context, PerformanceStats.RANGE_IDX_TYPE, this,\n                PerformanceStats.OPTIMIZED_INDEX, System.currentTimeMillis() - start);\n        return preselectResult;\n    }","commit_id":"c17ca8e2bfdd44097538edfdff623d64ec5e5913","url":"https://github.com/eXist-db/exist"},{"original_method":"/**\n     * @param contextSequence\n     * @param contextItem\n     * @param stringArg\n     * @return The resulting sequence\n     * @throws XPathException\n     */\n    private Sequence evalGeneric(Sequence contextSequence, Item contextItem, Sequence stringArg) throws XPathException {\n        String string = stringArg.getStringValue();\n\t\tString pattern = translateRegexp(getArgument(1).eval(contextSequence, contextItem).getStringValue());\n        \n\t\tint flags = 0;\n        if(getSignature().getArgumentCount() == 3)\n            flags = parseFlags(getArgument(2).eval(contextSequence, contextItem).getStringValue());\n        \n\t\treturn BooleanValue.valueOf(match(string, pattern, flags));\n    }","id":2331,"modified_method":"/**\n     * @param contextSequence\n     * @param contextItem\n     * @param stringArg\n     * @return The resulting sequence\n     * @throws XPathException\n     */\n    private Sequence evalGeneric(Sequence contextSequence, Item contextItem, Sequence stringArg) throws XPathException {\n        String string = stringArg.getStringValue();\n\t\tString pattern;\n\t\t\n\t\tif( isCalledAs( \"matches-regex\" ) ) {\n\t\t\tpattern = getArgument(1).eval(contextSequence, contextItem).getStringValue();\n\t\t} else {\n\t\t\tpattern = translateRegexp(getArgument(1).eval(contextSequence, contextItem).getStringValue());\n\t\t}\n        \n\t\tint flags = 0;\n        if(getSignature().getArgumentCount() == 3)\n            flags = parseFlags(getArgument(2).eval(contextSequence, contextItem).getStringValue());\n        \n\t\treturn BooleanValue.valueOf(match(string, pattern, flags));\n    }","commit_id":"c17ca8e2bfdd44097538edfdff623d64ec5e5913","url":"https://github.com/eXist-db/exist"},{"original_method":"private Sequence evalGeneric(Sequence[] args, Sequence stringArg) throws XPathException {\n        String string = stringArg.getStringValue();\n\t\tString pattern = translateRegexp(args[1].getStringValue());\n        \n\t\tint flags = 0;\n        if(args.length==3)\n            flags = parseFlags(args[2].getStringValue());\n        \n\t\treturn match(string, pattern, flags);\n    }","id":2332,"modified_method":"private Sequence evalGeneric(Sequence[] args, Sequence stringArg) throws XPathException {\n        String string = stringArg.getStringValue();\n\t\t\n\t\tString pattern;\n\t\t\n\t\tif( isCalledAs( \"groups-regex\" ) ) {\n\t\t\tpattern = args[1].getStringValue();\n\t\t} else {\n\t\t\tpattern = translateRegexp(args[1].getStringValue());\n\t\t}\n        \n\t\tint flags = 0;\n        if(args.length==3)\n            flags = parseFlags(args[2].getStringValue());\n        \n\t\treturn match(string, pattern, flags);\n    }","commit_id":"c17ca8e2bfdd44097538edfdff623d64ec5e5913","url":"https://github.com/eXist-db/exist"},{"original_method":"public static Object readFromDataInputStream(Class type, DataInputStream dis) throws IOException {\n\t\tif (type.equals(Boolean.class)) {\n\t\t\treturn Boolean.valueOf(dis.read() == 1);\n\t\t} else if (type.equals(Byte.class)) {\n\t\t\treturn new Byte((byte) dis.read());\n\t\t} else if (type.equals(Short.class)) {\n\t\t\treturn new Short(dis.readShort());\n\t\t} else if (type.equals(Integer.class)) {\n\t\t\treturn new Integer(dis.readInt());\n\t\t} else if (type.equals(Long.class)) {\n\t\t\treturn new Long(dis.readLong());\n\t\t} else if (type.equals(Double.class)) {\n\t\t    return new Double(dis.readDouble());\n\t\t} else if (type.equals(String.class)) {\n\t\t\tint length = dis.readInt();\n\t\t\tStringBuffer sb = new StringBuffer(length);\n\t\t\tfor (int x = 0; x < length; x++) {\n\t\t\t\tsb.append(dis.readChar());\n\t\t\t}\n\t\t\treturn sb.toString();\n\t\t} else if (type.equals(Buffer.class)) {\n\t\t\treturn new Buffer(dis);\n\t\t} else if (type.equals(ShortBuffer.class)) {\n\t\t    return new ShortBuffer(dis);\n//\t\t} else if (type.equals(VeryLongInteger.class)) {\n//\t\t\treturn new VeryLongInteger(dis);\n\t\t} else if (type.equals(Peer.class)) {\n\t\t\treturn new Peer(dis);\n\t\t} else if (type.equals(BitArray.class)) {\n\t\t\treturn new BitArray(dis);\n\t\t} else if (type.equals(NodeCHK.class)) {\n\t\t\t// Use Key.read(...) because write(...) writes the TYPE field.\n\t\t\treturn Key.read(dis);\n\t\t} else if (type.equals(NodeSSK.class)) {\n\t\t\t// Use Key.read(...) because write(...) writes the TYPE field.\n\t\t\treturn Key.read(dis);\n\t\t} else if (type.equals(Key.class)) {\n\t\t    return Key.read(dis);\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"Unrecognised field type: \" + type);\n\t\t}\n\t}","id":2333,"modified_method":"public static Object readFromDataInputStream(Class type, DataInputStream dis) throws IOException {\n\t\tif (type.equals(Boolean.class)) {\n\t\t\tint bool=dis.read();\n\t\t\tif (bool==1)\n\t\t\t\treturn Boolean.TRUE;\n\t\t\tif (bool==0)\n\t\t\t\treturn Boolean.FALSE;\n\t\t\tthrow new IOException(\"Boolean is non boolean value: \"+bool);\n\t\t} else if (type.equals(Byte.class)) {\n\t\t\tint b=dis.read();\n\t\t\tif (b<0)\n\t\t\t\tthrow new IOException();\n\t\t\treturn new Byte((byte)b);\n\t\t} else if (type.equals(Short.class)) {\n\t\t\treturn new Short(dis.readShort());\n\t\t} else if (type.equals(Integer.class)) {\n\t\t\treturn new Integer(dis.readInt());\n\t\t} else if (type.equals(Long.class)) {\n\t\t\treturn new Long(dis.readLong());\n\t\t} else if (type.equals(Double.class)) {\n\t\t    return new Double(dis.readDouble());\n\t\t} else if (type.equals(String.class)) {\n\t\t\tint length = dis.readInt();\n\t\t\tStringBuffer sb = new StringBuffer(length);\n\t\t\tfor (int x = 0; x < length; x++) {\n\t\t\t\tsb.append(dis.readChar());\n\t\t\t}\n\t\t\treturn sb.toString();\n\t\t} else if (type.equals(Buffer.class)) {\n\t\t\treturn new Buffer(dis);\n\t\t} else if (type.equals(ShortBuffer.class)) {\n\t\t    return new ShortBuffer(dis);\n//\t\t} else if (type.equals(VeryLongInteger.class)) {\n//\t\t\treturn new VeryLongInteger(dis);\n\t\t} else if (type.equals(Peer.class)) {\n\t\t\treturn new Peer(dis);\n\t\t} else if (type.equals(BitArray.class)) {\n\t\t\treturn new BitArray(dis);\n\t\t} else if (type.equals(NodeCHK.class)) {\n\t\t\t// Use Key.read(...) because write(...) writes the TYPE field.\n\t\t\treturn Key.read(dis);\n\t\t} else if (type.equals(NodeSSK.class)) {\n\t\t\t// Use Key.read(...) because write(...) writes the TYPE field.\n\t\t\treturn Key.read(dis);\n\t\t} else if (type.equals(Key.class)) {\n\t\t    return Key.read(dis);\n\t\t} else {\n\t\t\tthrow new RuntimeException(\"Unrecognised field type: \" + type);\n\t\t}\n\t}","commit_id":"6f8aecd95999277681fb871bb6007acb11427023","url":"https://github.com/freenet/fred"},{"original_method":"/**\n     * Read a variable size long.\n     *\n     * @param in the input stream\n     * @return the long\n     */\n    public static long readVarLong(InputStream in) throws IOException {\n        long x = (byte) in.read();\n        if (x >= 0) {\n            return x;\n        }\n        x &= 0x7f;\n        for (int s = 7;; s += 7) {\n            long b = (byte) in.read();\n            x |= (b & 0x7f) << s;\n            if (b >= 0) {\n                return x;\n            }\n        }\n    }","id":2334,"modified_method":"/**\n     * Read a variable size long.\n     *\n     * @param in the input stream\n     * @return the long\n     */\n    public static long readVarLong(InputStream in) throws IOException {\n        long x = (byte) in.read();\n        if (x >= 0) {\n            return x;\n        }\n        x &= 0x7f;\n        for (int s = 7;; s += 7) {\n            long b = in.read();\n            if (b < 0) {\n                throw new EOFException();\n            }\n            b = (byte) b;\n            x |= (b & 0x7f) << s;\n            if (b >= 0) {\n                return x;\n            }\n        }\n    }","commit_id":"2d7c67f4c6de05c0983dcbb27aec808dafecc1f6","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * Read a variable size integer.\n     *\n     * @param in the input stream\n     * @return the integer\n     */\n    public static int readVarInt(InputStream in) throws IOException {\n        int x = (byte) in.read();\n        if (x >= 0) {\n            return x;\n        }\n        x &= 0x7f;\n        for (int s = 7;; s += 7) {\n            int b = (byte) in.read();\n            x |= (b & 0x7f) << s;\n            if (b >= 0) {\n                return x;\n            }\n        }\n    }","id":2335,"modified_method":"/**\n     * Read a variable size integer.\n     *\n     * @param in the input stream\n     * @return the integer\n     */\n    public static int readVarInt(InputStream in) throws IOException {\n        int x = (byte) in.read();\n        if (x >= 0) {\n            return x;\n        }\n        x &= 0x7f;\n        for (int s = 7;; s += 7) {\n            int b = in.read();\n            if (b < 0) {\n                throw new EOFException();\n            }\n            b = (byte) b;\n            x |= (b & 0x7f) << s;\n            if (b >= 0) {\n                return x;\n            }\n        }\n    }","commit_id":"2d7c67f4c6de05c0983dcbb27aec808dafecc1f6","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"protected LinkDescriptor getLinkDescriptor() {\n    return ConceptRegistryUtil.getConceptDescriptor(myRoleId.getConceptId()).getLinkDescriptor(myRoleId);\n  }","id":2336,"modified_method":"protected LinkDescriptor getLinkDescriptor() {\n    ConceptDescriptor cd = ConceptRegistryUtil.getConceptDescriptor(myRoleId.getConceptId());\n    if (cd == null) return null;\n    return cd.getLinkDescriptor(myRoleId);\n  }","commit_id":"5344fcb8c96f0832510d319f36a3309a66ec3cee","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public SContainmentLinkId getRoleId() {\n    return getLinkDescriptor().getId();\n  }","id":2337,"modified_method":"@Override\n  public SContainmentLinkId getRoleId() {\n    LinkDescriptor d = getLinkDescriptor();\n    if (d == null) {\n      LOG.error(\"link descriptor not found for link \" + myName);\n      return MetaIdFactory.INVALID_LINK_ID;\n    }\n    return d.getId();\n  }","commit_id":"5344fcb8c96f0832510d319f36a3309a66ec3cee","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected LinkDescriptor getLinkDescriptor() {\n    return ConceptRegistryUtil.getConceptDescriptor(myConceptName).getLinkDescriptor(myName);\n  }","id":2338,"modified_method":"protected LinkDescriptor getLinkDescriptor() {\n    ConceptDescriptor cd = ConceptRegistryUtil.getConceptDescriptor(myConceptName);\n    if (cd == null) return null;\n    return cd.getLinkDescriptor(myName);\n  }","commit_id":"5344fcb8c96f0832510d319f36a3309a66ec3cee","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  protected PropertyDescriptor getPropertyDescriptor() {\n    return ConceptRegistryUtil.getConceptDescriptor(myPropertyId.getConceptId()).getPropertyDescriptor(myPropertyId);\n  }","id":2339,"modified_method":"@Override\n  protected PropertyDescriptor getPropertyDescriptor() {\n    ConceptDescriptor cd = ConceptRegistryUtil.getConceptDescriptor(myPropertyId.getConceptId());\n    if (cd == null) return null;\n    return cd.getPropertyDescriptor(myPropertyId);\n  }","commit_id":"5344fcb8c96f0832510d319f36a3309a66ec3cee","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  protected PropertyDescriptor getPropertyDescriptor() {\n    return ConceptRegistryUtil.getConceptDescriptor(myConceptName).getPropertyDescriptor(myPropertyName);\n  }","id":2340,"modified_method":"@Override\n  protected PropertyDescriptor getPropertyDescriptor() {\n    ConceptDescriptor conceptDescriptor = ConceptRegistryUtil.getConceptDescriptor(myConceptName);\n    if (conceptDescriptor == null) return null;\n    return conceptDescriptor.getPropertyDescriptor(myPropertyName);\n  }","commit_id":"5344fcb8c96f0832510d319f36a3309a66ec3cee","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public SPropertyId getId() {\n    return getPropertyDescriptor().getId();\n  }","id":2341,"modified_method":"@Override\n  public SPropertyId getId() {\n    PropertyDescriptor d = getPropertyDescriptor();\n    if (d == null) {\n      LOG.error(\"property descriptor not found for property \" + myPropertyName);\n      return MetaIdFactory.INVALID_PROP_ID;\n    }\n    return d.getId();\n  }","commit_id":"5344fcb8c96f0832510d319f36a3309a66ec3cee","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected ReferenceDescriptor getReferenceDescriptor() {\n    return ConceptRegistryUtil.getConceptDescriptor(myRoleId.getConceptId()).getRefDescriptor(myRoleId);\n  }","id":2342,"modified_method":"protected ReferenceDescriptor getReferenceDescriptor() {\n    ConceptDescriptor cd = ConceptRegistryUtil.getConceptDescriptor(myRoleId.getConceptId());\n    if (cd == null) return null;\n    return cd.getRefDescriptor(myRoleId);\n  }","commit_id":"5344fcb8c96f0832510d319f36a3309a66ec3cee","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public SReferenceLinkId getRoleId() {\n    return getReferenceDescriptor().getId();\n  }","id":2343,"modified_method":"@Override\n  public SReferenceLinkId getRoleId() {\n    ReferenceDescriptor d = getReferenceDescriptor();\n    if (d == null) {\n      LOG.error(\"ref descriptor not found for ref \" + myName);\n      return MetaIdFactory.INVALID_REF_ID ;\n    }\n    return d.getId();\n  }","commit_id":"5344fcb8c96f0832510d319f36a3309a66ec3cee","url":"https://github.com/JetBrains/MPS"},{"original_method":"protected ReferenceDescriptor getReferenceDescriptor() {\n    return ConceptRegistryUtil.getConceptDescriptor(myConceptName).getRefDescriptor(myName);\n  }","id":2344,"modified_method":"protected ReferenceDescriptor getReferenceDescriptor() {\n    ConceptDescriptor cd = ConceptRegistryUtil.getConceptDescriptor(myConceptName);\n    if (cd == null) return null;\n    return cd.getRefDescriptor(myName);\n  }","commit_id":"5344fcb8c96f0832510d319f36a3309a66ec3cee","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    public void visit(StringLiteral that) {\n        super.visit(that);\n        that.setAttribute(BoxingDeclarationVisitor.IS_UNBOXED, true);\n    }","id":2345,"modified_method":"@Override\n    public void visit(StringLiteral that) {\n        super.visit(that);\n        markUnboxed(that);\n    }","commit_id":"45db3c301e4a031420be1bcfcdc5e6882de59e7c","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"@Override\n    public void visit(Expression that) {\n        super.visit(that);\n        if(Util.isUnBoxed(that.getTerm()))\n            that.setAttribute(BoxingDeclarationVisitor.IS_UNBOXED, true);\n    }","id":2346,"modified_method":"@Override\n    public void visit(Expression that) {\n        super.visit(that);\n        propagateFromTerm(that, that.getTerm());\n    }","commit_id":"45db3c301e4a031420be1bcfcdc5e6882de59e7c","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"@Override\n    public void visit(NaturalLiteral that) {\n        super.visit(that);\n        that.setAttribute(BoxingDeclarationVisitor.IS_UNBOXED, true);\n    }","id":2347,"modified_method":"@Override\n    public void visit(NaturalLiteral that) {\n        super.visit(that);\n        markUnboxed(that);\n    }","commit_id":"45db3c301e4a031420be1bcfcdc5e6882de59e7c","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"@Override\n    public void visit(PositiveOp that) {\n        super.visit(that);\n        if(Util.isUnBoxed(that.getTerm()))\n            that.setAttribute(BoxingDeclarationVisitor.IS_UNBOXED, true);\n    }","id":2348,"modified_method":"@Override\n    public void visit(PositiveOp that) {\n        super.visit(that);\n        propagateFromTerm(that, that.getTerm());\n    }","commit_id":"45db3c301e4a031420be1bcfcdc5e6882de59e7c","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"@Override\n    public void visit(CharLiteral that) {\n        super.visit(that);\n        that.setAttribute(BoxingDeclarationVisitor.IS_UNBOXED, true);\n    }","id":2349,"modified_method":"@Override\n    public void visit(CharLiteral that) {\n        super.visit(that);\n        markUnboxed(that);\n    }","commit_id":"45db3c301e4a031420be1bcfcdc5e6882de59e7c","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"@Override\n    public void visit(QualifiedMemberExpression that) {\n        super.visit(that);\n        if(Util.isUnBoxed(that.getDeclaration()))\n            that.setAttribute(BoxingDeclarationVisitor.IS_UNBOXED, true);\n    }","id":2350,"modified_method":"@Override\n    public void visit(QualifiedMemberExpression that) {\n        super.visit(that);\n        propagateFromDeclaration(that, that.getDeclaration());\n    }","commit_id":"45db3c301e4a031420be1bcfcdc5e6882de59e7c","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"@Override\n    public void visit(FloatLiteral that) {\n        super.visit(that);\n        that.setAttribute(BoxingDeclarationVisitor.IS_UNBOXED, true);\n    }","id":2351,"modified_method":"@Override\n    public void visit(FloatLiteral that) {\n        super.visit(that);\n        markUnboxed(that);\n    }","commit_id":"45db3c301e4a031420be1bcfcdc5e6882de59e7c","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"@Override\n    public void visit(InvocationExpression that) {\n        super.visit(that);\n        if(Util.isUnBoxed(that.getPrimary()))\n            that.setAttribute(BoxingDeclarationVisitor.IS_UNBOXED, true);\n    }","id":2352,"modified_method":"@Override\n    public void visit(InvocationExpression that) {\n        super.visit(that);\n        propagateFromTerm(that, that.getPrimary());\n    }","commit_id":"45db3c301e4a031420be1bcfcdc5e6882de59e7c","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"@Override\n    public void visit(NegativeOp that) {\n        super.visit(that);\n        if(Util.isUnBoxed(that.getTerm()))\n            that.setAttribute(BoxingDeclarationVisitor.IS_UNBOXED, true);\n    }","id":2353,"modified_method":"@Override\n    public void visit(NegativeOp that) {\n        super.visit(that);\n        propagateFromTerm(that, that.getTerm());\n    }","commit_id":"45db3c301e4a031420be1bcfcdc5e6882de59e7c","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"@Override\n    public void visit(BaseMemberExpression that) {\n        super.visit(that);\n        if(Util.isUnBoxed(that.getDeclaration()) || transformer.isCeylonBoolean(that.getTypeModel()))\n            that.setAttribute(BoxingDeclarationVisitor.IS_UNBOXED, true);\n    }","id":2354,"modified_method":"@Override\n    public void visit(BaseMemberExpression that) {\n        super.visit(that);\n        if(Util.isUnBoxed(that.getDeclaration()) || transformer.isCeylonBoolean(that.getTypeModel()))\n            markUnboxed(that);\n    }","commit_id":"45db3c301e4a031420be1bcfcdc5e6882de59e7c","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"@Override\n    public void visit(AnyAttribute that) {\n        super.visit(that);\n        if(Util.isUnBoxed(that.getDeclarationModel()))\n            that.setAttribute(BoxingDeclarationVisitor.IS_UNBOXED, true);\n    }","id":2355,"modified_method":"@Override\n    public void visit(AnyAttribute that) {\n        super.visit(that);\n        propagateFromDeclaration(that, that.getDeclarationModel());\n    }","commit_id":"45db3c301e4a031420be1bcfcdc5e6882de59e7c","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"@Test\n    public void testCumulativePatch() throws Exception {\n\n        // build a cumulative patch for the base installation\n        // with 1 added module\n        String patchID = randomString();\n        File patchDir = mkdir(tempDir, patchID);\n        String moduleName = randomString();\n        File moduleDir = createModule(patchDir, moduleName);\n        byte[] newHash = calculateHash(moduleDir);\n        ContentModification moduleAdded = new ContentModification(new ModuleItem(moduleName, newHash), NO_CONTENT , ADD);\n\n        Patch patch = PatchBuilder.create()\n                .setPatchId(patchID)\n                .setDescription(randomString())\n                .setPatchType(PatchType.CUMULATIVE)\n                .setResultingVersion(info.getVersion() + \"-CP\")\n                .addAppliesTo(info.getVersion())\n                .addContentModification(moduleAdded)\n                .build();\n        \n        checkApplyPatchAndRollbackRestoresBackupConfiguration(patchDir, patch);\n    }","id":2356,"modified_method":"@Test\n    public void testCumulativePatch() throws Exception {\n\n        // build a cumulative patch for the base installation\n        // with 1 added module\n        String patchID = randomString();\n        File patchDir = mkdir(tempDir, patchID);\n        String moduleName = randomString();\n        File moduleDir = createModule(patchDir, moduleName);\n        byte[] newHash = calculateHash(moduleDir);\n        ContentModification moduleAdded = new ContentModification(new ModuleItem(moduleName, newHash), NO_CONTENT , ADD);\n\n        Patch patch = PatchBuilder.create()\n                .setPatchId(patchID)\n                .setDescription(randomString())\n                .setCumulativeType(info.getVersion(), info.getVersion() + \"-CP\")\n                .addContentModification(moduleAdded)\n                .build();\n\n        checkApplyPatchAndRollbackRestoresBackupConfiguration(patchDir, patch);\n    }","commit_id":"814024ad2a811f516f641aacc3da8242273266a6","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testOneOffPatch() throws Exception {\n\n        // build a cumulative patch for the base installation\n        // with 1 added module\n        String patchID = randomString();\n        File patchDir = mkdir(tempDir, patchID);\n        String moduleName = randomString();\n        File moduleDir = createModule(patchDir, moduleName);\n        byte[] newHash = calculateHash(moduleDir);\n        ContentModification moduleAdded = new ContentModification(new ModuleItem(moduleName, newHash), NO_CONTENT , ADD);\n\n        Patch patch = PatchBuilder.create()\n                .setPatchId(patchID)\n                .setDescription(randomString())\n                .setPatchType(PatchType.ONE_OFF)\n                .addAppliesTo(info.getVersion())\n                .addContentModification(moduleAdded)\n                .build();\n        \n        checkApplyPatchAndRollbackRestoresBackupConfiguration(patchDir, patch);\n    }","id":2357,"modified_method":"@Test\n    public void testOneOffPatch() throws Exception {\n\n        // build a cumulative patch for the base installation\n        // with 1 added module\n        String patchID = randomString();\n        File patchDir = mkdir(tempDir, patchID);\n        String moduleName = randomString();\n        File moduleDir = createModule(patchDir, moduleName);\n        byte[] newHash = calculateHash(moduleDir);\n        ContentModification moduleAdded = new ContentModification(new ModuleItem(moduleName, newHash), NO_CONTENT , ADD);\n\n        Patch patch = PatchBuilder.create()\n                .setPatchId(patchID)\n                .setDescription(randomString())\n                .setOneOffType(info.getVersion())\n                .addContentModification(moduleAdded)\n                .build();\n\n        checkApplyPatchAndRollbackRestoresBackupConfiguration(patchDir, patch);\n    }","commit_id":"814024ad2a811f516f641aacc3da8242273266a6","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testApplyCumulativePatch() throws Exception {\n\n        // start from a base installation\n        PatchInfo info = new LocalPatchInfo(randomString(), PatchInfo.BASE, Collections.<String>emptyList(), env);\n\n        // build a CP patch for the base installation\n        // with 1 added module\n        String patchID = randomString();\n        File patchDir = mkdir(tempDir, patchID);\n        String moduleName = randomString();\n        File moduleDir = createModule(patchDir, moduleName);\n        byte[] newHash = calculateHash(moduleDir);\n        ContentModification moduleAdded = new ContentModification(new ModuleItem(moduleName, newHash), NO_CONTENT , ADD);\n\n        Patch patch = PatchBuilder.create()\n                .setPatchId(patchID)\n                .setDescription(randomString())\n                .setPatchType(PatchType.CUMULATIVE)\n                .setResultingVersion(info.getVersion() + \"-CP\")\n                .addAppliesTo(info.getVersion())\n                .addContentModification(moduleAdded)\n                .build();\n        createPatchXMLFile(patchDir, patch);\n        File zippedPatch = createZippedPatchFile(patchDir, patchID);\n\n        PatchingTaskRunner runner = new PatchingTaskRunner(info, env);\n        PatchingResult result = runner.executeDirect(new FileInputStream(zippedPatch), ContentVerificationPolicy.STRICT);\n\n        assertPatchHasBeenApplied(result, patch);\n        tree(result.getPatchInfo().getEnvironment().getInstalledImage().getJbossHome());\n        assertDefinedModule(result.getPatchInfo().getModulePath(), moduleName, newHash);\n    }","id":2358,"modified_method":"@Test\n    public void testApplyCumulativePatch() throws Exception {\n\n        // start from a base installation\n        PatchInfo info = new LocalPatchInfo(randomString(), PatchInfo.BASE, Collections.<String>emptyList(), env);\n\n        // build a CP patch for the base installation\n        // with 1 added module\n        String patchID = randomString();\n        File patchDir = mkdir(tempDir, patchID);\n        String moduleName = randomString();\n        File moduleDir = createModule(patchDir, moduleName);\n        byte[] newHash = calculateHash(moduleDir);\n        ContentModification moduleAdded = new ContentModification(new ModuleItem(moduleName, newHash), NO_CONTENT , ADD);\n\n        Patch patch = PatchBuilder.create()\n                .setPatchId(patchID)\n                .setDescription(randomString())\n                .setCumulativeType(info.getVersion(), info.getVersion() + \"-CP\")\n                .addContentModification(moduleAdded)\n                .build();\n        createPatchXMLFile(patchDir, patch);\n        File zippedPatch = createZippedPatchFile(patchDir, patchID);\n\n        PatchingTaskRunner runner = new PatchingTaskRunner(info, env);\n        PatchingResult result = runner.executeDirect(new FileInputStream(zippedPatch), ContentVerificationPolicy.STRICT);\n\n        assertPatchHasBeenApplied(result, patch);\n        tree(result.getPatchInfo().getEnvironment().getInstalledImage().getJbossHome());\n        assertDefinedModule(result.getPatchInfo().getModulePath(), moduleName, newHash);\n    }","commit_id":"814024ad2a811f516f641aacc3da8242273266a6","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testApplyCumulativePatchThenOneOffPatch() throws Exception {\n\n        // start from a base installation\n        PatchInfo info = new LocalPatchInfo(randomString(), PatchInfo.BASE, Collections.<String>emptyList(), env);\n\n        // build a CP patch for the base installation\n        // with 1 added module\n        String culumativePatchID = randomString();\n        File cumulativePatchDir = mkdir(tempDir, culumativePatchID);\n        String moduleName = randomString();\n        File moduleDir = createModule(cumulativePatchDir, moduleName);\n        byte[] newHash = calculateHash(moduleDir);\n        ContentModification moduleAdded = new ContentModification(new ModuleItem(moduleName, newHash), NO_CONTENT, ADD);\n\n        Patch cumulativePatch = PatchBuilder.create()\n                .setPatchId(culumativePatchID)\n                .setDescription(randomString())\n                .setPatchType(PatchType.CUMULATIVE)\n                .setResultingVersion(info.getVersion() + \"-CP\")\n                .addAppliesTo(info.getVersion())\n                .addContentModification(moduleAdded)\n                .build();\n        createPatchXMLFile(cumulativePatchDir, cumulativePatch);\n        File zippedCumulativePatch = createZippedPatchFile(cumulativePatchDir, culumativePatchID);\n\n        PatchingTaskRunner runner = new PatchingTaskRunner(info, env);\n        PatchingResult resultOfCumulativePatch = runner.executeDirect(new FileInputStream(zippedCumulativePatch), ContentVerificationPolicy.STRICT);\n\n        assertPatchHasBeenApplied(resultOfCumulativePatch, cumulativePatch);\n\n        assertDefinedModule(resultOfCumulativePatch.getPatchInfo().getModulePath(), moduleName, newHash);\n\n        // apply a one-off patch now\n        String oneOffPatchID = randomString();\n        File oneOffPatchDir = mkdir(tempDir, oneOffPatchID);\n\n        File oneOffmoduleDir = createModule(oneOffPatchDir, moduleName, \"update module resource\");\n        byte[] updatedHash = calculateHash(oneOffmoduleDir);\n        ContentModification moduleUpdated = new ContentModification(new ModuleItem(moduleName, updatedHash), newHash, MODIFY);\n\n        Patch oneOffPatch = PatchBuilder.create()\n                .setPatchId(oneOffPatchID)\n                .setDescription(randomString())\n                .setPatchType(PatchType.ONE_OFF)\n                // one-off patch can be applied to CP\n                .addAppliesTo(cumulativePatch.getResultingVersion())\n                .addContentModification(moduleUpdated)\n                .build();\n        createPatchXMLFile(oneOffPatchDir, oneOffPatch);\n        File zippedOneOffPatch = createZippedPatchFile(oneOffPatchDir, oneOffPatchID);\n\n        // use the updated PatchInfo for the result of applying the cumulative patch\n        runner = new PatchingTaskRunner(resultOfCumulativePatch.getPatchInfo(), resultOfCumulativePatch.getPatchInfo().getEnvironment());\n        PatchingResult resultOfOneOffPatch = runner.executeDirect(new FileInputStream(zippedOneOffPatch), ContentVerificationPolicy.STRICT);\n\n        assertPatchHasBeenApplied(resultOfOneOffPatch, oneOffPatch);\n\n        assertDefinedModule(resultOfOneOffPatch.getPatchInfo().getModulePath(), moduleName, updatedHash);\n    }","id":2359,"modified_method":"@Test\n    public void testApplyCumulativePatchThenOneOffPatch() throws Exception {\n\n        // start from a base installation\n        PatchInfo info = new LocalPatchInfo(randomString(), PatchInfo.BASE, Collections.<String>emptyList(), env);\n\n        // build a CP patch for the base installation\n        // with 1 added module\n        String culumativePatchID = randomString();\n        File cumulativePatchDir = mkdir(tempDir, culumativePatchID);\n        String moduleName = randomString();\n        File moduleDir = createModule(cumulativePatchDir, moduleName);\n        byte[] newHash = calculateHash(moduleDir);\n        ContentModification moduleAdded = new ContentModification(new ModuleItem(moduleName, newHash), NO_CONTENT, ADD);\n\n        Patch cumulativePatch = PatchBuilder.create()\n                .setPatchId(culumativePatchID)\n                .setDescription(randomString())\n                .setCumulativeType(info.getVersion(), info.getVersion() + \"-CP\")\n                .addContentModification(moduleAdded)\n                .build();\n        createPatchXMLFile(cumulativePatchDir, cumulativePatch);\n        File zippedCumulativePatch = createZippedPatchFile(cumulativePatchDir, culumativePatchID);\n\n        PatchingTaskRunner runner = new PatchingTaskRunner(info, env);\n        PatchingResult resultOfCumulativePatch = runner.executeDirect(new FileInputStream(zippedCumulativePatch), ContentVerificationPolicy.STRICT);\n\n        assertPatchHasBeenApplied(resultOfCumulativePatch, cumulativePatch);\n\n        assertDefinedModule(resultOfCumulativePatch.getPatchInfo().getModulePath(), moduleName, newHash);\n\n        // apply a one-off patch now\n        String oneOffPatchID = randomString();\n        File oneOffPatchDir = mkdir(tempDir, oneOffPatchID);\n\n        File oneOffmoduleDir = createModule(oneOffPatchDir, moduleName, \"update module resource\");\n        byte[] updatedHash = calculateHash(oneOffmoduleDir);\n        ContentModification moduleUpdated = new ContentModification(new ModuleItem(moduleName, updatedHash), newHash, MODIFY);\n\n        Patch oneOffPatch = PatchBuilder.create()\n                .setPatchId(oneOffPatchID)\n                .setDescription(randomString())\n                // one-off patch can be applied to CP\n                .setOneOffType(cumulativePatch.getResultingVersion())\n                .addContentModification(moduleUpdated)\n                .build();\n        createPatchXMLFile(oneOffPatchDir, oneOffPatch);\n        File zippedOneOffPatch = createZippedPatchFile(oneOffPatchDir, oneOffPatchID);\n\n        // use the updated PatchInfo for the result of applying the cumulative patch\n        runner = new PatchingTaskRunner(resultOfCumulativePatch.getPatchInfo(), resultOfCumulativePatch.getPatchInfo().getEnvironment());\n        PatchingResult resultOfOneOffPatch = runner.executeDirect(new FileInputStream(zippedOneOffPatch), ContentVerificationPolicy.STRICT);\n\n        assertPatchHasBeenApplied(resultOfOneOffPatch, oneOffPatch);\n\n        assertDefinedModule(resultOfOneOffPatch.getPatchInfo().getModulePath(), moduleName, updatedHash);\n    }","commit_id":"814024ad2a811f516f641aacc3da8242273266a6","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testApplyCumulativePatchAndRollback() throws Exception {\n\n        // start from a base installation\n        PatchInfo info = new LocalPatchInfo(randomString(), PatchInfo.BASE, Collections.<String>emptyList(), env);\n        // create an existing file in the AS7 installation\n        File binDir = mkdir(env.getInstalledImage().getJbossHome(), \"bin\");\n        String fileName = \"standalone.sh\";\n        File standaloneShellFile = touch(binDir, fileName);\n        dump(standaloneShellFile, \"original script to run standalone AS7\");\n        byte[] existingHash = calculateHash(standaloneShellFile);\n\n        // build a CP patch for the base installation\n        // with 1 added module\n        // and 1 updated file\n        String patchID = randomString();\n        File patchDir = mkdir(tempDir, patchID);\n        String moduleName = randomString();\n        File moduleDir = createModule(patchDir, moduleName);\n        byte[] newModuleHash = calculateHash(moduleDir);\n        ContentModification moduleAdded = new ContentModification(new ModuleItem(moduleName, newModuleHash), NO_CONTENT, ADD);\n        File updatedFile = touch(patchDir, \"misc\", \"bin\", fileName);\n        dump(updatedFile, \"updated script\");\n        byte[] updatedHash = calculateHash(updatedFile);\n        ContentModification fileUpdated = new ContentModification(new MiscContentItem(fileName, new String[] { \"bin\" }, updatedHash), existingHash, MODIFY);\n\n        Patch patch = PatchBuilder.create()\n                .setPatchId(patchID)\n                .setDescription(randomString())\n                .setPatchType(PatchType.CUMULATIVE)\n                .setResultingVersion(info.getVersion() + \"-CP\")\n                .addAppliesTo(info.getVersion())\n                .addContentModification(moduleAdded)\n                .addContentModification(fileUpdated)\n                .build();\n        createPatchXMLFile(patchDir, patch);\n        File zippedPatch = createZippedPatchFile(patchDir, patchID);\n\n        PatchingTaskRunner runner = new PatchingTaskRunner(info, env);\n        PatchingResult result = runner.executeDirect(new FileInputStream(zippedPatch), ContentVerificationPolicy.STRICT);\n\n        assertPatchHasBeenApplied(result, patch);\n        assertFileExists(standaloneShellFile);\n        assertArrayEquals(updatedHash, calculateHash(standaloneShellFile));\n        tree(result.getPatchInfo().getEnvironment().getInstalledImage().getJbossHome());\n        assertDirExists(result.getPatchInfo().getEnvironment().getPatchDirectory(patchID));\n        assertDefinedModule(result.getPatchInfo().getModulePath(), moduleName, newModuleHash);\n\n        // rollback the patch based on the updated PatchInfo\n        runner = new PatchingTaskRunner(result.getPatchInfo(), result.getPatchInfo().getEnvironment());\n        PatchingResult rollbackResult = runner.rollback(patchID, true);\n\n        tree(result.getPatchInfo().getEnvironment().getInstalledImage().getJbossHome());\n        assertPatchHasBeenRolledBack(rollbackResult, patch, info);\n        assertFileExists(standaloneShellFile);\n        assertArrayEquals(existingHash, calculateHash(standaloneShellFile));\n    }","id":2360,"modified_method":"@Test\n    public void testApplyCumulativePatchAndRollback() throws Exception {\n\n        // start from a base installation\n        PatchInfo info = new LocalPatchInfo(randomString(), PatchInfo.BASE, Collections.<String>emptyList(), env);\n        // create an existing file in the AS7 installation\n        File binDir = mkdir(env.getInstalledImage().getJbossHome(), \"bin\");\n        String fileName = \"standalone.sh\";\n        File standaloneShellFile = touch(binDir, fileName);\n        dump(standaloneShellFile, \"original script to run standalone AS7\");\n        byte[] existingHash = calculateHash(standaloneShellFile);\n\n        // build a CP patch for the base installation\n        // with 1 added module\n        // and 1 updated file\n        String patchID = randomString();\n        File patchDir = mkdir(tempDir, patchID);\n        String moduleName = randomString();\n        File moduleDir = createModule(patchDir, moduleName);\n        byte[] newModuleHash = calculateHash(moduleDir);\n        ContentModification moduleAdded = new ContentModification(new ModuleItem(moduleName, newModuleHash), NO_CONTENT, ADD);\n        File updatedFile = touch(patchDir, \"misc\", \"bin\", fileName);\n        dump(updatedFile, \"updated script\");\n        byte[] updatedHash = calculateHash(updatedFile);\n        ContentModification fileUpdated = new ContentModification(new MiscContentItem(fileName, new String[] { \"bin\" }, updatedHash), existingHash, MODIFY);\n\n        Patch patch = PatchBuilder.create()\n                .setPatchId(patchID)\n                .setDescription(randomString())\n                .setCumulativeType(info.getVersion(), info.getVersion() + \"-CP\")\n                .addContentModification(moduleAdded)\n                .addContentModification(fileUpdated)\n                .build();\n        createPatchXMLFile(patchDir, patch);\n        File zippedPatch = createZippedPatchFile(patchDir, patchID);\n\n        PatchingTaskRunner runner = new PatchingTaskRunner(info, env);\n        PatchingResult result = runner.executeDirect(new FileInputStream(zippedPatch), ContentVerificationPolicy.STRICT);\n\n        assertPatchHasBeenApplied(result, patch);\n        assertFileExists(standaloneShellFile);\n        assertArrayEquals(updatedHash, calculateHash(standaloneShellFile));\n        tree(result.getPatchInfo().getEnvironment().getInstalledImage().getJbossHome());\n        assertDirExists(result.getPatchInfo().getEnvironment().getPatchDirectory(patchID));\n        assertDefinedModule(result.getPatchInfo().getModulePath(), moduleName, newModuleHash);\n\n        // rollback the patch based on the updated PatchInfo\n        runner = new PatchingTaskRunner(result.getPatchInfo(), result.getPatchInfo().getEnvironment());\n        PatchingResult rollbackResult = runner.rollback(patchID, true);\n\n        tree(result.getPatchInfo().getEnvironment().getInstalledImage().getJbossHome());\n        assertPatchHasBeenRolledBack(rollbackResult, patch, info);\n        assertFileExists(standaloneShellFile);\n        assertArrayEquals(existingHash, calculateHash(standaloneShellFile));\n    }","commit_id":"814024ad2a811f516f641aacc3da8242273266a6","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testApplyCumulativePatchThenOneOffPatchThenRollbackCumulativePatch() throws Exception {\n\n        // start from a base installation\n        PatchInfo info = new LocalPatchInfo(randomString(), PatchInfo.BASE, Collections.<String>emptyList(), env);\n        // with a module in it\n        String moduleName = randomString();\n        // create an empty module in the AS7 installation\n        createModule(env.getInstalledImage().getJbossHome(), moduleName);\n\n        tree(env.getInstalledImage().getJbossHome());\n        byte[] existingHash = calculateHash(new File(env.getInstalledImage().getModulesDir(), moduleName));\n\n        // build a CP patch for the base installation\n        // with 1 updated module\n        String culumativePatchID = randomString() + \"-CP\";\n        File cumulativePatchDir = mkdir(tempDir, culumativePatchID);\n        File moduleDir = createModule(cumulativePatchDir, moduleName, \"this is a module update in a cumulative patch\");\n        byte[] updatedHashCP = calculateHash(moduleDir);\n        ContentModification moduleAdded = new ContentModification(new ModuleItem(moduleName, updatedHashCP), existingHash, MODIFY);\n\n        Patch cumulativePatch = PatchBuilder.create()\n                .setPatchId(culumativePatchID)\n                .setDescription(randomString())\n                .setPatchType(PatchType.CUMULATIVE)\n                .setResultingVersion(info.getVersion() + \"-CP\")\n                .addAppliesTo(info.getVersion())\n                .addContentModification(moduleAdded)\n                .build();\n        createPatchXMLFile(cumulativePatchDir, cumulativePatch);\n        File zippedCumulativePatch = createZippedPatchFile(cumulativePatchDir, culumativePatchID);\n\n        PatchingTaskRunner runner = new PatchingTaskRunner(info, env);\n        PatchingResult resultOfCumulativePatch = runner.executeDirect(new FileInputStream(zippedCumulativePatch), ContentVerificationPolicy.STRICT);\n\n        assertPatchHasBeenApplied(resultOfCumulativePatch, cumulativePatch);\n\n        assertDefinedModule(resultOfCumulativePatch.getPatchInfo().getModulePath(), moduleName, updatedHashCP);\n\n        // apply a one-off patch now\n        String oneOffPatchID = randomString();\n        File oneOffPatchDir = mkdir(tempDir, oneOffPatchID);\n\n        File oneOffmoduleDir = createModule(oneOffPatchDir, moduleName, \"update module resource\");\n        byte[] updatedHashOneOff = calculateHash(oneOffmoduleDir);\n        ContentModification moduleUpdated = new ContentModification(new ModuleItem(moduleName, updatedHashOneOff), updatedHashCP, MODIFY);\n\n        Patch oneOffPatch = PatchBuilder.create()\n                .setPatchId(oneOffPatchID + \"-oneoff\")\n                .setDescription(randomString())\n                .setPatchType(PatchType.ONE_OFF)\n                // one-off patch can be applied to CP\n                .addAppliesTo(cumulativePatch.getResultingVersion())\n                .addContentModification(moduleUpdated)\n                .build();\n        createPatchXMLFile(oneOffPatchDir, oneOffPatch);\n        File zippedOneOffPatch = createZippedPatchFile(oneOffPatchDir, oneOffPatchID);\n\n        // use the updated PatchInfo for the result of applying the cumulative patch\n        runner = new PatchingTaskRunner(resultOfCumulativePatch.getPatchInfo(), resultOfCumulativePatch.getPatchInfo().getEnvironment());\n        PatchingResult resultOfOneOffPatch = runner.executeDirect(new FileInputStream(zippedOneOffPatch), ContentVerificationPolicy.STRICT);\n\n        assertPatchHasBeenApplied(resultOfOneOffPatch, oneOffPatch);\n\n        assertDefinedModule(resultOfOneOffPatch.getPatchInfo().getModulePath(), moduleName, updatedHashOneOff);\n\n        // rollback the cumulative patch, this should also rollback the one-off patch\n        runner = new PatchingTaskRunner(resultOfOneOffPatch.getPatchInfo(), resultOfOneOffPatch.getPatchInfo().getEnvironment());\n        PatchingResult resultOfCumulativePatchRollback = runner.rollback(culumativePatchID, true);\n\n        tree(resultOfCumulativePatchRollback.getPatchInfo().getEnvironment().getInstalledImage().getJbossHome());\n        assertPatchHasBeenRolledBack(resultOfCumulativePatchRollback, cumulativePatch, info);\n        assertNoResourcesForPatch(resultOfCumulativePatchRollback.getPatchInfo(), oneOffPatch);\n\n        assertDefinedModule(resultOfCumulativePatchRollback.getPatchInfo().getModulePath(), moduleName, existingHash);\n    }","id":2361,"modified_method":"@Test\n    public void testApplyCumulativePatchThenOneOffPatchThenRollbackCumulativePatch() throws Exception {\n\n        // start from a base installation\n        PatchInfo info = new LocalPatchInfo(randomString(), PatchInfo.BASE, Collections.<String>emptyList(), env);\n        // with a module in it\n        String moduleName = randomString();\n        // create an empty module in the AS7 installation\n        createModule(env.getInstalledImage().getJbossHome(), moduleName);\n\n        tree(env.getInstalledImage().getJbossHome());\n        byte[] existingHash = calculateHash(new File(env.getInstalledImage().getModulesDir(), moduleName));\n\n        // build a CP patch for the base installation\n        // with 1 updated module\n        String culumativePatchID = randomString() + \"-CP\";\n        File cumulativePatchDir = mkdir(tempDir, culumativePatchID);\n        File moduleDir = createModule(cumulativePatchDir, moduleName, \"this is a module update in a cumulative patch\");\n        byte[] updatedHashCP = calculateHash(moduleDir);\n        ContentModification moduleAdded = new ContentModification(new ModuleItem(moduleName, updatedHashCP), existingHash, MODIFY);\n\n        Patch cumulativePatch = PatchBuilder.create()\n                .setPatchId(culumativePatchID)\n                .setDescription(randomString())\n                .setCumulativeType(info.getVersion(), info.getVersion() + \"-CP\")\n                .addContentModification(moduleAdded)\n                .build();\n        createPatchXMLFile(cumulativePatchDir, cumulativePatch);\n        File zippedCumulativePatch = createZippedPatchFile(cumulativePatchDir, culumativePatchID);\n\n        PatchingTaskRunner runner = new PatchingTaskRunner(info, env);\n        PatchingResult resultOfCumulativePatch = runner.executeDirect(new FileInputStream(zippedCumulativePatch), ContentVerificationPolicy.STRICT);\n\n        assertPatchHasBeenApplied(resultOfCumulativePatch, cumulativePatch);\n\n        assertDefinedModule(resultOfCumulativePatch.getPatchInfo().getModulePath(), moduleName, updatedHashCP);\n\n        // apply a one-off patch now\n        String oneOffPatchID = randomString();\n        File oneOffPatchDir = mkdir(tempDir, oneOffPatchID);\n\n        File oneOffmoduleDir = createModule(oneOffPatchDir, moduleName, \"update module resource\");\n        byte[] updatedHashOneOff = calculateHash(oneOffmoduleDir);\n        ContentModification moduleUpdated = new ContentModification(new ModuleItem(moduleName, updatedHashOneOff), updatedHashCP, MODIFY);\n\n        Patch oneOffPatch = PatchBuilder.create()\n                .setPatchId(oneOffPatchID + \"-oneoff\")\n                .setDescription(randomString())\n                // one-off patch can be applied to CP\n                .setOneOffType(cumulativePatch.getResultingVersion())\n                .addContentModification(moduleUpdated)\n                .build();\n        createPatchXMLFile(oneOffPatchDir, oneOffPatch);\n        File zippedOneOffPatch = createZippedPatchFile(oneOffPatchDir, oneOffPatchID);\n\n        // use the updated PatchInfo for the result of applying the cumulative patch\n        runner = new PatchingTaskRunner(resultOfCumulativePatch.getPatchInfo(), resultOfCumulativePatch.getPatchInfo().getEnvironment());\n        PatchingResult resultOfOneOffPatch = runner.executeDirect(new FileInputStream(zippedOneOffPatch), ContentVerificationPolicy.STRICT);\n\n        assertPatchHasBeenApplied(resultOfOneOffPatch, oneOffPatch);\n\n        assertDefinedModule(resultOfOneOffPatch.getPatchInfo().getModulePath(), moduleName, updatedHashOneOff);\n\n        // rollback the cumulative patch, this should also rollback the one-off patch\n        runner = new PatchingTaskRunner(resultOfOneOffPatch.getPatchInfo(), resultOfOneOffPatch.getPatchInfo().getEnvironment());\n        PatchingResult resultOfCumulativePatchRollback = runner.rollback(culumativePatchID, true);\n\n        tree(resultOfCumulativePatchRollback.getPatchInfo().getEnvironment().getInstalledImage().getJbossHome());\n        assertPatchHasBeenRolledBack(resultOfCumulativePatchRollback, cumulativePatch, info);\n        assertNoResourcesForPatch(resultOfCumulativePatchRollback.getPatchInfo(), oneOffPatch);\n\n        assertDefinedModule(resultOfCumulativePatchRollback.getPatchInfo().getModulePath(), moduleName, existingHash);\n    }","commit_id":"814024ad2a811f516f641aacc3da8242273266a6","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testApplyOneOffPatch() throws Exception {\n\n        // start from a base installation\n        PatchInfo info = new LocalPatchInfo(randomString(), PatchInfo.BASE, Collections.<String>emptyList(), env);\n\n        // build a one-off patch for the base installation\n        // with 1 added module\n        String patchID = randomString();\n        File patchDir = mkdir(tempDir, patchID);\n        String moduleName = randomString();\n        File moduleDir = createModule(patchDir, moduleName);\n        byte[] newHash = calculateHash(moduleDir);\n        ContentModification moduleAdded = new ContentModification(new ModuleItem(moduleName, newHash), NO_CONTENT , ADD);\n\n        Patch patch = PatchBuilder.create()\n                .setPatchId(patchID)\n                .setDescription(randomString())\n                .setPatchType(PatchType.ONE_OFF)\n                .addAppliesTo(info.getVersion())\n                .addContentModification(moduleAdded)\n                .build();\n        createPatchXMLFile(patchDir, patch);\n        File zippedPatch = createZippedPatchFile(patchDir, patchID);\n\n        PatchingTaskRunner runner = new PatchingTaskRunner(info, env);\n        PatchingResult result = runner.executeDirect(new FileInputStream(zippedPatch), ContentVerificationPolicy.STRICT);\n\n        assertPatchHasBeenApplied(result, patch);\n        tree(result.getPatchInfo().getEnvironment().getInstalledImage().getJbossHome());\n        assertDefinedModule(result.getPatchInfo().getModulePath(), moduleName, newHash);\n    }","id":2362,"modified_method":"@Test\n    public void testApplyOneOffPatch() throws Exception {\n\n        // start from a base installation\n        PatchInfo info = new LocalPatchInfo(randomString(), PatchInfo.BASE, Collections.<String>emptyList(), env);\n\n        // build a one-off patch for the base installation\n        // with 1 added module\n        String patchID = randomString();\n        File patchDir = mkdir(tempDir, patchID);\n        String moduleName = randomString();\n        File moduleDir = createModule(patchDir, moduleName);\n        byte[] newHash = calculateHash(moduleDir);\n        ContentModification moduleAdded = new ContentModification(new ModuleItem(moduleName, newHash), NO_CONTENT , ADD);\n\n        Patch patch = PatchBuilder.create()\n                .setPatchId(patchID)\n                .setDescription(randomString())\n                .setOneOffType(info.getVersion())\n                .addContentModification(moduleAdded)\n                .build();\n        createPatchXMLFile(patchDir, patch);\n        File zippedPatch = createZippedPatchFile(patchDir, patchID);\n\n        PatchingTaskRunner runner = new PatchingTaskRunner(info, env);\n        PatchingResult result = runner.executeDirect(new FileInputStream(zippedPatch), ContentVerificationPolicy.STRICT);\n\n        assertPatchHasBeenApplied(result, patch);\n        tree(result.getPatchInfo().getEnvironment().getInstalledImage().getJbossHome());\n        assertDefinedModule(result.getPatchInfo().getModulePath(), moduleName, newHash);\n    }","commit_id":"814024ad2a811f516f641aacc3da8242273266a6","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testApplyOneOffPatchAndRollback() throws Exception {\n\n        // start from a base installation\n        PatchInfo info = new LocalPatchInfo(randomString(), PatchInfo.BASE, Collections.<String>emptyList(), env);\n        // create an existing file in the AS7 installation\n        File binDir = mkdir(env.getInstalledImage().getJbossHome(), \"bin\");\n        String fileName = \"standalone.sh\";\n        File standaloneShellFile = touch(binDir, fileName);\n        dump(standaloneShellFile, \"original script to run standalone AS7\");\n        byte[] existingHash = calculateHash(standaloneShellFile);\n\n        // build a one-off patch for the base installation\n        // with 1 added module\n        // and 1 updated file\n        String patchID = randomString();\n        File patchDir = mkdir(tempDir, patchID);\n        String moduleName = randomString();\n        File moduleDir = createModule(patchDir, moduleName);\n        byte[] newModuleHash = calculateHash(moduleDir);\n        ContentModification moduleAdded = new ContentModification(new ModuleItem(moduleName, newModuleHash), NO_CONTENT, ADD);\n        File updatedFile = touch(patchDir, \"misc\", \"bin\", fileName);\n        dump(updatedFile, \"updated script\");\n        byte[] updatedHash = calculateHash(updatedFile);\n        ContentModification fileUpdated = new ContentModification(new MiscContentItem(fileName, new String[] { \"bin\" }, updatedHash), existingHash, MODIFY);\n\n        Patch patch = PatchBuilder.create()\n                .setPatchId(patchID)\n                .setDescription(randomString())\n                .setPatchType(PatchType.ONE_OFF)\n                .addAppliesTo(info.getVersion())\n                .addContentModification(moduleAdded)\n                .addContentModification(fileUpdated)\n                .build();\n        createPatchXMLFile(patchDir, patch);\n        File zippedPatch = createZippedPatchFile(patchDir, patchID);\n\n        PatchingTaskRunner runner = new PatchingTaskRunner(info, env);\n        PatchingResult result = runner.executeDirect(new FileInputStream(zippedPatch), ContentVerificationPolicy.STRICT);\n\n        assertPatchHasBeenApplied(result, patch);\n        assertFileExists(standaloneShellFile);\n        assertArrayEquals(updatedHash, calculateHash(standaloneShellFile));\n        tree(result.getPatchInfo().getEnvironment().getInstalledImage().getJbossHome());\n        assertDirExists(result.getPatchInfo().getEnvironment().getPatchDirectory(patchID));\n        assertDefinedModule(result.getPatchInfo().getModulePath(), moduleName, newModuleHash);\n\n        // rollback the patch based on the updated PatchInfo\n        runner = new PatchingTaskRunner(result.getPatchInfo(), result.getPatchInfo().getEnvironment());\n        PatchingResult rollbackResult = runner.rollback(patchID, true);\n\n        tree(result.getPatchInfo().getEnvironment().getInstalledImage().getJbossHome());\n        assertPatchHasBeenRolledBack(rollbackResult, patch, info);\n        assertFileExists(standaloneShellFile);\n        assertArrayEquals(existingHash, calculateHash(standaloneShellFile));\n    }","id":2363,"modified_method":"@Test\n    public void testApplyOneOffPatchAndRollback() throws Exception {\n\n        // start from a base installation\n        PatchInfo info = new LocalPatchInfo(randomString(), PatchInfo.BASE, Collections.<String>emptyList(), env);\n        // create an existing file in the AS7 installation\n        File binDir = mkdir(env.getInstalledImage().getJbossHome(), \"bin\");\n        String fileName = \"standalone.sh\";\n        File standaloneShellFile = touch(binDir, fileName);\n        dump(standaloneShellFile, \"original script to run standalone AS7\");\n        byte[] existingHash = calculateHash(standaloneShellFile);\n\n        // build a one-off patch for the base installation\n        // with 1 added module\n        // and 1 updated file\n        String patchID = randomString();\n        File patchDir = mkdir(tempDir, patchID);\n        String moduleName = randomString();\n        File moduleDir = createModule(patchDir, moduleName);\n        byte[] newModuleHash = calculateHash(moduleDir);\n        ContentModification moduleAdded = new ContentModification(new ModuleItem(moduleName, newModuleHash), NO_CONTENT, ADD);\n        File updatedFile = touch(patchDir, \"misc\", \"bin\", fileName);\n        dump(updatedFile, \"updated script\");\n        byte[] updatedHash = calculateHash(updatedFile);\n        ContentModification fileUpdated = new ContentModification(new MiscContentItem(fileName, new String[] { \"bin\" }, updatedHash), existingHash, MODIFY);\n\n        Patch patch = PatchBuilder.create()\n                .setPatchId(patchID)\n                .setDescription(randomString())\n                .setOneOffType(info.getVersion())\n                .addContentModification(moduleAdded)\n                .addContentModification(fileUpdated)\n                .build();\n        createPatchXMLFile(patchDir, patch);\n        File zippedPatch = createZippedPatchFile(patchDir, patchID);\n\n        PatchingTaskRunner runner = new PatchingTaskRunner(info, env);\n        PatchingResult result = runner.executeDirect(new FileInputStream(zippedPatch), ContentVerificationPolicy.STRICT);\n\n        assertPatchHasBeenApplied(result, patch);\n        assertFileExists(standaloneShellFile);\n        assertArrayEquals(updatedHash, calculateHash(standaloneShellFile));\n        tree(result.getPatchInfo().getEnvironment().getInstalledImage().getJbossHome());\n        assertDirExists(result.getPatchInfo().getEnvironment().getPatchDirectory(patchID));\n        assertDefinedModule(result.getPatchInfo().getModulePath(), moduleName, newModuleHash);\n\n        // rollback the patch based on the updated PatchInfo\n        runner = new PatchingTaskRunner(result.getPatchInfo(), result.getPatchInfo().getEnvironment());\n        PatchingResult rollbackResult = runner.rollback(patchID, true);\n\n        tree(result.getPatchInfo().getEnvironment().getInstalledImage().getJbossHome());\n        assertPatchHasBeenRolledBack(rollbackResult, patch, info);\n        assertFileExists(standaloneShellFile);\n        assertArrayEquals(existingHash, calculateHash(standaloneShellFile));\n    }","commit_id":"814024ad2a811f516f641aacc3da8242273266a6","url":"https://github.com/wildfly/wildfly"},{"original_method":"static void assertDefinedBundle(File[] bundlesPath, String moduleName, byte[] expectedHash) throws Exception {\n        for (File path : bundlesPath) {\n            final File bundlePath = PatchContentLoader.getModulePath(path, moduleName, \"main\");\n            if(bundlePath.exists()) {\n                if(expectedHash != null) {\n                    byte[] actualHash = PatchUtils.calculateHash(bundlePath);\n                    assertTrue(\"content of bundle differs\", Arrays.equals(expectedHash, actualHash));\n                }\n                return;\n            }\n        }\n        fail(\"couln't not find bundle '\" + moduleName + \"' in \" + asList(bundlesPath));\n    }","id":2364,"modified_method":"static void assertDefinedBundle(File[] bundlesPath, String moduleName, byte[] expectedHash) throws Exception {\n        for (File path : bundlesPath) {\n            final File bundlePath = PatchContentLoader.getModulePath(path, moduleName, \"main\");\n            if(bundlePath.exists()) {\n                if(expectedHash != null) {\n                    byte[] actualHash = PatchUtils.calculateHash(bundlePath);\n                    assertTrue(\"content of bundle differs\", Arrays.equals(expectedHash, actualHash));\n                }\n                return;\n            }\n        }\n        fail(\"content not found bundle for \" + moduleName + \" in \" + asList(bundlesPath));\n    }","commit_id":"814024ad2a811f516f641aacc3da8242273266a6","url":"https://github.com/wildfly/wildfly"},{"original_method":"static void assertDefinedAbsentBundle(File[] bundlesPath, String moduleName) throws Exception {\n        for (File path : bundlesPath) {\n            final File bundlePath = PatchContentLoader.getModulePath(path, moduleName, \"main\");\n            if(bundlePath.exists()) {\n                final File[] children = bundlePath.listFiles();\n                if(children.length == 0) {\n                    return;\n                }\n            }\n        }\n        fail(\"content not found module for \" + moduleName + \" in \" + asList(modulesPath));\n    }","id":2365,"modified_method":"static void assertDefinedAbsentBundle(File[] bundlesPath, String moduleName) throws Exception {\n        for (File path : bundlesPath) {\n            final File bundlePath = PatchContentLoader.getModulePath(path, moduleName, \"main\");\n            if(bundlePath.exists()) {\n                final File[] children = bundlePath.listFiles();\n                if(children.length == 0) {\n                    return;\n                }\n            }\n        }\n        fail(\"content not found bundle for \" + moduleName + \" in \" + asList(bundlesPath));\n    }","commit_id":"814024ad2a811f516f641aacc3da8242273266a6","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void mergeParams(RulesDefinition.Rule ruleDef, RuleDto rule, DbSession session) {\n    List<RuleParamDto> paramDtos = dbClient.ruleDao().findRuleParamsByRuleKey(session, rule.getKey());\n    List<String> existingParamDtoNames = new ArrayList<String>();\n\n    for (RuleParamDto paramDto : paramDtos) {\n      RulesDefinition.Param paramDef = ruleDef.param(paramDto.getName());\n      if (paramDef == null) {\n        // TODO cascade on the activeRule upon RuleDeletion\n        dbClient.ruleDao().removeRuleParam(session, rule, paramDto);\n      } else {\n        // TODO validate that existing active rules still match constraints\n        // TODO store param name\n        if (mergeParam(paramDto, paramDef)) {\n          dbClient.ruleDao().updateRuleParam(session, rule, paramDto);\n        }\n        existingParamDtoNames.add(paramDto.getName());\n      }\n    }\n    for (RulesDefinition.Param param : ruleDef.params()) {\n      if (!existingParamDtoNames.contains(param.key())) {\n        RuleParamDto paramDto = RuleParamDto.createFor(rule)\n          .setName(param.key())\n          .setDescription(param.description())\n          .setDefaultValue(param.defaultValue())\n          .setType(param.type().toString());\n        dbClient.ruleDao().addRuleParam(session, rule, paramDto);\n      }\n    }\n  }","id":2366,"modified_method":"private void mergeParams(RulesDefinition.Rule ruleDef, RuleDto rule, DbSession session) {\n    List<RuleParamDto> paramDtos = dbClient.ruleDao().findRuleParamsByRuleKey(session, rule.getKey());\n    Map<String, RuleParamDto> existingParamsByName = Maps.newHashMap();\n\n    for (RuleParamDto paramDto : paramDtos) {\n      RulesDefinition.Param paramDef = ruleDef.param(paramDto.getName());\n      if (paramDef == null) {\n        dbClient.activeRuleDao().deleteParamsByRuleParam(session, rule, paramDto.getName());\n        dbClient.ruleDao().removeRuleParam(session, rule, paramDto);\n      } else {\n        if (mergeParam(paramDto, paramDef)) {\n          dbClient.ruleDao().updateRuleParam(session, rule, paramDto);\n        }\n        existingParamsByName.put(paramDto.getName(), paramDto);\n      }\n    }\n\n    // Create newly parameters\n    for (RulesDefinition.Param param : ruleDef.params()) {\n      RuleParamDto paramDto = existingParamsByName.get(param.key());\n      if (paramDto == null) {\n        paramDto = RuleParamDto.createFor(rule)\n          .setName(param.key())\n          .setDescription(param.description())\n          .setDefaultValue(param.defaultValue())\n          .setType(param.type().toString());\n        dbClient.ruleDao().addRuleParam(session, rule, paramDto);\n        if (!StringUtils.isEmpty(param.defaultValue())) {\n          // Propagate the default value to existing active rules\n          for (ActiveRuleDto activeRule : dbClient.activeRuleDao().findByRule(session, rule)) {\n            ActiveRuleParamDto activeParam = ActiveRuleParamDto.createFor(paramDto).setValue(param.defaultValue());\n            dbClient.activeRuleDao().addParam(session, activeRule, activeParam);\n          }\n        }\n      }\n    }\n  }","commit_id":"4b0f2cd14b2d20d2ed9c214b2110246ede391f2c","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void do_not_update_rules_if_no_changes() throws Exception {\n    Rules rules = new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x1\").setName(\"x1 name\").setHtmlDescription(\"x1 desc\");\n      }\n    };\n    register(rules);\n\n    // Store updated at date\n    Date updatedAt = index.getByKey(RuleTesting.XOO_X1).updatedAt();\n\n    // Re-execute startup tasks\n    register(rules);\n\n    // Verify rule has not been updated\n    Rule customRuleReloaded = index.getByKey(RuleTesting.XOO_X1);\n    assertThat(DateUtils.isSameInstant(customRuleReloaded.updatedAt(), updatedAt));\n  }","id":2367,"modified_method":"@Test\n  public void do_not_update_rules_if_no_changes() throws Exception {\n    Rules rules = new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x1\").setName(\"x1 name\").setHtmlDescription(\"x1 desc\");\n      }\n    };\n    register(rules);\n\n    // Store updated at date\n    Date updatedAt = ruleIndex.getByKey(RuleTesting.XOO_X1).updatedAt();\n\n    // Re-execute startup tasks\n    register(rules);\n\n    // Verify rule has not been updated\n    Rule customRuleReloaded = ruleIndex.getByKey(RuleTesting.XOO_X1);\n    assertThat(DateUtils.isSameInstant(customRuleReloaded.updatedAt(), updatedAt));\n  }","commit_id":"4b0f2cd14b2d20d2ed9c214b2110246ede391f2c","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void update_existing_rules() {\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        RulesDefinition.NewRule x1Rule = repository.createRule(\"x1\")\n          .setName(\"Name1\")\n          .setHtmlDescription(\"Desc1\")\n          .setSeverity(Severity.MINOR)\n          .setEffortToFixDescription(\"Effort1\")\n          .setTags(\"tag1\", \"tag2\");\n        x1Rule.createParam(\"max\")\n          .setType(RuleParamType.INTEGER)\n          .setDefaultValue(\"10\")\n          .setDescription(\"Maximum1\");\n        x1Rule.createParam(\"min\")\n          .setType(RuleParamType.INTEGER);\n        x1Rule\n          .setDebtSubCharacteristic(RulesDefinition.SubCharacteristics.INTEGRATION_TESTABILITY)\n          .setDebtRemediationFunction(x1Rule.debtRemediationFunctions().linearWithOffset(\"1h\", \"30min\"));\n      }\n    });\n\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        RulesDefinition.NewRule x1Rule = repository.createRule(RuleTesting.XOO_X1.rule())\n          .setName(\"Name2\")\n          .setHtmlDescription(\"Desc2\")\n          .setSeverity(Severity.INFO)\n          .setEffortToFixDescription(\"Effort2\")\n          .setTags(\"tag2\", \"tag3\");\n        // Param \"max\" is updated, \"min\" is removed, \"format\" is added\n        x1Rule.createParam(\"max\")\n          .setType(RuleParamType.INTEGER)\n          .setDefaultValue(\"15\")\n          .setDescription(\"Maximum2\");\n        x1Rule.createParam(\"format\").setType(RuleParamType.TEXT);\n        x1Rule\n          .setDebtSubCharacteristic(RulesDefinition.SubCharacteristics.INSTRUCTION_RELIABILITY)\n          .setDebtRemediationFunction(x1Rule.debtRemediationFunctions().linear(\"2h\"));\n      }\n    });\n\n    Rule rule = index.getByKey(RuleTesting.XOO_X1);\n    assertThat(rule.severity()).isEqualTo(Severity.INFO);\n    assertThat(rule.name()).isEqualTo(\"Name2\");\n    assertThat(rule.htmlDescription()).isEqualTo(\"Desc2\");\n    assertThat(rule.systemTags()).contains(\"tag2\", \"tag3\");\n    assertThat(rule.params()).hasSize(2);\n    assertThat(rule.param(\"max\").type()).isEqualTo(RuleParamType.INTEGER);\n    assertThat(rule.param(\"max\").defaultValue()).isEqualTo(\"15\");\n    assertThat(rule.param(\"max\").description()).isEqualTo(\"Maximum2\");\n    assertThat(rule.param(\"format\").type()).isEqualTo(RuleParamType.TEXT);\n    assertThat(rule.param(\"format\").defaultValue()).isNull();\n    assertThat(rule.param(\"format\").description()).isNull();\n    assertThat(rule.debtSubCharacteristicKey()).isEqualTo(RulesDefinition.SubCharacteristics.INSTRUCTION_RELIABILITY);\n    assertThat(rule.debtRemediationFunction().type()).isEqualTo(DebtRemediationFunction.Type.LINEAR);\n    assertThat(rule.debtRemediationFunction().coefficient()).isEqualTo(\"2h\");\n    assertThat(rule.debtRemediationFunction().offset()).isNull();\n    assertThat(rule.effortToFixDescription()).isEqualTo(\"Effort2\");\n  }","id":2368,"modified_method":"@Test\n  public void update_existing_rules() {\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        RulesDefinition.NewRule x1Rule = repository.createRule(\"x1\")\n          .setName(\"Name1\")\n          .setHtmlDescription(\"Desc1\")\n          .setSeverity(Severity.MINOR)\n          .setEffortToFixDescription(\"Effort1\")\n          .setTags(\"tag1\", \"tag2\");\n        x1Rule.createParam(\"max\")\n          .setType(RuleParamType.INTEGER)\n          .setDefaultValue(\"10\")\n          .setDescription(\"Maximum1\");\n        x1Rule.createParam(\"min\")\n          .setType(RuleParamType.INTEGER);\n        x1Rule\n          .setDebtSubCharacteristic(RulesDefinition.SubCharacteristics.INTEGRATION_TESTABILITY)\n          .setDebtRemediationFunction(x1Rule.debtRemediationFunctions().linearWithOffset(\"1h\", \"30min\"));\n      }\n    });\n\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        RulesDefinition.NewRule x1Rule = repository.createRule(RuleTesting.XOO_X1.rule())\n          .setName(\"Name2\")\n          .setHtmlDescription(\"Desc2\")\n          .setSeverity(Severity.INFO)\n          .setEffortToFixDescription(\"Effort2\")\n          .setTags(\"tag2\", \"tag3\");\n        // Param \"max\" is updated, \"min\" is removed, \"format\" is added\n        x1Rule.createParam(\"max\")\n          .setType(RuleParamType.INTEGER)\n          .setDefaultValue(\"15\")\n          .setDescription(\"Maximum2\");\n        x1Rule.createParam(\"format\").setType(RuleParamType.TEXT);\n        x1Rule\n          .setDebtSubCharacteristic(RulesDefinition.SubCharacteristics.INSTRUCTION_RELIABILITY)\n          .setDebtRemediationFunction(x1Rule.debtRemediationFunctions().linear(\"2h\"));\n      }\n    });\n\n    Rule rule = ruleIndex.getByKey(RuleTesting.XOO_X1);\n    assertThat(rule.severity()).isEqualTo(Severity.INFO);\n    assertThat(rule.name()).isEqualTo(\"Name2\");\n    assertThat(rule.htmlDescription()).isEqualTo(\"Desc2\");\n    assertThat(rule.systemTags()).contains(\"tag2\", \"tag3\");\n    assertThat(rule.params()).hasSize(2);\n    assertThat(rule.param(\"max\").type()).isEqualTo(RuleParamType.INTEGER);\n    assertThat(rule.param(\"max\").defaultValue()).isEqualTo(\"15\");\n    assertThat(rule.param(\"max\").description()).isEqualTo(\"Maximum2\");\n    assertThat(rule.param(\"format\").type()).isEqualTo(RuleParamType.TEXT);\n    assertThat(rule.param(\"format\").defaultValue()).isNull();\n    assertThat(rule.param(\"format\").description()).isNull();\n    assertThat(rule.debtSubCharacteristicKey()).isEqualTo(RulesDefinition.SubCharacteristics.INSTRUCTION_RELIABILITY);\n    assertThat(rule.debtRemediationFunction().type()).isEqualTo(DebtRemediationFunction.Type.LINEAR);\n    assertThat(rule.debtRemediationFunction().coefficient()).isEqualTo(\"2h\");\n    assertThat(rule.debtRemediationFunction().offset()).isNull();\n    assertThat(rule.effortToFixDescription()).isEqualTo(\"Effort2\");\n  }","commit_id":"4b0f2cd14b2d20d2ed9c214b2110246ede391f2c","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void remove_user_tags_that_are_newly_declared_as_system() {\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x1\").setName(\"x1 name\").setHtmlDescription(\"x1 desc\").setTags(\"tag1\");\n      }\n    });\n    Rule rule = index.getByKey(RuleTesting.XOO_X1);\n    assertThat(rule.systemTags()).containsOnly(\"tag1\");\n    assertThat(rule.tags()).isEmpty();\n\n    // User adds tag\n    TESTER.get(RuleUpdater.class).update(RuleUpdate.createForPluginRule(RuleTesting.XOO_X1).setTags(newHashSet(\"tag2\")), UserSession.get());\n    dbSession.clearCache();\n    rule = index.getByKey(RuleTesting.XOO_X1);\n    assertThat(rule.systemTags()).containsOnly(\"tag1\");\n    assertThat(rule.tags()).containsOnly(\"tag2\");\n\n    // Definition updated -> user tag \"tag2\" becomes a system tag\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x1\").setName(\"x1 name\").setHtmlDescription(\"x1 desc\").setTags(\"tag1\", \"tag2\");\n      }\n    });\n    rule = index.getByKey(RuleTesting.XOO_X1);\n    assertThat(rule.systemTags()).containsOnly(\"tag1\", \"tag2\");\n    assertThat(rule.tags()).isEmpty();\n  }","id":2369,"modified_method":"@Test\n  public void remove_user_tags_that_are_newly_declared_as_system() {\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x1\").setName(\"x1 name\").setHtmlDescription(\"x1 desc\").setTags(\"tag1\");\n      }\n    });\n    Rule rule = ruleIndex.getByKey(RuleTesting.XOO_X1);\n    assertThat(rule.systemTags()).containsOnly(\"tag1\");\n    assertThat(rule.tags()).isEmpty();\n\n    // User adds tag\n    TESTER.get(RuleUpdater.class).update(RuleUpdate.createForPluginRule(RuleTesting.XOO_X1).setTags(newHashSet(\"tag2\")), UserSession.get());\n    dbSession.clearCache();\n    rule = ruleIndex.getByKey(RuleTesting.XOO_X1);\n    assertThat(rule.systemTags()).containsOnly(\"tag1\");\n    assertThat(rule.tags()).containsOnly(\"tag2\");\n\n    // Definition updated -> user tag \"tag2\" becomes a system tag\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x1\").setName(\"x1 name\").setHtmlDescription(\"x1 desc\").setTags(\"tag1\", \"tag2\");\n      }\n    });\n    rule = ruleIndex.getByKey(RuleTesting.XOO_X1);\n    assertThat(rule.systemTags()).containsOnly(\"tag1\", \"tag2\");\n    assertThat(rule.tags()).isEmpty();\n  }","commit_id":"4b0f2cd14b2d20d2ed9c214b2110246ede391f2c","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void disable_custom_rules_if_template_disabled() {\n    Rules rules = new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"T1\")\n          .setName(\"template1 name\")\n          .setHtmlDescription(\"template1 desc\")\n          .setSeverity(Severity.MAJOR)\n          .setTemplate(true)\n          .createParam(\"format\")\n          .setDefaultValue(\"csv\")\n          .setType(RuleParamType.STRING)\n          .setDescription(\"format parameter\");\n      }\n    };\n    register(rules);\n    Rule templateRule = index.getByKey(RuleKey.of(\"xoo\", \"T1\"));\n\n    // Create custom rule\n    RuleKey customRuleKey = TESTER.get(RuleCreator.class).create(NewRule.createForCustomRule(\"CUSTOM_RULE\", templateRule.key())\n      .setName(\"My custom\")\n      .setHtmlDescription(\"Some description\")\n      .setSeverity(Severity.MAJOR)\n      .setStatus(RuleStatus.READY)\n      .setParameters(ImmutableMap.of(\"format\", \"txt\")));\n    assertThat(index.getByKey(customRuleKey).status()).isEqualTo(RuleStatus.READY);\n\n    // Restart without template\n    register(null);\n\n    // Verify custom rule is removed\n    assertThat(index.getByKey(templateRule.key()).status()).isEqualTo(RuleStatus.REMOVED);\n    assertThat(index.getByKey(customRuleKey).status()).isEqualTo(RuleStatus.REMOVED);\n\n    // Re-install template\n    register(rules);\n    assertThat(index.getByKey(templateRule.key()).status()).isEqualTo(RuleStatus.READY);\n    assertThat(index.getByKey(customRuleKey).status()).isEqualTo(RuleStatus.READY);\n  }","id":2370,"modified_method":"@Test\n  public void disable_custom_rules_if_template_disabled() {\n    Rules rules = new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"T1\")\n          .setName(\"template1 name\")\n          .setHtmlDescription(\"template1 desc\")\n          .setSeverity(Severity.MAJOR)\n          .setTemplate(true)\n          .createParam(\"format\")\n          .setDefaultValue(\"csv\")\n          .setType(RuleParamType.STRING)\n          .setDescription(\"format parameter\");\n      }\n    };\n    register(rules);\n    Rule templateRule = ruleIndex.getByKey(RuleKey.of(\"xoo\", \"T1\"));\n\n    // Create custom rule\n    RuleKey customRuleKey = TESTER.get(RuleCreator.class).create(NewRule.createForCustomRule(\"CUSTOM_RULE\", templateRule.key())\n      .setName(\"My custom\")\n      .setHtmlDescription(\"Some description\")\n      .setSeverity(Severity.MAJOR)\n      .setStatus(RuleStatus.READY)\n      .setParameters(ImmutableMap.of(\"format\", \"txt\")));\n    assertThat(ruleIndex.getByKey(customRuleKey).status()).isEqualTo(RuleStatus.READY);\n\n    // Restart without template\n    register(null);\n\n    // Verify custom rule is removed\n    assertThat(ruleIndex.getByKey(templateRule.key()).status()).isEqualTo(RuleStatus.REMOVED);\n    assertThat(ruleIndex.getByKey(customRuleKey).status()).isEqualTo(RuleStatus.REMOVED);\n\n    // Re-install template\n    register(rules);\n    assertThat(ruleIndex.getByKey(templateRule.key()).status()).isEqualTo(RuleStatus.READY);\n    assertThat(ruleIndex.getByKey(customRuleKey).status()).isEqualTo(RuleStatus.READY);\n  }","commit_id":"4b0f2cd14b2d20d2ed9c214b2110246ede391f2c","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void do_not_update_custom_rule_params_from_template() throws Exception {\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"T1\")\n          .setName(\"template1 name\")\n          .setHtmlDescription(\"template1 desc\")\n          .setSeverity(Severity.MAJOR)\n          .setTemplate(true)\n          .createParam(\"format\")\n          .setDefaultValue(\"csv\")\n          .setType(RuleParamType.STRING)\n          .setDescription(\"format parameter\");\n      }\n    });\n    Rule templateRule = index.getByKey(RuleKey.of(\"xoo\", \"T1\"));\n\n    // Create custom rule\n    RuleKey customRuleKey = TESTER.get(RuleCreator.class).create(NewRule.createForCustomRule(\"CUSTOM_RULE\", templateRule.key())\n      .setName(\"My custom\")\n      .setHtmlDescription(\"Some description\")\n      .setSeverity(Severity.MAJOR)\n      .setStatus(RuleStatus.READY)\n      .setParameters(ImmutableMap.of(\"format\", \"txt\")));\n\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"T1\")\n          .setName(\"template1 name\")\n          .setHtmlDescription(\"template1 desc\")\n          .setSeverity(Severity.MAJOR)\n          .setTemplate(true)\n            // \"format\" removed, \"format2\" added\n          .createParam(\"format2\")\n          .setDefaultValue(\"csv\")\n          .setType(RuleParamType.STRING)\n          .setDescription(\"format parameter\");\n      }\n    });\n\n    // Verify custom rule param has not been changed!\n    Rule customRuleReloaded = index.getByKey(customRuleKey);\n    assertThat(customRuleReloaded.params().get(0).key()).isEqualTo(\"format\");\n  }","id":2371,"modified_method":"@Test\n  public void do_not_update_custom_rule_params_from_template() throws Exception {\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"T1\")\n          .setName(\"template1 name\")\n          .setHtmlDescription(\"template1 desc\")\n          .setSeverity(Severity.MAJOR)\n          .setTemplate(true)\n          .createParam(\"format\")\n          .setDefaultValue(\"csv\")\n          .setType(RuleParamType.STRING)\n          .setDescription(\"format parameter\");\n      }\n    });\n    Rule templateRule = ruleIndex.getByKey(RuleKey.of(\"xoo\", \"T1\"));\n\n    // Create custom rule\n    RuleKey customRuleKey = TESTER.get(RuleCreator.class).create(NewRule.createForCustomRule(\"CUSTOM_RULE\", templateRule.key())\n      .setName(\"My custom\")\n      .setHtmlDescription(\"Some description\")\n      .setSeverity(Severity.MAJOR)\n      .setStatus(RuleStatus.READY)\n      .setParameters(ImmutableMap.of(\"format\", \"txt\")));\n\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"T1\")\n          .setName(\"template1 name\")\n          .setHtmlDescription(\"template1 desc\")\n          .setSeverity(Severity.MAJOR)\n          .setTemplate(true)\n          // \"format\" removed, \"format2\" added\n          .createParam(\"format2\")\n          .setDefaultValue(\"csv\")\n          .setType(RuleParamType.STRING)\n          .setDescription(\"format parameter\");\n      }\n    });\n\n    // Verify custom rule param has not been changed!\n    Rule customRuleReloaded = ruleIndex.getByKey(customRuleKey);\n    assertThat(customRuleReloaded.params().get(0).key()).isEqualTo(\"format\");\n  }","commit_id":"4b0f2cd14b2d20d2ed9c214b2110246ede391f2c","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void do_not_deactivate_removed_rules_if_repository_accidentaly_uninstalled() throws Exception {\n    Rules rules = new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x1\").setName(\"x1 name\").setHtmlDescription(\"x1 desc\");\n      }\n    };\n    register(rules);\n\n    // create a profile and activate rule\n    MockUserSession.set().setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN).setLogin(\"me\");\n    db.qualityProfileDao().insert(dbSession, QProfileTesting.newXooP1());\n    dbSession.commit();\n    dbSession.clearCache();\n    RuleActivation activation = new RuleActivation(RuleTesting.XOO_X1);\n    TESTER.get(QProfileService.class).activate(QProfileTesting.XOO_P1_KEY, activation);\n\n    // Restart without xoo\n    register(null);\n    assertThat(db.ruleDao().getByKey(dbSession, RuleTesting.XOO_X1).getStatus()).isEqualTo(RuleStatus.REMOVED);\n    assertThat(db.activeRuleDao().findByProfileKey(dbSession, QProfileTesting.XOO_P1_KEY)).hasSize(1);\n\n    // Re-install\n    register(rules);\n    assertThat(db.ruleDao().getByKey(dbSession, RuleTesting.XOO_X1).getStatus()).isEqualTo(RuleStatus.READY);\n    assertThat(db.activeRuleDao().findByProfileKey(dbSession, QProfileTesting.XOO_P1_KEY)).hasSize(1);\n  }","id":2372,"modified_method":"@Test\n  public void do_not_deactivate_removed_rules_if_repository_accidentally_uninstalled() throws Exception {\n    Rules rules = new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x1\").setName(\"x1 name\").setHtmlDescription(\"x1 desc\");\n      }\n    };\n    register(rules);\n\n    // create a profile and activate rule\n    MockUserSession.set().setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN).setLogin(\"me\");\n    db.qualityProfileDao().insert(dbSession, QProfileTesting.newXooP1());\n    dbSession.commit();\n    dbSession.clearCache();\n    RuleActivation activation = new RuleActivation(RuleTesting.XOO_X1);\n    TESTER.get(QProfileService.class).activate(QProfileTesting.XOO_P1_KEY, activation);\n\n    // Restart without xoo\n    register(null);\n    assertThat(ruleIndex.getByKey(RuleTesting.XOO_X1).status()).isEqualTo(RuleStatus.REMOVED);\n    assertThat(activeRuleIndex.findByProfile(QProfileTesting.XOO_P1_KEY)).hasSize(1);\n\n    // Re-install\n    register(rules);\n    assertThat(ruleIndex.getByKey(RuleTesting.XOO_X1).status()).isEqualTo(RuleStatus.READY);\n    assertThat(activeRuleIndex.findByProfile(QProfileTesting.XOO_P1_KEY)).hasSize(1);\n  }","commit_id":"4b0f2cd14b2d20d2ed9c214b2110246ede391f2c","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void do_not_update_custom_rule_if_no_template_change() throws Exception {\n    Rules rules = new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"T1\")\n          .setName(\"template1 name\")\n          .setHtmlDescription(\"template1 desc\")\n          .setSeverity(Severity.MAJOR)\n          .setTemplate(true)\n          .createParam(\"format\")\n          .setDefaultValue(\"csv\")\n          .setType(RuleParamType.STRING)\n          .setDescription(\"format parameter\");\n      }\n    };\n    register(rules);\n    Rule template = index.getByKey(RuleKey.of(\"xoo\", \"T1\"));\n\n    // Create custom rule\n    RuleKey customRuleKey = TESTER.get(RuleCreator.class).create(NewRule.createForCustomRule(\"CUSTOM_RULE\", template.key())\n      .setName(\"My custom\")\n      .setHtmlDescription(\"Some description\")\n      .setSeverity(Severity.MAJOR)\n      .setStatus(RuleStatus.READY)\n      .setParameters(ImmutableMap.of(\"format\", \"txt\")));\n\n    Date updatedAt = index.getByKey(customRuleKey).updatedAt();\n\n    register(rules);\n\n    // Verify custom rule has been restore from the template\n    Rule customRuleReloaded = index.getByKey(customRuleKey);\n    assertThat(customRuleReloaded.updatedAt()).isEqualTo(updatedAt);\n  }","id":2373,"modified_method":"@Test\n  public void do_not_update_custom_rule_if_no_template_change() throws Exception {\n    Rules rules = new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"T1\")\n          .setName(\"template1 name\")\n          .setHtmlDescription(\"template1 desc\")\n          .setSeverity(Severity.MAJOR)\n          .setTemplate(true)\n          .createParam(\"format\")\n          .setDefaultValue(\"csv\")\n          .setType(RuleParamType.STRING)\n          .setDescription(\"format parameter\");\n      }\n    };\n    register(rules);\n    Rule template = ruleIndex.getByKey(RuleKey.of(\"xoo\", \"T1\"));\n\n    // Create custom rule\n    RuleKey customRuleKey = TESTER.get(RuleCreator.class).create(NewRule.createForCustomRule(\"CUSTOM_RULE\", template.key())\n      .setName(\"My custom\")\n      .setHtmlDescription(\"Some description\")\n      .setSeverity(Severity.MAJOR)\n      .setStatus(RuleStatus.READY)\n      .setParameters(ImmutableMap.of(\"format\", \"txt\")));\n\n    Date updatedAt = ruleIndex.getByKey(customRuleKey).updatedAt();\n\n    register(rules);\n\n    // Verify custom rule has been restore from the template\n    Rule customRuleReloaded = ruleIndex.getByKey(customRuleKey);\n    assertThat(customRuleReloaded.updatedAt()).isEqualTo(updatedAt);\n  }","commit_id":"4b0f2cd14b2d20d2ed9c214b2110246ede391f2c","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void register_rules_at_startup() throws Exception {\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        RulesDefinition.NewRule x1Rule = repository.createRule(\"x1\")\n          .setName(\"x1 name\")\n          .setHtmlDescription(\"x1 desc\")\n          .setSeverity(Severity.MINOR)\n          .setEffortToFixDescription(\"x1 effort to fix\")\n          .setTags(\"tag1\");\n        x1Rule.createParam(\"acceptWhitespace\")\n          .setType(RuleParamType.BOOLEAN)\n          .setDefaultValue(\"false\")\n          .setDescription(\"Accept whitespaces on the line\");\n        x1Rule.createParam(\"min\")\n          .setType(RuleParamType.INTEGER);\n        x1Rule\n          .setDebtSubCharacteristic(RulesDefinition.SubCharacteristics.INTEGRATION_TESTABILITY)\n          .setDebtRemediationFunction(x1Rule.debtRemediationFunctions().linearWithOffset(\"1h\", \"30min\"));\n      }\n    });\n\n    // verify db\n    List<RuleDto> rules = db.ruleDao().findAll(dbSession);\n    assertThat(rules).hasSize(1);\n    assertThat(rules.get(0).getKey()).isEqualTo(RuleKey.of(\"xoo\", \"x1\"));\n    List<RuleParamDto> ruleParams = db.ruleDao().findAllRuleParams(dbSession);\n    assertThat(ruleParams).hasSize(2);\n\n    // verify es\n    Result<Rule> searchResult = index.search(new RuleQuery(), new QueryOptions());\n    assertThat(searchResult.getTotal()).isEqualTo(1);\n    assertThat(searchResult.getHits()).hasSize(1);\n    Rule rule = index.getByKey(RuleKey.of(\"xoo\", \"x1\"));\n    assertThat(rule.severity()).isEqualTo(Severity.MINOR);\n    assertThat(rule.name()).isEqualTo(\"x1 name\");\n    assertThat(rule.htmlDescription()).isEqualTo(\"x1 desc\");\n    assertThat(rule.systemTags()).contains(\"tag1\");\n    assertThat(rule.params()).hasSize(2);\n    assertThat(rule.param(\"acceptWhitespace\").type()).isEqualTo(RuleParamType.BOOLEAN);\n    assertThat(rule.param(\"acceptWhitespace\").defaultValue()).isEqualTo(\"false\");\n    assertThat(rule.param(\"acceptWhitespace\").description()).isEqualTo(\"Accept whitespaces on the line\");\n    assertThat(rule.param(\"min\").type()).isEqualTo(RuleParamType.INTEGER);\n    assertThat(rule.param(\"min\").defaultValue()).isNull();\n    assertThat(rule.param(\"min\").description()).isNull();\n    assertThat(rule.debtSubCharacteristicKey()).isEqualTo(RulesDefinition.SubCharacteristics.INTEGRATION_TESTABILITY);\n    assertThat(rule.debtRemediationFunction().type()).isEqualTo(DebtRemediationFunction.Type.LINEAR_OFFSET);\n    assertThat(rule.debtRemediationFunction().coefficient()).isEqualTo(\"1h\");\n    assertThat(rule.debtRemediationFunction().offset()).isEqualTo(\"30min\");\n    assertThat(rule.effortToFixDescription()).isEqualTo(\"x1 effort to fix\");\n  }","id":2374,"modified_method":"@Test\n  public void register_rules_at_startup() throws Exception {\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        RulesDefinition.NewRule x1Rule = repository.createRule(\"x1\")\n          .setName(\"x1 name\")\n          .setHtmlDescription(\"x1 desc\")\n          .setSeverity(Severity.MINOR)\n          .setEffortToFixDescription(\"x1 effort to fix\")\n          .setTags(\"tag1\");\n        x1Rule.createParam(\"acceptWhitespace\")\n          .setType(RuleParamType.BOOLEAN)\n          .setDefaultValue(\"false\")\n          .setDescription(\"Accept whitespaces on the line\");\n        x1Rule.createParam(\"min\")\n          .setType(RuleParamType.INTEGER);\n        x1Rule\n          .setDebtSubCharacteristic(RulesDefinition.SubCharacteristics.INTEGRATION_TESTABILITY)\n          .setDebtRemediationFunction(x1Rule.debtRemediationFunctions().linearWithOffset(\"1h\", \"30min\"));\n      }\n    });\n\n    // verify db\n    List<RuleDto> rules = db.ruleDao().findAll(dbSession);\n    assertThat(rules).hasSize(1);\n    assertThat(rules.get(0).getKey()).isEqualTo(RuleKey.of(\"xoo\", \"x1\"));\n    List<RuleParamDto> ruleParams = db.ruleDao().findAllRuleParams(dbSession);\n    assertThat(ruleParams).hasSize(2);\n\n    // verify es\n    Result<Rule> searchResult = ruleIndex.search(new RuleQuery(), new QueryOptions());\n    assertThat(searchResult.getTotal()).isEqualTo(1);\n    assertThat(searchResult.getHits()).hasSize(1);\n    Rule rule = ruleIndex.getByKey(RuleKey.of(\"xoo\", \"x1\"));\n    assertThat(rule.severity()).isEqualTo(Severity.MINOR);\n    assertThat(rule.name()).isEqualTo(\"x1 name\");\n    assertThat(rule.htmlDescription()).isEqualTo(\"x1 desc\");\n    assertThat(rule.systemTags()).contains(\"tag1\");\n    assertThat(rule.params()).hasSize(2);\n    assertThat(rule.param(\"acceptWhitespace\").type()).isEqualTo(RuleParamType.BOOLEAN);\n    assertThat(rule.param(\"acceptWhitespace\").defaultValue()).isEqualTo(\"false\");\n    assertThat(rule.param(\"acceptWhitespace\").description()).isEqualTo(\"Accept whitespaces on the line\");\n    assertThat(rule.param(\"min\").type()).isEqualTo(RuleParamType.INTEGER);\n    assertThat(rule.param(\"min\").defaultValue()).isNull();\n    assertThat(rule.param(\"min\").description()).isNull();\n    assertThat(rule.debtSubCharacteristicKey()).isEqualTo(RulesDefinition.SubCharacteristics.INTEGRATION_TESTABILITY);\n    assertThat(rule.debtRemediationFunction().type()).isEqualTo(DebtRemediationFunction.Type.LINEAR_OFFSET);\n    assertThat(rule.debtRemediationFunction().coefficient()).isEqualTo(\"1h\");\n    assertThat(rule.debtRemediationFunction().offset()).isEqualTo(\"30min\");\n    assertThat(rule.effortToFixDescription()).isEqualTo(\"x1 effort to fix\");\n  }","commit_id":"4b0f2cd14b2d20d2ed9c214b2110246ede391f2c","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void update_custom_rule_on_template_change() throws Exception {\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"T1\")\n          .setName(\"template1 name\")\n          .setHtmlDescription(\"template1 desc\")\n          .setSeverity(Severity.MAJOR)\n          .setTemplate(true)\n          .createParam(\"format\")\n          .setDefaultValue(\"csv\")\n          .setType(RuleParamType.STRING)\n          .setDescription(\"format parameter\");\n      }\n    });\n    Rule template = index.getByKey(RuleKey.of(\"xoo\", \"T1\"));\n\n    // Create custom rule\n    RuleKey customRuleKey = TESTER.get(RuleCreator.class).create(NewRule.createForCustomRule(\"CUSTOM_RULE\", template.key())\n      .setName(\"My custom\")\n      .setHtmlDescription(\"Some description\")\n      .setSeverity(Severity.MAJOR)\n      .setStatus(RuleStatus.READY)\n      .setParameters(ImmutableMap.of(\"format\", \"txt\")));\n\n    // Update template and restart\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        RulesDefinition.NewRule rule = repository.createRule(\"T1\")\n          .setName(\"template1 name\")\n          .setHtmlDescription(\"template1 desc\")\n          .setSeverity(Severity.BLOCKER)\n          .setStatus(RuleStatus.BETA)\n          .setTemplate(true)\n          .setInternalKey(\"new_internal\");\n        rule\n          .setDebtSubCharacteristic(RulesDefinition.SubCharacteristics.INTEGRATION_TESTABILITY)\n          .setDebtRemediationFunction(rule.debtRemediationFunctions().linearWithOffset(\"1h\", \"30min\"))\n          .setEffortToFixDescription(\"Effort\");\n      }\n    });\n\n    // Verify custom rule has been restore from the template\n    Rule customRule = index.getByKey(customRuleKey);\n    assertThat(customRule.language()).isEqualTo(\"xoo\");\n    assertThat(customRule.internalKey()).isEqualTo(\"new_internal\");\n    assertThat(customRule.severity()).isEqualTo(Severity.BLOCKER);\n    assertThat(customRule.status()).isEqualTo(RuleStatus.BETA);\n    assertThat(customRule.debtSubCharacteristicKey()).isEqualTo(RulesDefinition.SubCharacteristics.INTEGRATION_TESTABILITY);\n    assertThat(customRule.debtRemediationFunction().type()).isEqualTo(DebtRemediationFunction.Type.LINEAR_OFFSET);\n    assertThat(customRule.effortToFixDescription()).isEqualTo(\"Effort\");\n  }","id":2375,"modified_method":"@Test\n  public void update_custom_rule_on_template_change() throws Exception {\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"T1\")\n          .setName(\"template1 name\")\n          .setHtmlDescription(\"template1 desc\")\n          .setSeverity(Severity.MAJOR)\n          .setTemplate(true)\n          .createParam(\"format\")\n          .setDefaultValue(\"csv\")\n          .setType(RuleParamType.STRING)\n          .setDescription(\"format parameter\");\n      }\n    });\n    Rule template = ruleIndex.getByKey(RuleKey.of(\"xoo\", \"T1\"));\n\n    // Create custom rule\n    RuleKey customRuleKey = TESTER.get(RuleCreator.class).create(NewRule.createForCustomRule(\"CUSTOM_RULE\", template.key())\n      .setName(\"My custom\")\n      .setHtmlDescription(\"Some description\")\n      .setSeverity(Severity.MAJOR)\n      .setStatus(RuleStatus.READY)\n      .setParameters(ImmutableMap.of(\"format\", \"txt\")));\n\n    // Update template and restart\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        RulesDefinition.NewRule rule = repository.createRule(\"T1\")\n          .setName(\"template1 name\")\n          .setHtmlDescription(\"template1 desc\")\n          .setSeverity(Severity.BLOCKER)\n          .setStatus(RuleStatus.BETA)\n          .setTemplate(true)\n          .setInternalKey(\"new_internal\");\n        rule\n          .setDebtSubCharacteristic(RulesDefinition.SubCharacteristics.INTEGRATION_TESTABILITY)\n          .setDebtRemediationFunction(rule.debtRemediationFunctions().linearWithOffset(\"1h\", \"30min\"))\n          .setEffortToFixDescription(\"Effort\");\n      }\n    });\n\n    // Verify custom rule has been restore from the template\n    Rule customRule = ruleIndex.getByKey(customRuleKey);\n    assertThat(customRule.language()).isEqualTo(\"xoo\");\n    assertThat(customRule.internalKey()).isEqualTo(\"new_internal\");\n    assertThat(customRule.severity()).isEqualTo(Severity.BLOCKER);\n    assertThat(customRule.status()).isEqualTo(RuleStatus.BETA);\n    assertThat(customRule.debtSubCharacteristicKey()).isEqualTo(RulesDefinition.SubCharacteristics.INTEGRATION_TESTABILITY);\n    assertThat(customRule.debtRemediationFunction().type()).isEqualTo(DebtRemediationFunction.Type.LINEAR_OFFSET);\n    assertThat(customRule.effortToFixDescription()).isEqualTo(\"Effort\");\n  }","commit_id":"4b0f2cd14b2d20d2ed9c214b2110246ede391f2c","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void do_not_disable_manual_rules() {\n    // Create manual rule\n    RuleKey manualRuleKey = TESTER.get(RuleCreator.class).create(NewRule.createForManualRule(\"MANUAL_RULE\")\n      .setName(\"My manual\")\n      .setHtmlDescription(\"Some description\"));\n    dbSession.commit();\n    dbSession.clearCache();\n    assertThat(index.getByKey(manualRuleKey).status()).isEqualTo(RuleStatus.READY);\n\n    // Restart\n    register(null);\n\n    // Verify manual rule is still ready\n    assertThat(index.getByKey(manualRuleKey).status()).isEqualTo(RuleStatus.READY);\n  }","id":2376,"modified_method":"@Test\n  public void do_not_disable_manual_rules() {\n    // Create manual rule\n    RuleKey manualRuleKey = TESTER.get(RuleCreator.class).create(NewRule.createForManualRule(\"MANUAL_RULE\")\n      .setName(\"My manual\")\n      .setHtmlDescription(\"Some description\"));\n    dbSession.commit();\n    dbSession.clearCache();\n    assertThat(ruleIndex.getByKey(manualRuleKey).status()).isEqualTo(RuleStatus.READY);\n\n    // Restart\n    register(null);\n\n    // Verify manual rule is still ready\n    assertThat(ruleIndex.getByKey(manualRuleKey).status()).isEqualTo(RuleStatus.READY);\n  }","commit_id":"4b0f2cd14b2d20d2ed9c214b2110246ede391f2c","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void deactivate_removed_rules_only_if_repository_still_exists() throws Exception {\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x1\").setName(\"x1 name\").setHtmlDescription(\"x1 desc\");\n      }\n    });\n\n    // Create a profile and activate rule\n    MockUserSession.set().setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN).setLogin(\"me\");\n\n    db.qualityProfileDao().insert(dbSession, QProfileTesting.newXooP1());\n    dbSession.commit();\n    dbSession.clearCache();\n    RuleActivation activation = new RuleActivation(RuleTesting.XOO_X1);\n    TESTER.get(QProfileService.class).activate(QProfileTesting.XOO_P1_KEY, activation);\n\n    // Restart, repo xoo still exists -> deactivate x1\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x2\").setName(\"x2 name\").setHtmlDescription(\"x2 desc\");\n      }\n    });\n    assertThat(db.ruleDao().getByKey(dbSession, RuleKey.of(\"xoo\", \"x1\")).getStatus()).isEqualTo(RuleStatus.REMOVED);\n    assertThat(db.ruleDao().getByKey(dbSession, RuleKey.of(\"xoo\", \"x2\")).getStatus()).isEqualTo(RuleStatus.READY);\n    assertThat(db.activeRuleDao().findByProfileKey(dbSession, QProfileTesting.XOO_P1_KEY)).hasSize(0);\n  }","id":2377,"modified_method":"@Test\n  public void deactivate_removed_rules_only_if_repository_still_exists() throws Exception {\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x1\").setName(\"x1 name\").setHtmlDescription(\"x1 desc\");\n      }\n    });\n\n    // Create a profile and activate rule\n    MockUserSession.set().setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN).setLogin(\"me\");\n    db.qualityProfileDao().insert(dbSession, QProfileTesting.newXooP1());\n    dbSession.commit();\n    dbSession.clearCache();\n    RuleActivation activation = new RuleActivation(RuleTesting.XOO_X1);\n    TESTER.get(QProfileService.class).activate(QProfileTesting.XOO_P1_KEY, activation);\n\n    // Restart, repo xoo still exists -> deactivate x1\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x2\").setName(\"x2 name\").setHtmlDescription(\"x2 desc\");\n      }\n    });\n    assertThat(ruleIndex.getByKey(RuleKey.of(\"xoo\", \"x1\")).status()).isEqualTo(RuleStatus.REMOVED);\n    assertThat(ruleIndex.getByKey(RuleKey.of(\"xoo\", \"x2\")).status()).isEqualTo(RuleStatus.READY);\n    assertThat(activeRuleIndex.findByProfile(QProfileTesting.XOO_P1_KEY)).hasSize(0);\n  }","commit_id":"4b0f2cd14b2d20d2ed9c214b2110246ede391f2c","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * Use-case:\n   * 1. start server\n   * 2. stop server\n   * 3. drop elasticsearch index: rm -rf data/es\n   * 4. start server -> db is up-to-date (no changes) but rules must be re-indexed\n   */\n  @Test\n  public void index_rules_even_if_no_changes() throws Exception {\n    Rules rules = new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x1\")\n          .setName(\"x1 name\")\n          .setHtmlDescription(\"x1 desc\");\n      }\n    };\n    register(rules);\n\n    // clear ES but keep db\n    TESTER.clearIndexes();\n    register(rules);\n\n    // verify that rules are indexed\n    Result<Rule> searchResult = index.search(new RuleQuery(), new QueryOptions());\n    searchResult = index.search(new RuleQuery().setKey(\"xoo:x1\"), new QueryOptions());\n    assertThat(searchResult.getTotal()).isEqualTo(1);\n    assertThat(searchResult.getHits()).hasSize(1);\n    assertThat(searchResult.getHits().get(0).key()).isEqualTo(RuleKey.of(\"xoo\", \"x1\"));\n  }","id":2378,"modified_method":"/**\n   * Use-case:\n   * 1. start server\n   * 2. stop server\n   * 3. drop elasticsearch index: rm -rf data/es\n   * 4. start server -> db is up-to-date (no changes) but rules must be re-indexed\n   */\n  @Test\n  public void index_rules_even_if_no_changes() throws Exception {\n    Rules rules = new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x1\")\n          .setName(\"x1 name\")\n          .setHtmlDescription(\"x1 desc\");\n      }\n    };\n    register(rules);\n\n    // clear ES but keep db\n    TESTER.clearIndexes();\n    register(rules);\n\n    // verify that rules are indexed\n    Result<Rule> searchResult = ruleIndex.search(new RuleQuery(), new QueryOptions());\n    searchResult = ruleIndex.search(new RuleQuery().setKey(\"xoo:x1\"), new QueryOptions());\n    assertThat(searchResult.getTotal()).isEqualTo(1);\n    assertThat(searchResult.getHits()).hasSize(1);\n    assertThat(searchResult.getHits().get(0).key()).isEqualTo(RuleKey.of(\"xoo\", \"x1\"));\n  }","commit_id":"4b0f2cd14b2d20d2ed9c214b2110246ede391f2c","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void before() {\n    TESTER.clearDbAndIndexes();\n    db = TESTER.get(DbClient.class);\n    dbSession = TESTER.get(DbClient.class).openSession(false);\n    dbSession.clearCache();\n    index = TESTER.get(RuleIndex.class);\n  }","id":2379,"modified_method":"@Before\n  public void before() {\n    TESTER.clearDbAndIndexes();\n    db = TESTER.get(DbClient.class);\n    dbSession = TESTER.get(DbClient.class).openSession(false);\n    dbSession.clearCache();\n    ruleIndex = TESTER.get(RuleIndex.class);\n    activeRuleIndex = TESTER.get(ActiveRuleIndex.class);\n  }","commit_id":"4b0f2cd14b2d20d2ed9c214b2110246ede391f2c","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void register(@Nullable Rules rules) {\n    if (dbSession != null) {\n      dbSession.close();\n    }\n    RULE_DEFS.set(rules);\n    TESTER.get(Platform.class).executeStartupTasks();\n    db = TESTER.get(DbClient.class);\n    dbSession = TESTER.get(DbClient.class).openSession(false);\n    dbSession.clearCache();\n    index = TESTER.get(RuleIndex.class);\n  }","id":2380,"modified_method":"private void register(@Nullable Rules rules) {\n    if (dbSession != null) {\n      dbSession.close();\n    }\n    RULE_DEFS.set(rules);\n    TESTER.get(Platform.class).executeStartupTasks();\n    db = TESTER.get(DbClient.class);\n    dbSession = TESTER.get(DbClient.class).openSession(false);\n    dbSession.clearCache();\n    ruleIndex = TESTER.get(RuleIndex.class);\n  }","commit_id":"4b0f2cd14b2d20d2ed9c214b2110246ede391f2c","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void mergeParams(RulesDefinition.Rule ruleDef, RuleDto rule, DbSession session) {\n    List<RuleParamDto> paramDtos = dbClient.ruleDao().findRuleParamsByRuleKey(session, rule.getKey());\n    List<String> existingParamDtoNames = new ArrayList<String>();\n\n    for (RuleParamDto paramDto : paramDtos) {\n      RulesDefinition.Param paramDef = ruleDef.param(paramDto.getName());\n      if (paramDef == null) {\n        // TODO cascade on the activeRule upon RuleDeletion\n        dbClient.ruleDao().removeRuleParam(session, rule, paramDto);\n      } else {\n        // TODO validate that existing active rules still match constraints\n        // TODO store param name\n        if (mergeParam(paramDto, paramDef)) {\n          dbClient.ruleDao().updateRuleParam(session, rule, paramDto);\n        }\n        existingParamDtoNames.add(paramDto.getName());\n      }\n    }\n    for (RulesDefinition.Param param : ruleDef.params()) {\n      if (!existingParamDtoNames.contains(param.key())) {\n        RuleParamDto paramDto = RuleParamDto.createFor(rule)\n          .setName(param.key())\n          .setDescription(param.description())\n          .setDefaultValue(param.defaultValue())\n          .setType(param.type().toString());\n        dbClient.ruleDao().addRuleParam(session, rule, paramDto);\n      }\n    }\n  }","id":2381,"modified_method":"private void mergeParams(RulesDefinition.Rule ruleDef, RuleDto rule, DbSession session) {\n    List<RuleParamDto> paramDtos = dbClient.ruleDao().findRuleParamsByRuleKey(session, rule.getKey());\n    Map<String, RuleParamDto> existingParamsByName = Maps.newHashMap();\n\n    for (RuleParamDto paramDto : paramDtos) {\n      RulesDefinition.Param paramDef = ruleDef.param(paramDto.getName());\n      if (paramDef == null) {\n        dbClient.activeRuleDao().deleteParamsByRuleParam(session, rule, paramDto.getName());\n        dbClient.ruleDao().removeRuleParam(session, rule, paramDto);\n      } else {\n        if (mergeParam(paramDto, paramDef)) {\n          dbClient.ruleDao().updateRuleParam(session, rule, paramDto);\n        }\n        existingParamsByName.put(paramDto.getName(), paramDto);\n      }\n    }\n\n    // Create newly parameters\n    for (RulesDefinition.Param param : ruleDef.params()) {\n      RuleParamDto paramDto = existingParamsByName.get(param.key());\n      if (paramDto == null) {\n        paramDto = RuleParamDto.createFor(rule)\n          .setName(param.key())\n          .setDescription(param.description())\n          .setDefaultValue(param.defaultValue())\n          .setType(param.type().toString());\n        dbClient.ruleDao().addRuleParam(session, rule, paramDto);\n        if (!StringUtils.isEmpty(param.defaultValue())) {\n          // Propagate the default value to existing active rules\n          for (ActiveRuleDto activeRule : dbClient.activeRuleDao().findByRule(session, rule)) {\n            ActiveRuleParamDto activeParam = ActiveRuleParamDto.createFor(paramDto).setValue(param.defaultValue());\n            dbClient.activeRuleDao().addParam(session, activeRule, activeParam);\n          }\n        }\n      }\n    }\n  }","commit_id":"bfc542961446b8de587de32fd88de902123614d1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void do_not_disable_manual_rules() {\n    // Create manual rule\n    RuleKey manualRuleKey = TESTER.get(RuleCreator.class).create(NewRule.createForManualRule(\"MANUAL_RULE\")\n      .setName(\"My manual\")\n      .setHtmlDescription(\"Some description\"));\n    dbSession.commit();\n    dbSession.clearCache();\n    assertThat(index.getByKey(manualRuleKey).status()).isEqualTo(RuleStatus.READY);\n\n    // Restart\n    register(null);\n\n    // Verify manual rule is still ready\n    assertThat(index.getByKey(manualRuleKey).status()).isEqualTo(RuleStatus.READY);\n  }","id":2382,"modified_method":"@Test\n  public void do_not_disable_manual_rules() {\n    // Create manual rule\n    RuleKey manualRuleKey = TESTER.get(RuleCreator.class).create(NewRule.createForManualRule(\"MANUAL_RULE\")\n      .setName(\"My manual\")\n      .setHtmlDescription(\"Some description\"));\n    dbSession.commit();\n    dbSession.clearCache();\n    assertThat(ruleIndex.getByKey(manualRuleKey).status()).isEqualTo(RuleStatus.READY);\n\n    // Restart\n    register(null);\n\n    // Verify manual rule is still ready\n    assertThat(ruleIndex.getByKey(manualRuleKey).status()).isEqualTo(RuleStatus.READY);\n  }","commit_id":"bfc542961446b8de587de32fd88de902123614d1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void update_existing_rules() {\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        RulesDefinition.NewRule x1Rule = repository.createRule(\"x1\")\n          .setName(\"Name1\")\n          .setHtmlDescription(\"Desc1\")\n          .setSeverity(Severity.MINOR)\n          .setEffortToFixDescription(\"Effort1\")\n          .setTags(\"tag1\", \"tag2\");\n        x1Rule.createParam(\"max\")\n          .setType(RuleParamType.INTEGER)\n          .setDefaultValue(\"10\")\n          .setDescription(\"Maximum1\");\n        x1Rule.createParam(\"min\")\n          .setType(RuleParamType.INTEGER);\n        x1Rule\n          .setDebtSubCharacteristic(RulesDefinition.SubCharacteristics.INTEGRATION_TESTABILITY)\n          .setDebtRemediationFunction(x1Rule.debtRemediationFunctions().linearWithOffset(\"1h\", \"30min\"));\n      }\n    });\n\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        RulesDefinition.NewRule x1Rule = repository.createRule(RuleTesting.XOO_X1.rule())\n          .setName(\"Name2\")\n          .setHtmlDescription(\"Desc2\")\n          .setSeverity(Severity.INFO)\n          .setEffortToFixDescription(\"Effort2\")\n          .setTags(\"tag2\", \"tag3\");\n        // Param \"max\" is updated, \"min\" is removed, \"format\" is added\n        x1Rule.createParam(\"max\")\n          .setType(RuleParamType.INTEGER)\n          .setDefaultValue(\"15\")\n          .setDescription(\"Maximum2\");\n        x1Rule.createParam(\"format\").setType(RuleParamType.TEXT);\n        x1Rule\n          .setDebtSubCharacteristic(RulesDefinition.SubCharacteristics.INSTRUCTION_RELIABILITY)\n          .setDebtRemediationFunction(x1Rule.debtRemediationFunctions().linear(\"2h\"));\n      }\n    });\n\n    Rule rule = index.getByKey(RuleTesting.XOO_X1);\n    assertThat(rule.severity()).isEqualTo(Severity.INFO);\n    assertThat(rule.name()).isEqualTo(\"Name2\");\n    assertThat(rule.htmlDescription()).isEqualTo(\"Desc2\");\n    assertThat(rule.systemTags()).contains(\"tag2\", \"tag3\");\n    assertThat(rule.params()).hasSize(2);\n    assertThat(rule.param(\"max\").type()).isEqualTo(RuleParamType.INTEGER);\n    assertThat(rule.param(\"max\").defaultValue()).isEqualTo(\"15\");\n    assertThat(rule.param(\"max\").description()).isEqualTo(\"Maximum2\");\n    assertThat(rule.param(\"format\").type()).isEqualTo(RuleParamType.TEXT);\n    assertThat(rule.param(\"format\").defaultValue()).isNull();\n    assertThat(rule.param(\"format\").description()).isNull();\n    assertThat(rule.debtSubCharacteristicKey()).isEqualTo(RulesDefinition.SubCharacteristics.INSTRUCTION_RELIABILITY);\n    assertThat(rule.debtRemediationFunction().type()).isEqualTo(DebtRemediationFunction.Type.LINEAR);\n    assertThat(rule.debtRemediationFunction().coefficient()).isEqualTo(\"2h\");\n    assertThat(rule.debtRemediationFunction().offset()).isNull();\n    assertThat(rule.effortToFixDescription()).isEqualTo(\"Effort2\");\n  }","id":2383,"modified_method":"@Test\n  public void update_existing_rules() {\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        RulesDefinition.NewRule x1Rule = repository.createRule(\"x1\")\n          .setName(\"Name1\")\n          .setHtmlDescription(\"Desc1\")\n          .setSeverity(Severity.MINOR)\n          .setEffortToFixDescription(\"Effort1\")\n          .setTags(\"tag1\", \"tag2\");\n        x1Rule.createParam(\"max\")\n          .setType(RuleParamType.INTEGER)\n          .setDefaultValue(\"10\")\n          .setDescription(\"Maximum1\");\n        x1Rule.createParam(\"min\")\n          .setType(RuleParamType.INTEGER);\n        x1Rule\n          .setDebtSubCharacteristic(RulesDefinition.SubCharacteristics.INTEGRATION_TESTABILITY)\n          .setDebtRemediationFunction(x1Rule.debtRemediationFunctions().linearWithOffset(\"1h\", \"30min\"));\n      }\n    });\n\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        RulesDefinition.NewRule x1Rule = repository.createRule(RuleTesting.XOO_X1.rule())\n          .setName(\"Name2\")\n          .setHtmlDescription(\"Desc2\")\n          .setSeverity(Severity.INFO)\n          .setEffortToFixDescription(\"Effort2\")\n          .setTags(\"tag2\", \"tag3\");\n        // Param \"max\" is updated, \"min\" is removed, \"format\" is added\n        x1Rule.createParam(\"max\")\n          .setType(RuleParamType.INTEGER)\n          .setDefaultValue(\"15\")\n          .setDescription(\"Maximum2\");\n        x1Rule.createParam(\"format\").setType(RuleParamType.TEXT);\n        x1Rule\n          .setDebtSubCharacteristic(RulesDefinition.SubCharacteristics.INSTRUCTION_RELIABILITY)\n          .setDebtRemediationFunction(x1Rule.debtRemediationFunctions().linear(\"2h\"));\n      }\n    });\n\n    Rule rule = ruleIndex.getByKey(RuleTesting.XOO_X1);\n    assertThat(rule.severity()).isEqualTo(Severity.INFO);\n    assertThat(rule.name()).isEqualTo(\"Name2\");\n    assertThat(rule.htmlDescription()).isEqualTo(\"Desc2\");\n    assertThat(rule.systemTags()).contains(\"tag2\", \"tag3\");\n    assertThat(rule.params()).hasSize(2);\n    assertThat(rule.param(\"max\").type()).isEqualTo(RuleParamType.INTEGER);\n    assertThat(rule.param(\"max\").defaultValue()).isEqualTo(\"15\");\n    assertThat(rule.param(\"max\").description()).isEqualTo(\"Maximum2\");\n    assertThat(rule.param(\"format\").type()).isEqualTo(RuleParamType.TEXT);\n    assertThat(rule.param(\"format\").defaultValue()).isNull();\n    assertThat(rule.param(\"format\").description()).isNull();\n    assertThat(rule.debtSubCharacteristicKey()).isEqualTo(RulesDefinition.SubCharacteristics.INSTRUCTION_RELIABILITY);\n    assertThat(rule.debtRemediationFunction().type()).isEqualTo(DebtRemediationFunction.Type.LINEAR);\n    assertThat(rule.debtRemediationFunction().coefficient()).isEqualTo(\"2h\");\n    assertThat(rule.debtRemediationFunction().offset()).isNull();\n    assertThat(rule.effortToFixDescription()).isEqualTo(\"Effort2\");\n  }","commit_id":"bfc542961446b8de587de32fd88de902123614d1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * Use-case:\n   * 1. start server\n   * 2. stop server\n   * 3. drop elasticsearch index: rm -rf data/es\n   * 4. start server -> db is up-to-date (no changes) but rules must be re-indexed\n   */\n  @Test\n  public void index_rules_even_if_no_changes() throws Exception {\n    Rules rules = new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x1\")\n          .setName(\"x1 name\")\n          .setHtmlDescription(\"x1 desc\");\n      }\n    };\n    register(rules);\n\n    // clear ES but keep db\n    TESTER.clearIndexes();\n    register(rules);\n\n    // verify that rules are indexed\n    Result<Rule> searchResult = index.search(new RuleQuery(), new QueryOptions());\n    searchResult = index.search(new RuleQuery().setKey(\"xoo:x1\"), new QueryOptions());\n    assertThat(searchResult.getTotal()).isEqualTo(1);\n    assertThat(searchResult.getHits()).hasSize(1);\n    assertThat(searchResult.getHits().get(0).key()).isEqualTo(RuleKey.of(\"xoo\", \"x1\"));\n  }","id":2384,"modified_method":"/**\n   * Use-case:\n   * 1. start server\n   * 2. stop server\n   * 3. drop elasticsearch index: rm -rf data/es\n   * 4. start server -> db is up-to-date (no changes) but rules must be re-indexed\n   */\n  @Test\n  public void index_rules_even_if_no_changes() throws Exception {\n    Rules rules = new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x1\")\n          .setName(\"x1 name\")\n          .setHtmlDescription(\"x1 desc\");\n      }\n    };\n    register(rules);\n\n    // clear ES but keep db\n    TESTER.clearIndexes();\n    register(rules);\n\n    // verify that rules are indexed\n    Result<Rule> searchResult = ruleIndex.search(new RuleQuery(), new QueryOptions());\n    searchResult = ruleIndex.search(new RuleQuery().setKey(\"xoo:x1\"), new QueryOptions());\n    assertThat(searchResult.getTotal()).isEqualTo(1);\n    assertThat(searchResult.getHits()).hasSize(1);\n    assertThat(searchResult.getHits().get(0).key()).isEqualTo(RuleKey.of(\"xoo\", \"x1\"));\n  }","commit_id":"bfc542961446b8de587de32fd88de902123614d1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void register_rules_at_startup() throws Exception {\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        RulesDefinition.NewRule x1Rule = repository.createRule(\"x1\")\n          .setName(\"x1 name\")\n          .setHtmlDescription(\"x1 desc\")\n          .setSeverity(Severity.MINOR)\n          .setEffortToFixDescription(\"x1 effort to fix\")\n          .setTags(\"tag1\");\n        x1Rule.createParam(\"acceptWhitespace\")\n          .setType(RuleParamType.BOOLEAN)\n          .setDefaultValue(\"false\")\n          .setDescription(\"Accept whitespaces on the line\");\n        x1Rule.createParam(\"min\")\n          .setType(RuleParamType.INTEGER);\n        x1Rule\n          .setDebtSubCharacteristic(RulesDefinition.SubCharacteristics.INTEGRATION_TESTABILITY)\n          .setDebtRemediationFunction(x1Rule.debtRemediationFunctions().linearWithOffset(\"1h\", \"30min\"));\n      }\n    });\n\n    // verify db\n    List<RuleDto> rules = db.ruleDao().findAll(dbSession);\n    assertThat(rules).hasSize(1);\n    assertThat(rules.get(0).getKey()).isEqualTo(RuleKey.of(\"xoo\", \"x1\"));\n    List<RuleParamDto> ruleParams = db.ruleDao().findAllRuleParams(dbSession);\n    assertThat(ruleParams).hasSize(2);\n\n    // verify es\n    Result<Rule> searchResult = index.search(new RuleQuery(), new QueryOptions());\n    assertThat(searchResult.getTotal()).isEqualTo(1);\n    assertThat(searchResult.getHits()).hasSize(1);\n    Rule rule = index.getByKey(RuleKey.of(\"xoo\", \"x1\"));\n    assertThat(rule.severity()).isEqualTo(Severity.MINOR);\n    assertThat(rule.name()).isEqualTo(\"x1 name\");\n    assertThat(rule.htmlDescription()).isEqualTo(\"x1 desc\");\n    assertThat(rule.systemTags()).contains(\"tag1\");\n    assertThat(rule.params()).hasSize(2);\n    assertThat(rule.param(\"acceptWhitespace\").type()).isEqualTo(RuleParamType.BOOLEAN);\n    assertThat(rule.param(\"acceptWhitespace\").defaultValue()).isEqualTo(\"false\");\n    assertThat(rule.param(\"acceptWhitespace\").description()).isEqualTo(\"Accept whitespaces on the line\");\n    assertThat(rule.param(\"min\").type()).isEqualTo(RuleParamType.INTEGER);\n    assertThat(rule.param(\"min\").defaultValue()).isNull();\n    assertThat(rule.param(\"min\").description()).isNull();\n    assertThat(rule.debtSubCharacteristicKey()).isEqualTo(RulesDefinition.SubCharacteristics.INTEGRATION_TESTABILITY);\n    assertThat(rule.debtRemediationFunction().type()).isEqualTo(DebtRemediationFunction.Type.LINEAR_OFFSET);\n    assertThat(rule.debtRemediationFunction().coefficient()).isEqualTo(\"1h\");\n    assertThat(rule.debtRemediationFunction().offset()).isEqualTo(\"30min\");\n    assertThat(rule.effortToFixDescription()).isEqualTo(\"x1 effort to fix\");\n  }","id":2385,"modified_method":"@Test\n  public void register_rules_at_startup() throws Exception {\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        RulesDefinition.NewRule x1Rule = repository.createRule(\"x1\")\n          .setName(\"x1 name\")\n          .setHtmlDescription(\"x1 desc\")\n          .setSeverity(Severity.MINOR)\n          .setEffortToFixDescription(\"x1 effort to fix\")\n          .setTags(\"tag1\");\n        x1Rule.createParam(\"acceptWhitespace\")\n          .setType(RuleParamType.BOOLEAN)\n          .setDefaultValue(\"false\")\n          .setDescription(\"Accept whitespaces on the line\");\n        x1Rule.createParam(\"min\")\n          .setType(RuleParamType.INTEGER);\n        x1Rule\n          .setDebtSubCharacteristic(RulesDefinition.SubCharacteristics.INTEGRATION_TESTABILITY)\n          .setDebtRemediationFunction(x1Rule.debtRemediationFunctions().linearWithOffset(\"1h\", \"30min\"));\n      }\n    });\n\n    // verify db\n    List<RuleDto> rules = db.ruleDao().findAll(dbSession);\n    assertThat(rules).hasSize(1);\n    assertThat(rules.get(0).getKey()).isEqualTo(RuleKey.of(\"xoo\", \"x1\"));\n    List<RuleParamDto> ruleParams = db.ruleDao().findAllRuleParams(dbSession);\n    assertThat(ruleParams).hasSize(2);\n\n    // verify es\n    Result<Rule> searchResult = ruleIndex.search(new RuleQuery(), new QueryOptions());\n    assertThat(searchResult.getTotal()).isEqualTo(1);\n    assertThat(searchResult.getHits()).hasSize(1);\n    Rule rule = ruleIndex.getByKey(RuleKey.of(\"xoo\", \"x1\"));\n    assertThat(rule.severity()).isEqualTo(Severity.MINOR);\n    assertThat(rule.name()).isEqualTo(\"x1 name\");\n    assertThat(rule.htmlDescription()).isEqualTo(\"x1 desc\");\n    assertThat(rule.systemTags()).contains(\"tag1\");\n    assertThat(rule.params()).hasSize(2);\n    assertThat(rule.param(\"acceptWhitespace\").type()).isEqualTo(RuleParamType.BOOLEAN);\n    assertThat(rule.param(\"acceptWhitespace\").defaultValue()).isEqualTo(\"false\");\n    assertThat(rule.param(\"acceptWhitespace\").description()).isEqualTo(\"Accept whitespaces on the line\");\n    assertThat(rule.param(\"min\").type()).isEqualTo(RuleParamType.INTEGER);\n    assertThat(rule.param(\"min\").defaultValue()).isNull();\n    assertThat(rule.param(\"min\").description()).isNull();\n    assertThat(rule.debtSubCharacteristicKey()).isEqualTo(RulesDefinition.SubCharacteristics.INTEGRATION_TESTABILITY);\n    assertThat(rule.debtRemediationFunction().type()).isEqualTo(DebtRemediationFunction.Type.LINEAR_OFFSET);\n    assertThat(rule.debtRemediationFunction().coefficient()).isEqualTo(\"1h\");\n    assertThat(rule.debtRemediationFunction().offset()).isEqualTo(\"30min\");\n    assertThat(rule.effortToFixDescription()).isEqualTo(\"x1 effort to fix\");\n  }","commit_id":"bfc542961446b8de587de32fd88de902123614d1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void deactivate_removed_rules_only_if_repository_still_exists() throws Exception {\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x1\").setName(\"x1 name\").setHtmlDescription(\"x1 desc\");\n      }\n    });\n\n    // Create a profile and activate rule\n    MockUserSession.set().setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN).setLogin(\"me\");\n\n    db.qualityProfileDao().insert(dbSession, QProfileTesting.newXooP1());\n    dbSession.commit();\n    dbSession.clearCache();\n    RuleActivation activation = new RuleActivation(RuleTesting.XOO_X1);\n    TESTER.get(QProfileService.class).activate(QProfileTesting.XOO_P1_KEY, activation);\n\n    // Restart, repo xoo still exists -> deactivate x1\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x2\").setName(\"x2 name\").setHtmlDescription(\"x2 desc\");\n      }\n    });\n    assertThat(db.ruleDao().getByKey(dbSession, RuleKey.of(\"xoo\", \"x1\")).getStatus()).isEqualTo(RuleStatus.REMOVED);\n    assertThat(db.ruleDao().getByKey(dbSession, RuleKey.of(\"xoo\", \"x2\")).getStatus()).isEqualTo(RuleStatus.READY);\n    assertThat(db.activeRuleDao().findByProfileKey(dbSession, QProfileTesting.XOO_P1_KEY)).hasSize(0);\n  }","id":2386,"modified_method":"@Test\n  public void deactivate_removed_rules_only_if_repository_still_exists() throws Exception {\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x1\").setName(\"x1 name\").setHtmlDescription(\"x1 desc\");\n      }\n    });\n\n    // Create a profile and activate rule\n    MockUserSession.set().setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN).setLogin(\"me\");\n    db.qualityProfileDao().insert(dbSession, QProfileTesting.newXooP1());\n    dbSession.commit();\n    dbSession.clearCache();\n    RuleActivation activation = new RuleActivation(RuleTesting.XOO_X1);\n    TESTER.get(QProfileService.class).activate(QProfileTesting.XOO_P1_KEY, activation);\n\n    // Restart, repo xoo still exists -> deactivate x1\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x2\").setName(\"x2 name\").setHtmlDescription(\"x2 desc\");\n      }\n    });\n    assertThat(ruleIndex.getByKey(RuleKey.of(\"xoo\", \"x1\")).status()).isEqualTo(RuleStatus.REMOVED);\n    assertThat(ruleIndex.getByKey(RuleKey.of(\"xoo\", \"x2\")).status()).isEqualTo(RuleStatus.READY);\n    assertThat(activeRuleIndex.findByProfile(QProfileTesting.XOO_P1_KEY)).hasSize(0);\n  }","commit_id":"bfc542961446b8de587de32fd88de902123614d1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void do_not_update_rules_if_no_changes() throws Exception {\n    Rules rules = new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x1\").setName(\"x1 name\").setHtmlDescription(\"x1 desc\");\n      }\n    };\n    register(rules);\n\n    // Store updated at date\n    Date updatedAt = index.getByKey(RuleTesting.XOO_X1).updatedAt();\n\n    // Re-execute startup tasks\n    register(rules);\n\n    // Verify rule has not been updated\n    Rule customRuleReloaded = index.getByKey(RuleTesting.XOO_X1);\n    assertThat(DateUtils.isSameInstant(customRuleReloaded.updatedAt(), updatedAt));\n  }","id":2387,"modified_method":"@Test\n  public void do_not_update_rules_if_no_changes() throws Exception {\n    Rules rules = new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x1\").setName(\"x1 name\").setHtmlDescription(\"x1 desc\");\n      }\n    };\n    register(rules);\n\n    // Store updated at date\n    Date updatedAt = ruleIndex.getByKey(RuleTesting.XOO_X1).updatedAt();\n\n    // Re-execute startup tasks\n    register(rules);\n\n    // Verify rule has not been updated\n    Rule customRuleReloaded = ruleIndex.getByKey(RuleTesting.XOO_X1);\n    assertThat(DateUtils.isSameInstant(customRuleReloaded.updatedAt(), updatedAt));\n  }","commit_id":"bfc542961446b8de587de32fd88de902123614d1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void remove_user_tags_that_are_newly_declared_as_system() {\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x1\").setName(\"x1 name\").setHtmlDescription(\"x1 desc\").setTags(\"tag1\");\n      }\n    });\n    Rule rule = index.getByKey(RuleTesting.XOO_X1);\n    assertThat(rule.systemTags()).containsOnly(\"tag1\");\n    assertThat(rule.tags()).isEmpty();\n\n    // User adds tag\n    TESTER.get(RuleUpdater.class).update(RuleUpdate.createForPluginRule(RuleTesting.XOO_X1).setTags(newHashSet(\"tag2\")), UserSession.get());\n    dbSession.clearCache();\n    rule = index.getByKey(RuleTesting.XOO_X1);\n    assertThat(rule.systemTags()).containsOnly(\"tag1\");\n    assertThat(rule.tags()).containsOnly(\"tag2\");\n\n    // Definition updated -> user tag \"tag2\" becomes a system tag\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x1\").setName(\"x1 name\").setHtmlDescription(\"x1 desc\").setTags(\"tag1\", \"tag2\");\n      }\n    });\n    rule = index.getByKey(RuleTesting.XOO_X1);\n    assertThat(rule.systemTags()).containsOnly(\"tag1\", \"tag2\");\n    assertThat(rule.tags()).isEmpty();\n  }","id":2388,"modified_method":"@Test\n  public void remove_user_tags_that_are_newly_declared_as_system() {\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x1\").setName(\"x1 name\").setHtmlDescription(\"x1 desc\").setTags(\"tag1\");\n      }\n    });\n    Rule rule = ruleIndex.getByKey(RuleTesting.XOO_X1);\n    assertThat(rule.systemTags()).containsOnly(\"tag1\");\n    assertThat(rule.tags()).isEmpty();\n\n    // User adds tag\n    TESTER.get(RuleUpdater.class).update(RuleUpdate.createForPluginRule(RuleTesting.XOO_X1).setTags(newHashSet(\"tag2\")), UserSession.get());\n    dbSession.clearCache();\n    rule = ruleIndex.getByKey(RuleTesting.XOO_X1);\n    assertThat(rule.systemTags()).containsOnly(\"tag1\");\n    assertThat(rule.tags()).containsOnly(\"tag2\");\n\n    // Definition updated -> user tag \"tag2\" becomes a system tag\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x1\").setName(\"x1 name\").setHtmlDescription(\"x1 desc\").setTags(\"tag1\", \"tag2\");\n      }\n    });\n    rule = ruleIndex.getByKey(RuleTesting.XOO_X1);\n    assertThat(rule.systemTags()).containsOnly(\"tag1\", \"tag2\");\n    assertThat(rule.tags()).isEmpty();\n  }","commit_id":"bfc542961446b8de587de32fd88de902123614d1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void do_not_deactivate_removed_rules_if_repository_accidentaly_uninstalled() throws Exception {\n    Rules rules = new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x1\").setName(\"x1 name\").setHtmlDescription(\"x1 desc\");\n      }\n    };\n    register(rules);\n\n    // create a profile and activate rule\n    MockUserSession.set().setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN).setLogin(\"me\");\n    db.qualityProfileDao().insert(dbSession, QProfileTesting.newXooP1());\n    dbSession.commit();\n    dbSession.clearCache();\n    RuleActivation activation = new RuleActivation(RuleTesting.XOO_X1);\n    TESTER.get(QProfileService.class).activate(QProfileTesting.XOO_P1_KEY, activation);\n\n    // Restart without xoo\n    register(null);\n    assertThat(db.ruleDao().getByKey(dbSession, RuleTesting.XOO_X1).getStatus()).isEqualTo(RuleStatus.REMOVED);\n    assertThat(db.activeRuleDao().findByProfileKey(dbSession, QProfileTesting.XOO_P1_KEY)).hasSize(1);\n\n    // Re-install\n    register(rules);\n    assertThat(db.ruleDao().getByKey(dbSession, RuleTesting.XOO_X1).getStatus()).isEqualTo(RuleStatus.READY);\n    assertThat(db.activeRuleDao().findByProfileKey(dbSession, QProfileTesting.XOO_P1_KEY)).hasSize(1);\n  }","id":2389,"modified_method":"@Test\n  public void do_not_deactivate_removed_rules_if_repository_accidentally_uninstalled() throws Exception {\n    Rules rules = new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"x1\").setName(\"x1 name\").setHtmlDescription(\"x1 desc\");\n      }\n    };\n    register(rules);\n\n    // create a profile and activate rule\n    MockUserSession.set().setGlobalPermissions(GlobalPermissions.QUALITY_PROFILE_ADMIN).setLogin(\"me\");\n    db.qualityProfileDao().insert(dbSession, QProfileTesting.newXooP1());\n    dbSession.commit();\n    dbSession.clearCache();\n    RuleActivation activation = new RuleActivation(RuleTesting.XOO_X1);\n    TESTER.get(QProfileService.class).activate(QProfileTesting.XOO_P1_KEY, activation);\n\n    // Restart without xoo\n    register(null);\n    assertThat(ruleIndex.getByKey(RuleTesting.XOO_X1).status()).isEqualTo(RuleStatus.REMOVED);\n    assertThat(activeRuleIndex.findByProfile(QProfileTesting.XOO_P1_KEY)).hasSize(1);\n\n    // Re-install\n    register(rules);\n    assertThat(ruleIndex.getByKey(RuleTesting.XOO_X1).status()).isEqualTo(RuleStatus.READY);\n    assertThat(activeRuleIndex.findByProfile(QProfileTesting.XOO_P1_KEY)).hasSize(1);\n  }","commit_id":"bfc542961446b8de587de32fd88de902123614d1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void update_custom_rule_on_template_change() throws Exception {\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"T1\")\n          .setName(\"template1 name\")\n          .setHtmlDescription(\"template1 desc\")\n          .setSeverity(Severity.MAJOR)\n          .setTemplate(true)\n          .createParam(\"format\")\n          .setDefaultValue(\"csv\")\n          .setType(RuleParamType.STRING)\n          .setDescription(\"format parameter\");\n      }\n    });\n    Rule template = index.getByKey(RuleKey.of(\"xoo\", \"T1\"));\n\n    // Create custom rule\n    RuleKey customRuleKey = TESTER.get(RuleCreator.class).create(NewRule.createForCustomRule(\"CUSTOM_RULE\", template.key())\n      .setName(\"My custom\")\n      .setHtmlDescription(\"Some description\")\n      .setSeverity(Severity.MAJOR)\n      .setStatus(RuleStatus.READY)\n      .setParameters(ImmutableMap.of(\"format\", \"txt\")));\n\n    // Update template and restart\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        RulesDefinition.NewRule rule = repository.createRule(\"T1\")\n          .setName(\"template1 name\")\n          .setHtmlDescription(\"template1 desc\")\n          .setSeverity(Severity.BLOCKER)\n          .setStatus(RuleStatus.BETA)\n          .setTemplate(true)\n          .setInternalKey(\"new_internal\");\n        rule\n          .setDebtSubCharacteristic(RulesDefinition.SubCharacteristics.INTEGRATION_TESTABILITY)\n          .setDebtRemediationFunction(rule.debtRemediationFunctions().linearWithOffset(\"1h\", \"30min\"))\n          .setEffortToFixDescription(\"Effort\");\n      }\n    });\n\n    // Verify custom rule has been restore from the template\n    Rule customRule = index.getByKey(customRuleKey);\n    assertThat(customRule.language()).isEqualTo(\"xoo\");\n    assertThat(customRule.internalKey()).isEqualTo(\"new_internal\");\n    assertThat(customRule.severity()).isEqualTo(Severity.BLOCKER);\n    assertThat(customRule.status()).isEqualTo(RuleStatus.BETA);\n    assertThat(customRule.debtSubCharacteristicKey()).isEqualTo(RulesDefinition.SubCharacteristics.INTEGRATION_TESTABILITY);\n    assertThat(customRule.debtRemediationFunction().type()).isEqualTo(DebtRemediationFunction.Type.LINEAR_OFFSET);\n    assertThat(customRule.effortToFixDescription()).isEqualTo(\"Effort\");\n  }","id":2390,"modified_method":"@Test\n  public void update_custom_rule_on_template_change() throws Exception {\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"T1\")\n          .setName(\"template1 name\")\n          .setHtmlDescription(\"template1 desc\")\n          .setSeverity(Severity.MAJOR)\n          .setTemplate(true)\n          .createParam(\"format\")\n          .setDefaultValue(\"csv\")\n          .setType(RuleParamType.STRING)\n          .setDescription(\"format parameter\");\n      }\n    });\n    Rule template = ruleIndex.getByKey(RuleKey.of(\"xoo\", \"T1\"));\n\n    // Create custom rule\n    RuleKey customRuleKey = TESTER.get(RuleCreator.class).create(NewRule.createForCustomRule(\"CUSTOM_RULE\", template.key())\n      .setName(\"My custom\")\n      .setHtmlDescription(\"Some description\")\n      .setSeverity(Severity.MAJOR)\n      .setStatus(RuleStatus.READY)\n      .setParameters(ImmutableMap.of(\"format\", \"txt\")));\n\n    // Update template and restart\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        RulesDefinition.NewRule rule = repository.createRule(\"T1\")\n          .setName(\"template1 name\")\n          .setHtmlDescription(\"template1 desc\")\n          .setSeverity(Severity.BLOCKER)\n          .setStatus(RuleStatus.BETA)\n          .setTemplate(true)\n          .setInternalKey(\"new_internal\");\n        rule\n          .setDebtSubCharacteristic(RulesDefinition.SubCharacteristics.INTEGRATION_TESTABILITY)\n          .setDebtRemediationFunction(rule.debtRemediationFunctions().linearWithOffset(\"1h\", \"30min\"))\n          .setEffortToFixDescription(\"Effort\");\n      }\n    });\n\n    // Verify custom rule has been restore from the template\n    Rule customRule = ruleIndex.getByKey(customRuleKey);\n    assertThat(customRule.language()).isEqualTo(\"xoo\");\n    assertThat(customRule.internalKey()).isEqualTo(\"new_internal\");\n    assertThat(customRule.severity()).isEqualTo(Severity.BLOCKER);\n    assertThat(customRule.status()).isEqualTo(RuleStatus.BETA);\n    assertThat(customRule.debtSubCharacteristicKey()).isEqualTo(RulesDefinition.SubCharacteristics.INTEGRATION_TESTABILITY);\n    assertThat(customRule.debtRemediationFunction().type()).isEqualTo(DebtRemediationFunction.Type.LINEAR_OFFSET);\n    assertThat(customRule.effortToFixDescription()).isEqualTo(\"Effort\");\n  }","commit_id":"bfc542961446b8de587de32fd88de902123614d1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void disable_custom_rules_if_template_disabled() {\n    Rules rules = new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"T1\")\n          .setName(\"template1 name\")\n          .setHtmlDescription(\"template1 desc\")\n          .setSeverity(Severity.MAJOR)\n          .setTemplate(true)\n          .createParam(\"format\")\n          .setDefaultValue(\"csv\")\n          .setType(RuleParamType.STRING)\n          .setDescription(\"format parameter\");\n      }\n    };\n    register(rules);\n    Rule templateRule = index.getByKey(RuleKey.of(\"xoo\", \"T1\"));\n\n    // Create custom rule\n    RuleKey customRuleKey = TESTER.get(RuleCreator.class).create(NewRule.createForCustomRule(\"CUSTOM_RULE\", templateRule.key())\n      .setName(\"My custom\")\n      .setHtmlDescription(\"Some description\")\n      .setSeverity(Severity.MAJOR)\n      .setStatus(RuleStatus.READY)\n      .setParameters(ImmutableMap.of(\"format\", \"txt\")));\n    assertThat(index.getByKey(customRuleKey).status()).isEqualTo(RuleStatus.READY);\n\n    // Restart without template\n    register(null);\n\n    // Verify custom rule is removed\n    assertThat(index.getByKey(templateRule.key()).status()).isEqualTo(RuleStatus.REMOVED);\n    assertThat(index.getByKey(customRuleKey).status()).isEqualTo(RuleStatus.REMOVED);\n\n    // Re-install template\n    register(rules);\n    assertThat(index.getByKey(templateRule.key()).status()).isEqualTo(RuleStatus.READY);\n    assertThat(index.getByKey(customRuleKey).status()).isEqualTo(RuleStatus.READY);\n  }","id":2391,"modified_method":"@Test\n  public void disable_custom_rules_if_template_disabled() {\n    Rules rules = new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"T1\")\n          .setName(\"template1 name\")\n          .setHtmlDescription(\"template1 desc\")\n          .setSeverity(Severity.MAJOR)\n          .setTemplate(true)\n          .createParam(\"format\")\n          .setDefaultValue(\"csv\")\n          .setType(RuleParamType.STRING)\n          .setDescription(\"format parameter\");\n      }\n    };\n    register(rules);\n    Rule templateRule = ruleIndex.getByKey(RuleKey.of(\"xoo\", \"T1\"));\n\n    // Create custom rule\n    RuleKey customRuleKey = TESTER.get(RuleCreator.class).create(NewRule.createForCustomRule(\"CUSTOM_RULE\", templateRule.key())\n      .setName(\"My custom\")\n      .setHtmlDescription(\"Some description\")\n      .setSeverity(Severity.MAJOR)\n      .setStatus(RuleStatus.READY)\n      .setParameters(ImmutableMap.of(\"format\", \"txt\")));\n    assertThat(ruleIndex.getByKey(customRuleKey).status()).isEqualTo(RuleStatus.READY);\n\n    // Restart without template\n    register(null);\n\n    // Verify custom rule is removed\n    assertThat(ruleIndex.getByKey(templateRule.key()).status()).isEqualTo(RuleStatus.REMOVED);\n    assertThat(ruleIndex.getByKey(customRuleKey).status()).isEqualTo(RuleStatus.REMOVED);\n\n    // Re-install template\n    register(rules);\n    assertThat(ruleIndex.getByKey(templateRule.key()).status()).isEqualTo(RuleStatus.READY);\n    assertThat(ruleIndex.getByKey(customRuleKey).status()).isEqualTo(RuleStatus.READY);\n  }","commit_id":"bfc542961446b8de587de32fd88de902123614d1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void register(@Nullable Rules rules) {\n    if (dbSession != null) {\n      dbSession.close();\n    }\n    RULE_DEFS.set(rules);\n    TESTER.get(Platform.class).executeStartupTasks();\n    db = TESTER.get(DbClient.class);\n    dbSession = TESTER.get(DbClient.class).openSession(false);\n    dbSession.clearCache();\n    index = TESTER.get(RuleIndex.class);\n  }","id":2392,"modified_method":"private void register(@Nullable Rules rules) {\n    if (dbSession != null) {\n      dbSession.close();\n    }\n    RULE_DEFS.set(rules);\n    TESTER.get(Platform.class).executeStartupTasks();\n    db = TESTER.get(DbClient.class);\n    dbSession = TESTER.get(DbClient.class).openSession(false);\n    dbSession.clearCache();\n    ruleIndex = TESTER.get(RuleIndex.class);\n  }","commit_id":"bfc542961446b8de587de32fd88de902123614d1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void do_not_update_custom_rule_params_from_template() throws Exception {\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"T1\")\n          .setName(\"template1 name\")\n          .setHtmlDescription(\"template1 desc\")\n          .setSeverity(Severity.MAJOR)\n          .setTemplate(true)\n          .createParam(\"format\")\n          .setDefaultValue(\"csv\")\n          .setType(RuleParamType.STRING)\n          .setDescription(\"format parameter\");\n      }\n    });\n    Rule templateRule = index.getByKey(RuleKey.of(\"xoo\", \"T1\"));\n\n    // Create custom rule\n    RuleKey customRuleKey = TESTER.get(RuleCreator.class).create(NewRule.createForCustomRule(\"CUSTOM_RULE\", templateRule.key())\n      .setName(\"My custom\")\n      .setHtmlDescription(\"Some description\")\n      .setSeverity(Severity.MAJOR)\n      .setStatus(RuleStatus.READY)\n      .setParameters(ImmutableMap.of(\"format\", \"txt\")));\n\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"T1\")\n          .setName(\"template1 name\")\n          .setHtmlDescription(\"template1 desc\")\n          .setSeverity(Severity.MAJOR)\n          .setTemplate(true)\n            // \"format\" removed, \"format2\" added\n          .createParam(\"format2\")\n          .setDefaultValue(\"csv\")\n          .setType(RuleParamType.STRING)\n          .setDescription(\"format parameter\");\n      }\n    });\n\n    // Verify custom rule param has not been changed!\n    Rule customRuleReloaded = index.getByKey(customRuleKey);\n    assertThat(customRuleReloaded.params().get(0).key()).isEqualTo(\"format\");\n  }","id":2393,"modified_method":"@Test\n  public void do_not_update_custom_rule_params_from_template() throws Exception {\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"T1\")\n          .setName(\"template1 name\")\n          .setHtmlDescription(\"template1 desc\")\n          .setSeverity(Severity.MAJOR)\n          .setTemplate(true)\n          .createParam(\"format\")\n          .setDefaultValue(\"csv\")\n          .setType(RuleParamType.STRING)\n          .setDescription(\"format parameter\");\n      }\n    });\n    Rule templateRule = ruleIndex.getByKey(RuleKey.of(\"xoo\", \"T1\"));\n\n    // Create custom rule\n    RuleKey customRuleKey = TESTER.get(RuleCreator.class).create(NewRule.createForCustomRule(\"CUSTOM_RULE\", templateRule.key())\n      .setName(\"My custom\")\n      .setHtmlDescription(\"Some description\")\n      .setSeverity(Severity.MAJOR)\n      .setStatus(RuleStatus.READY)\n      .setParameters(ImmutableMap.of(\"format\", \"txt\")));\n\n    register(new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"T1\")\n          .setName(\"template1 name\")\n          .setHtmlDescription(\"template1 desc\")\n          .setSeverity(Severity.MAJOR)\n          .setTemplate(true)\n          // \"format\" removed, \"format2\" added\n          .createParam(\"format2\")\n          .setDefaultValue(\"csv\")\n          .setType(RuleParamType.STRING)\n          .setDescription(\"format parameter\");\n      }\n    });\n\n    // Verify custom rule param has not been changed!\n    Rule customRuleReloaded = ruleIndex.getByKey(customRuleKey);\n    assertThat(customRuleReloaded.params().get(0).key()).isEqualTo(\"format\");\n  }","commit_id":"bfc542961446b8de587de32fd88de902123614d1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void before() {\n    TESTER.clearDbAndIndexes();\n    db = TESTER.get(DbClient.class);\n    dbSession = TESTER.get(DbClient.class).openSession(false);\n    dbSession.clearCache();\n    index = TESTER.get(RuleIndex.class);\n  }","id":2394,"modified_method":"@Before\n  public void before() {\n    TESTER.clearDbAndIndexes();\n    db = TESTER.get(DbClient.class);\n    dbSession = TESTER.get(DbClient.class).openSession(false);\n    dbSession.clearCache();\n    ruleIndex = TESTER.get(RuleIndex.class);\n    activeRuleIndex = TESTER.get(ActiveRuleIndex.class);\n  }","commit_id":"bfc542961446b8de587de32fd88de902123614d1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void do_not_update_custom_rule_if_no_template_change() throws Exception {\n    Rules rules = new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"T1\")\n          .setName(\"template1 name\")\n          .setHtmlDescription(\"template1 desc\")\n          .setSeverity(Severity.MAJOR)\n          .setTemplate(true)\n          .createParam(\"format\")\n          .setDefaultValue(\"csv\")\n          .setType(RuleParamType.STRING)\n          .setDescription(\"format parameter\");\n      }\n    };\n    register(rules);\n    Rule template = index.getByKey(RuleKey.of(\"xoo\", \"T1\"));\n\n    // Create custom rule\n    RuleKey customRuleKey = TESTER.get(RuleCreator.class).create(NewRule.createForCustomRule(\"CUSTOM_RULE\", template.key())\n      .setName(\"My custom\")\n      .setHtmlDescription(\"Some description\")\n      .setSeverity(Severity.MAJOR)\n      .setStatus(RuleStatus.READY)\n      .setParameters(ImmutableMap.of(\"format\", \"txt\")));\n\n    Date updatedAt = index.getByKey(customRuleKey).updatedAt();\n\n    register(rules);\n\n    // Verify custom rule has been restore from the template\n    Rule customRuleReloaded = index.getByKey(customRuleKey);\n    assertThat(customRuleReloaded.updatedAt()).isEqualTo(updatedAt);\n  }","id":2395,"modified_method":"@Test\n  public void do_not_update_custom_rule_if_no_template_change() throws Exception {\n    Rules rules = new Rules() {\n      @Override\n      public void init(RulesDefinition.NewRepository repository) {\n        repository.createRule(\"T1\")\n          .setName(\"template1 name\")\n          .setHtmlDescription(\"template1 desc\")\n          .setSeverity(Severity.MAJOR)\n          .setTemplate(true)\n          .createParam(\"format\")\n          .setDefaultValue(\"csv\")\n          .setType(RuleParamType.STRING)\n          .setDescription(\"format parameter\");\n      }\n    };\n    register(rules);\n    Rule template = ruleIndex.getByKey(RuleKey.of(\"xoo\", \"T1\"));\n\n    // Create custom rule\n    RuleKey customRuleKey = TESTER.get(RuleCreator.class).create(NewRule.createForCustomRule(\"CUSTOM_RULE\", template.key())\n      .setName(\"My custom\")\n      .setHtmlDescription(\"Some description\")\n      .setSeverity(Severity.MAJOR)\n      .setStatus(RuleStatus.READY)\n      .setParameters(ImmutableMap.of(\"format\", \"txt\")));\n\n    Date updatedAt = ruleIndex.getByKey(customRuleKey).updatedAt();\n\n    register(rules);\n\n    // Verify custom rule has been restore from the template\n    Rule customRuleReloaded = ruleIndex.getByKey(customRuleKey);\n    assertThat(customRuleReloaded.updatedAt()).isEqualTo(updatedAt);\n  }","commit_id":"bfc542961446b8de587de32fd88de902123614d1","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void recordProjectEnded(ExecutionEvent event, Result result) {\n            MavenBuildProxy2 mavenBuildProxy2 = getMavenBuildProxy2( event.getProject() );\n            mavenBuildProxy2.setResult(result);\n\n            List<MavenReporter> mavenReporters = getMavenReporters( event.getProject() );\n\n            if ( mavenReporters != null ) {\n                for ( MavenReporter mavenReporter : mavenReporters ) {\n                    try {\n                        mavenReporter.leaveModule( mavenBuildProxy2, event.getProject(), maven3Builder.listener);\n                    } catch ( InterruptedException e ) {\n                        e.printStackTrace();\n                    } catch ( IOException e ) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n\n            if ( mavenReporters != null ) {\n                for ( MavenReporter mavenReporter : mavenReporters ) {\n                    try {\n                        mavenReporter.postBuild( mavenBuildProxy2, event.getProject(), maven3Builder.listener);\n                    } catch ( InterruptedException e ) {\n                        e.printStackTrace();\n                    } catch ( IOException e ) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n\n            mavenBuildProxy2.end();\n        }","id":2396,"modified_method":"private void recordProjectEnded(ExecutionEvent event, Result result) {\n            MavenBuildProxy2 mavenBuildProxy2 = getMavenBuildProxy2( event.getProject() );\n            mavenBuildProxy2.setResult(result);\n\n            List<MavenReporter> mavenReporters = getMavenReporters( event.getProject() );\n\n            for ( MavenReporter mavenReporter : fixNull(mavenReporters)) {\n                try {\n                    mavenReporter.leaveModule( mavenBuildProxy2, event.getProject(), maven3Builder.listener);\n                } catch ( InterruptedException e ) {\n                    e.printStackTrace();\n                } catch ( IOException e ) {\n                    e.printStackTrace();\n                }\n            }\n\n            mavenBuildProxy2.end();\n        }","commit_id":"1803f9da84bd3c7c487a7cbbf0004fe183fc842c","url":"https://github.com/kohsuke/hudson"},{"original_method":"/**\n         * @see org.apache.maven.execution.ExecutionListener#sessionStarted(org.apache.maven.execution.ExecutionEvent)\n         */\n        public void sessionStarted( ExecutionEvent event ) {\n            this.eventLogger.sessionStarted( event );\n            \n            // set all modules which are not actually being build (in incremental builds) to NOT_BUILD\n            // JENKINS-9072\n            List<MavenProject> projects = event.getSession().getProjects();\n            debug(\"Projects to build: \" + projects);\n            Set<ModuleName> buildingProjects = new HashSet<ModuleName>();\n            for (MavenProject p : projects) {\n                buildingProjects.add(new ModuleName(p));\n            }\n            \n            for (Entry<ModuleName,FilterImpl> e : this.proxies.entrySet()) {\n                if (! buildingProjects.contains(e.getKey())) {\n                    //maven3Builder.listener.getLogger().println(\"Project \" + e.getKey() + \" needs not be build\");\n                    MavenBuildProxy2 proxy = e.getValue();\n                    proxy.start();\n                    proxy.setResult(Result.NOT_BUILT);\n                    proxy.end();\n                }\n            }\n        }","id":2397,"modified_method":"/**\n         * @see org.apache.maven.execution.ExecutionListener#sessionStarted(org.apache.maven.execution.ExecutionEvent)\n         */\n        public void sessionStarted( ExecutionEvent event ) {\n            this.eventLogger.sessionStarted(event);\n            \n            Map<ModuleName, MavenProject> buildingProjects = getSessionProjects(event);\n            \n            for (Entry<ModuleName,FilterImpl> e : this.proxies.entrySet()) {\n                MavenProject project = buildingProjects.get(e.getKey());\n                if (project!=null) {\n                    //maven3Builder.listener.getLogger().println(\"Project \" + e.getKey() + \" needs not be build\");\n\n                    // set all modules which are not actually being build (in incremental builds) to NOT_BUILD (JENKINS-9072)\n                    // TODO: this is an abuse of abstraction\n                    MavenBuildProxy2 proxy = e.getValue();\n                    proxy.start();\n                    proxy.setResult(Result.NOT_BUILT);\n                    proxy.end();\n\n                    for (MavenReporter mavenReporter : fixNull(reporters.get(e.getKey()))) {\n                        try {\n                            mavenReporter.preBuild( e.getValue() ,project, maven3Builder.listener);\n                        } catch ( InterruptedException x ) {\n                            x.printStackTrace();\n                        } catch ( IOException x ) {\n                            x.printStackTrace();\n                        }\n                    }\n                }\n            }\n        }","commit_id":"1803f9da84bd3c7c487a7cbbf0004fe183fc842c","url":"https://github.com/kohsuke/hudson"},{"original_method":"/**\n         * @see org.apache.maven.execution.ExecutionListener#sessionEnded(org.apache.maven.execution.ExecutionEvent)\n         */\n        public void sessionEnded( ExecutionEvent event )  {\n            debug( \"sessionEnded\" );\n            this.eventLogger.sessionEnded( event );\n        }","id":2398,"modified_method":"/**\n         * @see org.apache.maven.execution.ExecutionListener#sessionEnded(org.apache.maven.execution.ExecutionEvent)\n         */\n        public void sessionEnded( ExecutionEvent event )  {\n            debug( \"sessionEnded\" );\n            this.eventLogger.sessionEnded( event );\n\n            Map<ModuleName, MavenProject> buildingProjects = getSessionProjects(event);\n\n            for (Entry<ModuleName,FilterImpl> e : fixNull(this.proxies.entrySet())) {\n                MavenProject project = buildingProjects.get(e.getKey());\n                if (project!=null) {\n                    for (MavenReporter mavenReporter : reporters.get(e.getKey())) {\n                        try {\n                            mavenReporter.postBuild( e.getValue() ,project, maven3Builder.listener);\n                        } catch ( InterruptedException x ) {\n                            x.printStackTrace();\n                        } catch ( IOException x ) {\n                            x.printStackTrace();\n                        }\n                    }\n                }\n            }\n        }","commit_id":"1803f9da84bd3c7c487a7cbbf0004fe183fc842c","url":"https://github.com/kohsuke/hudson"},{"original_method":"private void recordMojoStarted(ExecutionEvent event) {\n            initMojoStartTime( event.getProject() );\n            \n            MavenProject mavenProject = event.getProject();\n            MojoInfo mojoInfo = new MojoInfo(event);\n\n            List<MavenReporter> mavenReporters = getMavenReporters( mavenProject );                \n            \n            MavenBuildProxy2 mavenBuildProxy2 = getMavenBuildProxy2( mavenProject );\n            \n            if (mavenReporters != null) {\n                for (MavenReporter mavenReporter : mavenReporters) {\n                    try {\n                        mavenReporter.preExecute( mavenBuildProxy2, mavenProject, mojoInfo, maven3Builder.listener);\n                    } catch ( InterruptedException e ) {\n                        e.printStackTrace();\n                    } catch ( IOException e ) {\n                        e.printStackTrace();\n                    }\n                }\n            }            \n        }","id":2399,"modified_method":"private void recordMojoStarted(ExecutionEvent event) {\n            initMojoStartTime( event.getProject() );\n            \n            MavenProject mavenProject = event.getProject();\n            MojoInfo mojoInfo = new MojoInfo(event);\n\n            List<MavenReporter> mavenReporters = getMavenReporters( mavenProject );                \n            \n            MavenBuildProxy2 mavenBuildProxy2 = getMavenBuildProxy2( mavenProject );\n            \n            for (MavenReporter mavenReporter : fixNull(mavenReporters)) {\n                try {\n                    mavenReporter.preExecute( mavenBuildProxy2, mavenProject, mojoInfo, maven3Builder.listener);\n                } catch ( InterruptedException e ) {\n                    e.printStackTrace();\n                } catch ( IOException e ) {\n                    e.printStackTrace();\n                }\n            }\n        }","commit_id":"1803f9da84bd3c7c487a7cbbf0004fe183fc842c","url":"https://github.com/kohsuke/hudson"},{"original_method":"private void recordMojoEnded(ExecutionEvent event) {\n            MavenProject mavenProject = event.getProject();\n            MojoInfo mojoInfo = new MojoInfo(event);\n\n            recordExecutionTime(event,mojoInfo);\n\n            List<MavenReporter> mavenReporters = getMavenReporters( mavenProject );                \n            \n            MavenBuildProxy2 mavenBuildProxy2 = getMavenBuildProxy2( mavenProject );\n            \n            mavenBuildProxy2.setExecutedMojos( this.executedMojosPerModule.get( new ModuleName(event) ) );\n            \n            if (mavenReporters != null) {\n                for (MavenReporter mavenReporter : mavenReporters) {\n                    try {\n                        mavenReporter.postExecute( mavenBuildProxy2, mavenProject, mojoInfo, maven3Builder.listener, getExecutionException(event));\n                    } catch ( InterruptedException e ) {\n                        e.printStackTrace();\n                    } catch ( IOException e ) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }","id":2400,"modified_method":"private void recordMojoEnded(ExecutionEvent event) {\n            MavenProject mavenProject = event.getProject();\n            MojoInfo mojoInfo = new MojoInfo(event);\n\n            recordExecutionTime(event,mojoInfo);\n\n            List<MavenReporter> mavenReporters = getMavenReporters( mavenProject );                \n            \n            MavenBuildProxy2 mavenBuildProxy2 = getMavenBuildProxy2( mavenProject );\n            \n            mavenBuildProxy2.setExecutedMojos( this.executedMojosPerModule.get( new ModuleName(event) ) );\n            \n            for (MavenReporter mavenReporter : fixNull(mavenReporters)) {\n                try {\n                    mavenReporter.postExecute( mavenBuildProxy2, mavenProject, mojoInfo, maven3Builder.listener, getExecutionException(event));\n                } catch ( InterruptedException e ) {\n                    e.printStackTrace();\n                } catch ( IOException e ) {\n                    e.printStackTrace();\n                }\n            }\n        }","commit_id":"1803f9da84bd3c7c487a7cbbf0004fe183fc842c","url":"https://github.com/kohsuke/hudson"},{"original_method":"private void recordProjectStarted(ExecutionEvent event) {\n            MavenProject mavenProject = event.getProject();\n            List<MavenReporter> mavenReporters = getMavenReporters( mavenProject );                \n            \n            MavenBuildProxy2 mavenBuildProxy2 = getMavenBuildProxy2( mavenProject );\n            mavenBuildProxy2.start();\n            \n            \n            if (mavenReporters != null) {\n                for (MavenReporter mavenReporter : mavenReporters) {\n                    try {\n                        mavenReporter.enterModule( mavenBuildProxy2 ,mavenProject, maven3Builder.listener);\n                    } catch ( InterruptedException e ) {\n                        e.printStackTrace();\n                    } catch ( IOException e ) {\n                        e.printStackTrace();\n                    }\n                }\n            }            \n            \n            if (mavenReporters != null) {\n                for (MavenReporter mavenReporter : mavenReporters) {\n                    try {\n                        mavenReporter.preBuild( mavenBuildProxy2 ,mavenProject, maven3Builder.listener);\n                    } catch ( InterruptedException e ) {\n                        e.printStackTrace();\n                    } catch ( IOException e ) {\n                        e.printStackTrace();\n                    }\n                }\n            }             \n            \n        }","id":2401,"modified_method":"private void recordProjectStarted(ExecutionEvent event) {\n            MavenProject mavenProject = event.getProject();\n            List<MavenReporter> mavenReporters = getMavenReporters( mavenProject );                \n            \n            MavenBuildProxy2 mavenBuildProxy2 = getMavenBuildProxy2( mavenProject );\n            mavenBuildProxy2.start();\n            \n            \n            for (MavenReporter mavenReporter : fixNull(mavenReporters)) {\n                try {\n                    mavenReporter.enterModule( mavenBuildProxy2 ,mavenProject, maven3Builder.listener);\n                } catch ( InterruptedException e ) {\n                    e.printStackTrace();\n                } catch ( IOException e ) {\n                    e.printStackTrace();\n                }\n            }\n        }","commit_id":"1803f9da84bd3c7c487a7cbbf0004fe183fc842c","url":"https://github.com/kohsuke/hudson"},{"original_method":"public void testDeployWorkflowDefinition() throws Exception {\n\n\t\t// Test Workflow Definition 1\n\n\t\t_workflowDefinition1_1 =\n\t\t\tWorkflowDefinitionManagerUtil.deployWorkflowDefinition(\n\t\t\t\tuser.getUserId(), DEFINITION_NAME_1,\n\t\t\t\tnew ByteArrayInputStream(definitionBytes1));\n\n\t\t_workflowDefinition1_2 =\n\t\t\tWorkflowDefinitionManagerUtil.deployWorkflowDefinition(\n\t\t\t\tuser.getUserId(), DEFINITION_NAME_1,\n\t\t\t\tnew ByteArrayInputStream(definitionBytes1));\n\n\t\t_workflowDefinition1_3 =\n\t\t\tWorkflowDefinitionManagerUtil.deployWorkflowDefinition(\n\t\t\t\tuser.getUserId(), DEFINITION_NAME_1,\n\t\t\t\tnew ByteArrayInputStream(definitionBytes1));\n\n\t\t// Test Workflow Definition 2\n\n\t\t_workflowDefinition2_1 =\n\t\t\tWorkflowDefinitionManagerUtil.deployWorkflowDefinition(\n\t\t\t\tuser.getUserId(), DEFINITION_NAME_2,\n\t\t\t\tnew ByteArrayInputStream(definitionBytes2));\n\n\t\t_workflowDefinition2_2 =\n\t\t\tWorkflowDefinitionManagerUtil.deployWorkflowDefinition(\n\t\t\t\tuser.getUserId(), DEFINITION_NAME_2,\n\t\t\t\tnew ByteArrayInputStream(definitionBytes2));\n\n\t\t// Test Workflow Definition 3\n\n\t\t_workflowDefinition3_1 =\n\t\t\tWorkflowDefinitionManagerUtil.deployWorkflowDefinition(\n\t\t\t\tuser.getUserId(), DEFINITION_NAME_3,\n\t\t\t\tnew ByteArrayInputStream(definitionBytes3));\n\t}","id":2402,"modified_method":"public void testDeployWorkflowDefinition() throws Exception {\n\n\t\t// Workflow definition 1\n\n\t\t_workflowDefinition1_1 =\n\t\t\tWorkflowDefinitionManagerUtil.deployWorkflowDefinition(\n\t\t\t\tdefaultUserId, DEFINITION_NAME_1,\n\t\t\t\tnew ByteArrayInputStream(definitionBytes1));\n\n\t\t_workflowDefinition1_2 =\n\t\t\tWorkflowDefinitionManagerUtil.deployWorkflowDefinition(\n\t\t\t\tdefaultUserId, DEFINITION_NAME_1,\n\t\t\t\tnew ByteArrayInputStream(definitionBytes1));\n\n\t\t_workflowDefinition1_3 =\n\t\t\tWorkflowDefinitionManagerUtil.deployWorkflowDefinition(\n\t\t\t\tdefaultUserId, DEFINITION_NAME_1,\n\t\t\t\tnew ByteArrayInputStream(definitionBytes1));\n\n\t\t// Workflow definition 2\n\n\t\t_workflowDefinition2_1 =\n\t\t\tWorkflowDefinitionManagerUtil.deployWorkflowDefinition(\n\t\t\t\tdefaultUserId, DEFINITION_NAME_2,\n\t\t\t\tnew ByteArrayInputStream(definitionBytes2));\n\n\t\t_workflowDefinition2_2 =\n\t\t\tWorkflowDefinitionManagerUtil.deployWorkflowDefinition(\n\t\t\t\tdefaultUserId, DEFINITION_NAME_2,\n\t\t\t\tnew ByteArrayInputStream(definitionBytes2));\n\n\t\t// Workflow definition 3\n\n\t\t_workflowDefinition3_1 =\n\t\t\tWorkflowDefinitionManagerUtil.deployWorkflowDefinition(\n\t\t\t\tdefaultUserId, DEFINITION_NAME_3,\n\t\t\t\tnew ByteArrayInputStream(definitionBytes3));\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void testUndeployWorkflowDefinition() throws Exception {\n\n\t\t// Test Workflow Definition 1\n\n\t\tWorkflowDefinitionManagerUtil.undeployWorkflowDefinition(\n\t\t\tuser.getUserId(), _workflowDefinition1_1.getName(),\n\t\t\t_workflowDefinition1_1.getVersion());\n\n\t\tWorkflowDefinitionManagerUtil.undeployWorkflowDefinition(\n\t\t\tuser.getUserId(), _workflowDefinition1_2.getName(),\n\t\t\t_workflowDefinition1_2.getVersion());\n\n\t\tWorkflowDefinitionManagerUtil.undeployWorkflowDefinition(\n\t\t\tuser.getUserId(), _workflowDefinition1_3.getName(),\n\t\t\t_workflowDefinition1_3.getVersion());\n\n\t\t// Test Workflow Definition 2\n\n\t\tWorkflowDefinitionManagerUtil.undeployWorkflowDefinition(\n\t\t\tuser.getUserId(), _workflowDefinition2_1.getName(),\n\t\t\t_workflowDefinition2_1.getVersion());\n\n\t\tWorkflowDefinitionManagerUtil.undeployWorkflowDefinition(\n\t\t\tuser.getUserId(), _workflowDefinition2_2.getName(),\n\t\t\t_workflowDefinition2_2.getVersion());\n\n\t\t// Test Workflow Definition 3\n\n\t\tWorkflowDefinitionManagerUtil.undeployWorkflowDefinition(\n\t\t\tuser.getUserId(), _workflowDefinition3_1.getName(),\n\t\t\t_workflowDefinition3_1.getVersion());\n\n\t\tint count = WorkflowDefinitionManagerUtil.getWorkflowDefinitionCount();\n\n\t\tassertEquals(0, count);\n\t}","id":2403,"modified_method":"public void testUndeployWorkflowDefinition() throws Exception {\n\n\t\t// Workflow definition 1\n\n\t\tWorkflowDefinitionManagerUtil.undeployWorkflowDefinition(\n\t\t\tdefaultUserId, _workflowDefinition1_1.getName(),\n\t\t\t_workflowDefinition1_1.getVersion());\n\n\t\tWorkflowDefinitionManagerUtil.undeployWorkflowDefinition(\n\t\t\tdefaultUserId, _workflowDefinition1_2.getName(),\n\t\t\t_workflowDefinition1_2.getVersion());\n\n\t\tWorkflowDefinitionManagerUtil.undeployWorkflowDefinition(\n\t\t\tdefaultUserId, _workflowDefinition1_3.getName(),\n\t\t\t_workflowDefinition1_3.getVersion());\n\n\t\t// Workflow definition 2\n\n\t\tWorkflowDefinitionManagerUtil.undeployWorkflowDefinition(\n\t\t\tdefaultUserId, _workflowDefinition2_1.getName(),\n\t\t\t_workflowDefinition2_1.getVersion());\n\n\t\tWorkflowDefinitionManagerUtil.undeployWorkflowDefinition(\n\t\t\tdefaultUserId, _workflowDefinition2_2.getName(),\n\t\t\t_workflowDefinition2_2.getVersion());\n\n\t\t// Workflow definition 3\n\n\t\tWorkflowDefinitionManagerUtil.undeployWorkflowDefinition(\n\t\t\tdefaultUserId, _workflowDefinition3_1.getName(),\n\t\t\t_workflowDefinition3_1.getVersion());\n\n\t\tint count = WorkflowDefinitionManagerUtil.getWorkflowDefinitionCount();\n\n\t\tassertEquals(0, count);\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void tearDown() throws Exception {\n\t\tWorkflowDefinitionManagerUtil.undeployWorkflowDefinition(\n\t\t\tuser.getUserId(), DEFINITION_NAME_1,\n\t\t\t_workflowDefinition1.getVersion());\n\t\tWorkflowDefinitionManagerUtil.undeployWorkflowDefinition(\n\t\t\tuser.getUserId(), DEFINITION_NAME_2,\n\t\t\t_workflowDefinition2.getVersion());\n\t\tWorkflowDefinitionManagerUtil.undeployWorkflowDefinition(\n\t\t\tuser.getUserId(), DEFINITION_NAME_3,\n\t\t\t_workflowDefinition3.getVersion());\n\t\tWorkflowDefinitionManagerUtil.undeployWorkflowDefinition(\n\t\t\tuser.getUserId(), DEFINITION_NAME_4,\n\t\t\t_workflowDefinition4.getVersion());\n\t}","id":2404,"modified_method":"public void tearDown() throws Exception {\n\t\tsuper.tearDown();\n\n\t\tWorkflowDefinitionManagerUtil.undeployWorkflowDefinition(\n\t\t\tdefaultUserId, DEFINITION_NAME_1,\n\t\t\t_workflowDefinition1.getVersion());\n\n\t\tWorkflowDefinitionManagerUtil.undeployWorkflowDefinition(\n\t\t\tdefaultUserId, DEFINITION_NAME_2,\n\t\t\t_workflowDefinition2.getVersion());\n\n\t\tWorkflowDefinitionManagerUtil.undeployWorkflowDefinition(\n\t\t\tdefaultUserId, DEFINITION_NAME_3,\n\t\t\t_workflowDefinition3.getVersion());\n\n\t\tWorkflowDefinitionManagerUtil.undeployWorkflowDefinition(\n\t\t\tdefaultUserId, DEFINITION_NAME_4,\n\t\t\t_workflowDefinition4.getVersion());\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void testUpdateContext() throws Exception {\n\n\t\t// Prepare\n\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition1.getName(),\n\t\t\t\t_workflowDefinition1.getVersion(), null, null);\n\n\t\tMap<String, Object> context = workflowInstance.getContext();\n\t\tassertNotNull(context);\n\t\tassertEquals(1, context.size());\n\t\tassertEquals(\"success\", context.get(\"javaNode11\"));\n\t\tString testKey = \"testKey\";\n\t\tString testValue1 = \"testValue1\";\n\t\tString testValue2 = \"testValue2\";\n\t\tMap<String, Object> updateContext = new HashMap<String, Object>();\n\t\tupdateContext.put(testKey, testValue1);\n\n\t\t// Add new variable\n\n\t\tworkflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.updateContext(\n\t\t\t\tworkflowInstance.getWorkflowInstanceId(), updateContext);\n\n\t\tcontext = workflowInstance.getContext();\n\t\tassertNotNull(context);\n\t\tassertEquals(2, context.size());\n\t\tassertEquals(\"success\", context.get(\"javaNode11\"));\n\t\tassertEquals(testValue1, context.get(testKey));\n\n\t\tupdateContext = new HashMap<String, Object>();\n\t\tupdateContext.put(testKey, testValue2);\n\n\t\t// Change exist variable\n\n\t\tworkflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.updateContext(\n\t\t\t\tworkflowInstance.getWorkflowInstanceId(), updateContext);\n\n\t\tcontext = workflowInstance.getContext();\n\t\tassertNotNull(context);\n\t\tassertEquals(2, context.size());\n\t\tassertEquals(\"success\", context.get(\"javaNode11\"));\n\t\tassertEquals(testValue2, context.get(testKey));\n\n\t\t// Clean up\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","id":2405,"modified_method":"public void testUpdateContext() throws Exception {\n\n\t\t// Prepare\n\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, _workflowDefinition1.getName(),\n\t\t\t\t_workflowDefinition1.getVersion(), null, null);\n\n\t\tMap<String, Object> context = workflowInstance.getContext();\n\n\t\tassertNotNull(context);\n\t\tassertEquals(1, context.size());\n\t\tassertEquals(\"success\", context.get(\"javaNode11\"));\n\n\t\tString testKey = \"testKey\";\n\t\tString testValue1 = \"testValue1\";\n\t\tString testValue2 = \"testValue2\";\n\n\t\tMap<String, Object> updateContext = new HashMap<String, Object>();\n\n\t\tupdateContext.put(testKey, testValue1);\n\n\t\t// Add new variable\n\n\t\tworkflowInstance = WorkflowInstanceManagerUtil.updateContext(\n\t\t\tworkflowInstance.getWorkflowInstanceId(), updateContext);\n\n\t\tcontext = workflowInstance.getContext();\n\n\t\tassertNotNull(context);\n\t\tassertEquals(2, context.size());\n\t\tassertEquals(\"success\", context.get(\"javaNode11\"));\n\t\tassertEquals(testValue1, context.get(testKey));\n\n\t\tupdateContext = new HashMap<String, Object>();\n\n\t\tupdateContext.put(testKey, testValue2);\n\n\t\t// Update variable\n\n\t\tworkflowInstance = WorkflowInstanceManagerUtil.updateContext(\n\t\t\tworkflowInstance.getWorkflowInstanceId(), updateContext);\n\n\t\tcontext = workflowInstance.getContext();\n\n\t\tassertNotNull(context);\n\t\tassertEquals(2, context.size());\n\t\tassertEquals(\"success\", context.get(\"javaNode11\"));\n\t\tassertEquals(testValue2, context.get(testKey));\n\n\t\t// Clean up\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void testStartWorkflowInstance() throws Exception {\n\n\t\t// Workflow Instance 1\n\n\t\tWorkflowInstance workflowInstance1 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition1.getName(),\n\t\t\t\t_workflowDefinition1.getVersion(), null, null);\n\n\t\tassertNotNull(workflowInstance1);\n\t\tassertEquals(0, workflowInstance1.getChildren().size());\n\t\tMap<String, Object> context1 = workflowInstance1.getContext();\n\t\tassertNotNull(context1);\n\t\tassertEquals(1, context1.size());\n\t\tassertEquals(\"success\", context1.get(\"javaNode11\"));\n\t\tassertEquals(\"State1-1\", workflowInstance1.getCurrentNodeName());\n\t\tassertNull(workflowInstance1.getEndDate());\n\t\tassertNull(workflowInstance1.getParent());\n\t\tassertNotNull(workflowInstance1.getStartDate());\n\t\tassertEquals(\n\t\t\tDEFINITION_NAME_1, workflowInstance1.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition1.getVersion(),\n\t\t\tworkflowInstance1.getWorkflowDefinitionVersion());\n\n\t\t// Workflow Instance 2\n\n\t\tWorkflowInstance workflowInstance2 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition2.getName(),\n\t\t\t\t_workflowDefinition2.getVersion(), null, null);\n\n\t\tassertNotNull(workflowInstance2);\n\t\tassertEquals(0, workflowInstance2.getChildren().size());\n\t\tMap<String, Object> context2 = workflowInstance2.getContext();\n\t\tassertNotNull(context2);\n\t\tassertEquals(1, context2.size());\n\t\tassertEquals(\"success\", context2.get(\"javaNode21\"));\n\t\tassertEquals(\"taskNode3\", workflowInstance2.getCurrentNodeName());\n\t\tassertNull(workflowInstance2.getEndDate());\n\t\tassertNull(workflowInstance2.getParent());\n\t\tassertNotNull(workflowInstance2.getStartDate());\n\t\tassertEquals(\n\t\t\tDEFINITION_NAME_2, workflowInstance2.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition2.getVersion(),\n\t\t\tworkflowInstance2.getWorkflowDefinitionVersion());\n\n\t\t// Workflow Instance 3\n\n\t\tWorkflowInstance workflowInstance3 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition3.getName(),\n\t\t\t\t_workflowDefinition3.getVersion(), null, null);\n\n\t\tassertNotNull(workflowInstance3);\n\t\tList<WorkflowInstance> childrenInstances =\n\t\t\tworkflowInstance3.getChildren();\n\t\tassertEquals(0, childrenInstances.size());\n\t\tMap<String, Object> context3 = workflowInstance3.getContext();\n\t\tassertNotNull(context3);\n\t\tassertEquals(1, context3.size());\n\t\tassertEquals(\"success\", context3.get(\"javaNode31\"));\n\t\tassertEquals(\"forkNode\", workflowInstance3.getCurrentNodeName());\n\t\tassertNull(workflowInstance3.getEndDate());\n\t\tassertNull(workflowInstance3.getParent());\n\t\tassertNotNull(workflowInstance3.getStartDate());\n\t\tassertEquals(\n\t\t\tDEFINITION_NAME_3, workflowInstance3.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition3.getVersion(),\n\t\t\tworkflowInstance3.getWorkflowDefinitionVersion());\n\n\t\t// Clean up\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance1.getWorkflowInstanceId());\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance2.getWorkflowInstanceId());\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance3.getWorkflowInstanceId());\n\t}","id":2406,"modified_method":"public void testStartWorkflowInstance() throws Exception {\n\n\t\t// Workflow instance 1\n\n\t\tWorkflowInstance workflowInstance1 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, _workflowDefinition1.getName(),\n\t\t\t\t_workflowDefinition1.getVersion(), null, null);\n\n\t\tassertNotNull(workflowInstance1);\n\t\tassertEquals(0, workflowInstance1.getChildrenWorkflowInstanceCount());\n\n\t\tMap<String, Object> context1 = workflowInstance1.getContext();\n\n\t\tassertNotNull(context1);\n\t\tassertEquals(1, context1.size());\n\t\tassertEquals(\"success\", context1.get(\"javaNode11\"));\n\n\t\tassertEquals(\"State1-1\", workflowInstance1.getCurrentNodeName());\n\t\tassertNull(workflowInstance1.getEndDate());\n\t\tassertNull(workflowInstance1.getParentWorkflowInstance());\n\t\tassertNotNull(workflowInstance1.getStartDate());\n\t\tassertEquals(\n\t\t\tDEFINITION_NAME_1, workflowInstance1.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition1.getVersion(),\n\t\t\tworkflowInstance1.getWorkflowDefinitionVersion());\n\n\t\t// Workflow instance 2\n\n\t\tWorkflowInstance workflowInstance2 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, _workflowDefinition2.getName(),\n\t\t\t\t_workflowDefinition2.getVersion(), null, null);\n\n\t\tassertNotNull(workflowInstance2);\n\t\tassertEquals(0, workflowInstance2.getChildrenWorkflowInstanceCount());\n\n\t\tMap<String, Object> context2 = workflowInstance2.getContext();\n\n\t\tassertNotNull(context2);\n\t\tassertEquals(1, context2.size());\n\t\tassertEquals(\"success\", context2.get(\"javaNode21\"));\n\n\t\tassertEquals(\"taskNode3\", workflowInstance2.getCurrentNodeName());\n\t\tassertNull(workflowInstance2.getEndDate());\n\t\tassertNull(workflowInstance2.getParentWorkflowInstance());\n\t\tassertNotNull(workflowInstance2.getStartDate());\n\t\tassertEquals(\n\t\t\tDEFINITION_NAME_2, workflowInstance2.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition2.getVersion(),\n\t\t\tworkflowInstance2.getWorkflowDefinitionVersion());\n\n\t\t// Workflow instance 3\n\n\t\tWorkflowInstance workflowInstance3 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, _workflowDefinition3.getName(),\n\t\t\t\t_workflowDefinition3.getVersion(), null, null);\n\n\t\tassertNotNull(workflowInstance3);\n\t\tassertEquals(0, workflowInstance3.getChildrenWorkflowInstanceCount());\n\n\t\tMap<String, Object> context3 = workflowInstance3.getContext();\n\n\t\tassertNotNull(context3);\n\t\tassertEquals(1, context3.size());\n\t\tassertEquals(\"success\", context3.get(\"javaNode31\"));\n\n\t\tassertEquals(\"forkNode\", workflowInstance3.getCurrentNodeName());\n\t\tassertNull(workflowInstance3.getEndDate());\n\t\tassertNull(workflowInstance3.getParentWorkflowInstance());\n\t\tassertNotNull(workflowInstance3.getStartDate());\n\t\tassertEquals(\n\t\t\tDEFINITION_NAME_3, workflowInstance3.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition3.getVersion(),\n\t\t\tworkflowInstance3.getWorkflowDefinitionVersion());\n\n\t\t// Clean up\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance1.getWorkflowInstanceId());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance2.getWorkflowInstanceId());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance3.getWorkflowInstanceId());\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void setUp() throws Exception {\n\t\tsuper.setUp();\n\t\t_workflowDefinition1 =\n\t\t\tWorkflowDefinitionManagerUtil.deployWorkflowDefinition(\n\t\t\t\tuser.getUserId(), DEFINITION_NAME_1,\n\t\t\t\tnew ByteArrayInputStream(definitionBytes1));\n\n\t\t_workflowDefinition2 =\n\t\t\tWorkflowDefinitionManagerUtil.deployWorkflowDefinition(\n\t\t\t\tuser.getUserId(), DEFINITION_NAME_2,\n\t\t\t\tnew ByteArrayInputStream(definitionBytes2));\n\n\t\t_workflowDefinition3 =\n\t\t\tWorkflowDefinitionManagerUtil.deployWorkflowDefinition(\n\t\t\t\tuser.getUserId(), DEFINITION_NAME_3,\n\t\t\t\tnew ByteArrayInputStream(definitionBytes3));\n\n\t\t_workflowDefinition4 =\n\t\t\tWorkflowDefinitionManagerUtil.deployWorkflowDefinition(\n\t\t\t\tuser.getUserId(), DEFINITION_NAME_4,\n\t\t\t\tnew ByteArrayInputStream(definitionBytes4));\n\n\t}","id":2407,"modified_method":"public void setUp() throws Exception {\n\t\tsuper.setUp();\n\n\t\t_workflowDefinition1 =\n\t\t\tWorkflowDefinitionManagerUtil.deployWorkflowDefinition(\n\t\t\t\tdefaultUserId, DEFINITION_NAME_1,\n\t\t\t\tnew ByteArrayInputStream(definitionBytes1));\n\n\t\t_workflowDefinition2 =\n\t\t\tWorkflowDefinitionManagerUtil.deployWorkflowDefinition(\n\t\t\t\tdefaultUserId, DEFINITION_NAME_2,\n\t\t\t\tnew ByteArrayInputStream(definitionBytes2));\n\n\t\t_workflowDefinition3 =\n\t\t\tWorkflowDefinitionManagerUtil.deployWorkflowDefinition(\n\t\t\t\tdefaultUserId, DEFINITION_NAME_3,\n\t\t\t\tnew ByteArrayInputStream(definitionBytes3));\n\n\t\t_workflowDefinition4 =\n\t\t\tWorkflowDefinitionManagerUtil.deployWorkflowDefinition(\n\t\t\t\tdefaultUserId, DEFINITION_NAME_4,\n\t\t\t\tnew ByteArrayInputStream(definitionBytes4));\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void testGetWorkflowInstances() throws Exception {\n\n\t\t// Prepare\n\n\t\tWorkflowInstance workflowInstance1_1 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition1.getName(),\n\t\t\t\t_workflowDefinition1.getVersion(), null, null);\n\t\tWorkflowInstance workflowInstance1_2 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition1.getName(),\n\t\t\t\t_workflowDefinition1.getVersion(), null, null);\n\t\tWorkflowInstance workflowInstance1_3 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition1.getName(),\n\t\t\t\t_workflowDefinition1.getVersion(), null, null);\n\t\tWorkflowInstance workflowInstance2_1 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition2.getName(),\n\t\t\t\t_workflowDefinition2.getVersion(), null, null);\n\t\tWorkflowInstance workflowInstance2_2 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition2.getName(),\n\t\t\t\t_workflowDefinition2.getVersion(), null, null);\n\n\t\tworkflowInstance1_1 =\n\t\t\tWorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\t\tuser.getUserId(), workflowInstance1_1.getWorkflowInstanceId(),\n\t\t\t\t\"toTaskNode\", null);\n\t\tworkflowInstance1_1 =\n\t\t\tWorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\t\tuser.getUserId(), workflowInstance1_1.getWorkflowInstanceId(),\n\t\t\t\t\"toEnd\", null);\n\n\t\tworkflowInstance1_2 =\n\t\t\tWorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\t\tuser.getUserId(), workflowInstance1_2.getWorkflowInstanceId(),\n\t\t\t\t\"toTaskNode\", null);\n\t\tworkflowInstance1_2 =\n\t\t\tWorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\t\tuser.getUserId(), workflowInstance1_2.getWorkflowInstanceId(),\n\t\t\t\t\"toEnd\", null);\n\n\t\tworkflowInstance2_1 =\n\t\t\tWorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\t\tuser.getUserId(), workflowInstance2_1.getWorkflowInstanceId(),\n\t\t\t\t\"toEnd\", null);\n\n\t\t// Workflow Definition 1 completed, all\n\n\t\tList<WorkflowInstance> workflowInstances1 =\n\t\t\tWorkflowInstanceManagerUtil.getWorkflowInstances(\n\t\t\t\tDEFINITION_NAME_1, _workflowDefinition1.getVersion(),\n\t\t\t\tBoolean.TRUE, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowInstanceStartDateComparator(true));\n\t\tassertEquals(2, workflowInstances1.size());\n\n\t\tWorkflowInstance instance1 = workflowInstances1.get(0);\n\t\tassertEquals(0, instance1.getChildren().size());\n\t\tMap<String, Object> context1 = instance1.getContext();\n\t\tassertEquals(1, context1.size());\n\t\tassertEquals(\"success\", context1.get(\"javaNode11\"));\n\t\tassertEquals(\"end\", instance1.getCurrentNodeName());\n\t\tassertNotNull(instance1.getEndDate());\n\t\tassertNull(instance1.getParent());\n\t\tassertNotNull(instance1.getStartDate());\n\t\tassertEquals(DEFINITION_NAME_1, instance1.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition1.getVersion(),\n\t\t\tinstance1.getWorkflowDefinitionVersion());\n\t\tassertEquals(\n\t\t\tworkflowInstance1_1.getWorkflowInstanceId(),\n\t\t\tinstance1.getWorkflowInstanceId());\n\n\t\tWorkflowInstance instance2 = workflowInstances1.get(1);\n\t\tassertEquals(0, instance2.getChildren().size());\n\t\tMap<String, Object> context2 = instance2.getContext();\n\t\tassertEquals(1, context2.size());\n\t\tassertEquals(\"success\", context2.get(\"javaNode11\"));\n\t\tassertEquals(\"end\", instance2.getCurrentNodeName());\n\t\tassertNotNull(instance2.getEndDate());\n\t\tassertNull(instance2.getParent());\n\t\tassertNotNull(instance2.getStartDate());\n\t\tassertEquals(DEFINITION_NAME_1, instance2.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition1.getVersion(),\n\t\t\tinstance2.getWorkflowDefinitionVersion());\n\t\tassertEquals(\n\t\t\tworkflowInstance1_2.getWorkflowInstanceId(),\n\t\t\tinstance2.getWorkflowInstanceId());\n\n\t\t// Workflow Definition 1 completed, by range\n\n\t\tList<WorkflowInstance> workflowInstances2 =\n\t\t\tWorkflowInstanceManagerUtil.getWorkflowInstances(\n\t\t\t\tDEFINITION_NAME_1, _workflowDefinition1.getVersion(),\n\t\t\t\tBoolean.TRUE, 1, 2,\n\t\t\t\tnew WorkflowInstanceStartDateComparator(true));\n\t\tassertEquals(1, workflowInstances2.size());\n\n\t\tWorkflowInstance instance3 = workflowInstances2.get(0);\n\t\tassertEquals(0, instance3.getChildren().size());\n\t\tMap<String, Object> context3 = instance3.getContext();\n\t\tassertEquals(1, context3.size());\n\t\tassertEquals(\"success\", context3.get(\"javaNode11\"));\n\t\tassertEquals(\"end\", instance3.getCurrentNodeName());\n\t\tassertNotNull(instance3.getEndDate());\n\t\tassertNull(instance3.getParent());\n\t\tassertNotNull(instance3.getStartDate());\n\t\tassertEquals(DEFINITION_NAME_1, instance3.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition1.getVersion(),\n\t\t\tinstance3.getWorkflowDefinitionVersion());\n\t\tassertEquals(\n\t\t\tworkflowInstance1_2.getWorkflowInstanceId(),\n\t\t\tinstance3.getWorkflowInstanceId());\n\n\t\t// Workflow Definition 1 uncompleted, all\n\n\t\tList<WorkflowInstance> workflowInstances3 =\n\t\t\tWorkflowInstanceManagerUtil.getWorkflowInstances(\n\t\t\t\tDEFINITION_NAME_1, _workflowDefinition1.getVersion(),\n\t\t\t\tBoolean.FALSE, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowInstanceStartDateComparator(true));\n\t\tassertEquals(1, workflowInstances3.size());\n\n\t\tWorkflowInstance instance4 = workflowInstances3.get(0);\n\t\tassertEquals(0, instance4.getChildren().size());\n\t\tMap<String, Object> context4 = instance4.getContext();\n\t\tassertEquals(1, context4.size());\n\t\tassertEquals(\"success\", context4.get(\"javaNode11\"));\n\t\tassertEquals(\"State1-1\", instance4.getCurrentNodeName());\n\t\tassertNull(instance4.getEndDate());\n\t\tassertNull(instance4.getParent());\n\t\tassertNotNull(instance4.getStartDate());\n\t\tassertEquals(DEFINITION_NAME_1, instance4.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition1.getVersion(),\n\t\t\tinstance4.getWorkflowDefinitionVersion());\n\t\tassertEquals(\n\t\t\tworkflowInstance1_3.getWorkflowInstanceId(),\n\t\t\tinstance4.getWorkflowInstanceId());\n\n\t\t// Workflow Definition 2 completed, all\n\n\t\tList<WorkflowInstance> workflowInstances4 =\n\t\t\tWorkflowInstanceManagerUtil.getWorkflowInstances(\n\t\t\t\tDEFINITION_NAME_2, _workflowDefinition2.getVersion(),\n\t\t\t\tBoolean.TRUE, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowInstanceStartDateComparator(true));\n\t\tassertEquals(1, workflowInstances4.size());\n\n\t\tWorkflowInstance instance5 = workflowInstances4.get(0);\n\t\tassertEquals(0, instance5.getChildren().size());\n\t\tMap<String, Object> context5 = instance5.getContext();\n\t\tassertEquals(1, context5.size());\n\t\tassertEquals(\"success\", context5.get(\"javaNode21\"));\n\t\tassertEquals(\"end\", instance5.getCurrentNodeName());\n\t\tassertNotNull(instance5.getEndDate());\n\t\tassertNull(instance5.getParent());\n\t\tassertNotNull(instance5.getStartDate());\n\t\tassertEquals(DEFINITION_NAME_2, instance5.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition2.getVersion(),\n\t\t\tinstance5.getWorkflowDefinitionVersion());\n\t\tassertEquals(\n\t\t\tworkflowInstance2_1.getWorkflowInstanceId(),\n\t\t\tinstance5.getWorkflowInstanceId());\n\n\t\t// Workflow Definition 2 uncompleted, all\n\n\t\tList<WorkflowInstance> workflowInstances5 =\n\t\t\tWorkflowInstanceManagerUtil.getWorkflowInstances(\n\t\t\t\tDEFINITION_NAME_2, _workflowDefinition2.getVersion(),\n\t\t\t\tBoolean.FALSE, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowInstanceStartDateComparator(true));\n\t\tassertEquals(1, workflowInstances5.size());\n\n\t\tWorkflowInstance instance6 = workflowInstances5.get(0);\n\t\tassertEquals(0, instance6.getChildren().size());\n\t\tMap<String, Object> context6 = instance6.getContext();\n\t\tassertEquals(1, context6.size());\n\t\tassertEquals(\"success\", context6.get(\"javaNode21\"));\n\t\tassertEquals(\"taskNode3\", instance6.getCurrentNodeName());\n\t\tassertNull(instance6.getEndDate());\n\t\tassertNull(instance6.getParent());\n\t\tassertNotNull(instance6.getStartDate());\n\t\tassertEquals(DEFINITION_NAME_2, instance6.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition2.getVersion(),\n\t\t\tinstance6.getWorkflowDefinitionVersion());\n\t\tassertEquals(\n\t\t\tworkflowInstance2_2.getWorkflowInstanceId(),\n\t\t\tinstance6.getWorkflowInstanceId());\n\n\t\t// Clean up\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance1_1.getWorkflowInstanceId());\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance1_2.getWorkflowInstanceId());\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance1_3.getWorkflowInstanceId());\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance2_1.getWorkflowInstanceId());\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance2_2.getWorkflowInstanceId());\n\t}","id":2408,"modified_method":"public void testGetWorkflowInstances() throws Exception {\n\n\t\t// Prepare\n\n\t\tWorkflowInstance workflowInstance1_1 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, _workflowDefinition1.getName(),\n\t\t\t\t_workflowDefinition1.getVersion(), null, null);\n\n\t\tworkflowInstance1_1 =\n\t\t\tWorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\t\tdefaultUserId, workflowInstance1_1.getWorkflowInstanceId(),\n\t\t\t\t\"toTaskNode\", null);\n\n\t\tworkflowInstance1_1 =\n\t\t\tWorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\t\tdefaultUserId, workflowInstance1_1.getWorkflowInstanceId(),\n\t\t\t\t\"toEnd\", null);\n\n\t\tWorkflowInstance workflowInstance1_2 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, _workflowDefinition1.getName(),\n\t\t\t\t_workflowDefinition1.getVersion(), null, null);\n\n\t\tworkflowInstance1_2 =\n\t\t\tWorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\t\tdefaultUserId, workflowInstance1_2.getWorkflowInstanceId(),\n\t\t\t\t\"toTaskNode\", null);\n\n\t\tworkflowInstance1_2 =\n\t\t\tWorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\t\tdefaultUserId, workflowInstance1_2.getWorkflowInstanceId(),\n\t\t\t\t\"toEnd\", null);\n\n\t\tWorkflowInstance workflowInstance1_3 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, _workflowDefinition1.getName(),\n\t\t\t\t_workflowDefinition1.getVersion(), null, null);\n\n\t\tWorkflowInstance workflowInstance2_1 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, _workflowDefinition2.getName(),\n\t\t\t\t_workflowDefinition2.getVersion(), null, null);\n\n\t\tworkflowInstance2_1 =\n\t\t\tWorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\t\tdefaultUserId, workflowInstance2_1.getWorkflowInstanceId(),\n\t\t\t\t\"toEnd\", null);\n\n\t\tWorkflowInstance workflowInstance2_2 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, _workflowDefinition2.getName(),\n\t\t\t\t_workflowDefinition2.getVersion(), null, null);\n\n\t\t// Workflow definition 1, completed, all\n\n\t\tList<WorkflowInstance> workflowInstances =\n\t\t\tWorkflowInstanceManagerUtil.getWorkflowInstances(\n\t\t\t\tDEFINITION_NAME_1, _workflowDefinition1.getVersion(),\n\t\t\t\tBoolean.TRUE, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowInstanceStartDateComparator(true));\n\n\t\tassertEquals(2, workflowInstances.size());\n\n\t\tWorkflowInstance workflowInstance1 = workflowInstances.get(0);\n\n\t\tassertEquals(0, workflowInstance1.getChildrenWorkflowInstanceCount());\n\n\t\tMap<String, Object> context1 = workflowInstance1.getContext();\n\n\t\tassertEquals(1, context1.size());\n\t\tassertEquals(\"success\", context1.get(\"javaNode11\"));\n\n\t\tassertEquals(\"end\", workflowInstance1.getCurrentNodeName());\n\t\tassertNotNull(workflowInstance1.getEndDate());\n\t\tassertNull(workflowInstance1.getParentWorkflowInstance());\n\t\tassertNotNull(workflowInstance1.getStartDate());\n\t\tassertEquals(\n\t\t\tDEFINITION_NAME_1, workflowInstance1.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition1.getVersion(),\n\t\t\tworkflowInstance1.getWorkflowDefinitionVersion());\n\t\tassertEquals(\n\t\t\tworkflowInstance1_1.getWorkflowInstanceId(),\n\t\t\tworkflowInstance1.getWorkflowInstanceId());\n\n\t\tWorkflowInstance workflowInstance2 = workflowInstances.get(1);\n\n\t\tassertEquals(0, workflowInstance2.getChildrenWorkflowInstanceCount());\n\n\t\tMap<String, Object> context2 = workflowInstance2.getContext();\n\n\t\tassertEquals(1, context2.size());\n\t\tassertEquals(\"success\", context2.get(\"javaNode11\"));\n\n\t\tassertEquals(\"end\", workflowInstance2.getCurrentNodeName());\n\t\tassertNotNull(workflowInstance2.getEndDate());\n\t\tassertNull(workflowInstance2.getParentWorkflowInstance());\n\t\tassertNotNull(workflowInstance2.getStartDate());\n\t\tassertEquals(\n\t\t\tDEFINITION_NAME_1, workflowInstance2.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition1.getVersion(),\n\t\t\tworkflowInstance2.getWorkflowDefinitionVersion());\n\t\tassertEquals(\n\t\t\tworkflowInstance1_2.getWorkflowInstanceId(),\n\t\t\tworkflowInstance2.getWorkflowInstanceId());\n\n\t\t// Workflow definition 1, completed, by range\n\n\t\tworkflowInstances = WorkflowInstanceManagerUtil.getWorkflowInstances(\n\t\t\tDEFINITION_NAME_1, _workflowDefinition1.getVersion(), Boolean.TRUE,\n\t\t\t1, 2, new WorkflowInstanceStartDateComparator(true));\n\n\t\tassertEquals(1, workflowInstances.size());\n\n\t\tWorkflowInstance workflowInstance3 = workflowInstances.get(0);\n\n\t\tassertEquals(0, workflowInstance3.getChildrenWorkflowInstanceCount());\n\n\t\tMap<String, Object> context3 = workflowInstance3.getContext();\n\n\t\tassertEquals(1, context3.size());\n\t\tassertEquals(\"success\", context3.get(\"javaNode11\"));\n\n\t\tassertEquals(\"end\", workflowInstance3.getCurrentNodeName());\n\t\tassertNotNull(workflowInstance3.getEndDate());\n\t\tassertNull(workflowInstance3.getParentWorkflowInstance());\n\t\tassertNotNull(workflowInstance3.getStartDate());\n\t\tassertEquals(\n\t\t\tDEFINITION_NAME_1, workflowInstance3.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition1.getVersion(),\n\t\t\tworkflowInstance3.getWorkflowDefinitionVersion());\n\t\tassertEquals(\n\t\t\tworkflowInstance1_2.getWorkflowInstanceId(),\n\t\t\tworkflowInstance3.getWorkflowInstanceId());\n\n\t\t// Workflow definition 1, uncompleted, all\n\n\t\tworkflowInstances = WorkflowInstanceManagerUtil.getWorkflowInstances(\n\t\t\tDEFINITION_NAME_1, _workflowDefinition1.getVersion(), Boolean.FALSE,\n\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew WorkflowInstanceStartDateComparator(true));\n\n\t\tassertEquals(1, workflowInstances.size());\n\n\t\tWorkflowInstance workflowInstance4 = workflowInstances.get(0);\n\n\t\tassertEquals(0, workflowInstance4.getChildrenWorkflowInstanceCount());\n\n\t\tMap<String, Object> context4 = workflowInstance4.getContext();\n\n\t\tassertEquals(1, context4.size());\n\t\tassertEquals(\"success\", context4.get(\"javaNode11\"));\n\n\t\tassertEquals(\"State1-1\", workflowInstance4.getCurrentNodeName());\n\t\tassertNull(workflowInstance4.getEndDate());\n\t\tassertNull(workflowInstance4.getParentWorkflowInstance());\n\t\tassertNotNull(workflowInstance4.getStartDate());\n\t\tassertEquals(\n\t\t\tDEFINITION_NAME_1, workflowInstance4.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition1.getVersion(),\n\t\t\tworkflowInstance4.getWorkflowDefinitionVersion());\n\t\tassertEquals(\n\t\t\tworkflowInstance1_3.getWorkflowInstanceId(),\n\t\t\tworkflowInstance4.getWorkflowInstanceId());\n\n\t\t// Workflow definition 2, completed, all\n\n\t\tworkflowInstances = WorkflowInstanceManagerUtil.getWorkflowInstances(\n\t\t\tDEFINITION_NAME_2, _workflowDefinition2.getVersion(), Boolean.TRUE,\n\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew WorkflowInstanceStartDateComparator(true));\n\n\t\tassertEquals(1, workflowInstances.size());\n\n\t\tWorkflowInstance workflowInstance5 = workflowInstances.get(0);\n\n\t\tassertEquals(0, workflowInstance5.getChildrenWorkflowInstanceCount());\n\n\t\tMap<String, Object> context5 = workflowInstance5.getContext();\n\n\t\tassertEquals(1, context5.size());\n\t\tassertEquals(\"success\", context5.get(\"javaNode21\"));\n\n\t\tassertEquals(\"end\", workflowInstance5.getCurrentNodeName());\n\t\tassertNotNull(workflowInstance5.getEndDate());\n\t\tassertNull(workflowInstance5.getParentWorkflowInstance());\n\t\tassertNotNull(workflowInstance5.getStartDate());\n\t\tassertEquals(\n\t\t\tDEFINITION_NAME_2, workflowInstance5.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition2.getVersion(),\n\t\t\tworkflowInstance5.getWorkflowDefinitionVersion());\n\t\tassertEquals(\n\t\t\tworkflowInstance2_1.getWorkflowInstanceId(),\n\t\t\tworkflowInstance5.getWorkflowInstanceId());\n\n\t\t// Workflow definition 2, uncompleted, all\n\n\t\tworkflowInstances = WorkflowInstanceManagerUtil.getWorkflowInstances(\n\t\t\tDEFINITION_NAME_2, _workflowDefinition2.getVersion(), Boolean.FALSE,\n\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew WorkflowInstanceStartDateComparator(true));\n\n\t\tassertEquals(1, workflowInstances.size());\n\n\t\tWorkflowInstance workflowInstance6 = workflowInstances.get(0);\n\n\t\tassertEquals(0, workflowInstance6.getChildrenWorkflowInstanceCount());\n\n\t\tMap<String, Object> context6 = workflowInstance6.getContext();\n\n\t\tassertEquals(1, context6.size());\n\t\tassertEquals(\"success\", context6.get(\"javaNode21\"));\n\n\t\tassertEquals(\"taskNode3\", workflowInstance6.getCurrentNodeName());\n\t\tassertNull(workflowInstance6.getEndDate());\n\t\tassertNull(workflowInstance6.getParentWorkflowInstance());\n\t\tassertNotNull(workflowInstance6.getStartDate());\n\t\tassertEquals(\n\t\t\tDEFINITION_NAME_2, workflowInstance6.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition2.getVersion(),\n\t\t\tworkflowInstance6.getWorkflowDefinitionVersion());\n\t\tassertEquals(\n\t\t\tworkflowInstance2_2.getWorkflowInstanceId(),\n\t\t\tworkflowInstance6.getWorkflowInstanceId());\n\n\t\t// Clean up\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance1_1.getWorkflowInstanceId());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance1_2.getWorkflowInstanceId());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance1_3.getWorkflowInstanceId());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance2_1.getWorkflowInstanceId());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance2_2.getWorkflowInstanceId());\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void testDeleteWorkflowInstance() throws Exception {\n\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition1.getName(),\n\t\t\t\t_workflowDefinition1.getVersion(), null, null);\n\n\t\tworkflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.getWorkflowInstance(\n\t\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t\tassertNotNull(workflowInstance);\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\n\t\ttry{\n\t\t\tWorkflowInstanceManagerUtil.getWorkflowInstance(\n\t\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t\t\tfail();\n\t\t}catch(WorkflowException we) {\n\t\t}\n\n\t}","id":2409,"modified_method":"public void testDeleteWorkflowInstance() throws Exception {\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, _workflowDefinition1.getName(),\n\t\t\t\t_workflowDefinition1.getVersion(), null, null);\n\n\t\tassertNotNull(workflowInstance);\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\n\t\ttry{\n\t\t\tWorkflowInstanceManagerUtil.getWorkflowInstance(\n\t\t\t\tworkflowInstance.getWorkflowInstanceId());\n\n\t\t\tfail();\n\t\t}\n\t\tcatch(WorkflowException we) {\n\t\t}\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void testSignalWorkflowInstance() throws Exception {\n\n\t\t// Path 1\n\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition4.getName(),\n\t\t\t\t_workflowDefinition4.getVersion(), null, null);\n\t\tassertEquals(\"Switch\", workflowInstance.getCurrentNodeName());\n\n\t\tworkflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\t\tuser.getUserId(), workflowInstance.getWorkflowInstanceId(),\n\t\t\t\t\"toState1\", null);\n\t\tassertEquals(\"State1\", workflowInstance.getCurrentNodeName());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\n\t\t// Path 2\n\t\tworkflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition4.getName(),\n\t\t\t\t_workflowDefinition4.getVersion(), null, null);\n\t\tassertEquals(\"Switch\", workflowInstance.getCurrentNodeName());\n\n\t\tworkflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\t\tuser.getUserId(), workflowInstance.getWorkflowInstanceId(),\n\t\t\t\t\"toState2\", null);\n\t\tassertEquals(\"State2\", workflowInstance.getCurrentNodeName());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\n\t\t// Path 3\n\t\tworkflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition4.getName(),\n\t\t\t\t_workflowDefinition4.getVersion(), null, null);\n\t\tassertEquals(\"Switch\", workflowInstance.getCurrentNodeName());\n\n\t\tworkflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\t\tuser.getUserId(), workflowInstance.getWorkflowInstanceId(),\n\t\t\t\t\"toState3\", null);\n\t\tassertEquals(\"State3\", workflowInstance.getCurrentNodeName());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","id":2410,"modified_method":"public void testSignalWorkflowInstance() throws Exception {\n\n\t\t// Path 1\n\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, _workflowDefinition4.getName(),\n\t\t\t\t_workflowDefinition4.getVersion(), null, null);\n\n\t\tassertEquals(\"Switch\", workflowInstance.getCurrentNodeName());\n\n\t\tworkflowInstance = WorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\tdefaultUserId, workflowInstance.getWorkflowInstanceId(), \"toState1\",\n\t\t\tnull);\n\n\t\tassertEquals(\"State1\", workflowInstance.getCurrentNodeName());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\n\t\t// Path 2\n\n\t\tworkflowInstance = WorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\tdefaultUserId, _workflowDefinition4.getName(),\n\t\t\t_workflowDefinition4.getVersion(), null, null);\n\n\t\tassertEquals(\"Switch\", workflowInstance.getCurrentNodeName());\n\n\t\tworkflowInstance = WorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\tdefaultUserId, workflowInstance.getWorkflowInstanceId(), \"toState2\",\n\t\t\tnull);\n\n\t\tassertEquals(\"State2\", workflowInstance.getCurrentNodeName());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\n\t\t// Path 3\n\n\t\tworkflowInstance = WorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\tdefaultUserId, _workflowDefinition4.getName(),\n\t\t\t_workflowDefinition4.getVersion(), null, null);\n\n\t\tassertEquals(\"Switch\", workflowInstance.getCurrentNodeName());\n\n\t\tworkflowInstance = WorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\tdefaultUserId, workflowInstance.getWorkflowInstanceId(), \"toState3\",\n\t\t\tnull);\n\n\t\tassertEquals(\"State3\", workflowInstance.getCurrentNodeName());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void testGetWorkflowInstance() throws Exception {\n\n\t\t// Prepare\n\n\t\tWorkflowInstance workflowInstance1 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition1.getName(),\n\t\t\t\t_workflowDefinition1.getVersion(), null, null);\n\t\tWorkflowInstance workflowInstance2 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition2.getName(),\n\t\t\t\t_workflowDefinition2.getVersion(), null, null);\n\t\tWorkflowInstance workflowInstance3 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition3.getName(),\n\t\t\t\t_workflowDefinition3.getVersion(), null, null);\n\n\t\t// Workflow Instance 1\n\n\t\tlong rootWorkflowInstanceId1 =\n\t\t\tworkflowInstance1.getWorkflowInstanceId();\n\n\t\tworkflowInstance1 =\n\t\t\tWorkflowInstanceManagerUtil.getWorkflowInstance(\n\t\t\t\tworkflowInstance1.getWorkflowInstanceId());\n\n\t\tassertEquals(0, workflowInstance1.getChildren().size());\n\t\tMap<String, Object> context1 = workflowInstance1.getContext();\n\t\tassertNotNull(context1);\n\t\tassertEquals(1, context1.size());\n\t\tassertEquals(\"success\", context1.get(\"javaNode11\"));\n\t\tassertEquals(\"State1-1\", workflowInstance1.getCurrentNodeName());\n\t\tassertNull(workflowInstance1.getEndDate());\n\t\tassertNull(workflowInstance1.getParent());\n\t\tassertNotNull(workflowInstance1.getStartDate());\n\t\tassertEquals(\n\t\t\tDEFINITION_NAME_1, workflowInstance1.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition1.getVersion(),\n\t\t\tworkflowInstance1.getWorkflowDefinitionVersion());\n\t\tassertEquals(\n\t\t\trootWorkflowInstanceId1, workflowInstance1.getWorkflowInstanceId());\n\n\t\t// Workflow Instance 2\n\n\t\tlong rootWorkflowInstanceId2 =\n\t\t\tworkflowInstance2.getWorkflowInstanceId();\n\n\t\tworkflowInstance2 =\n\t\t\tWorkflowInstanceManagerUtil.getWorkflowInstance(\n\t\t\t\tworkflowInstance2.getWorkflowInstanceId());\n\n\t\tassertEquals(0, workflowInstance2.getChildren().size());\n\t\tMap<String, Object> context2 = workflowInstance2.getContext();\n\t\tassertNotNull(context2);\n\t\tassertEquals(1, context2.size());\n\t\tassertEquals(\"success\", context2.get(\"javaNode21\"));\n\t\tassertEquals(\"taskNode3\", workflowInstance2.getCurrentNodeName());\n\t\tassertNull(workflowInstance2.getEndDate());\n\t\tassertNull(workflowInstance2.getParent());\n\t\tassertNotNull(workflowInstance2.getStartDate());\n\t\tassertEquals(\n\t\t\tDEFINITION_NAME_2, workflowInstance2.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition2.getVersion(),\n\t\t\tworkflowInstance2.getWorkflowDefinitionVersion());\n\t\tassertEquals(\n\t\t\trootWorkflowInstanceId2, workflowInstance2.getWorkflowInstanceId());\n\n\t\t// Workflow Instance 3\n\n\t\tlong rootWorkflowInstanceId3 =\n\t\t\tworkflowInstance3.getWorkflowInstanceId();\n\n\t\tworkflowInstance3 =\n\t\t\tWorkflowInstanceManagerUtil.getWorkflowInstance(\n\t\t\tworkflowInstance3.getWorkflowInstanceId());\n\n\t\tList<WorkflowInstance> childrenInstances =\n\t\t\tworkflowInstance3.getChildren();\n\t\tCollections.sort(childrenInstances, new Comparator<WorkflowInstance>() {\n\n\t\t\tpublic int compare(\n\t\t\t\tWorkflowInstance child1, WorkflowInstance child2) {\n\t\t\t\treturn child1.getCurrentNodeName().compareTo(\n\t\t\t\t\tchild2.getCurrentNodeName());\n\t\t\t}\n\t\t});\n\n\t\tassertEquals(3, childrenInstances.size());\n\n\t\t// Child Instance 1\n\n\t\tWorkflowInstance childInstance1 = childrenInstances.get(0);\n\t\tassertEquals(0, childInstance1.getChildren().size());\n\t\tMap<String, Object> context3_1 = childInstance1.getContext();\n\t\tassertNotNull(context3_1);\n\t\tassertEquals(1, context3_1.size());\n\t\tassertEquals(\"success\", context3_1.get(\"javaNode31\"));\n\t\tassertEquals(\"taskNode1\", childInstance1.getCurrentNodeName());\n\t\tassertNull(childInstance1.getEndDate());\n\t\tassertEquals(\n\t\t\trootWorkflowInstanceId3,\n\t\t\tchildInstance1.getParent().getWorkflowInstanceId());\n\t\tassertNotNull(childInstance1.getStartDate());\n\t\tassertEquals(\n\t\t\tDEFINITION_NAME_3, childInstance1.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition3.getVersion(),\n\t\t\tchildInstance1.getWorkflowDefinitionVersion());\n\n\t\t// Child Instance 2\n\n\t\tWorkflowInstance childInstance2 = childrenInstances.get(1);\n\t\tassertEquals(0, childInstance2.getChildren().size());\n\t\tMap<String, Object> context3_2 = childInstance2.getContext();\n\t\tassertNotNull(context3_2);\n\t\tassertEquals(1, context3_2.size());\n\t\tassertEquals(\"success\", context3_2.get(\"javaNode31\"));\n\t\tassertEquals(\"taskNode2\", childInstance2.getCurrentNodeName());\n\t\tassertNull(childInstance2.getEndDate());\n\t\tassertEquals(\n\t\t\trootWorkflowInstanceId3,\n\t\t\tchildInstance2.getParent().getWorkflowInstanceId());\n\t\tassertNotNull(childInstance2.getStartDate());\n\t\tassertEquals(\n\t\t\tDEFINITION_NAME_3, childInstance2.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition3.getVersion(),\n\t\t\tchildInstance2.getWorkflowDefinitionVersion());\n\n\t\t// Child Instance 3\n\n\t\tWorkflowInstance childInstance3 = childrenInstances.get(2);\n\t\tassertEquals(0, childInstance3.getChildren().size());\n\t\tMap<String, Object> context3_3 = childInstance3.getContext();\n\t\tassertNotNull(context3_3);\n\t\tassertEquals(1, context3_3.size());\n\t\tassertEquals(\"success\", context3_3.get(\"javaNode31\"));\n\t\tassertEquals(\"taskNode3\", childInstance3.getCurrentNodeName());\n\t\tassertNull(childInstance3.getEndDate());\n\t\tassertEquals(\n\t\t\trootWorkflowInstanceId3,\n\t\t\tchildInstance3.getParent().getWorkflowInstanceId());\n\t\tassertNotNull(childInstance3.getStartDate());\n\t\tassertEquals(\n\t\t\tDEFINITION_NAME_3, childInstance3.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition3.getVersion(),\n\t\t\tchildInstance3.getWorkflowDefinitionVersion());\n\n\t\tMap<String, Object> context3 = workflowInstance3.getContext();\n\t\tassertNotNull(context3);\n\t\tassertEquals(1, context3.size());\n\t\tassertEquals(\"success\", context3.get(\"javaNode31\"));\n\t\tassertEquals(\"forkNode\", workflowInstance3.getCurrentNodeName());\n\t\tassertNull(workflowInstance3.getEndDate());\n\t\tassertNull(workflowInstance3.getParent());\n\t\tassertNotNull(workflowInstance3.getStartDate());\n\t\tassertEquals(\n\t\t\tDEFINITION_NAME_3, workflowInstance3.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition3.getVersion(),\n\t\t\tworkflowInstance3.getWorkflowDefinitionVersion());\n\t\tassertEquals(\n\t\t\trootWorkflowInstanceId3, workflowInstance3.getWorkflowInstanceId());\n\n\t\t// Clean up\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance1.getWorkflowInstanceId());\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance2.getWorkflowInstanceId());\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance3.getWorkflowInstanceId());\n\t}","id":2411,"modified_method":"public void testGetWorkflowInstance() throws Exception {\n\n\t\t// Prepare\n\n\t\tWorkflowInstance workflowInstance1 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, _workflowDefinition1.getName(),\n\t\t\t\t_workflowDefinition1.getVersion(), null, null);\n\n\t\tWorkflowInstance workflowInstance2 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, _workflowDefinition2.getName(),\n\t\t\t\t_workflowDefinition2.getVersion(), null, null);\n\n\t\tWorkflowInstance workflowInstance3 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, _workflowDefinition3.getName(),\n\t\t\t\t_workflowDefinition3.getVersion(), null, null);\n\n\t\t// Workflow instance 1\n\n\t\tlong workflowInstanceId1 = workflowInstance1.getWorkflowInstanceId();\n\n\t\tworkflowInstance1 = WorkflowInstanceManagerUtil.getWorkflowInstance(\n\t\t\tworkflowInstance1.getWorkflowInstanceId());\n\n\t\tassertEquals(0, workflowInstance1.getChildrenWorkflowInstanceCount());\n\n\t\tMap<String, Object> context1 = workflowInstance1.getContext();\n\n\t\tassertNotNull(context1);\n\t\tassertEquals(1, context1.size());\n\t\tassertEquals(\"success\", context1.get(\"javaNode11\"));\n\n\t\tassertEquals(\"State1-1\", workflowInstance1.getCurrentNodeName());\n\t\tassertNull(workflowInstance1.getEndDate());\n\t\tassertNull(workflowInstance1.getParentWorkflowInstance());\n\t\tassertNotNull(workflowInstance1.getStartDate());\n\t\tassertEquals(\n\t\t\tDEFINITION_NAME_1, workflowInstance1.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition1.getVersion(),\n\t\t\tworkflowInstance1.getWorkflowDefinitionVersion());\n\t\tassertEquals(\n\t\t\tworkflowInstanceId1, workflowInstance1.getWorkflowInstanceId());\n\n\t\t// Workflow instance 2\n\n\t\tlong workflowInstanceId2 = workflowInstance2.getWorkflowInstanceId();\n\n\t\tworkflowInstance2 = WorkflowInstanceManagerUtil.getWorkflowInstance(\n\t\t\tworkflowInstance2.getWorkflowInstanceId());\n\n\t\tassertEquals(0, workflowInstance2.getChildrenWorkflowInstanceCount());\n\n\t\tMap<String, Object> context2 = workflowInstance2.getContext();\n\n\t\tassertNotNull(context2);\n\t\tassertEquals(1, context2.size());\n\t\tassertEquals(\"success\", context2.get(\"javaNode21\"));\n\n\t\tassertEquals(\"taskNode3\", workflowInstance2.getCurrentNodeName());\n\t\tassertNull(workflowInstance2.getEndDate());\n\t\tassertNull(workflowInstance2.getParentWorkflowInstance());\n\t\tassertNotNull(workflowInstance2.getStartDate());\n\t\tassertEquals(\n\t\t\tDEFINITION_NAME_2, workflowInstance2.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition2.getVersion(),\n\t\t\tworkflowInstance2.getWorkflowDefinitionVersion());\n\t\tassertEquals(\n\t\t\tworkflowInstanceId2, workflowInstance2.getWorkflowInstanceId());\n\n\t\t// Workflow instance 3\n\n\t\tlong workflowInstanceId3 = workflowInstance3.getWorkflowInstanceId();\n\n\t\tworkflowInstance3 = WorkflowInstanceManagerUtil.getWorkflowInstance(\n\t\t\tworkflowInstance3.getWorkflowInstanceId());\n\n\t\tList<WorkflowInstance> childrenInstances =\n\t\t\tworkflowInstance3.getChildrenWorkflowInstances();\n\n\t\tassertEquals(3, childrenInstances.size());\n\n\t\t// Child workflow instance 1\n\n\t\tWorkflowInstance childWorkflowInstance3_1 = childrenInstances.get(0);\n\n\t\tassertEquals(\n\t\t\t0, childWorkflowInstance3_1.getChildrenWorkflowInstanceCount());\n\n\t\tMap<String, Object> context3_1 = childWorkflowInstance3_1.getContext();\n\n\t\tassertNotNull(context3_1);\n\t\tassertEquals(1, context3_1.size());\n\t\tassertEquals(\"success\", context3_1.get(\"javaNode31\"));\n\n\t\tassertEquals(\n\t\t\t\"taskNode1\", childWorkflowInstance3_1.getCurrentNodeName());\n\t\tassertNull(childWorkflowInstance3_1.getEndDate());\n\t\tassertEquals(\n\t\t\tworkflowInstanceId3,\n\t\t\tchildWorkflowInstance3_1.getParentWorkflowInstanceId());\n\t\tassertNotNull(childWorkflowInstance3_1.getStartDate());\n\t\tassertEquals(\n\t\t\tDEFINITION_NAME_3,\n\t\t\tchildWorkflowInstance3_1.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition3.getVersion(),\n\t\t\tchildWorkflowInstance3_1.getWorkflowDefinitionVersion());\n\n\t\t// Child workflow instance 2\n\n\t\tWorkflowInstance childWorkflowInstance3_2 = childrenInstances.get(1);\n\n\t\tassertEquals(\n\t\t\t0, childWorkflowInstance3_2.getChildrenWorkflowInstanceCount());\n\n\t\tMap<String, Object> context3_2 = childWorkflowInstance3_2.getContext();\n\n\t\tassertNotNull(context3_2);\n\t\tassertEquals(1, context3_2.size());\n\t\tassertEquals(\"success\", context3_2.get(\"javaNode31\"));\n\n\t\tassertEquals(\n\t\t\t\"taskNode2\", childWorkflowInstance3_2.getCurrentNodeName());\n\t\tassertNull(childWorkflowInstance3_2.getEndDate());\n\t\tassertEquals(\n\t\t\tworkflowInstanceId3,\n\t\t\tchildWorkflowInstance3_2.getParentWorkflowInstanceId());\n\t\tassertNotNull(childWorkflowInstance3_2.getStartDate());\n\t\tassertEquals(\n\t\t\tDEFINITION_NAME_3,\n\t\t\tchildWorkflowInstance3_2.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition3.getVersion(),\n\t\t\tchildWorkflowInstance3_2.getWorkflowDefinitionVersion());\n\n\t\t// Child workflow instance 3\n\n\t\tWorkflowInstance childWorkflowInstance3_3 = childrenInstances.get(2);\n\n\t\tassertEquals(\n\t\t\t0, childWorkflowInstance3_3.getChildrenWorkflowInstanceCount());\n\n\t\tMap<String, Object> context3_3 = childWorkflowInstance3_3.getContext();\n\n\t\tassertNotNull(context3_3);\n\t\tassertEquals(1, context3_3.size());\n\t\tassertEquals(\"success\", context3_3.get(\"javaNode31\"));\n\n\t\tassertEquals(\n\t\t\t\"taskNode3\", childWorkflowInstance3_3.getCurrentNodeName());\n\t\tassertNull(childWorkflowInstance3_3.getEndDate());\n\t\tassertEquals(\n\t\t\tworkflowInstanceId3,\n\t\t\tchildWorkflowInstance3_3.getParentWorkflowInstanceId());\n\t\tassertNotNull(childWorkflowInstance3_3.getStartDate());\n\t\tassertEquals(\n\t\t\tDEFINITION_NAME_3,\n\t\t\tchildWorkflowInstance3_3.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition3.getVersion(),\n\t\t\tchildWorkflowInstance3_3.getWorkflowDefinitionVersion());\n\n\t\tMap<String, Object> context3 = workflowInstance3.getContext();\n\n\t\tassertNotNull(context3);\n\t\tassertEquals(1, context3.size());\n\t\tassertEquals(\"success\", context3.get(\"javaNode31\"));\n\n\t\tassertEquals(\"forkNode\", workflowInstance3.getCurrentNodeName());\n\t\tassertNull(workflowInstance3.getEndDate());\n\t\tassertNull(workflowInstance3.getParentWorkflowInstance());\n\t\tassertNotNull(workflowInstance3.getStartDate());\n\t\tassertEquals(\n\t\t\tDEFINITION_NAME_3, workflowInstance3.getWorkflowDefinitionName());\n\t\tassertEquals(\n\t\t\t_workflowDefinition3.getVersion(),\n\t\t\tworkflowInstance3.getWorkflowDefinitionVersion());\n\t\tassertEquals(\n\t\t\tworkflowInstanceId3, workflowInstance3.getWorkflowInstanceId());\n\n\t\t// Clean up\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance1.getWorkflowInstanceId());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance2.getWorkflowInstanceId());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance3.getWorkflowInstanceId());\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void testGetNextTransitionNames() throws Exception {\n\n\t\t// Prepare\n\n\t\tWorkflowInstance workflowInstance1 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition1.getName(),\n\t\t\t\t_workflowDefinition1.getVersion(), null, null);\n\t\tWorkflowInstance workflowInstance2 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition2.getName(),\n\t\t\t\t_workflowDefinition2.getVersion(), null, null);\n\t\tWorkflowInstance workflowInstance3 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition3.getName(),\n\t\t\t\t_workflowDefinition3.getVersion(), null, null);\n\n\t\t// Workflow Instance 1\n\n\t\tList<String> nextTransitionNames1 =\n\t\t\tWorkflowInstanceManagerUtil.getNextTransitionNames(\n\t\t\t\tuser.getUserId(), workflowInstance1.getWorkflowInstanceId());\n\t\tassertEquals(1, nextTransitionNames1.size());\n\t\tassertEquals(\"toTaskNode\", nextTransitionNames1.get(0));\n\n\t\t// Workflow Instance 2\n\n\t\tList<String> nextTransitionNames2 =\n\t\t\tWorkflowInstanceManagerUtil.getNextTransitionNames(\n\t\t\t\tuser.getUserId(), workflowInstance2.getWorkflowInstanceId());\n\t\tassertEquals(1, nextTransitionNames2.size());\n\t\tassertEquals(\"toEnd\", nextTransitionNames2.get(0));\n\n\t\t// Workflow Instance 3\n\n\t\tList<String> nextTransitionNames3 =\n\t\t\tWorkflowInstanceManagerUtil.getNextTransitionNames(\n\t\t\t\tuser.getUserId(), workflowInstance3.getWorkflowInstanceId());\n\t\tassertEquals(3, nextTransitionNames3.size());\n\t\tassertTrue(nextTransitionNames3.contains(\"branch1\"));\n\t\tassertTrue(nextTransitionNames3.contains(\"branch2\"));\n\t\tassertTrue(nextTransitionNames3.contains(\"branch3\"));\n\n\t\t// Clean up\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance1.getWorkflowInstanceId());\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance2.getWorkflowInstanceId());\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance3.getWorkflowInstanceId());\n\t}","id":2412,"modified_method":"public void testGetNextTransitionNames() throws Exception {\n\n\t\t// Prepare\n\n\t\tWorkflowInstance workflowInstance1 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, _workflowDefinition1.getName(),\n\t\t\t\t_workflowDefinition1.getVersion(), null, null);\n\n\t\tWorkflowInstance workflowInstance2 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, _workflowDefinition2.getName(),\n\t\t\t\t_workflowDefinition2.getVersion(), null, null);\n\n\t\tWorkflowInstance workflowInstance3 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, _workflowDefinition3.getName(),\n\t\t\t\t_workflowDefinition3.getVersion(), null, null);\n\n\t\t// Workflow instance 1\n\n\t\tList<String> nextTransitionNames1 =\n\t\t\tWorkflowInstanceManagerUtil.getNextTransitionNames(\n\t\t\t\tdefaultUserId, workflowInstance1.getWorkflowInstanceId());\n\n\t\tassertEquals(1, nextTransitionNames1.size());\n\t\tassertEquals(\"toTaskNode\", nextTransitionNames1.get(0));\n\n\t\t// Workflow instance 2\n\n\t\tList<String> nextTransitionNames2 =\n\t\t\tWorkflowInstanceManagerUtil.getNextTransitionNames(\n\t\t\t\tdefaultUserId, workflowInstance2.getWorkflowInstanceId());\n\n\t\tassertEquals(1, nextTransitionNames2.size());\n\t\tassertEquals(\"toEnd\", nextTransitionNames2.get(0));\n\n\t\t// Workflow instance 3\n\n\t\tList<String> nextTransitionNames3 =\n\t\t\tWorkflowInstanceManagerUtil.getNextTransitionNames(\n\t\t\t\tdefaultUserId, workflowInstance3.getWorkflowInstanceId());\n\n\t\tassertEquals(3, nextTransitionNames3.size());\n\t\tassertTrue(nextTransitionNames3.contains(\"branch1\"));\n\t\tassertTrue(nextTransitionNames3.contains(\"branch2\"));\n\t\tassertTrue(nextTransitionNames3.contains(\"branch3\"));\n\n\t\t// Clean up\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance1.getWorkflowInstanceId());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance2.getWorkflowInstanceId());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance3.getWorkflowInstanceId());\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void testGetWorkflowInstanceCount() throws Exception {\n\n\t\t// Prepare\n\n\t\tWorkflowInstance workflowInstance1_1 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition1.getName(),\n\t\t\t\t_workflowDefinition1.getVersion(), null, null);\n\t\tWorkflowInstance workflowInstance1_2 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition1.getName(),\n\t\t\t\t_workflowDefinition1.getVersion(), null, null);\n\t\tWorkflowInstance workflowInstance1_3 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition1.getName(),\n\t\t\t\t_workflowDefinition1.getVersion(), null, null);\n\t\tWorkflowInstance workflowInstance2_1 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition2.getName(),\n\t\t\t\t_workflowDefinition2.getVersion(), null, null);\n\t\tWorkflowInstance workflowInstance2_2 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition2.getName(),\n\t\t\t\t_workflowDefinition2.getVersion(), null, null);\n\n\t\tworkflowInstance1_1 =\n\t\t\tWorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\t\tuser.getUserId(), workflowInstance1_1.getWorkflowInstanceId(),\n\t\t\t\t\"toTaskNode\", null);\n\t\tworkflowInstance1_1 =\n\t\t\tWorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\t\tuser.getUserId(), workflowInstance1_1.getWorkflowInstanceId(),\n\t\t\t\t\"toEnd\", null);\n\n\t\tworkflowInstance1_2 =\n\t\t\tWorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\t\tuser.getUserId(), workflowInstance1_2.getWorkflowInstanceId(),\n\t\t\t\t\"toTaskNode\", null);\n\t\tworkflowInstance1_2 =\n\t\t\tWorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\t\tuser.getUserId(), workflowInstance1_2.getWorkflowInstanceId(),\n\t\t\t\t\"toEnd\", null);\n\n\t\tworkflowInstance2_1 =\n\t\t\tWorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\t\tuser.getUserId(), workflowInstance2_1.getWorkflowInstanceId(),\n\t\t\t\t\"toEnd\", null);\n\n\t\t// Workflow Definition 1\n\n\t\tint count1 = WorkflowInstanceManagerUtil.getWorkflowInstanceCount(\n\t\t\tDEFINITION_NAME_1, _workflowDefinition1.getVersion(), Boolean.TRUE);\n\t\tassertEquals(2, count1);\n\t\tint count2 = WorkflowInstanceManagerUtil.getWorkflowInstanceCount(\n\t\t\tDEFINITION_NAME_1, _workflowDefinition1.getVersion(),\n\t\t\tBoolean.FALSE);\n\t\tassertEquals(1, count2);\n\n\t\t// Workflow Definition 2\n\n\t\tint count3 = WorkflowInstanceManagerUtil.getWorkflowInstanceCount(\n\t\t\tDEFINITION_NAME_2, _workflowDefinition2.getVersion(), Boolean.TRUE);\n\t\tassertEquals(1, count3);\n\t\tint count4 = WorkflowInstanceManagerUtil.getWorkflowInstanceCount(\n\t\t\tDEFINITION_NAME_2, _workflowDefinition2.getVersion(),\n\t\t\tBoolean.FALSE);\n\t\tassertEquals(1, count4);\n\n\t\t// Clean up\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance1_1.getWorkflowInstanceId());\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance1_2.getWorkflowInstanceId());\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance1_3.getWorkflowInstanceId());\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance2_1.getWorkflowInstanceId());\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance2_2.getWorkflowInstanceId());\n\t}","id":2413,"modified_method":"public void testGetWorkflowInstanceCount() throws Exception {\n\n\t\t// Prepare\n\n\t\tWorkflowInstance workflowInstance1_1 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, _workflowDefinition1.getName(),\n\t\t\t\t_workflowDefinition1.getVersion(), null, null);\n\n\t\tworkflowInstance1_1 =\n\t\t\tWorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\t\tdefaultUserId, workflowInstance1_1.getWorkflowInstanceId(),\n\t\t\t\t\"toTaskNode\", null);\n\n\t\tworkflowInstance1_1 =\n\t\t\tWorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\t\tdefaultUserId, workflowInstance1_1.getWorkflowInstanceId(),\n\t\t\t\t\"toEnd\", null);\n\n\t\tWorkflowInstance workflowInstance1_2 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, _workflowDefinition1.getName(),\n\t\t\t\t_workflowDefinition1.getVersion(), null, null);\n\n\t\tworkflowInstance1_2 =\n\t\t\tWorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\t\tdefaultUserId, workflowInstance1_2.getWorkflowInstanceId(),\n\t\t\t\t\"toTaskNode\", null);\n\n\t\tworkflowInstance1_2 =\n\t\t\tWorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\t\tdefaultUserId, workflowInstance1_2.getWorkflowInstanceId(),\n\t\t\t\t\"toEnd\", null);\n\n\t\tWorkflowInstance workflowInstance1_3 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, _workflowDefinition1.getName(),\n\t\t\t\t_workflowDefinition1.getVersion(), null, null);\n\n\t\tWorkflowInstance workflowInstance2_1 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, _workflowDefinition2.getName(),\n\t\t\t\t_workflowDefinition2.getVersion(), null, null);\n\n\t\tworkflowInstance2_1 =\n\t\t\tWorkflowInstanceManagerUtil.signalWorkflowInstance(\n\t\t\t\tdefaultUserId, workflowInstance2_1.getWorkflowInstanceId(),\n\t\t\t\t\"toEnd\", null);\n\n\t\tWorkflowInstance workflowInstance2_2 =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, _workflowDefinition2.getName(),\n\t\t\t\t_workflowDefinition2.getVersion(), null, null);\n\n\t\t// Workflow definition 1\n\n\t\tint count = WorkflowInstanceManagerUtil.getWorkflowInstanceCount(\n\t\t\tDEFINITION_NAME_1, _workflowDefinition1.getVersion(), Boolean.TRUE);\n\n\t\tassertEquals(2, count);\n\n\t\tcount = WorkflowInstanceManagerUtil.getWorkflowInstanceCount(\n\t\t\tDEFINITION_NAME_1, _workflowDefinition1.getVersion(),\n\t\t\tBoolean.FALSE);\n\n\t\tassertEquals(1, count);\n\n\t\t// Workflow definition 2\n\n\t\tcount = WorkflowInstanceManagerUtil.getWorkflowInstanceCount(\n\t\t\tDEFINITION_NAME_2, _workflowDefinition2.getVersion(), Boolean.TRUE);\n\n\t\tassertEquals(1, count);\n\n\t\tcount = WorkflowInstanceManagerUtil.getWorkflowInstanceCount(\n\t\t\tDEFINITION_NAME_2, _workflowDefinition2.getVersion(),\n\t\t\tBoolean.FALSE);\n\n\t\tassertEquals(1, count);\n\n\t\t// Clean up\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance1_1.getWorkflowInstanceId());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance1_2.getWorkflowInstanceId());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance1_3.getWorkflowInstanceId());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance2_1.getWorkflowInstanceId());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance2_2.getWorkflowInstanceId());\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void tearDown() throws Exception {\n\n\t\tWorkflowDefinitionManagerUtil.undeployWorkflowDefinition(\n\t\t\tuser.getUserId(), DEFINITION_NAME_3,\n\t\t\t_workflowDefinition.getVersion());\n\n\t}","id":2414,"modified_method":"public void tearDown() throws Exception {\n\t\tsuper.tearDown();\n\n\t\tWorkflowDefinitionManagerUtil.undeployWorkflowDefinition(\n\t\t\tdefaultUserId, DEFINITION_NAME_3,\n\t\t\t_workflowDefinition.getVersion());\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void setUp() throws Exception {\n\t\tsuper.setUp();\n\t\t_workflowDefinition =\n\t\t\tWorkflowDefinitionManagerUtil.deployWorkflowDefinition(\n\t\t\t\tuser.getUserId(), DEFINITION_NAME_3,\n\t\t\t\tnew ByteArrayInputStream(definitionBytes3));\n\t}","id":2415,"modified_method":"public void setUp() throws Exception {\n\t\tsuper.setUp();\n\n\t\t_workflowDefinition =\n\t\t\tWorkflowDefinitionManagerUtil.deployWorkflowDefinition(\n\t\t\t\tdefaultUserId, DEFINITION_NAME_3,\n\t\t\t\tnew ByteArrayInputStream(definitionBytes3));\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void testGetWorkflowLogCount() throws Exception {\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition.getName(),\n\t\t\t\t_workflowDefinition.getVersion(), null, null);\n\n\t\tint countForRoot =\n\t\t\tWorkflowLogManagerUtil.getWorkflowLogCount(\n\t\t\t\tworkflowInstance.getWorkflowInstanceId(), false);\n\t\tassertTrue(countForRoot > 0);\n\n\t\tint countForAll =\n\t\t\tWorkflowLogManagerUtil.getWorkflowLogCount(\n\t\t\t\tworkflowInstance.getWorkflowInstanceId(), true);\n\t\tassertTrue(countForAll > 0);\n\n\t\tassertTrue(countForAll > countForRoot);\n\n\t\tworkflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.getWorkflowInstance(\n\t\t\t\tworkflowInstance.getWorkflowInstanceId());\n\n\t\tList<WorkflowInstance> childrenWorkflowInstances =\n\t\t\tworkflowInstance.getChildren();\n\t\tassertEquals(3, childrenWorkflowInstances.size());\n\n\t\tint countForChild1 =\n\t\t\tWorkflowLogManagerUtil.getWorkflowLogCount(\n\t\t\t\tchildrenWorkflowInstances.get(0).getWorkflowInstanceId(), true);\n\t\tassertTrue(countForChild1 > 0);\n\n\t\tint countForChild2 =\n\t\t\tWorkflowLogManagerUtil.getWorkflowLogCount(\n\t\t\t\tchildrenWorkflowInstances.get(1).getWorkflowInstanceId(), true);\n\t\tassertTrue(countForChild1 > 0);\n\n\t\tint countForChild3 =\n\t\t\tWorkflowLogManagerUtil.getWorkflowLogCount(\n\t\t\t\tchildrenWorkflowInstances.get(2).getWorkflowInstanceId(), true);\n\t\tassertTrue(countForChild1 > 0);\n\n\t\tassertEquals(\n\t\t\tcountForAll,\n\t\t\tcountForRoot + countForChild1 + countForChild2 + countForChild3);\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","id":2416,"modified_method":"public void testGetWorkflowLogCount() throws Exception {\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, _workflowDefinition.getName(),\n\t\t\t\t_workflowDefinition.getVersion(), null, null);\n\n\t\tint rootCount = WorkflowLogManagerUtil.getWorkflowLogCount(\n\t\t\tworkflowInstance.getWorkflowInstanceId(), false);\n\n\t\tassertTrue(rootCount > 0);\n\n\t\tint allCount = WorkflowLogManagerUtil.getWorkflowLogCount(\n\t\t\tworkflowInstance.getWorkflowInstanceId(), true);\n\n\t\tassertTrue(allCount > 0);\n\n\t\tassertTrue(allCount > rootCount);\n\n\t\tList<WorkflowInstance> childrenWorkflowInstances =\n\t\t\tworkflowInstance.getChildrenWorkflowInstances();\n\n\t\tassertEquals(3, childrenWorkflowInstances.size());\n\n\t\tWorkflowInstance childWorkflowInstance1 = childrenWorkflowInstances.get(\n\t\t\t0);\n\n\t\tint childCount1 = WorkflowLogManagerUtil.getWorkflowLogCount(\n\t\t\tchildWorkflowInstance1.getWorkflowInstanceId(), true);\n\n\t\tassertTrue(childCount1 > 0);\n\n\t\tWorkflowInstance childWorkflowInstance2 = childrenWorkflowInstances.get(\n\t\t\t1);\n\n\t\tint childCount2 = WorkflowLogManagerUtil.getWorkflowLogCount(\n\t\t\tchildWorkflowInstance2.getWorkflowInstanceId(), true);\n\n\t\tassertTrue(childCount2 > 0);\n\n\t\tWorkflowInstance childWorkflowInstance3 = childrenWorkflowInstances.get(\n\t\t\t2);\n\n\t\tint childCount3 = WorkflowLogManagerUtil.getWorkflowLogCount(\n\t\t\tchildWorkflowInstance3.getWorkflowInstanceId(), true);\n\n\t\tassertTrue(childCount3 > 0);\n\n\t\tassertEquals(\n\t\t\tallCount, rootCount + childCount1 + childCount2 + childCount3);\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void testGetWorkflowLogs() throws Exception {\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tuser.getUserId(), _workflowDefinition.getName(),\n\t\t\t\t_workflowDefinition.getVersion(), null, null);\n\n\t\tlong rootWorkflowInstanceId = workflowInstance.getWorkflowInstanceId();\n\n\t\tList<WorkflowLog> logsForRoot =\n\t\t\tWorkflowLogManagerUtil.getWorkflowLogs(\n\t\t\t\trootWorkflowInstanceId, false, QueryUtil.ALL_POS,\n\t\t\t\tQueryUtil.ALL_POS, new WorkflowLogCreateDateComparator(true));\n\t\tassertTrue(logsForRoot.size() > 0);\n\n\t\tfor(WorkflowLog log : logsForRoot) {\n\t\t\tassertEquals(rootWorkflowInstanceId, log.getWorkflowInstanceId());\n\t\t}\n\t\tList<WorkflowLog> logsForAll =\n\t\t\tWorkflowLogManagerUtil.getWorkflowLogs(\n\t\t\t\trootWorkflowInstanceId, true, QueryUtil.ALL_POS,\n\t\t\t\tQueryUtil.ALL_POS, new WorkflowLogCreateDateComparator(true));\n\t\tassertTrue(logsForAll.size() > 0);\n\n\t\tassertTrue(logsForAll.size() > logsForRoot.size());\n\n\t\tworkflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.getWorkflowInstance(\n\t\t\t\tworkflowInstance.getWorkflowInstanceId());\n\n\t\tList<WorkflowInstance> childrenWorkflowInstances =\n\t\t\tworkflowInstance.getChildren();\n\t\tassertEquals(3, childrenWorkflowInstances.size());\n\n\t\tlong childWorkflowInstanceId1 =\n\t\t\tchildrenWorkflowInstances.get(0).getWorkflowInstanceId();\n\t\tList<WorkflowLog> logsForChild1 =\n\t\t\tWorkflowLogManagerUtil.getWorkflowLogs(\n\t\t\t\tchildWorkflowInstanceId1, true, QueryUtil.ALL_POS,\n\t\t\t\tQueryUtil.ALL_POS, new WorkflowLogCreateDateComparator(true));\n\t\tassertTrue(logsForChild1.size() > 0);\n\t\tfor(WorkflowLog log : logsForChild1) {\n\t\t\tassertEquals(childWorkflowInstanceId1, log.getWorkflowInstanceId());\n\t\t}\n\n\t\tlong childWorkflowInstanceId2 =\n\t\t\tchildrenWorkflowInstances.get(1).getWorkflowInstanceId();\n\t\tList<WorkflowLog> logsForChild2 =\n\t\t\tWorkflowLogManagerUtil.getWorkflowLogs(\n\t\t\t\tchildWorkflowInstanceId2, true, QueryUtil.ALL_POS,\n\t\t\t\tQueryUtil.ALL_POS, new WorkflowLogCreateDateComparator(true));\n\t\tassertTrue(logsForChild2.size() > 0);\n\t\tfor(WorkflowLog log : logsForChild2) {\n\t\t\tassertEquals(childWorkflowInstanceId2, log.getWorkflowInstanceId());\n\t\t}\n\n\t\tlong childWorkflowInstanceId3 =\n\t\t\tchildrenWorkflowInstances.get(2).getWorkflowInstanceId();\n\t\tList<WorkflowLog> logsForChild3 =\n\t\t\tWorkflowLogManagerUtil.getWorkflowLogs(\n\t\t\t\tchildWorkflowInstanceId3, true, QueryUtil.ALL_POS,\n\t\t\t\tQueryUtil.ALL_POS, new WorkflowLogCreateDateComparator(true));\n\t\tassertTrue(logsForChild3.size() > 0);\n\t\tfor(WorkflowLog log : logsForChild3) {\n\t\t\tassertEquals(childWorkflowInstanceId3, log.getWorkflowInstanceId());\n\t\t}\n\n\t\tassertEquals(\n\t\t\tlogsForAll.size(),\n\t\t\tlogsForRoot.size() + logsForChild1.size() + logsForChild2.size() +\n\t\t\t\tlogsForChild3.size());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\trootWorkflowInstanceId);\n\t}","id":2417,"modified_method":"public void testGetWorkflowLogs() throws Exception {\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, _workflowDefinition.getName(),\n\t\t\t\t_workflowDefinition.getVersion(), null, null);\n\n\t\tList<WorkflowLog> rootWorkflowLogs =\n\t\t\tWorkflowLogManagerUtil.getWorkflowLogs(\n\t\t\t\tworkflowInstance.getWorkflowInstanceId(), false,\n\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowLogCreateDateComparator(true));\n\n\t\tassertTrue(!rootWorkflowLogs.isEmpty());\n\n\t\tfor (WorkflowLog workflowLog : rootWorkflowLogs) {\n\t\t\tassertEquals(\n\t\t\t\tworkflowInstance.getWorkflowInstanceId(),\n\t\t\t\tworkflowLog.getWorkflowInstanceId());\n\t\t}\n\n\t\tList<WorkflowLog> allWorkflowLogs =\n\t\t\tWorkflowLogManagerUtil.getWorkflowLogs(\n\t\t\t\tworkflowInstance.getWorkflowInstanceId(), true,\n\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowLogCreateDateComparator(true));\n\n\t\tassertTrue(!allWorkflowLogs.isEmpty());\n\t\tassertTrue(allWorkflowLogs.size() > rootWorkflowLogs.size());\n\n\t\tList<WorkflowInstance> childrenWorkflowInstances =\n\t\t\tworkflowInstance.getChildrenWorkflowInstances();\n\n\t\tassertEquals(3, childrenWorkflowInstances.size());\n\n\t\tWorkflowInstance childWorkflowInstance1 = childrenWorkflowInstances.get(\n\t\t\t0);\n\n\t\tList<WorkflowLog> childWorkflowLogs1 =\n\t\t\tWorkflowLogManagerUtil.getWorkflowLogs(\n\t\t\t\tchildWorkflowInstance1.getWorkflowInstanceId(), true,\n\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowLogCreateDateComparator(true));\n\n\t\tassertTrue(!childWorkflowLogs1.isEmpty());\n\n\t\tfor (WorkflowLog workflowLog : childWorkflowLogs1) {\n\t\t\tassertEquals(\n\t\t\t\tchildWorkflowInstance1.getWorkflowInstanceId(),\n\t\t\t\tworkflowLog.getWorkflowInstanceId());\n\t\t}\n\n\t\tWorkflowInstance childWorkflowInstance2 = childrenWorkflowInstances.get(\n\t\t\t1);\n\n\t\tList<WorkflowLog> childWorkflowLogs2 =\n\t\t\tWorkflowLogManagerUtil.getWorkflowLogs(\n\t\t\t\tchildWorkflowInstance2.getWorkflowInstanceId(), true,\n\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowLogCreateDateComparator(true));\n\n\t\tassertTrue(!childWorkflowLogs2.isEmpty());\n\n\t\tfor (WorkflowLog workflowLog : childWorkflowLogs2) {\n\t\t\tassertEquals(\n\t\t\t\tchildWorkflowInstance2.getWorkflowInstanceId(),\n\t\t\t\tworkflowLog.getWorkflowInstanceId());\n\t\t}\n\n\t\tWorkflowInstance childWorkflowInstance3 = childrenWorkflowInstances.get(\n\t\t\t2);\n\n\t\tList<WorkflowLog> childWorkflowLogs3 =\n\t\t\tWorkflowLogManagerUtil.getWorkflowLogs(\n\t\t\t\tchildWorkflowInstance3.getWorkflowInstanceId(), true,\n\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowLogCreateDateComparator(true));\n\n\t\tassertTrue(!childWorkflowLogs2.isEmpty());\n\n\t\tfor (WorkflowLog workflowLog : childWorkflowLogs3) {\n\t\t\tassertEquals(\n\t\t\t\tchildWorkflowInstance3.getWorkflowInstanceId(),\n\t\t\t\tworkflowLog.getWorkflowInstanceId());\n\t\t}\n\n\t\tassertEquals(\n\t\t\tallWorkflowLogs.size(),\n\t\t\trootWorkflowLogs.size() + childWorkflowLogs1.size() +\n\t\t\t\tchildWorkflowLogs2.size() + childWorkflowLogs3.size());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void setUp() throws Exception {\n\t\tsuper.setUp();\n\t\t_workflowDefinition =\n\t\t\tWorkflowDefinitionManagerUtil.deployWorkflowDefinition(\n\t\t\tuser.getUserId(), DEFINITION_NAME_3,\n\t\t\tnew ByteArrayInputStream(definitionBytes3));\n\t}","id":2418,"modified_method":"public void setUp() throws Exception {\n\t\tsuper.setUp();\n\n\t\t_workflowDefinition =\n\t\t\tWorkflowDefinitionManagerUtil.deployWorkflowDefinition(\n\t\t\t\tdefaultUserId, DEFINITION_NAME_3,\n\t\t\t\tnew ByteArrayInputStream(definitionBytes3));\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void testGetNextTransitionNames() throws Exception {\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\tuser.getUserId(), DEFINITION_NAME_3,\n\t\t\t_workflowDefinition.getVersion(), null, null);\n\n\t\tworkflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.getWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\n\t\tList<WorkflowInstance> childrenWorkflowInstances =\n\t\t\tworkflowInstance.getChildren();\n\t\tassertEquals(3, childrenWorkflowInstances.size());\n\n\t\tCollections.sort(\n\t\t\tchildrenWorkflowInstances, new Comparator<WorkflowInstance>() {\n\n\t\t\tpublic int compare(\n\t\t\t\tWorkflowInstance workflowInstance1,\n\t\t\t\tWorkflowInstance workflowInstance2) {\n\t\t\t\treturn workflowInstance1.getCurrentNodeName().compareTo(\n\t\t\t\t\tworkflowInstance2.getCurrentNodeName());\n\t\t\t}\n\t\t});\n\n\t\tlong[] roleIds = user.getRoleIds();\n\t\tassertTrue(roleIds.length > 0);\n\n\t\tlong testRoleId = roleIds[0];\n\n\t\tWorkflowInstance childInstance1 = childrenWorkflowInstances.get(0);\n\n\t\tList<WorkflowTask> childWorkflowTasks1 =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\tchildInstance1.getWorkflowInstanceId(), null,\n\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\tassertEquals(1, childWorkflowTasks1.size());\n\t\tWorkflowTask workflowTask1 = childWorkflowTasks1.get(0);\n\n\t\tworkflowTask1 = WorkflowTaskManagerUtil.assignWorkflowTaskToRole(\n\t\t\tuser.getUserId(), workflowTask1.getWorkflowTaskId(), testRoleId,\n\t\t\t\"Assign to role\", null);\n\t\tworkflowTask1 = WorkflowTaskManagerUtil.assignWorkflowTaskToUser(\n\t\t\tuser.getUserId(), workflowTask1.getWorkflowTaskId(),\n\t\t\tuser.getUserId(), \"Assign to user\", null);\n\n\t\tList<String> nextTransitionNames1 =\n\t\t\tWorkflowTaskManagerUtil.getNextTransitionNames(\n\t\t\t\tuser.getUserId(), workflowTask1.getWorkflowTaskId());\n\t\tassertEquals(1, nextTransitionNames1.size());\n\t\tassertEquals(\"toJoinNode\", nextTransitionNames1.get(0));\n\n\t\tWorkflowInstance childInstance2 = childrenWorkflowInstances.get(1);\n\n\t\tList<WorkflowTask> childWorkflowTasks2 =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\tchildInstance2.getWorkflowInstanceId(), null,\n\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\tassertEquals(1, childWorkflowTasks2.size());\n\t\tWorkflowTask workflowTask2 = childWorkflowTasks2.get(0);\n\n\t\tworkflowTask2 = WorkflowTaskManagerUtil.assignWorkflowTaskToRole(\n\t\t\tuser.getUserId(), workflowTask2.getWorkflowTaskId(), testRoleId,\n\t\t\t\"Assign to role\", null);\n\t\tworkflowTask2 = WorkflowTaskManagerUtil.assignWorkflowTaskToUser(\n\t\t\tuser.getUserId(), workflowTask2.getWorkflowTaskId(),\n\t\t\tuser.getUserId(), \"Assign to user\", null);\n\n\t\tList<String> nextTransitionNames2 =\n\t\t\tWorkflowTaskManagerUtil.getNextTransitionNames(\n\t\t\t\tuser.getUserId(), workflowTask2.getWorkflowTaskId());\n\t\tassertEquals(1, nextTransitionNames2.size());\n\t\tassertEquals(\"toTaskNode4\", nextTransitionNames2.get(0));\n\n\t\tWorkflowInstance childInstance3 = childrenWorkflowInstances.get(2);\n\n\t\tList<WorkflowTask> childWorkflowTasks3 =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\tchildInstance3.getWorkflowInstanceId(), null,\n\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\tassertEquals(1, childWorkflowTasks3.size());\n\t\tWorkflowTask workflowTask3 = childWorkflowTasks3.get(0);\n\n\t\tworkflowTask3 = WorkflowTaskManagerUtil.assignWorkflowTaskToRole(\n\t\t\tuser.getUserId(), workflowTask3.getWorkflowTaskId(), testRoleId,\n\t\t\t\"Assign to role\", null);\n\t\tworkflowTask3 = WorkflowTaskManagerUtil.assignWorkflowTaskToUser(\n\t\t\tuser.getUserId(), workflowTask3.getWorkflowTaskId(),\n\t\t\tuser.getUserId(), \"Assign to user\", null);\n\n\t\tList<String> nextTransitionNames3 =\n\t\t\tWorkflowTaskManagerUtil.getNextTransitionNames(\n\t\t\t\tuser.getUserId(), workflowTask3.getWorkflowTaskId());\n\t\tassertEquals(1, nextTransitionNames3.size());\n\t\tassertEquals(\"toJoinNode\", nextTransitionNames3.get(0));\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","id":2419,"modified_method":"public void testGetNextTransitionNames() throws Exception {\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, DEFINITION_NAME_3,\n\t\t\t\t_workflowDefinition.getVersion(), null, null);\n\n\t\tList<WorkflowInstance> childrenWorkflowInstances =\n\t\t\tworkflowInstance.getChildrenWorkflowInstances();\n\n\t\tassertEquals(3, childrenWorkflowInstances.size());\n\n\t\tWorkflowInstance childWorkflowInstance1 = childrenWorkflowInstances.get(\n\t\t\t0);\n\n\t\tList<WorkflowTask> childWorkflowTasks1 =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\tchildWorkflowInstance1.getWorkflowInstanceId(), null,\n\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\tassertEquals(1, childWorkflowTasks1.size());\n\n\t\tWorkflowTask workflowTask1 = childWorkflowTasks1.get(0);\n\n\t\tworkflowTask1 = WorkflowTaskManagerUtil.assignWorkflowTaskToRole(\n\t\t\tdefaultUserId, workflowTask1.getWorkflowTaskId(), guestRoleId, null,\n\t\t\tnull);\n\n\t\tworkflowTask1 = WorkflowTaskManagerUtil.assignWorkflowTaskToUser(\n\t\t\tdefaultUserId, workflowTask1.getWorkflowTaskId(), defaultUserId,\n\t\t\tnull, null);\n\n\t\tList<String> nextTransitionNames1 =\n\t\t\tWorkflowTaskManagerUtil.getNextTransitionNames(\n\t\t\t\tdefaultUserId, workflowTask1.getWorkflowTaskId());\n\n\t\tassertEquals(1, nextTransitionNames1.size());\n\t\tassertEquals(\"toJoinNode\", nextTransitionNames1.get(0));\n\n\t\tWorkflowInstance childWorkflowInstance2 = childrenWorkflowInstances.get(\n\t\t\t1);\n\n\t\tList<WorkflowTask> childWorkflowTasks2 =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\tchildWorkflowInstance2.getWorkflowInstanceId(), null,\n\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\tassertEquals(1, childWorkflowTasks2.size());\n\n\t\tWorkflowTask workflowTask2 = childWorkflowTasks2.get(0);\n\n\t\tworkflowTask2 = WorkflowTaskManagerUtil.assignWorkflowTaskToRole(\n\t\t\tdefaultUserId, workflowTask2.getWorkflowTaskId(), guestRoleId,\n\t\t\tnull, null);\n\n\t\tworkflowTask2 = WorkflowTaskManagerUtil.assignWorkflowTaskToUser(\n\t\t\tdefaultUserId, workflowTask2.getWorkflowTaskId(),\n\t\t\tdefaultUserId, null, null);\n\n\t\tList<String> nextTransitionNames2 =\n\t\t\tWorkflowTaskManagerUtil.getNextTransitionNames(\n\t\t\t\tdefaultUserId, workflowTask2.getWorkflowTaskId());\n\n\t\tassertEquals(1, nextTransitionNames2.size());\n\t\tassertEquals(\"toTaskNode4\", nextTransitionNames2.get(0));\n\n\t\tWorkflowInstance childWorkflowInstance3 = childrenWorkflowInstances.get(\n\t\t\t2);\n\n\t\tList<WorkflowTask> childWorkflowTasks3 =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\tchildWorkflowInstance3.getWorkflowInstanceId(), null,\n\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\tassertEquals(1, childWorkflowTasks3.size());\n\n\t\tWorkflowTask workflowTask3 = childWorkflowTasks3.get(0);\n\n\t\tworkflowTask3 = WorkflowTaskManagerUtil.assignWorkflowTaskToRole(\n\t\t\tdefaultUserId, workflowTask3.getWorkflowTaskId(), guestRoleId,\n\t\t\tnull, null);\n\n\t\tworkflowTask3 = WorkflowTaskManagerUtil.assignWorkflowTaskToUser(\n\t\t\tdefaultUserId, workflowTask3.getWorkflowTaskId(), defaultUserId,\n\t\t\tnull, null);\n\n\t\tList<String> nextTransitionNames3 =\n\t\t\tWorkflowTaskManagerUtil.getNextTransitionNames(\n\t\t\t\tdefaultUserId, workflowTask3.getWorkflowTaskId());\n\n\t\tassertEquals(1, nextTransitionNames3.size());\n\t\tassertEquals(\"toJoinNode\", nextTransitionNames3.get(0));\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void testGetWorkflowTaskCountByRole() throws Exception {\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\tuser.getUserId(), DEFINITION_NAME_3,\n\t\t\t_workflowDefinition.getVersion(), null, null);\n\n\t\tlong[] roleIds = user.getRoleIds();\n\t\tassertTrue(roleIds.length > 0);\n\n\t\tlong testRoleId = roleIds[0];\n\n\t\tint count = WorkflowTaskManagerUtil.getWorkflowTaskCountByRole(\n\t\t\ttestRoleId, null);\n\t\tassertEquals(0, count);\n\n\t\tworkflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.getWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\n\t\tList<WorkflowInstance> childrenWorkflowInstances =\n\t\t\tworkflowInstance.getChildren();\n\n\t\tfor (WorkflowInstance childWorkflowInstance : childrenWorkflowInstances)\n\t\t{\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\t\t\tWorkflowTask workflowTask = childWorkflowTasks.get(0);\n\t\t\tassertEquals(0L, workflowTask.getAssigneeRoleId());\n\t\t\tworkflowTask = WorkflowTaskManagerUtil.assignWorkflowTaskToRole(\n\t\t\t\tuser.getUserId(), workflowTask.getWorkflowTaskId(), testRoleId,\n\t\t\t\t\"Assign to role\", null);\n\t\t\tworkflowTask = WorkflowTaskManagerUtil.assignWorkflowTaskToUser(\n\t\t\t\tuser.getUserId(), workflowTask.getWorkflowTaskId(),\n\t\t\t\tuser.getUserId(), \"Assign to user\", null);\n\t\t\tassertEquals(testRoleId, workflowTask.getAssigneeRoleId());\n\t\t}\n\n\t\tcount = WorkflowTaskManagerUtil.getWorkflowTaskCountByRole(\n\t\t\ttestRoleId, null);\n\t\tassertEquals(3, count);\n\n\t\tcount = WorkflowTaskManagerUtil.getWorkflowTaskCountByRole(\n\t\t\ttestRoleId, Boolean.TRUE);\n\t\tassertEquals(0, count);\n\n\t\tcount = WorkflowTaskManagerUtil.getWorkflowTaskCountByRole(\n\t\t\ttestRoleId, Boolean.FALSE);\n\t\tassertEquals(3, count);\n\n\t\tfor (WorkflowInstance childWorkflowInstance : childrenWorkflowInstances)\n\t\t{\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\t\t\tWorkflowTask workflowTask = childWorkflowTasks.get(0);\n\t\t\tWorkflowTaskManagerUtil.completeWorkflowTask(\n\t\t\t\tuser.getUserId(), workflowTask.getWorkflowTaskId(), null,\n\t\t\t\t\"Complete workflow task\", null);\n\t\t}\n\n\t\tcount = WorkflowTaskManagerUtil.getWorkflowTaskCountByRole(\n\t\t\ttestRoleId, null);\n\t\tassertEquals(3, count);\n\n\t\tcount = WorkflowTaskManagerUtil.getWorkflowTaskCountByRole(\n\t\t\ttestRoleId, Boolean.TRUE);\n\t\tassertEquals(3, count);\n\n\t\tcount = WorkflowTaskManagerUtil.getWorkflowTaskCountByRole(\n\t\t\ttestRoleId, Boolean.FALSE);\n\t\tassertEquals(0, count);\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","id":2420,"modified_method":"public void testGetWorkflowTaskCountByRole() throws Exception {\n\t\tint count = WorkflowTaskManagerUtil.getWorkflowTaskCountByRole(\n\t\t\tguestRoleId, null);\n\n\t\tassertEquals(0, count);\n\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, DEFINITION_NAME_3,\n\t\t\t\t_workflowDefinition.getVersion(), null, null);\n\n\t\tList<WorkflowInstance> childrenWorkflowInstances =\n\t\t\tworkflowInstance.getChildrenWorkflowInstances();\n\n\t\tfor (WorkflowInstance childWorkflowInstance :\n\t\t\t\tchildrenWorkflowInstances) {\n\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\n\t\t\tWorkflowTask childWorkflowTask = childWorkflowTasks.get(0);\n\n\t\t\tassertEquals(0L, childWorkflowTask.getAssigneeRoleId());\n\n\t\t\tchildWorkflowTask =\n\t\t\t\tWorkflowTaskManagerUtil.assignWorkflowTaskToRole(\n\t\t\t\t\tdefaultUserId, childWorkflowTask.getWorkflowTaskId(),\n\t\t\t\t\tguestRoleId, null, null);\n\n\t\t\tchildWorkflowTask =\n\t\t\t\tWorkflowTaskManagerUtil.assignWorkflowTaskToUser(\n\t\t\t\t\tdefaultUserId, childWorkflowTask.getWorkflowTaskId(),\n\t\t\t\t\tdefaultUserId, null, null);\n\n\t\t\tassertEquals(guestRoleId, childWorkflowTask.getAssigneeRoleId());\n\t\t}\n\n\t\tcount = WorkflowTaskManagerUtil.getWorkflowTaskCountByRole(\n\t\t\tguestRoleId, null);\n\n\t\tassertEquals(3, count);\n\n\t\tcount = WorkflowTaskManagerUtil.getWorkflowTaskCountByRole(\n\t\t\tguestRoleId, Boolean.TRUE);\n\n\t\tassertEquals(0, count);\n\n\t\tcount = WorkflowTaskManagerUtil.getWorkflowTaskCountByRole(\n\t\t\tguestRoleId, Boolean.FALSE);\n\n\t\tassertEquals(3, count);\n\n\t\tfor (WorkflowInstance childWorkflowInstance :\n\t\t\t\tchildrenWorkflowInstances) {\n\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\n\t\t\tWorkflowTask childWorkflowTask = childWorkflowTasks.get(0);\n\n\t\t\tWorkflowTaskManagerUtil.completeWorkflowTask(\n\t\t\t\tdefaultUserId, childWorkflowTask.getWorkflowTaskId(), null,\n\t\t\t\tnull, null);\n\t\t}\n\n\t\tcount = WorkflowTaskManagerUtil.getWorkflowTaskCountByRole(\n\t\t\tguestRoleId, null);\n\n\t\tassertEquals(3, count);\n\n\t\tcount = WorkflowTaskManagerUtil.getWorkflowTaskCountByRole(\n\t\t\tguestRoleId, Boolean.TRUE);\n\n\t\tassertEquals(3, count);\n\n\t\tcount = WorkflowTaskManagerUtil.getWorkflowTaskCountByRole(\n\t\t\tguestRoleId, Boolean.FALSE);\n\n\t\tassertEquals(0, count);\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void testGetWorkflowTasksByuser() throws Exception {\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\tuser.getUserId(), DEFINITION_NAME_3,\n\t\t\t_workflowDefinition.getVersion(), null, null);\n\n\t\tlong[] roleIds = user.getRoleIds();\n\t\tassertTrue(roleIds.length > 0);\n\n\t\tlong testRoleId = roleIds[0];\n\n\t\tList<WorkflowTask> workflowTasks =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByUser(\n\t\t\t\tuser.getUserId(), null, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\tassertEquals(0, workflowTasks.size());\n\n\t\tworkflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.getWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\n\t\tList<WorkflowInstance> childrenWorkflowInstances =\n\t\t\tworkflowInstance.getChildren();\n\n\t\tfor (WorkflowInstance childWorkflowInstance : childrenWorkflowInstances)\n\t\t{\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\t\t\tWorkflowTask workflowTask = childWorkflowTasks.get(0);\n\t\t\tassertEquals(0L, workflowTask.getAssigneeRoleId());\n\t\t\tworkflowTask = WorkflowTaskManagerUtil.assignWorkflowTaskToRole(\n\t\t\t\tuser.getUserId(), workflowTask.getWorkflowTaskId(), testRoleId,\n\t\t\t\t\"Assign to role\", null);\n\t\t\tworkflowTask = WorkflowTaskManagerUtil.assignWorkflowTaskToUser(\n\t\t\t\tuser.getUserId(), workflowTask.getWorkflowTaskId(),\n\t\t\t\tuser.getUserId(), \"Assign to user\", null);\n\t\t\tassertEquals(testRoleId, workflowTask.getAssigneeRoleId());\n\t\t}\n\n\t\tworkflowTasks =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByUser(\n\t\t\t\tuser.getUserId(), null, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\tassertEquals(3, workflowTasks.size());\n\t\tWorkflowTask workflowTask1 = workflowTasks.get(0);\n\t\tassertEquals(testRoleId, workflowTask1.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-1\", workflowTask1.getName());\n\t\tassertNull(workflowTask1.getCompletionDate());\n\t\tWorkflowTask workflowTask2 = workflowTasks.get(1);\n\t\tassertEquals(testRoleId, workflowTask2.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-2\", workflowTask2.getName());\n\t\tassertNull(workflowTask2.getCompletionDate());\n\t\tWorkflowTask workflowTask3 = workflowTasks.get(2);\n\t\tassertEquals(testRoleId, workflowTask3.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-3\", workflowTask3.getName());\n\t\tassertNull(workflowTask3.getCompletionDate());\n\n\t\tworkflowTasks =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByUser(\n\t\t\t\tuser.getUserId(), Boolean.TRUE, QueryUtil.ALL_POS,\n\t\t\t\tQueryUtil.ALL_POS, new WorkflowTaskNameComparator(true));\n\t\tassertEquals(0, workflowTasks.size());\n\n\t\tworkflowTasks =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByUser(\n\t\t\t\tuser.getUserId(), Boolean.FALSE, QueryUtil.ALL_POS,\n\t\t\t\tQueryUtil.ALL_POS, new WorkflowTaskNameComparator(true));\n\t\tassertEquals(3, workflowTasks.size());\n\t\tassertEquals(3, workflowTasks.size());\n\t\tworkflowTask1 = workflowTasks.get(0);\n\t\tassertEquals(testRoleId, workflowTask1.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-1\", workflowTask1.getName());\n\t\tassertNull(workflowTask1.getCompletionDate());\n\t\tworkflowTask2 = workflowTasks.get(1);\n\t\tassertEquals(testRoleId, workflowTask2.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-2\", workflowTask2.getName());\n\t\tassertNull(workflowTask2.getCompletionDate());\n\t\tworkflowTask3 = workflowTasks.get(2);\n\t\tassertEquals(testRoleId, workflowTask3.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-3\", workflowTask3.getName());\n\t\tassertNull(workflowTask3.getCompletionDate());\n\n\t\tfor (WorkflowInstance childWorkflowInstance : childrenWorkflowInstances)\n\t\t{\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\t\t\tWorkflowTask workflowTask = childWorkflowTasks.get(0);\n\t\t\tWorkflowTaskManagerUtil.completeWorkflowTask(\n\t\t\t\tuser.getUserId(), workflowTask.getWorkflowTaskId(), null,\n\t\t\t\t\"Complete workflow task\", null);\n\t\t}\n\n\t\tworkflowTasks =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByUser(\n\t\t\t\tuser.getUserId(), null, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\tassertEquals(4, workflowTasks.size());\n\t\tworkflowTask1 = workflowTasks.get(0);\n\t\tassertEquals(testRoleId, workflowTask1.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-1\", workflowTask1.getName());\n\t\tassertNotNull(workflowTask1.getCompletionDate());\n\t\tworkflowTask2 = workflowTasks.get(1);\n\t\tassertEquals(testRoleId, workflowTask2.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-2\", workflowTask2.getName());\n\t\tassertNotNull(workflowTask2.getCompletionDate());\n\t\tworkflowTask3 = workflowTasks.get(2);\n\t\tassertEquals(testRoleId, workflowTask3.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-3\", workflowTask3.getName());\n\t\tassertNotNull(workflowTask3.getCompletionDate());\n\t\tWorkflowTask workflowTask4 = workflowTasks.get(3);\n\t\tassertEquals(0L, workflowTask4.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-4\", workflowTask4.getName());\n\t\tassertNull(workflowTask4.getCompletionDate());\n\n\t\tworkflowTasks =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByUser(\n\t\t\t\tuser.getUserId(), Boolean.TRUE, QueryUtil.ALL_POS,\n\t\t\t\tQueryUtil.ALL_POS, new WorkflowTaskNameComparator(true));\n\t\tassertEquals(3, workflowTasks.size());\n\t\tworkflowTask1 = workflowTasks.get(0);\n\t\tassertEquals(testRoleId, workflowTask1.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-1\", workflowTask1.getName());\n\t\tassertNotNull(workflowTask1.getCompletionDate());\n\t\tworkflowTask2 = workflowTasks.get(1);\n\t\tassertEquals(testRoleId, workflowTask2.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-2\", workflowTask2.getName());\n\t\tassertNotNull(workflowTask2.getCompletionDate());\n\t\tworkflowTask3 = workflowTasks.get(2);\n\t\tassertEquals(testRoleId, workflowTask3.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-3\", workflowTask3.getName());\n\t\tassertNotNull(workflowTask3.getCompletionDate());\n\n\t\tworkflowTasks =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByUser(\n\t\t\t\tuser.getUserId(), Boolean.FALSE, QueryUtil.ALL_POS,\n\t\t\t\tQueryUtil.ALL_POS, new WorkflowTaskNameComparator(true));\n\t\tassertEquals(1, workflowTasks.size());\n\t\tworkflowTask4 = workflowTasks.get(0);\n\t\tassertEquals(0L, workflowTask4.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-4\", workflowTask4.getName());\n\t\tassertNull(workflowTask4.getCompletionDate());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","id":2421,"modified_method":"public void testGetWorkflowTasksByUser() throws Exception {\n\t\tList<WorkflowTask> workflowTasks =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByUser(\n\t\t\t\tdefaultUserId, null, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\tassertEquals(0, workflowTasks.size());\n\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, DEFINITION_NAME_3,\n\t\t\t\t_workflowDefinition.getVersion(), null, null);\n\n\t\tList<WorkflowInstance> childrenWorkflowInstances =\n\t\t\tworkflowInstance.getChildrenWorkflowInstances();\n\n\t\tfor (WorkflowInstance childWorkflowInstance :\n\t\t\t\tchildrenWorkflowInstances) {\n\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\n\t\t\tWorkflowTask childWorkflowTask = childWorkflowTasks.get(0);\n\n\t\t\tassertEquals(0L, childWorkflowTask.getAssigneeRoleId());\n\n\t\t\tchildWorkflowTask =\n\t\t\t\tWorkflowTaskManagerUtil.assignWorkflowTaskToRole(\n\t\t\t\t\tdefaultUserId, childWorkflowTask.getWorkflowTaskId(),\n\t\t\t\t\tguestRoleId, null, null);\n\n\t\t\tchildWorkflowTask =\n\t\t\t\tWorkflowTaskManagerUtil.assignWorkflowTaskToUser(\n\t\t\t\t\tdefaultUserId, childWorkflowTask.getWorkflowTaskId(),\n\t\t\t\t\tdefaultUserId, null, null);\n\n\t\t\tassertEquals(defaultUserId, childWorkflowTask.getAssigneeUserId());\n\t\t}\n\n\t\tworkflowTasks = WorkflowTaskManagerUtil.getWorkflowTasksByUser(\n\t\t\tdefaultUserId, null, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\tassertEquals(3, workflowTasks.size());\n\n\t\tWorkflowTask workflowTask1 = workflowTasks.get(0);\n\n\t\tassertEquals(defaultUserId, workflowTask1.getAssigneeUserId());\n\t\tassertNull(workflowTask1.getCompletionDate());\n\t\tassertEquals(\"Task3-1\", workflowTask1.getName());\n\n\t\tWorkflowTask workflowTask2 = workflowTasks.get(1);\n\n\t\tassertEquals(defaultUserId, workflowTask2.getAssigneeUserId());\n\t\tassertNull(workflowTask2.getCompletionDate());\n\t\tassertEquals(\"Task3-2\", workflowTask2.getName());\n\n\t\tWorkflowTask workflowTask3 = workflowTasks.get(2);\n\n\t\tassertEquals(defaultUserId, workflowTask3.getAssigneeUserId());\n\t\tassertNull(workflowTask3.getCompletionDate());\n\t\tassertEquals(\"Task3-3\", workflowTask3.getName());\n\n\t\tworkflowTasks = WorkflowTaskManagerUtil.getWorkflowTasksByUser(\n\t\t\tdefaultUserId, Boolean.TRUE, QueryUtil.ALL_POS,\n\t\t\tQueryUtil.ALL_POS, new WorkflowTaskNameComparator(true));\n\n\t\tassertEquals(0, workflowTasks.size());\n\n\t\tworkflowTasks = WorkflowTaskManagerUtil.getWorkflowTasksByUser(\n\t\t\tdefaultUserId, Boolean.FALSE, QueryUtil.ALL_POS,\n\t\t\tQueryUtil.ALL_POS, new WorkflowTaskNameComparator(true));\n\n\t\tassertEquals(3, workflowTasks.size());\n\n\t\tworkflowTask1 = workflowTasks.get(0);\n\n\t\tassertEquals(defaultUserId, workflowTask1.getAssigneeUserId());\n\t\tassertNull(workflowTask1.getCompletionDate());\n\t\tassertEquals(\"Task3-1\", workflowTask1.getName());\n\n\t\tworkflowTask2 = workflowTasks.get(1);\n\n\t\tassertEquals(defaultUserId, workflowTask2.getAssigneeUserId());\n\t\tassertNull(workflowTask2.getCompletionDate());\n\t\tassertEquals(\"Task3-2\", workflowTask2.getName());\n\n\t\tworkflowTask3 = workflowTasks.get(2);\n\n\t\tassertEquals(defaultUserId, workflowTask3.getAssigneeUserId());\n\t\tassertNull(workflowTask3.getCompletionDate());\n\t\tassertEquals(\"Task3-3\", workflowTask3.getName());\n\n\t\tfor (WorkflowInstance childWorkflowInstance :\n\t\t\t\tchildrenWorkflowInstances) {\n\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\n\t\t\tWorkflowTask childWorkflowTask = childWorkflowTasks.get(0);\n\n\t\t\tWorkflowTaskManagerUtil.completeWorkflowTask(\n\t\t\t\tdefaultUserId, childWorkflowTask.getWorkflowTaskId(), null,\n\t\t\t\tnull, null);\n\t\t}\n\n\t\tworkflowTasks = WorkflowTaskManagerUtil.getWorkflowTasksByUser(\n\t\t\tdefaultUserId, null, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\tassertEquals(4, workflowTasks.size());\n\n\t\tworkflowTask1 = workflowTasks.get(0);\n\n\t\tassertEquals(defaultUserId, workflowTask1.getAssigneeUserId());\n\t\tassertNotNull(workflowTask1.getCompletionDate());\n\t\tassertEquals(\"Task3-1\", workflowTask1.getName());\n\n\t\tworkflowTask2 = workflowTasks.get(1);\n\n\t\tassertEquals(defaultUserId, workflowTask2.getAssigneeUserId());\n\t\tassertNotNull(workflowTask2.getCompletionDate());\n\t\tassertEquals(\"Task3-2\", workflowTask2.getName());\n\n\t\tworkflowTask3 = workflowTasks.get(2);\n\n\t\tassertEquals(defaultUserId, workflowTask3.getAssigneeUserId());\n\t\tassertNotNull(workflowTask3.getCompletionDate());\n\t\tassertEquals(\"Task3-3\", workflowTask3.getName());\n\n\t\tWorkflowTask workflowTask4 = workflowTasks.get(3);\n\n\t\tassertEquals(0L, workflowTask4.getAssigneeUserId());\n\t\tassertNull(workflowTask4.getCompletionDate());\n\t\tassertEquals(\"Task3-4\", workflowTask4.getName());\n\n\t\tworkflowTasks = WorkflowTaskManagerUtil.getWorkflowTasksByUser(\n\t\t\tdefaultUserId, Boolean.TRUE, QueryUtil.ALL_POS,\n\t\t\tQueryUtil.ALL_POS, new WorkflowTaskNameComparator(true));\n\n\t\tassertEquals(3, workflowTasks.size());\n\n\t\tworkflowTask1 = workflowTasks.get(0);\n\n\t\tassertEquals(defaultUserId, workflowTask1.getAssigneeUserId());\n\t\tassertNotNull(workflowTask1.getCompletionDate());\n\t\tassertEquals(\"Task3-1\", workflowTask1.getName());\n\n\t\tworkflowTask2 = workflowTasks.get(1);\n\n\t\tassertEquals(defaultUserId, workflowTask2.getAssigneeUserId());\n\t\tassertNotNull(workflowTask2.getCompletionDate());\n\t\tassertEquals(\"Task3-2\", workflowTask2.getName());\n\n\t\tworkflowTask3 = workflowTasks.get(2);\n\n\t\tassertEquals(defaultUserId, workflowTask3.getAssigneeUserId());\n\t\tassertNotNull(workflowTask3.getCompletionDate());\n\t\tassertEquals(\"Task3-3\", workflowTask3.getName());\n\n\t\tworkflowTasks = WorkflowTaskManagerUtil.getWorkflowTasksByUser(\n\t\t\tdefaultUserId, Boolean.FALSE, QueryUtil.ALL_POS,\n\t\t\tQueryUtil.ALL_POS, new WorkflowTaskNameComparator(true));\n\n\t\tassertEquals(1, workflowTasks.size());\n\n\t\tworkflowTask4 = workflowTasks.get(0);\n\n\t\tassertEquals(0L, workflowTask4.getAssigneeUserId());\n\t\tassertNull(workflowTask4.getCompletionDate());\n\t\tassertEquals(\"Task3-4\", workflowTask4.getName());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void tearDown() throws Exception {\n\t\tWorkflowDefinitionManagerUtil.undeployWorkflowDefinition(\n\t\t\tuser.getUserId(), DEFINITION_NAME_3,\n\t\t\t_workflowDefinition.getVersion());\n\n\t}","id":2422,"modified_method":"public void tearDown() throws Exception {\n\t\tsuper.tearDown();\n\n\t\tWorkflowDefinitionManagerUtil.undeployWorkflowDefinition(\n\t\t\tdefaultUserId, DEFINITION_NAME_3,\n\t\t\t_workflowDefinition.getVersion());\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void testGetWorkflowTaskCountByuser() throws Exception {\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\tuser.getUserId(), DEFINITION_NAME_3,\n\t\t\t_workflowDefinition.getVersion(), null, null);\n\n\t\tlong[] roleIds = user.getRoleIds();\n\t\tassertTrue(roleIds.length > 0);\n\n\t\tlong testRoleId = roleIds[0];\n\n\t\tint count = WorkflowTaskManagerUtil.getWorkflowTaskCountByUser(\n\t\t\tuser.getUserId(), null);\n\t\tassertEquals(0, count);\n\n\t\tworkflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.getWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\n\t\tList<WorkflowInstance> childrenWorkflowInstances =\n\t\t\tworkflowInstance.getChildren();\n\n\t\tfor (WorkflowInstance childWorkflowInstance : childrenWorkflowInstances)\n\t\t{\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\t\t\tWorkflowTask workflowTask = childWorkflowTasks.get(0);\n\t\t\tassertEquals(0L, workflowTask.getAssigneeRoleId());\n\t\t\tworkflowTask = WorkflowTaskManagerUtil.assignWorkflowTaskToRole(\n\t\t\t\tuser.getUserId(), workflowTask.getWorkflowTaskId(), testRoleId,\n\t\t\t\t\"Assign to role\", null);\n\t\t\tworkflowTask = WorkflowTaskManagerUtil.assignWorkflowTaskToUser(\n\t\t\t\tuser.getUserId(), workflowTask.getWorkflowTaskId(),\n\t\t\t\tuser.getUserId(), \"Assign to user\", null);\n\t\t\tassertEquals(testRoleId, workflowTask.getAssigneeRoleId());\n\t\t}\n\n\t\tcount = WorkflowTaskManagerUtil.getWorkflowTaskCountByUser(\n\t\t\tuser.getUserId(), null);\n\t\tassertEquals(3, count);\n\n\t\tcount = WorkflowTaskManagerUtil.getWorkflowTaskCountByUser(\n\t\t\tuser.getUserId(), Boolean.TRUE);\n\t\tassertEquals(0, count);\n\n\t\tcount = WorkflowTaskManagerUtil.getWorkflowTaskCountByUser(\n\t\t\tuser.getUserId(), Boolean.FALSE);\n\t\tassertEquals(3, count);\n\n\t\tfor (WorkflowInstance childWorkflowInstance : childrenWorkflowInstances)\n\t\t{\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\t\t\tWorkflowTask workflowTask = childWorkflowTasks.get(0);\n\t\t\tWorkflowTaskManagerUtil.completeWorkflowTask(\n\t\t\t\tuser.getUserId(), workflowTask.getWorkflowTaskId(), null,\n\t\t\t\t\"Complete workflow task\", null);\n\t\t}\n\n\t\tcount = WorkflowTaskManagerUtil.getWorkflowTaskCountByUser(\n\t\t\tuser.getUserId(), null);\n\t\tassertEquals(4, count);\n\n\t\tcount = WorkflowTaskManagerUtil.getWorkflowTaskCountByUser(\n\t\t\tuser.getUserId(), Boolean.TRUE);\n\t\tassertEquals(3, count);\n\n\t\tcount = WorkflowTaskManagerUtil.getWorkflowTaskCountByUser(\n\t\t\tuser.getUserId(), Boolean.FALSE);\n\t\tassertEquals(1, count);\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","id":2423,"modified_method":"public void testGetWorkflowTaskCountByUser() throws Exception {\n\t\tint count = WorkflowTaskManagerUtil.getWorkflowTaskCountByUser(\n\t\t\tdefaultUserId, null);\n\n\t\tassertEquals(0, count);\n\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, DEFINITION_NAME_3,\n\t\t\t\t_workflowDefinition.getVersion(), null, null);\n\n\t\tList<WorkflowInstance> childrenWorkflowInstances =\n\t\t\tworkflowInstance.getChildrenWorkflowInstances();\n\n\t\tfor (WorkflowInstance childWorkflowInstance :\n\t\t\t\tchildrenWorkflowInstances) {\n\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\n\t\t\tWorkflowTask childWorkflowTask = childWorkflowTasks.get(0);\n\n\t\t\tassertEquals(0L, childWorkflowTask.getAssigneeRoleId());\n\n\t\t\tchildWorkflowTask =\n\t\t\t\tWorkflowTaskManagerUtil.assignWorkflowTaskToRole(\n\t\t\t\t\tdefaultUserId, childWorkflowTask.getWorkflowTaskId(),\n\t\t\t\t\tguestRoleId, null, null);\n\n\t\t\tchildWorkflowTask =\n\t\t\t\tWorkflowTaskManagerUtil.assignWorkflowTaskToUser(\n\t\t\t\t\tdefaultUserId, childWorkflowTask.getWorkflowTaskId(),\n\t\t\t\t\tdefaultUserId, null, null);\n\n\t\t\tassertEquals(guestRoleId, childWorkflowTask.getAssigneeRoleId());\n\t\t}\n\n\t\tcount = WorkflowTaskManagerUtil.getWorkflowTaskCountByUser(\n\t\t\tdefaultUserId, null);\n\n\t\tassertEquals(3, count);\n\n\t\tcount = WorkflowTaskManagerUtil.getWorkflowTaskCountByUser(\n\t\t\tdefaultUserId, Boolean.TRUE);\n\n\t\tassertEquals(0, count);\n\n\t\tcount = WorkflowTaskManagerUtil.getWorkflowTaskCountByUser(\n\t\t\tdefaultUserId, Boolean.FALSE);\n\n\t\tassertEquals(3, count);\n\n\t\tfor (WorkflowInstance childWorkflowInstance :\n\t\t\t\tchildrenWorkflowInstances) {\n\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\n\t\t\tWorkflowTask childWorkflowTask = childWorkflowTasks.get(0);\n\n\t\t\tWorkflowTaskManagerUtil.completeWorkflowTask(\n\t\t\t\tdefaultUserId, childWorkflowTask.getWorkflowTaskId(),\n\t\t\t\tnull, null, null);\n\t\t}\n\n\t\tcount = WorkflowTaskManagerUtil.getWorkflowTaskCountByUser(\n\t\t\tdefaultUserId, null);\n\n\t\tassertEquals(4, count);\n\n\t\tcount = WorkflowTaskManagerUtil.getWorkflowTaskCountByUser(\n\t\t\tdefaultUserId, Boolean.TRUE);\n\n\t\tassertEquals(3, count);\n\n\t\tcount = WorkflowTaskManagerUtil.getWorkflowTaskCountByUser(\n\t\t\tdefaultUserId, Boolean.FALSE);\n\n\t\tassertEquals(1, count);\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void testGetWorkflowTasksByWorkflowInstance() throws Exception {\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\tuser.getUserId(), DEFINITION_NAME_3,\n\t\t\t_workflowDefinition.getVersion(), null, null);\n\n\t\tlong[] roleIds = user.getRoleIds();\n\t\tassertTrue(roleIds.length > 0);\n\n\t\tList<WorkflowTask> workflowTasks =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\tworkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\tassertEquals(0, workflowTasks.size());\n\n\t\tworkflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.getWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\n\t\tList<WorkflowInstance> childrenWorkflowInstances =\n\t\t\tworkflowInstance.getChildren();\n\n\t\tfor (WorkflowInstance childWorkflowInstance : childrenWorkflowInstances)\n\t\t{\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\t\t\tWorkflowTask workflowTask = childWorkflowTasks.get(0);\n\t\t\tassertEquals(\n\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(),\n\t\t\t\tworkflowTask.getWorkflowInstanceId());\n\t\t\tchildWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), Boolean.TRUE,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\t\tassertEquals(0, childWorkflowTasks.size());\n\t\t\tchildWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(),\n\t\t\t\t\tBoolean.FALSE, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\t\t\tworkflowTask = childWorkflowTasks.get(0);\n\t\t\tassertEquals(\n\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(),\n\t\t\t\tworkflowTask.getWorkflowInstanceId());\n\t\t}\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","id":2424,"modified_method":"public void testGetWorkflowTasksByWorkflowInstance() throws Exception {\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, DEFINITION_NAME_3,\n\t\t\t\t_workflowDefinition.getVersion(), null, null);\n\n\t\tList<WorkflowTask> workflowTasks =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\tworkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\tassertEquals(0, workflowTasks.size());\n\n\t\tList<WorkflowInstance> childrenWorkflowInstances =\n\t\t\tworkflowInstance.getChildrenWorkflowInstances();\n\n\t\tfor (WorkflowInstance childWorkflowInstance :\n\t\t\t\tchildrenWorkflowInstances) {\n\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\n\t\t\tWorkflowTask childWorkflowTask = childWorkflowTasks.get(0);\n\n\t\t\tassertEquals(\n\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(),\n\t\t\t\tchildWorkflowTask.getWorkflowInstanceId());\n\n\t\t\tchildWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), Boolean.TRUE,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\t\tassertEquals(0, childWorkflowTasks.size());\n\n\t\t\tchildWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(),\n\t\t\t\t\tBoolean.FALSE, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\n\t\t\tchildWorkflowTask = childWorkflowTasks.get(0);\n\n\t\t\tassertEquals(\n\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(),\n\t\t\t\tchildWorkflowTask.getWorkflowInstanceId());\n\t\t}\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void testGetWorkflowTasksByRole() throws Exception {\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\tuser.getUserId(), DEFINITION_NAME_3,\n\t\t\t_workflowDefinition.getVersion(), null, null);\n\n\t\tlong[] roleIds = user.getRoleIds();\n\t\tassertTrue(roleIds.length > 0);\n\n\t\tlong testRoleId = roleIds[0];\n\n\t\tList<WorkflowTask> workflowTasks =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByRole(\n\t\t\t\ttestRoleId, null, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\tassertEquals(0, workflowTasks.size());\n\n\t\tworkflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.getWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\n\t\tList<WorkflowInstance> childrenWorkflowInstances =\n\t\t\tworkflowInstance.getChildren();\n\n\t\tfor (WorkflowInstance childWorkflowInstance : childrenWorkflowInstances)\n\t\t{\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\t\t\tWorkflowTask workflowTask = childWorkflowTasks.get(0);\n\t\t\tassertEquals(0L, workflowTask.getAssigneeRoleId());\n\t\t\tworkflowTask = WorkflowTaskManagerUtil.assignWorkflowTaskToRole(\n\t\t\t\tuser.getUserId(), workflowTask.getWorkflowTaskId(), testRoleId,\n\t\t\t\t\"Assign to role\", null);\n\t\t\tworkflowTask = WorkflowTaskManagerUtil.assignWorkflowTaskToUser(\n\t\t\t\tuser.getUserId(), workflowTask.getWorkflowTaskId(),\n\t\t\t\tuser.getUserId(), \"Assign to user\", null);\n\t\t\tassertEquals(testRoleId, workflowTask.getAssigneeRoleId());\n\t\t}\n\n\t\tworkflowTasks = WorkflowTaskManagerUtil.getWorkflowTasksByRole(\n\t\t\ttestRoleId, null, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew WorkflowTaskNameComparator(true));\n\t\tassertEquals(3, workflowTasks.size());\n\t\tWorkflowTask workflowTask1 = workflowTasks.get(0);\n\t\tassertEquals(testRoleId, workflowTask1.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-1\", workflowTask1.getName());\n\t\tassertNull(workflowTask1.getCompletionDate());\n\t\tWorkflowTask workflowTask2 = workflowTasks.get(1);\n\t\tassertEquals(testRoleId, workflowTask2.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-2\", workflowTask2.getName());\n\t\tassertNull(workflowTask2.getCompletionDate());\n\t\tWorkflowTask workflowTask3 = workflowTasks.get(2);\n\t\tassertEquals(testRoleId, workflowTask3.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-3\", workflowTask3.getName());\n\t\tassertNull(workflowTask3.getCompletionDate());\n\n\t\tworkflowTasks = WorkflowTaskManagerUtil.getWorkflowTasksByRole(\n\t\t\ttestRoleId, Boolean.TRUE, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew WorkflowTaskNameComparator(true));\n\t\tassertEquals(0, workflowTasks.size());\n\n\t\tworkflowTasks = WorkflowTaskManagerUtil.getWorkflowTasksByRole(\n\t\t\ttestRoleId, Boolean.FALSE, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew WorkflowTaskNameComparator(true));\n\t\tassertEquals(3, workflowTasks.size());\n\t\tworkflowTask1 = workflowTasks.get(0);\n\t\tassertEquals(testRoleId, workflowTask1.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-1\", workflowTask1.getName());\n\t\tassertNull(workflowTask1.getCompletionDate());\n\t\tworkflowTask2 = workflowTasks.get(1);\n\t\tassertEquals(testRoleId, workflowTask2.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-2\", workflowTask2.getName());\n\t\tassertNull(workflowTask2.getCompletionDate());\n\t\tworkflowTask3 = workflowTasks.get(2);\n\t\tassertEquals(testRoleId, workflowTask3.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-3\", workflowTask3.getName());\n\t\tassertNull(workflowTask3.getCompletionDate());\n\n\t\tfor (WorkflowInstance childWorkflowInstance : childrenWorkflowInstances)\n\t\t{\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\t\t\tWorkflowTask workflowTask = childWorkflowTasks.get(0);\n\t\t\tWorkflowTaskManagerUtil.completeWorkflowTask(\n\t\t\t\tuser.getUserId(), workflowTask.getWorkflowTaskId(), null,\n\t\t\t\t\"Complete workflow task\", null);\n\t\t}\n\n\t\tworkflowTasks = WorkflowTaskManagerUtil.getWorkflowTasksByRole(\n\t\t\ttestRoleId, null, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew WorkflowTaskNameComparator(true));\n\t\tassertEquals(3, workflowTasks.size());\n\t\tworkflowTask1 = workflowTasks.get(0);\n\t\tassertEquals(testRoleId, workflowTask1.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-1\", workflowTask1.getName());\n\t\tassertNotNull(workflowTask1.getCompletionDate());\n\t\tworkflowTask2 = workflowTasks.get(1);\n\t\tassertEquals(testRoleId, workflowTask2.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-2\", workflowTask2.getName());\n\t\tassertNotNull(workflowTask2.getCompletionDate());\n\t\tworkflowTask3 = workflowTasks.get(2);\n\t\tassertEquals(testRoleId, workflowTask3.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-3\", workflowTask3.getName());\n\t\tassertNotNull(workflowTask3.getCompletionDate());\n\n\t\tworkflowTasks = WorkflowTaskManagerUtil.getWorkflowTasksByRole(\n\t\t\ttestRoleId, Boolean.TRUE, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew WorkflowTaskNameComparator(true));\n\t\tassertEquals(3, workflowTasks.size());\n\t\tworkflowTask1 = workflowTasks.get(0);\n\t\tassertEquals(testRoleId, workflowTask1.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-1\", workflowTask1.getName());\n\t\tassertNotNull(workflowTask1.getCompletionDate());\n\t\tworkflowTask2 = workflowTasks.get(1);\n\t\tassertEquals(testRoleId, workflowTask2.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-2\", workflowTask2.getName());\n\t\tassertNotNull(workflowTask2.getCompletionDate());\n\t\tworkflowTask3 = workflowTasks.get(2);\n\t\tassertEquals(testRoleId, workflowTask3.getAssigneeRoleId());\n\t\tassertEquals(\"Task3-3\", workflowTask3.getName());\n\t\tassertNotNull(workflowTask3.getCompletionDate());\n\n\t\tworkflowTasks = WorkflowTaskManagerUtil.getWorkflowTasksByRole(\n\t\t\ttestRoleId, Boolean.FALSE, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew WorkflowTaskNameComparator(true));\n\t\tassertEquals(0, workflowTasks.size());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","id":2425,"modified_method":"public void testGetWorkflowTasksByRole() throws Exception {\n\t\tList<WorkflowTask> workflowTasks =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByRole(\n\t\t\t\tguestRoleId, null, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\tassertEquals(0, workflowTasks.size());\n\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, DEFINITION_NAME_3,\n\t\t\t\t_workflowDefinition.getVersion(), null, null);\n\n\t\tList<WorkflowInstance> childrenWorkflowInstances =\n\t\t\tworkflowInstance.getChildrenWorkflowInstances();\n\n\t\tfor (WorkflowInstance childWorkflowInstance :\n\t\t\t\tchildrenWorkflowInstances) {\n\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\n\t\t\tWorkflowTask childWorkflowTask = childWorkflowTasks.get(0);\n\n\t\t\tassertEquals(0L, childWorkflowTask.getAssigneeRoleId());\n\n\t\t\tchildWorkflowTask =\n\t\t\t\tWorkflowTaskManagerUtil.assignWorkflowTaskToRole(\n\t\t\t\t\tdefaultUserId, childWorkflowTask.getWorkflowTaskId(),\n\t\t\t\t\tguestRoleId, null, null);\n\n\t\t\tchildWorkflowTask =\n\t\t\t\tWorkflowTaskManagerUtil.assignWorkflowTaskToUser(\n\t\t\t\t\tdefaultUserId, childWorkflowTask.getWorkflowTaskId(),\n\t\t\t\t\tdefaultUserId, null, null);\n\n\t\t\tassertEquals(guestRoleId, childWorkflowTask.getAssigneeRoleId());\n\t\t}\n\n\t\tworkflowTasks = WorkflowTaskManagerUtil.getWorkflowTasksByRole(\n\t\t\tguestRoleId, null, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\tassertEquals(3, workflowTasks.size());\n\n\t\tWorkflowTask workflowTask1 = workflowTasks.get(0);\n\n\t\tassertEquals(guestRoleId, workflowTask1.getAssigneeRoleId());\n\t\tassertNull(workflowTask1.getCompletionDate());\n\t\tassertEquals(\"Task3-1\", workflowTask1.getName());\n\n\t\tWorkflowTask workflowTask2 = workflowTasks.get(1);\n\n\t\tassertEquals(guestRoleId, workflowTask2.getAssigneeRoleId());\n\t\tassertNull(workflowTask2.getCompletionDate());\n\t\tassertEquals(\"Task3-2\", workflowTask2.getName());\n\n\t\tWorkflowTask workflowTask3 = workflowTasks.get(2);\n\n\t\tassertEquals(guestRoleId, workflowTask3.getAssigneeRoleId());\n\t\tassertNull(workflowTask3.getCompletionDate());\n\t\tassertEquals(\"Task3-3\", workflowTask3.getName());\n\n\t\tworkflowTasks = WorkflowTaskManagerUtil.getWorkflowTasksByRole(\n\t\t\tguestRoleId, Boolean.TRUE, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\tassertEquals(0, workflowTasks.size());\n\n\t\tworkflowTasks = WorkflowTaskManagerUtil.getWorkflowTasksByRole(\n\t\t\tguestRoleId, Boolean.FALSE, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\tassertEquals(3, workflowTasks.size());\n\n\t\tworkflowTask1 = workflowTasks.get(0);\n\n\t\tassertEquals(guestRoleId, workflowTask1.getAssigneeRoleId());\n\t\tassertNull(workflowTask1.getCompletionDate());\n\t\tassertEquals(\"Task3-1\", workflowTask1.getName());\n\n\t\tworkflowTask2 = workflowTasks.get(1);\n\n\t\tassertEquals(guestRoleId, workflowTask2.getAssigneeRoleId());\n\t\tassertNull(workflowTask2.getCompletionDate());\n\t\tassertEquals(\"Task3-2\", workflowTask2.getName());\n\n\t\tworkflowTask3 = workflowTasks.get(2);\n\n\t\tassertEquals(guestRoleId, workflowTask3.getAssigneeRoleId());\n\t\tassertNull(workflowTask3.getCompletionDate());\n\t\tassertEquals(\"Task3-3\", workflowTask3.getName());\n\n\t\tfor (WorkflowInstance childWorkflowInstance :\n\t\t\t\tchildrenWorkflowInstances) {\n\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\n\t\t\tWorkflowTask childWorkflowTask = childWorkflowTasks.get(0);\n\n\t\t\tWorkflowTaskManagerUtil.completeWorkflowTask(\n\t\t\t\tdefaultUserId, childWorkflowTask.getWorkflowTaskId(),\n\t\t\t\tnull, null, null);\n\t\t}\n\n\t\tworkflowTasks = WorkflowTaskManagerUtil.getWorkflowTasksByRole(\n\t\t\tguestRoleId, null, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\tassertEquals(3, workflowTasks.size());\n\n\t\tworkflowTask1 = workflowTasks.get(0);\n\n\t\tassertEquals(guestRoleId, workflowTask1.getAssigneeRoleId());\n\t\tassertNotNull(workflowTask1.getCompletionDate());\n\t\tassertEquals(\"Task3-1\", workflowTask1.getName());\n\n\t\tworkflowTask2 = workflowTasks.get(1);\n\n\t\tassertEquals(guestRoleId, workflowTask2.getAssigneeRoleId());\n\t\tassertNotNull(workflowTask2.getCompletionDate());\n\t\tassertEquals(\"Task3-2\", workflowTask2.getName());\n\n\t\tworkflowTask3 = workflowTasks.get(2);\n\n\t\tassertEquals(guestRoleId, workflowTask3.getAssigneeRoleId());\n\t\tassertNotNull(workflowTask3.getCompletionDate());\n\t\tassertEquals(\"Task3-3\", workflowTask3.getName());\n\n\t\tworkflowTasks = WorkflowTaskManagerUtil.getWorkflowTasksByRole(\n\t\t\tguestRoleId, Boolean.TRUE, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\tassertEquals(3, workflowTasks.size());\n\n\t\tworkflowTask1 = workflowTasks.get(0);\n\n\t\tassertEquals(guestRoleId, workflowTask1.getAssigneeRoleId());\n\t\tassertNotNull(workflowTask1.getCompletionDate());\n\t\tassertEquals(\"Task3-1\", workflowTask1.getName());\n\n\t\tworkflowTask2 = workflowTasks.get(1);\n\n\t\tassertEquals(guestRoleId, workflowTask2.getAssigneeRoleId());\n\t\tassertNotNull(workflowTask2.getCompletionDate());\n\t\tassertEquals(\"Task3-2\", workflowTask2.getName());\n\n\t\tworkflowTask3 = workflowTasks.get(2);\n\n\t\tassertEquals(guestRoleId, workflowTask3.getAssigneeRoleId());\n\t\tassertNotNull(workflowTask3.getCompletionDate());\n\t\tassertEquals(\"Task3-3\", workflowTask3.getName());\n\n\t\tworkflowTasks = WorkflowTaskManagerUtil.getWorkflowTasksByRole(\n\t\t\tguestRoleId, Boolean.FALSE, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\tassertEquals(0, workflowTasks.size());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void testCompleteWorkflowTask() throws Exception {\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\tuser.getUserId(), DEFINITION_NAME_3,\n\t\t\t_workflowDefinition.getVersion(), null, null);\n\n\t\tworkflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.getWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\n\t\tList<WorkflowInstance> childrenWorkflowInstances =\n\t\t\tworkflowInstance.getChildren();\n\n\t\tlong[] roleIds = user.getRoleIds();\n\t\tassertTrue(roleIds.length > 0);\n\n\t\tlong testRoleId = roleIds[0];\n\n\t\tfor (WorkflowInstance childWorkflowInstance : childrenWorkflowInstances)\n\t\t{\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), Boolean.TRUE,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\t\tassertEquals(0, childWorkflowTasks.size());\n\t\t\tchildWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(),\n\t\t\t\t\tBoolean.FALSE, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\t\t\tWorkflowTask workflowTask = childWorkflowTasks.get(0);\n\t\t\tassertEquals(100L, workflowTask.getAssigneeUserId());\n\t\t\tworkflowTask = WorkflowTaskManagerUtil.assignWorkflowTaskToRole(\n\t\t\t\tuser.getUserId(), workflowTask.getWorkflowTaskId(), testRoleId,\n\t\t\t\t\"Assign to role\", null);\n\t\t\tworkflowTask = WorkflowTaskManagerUtil.assignWorkflowTaskToUser(\n\t\t\t\tuser.getUserId(), workflowTask.getWorkflowTaskId(),\n\t\t\t\tuser.getUserId(), \"Assign to user\", null);\n\t\t\tworkflowTask= WorkflowTaskManagerUtil.completeWorkflowTask(\n\t\t\t\tuser.getUserId(), workflowTask.getWorkflowTaskId(), null,\n\t\t\t\t\"Complete workflow task\", null);\n\n\t\t\tchildWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), Boolean.TRUE,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\n\t\t\tWorkflowTask completedTask = childWorkflowTasks.get(0);\n\t\t\tassertEquals(\n\t\t\t\tworkflowTask.getWorkflowTaskId(),\n\t\t\t\tcompletedTask.getWorkflowTaskId());\n\t\t}\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","id":2426,"modified_method":"public void testCompleteWorkflowTask() throws Exception {\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, DEFINITION_NAME_3,\n\t\t\t\t_workflowDefinition.getVersion(), null, null);\n\n\t\tworkflowInstance = WorkflowInstanceManagerUtil.getWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\n\t\tList<WorkflowInstance> childrenWorkflowInstances =\n\t\t\tworkflowInstance.getChildrenWorkflowInstances();\n\n\t\tfor (WorkflowInstance childWorkflowInstance :\n\t\t\t\tchildrenWorkflowInstances) {\n\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), Boolean.TRUE,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\t\tassertEquals(0, childWorkflowTasks.size());\n\n\t\t\tchildWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(),\n\t\t\t\t\tBoolean.FALSE, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\n\t\t\tWorkflowTask childWorkflowTask = childWorkflowTasks.get(0);\n\n\t\t\tassertEquals(100L, childWorkflowTask.getAssigneeUserId());\n\n\t\t\tchildWorkflowTask =\n\t\t\t\tWorkflowTaskManagerUtil.assignWorkflowTaskToRole(\n\t\t\t\t\tdefaultUserId, childWorkflowTask.getWorkflowTaskId(),\n\t\t\t\t\tguestRoleId, null, null);\n\n\t\t\tchildWorkflowTask =\n\t\t\t\tWorkflowTaskManagerUtil.assignWorkflowTaskToUser(\n\t\t\t\t\tdefaultUserId, childWorkflowTask.getWorkflowTaskId(),\n\t\t\t\t\tdefaultUserId, null, null);\n\n\t\t\tchildWorkflowTask = WorkflowTaskManagerUtil.completeWorkflowTask(\n\t\t\t\tdefaultUserId, childWorkflowTask.getWorkflowTaskId(), null,\n\t\t\t\tnull, null);\n\n\t\t\tchildWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), Boolean.TRUE,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\n\t\t\tWorkflowTask completedWorkflowTask = childWorkflowTasks.get(0);\n\n\t\t\tassertEquals(\n\t\t\t\tchildWorkflowTask.getWorkflowTaskId(),\n\t\t\t\tcompletedWorkflowTask.getWorkflowTaskId());\n\t\t}\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void testAssignWorkflowTaskTouser() throws Exception {\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\tuser.getUserId(), DEFINITION_NAME_3,\n\t\t\t_workflowDefinition.getVersion(), null, null);\n\n\t\tList<WorkflowTask> workflowTasks =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByUser(\n\t\t\tuser.getUserId(), null, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew WorkflowTaskNameComparator(true));\n\t\tassertEquals(0, workflowTasks.size());\n\n\t\tworkflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.getWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\n\t\tList<WorkflowInstance> childrenWorkflowInstances =\n\t\t\tworkflowInstance.getChildren();\n\n\t\tlong[] roleIds = user.getRoleIds();\n\t\tassertTrue(roleIds.length > 0);\n\n\t\tlong testRoleId = roleIds[0];\n\n\t\tfor (WorkflowInstance childWorkflowInstance : childrenWorkflowInstances)\n\t\t{\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\t\t\tWorkflowTask workflowTask = childWorkflowTasks.get(0);\n\t\t\tassertEquals(100L, workflowTask.getAssigneeUserId());\n\t\t\tworkflowTask = WorkflowTaskManagerUtil.assignWorkflowTaskToRole(\n\t\t\t\tuser.getUserId(), workflowTask.getWorkflowTaskId(), testRoleId,\n\t\t\t\t\"Assign to role\", null);\n\t\t\tworkflowTask = WorkflowTaskManagerUtil.assignWorkflowTaskToUser(\n\t\t\t\tuser.getUserId(), workflowTask.getWorkflowTaskId(),\n\t\t\t\tuser.getUserId(), \"Assign to user\", null);\n\t\t\tassertEquals(user.getUserId(), workflowTask.getAssigneeUserId());\n\t\t}\n\n\t\tworkflowTasks =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByUser(\n\t\t\tuser.getUserId(), null, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew WorkflowTaskNameComparator(true));\n\t\tassertEquals(3, workflowTasks.size());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","id":2427,"modified_method":"public void testAssignWorkflowTaskTouser() throws Exception {\n\t\tList<WorkflowTask> workflowTasks =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByUser(\n\t\t\t\tdefaultUserId, null, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\tassertEquals(0, workflowTasks.size());\n\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, DEFINITION_NAME_3,\n\t\t\t\t_workflowDefinition.getVersion(), null, null);\n\n\t\tList<WorkflowInstance> childrenWorkflowInstances =\n\t\t\tworkflowInstance.getChildrenWorkflowInstances();\n\n\t\tfor (WorkflowInstance childWorkflowInstance :\n\t\t\t\tchildrenWorkflowInstances) {\n\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\n\t\t\tWorkflowTask childWorkflowTask = childWorkflowTasks.get(0);\n\n\t\t\tassertEquals(100L, childWorkflowTask.getAssigneeUserId());\n\n\t\t\tchildWorkflowTask =\n\t\t\t\tWorkflowTaskManagerUtil.assignWorkflowTaskToRole(\n\t\t\t\t\tdefaultUserId, childWorkflowTask.getWorkflowTaskId(),\n\t\t\t\t\tguestRoleId, null, null);\n\n\t\t\tchildWorkflowTask =\n\t\t\t\tWorkflowTaskManagerUtil.assignWorkflowTaskToUser(\n\t\t\t\t\tdefaultUserId, childWorkflowTask.getWorkflowTaskId(),\n\t\t\t\t\tdefaultUserId, null, null);\n\n\t\t\tassertEquals(defaultUserId, childWorkflowTask.getAssigneeUserId());\n\t\t}\n\n\t\tworkflowTasks = WorkflowTaskManagerUtil.getWorkflowTasksByUser(\n\t\t\tdefaultUserId, null, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\tassertEquals(3, workflowTasks.size());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void testAssignWorkflowTaskToRole() throws Exception {\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\tuser.getUserId(), DEFINITION_NAME_3,\n\t\t\t_workflowDefinition.getVersion(), null, null);\n\n\t\tlong[] roleIds = user.getRoleIds();\n\t\tassertTrue(roleIds.length > 0);\n\n\t\tlong testRoleId = roleIds[0];\n\n\t\tList<WorkflowTask> workflowTasks =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByRole(\n\t\t\ttestRoleId, null, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew WorkflowTaskNameComparator(true));\n\t\tassertEquals(0, workflowTasks.size());\n\n\t\tworkflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.getWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\n\t\tList<WorkflowInstance> childrenWorkflowInstances =\n\t\t\tworkflowInstance.getChildren();\n\n\t\tfor (WorkflowInstance childWorkflowInstance : childrenWorkflowInstances)\n\t\t{\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\t\t\tWorkflowTask workflowTask = childWorkflowTasks.get(0);\n\t\t\tassertEquals(0L, workflowTask.getAssigneeRoleId());\n\t\t\tworkflowTask = WorkflowTaskManagerUtil.assignWorkflowTaskToRole(\n\t\t\t\tuser.getUserId(), workflowTask.getWorkflowTaskId(), testRoleId,\n\t\t\t\t\"Assign to role\", null);\n\t\t\tassertEquals(testRoleId, workflowTask.getAssigneeRoleId());\n\t\t}\n\n\t\tworkflowTasks =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByRole(\n\t\t\ttestRoleId, null, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew WorkflowTaskNameComparator(true));\n\t\tassertEquals(3, workflowTasks.size());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","id":2428,"modified_method":"public void testAssignWorkflowTaskToRole() throws Exception {\n\t\tList<WorkflowTask> workflowTasks =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByRole(\n\t\t\t\tguestRoleId, null, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\tassertEquals(0, workflowTasks.size());\n\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, DEFINITION_NAME_3,\n\t\t\t\t_workflowDefinition.getVersion(), null, null);\n\n\t\tList<WorkflowInstance> childrenWorkflowInstances =\n\t\t\tworkflowInstance.getChildrenWorkflowInstances();\n\n\t\tfor (WorkflowInstance childWorkflowInstance :\n\t\t\t\tchildrenWorkflowInstances) {\n\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\n\t\t\tWorkflowTask childWorkflowTask = childWorkflowTasks.get(0);\n\n\t\t\tassertEquals(0L, childWorkflowTask.getAssigneeRoleId());\n\n\t\t\tchildWorkflowTask =\n\t\t\t\tWorkflowTaskManagerUtil.assignWorkflowTaskToRole(\n\t\t\t\t\tdefaultUserId, childWorkflowTask.getWorkflowTaskId(),\n\t\t\t\t\tguestRoleId, null, null);\n\n\t\t\tassertEquals(guestRoleId, childWorkflowTask.getAssigneeRoleId());\n\t\t}\n\n\t\tworkflowTasks = WorkflowTaskManagerUtil.getWorkflowTasksByRole(\n\t\t\tguestRoleId, null, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\tassertEquals(3, workflowTasks.size());\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void testGetWorkflowTaskCountByWorkflowInstance() throws Exception {\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\tuser.getUserId(), DEFINITION_NAME_3,\n\t\t\t_workflowDefinition.getVersion(), null, null);\n\n\t\tlong[] roleIds = user.getRoleIds();\n\t\tassertTrue(roleIds.length > 0);\n\n\t\tint count =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTaskCountByWorkflowInstance(\n\t\t\t\tworkflowInstance.getWorkflowInstanceId(), null);\n\t\tassertEquals(0, count);\n\n\t\tworkflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.getWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\n\t\tList<WorkflowInstance> childrenWorkflowInstances =\n\t\t\tworkflowInstance.getChildren();\n\n\t\tfor (WorkflowInstance childWorkflowInstance : childrenWorkflowInstances)\n\t\t{\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\t\t\tchildWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), Boolean.TRUE,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\t\tassertEquals(0, childWorkflowTasks.size());\n\t\t\tchildWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(),\n\t\t\t\t\tBoolean.FALSE, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\t\t}\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","id":2429,"modified_method":"public void testGetWorkflowTaskCountByWorkflowInstance() throws Exception {\n\t\tWorkflowInstance workflowInstance =\n\t\t\tWorkflowInstanceManagerUtil.startWorkflowInstance(\n\t\t\t\tdefaultUserId, DEFINITION_NAME_3,\n\t\t\t\t_workflowDefinition.getVersion(), null, null);\n\n\t\tint count =\n\t\t\tWorkflowTaskManagerUtil.getWorkflowTaskCountByWorkflowInstance(\n\t\t\t\tworkflowInstance.getWorkflowInstanceId(), null);\n\n\t\tassertEquals(0, count);\n\n\t\tList<WorkflowInstance> childrenWorkflowInstances =\n\t\t\tworkflowInstance.getChildrenWorkflowInstances();\n\n\t\tfor (WorkflowInstance childWorkflowInstance :\n\t\t\t\tchildrenWorkflowInstances) {\n\n\t\t\tList<WorkflowTask> childWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), null,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\n\t\t\tchildWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(), Boolean.TRUE,\n\t\t\t\t\tQueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\t\tassertEquals(0, childWorkflowTasks.size());\n\n\t\t\tchildWorkflowTasks =\n\t\t\t\tWorkflowTaskManagerUtil.getWorkflowTasksByWorkflowInstance(\n\t\t\t\t\tchildWorkflowInstance.getWorkflowInstanceId(),\n\t\t\t\t\tBoolean.FALSE, QueryUtil.ALL_POS, QueryUtil.ALL_POS,\n\t\t\t\t\tnew WorkflowTaskNameComparator(true));\n\n\t\t\tassertEquals(1, childWorkflowTasks.size());\n\t\t}\n\n\t\tWorkflowInstanceManagerUtil.deleteWorkflowInstance(\n\t\t\tworkflowInstance.getWorkflowInstanceId());\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void setUp() throws Exception {\n\t\tlong companyId = PortalUtil.getDefaultCompanyId();\n\n\t\tuser = UserLocalServiceUtil.getDefaultUser(companyId);\n\n\t\tZipInputStream zipInputStream = new ZipInputStream(\n\t\t\tservletContext.getResourceAsStream(\n\t\t\t\t\"WEB-INF/bundles/\" + WorkflowEngineManagerUtil.getKey() +\n\t\t\t\t\t\"-tests.zip\"));\n\n\t\tZipEntry zipEntry = null;\n\n\t\twhile ((zipEntry = zipInputStream.getNextEntry()) != null) {\n\t\t\tString name = zipEntry.getName();\n\n\t\t\tif (name.equals(_JAR_1)) {\n\t\t\t\tdefinitionBytes1 = readBytes(zipInputStream);\n\t\t\t}\n\t\t\telse if (name.equals(_JAR_2)) {\n\t\t\t\tdefinitionBytes2 = readBytes(zipInputStream);\n\t\t\t}\n\t\t\telse if (name.equals(_JAR_3)) {\n\t\t\t\tdefinitionBytes3 = readBytes(zipInputStream);\n\t\t\t}\n\t\t\telse if (name.equals(_JAR_4)) {\n\t\t\t\tdefinitionBytes4 = readBytes(zipInputStream);\n\t\t\t}\n\t\t}\n\n\t\tzipInputStream.close();\n\n\t\tassertNotNull(definitionBytes1);\n\t\tassertNotNull(definitionBytes2);\n\t\tassertNotNull(definitionBytes3);\n\t\tassertNotNull(definitionBytes4);\n\n\t}","id":2430,"modified_method":"public void setUp() throws Exception {\n\t\tsuper.setUp();\n\n\t\tlong companyId = PortalUtil.getDefaultCompanyId();\n\n\t\tdefaultUser = UserLocalServiceUtil.getDefaultUser(companyId);\n\t\tdefaultUserId = defaultUser.getUserId();\n\n\t\tguestRoleId = defaultUser.getRoleIds()[0];\n\n\t\tZipInputStream zipInputStream = new ZipInputStream(\n\t\t\tservletContext.getResourceAsStream(\n\t\t\t\t\"WEB-INF/bundles/\" + WorkflowEngineManagerUtil.getKey() +\n\t\t\t\t\t\"-tests.zip\"));\n\n\t\tZipEntry zipEntry = null;\n\n\t\twhile ((zipEntry = zipInputStream.getNextEntry()) != null) {\n\t\t\tString name = zipEntry.getName();\n\n\t\t\tif (name.equals(_JAR_1)) {\n\t\t\t\tdefinitionBytes1 = readBytes(zipInputStream);\n\t\t\t}\n\t\t\telse if (name.equals(_JAR_2)) {\n\t\t\t\tdefinitionBytes2 = readBytes(zipInputStream);\n\t\t\t}\n\t\t\telse if (name.equals(_JAR_3)) {\n\t\t\t\tdefinitionBytes3 = readBytes(zipInputStream);\n\t\t\t}\n\t\t\telse if (name.equals(_JAR_4)) {\n\t\t\t\tdefinitionBytes4 = readBytes(zipInputStream);\n\t\t\t}\n\t\t}\n\n\t\tzipInputStream.close();\n\n\t\tassertNotNull(definitionBytes1);\n\t\tassertNotNull(definitionBytes2);\n\t\tassertNotNull(definitionBytes3);\n\t\tassertNotNull(definitionBytes4);\n\n\t}","commit_id":"8f8a7a5cfab3e5cf880c58b246c645cb5345fc81","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        if (player == null){\r\n            return false;\r\n        }\r\n        int amount = 0;\r\n        TargetControlledPermanent sacrificeLand = new TargetControlledPermanent(0, Integer.MAX_VALUE, new FilterControlledLandPermanent(), true);\r\n        if(player.chooseTarget(Outcome.Sacrifice, sacrificeLand, source, game)){\r\n            for(Object uuid : sacrificeLand.getTargets()){\r\n                Permanent land = game.getPermanent((UUID)uuid);\r\n                if(land != null){\r\n                    land.sacrifice(source.getId(), game);\r\n                    amount++;\r\n                }\r\n            }\r\n        }\r\n        TargetCardInLibrary target = new TargetCardInLibrary(amount, new FilterLandCard());\r\n        if (player.searchLibrary(target, game)) {\r\n            if (target.getTargets().size() > 0) {\r\n                for (UUID cardId: (List<UUID>)target.getTargets()) {\r\n                    Card card = player.getLibrary().getCard(cardId, game);\r\n                    if (card != null) {\r\n                        if (card.putOntoBattlefield(game, Zone.LIBRARY, source.getId(), source.getControllerId())) {\r\n                            Permanent permanent = game.getPermanent(card.getId());\r\n                            if (permanent != null)\r\n                                permanent.setTapped(true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            player.shuffleLibrary(game);\r\n            return true;\r\n        }\r\n        player.shuffleLibrary(game);\r\n        return false;\r\n    }","id":2431,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        if (player == null){\r\n            return false;\r\n        }\r\n        int amount = 0;\r\n        TargetControlledPermanent sacrificeLand = new TargetControlledPermanent(0, Integer.MAX_VALUE, new FilterControlledLandPermanent(\"lands you control\"), true);\r\n        if(player.chooseTarget(Outcome.Sacrifice, sacrificeLand, source, game)){\r\n            for(Object uuid : sacrificeLand.getTargets()){\r\n                Permanent land = game.getPermanent((UUID)uuid);\r\n                if(land != null){\r\n                    land.sacrifice(source.getSourceId(), game);\r\n                    amount++;\r\n                }\r\n            }\r\n        }\r\n        TargetCardInLibrary target = new TargetCardInLibrary(amount, new FilterLandCard(\"lands\"));\r\n        target.setRequired(true);\r\n        if (player.searchLibrary(target, game)) {\r\n            if (target.getTargets().size() > 0) {\r\n                for (UUID cardId: (List<UUID>)target.getTargets()) {\r\n                    Card card = player.getLibrary().getCard(cardId, game);\r\n                    if (card != null) {\r\n                        card.putOntoBattlefield(game, Zone.LIBRARY, source.getSourceId(), source.getControllerId(), true);\r\n                    }\r\n                }\r\n            }\r\n            player.shuffleLibrary(game);\r\n            return true;\r\n        }\r\n        player.shuffleLibrary(game);\r\n        return false;\r\n    }","commit_id":"d6789fa383e7c439c174eea10a0a7e58e1406e0d","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean checkTrigger(GameEvent event, Game game) {\r\n\r\n        if (event.getType() == EventType.ENTERS_THE_BATTLEFIELD) {\r\n            Permanent permanent = game.getPermanent(event.getTargetId());\r\n            if (permanent.getCardType().contains(CardType.LAND) && permanent.getControllerId().equals(this.getControllerId())) {\r\n                if(permanent.hasSubtype(\"Mountain\")){\r\n                    int count = game.getBattlefield().count(ValakutTheMoltenPinnacle.filter, getSourceId(), getControllerId(), game);\r\n                    if(count > 5){\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }","id":2432,"modified_method":"@Override\r\n    public boolean checkTrigger(GameEvent event, Game game) {\r\n        if (event.getType() == EventType.ENTERS_THE_BATTLEFIELD) {\r\n            Permanent permanent = game.getPermanent(event.getTargetId());\r\n            if (permanent.getCardType().contains(CardType.LAND) && permanent.getControllerId().equals(this.getControllerId())) {\r\n                if(permanent.hasSubtype(\"Mountain\")){\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }","commit_id":"d6789fa383e7c439c174eea10a0a7e58e1406e0d","url":"https://github.com/magefree/mage"},{"original_method":"ValakutTheMoltenPinnacleTriggeredAbility () {\r\n        super(Zone.BATTLEFIELD, new DamageTargetEffect(3));\r\n        this.addTarget(new TargetCreatureOrPlayer());\r\n    }","id":2433,"modified_method":"ValakutTheMoltenPinnacleTriggeredAbility () {\r\n        super(Zone.BATTLEFIELD, new DamageTargetEffect(3), true);\r\n        this.addTarget(new TargetCreatureOrPlayer(true));\r\n    }","commit_id":"d6789fa383e7c439c174eea10a0a7e58e1406e0d","url":"https://github.com/magefree/mage"},{"original_method":"public ContinuousEffects() {\n\t\tapplyCounters = new ApplyCountersEffect();\n\t\tplaneswalkerRedirectionEffect = new PlaneswalkerRedirectionEffect();\n\t}","id":2434,"modified_method":"public ContinuousEffects() {\n\t\tapplyCounters = new ApplyCountersEffect();\n\t\tplaneswalkerRedirectionEffect = new PlaneswalkerRedirectionEffect();\n\t\tauraReplacementEffect = new AuraReplacementEffect();\n\t}","commit_id":"9632a3297decd3e8e58368a5416b16207a4c7722","url":"https://github.com/magefree/mage"},{"original_method":"public ContinuousEffects(final ContinuousEffects effect) {\n\t\tthis.applyCounters = effect.applyCounters.copy();\n\t\tthis.planeswalkerRedirectionEffect = effect.planeswalkerRedirectionEffect.copy();\n        layeredEffects = effect.layeredEffects.copy();\n        replacementEffects = effect.replacementEffects.copy();\n        preventionEffects = effect.preventionEffects.copy();\n        requirementEffects = effect.requirementEffects.copy();\n        restrictionEffects = effect.restrictionEffects.copy();\n        asThoughEffects = effect.asThoughEffects.copy();\n        costModificationEffects = effect.costModificationEffects.copy();\n\t}","id":2435,"modified_method":"public ContinuousEffects(final ContinuousEffects effect) {\n\t\tthis.applyCounters = effect.applyCounters.copy();\n\t\tthis.planeswalkerRedirectionEffect = effect.planeswalkerRedirectionEffect.copy();\n\t\tthis.auraReplacementEffect = effect.auraReplacementEffect.copy();\n        layeredEffects = effect.layeredEffects.copy();\n        replacementEffects = effect.replacementEffects.copy();\n        preventionEffects = effect.preventionEffects.copy();\n        requirementEffects = effect.requirementEffects.copy();\n        restrictionEffects = effect.restrictionEffects.copy();\n        asThoughEffects = effect.asThoughEffects.copy();\n        costModificationEffects = effect.costModificationEffects.copy();\n\t}","commit_id":"9632a3297decd3e8e58368a5416b16207a4c7722","url":"https://github.com/magefree/mage"},{"original_method":"/**\n\t *\n\t * @param event\n\t * @param game\n\t * @return a list of all {@link ReplacementEffect} that apply to the current event\n\t */\n\tprivate List<ReplacementEffect> getApplicableReplacementEffects(GameEvent event, Game game) {\n\t\tList<ReplacementEffect> replaceEffects = new ArrayList<ReplacementEffect>();\n\t\tif (planeswalkerRedirectionEffect.applies(event, null, game))\n\t\t\treplaceEffects.add(planeswalkerRedirectionEffect);\n\t\t//get all applicable transient Replacement effects\n\t\tfor (ReplacementEffect effect: replacementEffects) {\n            Ability ability = replacementEffects.getAbility(effect.getId());\n            if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game)) {\n                if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {\n                    if (effect.applies(event, ability, game)) {\n                        replaceEffects.add(effect);\n                    }\n                }\n            }\n\t\t}\n\t\tfor (PreventionEffect effect: preventionEffects) {\n            Ability ability = preventionEffects.getAbility(effect.getId());\n            if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game)) {\n                if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {\n                    if (effect.applies(event, ability, game)) {\n                        replaceEffects.add(effect);\n                    }\n                }\n            }\n\t\t}\n\t\treturn replaceEffects;\n\t}","id":2436,"modified_method":"/**\n\t *\n\t * @param event\n\t * @param game\n\t * @return a list of all {@link ReplacementEffect} that apply to the current event\n\t */\n\tprivate List<ReplacementEffect> getApplicableReplacementEffects(GameEvent event, Game game) {\n\t\tList<ReplacementEffect> replaceEffects = new ArrayList<ReplacementEffect>();\n\t\tif (planeswalkerRedirectionEffect.applies(event, null, game))\n\t\t\treplaceEffects.add(planeswalkerRedirectionEffect);\n\t\tif(auraReplacementEffect.applies(event, null, game))\n\t\t\treplaceEffects.add(auraReplacementEffect);\n\t\t//get all applicable transient Replacement effects\n\t\tfor (ReplacementEffect effect: replacementEffects) {\n            Ability ability = replacementEffects.getAbility(effect.getId());\n            if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game)) {\n                if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {\n                    if (effect.applies(event, ability, game)) {\n                        replaceEffects.add(effect);\n                    }\n                }\n            }\n\t\t}\n\t\tfor (PreventionEffect effect: preventionEffects) {\n            Ability ability = preventionEffects.getAbility(effect.getId());\n            if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game)) {\n                if (effect.getDuration() != Duration.OneUse || !effect.isUsed()) {\n                    if (effect.applies(event, ability, game)) {\n                        replaceEffects.add(effect);\n                    }\n                }\n            }\n\t\t}\n\t\treturn replaceEffects;\n\t}","commit_id":"9632a3297decd3e8e58368a5416b16207a4c7722","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        FilterCard filter = new FilterCard(\"Curse card that doesn't have the same name as a Curse attached to enchanted player\");\n        filter.getSubtype().add(\"Curse\");\n        Permanent enchantment = game.getPermanent(source.getSourceId());\n        if (enchantment != null && enchantment.getAttachedTo() != null) {\n            Player targetPlayer = game.getPlayer(enchantment.getAttachedTo());\n            Player player = game.getPlayer(source.getControllerId());\n            if (player != null && targetPlayer != null) {\n                // get the names of attached Curses\n                for (UUID attachmentId: targetPlayer.getAttachments()) {\n                    Permanent attachment = game.getPermanent(attachmentId);\n                    if (attachment != null && attachment.getSubtype().contains(\"Curse\")) {\n                        filter.getName().add(attachment.getName());\n                        filter.setNotName(true);\n                    }\n                }\n\n                TargetCardInLibrary targetCard = new TargetCardInLibrary(filter);\n                targetCard.setRequired(true);\n                if (player.searchLibrary(targetCard, game)) {\n                    Card card = game.getCard(targetCard.getFirstTarget());\n                    if (card != null) {\n                        player.shuffleLibrary(game);\n                        card.putOntoBattlefield(game, Constants.Zone.LIBRARY, source.getSourceId(), source.getControllerId());\n                        return targetPlayer.addAttachment(card.getId(), game);\n                    }\n                }\n                player.shuffleLibrary(game);\n            }\n        }\n        return false;\n    }","id":2437,"modified_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        FilterCard filter = new FilterCard(\"Curse card that doesn't have the same name as a Curse attached to enchanted player\");\n        filter.getSubtype().add(\"Curse\");\n        Permanent enchantment = game.getPermanent(source.getSourceId());\n        if (enchantment != null && enchantment.getAttachedTo() != null) {\n            Player targetPlayer = game.getPlayer(enchantment.getAttachedTo());\n            Player player = game.getPlayer(source.getControllerId());\n            if (player != null && targetPlayer != null) {\n                // get the names of attached Curses\n                for (UUID attachmentId: targetPlayer.getAttachments()) {\n                    Permanent attachment = game.getPermanent(attachmentId);\n                    if (attachment != null && attachment.getSubtype().contains(\"Curse\")) {\n                        filter.getName().add(attachment.getName());\n                        filter.setNotName(true);\n                    }\n                }\n\n                TargetCardInLibrary targetCard = new TargetCardInLibrary(filter);\n                targetCard.setRequired(true);\n                if (player.searchLibrary(targetCard, game)) {\n                    Card card = game.getCard(targetCard.getFirstTarget());\n                    if (card != null) {\n                        this.setTargetPointer(new FixedTarget(targetPlayer.getId()));\n                        player.shuffleLibrary(game);\n                        return card.putOntoBattlefield(game, Constants.Zone.LIBRARY, source.getId(), source.getControllerId());\n                    }\n                }\n                player.shuffleLibrary(game);\n            }\n        }\n        return false;\n    }","commit_id":"9632a3297decd3e8e58368a5416b16207a4c7722","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        TargetCardInLibrary target = new TargetCardInLibrary(filter);\r\n        if (player != null && player.chooseUse(Outcome.PutCardInPlay, message, game) && player.searchLibrary(target, game)) {\r\n            Card card = player.getLibrary().getCard(target.getFirstTarget(), game);\r\n            TargetCreaturePermanent targetCreature = new TargetCreaturePermanent(new FilterCreaturePermanent(\"creature to attach Gigantiform to\"));\r\n\r\n            if (card != null && card.putOntoBattlefield(game, Zone.HAND, source.getId(), source.getControllerId())\r\n                    && player.chooseTarget(Outcome.BoostCreature, targetCreature, source, game)) {\r\n                Permanent aura = game.getPermanent(card.getId());\r\n                Permanent creature = game.getPermanent(targetCreature.getFirstTarget());\r\n                if (aura != null && creature != null) {\r\n                    creature.addAttachment(aura.getId(), game);\r\n                }\r\n            }\r\n            player.shuffleLibrary(game);\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":2438,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        TargetCardInLibrary target = new TargetCardInLibrary(filter);\r\n        if (player != null && player.chooseUse(Outcome.PutCardInPlay, message, game) && player.searchLibrary(target, game)) {\r\n            Card card = player.getLibrary().getCard(target.getFirstTarget(), game);\r\n            if (card != null) {\r\n                card.putOntoBattlefield(game, Zone.LIBRARY, source.getId(), source.getControllerId());\r\n            }\r\n            player.shuffleLibrary(game);\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"9632a3297decd3e8e58368a5416b16207a4c7722","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n\tpublic boolean apply(Game game, Ability source) {\n\t\tPlayer controller = game.getPlayer(source.getControllerId());\n\t\tif (controller != null) {\n\t\t\tTargetCreaturePermanent target = new TargetCreaturePermanent(filter);\n            if (target.canChoose(source.getSourceId(), source.getControllerId(), game)) {\n                if (controller.chooseTarget(Outcome.Detriment, target, source, game)) {\n                    Card card = game.getCard(cardId);\n                    if (card != null) {\n                        card.putOntoBattlefield(game, Zone.GRAVEYARD, source.getId(), source.getControllerId());\n                        Permanent permanent = game.getPermanent(target.getFirstTarget());\n                        if (permanent != null) {\n                            return permanent.addAttachment(cardId, game);\n                        }\n                    }\n                }\n            }\n\t\t}\n\t\treturn false;\n\t}","id":2439,"modified_method":"@Override\n\tpublic boolean apply(Game game, Ability source) {\n\t\tPlayer controller = game.getPlayer(source.getControllerId());\n\t\tif (controller != null) {\n\t\t\tTargetCreaturePermanent target = new TargetCreaturePermanent(filter);\n            if (target.canChoose(source.getSourceId(), source.getControllerId(), game)) {\n                if (controller.chooseTarget(Outcome.Detriment, target, source, game)) {\n                    Card card = game.getCard(cardId);\n                    if (card != null) {\n                        this.setTargetPointer(new FixedTarget(target.getFirstTarget()));\n                        return card.putOntoBattlefield(game, Zone.GRAVEYARD, source.getId(), source.getControllerId());\n                    }\n                }\n            }\n\t\t}\n\t\treturn false;\n\t}","commit_id":"9632a3297decd3e8e58368a5416b16207a4c7722","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        Permanent permanent = game.getPermanent(source.getFirstTarget());\n        if (permanent != null) {\n            Player player = game.getPlayer(permanent.getControllerId());\n            if (permanent.moveToZone(Zone.EXILED, source.getId(), game, false)) {\n                if (player.chooseUse(Outcome.PutCardInPlay, \"Use Path to Exile effect?\", game)) {\n                    TargetCardInLibrary target = new TargetCardInLibrary(new FilterBasicLandCard());\n                    if (player.searchLibrary(target, game)) {\n                        Card card = player.getLibrary().getCard(target.getFirstTarget(), game);\n                        if (card != null) {\n                            if (card.putOntoBattlefield(game, Zone.LIBRARY, source.getId(), permanent.getControllerId())) {\n                                Permanent land = game.getPermanent(card.getId());\n                                if (land != null)\n                                    land.setTapped(true);\n                            }\n                        }\n                    }\n                    player.shuffleLibrary(game);\n                }\n                return true;\n            }\n        }\n        return false;\n    }","id":2440,"modified_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        Permanent permanent = game.getPermanent(source.getFirstTarget());\n        if (permanent != null) {\n            Player player = game.getPlayer(permanent.getControllerId());\n            if (permanent.moveToZone(Zone.EXILED, source.getId(), game, false)) {\n                if (player.chooseUse(Outcome.PutCardInPlay, \"Use Path to Exile effect?\", game)) {\n                    TargetCardInLibrary target = new TargetCardInLibrary(new FilterBasicLandCard());\n                    if (player.searchLibrary(target, game)) {\n                        Card card = player.getLibrary().getCard(target.getFirstTarget(), game);\n                        if (card != null) {\n                            card.putOntoBattlefield(game, Zone.LIBRARY, source.getId(), permanent.getControllerId(), true);\n                        }\n                    }\n                    player.shuffleLibrary(game);\n                }\n                return true;\n            }\n        }\n        return false;\n    }","commit_id":"b8e7604ca75bd07e79e2c87975e51bc0a9f323fd","url":"https://github.com/magefree/mage"},{"original_method":"public void doUpdate(AnActionEvent event) {\n    try {\n      AddToFavoritesGroup_ActionGroup.this.removeAll();\n      Project project = MPSDataKeys.PROJECT.getData(event.getDataContext());\n      if (project == null) {\n        return;\n      }\n      MPSFavoritesManager favoritesManager = project.getComponent(MPSFavoritesManager.class);\n      if (favoritesManager == null) {\n        return;\n      }\n      ProjectView projectView = ProjectView.getInstance(project);\n      AbstractProjectViewPane pane = projectView.getCurrentProjectViewPane();\n      boolean isInFavorites = pane instanceof FavoritesProjectPane;\n      String currentFavoritesList = null;\n      if (isInFavorites) {\n        FavoritesProjectPane currentPane = (FavoritesProjectPane) pane;\n        currentFavoritesList = currentPane.getSubId();\n      }\n      for (String name : favoritesManager.getFavoriteNames()) {\n        if (isInFavorites && EqualUtil.equals(name, currentFavoritesList)) {\n          continue;\n        }\n        AddToFavoritesGroup_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.AddToFavorites_Action\", \"jetbrains.mps.ide\", name);\n      }\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {\n      this.addPlace(p.first, p.second);\n    }\n  }","id":2441,"modified_method":"public void doUpdate(AnActionEvent event) {\n    try {\n      AddToFavoritesGroup_ActionGroup.this.removeAll();\n      Project project = MPSDataKeys.PROJECT.getData(event.getDataContext());\n      if (project == null) {\n        return;\n      }\n      MPSFavoritesManager favoritesManager = project.getComponent(MPSFavoritesManager.class);\n      if (favoritesManager == null) {\n        return;\n      }\n      FavoritesProjectPane pane = FavoritesUtil.getCurrentPane(project);\n      String currentFavoritesList = null;\n      if (pane != null) {\n        currentFavoritesList = pane.getSubId();\n      }\n      for (String name : favoritesManager.getFavoriteNames()) {\n        if (pane != null && EqualUtil.equals(name, currentFavoritesList)) {\n          continue;\n        }\n        AddToFavoritesGroup_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.AddToFavorites_Action\", \"jetbrains.mps.ide\", name);\n      }\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {\n      this.addPlace(p.first, p.second);\n    }\n  }","commit_id":"2ab42425b5bc9bd789a5d864fd0e971644b7b593","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doExecute(@NotNull final AnActionEvent event) {\n    try {\n      MPSFavoritesManager favoritesManager = AddToFavorites_Action.this.project.getComponent(MPSFavoritesManager.class);\n      if (favoritesManager == null) {\n        return;\n      }\n      List<Object> toMove = FavoritesUtil.getObjects(AddToFavorites_Action.this.treeNodes);\n      ProjectView projectView = ProjectView.getInstance(AddToFavorites_Action.this.project);\n      AbstractProjectViewPane pane = projectView.getCurrentProjectViewPane();\n      if (pane instanceof FavoritesProjectPane) {\n        favoritesManager.removeRoots(pane.getSubId(), toMove);\n      }\n      favoritesManager.addRoots(AddToFavorites_Action.this.name, toMove);\n    } catch (Throwable t) {\n      if (log.isErrorEnabled()) {\n        log.error(\"User's action execute method failed. Action:\" + \"AddToFavorites\", t);\n      }\n    }\n  }","id":2442,"modified_method":"public void doExecute(@NotNull final AnActionEvent event) {\n    try {\n      MPSFavoritesManager favoritesManager = AddToFavorites_Action.this.project.getComponent(MPSFavoritesManager.class);\n      if (favoritesManager == null) {\n        return;\n      }\n      List<Object> toMove = FavoritesUtil.getObjects(AddToFavorites_Action.this.treeNodes);\n      FavoritesProjectPane pane = FavoritesUtil.getCurrentPane(AddToFavorites_Action.this.project);\n      if (pane != null) {\n        favoritesManager.removeRoots(pane.getSubId(), toMove);\n      }\n      favoritesManager.addRoots(AddToFavorites_Action.this.name, toMove);\n    } catch (Throwable t) {\n      if (log.isErrorEnabled()) {\n        log.error(\"User's action execute method failed. Action:\" + \"AddToFavorites\", t);\n      }\n    }\n  }","commit_id":"2ab42425b5bc9bd789a5d864fd0e971644b7b593","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doExecute(@NotNull final AnActionEvent event) {\n    try {\n      MPSFavoritesManager favoritesManager = AddToNewFavoritesList_Action.this.project.getComponent(MPSFavoritesManager.class);\n      final String name = Messages.showInputDialog(AddToNewFavoritesList_Action.this.project, \"Input new favorites list name\", \"Add New Favorites List\", Messages.getInformationIcon(), \"Unnamed\", new InputValidator() {\n        public boolean checkInput(String p0) {\n          return true;\n        }\n\n        public boolean canClose(String p0) {\n          return true;\n        }\n      });\n      favoritesManager.addNewFavoritesList(name);\n      ProjectView projectView = ProjectView.getInstance(AddToNewFavoritesList_Action.this.project);\n      AbstractProjectViewPane pane = projectView.getCurrentProjectViewPane();\n      List<Object> toMove = FavoritesUtil.getObjects(AddToNewFavoritesList_Action.this.treeNodes);\n      if (pane instanceof FavoritesProjectPane) {\n        favoritesManager.removeRoots(pane.getSubId(), toMove);\n      }\n      favoritesManager.addRoots(name, toMove);\n    } catch (Throwable t) {\n      if (log.isErrorEnabled()) {\n        log.error(\"User's action execute method failed. Action:\" + \"AddToNewFavoritesList\", t);\n      }\n    }\n  }","id":2443,"modified_method":"public void doExecute(@NotNull final AnActionEvent event) {\n    try {\n      MPSFavoritesManager favoritesManager = AddToNewFavoritesList_Action.this.project.getComponent(MPSFavoritesManager.class);\n      final String name = Messages.showInputDialog(AddToNewFavoritesList_Action.this.project, \"Input new favorites list name\", \"Add New Favorites List\", Messages.getInformationIcon(), \"Unnamed\", new InputValidator() {\n        public boolean checkInput(String p0) {\n          return true;\n        }\n\n        public boolean canClose(String p0) {\n          return true;\n        }\n      });\n      favoritesManager.addNewFavoritesList(name);\n      FavoritesProjectPane pane = FavoritesUtil.getCurrentPane(AddToNewFavoritesList_Action.this.project);\n      List<Object> toMove = FavoritesUtil.getObjects(AddToNewFavoritesList_Action.this.treeNodes);\n      if (pane != null) {\n        favoritesManager.removeRoots(pane.getSubId(), toMove);\n      }\n      favoritesManager.addRoots(name, toMove);\n    } catch (Throwable t) {\n      if (log.isErrorEnabled()) {\n        log.error(\"User's action execute method failed. Action:\" + \"AddToNewFavoritesList\", t);\n      }\n    }\n  }","commit_id":"2ab42425b5bc9bd789a5d864fd0e971644b7b593","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doUpdate(@NotNull AnActionEvent event) {\n    try {\n      {\n        ProjectView projectView = ProjectView.getInstance(AddToNewFavoritesList_Action.this.project);\n        AbstractProjectViewPane pane = projectView.getCurrentProjectViewPane();\n        if (pane instanceof FavoritesProjectPane) {\n          event.getPresentation().setText(\"Send to New Favorites List\");\n        }\n      }\n    } catch (Throwable t) {\n      if (log.isErrorEnabled()) {\n        log.error(\"User's action doUpdate method failed. Action:\" + \"AddToNewFavoritesList\", t);\n      }\n      this.disable(event.getPresentation());\n    }\n  }","id":2444,"modified_method":"public void doUpdate(@NotNull AnActionEvent event) {\n    try {\n      if (FavoritesUtil.isActiveFavorites(AddToNewFavoritesList_Action.this.project)) {\n        event.getPresentation().setText(\"Send to New Favorites List\");\n      }\n    } catch (Throwable t) {\n      if (log.isErrorEnabled()) {\n        log.error(\"User's action doUpdate method failed. Action:\" + \"AddToNewFavoritesList\", t);\n      }\n      this.disable(event.getPresentation());\n    }\n  }","commit_id":"2ab42425b5bc9bd789a5d864fd0e971644b7b593","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean isApplicable(AnActionEvent event) {\n    ProjectView projectView = ProjectView.getInstance(DeleteFavoritesList_Action.this.project);\n    AbstractProjectViewPane pane = projectView.getCurrentProjectViewPane();\n    return pane instanceof FavoritesProjectPane;\n  }","id":2445,"modified_method":"public boolean isApplicable(AnActionEvent event) {\n    return FavoritesUtil.isActiveFavorites(DeleteFavoritesList_Action.this.project);\n  }","commit_id":"2ab42425b5bc9bd789a5d864fd0e971644b7b593","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doUpdate(AnActionEvent event) {\n    try {\n      ProjectView projectView = ProjectView.getInstance(event.getData(MPSDataKeys.PROJECT));\n      AbstractProjectViewPane pane = projectView.getCurrentProjectViewPane();\n      boolean isInFavorites = pane instanceof FavoritesProjectPane;\n      String text = ((isInFavorites ?\n        \"Send\" :\n        \"Add\"\n      )) + \" to Favorites\";\n      event.getPresentation().setText(text);\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {\n      this.addPlace(p.first, p.second);\n    }\n  }","id":2446,"modified_method":"public void doUpdate(AnActionEvent event) {\n    try {\n      Project project = event.getData(MPSDataKeys.PROJECT);\n      String text = ((FavoritesUtil.isActiveFavorites(project) ?\n        \"Send\" :\n        \"Add\"\n      )) + \" to Favorites\";\n      event.getPresentation().setText(text);\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {\n      this.addPlace(p.first, p.second);\n    }\n  }","commit_id":"2ab42425b5bc9bd789a5d864fd0e971644b7b593","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean canSelect(SelectInContext context) {\n    VirtualFile file = context.getVirtualFile();\n    if (!(file instanceof MPSNodeVirtualFile)) return false;\n    MPSNodeVirtualFile nodeVirtualFile = (MPSNodeVirtualFile) file;\n    Project project = context.getProject();\n    ProjectView projectView = ProjectView.getInstance(project);\n    if (projectView == null) return false;\n    AbstractProjectViewPane currentPane = projectView.getCurrentProjectViewPane();\n    if (currentPane instanceof FavoritesProjectPane) {\n      FavoritesProjectPane currentFavoritesPane = (FavoritesProjectPane) currentPane;\n      MPSFavoritesManager favoritesManager = project.getComponent(MPSFavoritesManager.class);\n      if (favoritesManager == null) return false;\n      String name = currentFavoritesPane.getSubId();\n      List<Object> objects = favoritesManager.getRoots(name);\n      if (getAvailableNodes(objects).contains(nodeVirtualFile.getNode())) {\n        return true;\n      }\n    }\n    return false;\n  }","id":2447,"modified_method":"public boolean canSelect(SelectInContext context) {\n    VirtualFile file = context.getVirtualFile();\n    if (!(file instanceof MPSNodeVirtualFile)) return false;\n    MPSNodeVirtualFile nodeVirtualFile = (MPSNodeVirtualFile) file;\n    Project project = context.getProject();\n    FavoritesProjectPane currentFavoritesPane = FavoritesUtil.getCurrentPane(project);\n    if (currentFavoritesPane != null) {\n      MPSFavoritesManager favoritesManager = project.getComponent(MPSFavoritesManager.class);\n      if (favoritesManager == null) return false;\n      String name = currentFavoritesPane.getSubId();\n      List<Object> objects = favoritesManager.getRoots(name);\n      if (getAvailableNodes(objects).contains(nodeVirtualFile.getNode())) {\n        return true;\n      }\n    }\n    return false;\n  }","commit_id":"2ab42425b5bc9bd789a5d864fd0e971644b7b593","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doUpdate(AnActionEvent event) {\n    try {\n      GenerateFavorites_ActionGroup.this.removeAll();\n      Project project = MPSDataKeys.PROJECT.getData(event.getDataContext());\n      ProjectView projectView = ProjectView.getInstance(project);\n      AbstractProjectViewPane pane = projectView.getCurrentProjectViewPane();\n      boolean isInFavorites = pane instanceof FavoritesProjectPane;\n      if (!(isInFavorites)) {\n        return;\n      }\n      TreeNode treeNode = MPSDataKeys.LOGICAL_VIEW_NODE.getData(event.getDataContext());\n      if (treeNode instanceof SNodeTreeNode) {\n        GenerateFavorites_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.GenerateFilesFromModel_Action\", \"jetbrains.mps.ide\", new GenerateFilesFromModelsAction());\n        GenerateFavorites_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.GenerateTextFromModel_Action\", \"jetbrains.mps.ide\", new GenerateTextFromModelsAction());\n      }\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {\n      this.addPlace(p.first, p.second);\n    }\n  }","id":2448,"modified_method":"public void doUpdate(AnActionEvent event) {\n    try {\n      GenerateFavorites_ActionGroup.this.removeAll();\n      Project project = MPSDataKeys.PROJECT.getData(event.getDataContext());\n      if (!(FavoritesUtil.isActiveFavorites(project))) {\n        return;\n      }\n      TreeNode treeNode = MPSDataKeys.LOGICAL_VIEW_NODE.getData(event.getDataContext());\n      if (treeNode instanceof SNodeTreeNode) {\n        GenerateFavorites_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.GenerateFilesFromModel_Action\", \"jetbrains.mps.ide\", new GenerateFilesFromModelsAction());\n        GenerateFavorites_ActionGroup.this.addAction(\"jetbrains.mps.ide.actions.GenerateTextFromModel_Action\", \"jetbrains.mps.ide\", new GenerateTextFromModelsAction());\n      }\n    } catch (Throwable t) {\n      LOG.error(\"User group error\", t);\n    }\n    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {\n      this.addPlace(p.first, p.second);\n    }\n  }","commit_id":"2ab42425b5bc9bd789a5d864fd0e971644b7b593","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean isApplicable(AnActionEvent event) {\n    if (RemoveFromFavorites_Action.this.treeNodes.isEmpty()) {\n      return false;\n    }\n    ProjectView projectView = ProjectView.getInstance(RemoveFromFavorites_Action.this.project);\n    AbstractProjectViewPane pane = projectView.getCurrentProjectViewPane();\n    return pane instanceof FavoritesProjectPane;\n  }","id":2449,"modified_method":"public boolean isApplicable(AnActionEvent event) {\n    if (RemoveFromFavorites_Action.this.treeNodes.isEmpty()) {\n      return false;\n    }\n    return FavoritesUtil.isActiveFavorites(RemoveFromFavorites_Action.this.project);\n  }","commit_id":"2ab42425b5bc9bd789a5d864fd0e971644b7b593","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void doExecute(@NotNull final AnActionEvent event) {\n    try {\n      ProjectView projectView = ProjectView.getInstance(RenameFavoritesList_Action.this.project);\n      FavoritesProjectPane pane = (FavoritesProjectPane) projectView.getCurrentProjectViewPane();\n      String oldName = pane.getSubId();\n      String newName = Messages.showInputDialog(\"Input favorites list new name\", \"New Name For Favorites List\", Messages.getQuestionIcon(), oldName, null);\n      if (newName == null || StringUtils.isEmpty(newName)) {\n        return;\n      }\n      MPSFavoritesManager favoritesManager = RenameFavoritesList_Action.this.project.getComponent(MPSFavoritesManager.class);\n      if (favoritesManager == null) {\n        return;\n      }\n      List<Object> objects = favoritesManager.getRoots(oldName);\n      favoritesManager.addNewFavoritesList(newName);\n      favoritesManager.addRoots(newName, objects);\n      favoritesManager.removeFavoritesList(oldName);\n    } catch (Throwable t) {\n      if (log.isErrorEnabled()) {\n        log.error(\"User's action execute method failed. Action:\" + \"RenameFavoritesList\", t);\n      }\n    }\n  }","id":2450,"modified_method":"public void doExecute(@NotNull final AnActionEvent event) {\n    try {\n      FavoritesProjectPane pane = FavoritesUtil.getCurrentPane(RenameFavoritesList_Action.this.project);\n      String oldName = pane.getSubId();\n      String newName = Messages.showInputDialog(\"Input favorites list new name\", \"New Name For Favorites List\", Messages.getQuestionIcon(), oldName, null);\n      if (newName == null || StringUtils.isEmpty(newName)) {\n        return;\n      }\n      MPSFavoritesManager favoritesManager = RenameFavoritesList_Action.this.project.getComponent(MPSFavoritesManager.class);\n      if (favoritesManager == null) {\n        return;\n      }\n      List<Object> objects = favoritesManager.getRoots(oldName);\n      favoritesManager.addNewFavoritesList(newName);\n      favoritesManager.addRoots(newName, objects);\n      favoritesManager.removeFavoritesList(oldName);\n    } catch (Throwable t) {\n      if (log.isErrorEnabled()) {\n        log.error(\"User's action execute method failed. Action:\" + \"RenameFavoritesList\", t);\n      }\n    }\n  }","commit_id":"2ab42425b5bc9bd789a5d864fd0e971644b7b593","url":"https://github.com/JetBrains/MPS"},{"original_method":"public boolean isApplicable(AnActionEvent event) {\n    ProjectView projectView = ProjectView.getInstance(RenameFavoritesList_Action.this.project);\n    AbstractProjectViewPane pane = projectView.getCurrentProjectViewPane();\n    return pane instanceof FavoritesProjectPane;\n  }","id":2451,"modified_method":"public boolean isApplicable(AnActionEvent event) {\n    return FavoritesUtil.isActiveFavorites(RenameFavoritesList_Action.this.project);\n  }","commit_id":"2ab42425b5bc9bd789a5d864fd0e971644b7b593","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void addSharedObject(String webRoom, String voiceRoom, ISharedObject so) {\r\n\t\tSharedObjectInfo soi = new SharedObjectInfo(webRoom, voiceRoom, so);\r\n\t\tvoiceRooms.put(voiceRoom, soi);\r\n\t\twebRooms.put(webRoom, soi);\r\n\t}","id":2452,"modified_method":"public void addSharedObject(String webRoom, String voiceRoom, ISharedObject so) {\r\n\t\tRoomInfo soi = new RoomInfo(webRoom, voiceRoom, so);\r\n\t\tvoiceRooms.put(voiceRoom, soi);\r\n\t\twebRooms.put(webRoom, soi);\r\n\t}","commit_id":"1091fc3efd5fb3740e96de8fe1c9786d63f6036b","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void muted(String room, Integer participant, Boolean muted){\r\n\t\tlog.debug(\"Participant $user mute $muted\");\r\n\t\tSharedObjectInfo soi = voiceRooms.get(room);\r\n\t\tif (soi != null) {\r\n\t\t\tList<String> list = new ArrayList<String>();\r\n\t\t\tlist.add(participant.toString());\r\n\t\t\tsoi.getSharedObject().sendMessage(\"userMute\", list);\r\n\t\t}\t\t\r\n\t}","id":2453,"modified_method":"public void muted(String room, Integer participant, Boolean muted){\r\n\t\tlog.debug(\"Participant $user mute $muted\");\r\n\t\tRoomInfo soi = voiceRooms.get(room);\r\n\t\tif (soi != null) {\r\n\t\t\tList<String> list = new ArrayList<String>();\r\n\t\t\tlist.add(participant.toString());\r\n\t\t\tsoi.getSharedObject().sendMessage(\"userMute\", list);\r\n\t\t}\t\t\r\n\t}","commit_id":"1091fc3efd5fb3740e96de8fe1c9786d63f6036b","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public ClientManager() {\r\n\t\tvoiceRooms = new ConcurrentHashMap<String, SharedObjectInfo>();\r\n\t\twebRooms = new ConcurrentHashMap<String, SharedObjectInfo>();\r\n\t}","id":2454,"modified_method":"public ClientManager() {\r\n\t\tvoiceRooms = new ConcurrentHashMap<String, RoomInfo>();\r\n\t\twebRooms = new ConcurrentHashMap<String, RoomInfo>();\r\n\t}","commit_id":"1091fc3efd5fb3740e96de8fe1c9786d63f6036b","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void joined(String room, Integer participant, String name, Boolean muted, Boolean talking){\r\n\t\tlog.debug(\"Participant $name joining\");\r\n\t\tSharedObjectInfo soi = voiceRooms.get(room);\r\n\t\tif (soi != null) {\r\n\t\t\tList<String> list = new ArrayList<String>();\r\n\t\t\tlist.add(participant.toString());\r\n\t\t\tlist.add(name);\r\n\t\t\tlist.add(muted.toString());\r\n\t\t\tlist.add(talking.toString());\r\n\t\t\tsoi.getSharedObject().sendMessage(\"userJoin\", list);\r\n\t\t}\r\n\t\t\t\t\r\n\t}","id":2455,"modified_method":"public void joined(String room, Integer participant, String name, Boolean muted, Boolean talking){\r\n\t\tlog.debug(\"Participant $name joining\");\r\n\t\tRoomInfo soi = voiceRooms.get(room);\r\n\t\tif (soi != null) {\r\n\t\t\tList<String> list = new ArrayList<String>();\r\n\t\t\tlist.add(participant.toString());\r\n\t\t\tlist.add(name);\r\n\t\t\tlist.add(muted.toString());\r\n\t\t\tlist.add(talking.toString());\r\n\t\t\tsoi.getSharedObject().sendMessage(\"userJoin\", list);\r\n\t\t}\r\n\t\t\t\t\r\n\t}","commit_id":"1091fc3efd5fb3740e96de8fe1c9786d63f6036b","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void left(String room, Integer participant){\r\n\t\tlog.debug(\"Participant $user leaving\");\r\n\t\tSharedObjectInfo soi = voiceRooms.get(room);\r\n\t\tif (soi != null) {\r\n\t\t\tList<String> list = new ArrayList<String>();\r\n\t\t\tlist.add(participant.toString());\r\n\t\t\tsoi.getSharedObject().sendMessage(\"userLeft\", list);\r\n\t\t}\r\n\t}","id":2456,"modified_method":"public void left(String room, Integer participant){\r\n\t\tlog.debug(\"Participant $user leaving\");\r\n\t\tRoomInfo soi = voiceRooms.get(room);\r\n\t\tif (soi != null) {\r\n\t\t\tList<String> list = new ArrayList<String>();\r\n\t\t\tlist.add(participant.toString());\r\n\t\t\tsoi.getSharedObject().sendMessage(\"userLeft\", list);\r\n\t\t}\r\n\t}","commit_id":"1091fc3efd5fb3740e96de8fe1c9786d63f6036b","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void removeSharedObject(String webRoom) {\r\n\t\tSharedObjectInfo soi = webRooms.remove(webRoom);\r\n\t\tif (soi != null) voiceRooms.remove(soi.getVoiceRoom());\r\n\t}","id":2457,"modified_method":"public void removeSharedObject(String webRoom) {\r\n\t\tRoomInfo soi = webRooms.remove(webRoom);\r\n\t\tif (soi != null) voiceRooms.remove(soi.getVoiceRoom());\r\n\t}","commit_id":"1091fc3efd5fb3740e96de8fe1c9786d63f6036b","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void talking(String room, Integer participant, Boolean talking){\r\n\t\tlog.debug(\"Participant $user talk $talking\");\r\n\t\tSharedObjectInfo soi = voiceRooms.get(room);\r\n\t\tif (soi != null) {\r\n\t\t\tList<String> list = new ArrayList<String>();\r\n\t\t\tlist.add(participant.toString());\r\n\t\t\tsoi.getSharedObject().sendMessage(\"userTalk\", list);\r\n\t\t}\r\n\t}","id":2458,"modified_method":"public void talking(String room, Integer participant, Boolean talking){\r\n\t\tlog.debug(\"Participant $user talk $talking\");\r\n\t\tRoomInfo soi = voiceRooms.get(room);\r\n\t\tif (soi != null) {\r\n\t\t\tList<String> list = new ArrayList<String>();\r\n\t\t\tlist.add(participant.toString());\r\n\t\t\tsoi.getSharedObject().sendMessage(\"userTalk\", list);\r\n\t\t}\r\n\t}","commit_id":"1091fc3efd5fb3740e96de8fe1c9786d63f6036b","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public abstract void handleResponse(ManagerResponse response, KonferenceEventHandler eventHandler);","id":2459,"modified_method":"public abstract void handleResponse(ManagerResponse response, KonferenceEventsTransformer eventHandler);","commit_id":"1091fc3efd5fb3740e96de8fe1c9786d63f6036b","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void setListener(ConferenceListener listener) {\r\n\t\tthis.listener = listener;\r\n\t}","id":2460,"modified_method":"public void setListener(ConferenceServerListener listener) {\r\n\t\tthis.listener = listener;\r\n\t}","commit_id":"1091fc3efd5fb3740e96de8fe1c9786d63f6036b","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public ConferenceEvent transform(KonferenceEvent event) {\t\t\r\n\t\tif (event instanceof ConferenceJoinEvent) {\r\n\t\t\tConferenceJoinEvent cj = (ConferenceJoinEvent) event;\r\n\t\t\tParticipantJoinedEvent pj = new ParticipantJoinedEvent(cj.getMember(), cj.getConferenceName(),\r\n\t\t\t\t\tcj.getCallerID(), cj.getCallerIDName(), cj.getMuted(), cj.getSpeaking());\r\n\t\t\treturn pj;\r\n\t\t} else if (event instanceof ConferenceLeaveEvent) {\r\n\t\t\tConferenceLeaveEvent cl = (ConferenceLeaveEvent) event;\r\n\t\t\tParticipantLeftEvent pl = new ParticipantLeftEvent(cl.getMember(), cl.getConferenceName());\r\n\t\t\treturn pl;\r\n\t\t} else if (event instanceof ConferenceMemberMuteEvent) {\r\n\t\t\tConferenceMemberMuteEvent cmm = (ConferenceMemberMuteEvent) event;\r\n\t\t\tParticipantMutedEvent pm = new ParticipantMutedEvent(cmm.getMemberId(), cmm.getConferenceName(), true);\r\n\t\t\treturn pm;\r\n\t\t} else if (event instanceof ConferenceMemberUnmuteEvent) {\r\n\t\t\tConferenceMemberUnmuteEvent cmu = (ConferenceMemberUnmuteEvent) event;\r\n\t\t\tParticipantMutedEvent pm = new ParticipantMutedEvent(cmu.getMemberId(), cmu.getConferenceName(), false);\r\n\t\t\treturn pm;\r\n\t\t} else if (event instanceof ConferenceStateEvent) {\r\n\t\t\tConferenceStateEvent cse = (ConferenceStateEvent) event;\r\n\t\t\tboolean talking = \"speaking\".equals(cse.getState())? true : false;\r\n\t\t\tParticipantTalkingEvent pt = new ParticipantTalkingEvent(cse.getMemberId(), cse.getConferenceName(), talking);\r\n\t\t\treturn pt;\r\n\t\t}\r\n\t\t\r\n\t\treturn new UnknownConferenceEvent(new Integer(0),\"unknown\");\r\n\t}","id":2461,"modified_method":"public void transform(KonferenceEvent event) {\t\t\r\n\t\tif (event instanceof ConferenceJoinEvent) {\r\n\t\t\tConferenceJoinEvent cj = (ConferenceJoinEvent) event;\r\n\t\t\tParticipantJoinedEvent pj = new ParticipantJoinedEvent(cj.getMember(), cj.getConferenceName(),\r\n\t\t\t\t\tcj.getCallerID(), cj.getCallerIDName(), cj.getMuted(), cj.getSpeaking());\r\n\t\t\tconferenceEventListener.handleConferenceEvent(pj);\r\n\t\t} else if (event instanceof ConferenceLeaveEvent) {\r\n\t\t\tConferenceLeaveEvent cl = (ConferenceLeaveEvent) event;\r\n\t\t\tParticipantLeftEvent pl = new ParticipantLeftEvent(cl.getMember(), cl.getConferenceName());\r\n\t\t\tconferenceEventListener.handleConferenceEvent(pl);\r\n\t\t} else if (event instanceof ConferenceMemberMuteEvent) {\r\n\t\t\tConferenceMemberMuteEvent cmm = (ConferenceMemberMuteEvent) event;\r\n\t\t\tParticipantMutedEvent pm = new ParticipantMutedEvent(cmm.getMemberId(), cmm.getConferenceName(), true);\r\n\t\t\tconferenceEventListener.handleConferenceEvent(pm);\r\n\t\t} else if (event instanceof ConferenceMemberUnmuteEvent) {\r\n\t\t\tConferenceMemberUnmuteEvent cmu = (ConferenceMemberUnmuteEvent) event;\r\n\t\t\tParticipantMutedEvent pm = new ParticipantMutedEvent(cmu.getMemberId(), cmu.getConferenceName(), false);\r\n\t\t\tconferenceEventListener.handleConferenceEvent(pm);\r\n\t\t} else if (event instanceof ConferenceStateEvent) {\r\n\t\t\tConferenceStateEvent cse = (ConferenceStateEvent) event;\r\n\t\t\tboolean talking = \"speaking\".equals(cse.getState())? true : false;\r\n\t\t\tParticipantTalkingEvent pt = new ParticipantTalkingEvent(cse.getMemberId(), cse.getConferenceName(), talking);\r\n\t\t\tconferenceEventListener.handleConferenceEvent(pt);\r\n\t\t}\r\n\t}","commit_id":"1091fc3efd5fb3740e96de8fe1c9786d63f6036b","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void setEventHandler(KonferenceEventHandler eventHandler) {\r\n\t\tthis.eventHandler = eventHandler;\r\n\t}","id":2462,"modified_method":"public void setKonferenceEventsTransformer(KonferenceEventsTransformer transformer) {\r\n\t\tthis.transformer = transformer;\r\n\t}","commit_id":"1091fc3efd5fb3740e96de8fe1c9786d63f6036b","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void sendCommand(KonferenceCommand command) {\r\n    \tfinal ManagerResponse response;\r\n    \tCommandAction cmd = command.getCommandAction(); \r\n        try {\r\n            response = manager.sendAction(cmd);\r\n                        \r\n            if (response instanceof ManagerError) {\r\n                log.error(\"Unable to send command: \");\r\n                return;\r\n            }\r\n            \r\n            if (!(response instanceof CommandResponse)) {\r\n                log.error(\"Response to command is not a CommandResponse but \"\r\n                        + response.getClass());\r\n                return;\r\n            }\r\n            \r\n            command.handleResponse(response, eventHandler);\r\n        } catch (TimeoutException e) {\r\n    \t\tSystem.out.println(\"Unable to send command\");\r\n    \t} catch (IllegalArgumentException e) {\r\n    \t\tlog.error(\"Unable to send command: \");\r\n\t\t} catch (IllegalStateException e) {\r\n\t\t\tlog.error(\"Unable to send command: \");\r\n\t\t} catch (IOException e) {\r\n\t\t\tlog.error(\"Unable to send command: \");\r\n\t\t}    \t    \t\r\n    }","id":2463,"modified_method":"public void sendCommand(KonferenceCommand command) {\r\n    \tfinal ManagerResponse response;\r\n    \tCommandAction cmd = command.getCommandAction(); \r\n        try {\r\n            response = manager.sendAction(cmd);\r\n                        \r\n            if (response instanceof ManagerError) {\r\n                log.error(\"Unable to send command: \");\r\n                return;\r\n            }\r\n            \r\n            if (!(response instanceof CommandResponse)) {\r\n                log.error(\"Response to command is not a CommandResponse but \"\r\n                        + response.getClass());\r\n                return;\r\n            }\r\n            \r\n            command.handleResponse(response, transformer);\r\n        } catch (TimeoutException e) {\r\n    \t\tSystem.out.println(\"Unable to send command\");\r\n    \t} catch (IllegalArgumentException e) {\r\n    \t\tlog.error(\"Unable to send command: \");\r\n\t\t} catch (IllegalStateException e) {\r\n\t\t\tlog.error(\"Unable to send command: \");\r\n\t\t} catch (IOException e) {\r\n\t\t\tlog.error(\"Unable to send command: \");\r\n\t\t}    \t    \t\r\n    }","commit_id":"1091fc3efd5fb3740e96de8fe1c9786d63f6036b","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"private void handleConferenceEvent(KonferenceEvent event) {\r\n    \teventHandler.handleKonferenceEvent(event);\r\n    }","id":2464,"modified_method":"private void handleConferenceEvent(KonferenceEvent event) {\r\n    \ttransformer.transform(event);\r\n    }","commit_id":"1091fc3efd5fb3740e96de8fe1c9786d63f6036b","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"@Override\r\n\tpublic void propertyChange(PropertyChangeEvent evt) {\r\n\t\tMeetMeUser changedUser = (MeetMeUser) evt.getSource();\r\n\t\t\r\n\t\tlog.debug(\"Received property changed event for \" + evt.getPropertyName() +\r\n\t\t\t\t\" old = '\" + evt.getOldValue() + \"' new = '\" + evt.getNewValue() +\r\n\t\t\t\t\"' room = '\" + ((MeetMeUser) evt.getSource()).getRoom() + \"'\");\t\r\n\t\t\r\n\t\tif (evt.getPropertyName().equals(\"muted\")) {\t\t\t\t\r\n\t\t\tconferenceListener.muted(changedUser.getRoom().getRoomNumber(),\r\n\t\t\t\t\tchangedUser.getUserNumber(), changedUser.isMuted());\r\n\t\t} else if (evt.getPropertyName().equals(\"talking\")) {\t\t\t\t\r\n\t\t\tconferenceListener.talking(changedUser.getRoom().getRoomNumber(),\r\n\t\t\t\t\tchangedUser.getUserNumber(), changedUser.isTalking());\r\n\t\t} else if (\"state\".equals(evt.getPropertyName())) {\r\n\t\t\tif (MeetMeUserState.LEFT == (MeetMeUserState) evt.getNewValue()) {\r\n\t\t\t\tconferenceListener.left(changedUser.getRoom().getRoomNumber(), \r\n\t\t\t\t\t\tchangedUser.getUserNumber());\r\n\t\t\t}\r\n\t\t}\r\n\t}","id":2465,"modified_method":"@Override\r\n\tpublic void propertyChange(PropertyChangeEvent evt) {\r\n\t\tMeetMeUser cu = (MeetMeUser) evt.getSource();\r\n\t\t\r\n\t\tlog.debug(\"Received property changed event for \" + evt.getPropertyName() +\r\n\t\t\t\t\" old = '\" + evt.getOldValue() + \"' new = '\" + evt.getNewValue() +\r\n\t\t\t\t\"' room = '\" + ((MeetMeUser) evt.getSource()).getRoom() + \"'\");\t\r\n\t\t\r\n\t\tif (evt.getPropertyName().equals(\"muted\")) {\t\r\n\t\t\tParticipantMutedEvent pme = new ParticipantMutedEvent(cu.getUserNumber(), \r\n\t\t\t\t\t\t\t\tcu.getRoom().getRoomNumber(), cu.isMuted());\r\n\t\t\tconferenceEventListener.handleConferenceEvent(pme);\r\n\t\t} else if (evt.getPropertyName().equals(\"talking\")) {\t\r\n\t\t\tParticipantTalkingEvent pte = new ParticipantTalkingEvent(cu.getUserNumber(),\r\n\t\t\t\t\t\t\t\tcu.getRoom().getRoomNumber(), cu.isTalking());\r\n\t\t\tconferenceEventListener.handleConferenceEvent(pte);\r\n\t\t} else if (\"state\".equals(evt.getPropertyName())) {\r\n\t\t\tif (MeetMeUserState.LEFT == (MeetMeUserState) evt.getNewValue()) {\r\n\t\t\t\tParticipantLeftEvent ple = new ParticipantLeftEvent(cu.getUserNumber(),\r\n\t\t\t\t\t\t\t\tcu.getRoom().getRoomNumber());\r\n\t\t\t\tconferenceEventListener.handleConferenceEvent(ple);\r\n\t\t\t}\r\n\t\t}\r\n\t}","commit_id":"1091fc3efd5fb3740e96de8fe1c9786d63f6036b","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void setConferenceServerListener(ConferenceListener l) {\r\n\t\tlog.debug(\"setting conference listener\");\r\n\t\tconferenceListener = l;\r\n\t\tlog.debug(\"setting conference listener DONE\");\r\n\t}","id":2466,"modified_method":"public void setConferenceEventListener(ConferenceEventListener l) {\r\n\t\tlog.debug(\"setting conference listener\");\r\n\t\tconferenceEventListener = l;\r\n\t\tlog.debug(\"setting conference listener DONE\");\r\n\t}","commit_id":"1091fc3efd5fb3740e96de8fe1c9786d63f6036b","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException\r\n\t{\r\n\t\tmeta=(XsltMeta)smi;\r\n\t\tdata=(XsltData)sdi;\r\n\t\t\r\n\t\tObject[] row = getRow();\r\n\t\t\r\n\t\tif (row==null)  // no more input to be expected...\r\n\t\t{\r\n\t\t\tsetOutputDone();\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (first)\r\n\t\t{\r\n\t\t\tfirst=false;\r\n\t\t\tdata.outputRowMeta = getInputRowMeta().clone();\r\n\t\t\tmeta.getFields(data.outputRowMeta, getStepname(), null, null, this);\r\n\t\t\t\r\n\t\t\t// Check if The result field is given\r\n\t\t\tif (Const.isEmpty(meta.getResultfieldname()))\r\n\t\t\t{\r\n\t\t\t\t// Result Field is missing !\r\n\t\t\t\tlogError(BaseMessages.getString(PKG, \"Xslt.Log.ErrorResultFieldMissing\")); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t\tthrow new KettleStepException(BaseMessages.getString(PKG, \"Xslt.Exception.ErrorResultFieldMissing\")); \r\n\t\t\t}\r\n\t\t\r\n\t\t\t// Check if The XML field is given\r\n\t\t\tif (Const.isEmpty(meta.getFieldname()))\r\n\t\t\t{\r\n\t\t\t\t// Result Field is missing !\r\n\t\t\t\tlogError(BaseMessages.getString(PKG, \"Xslt.Exception.ErrorXMLFieldMissing\")); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t\tthrow new KettleStepException(BaseMessages.getString(PKG, \"Xslt.Exception.ErrorXMLFieldMissing\")); \r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Try to get XML Field index\r\n\t\t\tdata.fieldposition = getInputRowMeta().indexOfValue(meta.getFieldname());\r\n\t\t\t// Let's check the Field\r\n\t\t\tif (data.fieldposition<0)\r\n\t\t\t{\r\n\t\t\t\t// The field is unreachable !\r\n\t\t\t\tlogError(BaseMessages.getString(PKG, \"Xslt.Log.ErrorFindingField\")+ \"[\" + meta.getFieldname()+\"]\"); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t\tthrow new KettleStepException(BaseMessages.getString(PKG, \"Xslt.Exception.CouldnotFindField\",meta.getFieldname())); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\t// Check if the XSL Filename is contained in a column\r\n\t\t\tif (meta.useXSLFileFieldUse())\r\n\t\t\t{\r\n\t\t\t\tif (Const.isEmpty(meta.getXSLFileField()))\r\n\t\t\t\t{\r\n\t\t\t\t\t// The field is missing\r\n\t\t\t\t\t//\tResult field is missing !\r\n\t\t\t\t\tlogError(BaseMessages.getString(PKG, \"Xslt.Log.ErrorXSLFileFieldMissing\")); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t\t\tthrow new KettleStepException(BaseMessages.getString(PKG, \"Xslt.Exception.ErrorXSLFileFieldMissing\")); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\t// Try to get Field index\r\n\t\t\t\tdata.fielxslfiledposition = getInputRowMeta().indexOfValue(meta.getXSLFileField());\r\n\t\t\t\r\n\t\t\t\t//  Let's check the Field\r\n\t\t\t\tif (data.fielxslfiledposition<0)\r\n\t\t\t\t{\r\n\t\t\t\t\t//\t The field is unreachable !\r\n\t\t\t\t\tlogError(BaseMessages.getString(PKG, \"Xslt.Log.ErrorXSLFileFieldFinding\")+ \"[\" + meta.getXSLFileField()+\"]\"); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t\t\tthrow new KettleStepException(BaseMessages.getString(PKG, \"Xslt.Exception.ErrorXSLFileFieldFinding\",meta.getXSLFileField())); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t\t}\t\r\n\t\t\t\t\r\n\t\t\t}else\r\n\t\t\t{\r\n\t\t\t\tif(Const.isEmpty(meta.getXslFilename()))\r\n\t\t\t\t{\r\n\t\t\t\t\tlogError(BaseMessages.getString(PKG, \"Xslt.Log.ErrorXSLFile\")); \r\n\t\t\t\t\tthrow new KettleStepException(BaseMessages.getString(PKG, \"Xslt.Exception.ErrorXSLFile\"));\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// Check if XSL File exists!\r\n\t\t\t\tdata.xslfilename = environmentSubstitute(meta.getXslFilename());\r\n\t\t\t\tjava.io.File file=new java.io.File(data.xslfilename);\r\n\t\t\t\tif(!file.exists())\r\n\t\t\t\t{\r\n\t\t\t\t\tlogError(BaseMessages.getString(PKG, \"Xslt.Log.ErrorXSLFileNotExists\",data.xslfilename)); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t\t\tthrow new KettleStepException(BaseMessages.getString(PKG, \"Xslt.Exception.ErrorXSLFileNotExists\",data.xslfilename)); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t\t}\r\n\t\t\t\tif(!file.isFile())\r\n\t\t\t\t{\r\n\t\t\t\t\tlogError(BaseMessages.getString(PKG, \"Xslt.Log.ErrorXSLNotAFile\",data.xslfilename)); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t\t\tthrow new KettleStepException(BaseMessages.getString(PKG, \"Xslt.Exception.ErrorXSLNotAFile\",data.xslfilename)); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\r\n\t\t\r\n\t\t// Get the field value\r\n\t\tString Fieldvalue= getInputRowMeta().getString(row,data.fieldposition);\t\r\n\t\t\r\n\t\tString xmlString=null;\r\n\r\n\t\tif (meta.useXSLFileFieldUse())\r\n\t\t{\r\n\t\t\t// Get the value\t\r\n\t\t\tdata.xslfilename= getInputRowMeta().getString(row,data.fielxslfiledposition);\t\r\n\t\t\tif (log.isDetailed()) logDetailed(BaseMessages.getString(PKG, \"Xslt.Log.XslfileNameFromFied\",data.xslfilename,meta.getXSLFileField()));\t\t\t\r\n\t\t}\r\n\r\n\t\tboolean sendToErrorRow=false;\r\n\t    String errorMessage = null;\r\n\t\ttry {\t\t\t\r\n\t\t\tif(log.isDetailed()) logDetailed(BaseMessages.getString(PKG, \"Xslt.Log.Filexsl\") + data.xslfilename);\r\n\t\t\tTransformerFactory factory = TransformerFactory.newInstance();\r\n\t\t\t\r\n\t\t\tif (meta.getXSLFactory().equals(\"SAXON\"))\r\n\t\t\t{\r\n\t\t\t\t// Set the TransformerFactory to the SAXON implementation.\r\n\t\t\t\tfactory = new net.sf.saxon.TransformerFactoryImpl(); \r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n      FileInputStream xslInputStream = new FileInputStream(data.xslfilename);\r\n      try {\r\n  \t\t\t// Use the factory to create a template containing the xsl file\r\n  \t\t\tTemplates template = factory.newTemplates(new StreamSource(\txslInputStream ) );\r\n  \t\t\t// Use the template to create a transformer\r\n  \t\t\tTransformer xformer = template.newTransformer();\r\n  \t\t\tSource source = new StreamSource(new StringReader(Fieldvalue));\t\t\t\r\n  \t\t    StreamResult resultat = new StreamResult(new StringWriter());\t   \r\n  \t\t\txformer.transform(source, resultat);\r\n  \t\t\txmlString = resultat.getWriter().toString();\t\r\n  \t\t\tif(log.isDetailed()) \r\n  \t\t\t{\r\n  \t\t\t\tlogDetailed(BaseMessages.getString(PKG, \"Xslt.Log.FileResult\"));\r\n  \t\t\t\tlogDetailed(xmlString);\t\t\r\n  \t\t\t}\r\n  \t\t\tObject[] outputRowData =RowDataUtil.addValueData(row, getInputRowMeta().size(),xmlString);\r\n  \t\t\t\r\n  \t\t\tif (log.isRowLevel()) { logRowlevel(BaseMessages.getString(PKG, \"Xslt.Log.ReadRow\") + \" \" +  getInputRowMeta().getString(row)); } \r\n  \t\t\t//\tadd new values to the row.\r\n  \t    putRow(data.outputRowMeta, outputRowData);  // copy row to output rowset(s);\r\n      } finally {\r\n        BaseStep.closeQuietly(xslInputStream);\r\n      }\r\n\t\t} \r\n\t\tcatch (Exception e) {\r\n\t\t\tif (getStepMeta().isDoingErrorHandling())\r\n\t        {\r\n\t           sendToErrorRow = true;\r\n\t           errorMessage = e.getMessage();\r\n\t        }\r\n\t            \r\n\t\t\tif (sendToErrorRow) \r\n            {\r\n                // Simply add this row to the error row\r\n                putError(getInputRowMeta(), row, 1, errorMessage, meta.getResultfieldname(), \"XSLT01\");  \r\n           \r\n            }\r\n\t\t\telse\r\n\t\t\t{\r\n\t            logError(BaseMessages.getString(PKG, \"Xslt.ErrorProcesing\" + \" : \"+ e.getMessage()));\r\n\t            throw new KettleStepException(BaseMessages.getString(PKG, \"Xslt.ErrorProcesing\"), e);\r\n\t\t\t}\r\n\t\t}\r\n   \r\n\t\treturn true;\t\r\n\t}","id":2467,"modified_method":"public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException\r\n\t{\r\n\t\tmeta=(XsltMeta)smi;\r\n\t\tdata=(XsltData)sdi;\r\n\t\t\r\n\t\tObject[] row = getRow();\r\n\t\t\r\n\t\tif (row==null)  // no more input to be expected...\r\n\t\t{\r\n\t\t\tsetOutputDone();\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (first)\r\n\t\t{\r\n\t\t\tfirst=false;\r\n\t\t\tdata.outputRowMeta = getInputRowMeta().clone();\r\n\t\t\tmeta.getFields(data.outputRowMeta, getStepname(), null, null, this);\r\n\t\t\t\r\n\t\t\t// Check if The result field is given\r\n\t\t\tif (Const.isEmpty(meta.getResultfieldname()))\r\n\t\t\t{\r\n\t\t\t\t// Result Field is missing !\r\n\t\t\t\tlogError(BaseMessages.getString(PKG, \"Xslt.Log.ErrorResultFieldMissing\")); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t\tthrow new KettleStepException(BaseMessages.getString(PKG, \"Xslt.Exception.ErrorResultFieldMissing\")); \r\n\t\t\t}\r\n\t\t\r\n\t\t\t// Check if The XML field is given\r\n\t\t\tif (Const.isEmpty(meta.getFieldname()))\r\n\t\t\t{\r\n\t\t\t\t// Result Field is missing !\r\n\t\t\t\tlogError(BaseMessages.getString(PKG, \"Xslt.Exception.ErrorXMLFieldMissing\")); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t\tthrow new KettleStepException(BaseMessages.getString(PKG, \"Xslt.Exception.ErrorXMLFieldMissing\")); \r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Try to get XML Field index\r\n\t\t\tdata.fieldposition = getInputRowMeta().indexOfValue(meta.getFieldname());\r\n\t\t\t// Let's check the Field\r\n\t\t\tif (data.fieldposition<0)\r\n\t\t\t{\r\n\t\t\t\t// The field is unreachable !\r\n\t\t\t\tlogError(BaseMessages.getString(PKG, \"Xslt.Log.ErrorFindingField\")+ \"[\" + meta.getFieldname()+\"]\"); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t\tthrow new KettleStepException(BaseMessages.getString(PKG, \"Xslt.Exception.CouldnotFindField\",meta.getFieldname())); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t}\r\n\t\t\t\t\r\n\t\t\t// Check if the XSL Filename is contained in a column\r\n\t\t\tif (meta.useXSLField())\r\n\t\t\t{\r\n\t\t\t\tif (Const.isEmpty(meta.getXSLFileField()))\r\n\t\t\t\t{\r\n\t\t\t\t\t// The field is missing\r\n\t\t\t\t\t//\tResult field is missing !\r\n\t\t\t\t\tlogError(BaseMessages.getString(PKG, \"Xslt.Log.ErrorXSLFileFieldMissing\")); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t\t\tthrow new KettleStepException(BaseMessages.getString(PKG, \"Xslt.Exception.ErrorXSLFileFieldMissing\")); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\t// Try to get Field index\r\n\t\t\t\tdata.fielxslfiledposition = getInputRowMeta().indexOfValue(meta.getXSLFileField());\r\n\t\t\t\r\n\t\t\t\t//  Let's check the Field\r\n\t\t\t\tif (data.fielxslfiledposition<0)\r\n\t\t\t\t{\r\n\t\t\t\t\t//\t The field is unreachable !\r\n\t\t\t\t\tlogError(BaseMessages.getString(PKG, \"Xslt.Log.ErrorXSLFileFieldFinding\")+ \"[\" + meta.getXSLFileField()+\"]\"); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t\t\tthrow new KettleStepException(BaseMessages.getString(PKG, \"Xslt.Exception.ErrorXSLFileFieldFinding\",meta.getXSLFileField())); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t\t}\t\r\n\t\t\t\t\r\n\t\t\t}else {\r\n\t\t\t\tif(Const.isEmpty(meta.getXslFilename())) {\r\n\t\t\t\t\tlogError(BaseMessages.getString(PKG, \"Xslt.Log.ErrorXSLFile\")); \r\n\t\t\t\t\tthrow new KettleStepException(BaseMessages.getString(PKG, \"Xslt.Exception.ErrorXSLFile\"));\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// Check if XSL File exists!\r\n\t\t\t\tdata.xslfilename = environmentSubstitute(meta.getXslFilename());\r\n\t\t\t\tFileObject file=null;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tfile=KettleVFS.getFileObject(data.xslfilename);\r\n\t\t\t\t\tif(!file.exists())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlogError(BaseMessages.getString(PKG, \"Xslt.Log.ErrorXSLFileNotExists\",data.xslfilename)); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t\t\t\tthrow new KettleStepException(BaseMessages.getString(PKG, \"Xslt.Exception.ErrorXSLFileNotExists\",data.xslfilename)); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(file.getType()!=FileType.FILE)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlogError(BaseMessages.getString(PKG, \"Xslt.Log.ErrorXSLNotAFile\",data.xslfilename)); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t\t\t\tthrow new KettleStepException(BaseMessages.getString(PKG, \"Xslt.Exception.ErrorXSLNotAFile\",data.xslfilename)); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t\t\t}\r\n\t\t\t\t}catch(Exception e) {\r\n\t\t\t\t\tthrow new KettleStepException(e);\r\n\t\t\t\t} finally {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tif(file!=null) file.close();\r\n\t\t\t\t\t}catch(Exception e){};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Check output parameters\r\n\t\t\tint nrOutputProps= meta.getOutputPropertyName()==null?0:meta.getOutputPropertyName().length;\r\n\t\t\tif(nrOutputProps>0) {\r\n\t\t\t\tdata.outputProperties= new Properties();\r\n\t\t\t\tfor(int i=0; i<nrOutputProps; i++) {\r\n\t\t\t\t\tdata.outputProperties.put(meta.getOutputPropertyName()[i], environmentSubstitute(meta.getOutputPropertyValue()[i]));\r\n\t\t\t\t}\r\n\t\t\t\tdata.setOutputProperties=true;\r\n\t\t\t}\r\n\t\t\t\r\n\r\n\t\t\t// Check parameters\r\n\t\t\tdata.nrParams= meta.getParameterField()==null?0:meta.getParameterField().length;\r\n\t\t\tif(data.nrParams>0) {\r\n\t\t\t\tdata.indexOfParams = new int[data.nrParams];\r\n\t\t\t\tdata.nameOfParams = new String[data.nrParams];\r\n\t\t\t\tfor(int i=0; i<data.nrParams; i++) {\r\n\t\t\t\t\tString name = environmentSubstitute(meta.getParameterName()[i]);\r\n\t\t\t\t\tString field =  environmentSubstitute(meta.getParameterField()[i]);\r\n\t\t\t\t\tif(Const.isEmpty(field)) {\r\n\t\t\t\t\t\tthrow new KettleStepException(BaseMessages.getString(PKG, \"Xslt.Exception.ParameterFieldMissing\", name, i));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdata.indexOfParams[i]=getInputRowMeta().indexOfValue(field);\r\n\t\t\t\t\tif(data.indexOfParams[i]<0) {\r\n\t\t\t\t\t\tthrow new KettleStepException(BaseMessages.getString(PKG, \"Xslt.Exception.ParameterFieldNotFound\", name));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdata.nameOfParams[i]=name;\r\n\t\t\t\t}\r\n\t\t\t\tdata.useParameters=true;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tdata.factory = TransformerFactory.newInstance();\r\n\t\t\t\r\n\t\t\tif (meta.getXSLFactory().equals(\"SAXON\")){\r\n\t\t\t\t// Set the TransformerFactory to the SAXON implementation.\r\n\t\t\t\tdata.factory = new net.sf.saxon.TransformerFactoryImpl(); \r\n\t\t\t}\r\n\t\t}// end if first\t\r\n\t\t\r\n\t\t// Get the field value\r\n\t\tString xmlValue= getInputRowMeta().getString(row,data.fieldposition);\t\r\n\r\n\t\tif (meta.useXSLField()) {\r\n\t\t\t// Get the value\t\r\n\t\t\tdata.xslfilename= getInputRowMeta().getString(row,data.fielxslfiledposition);\t\r\n\t\t\tif (log.isDetailed()) logDetailed(BaseMessages.getString(PKG, \"Xslt.Log.XslfileNameFromFied\",data.xslfilename,meta.getXSLFileField()));\t\t\t\r\n\t\t}\r\n\r\n\r\n\t\ttry {\t\t\r\n\t\t\t\r\n\t\t\tif(log.isDetailed()) {\r\n\t\t\t\tif(meta.isXSLFieldIsAFile()) logDetailed(BaseMessages.getString(PKG, \"Xslt.Log.Filexsl\") + data.xslfilename);\r\n\t\t\t\telse logDetailed(BaseMessages.getString(PKG, \"Xslt.Log.XslStream\", data.xslfilename));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Get the template from the cache\r\n\t  \t\tTransformer transformer = data.getTemplate(data.xslfilename, meta.isXSLFieldIsAFile());\r\n\t  \t\r\n\t  \t\t// Do we need to set output properties?\r\n\t  \t \tif(data.setOutputProperties) {\r\n\t  \t \t\ttransformer.setOutputProperties(data.outputProperties);\r\n\t  \t \t}\r\n\t  \t\r\n\t  \t\t// Do we need to pass parameters?\r\n\t  \t\tif(data.useParameters) {\r\n\t  \t\t\tfor(int i=0; i<data.nrParams; i++) {\r\n\t  \t\t\t\ttransformer.setParameter(data.nameOfParams[i],  row[data.indexOfParams[i]]);\t\r\n\t  \t\t\t}\r\n\t  \t\t}\r\n\t  \t\t\r\n\t  \t\tSource source = new StreamSource(new StringReader(xmlValue));\t\r\n\t  \t\t// Prepare output stream\r\n\t  \t    StreamResult result = new StreamResult(new StringWriter());\t\r\n\t  \t    // transform xml source\r\n\t  \t  transformer.transform(source, result);\r\n\t\t\t\r\n\t\t\tString xmlString = result.getWriter().toString();\t\r\n\t  \t\tif(log.isDetailed()) {\r\n\t  \t\t\tlogDetailed(BaseMessages.getString(PKG, \"Xslt.Log.FileResult\"));\r\n\t  \t\t\tlogDetailed(xmlString);\t\t\r\n\t  \t\t}\r\n\t  \t\tObject[] outputRowData =RowDataUtil.addValueData(row, getInputRowMeta().size(),xmlString);\r\n\t  \t\t\t\r\n\t  \t\tif (log.isRowLevel()) { logRowlevel(BaseMessages.getString(PKG, \"Xslt.Log.ReadRow\") + \" \" +  getInputRowMeta().getString(row)); } \r\n\t  \t\t\r\n\t  \t\t//\tadd new values to the row.\r\n\t  \t\tputRow(data.outputRowMeta, outputRowData);  // copy row to output rowset(s);\r\n\t  \t\t\r\n\t\t} catch (Exception e) {\r\n\t\t\t\r\n\t\t\tboolean sendToErrorRow=false;\r\n\t\t    String errorMessage = null;\r\n\t\t    \r\n\t\t\tif (getStepMeta().isDoingErrorHandling()) {\r\n\t           sendToErrorRow = true;\r\n\t           errorMessage = e.getMessage();\r\n\t        }\r\n\t            \r\n\t\t\tif (sendToErrorRow)  {\r\n                // Simply add this row to the error row\r\n                putError(getInputRowMeta(), row, 1, errorMessage, meta.getResultfieldname(), \"XSLT01\");  \r\n            } else {\r\n\t            logError(BaseMessages.getString(PKG, \"Xslt.ErrorProcesing\" + \" : \"+ e.getMessage()));\r\n\t            throw new KettleStepException(BaseMessages.getString(PKG, \"Xslt.ErrorProcesing\"), e);\r\n\t\t\t}\r\n\t\t}\r\n   \r\n\t\treturn true;\t\r\n\t}","commit_id":"f9f3215cab21e96a814151d163b382b5be8ca9c7","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"/**\r\n\t * \r\n\t */\r\n\tpublic XsltData()\r\n\t{\r\n\t\tsuper();\r\n\t\tfieldposition=-1;\r\n\t\tfielxslfiledposition=-1;\r\n\t\txslfilename=null;\r\n\t}","id":2468,"modified_method":"/**\r\n\t * \r\n\t */\r\n\tpublic XsltData()\r\n\t{\r\n\t\tsuper();\r\n\t\tfieldposition=-1;\r\n\t\tfielxslfiledposition=-1;\r\n\t\txslfilename=null;\r\n\t\ttransformers= new HashMap<String, Transformer>();\r\n\t\tuseParameters=false;\r\n\t\tnrParams=0;\r\n\t\tsetOutputProperties=false;\r\n\t}","commit_id":"f9f3215cab21e96a814151d163b382b5be8ca9c7","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public XsltDialog(Shell parent, Object in, TransMeta transMeta, String sname)\r\n\t{\r\n\t\tsuper(parent, (BaseStepMeta)in, transMeta, sname);\r\n\t\tinput=(XsltMeta)in;\r\n\t}","id":2469,"modified_method":"public XsltDialog(Shell parent, Object in, TransMeta transMeta, String sname)\r\n\t{\r\n\t\tsuper(parent, (BaseStepMeta)in, transMeta, sname);\r\n\t\tinput=(XsltMeta)in;\r\n        inputFields =new HashMap<String, Integer>();\r\n\t}","commit_id":"f9f3215cab21e96a814151d163b382b5be8ca9c7","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"/**\r\n\t * Copy information from the meta-data input to the dialog fields.\r\n\t */ \r\n\tpublic void getData()\r\n\t{\r\n\t\r\n\t\tif (input.getXslFilename() != null) wXSLFilename.setText( input.getXslFilename() );\r\n\t\tif (input.getResultfieldname() != null) wResultField.setText( input.getResultfieldname() );\r\n\t\tif (input.getFieldname() != null) wField.setText( input.getFieldname() );\r\n\r\n\t\tif (input.getXSLFileField() != null) wXSLField.setText( input.getXSLFileField() );\r\n\t\t\r\n\t\twXSLFileField.setSelection(input.useXSLFileFieldUse());\r\n\t\tif (input.getXSLFactory() != null) \r\n\t\t\twXSLTFactory.setText( input.getXSLFactory() );\r\n\t\telse\r\n\t\t\twXSLTFactory.setText( \"JAXP\");\r\n\t\t\r\n\t\twStepname.selectAll();\r\n\t}","id":2470,"modified_method":"/**\r\n\t * Copy information from the meta-data input to the dialog fields.\r\n\t */ \r\n\tpublic void getData()\r\n\t{\r\n\t\r\n\t\tif (input.getXslFilename() != null) wXSLFilename.setText( input.getXslFilename() );\r\n\t\tif (input.getResultfieldname() != null) wResultField.setText( input.getResultfieldname() );\r\n\t\tif (input.getFieldname() != null) wField.setText( input.getFieldname() );\r\n\r\n\t\tif (input.getXSLFileField() != null) wXSLField.setText( input.getXSLFileField() );\r\n\t\t\r\n\t\twXSLFileField.setSelection(input.useXSLField());\r\n\t\twXSLFieldIsAFile.setSelection(input.isXSLFieldIsAFile());\r\n\t\t\r\n\t\tif (input.getXSLFactory() != null) \r\n\t\t\twXSLTFactory.setText( input.getXSLFactory() );\r\n\t\telse\r\n\t\t\twXSLTFactory.setText( \"JAXP\");\r\n\t\t\r\n\t\t\r\n\t\tif (input.getParameterName()!=null) {\r\n\t\t\tfor (int i=0;i<input.getParameterName().length;i++)\r\n\t\t\t{\r\n\t\t\t\tTableItem item = wFields.table.getItem(i);\r\n\t\t\t\titem.setText(1, Const.NVL(input.getParameterField()[i], \"\"));\r\n\t\t\t\titem.setText(2, Const.NVL(input.getParameterName()[i], \"\"));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tif (input.getOutputPropertyName()!=null) {\r\n\t\t\tfor (int i=0;i<input.getOutputPropertyName().length;i++)\r\n\t\t\t{\r\n\t\t\t\tTableItem item = wOutputProperties.table.getItem(i);\r\n\t\t\t\titem.setText(1, Const.NVL(input.getOutputPropertyName()[i], \"\"));\r\n\t\t\t\titem.setText(2, Const.NVL(input.getOutputPropertyValue()[i], \"\"));\r\n\t\t\t}\r\n\t\t}\r\n\t\twStepname.selectAll();\r\n\t}","commit_id":"f9f3215cab21e96a814151d163b382b5be8ca9c7","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private void ActivewlXSLField()\r\n\t{\r\n       \r\n\t\twXSLField.setEnabled(wXSLFileField.getSelection());\r\n\t\twlXSLField.setEnabled(wXSLFileField.getSelection());\r\n\t\t\r\n\t\twXSLFilename.setEnabled(!wXSLFileField.getSelection());\r\n\t\twlFilename.setEnabled(!wXSLFileField.getSelection());\r\n\t\twbbFilename.setEnabled(!wXSLFileField.getSelection());\r\n\t\r\n\t}","id":2471,"modified_method":"private void ActivewlXSLField()\r\n\t{\r\n       \r\n\t\twXSLField.setEnabled(wXSLFileField.getSelection());\r\n\t\twlXSLField.setEnabled(wXSLFileField.getSelection());\r\n\t\t\r\n\t\twXSLFilename.setEnabled(!wXSLFileField.getSelection());\r\n\t\twlFilename.setEnabled(!wXSLFileField.getSelection());\r\n\t\twbbFilename.setEnabled(!wXSLFileField.getSelection());\r\n\t\twlXSLFieldIsAFile.setEnabled(wXSLFileField.getSelection());\r\n\t\twXSLFieldIsAFile.setEnabled(wXSLFileField.getSelection());\r\n\t\tif(!wXSLFileField.getSelection()) {\r\n\t\t\twXSLFieldIsAFile.setSelection(false);\r\n\t\t}\r\n\t\r\n\t}","commit_id":"f9f3215cab21e96a814151d163b382b5be8ca9c7","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private void ok()\r\n\t{\r\n\t\tstepname = wStepname.getText(); // return value\r\n\r\n\t\tinput.setXslFilename( wXSLFilename.getText() );\r\n\t\tinput.setResultfieldname(wResultField.getText() );\r\n\t\tinput.setFieldname(wField.getText() );\r\n\t\tinput.setXSLFileField(wXSLField.getText() );\r\n\t\tinput.setXSLFactory(wXSLTFactory.getText() );\r\n\t\t\r\n\t\tinput.setXSLFileFieldUse(wXSLFileField.getSelection());\r\n\t\t\t\t\t\t\r\n\t\tdispose();\r\n\t}","id":2472,"modified_method":"private void ok()\r\n\t{\r\n\t\tstepname = wStepname.getText(); // return value\r\n\r\n\t\tinput.setXslFilename( wXSLFilename.getText() );\r\n\t\tinput.setResultfieldname(wResultField.getText() );\r\n\t\tinput.setFieldname(wField.getText() );\r\n\t\tinput.setXSLFileField(wXSLField.getText() );\r\n\t\tinput.setXSLFactory(wXSLTFactory.getText() );\r\n\t\t\r\n\t\tinput.setXSLField(wXSLFileField.getSelection());\r\n\t\tinput.setXSLFieldIsAFile(wXSLFieldIsAFile.getSelection());\r\n\t\tint nrparams = wFields.nrNonEmpty();\r\n\t\tint nroutputprops = wOutputProperties.nrNonEmpty();\r\n\t\tinput.allocate(nrparams, nroutputprops);\r\n\r\n\t\tif(isDebug()) logDebug(BaseMessages.getString(PKG, \"HTTPDialog.Log.FoundArguments\",String.valueOf(nrparams))); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tfor (int i=0;i<nrparams;i++)\r\n\t\t{\r\n\t\t\tTableItem item = wFields.getNonEmpty(i);\r\n\t\t\tinput.getParameterField()[i]       = item.getText(1);\r\n\t\t\tinput.getParameterName()[i]    = item.getText(2);\r\n\t\t}\r\n\t\tfor (int i=0;i<nroutputprops;i++)\r\n\t\t{\r\n\t\t\tTableItem item = wOutputProperties.getNonEmpty(i);\r\n\t\t\tinput.getOutputPropertyName()[i]       = item.getText(1);\r\n\t\t\tinput.getOutputPropertyValue()[i]    = item.getText(2);\r\n\t\t}\t\t\t\t\r\n\t\tdispose();\r\n\t}","commit_id":"f9f3215cab21e96a814151d163b382b5be8ca9c7","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private void PopulateFields(CCombo cc)\r\n\t {\r\n\t\t try{\r\n\t           \r\n\t\t\t\tcc.removeAll();\r\n\t\t\t\tRowMetaInterface r = transMeta.getPrevStepFields(stepname);\r\n\t\t\t\tif (r!=null)\r\n\t\t\t\t{\r\n\t\t             r.getFieldNames();\r\n\t\t             \r\n\t\t             for (int i=0;i<r.getFieldNames().length;i++)\r\n\t\t\t\t\t\t{\t\r\n\t\t\t\t\t\t\tcc.add(r.getFieldNames()[i]);\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t }catch(KettleException ke){\r\n\t\t\t\tnew ErrorDialog(shell, BaseMessages.getString(PKG, \"XsltDialog.FailedToGetFields.DialogTitle\"), BaseMessages.getString(PKG, \"XsltDialog.FailedToGetFields.DialogMessage\"), ke); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t}\r\n\r\n\t }","id":2473,"modified_method":"private void PopulateFields(CCombo cc)\r\n\t {\r\n\t\t if(cc.isDisposed()) return;\r\n\t\t try{\r\n\t\t\tString initValue=cc.getText();\r\n\t\t\tcc.removeAll();\r\n\t\t\tRowMetaInterface r = transMeta.getPrevStepFields(stepname);\r\n\t\t\tif (r!=null) {\r\n\t             cc.setItems(r.getFieldNames());\r\n\t\t\t}\r\n\t\t\tif(!Const.isEmpty(initValue)) cc.setText(initValue);\r\n\t\t }catch(KettleException ke){\r\n\t\t\t\tnew ErrorDialog(shell, BaseMessages.getString(PKG, \"XsltDialog.FailedToGetFields.DialogTitle\"), BaseMessages.getString(PKG, \"XsltDialog.FailedToGetFields.DialogMessage\"), ke); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\t\t}\r\n\t\t \r\n\t }","commit_id":"f9f3215cab21e96a814151d163b382b5be8ca9c7","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public String open()\r\n\t{\r\n\t\tShell parent = getParent();\r\n\t\tDisplay display = parent.getDisplay();\r\n\t\t\r\n\t\tshell = new Shell(parent, SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX | SWT.MIN);\r\n \t\tprops.setLook(shell);\r\n        setShellImage(shell, input);\r\n\r\n\t\tModifyListener lsMod = new ModifyListener() \r\n\t\t{\r\n\t\t\tpublic void modifyText(ModifyEvent e) \r\n\t\t\t{\r\n\t\t\t\tinput.setChanged();\r\n\t\t\t}\r\n\t\t};\r\n\t\tchanged = input.hasChanged();\r\n\r\n\t\tFormLayout formLayout = new FormLayout ();\r\n\t\tformLayout.marginWidth  = Const.FORM_MARGIN;\r\n\t\tformLayout.marginHeight = Const.FORM_MARGIN;\r\n\r\n\t\tshell.setLayout(formLayout);\r\n\t\tshell.setText(BaseMessages.getString(PKG, \"XsltDialog.Shell.Title\")); //$NON-NLS-1$\r\n\t\t\r\n\t\tint middle = props.getMiddlePct();\r\n\t\tint margin = Const.MARGIN;\r\n\r\n\t\t// Filename line\r\n\t\twlStepname=new Label(shell, SWT.RIGHT);\r\n\t\twlStepname.setText(BaseMessages.getString(PKG, \"XsltDialog.Stepname.Label\")); //$NON-NLS-1$\r\n \t\tprops.setLook(wlStepname);\r\n\t\tfdlStepname=new FormData();\r\n\t\tfdlStepname.left = new FormAttachment(0, 0);\r\n\t\tfdlStepname.right= new FormAttachment(middle, -margin);\r\n\t\tfdlStepname.top  = new FormAttachment(0, margin);\r\n\t\twlStepname.setLayoutData(fdlStepname);\r\n\t\twStepname=new Text(shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\r\n\t\twStepname.setText(stepname);\r\n \t\tprops.setLook(wStepname);\r\n\t\twStepname.addModifyListener(lsMod);\r\n\t\tfdStepname=new FormData();\r\n\t\tfdStepname.left = new FormAttachment(middle, 0);\r\n\t\tfdStepname.top  = new FormAttachment(0, margin);\r\n\t\tfdStepname.right= new FormAttachment(100, 0);\r\n\t\twStepname.setLayoutData(fdStepname);\r\n\r\n\t\twTabFolder = new CTabFolder(shell, SWT.BORDER);\r\n \t\tprops.setLook(wTabFolder, Props.WIDGET_STYLE_TAB);\r\n \t\t\r\n \t\t//////////////////////////\r\n\t\t// START OF GENERAL TAB   ///\r\n\t\t//////////////////////////\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\twGeneralTab=new CTabItem(wTabFolder, SWT.NONE);\r\n\t\twGeneralTab.setText(BaseMessages.getString(PKG, \"XsltDialog.GeneralTab.TabTitle\"));\r\n\t\t\r\n\t\twGeneralComp = new Composite(wTabFolder, SWT.NONE);\r\n \t\tprops.setLook(wGeneralComp);\r\n\r\n\t\tFormLayout generalLayout = new FormLayout();\r\n\t\tgeneralLayout.marginWidth  = 3;\r\n\t\tgeneralLayout.marginHeight = 3;\r\n\t\twGeneralComp.setLayout(generalLayout);\r\n\t\t\r\n\r\n\t\t\r\n\t\t\r\n\t\t// FieldName to evaluate\r\n\t\twlField=new Label(wGeneralComp, SWT.RIGHT);\r\n        wlField.setText(BaseMessages.getString(PKG, \"XsltDialog.Field.Label\"));\r\n        props.setLook(wlField);\r\n        fdlField=new FormData();\r\n        fdlField.left = new FormAttachment(0, 0);\r\n        fdlField.top  = new FormAttachment(wStepname, margin);\r\n        fdlField.right= new FormAttachment(middle, -margin);\r\n        wlField.setLayoutData(fdlField);\r\n        wField=new CCombo(wGeneralComp, SWT.BORDER | SWT.READ_ONLY);\r\n        wField.setEditable(true);\r\n        props.setLook(wField);\r\n        wField.addModifyListener(lsMod);\r\n        fdField=new FormData();\r\n        fdField.left = new FormAttachment(middle, margin);\r\n        fdField.top  = new FormAttachment(wStepname, margin);\r\n        fdField.right= new FormAttachment(100, -margin);\r\n        wField.setLayoutData(fdField);\r\n        wField.addFocusListener(new FocusListener()\r\n            {\r\n                public void focusLost(org.eclipse.swt.events.FocusEvent e)\r\n                {\r\n                }\r\n            \r\n                public void focusGained(org.eclipse.swt.events.FocusEvent e)\r\n                {\r\n                    Cursor busy = new Cursor(shell.getDisplay(), SWT.CURSOR_WAIT);\r\n                    shell.setCursor(busy);\r\n                    PopulateFields(wField);\r\n                    shell.setCursor(null);\r\n                    busy.dispose();\r\n                }\r\n            }\r\n        );\r\n\r\n\t\t\r\n    \t// Step Ouput field grouping?\r\n\t\t// ////////////////////////\r\n\t\t// START OF Output Field GROUP\r\n\t\t// \r\n\r\n\t\twOutputField = new Group(wGeneralComp, SWT.SHADOW_NONE);\r\n\t\tprops.setLook(wOutputField);\r\n\t\twOutputField.setText(BaseMessages.getString(PKG, \"XsltDialog.ResultField.Group.Label\"));\r\n\t\t\r\n\t\tFormLayout outputfieldgroupLayout = new FormLayout();\r\n\t\toutputfieldgroupLayout.marginWidth = 10;\r\n\t\toutputfieldgroupLayout.marginHeight = 10;\r\n\t\twOutputField.setLayout(outputfieldgroupLayout);\r\n        \r\n\t      // Output Fieldame\r\n        wResultField = new LabelTextVar(transMeta,wOutputField, BaseMessages.getString(PKG, \"XsltDialog.ResultField.Label\"), \r\n        \t\tBaseMessages.getString(PKG, \"XsltDialog.ResultField.Tooltip\"));\r\n        props.setLook(wResultField);\r\n        wResultField .addModifyListener(lsMod);\r\n        fdResultField  = new FormData();\r\n        fdResultField .left = new FormAttachment(0, 0);\r\n        fdResultField .top = new FormAttachment(wField, margin);\r\n        fdResultField .right = new FormAttachment(100, 0);\r\n        wResultField .setLayoutData(fdResultField );\r\n        \r\n         \r\n\t\tfdOutputField = new FormData();\r\n\t\tfdOutputField.left = new FormAttachment(0, margin);\r\n\t\tfdOutputField.top = new FormAttachment(wField, margin);\r\n\t\tfdOutputField.right = new FormAttachment(100, -margin);\r\n\t\twOutputField.setLayoutData(fdOutputField);\r\n\t\t\r\n\t\t// ///////////////////////////////////////////////////////////\r\n\t\t// / END OF Output Field GROUP\r\n\t\t// ///////////////////////////////////////////////////////////\t\r\n\t\t\r\n\t\t\r\n    \t// XSL File grouping\r\n\t\t// ////////////////////////\r\n\t\t// START OF XSL File GROUP\r\n\t\t// \r\n\r\n\t\twXSLFileGroup = new Group(wGeneralComp, SWT.SHADOW_NONE);\r\n\t\tprops.setLook(wXSLFileGroup);\r\n\t\twXSLFileGroup.setText(BaseMessages.getString(PKG, \"XsltDialog.XSL.Group.Label\"));\r\n\t\t\r\n\t\tFormLayout XSLFileGroupLayout = new FormLayout();\r\n\t\tXSLFileGroupLayout.marginWidth = 10;\r\n\t\tXSLFileGroupLayout.marginHeight = 10;\r\n\t\twXSLFileGroup.setLayout(XSLFileGroupLayout);\r\n\r\n\r\n\t\t// Is XSL filename defined in a Field?\r\n\t\twlXSLFileField = new Label(wXSLFileGroup, SWT.RIGHT);\r\n\t\twlXSLFileField.setText(BaseMessages.getString(PKG, \"XsltDialog.XSLFilenameFileField.Label\"));\r\n\t\tprops.setLook(wlXSLFileField);\r\n\t\tfdlXSLFileField = new FormData();\r\n\t\tfdlXSLFileField.left = new FormAttachment(0, 0);\r\n\t\tfdlXSLFileField.top = new FormAttachment(wResultField, margin);\r\n\t\tfdlXSLFileField.right = new FormAttachment(middle, -margin);\r\n\t\twlXSLFileField.setLayoutData(fdlXSLFileField);\r\n\t\twXSLFileField = new Button(wXSLFileGroup, SWT.CHECK);\r\n\t\tprops.setLook(wXSLFileField);\r\n\t\twXSLFileField.setToolTipText(BaseMessages.getString(PKG, \"XsltDialog.XSLFilenameFileField.Tooltip\"));\r\n\t\tfdXSLFileField = new FormData();\r\n\t\tfdXSLFileField.left = new FormAttachment(middle, margin);\r\n\t\tfdXSLFileField.top = new FormAttachment(wResultField, margin);\r\n\t\twXSLFileField.setLayoutData(fdXSLFileField);\r\n\t\t\r\n\t\tSelectionAdapter lsXslFile = new SelectionAdapter()\r\n        {\r\n            public void widgetSelected(SelectionEvent arg0)\r\n            {\r\n            \tActivewlXSLField();\r\n            \tinput.setChanged();\r\n            }\r\n        };\r\n        wXSLFileField.addSelectionListener(lsXslFile);\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t// If XSL File name defined in a Field\r\n\t\twlXSLField=new Label(wXSLFileGroup, SWT.RIGHT);\r\n        wlXSLField.setText(BaseMessages.getString(PKG, \"XsltDialog.XSLFilenameField.Label\"));\r\n        props.setLook(wlXSLField);\r\n        fdlXSLField=new FormData();\r\n        fdlXSLField.left = new FormAttachment(0, 0);\r\n        fdlXSLField.top  = new FormAttachment(wXSLFileField, margin);\r\n        fdlXSLField.right= new FormAttachment(middle, -margin);\r\n        wlXSLField.setLayoutData(fdlXSLField);\r\n        wXSLField=new CCombo(wXSLFileGroup, SWT.BORDER | SWT.READ_ONLY);\r\n        wXSLField.setEditable(true);\r\n        props.setLook(wXSLField);\r\n        wXSLField.addModifyListener(lsMod);\r\n        fdXSLField=new FormData();\r\n        fdXSLField.left = new FormAttachment(middle, margin);\r\n        fdXSLField.top  = new FormAttachment(wXSLFileField, margin);\r\n        fdXSLField.right= new FormAttachment(100, -margin);\r\n        wXSLField.setLayoutData(fdXSLField);\r\n        wXSLField.addFocusListener(new FocusListener()\r\n            {\r\n                public void focusLost(org.eclipse.swt.events.FocusEvent e)\r\n                {\r\n                }\r\n            \r\n                public void focusGained(org.eclipse.swt.events.FocusEvent e)\r\n                {\r\n                    Cursor busy = new Cursor(shell.getDisplay(), SWT.CURSOR_WAIT);\r\n                    shell.setCursor(busy);\r\n                    PopulateFields(wXSLField);\r\n                    shell.setCursor(null);\r\n                    busy.dispose();\r\n                }\r\n            }\r\n        );\r\n\t\t       \r\n        \r\n\t\t// XSL Filename\r\n\t\twlFilename = new Label(wXSLFileGroup, SWT.RIGHT);\r\n\t\twlFilename.setText(BaseMessages.getString(PKG, \"XsltDialog.XSLFilename.Label\"));\r\n\t\tprops.setLook(wlFilename);\r\n\t\tfdlXSLFilename = new FormData();\r\n\t\tfdlXSLFilename.left = new FormAttachment(0, 0);\r\n\t\tfdlXSLFilename.top = new FormAttachment(wXSLField, 2*margin);\r\n\t\tfdlXSLFilename.right = new FormAttachment(middle, -margin);\r\n\t\twlFilename.setLayoutData(fdlXSLFilename);\r\n\r\n\t\twbbFilename = new Button(wXSLFileGroup, SWT.PUSH | SWT.CENTER);\r\n\t\tprops.setLook(wbbFilename);\r\n\t\twbbFilename.setText(BaseMessages.getString(PKG, \"XsltDialog.FilenameBrowse.Button\"));\r\n\t\twbbFilename.setToolTipText(BaseMessages.getString(PKG, \"System.Tooltip.BrowseForFileOrDirAndAdd\"));\r\n\t\tfdbXSLFilename = new FormData();\r\n\t\tfdbXSLFilename.right = new FormAttachment(100, 0);\r\n\t\tfdbXSLFilename.top = new FormAttachment(wXSLField, 2*margin);\r\n\t\twbbFilename.setLayoutData(fdbXSLFilename);\r\n\r\n\t\twXSLFilename = new TextVar(transMeta,wXSLFileGroup, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\r\n\t\tprops.setLook(wXSLFilename);\r\n\t\twXSLFilename.addModifyListener(lsMod);\r\n\t\tfdXSLFilename = new FormData();\r\n\t\tfdXSLFilename.left = new FormAttachment(middle, margin);\r\n\t\tfdXSLFilename.right = new FormAttachment(wbbFilename, -margin);\r\n\t\tfdXSLFilename.top = new FormAttachment(wXSLField, 2*margin);\r\n\t\twXSLFilename.setLayoutData(fdXSLFilename);\r\n\t\t\t\t\r\n\t\t // XSLTFactory\r\n        wlXSLTFactory=new Label(wXSLFileGroup, SWT.RIGHT);\r\n        wlXSLTFactory.setText(BaseMessages.getString(PKG, \"XsltDialog.XSLTFactory.Label\"));\r\n        props.setLook(wlXSLTFactory);\r\n        fdlXSLTFactory=new FormData();\r\n        fdlXSLTFactory.left = new FormAttachment(0, 0);\r\n        fdlXSLTFactory.top  = new FormAttachment(wXSLFilename, 2*margin);\r\n        fdlXSLTFactory.right= new FormAttachment(middle, -margin);\r\n        wlXSLTFactory.setLayoutData(fdlXSLTFactory);\r\n        wXSLTFactory=new CCombo(wXSLFileGroup, SWT.BORDER | SWT.READ_ONLY);\r\n        wXSLTFactory.setEditable(true);\r\n        props.setLook(wXSLTFactory);\r\n        wXSLTFactory.addModifyListener(lsMod);\r\n        fdXSLTFactory=new FormData();\r\n        fdXSLTFactory.left = new FormAttachment(middle, margin);\r\n        fdXSLTFactory.top  = new FormAttachment(wXSLFilename,2*margin);\r\n        fdXSLTFactory.right= new FormAttachment(100, 0);\r\n        wXSLTFactory.setLayoutData(fdXSLTFactory);\r\n        wXSLTFactory.add(\"JAXP\");\r\n        wXSLTFactory.add(\"SAXON\");\r\n\t\t        \r\n\t\t\r\n\t\tfdXSLFileGroup = new FormData();\r\n\t\tfdXSLFileGroup.left = new FormAttachment(0, margin);\r\n\t\tfdXSLFileGroup.top = new FormAttachment(wOutputField, margin);\r\n\t\tfdXSLFileGroup.right = new FormAttachment(100, -margin);\r\n\t\twXSLFileGroup.setLayoutData(fdXSLFileGroup);\r\n\t\t\r\n\t\t// ///////////////////////////////////////////////////////////\r\n\t\t// / END OF XSL File GROUP\r\n\t\t// ///////////////////////////////////////////////////////////\t\r\n\t\r\n\t        \r\n\t\tfdGeneralComp=new FormData();\r\n\t\tfdGeneralComp.left  = new FormAttachment(0, 0);\r\n\t\tfdGeneralComp.top   = new FormAttachment(wField, 0);\r\n\t\tfdGeneralComp.right = new FormAttachment(100, 0);\r\n\t\tfdGeneralComp.bottom= new FormAttachment(100, 0);\r\n\t\twGeneralComp.setLayoutData(fdGeneralComp);\r\n\t\t\r\n\t\twGeneralComp.layout();\r\n\t\twGeneralTab.setControl(wGeneralComp);\r\n \t\tprops.setLook(wGeneralComp);\r\n \t\t\r\n \t\t\r\n \t\t\r\n\t\t/////////////////////////////////////////////////////////////\r\n\t\t/// END OF GENERAL TAB\r\n\t\t/////////////////////////////////////////////////////////////\r\n \t\t\r\n \t\t\r\n\t\tfdTabFolder = new FormData();\r\n\t\tfdTabFolder.left  = new FormAttachment(0, 0);\r\n\t\tfdTabFolder.top   = new FormAttachment(wStepname, margin);\r\n\t\tfdTabFolder.right = new FormAttachment(100, 0);\r\n\t\tfdTabFolder.bottom= new FormAttachment(100, -50);\r\n\t\twTabFolder.setLayoutData(fdTabFolder);\r\n\r\n\t\twOK=new Button(shell, SWT.PUSH);\r\n\t\twOK.setText(BaseMessages.getString(PKG, \"System.Button.OK\")); //$NON-NLS-1$\r\n\r\n\t\twCancel=new Button(shell, SWT.PUSH);\r\n\t\twCancel.setText(BaseMessages.getString(PKG, \"System.Button.Cancel\")); //$NON-NLS-1$\r\n\r\n\t\tsetButtonPositions(new Button[] { wOK, wCancel }, margin, wTabFolder);\r\n\r\n\r\n\t\t// Add listeners\r\n\t\tlsCancel   = new Listener() { public void handleEvent(Event e) { cancel();          } };\r\n\t\t\r\n\t\tlsOK       = new Listener() { public void handleEvent(Event e) { ok();              } };\r\n\t\t\r\n\t\twCancel.addListener(SWT.Selection, lsCancel);\r\n\r\n\r\n\t\twOK.addListener    (SWT.Selection, lsOK    );\r\n\t\t\r\n\t\tlsDef=new SelectionAdapter() { public void widgetDefaultSelected(SelectionEvent e) { ok(); } };\r\n\t\t\r\n\t\twStepname.addSelectionListener( lsDef );\r\n\r\n\t\t// Whenever something changes, set the tooltip to the expanded version\r\n\t\t// of the filename:\r\n\t\twXSLFilename.addModifyListener(new ModifyListener() {\r\n\t\t\tpublic void modifyText(ModifyEvent e) {\r\n\t\t\t\twXSLFilename.setToolTipText(transMeta.environmentSubstitute(wXSLFilename.getText()));\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Listen to the Browse... button\r\n\t\twbbFilename.addSelectionListener(new SelectionAdapter() {\r\n\t\t\tpublic void widgetSelected(SelectionEvent e) {\r\n\t\t\t\t\r\n\t\t\t\t\tFileDialog dialog = new FileDialog(shell, SWT.OPEN);\r\n\t\t\t\t\tdialog.setFilterExtensions(new String[] { \"*.xsl;*.XSL\",\r\n\t\t\t\t\t\t\t\"*.xslt;.*XSLT\",\r\n\t\t\t\t\t\t\t\"*\" });\r\n\t\t\t\t\tif (wXSLFilename.getText() != null) {\r\n\t\t\t\t\t\tString fname = transMeta.environmentSubstitute(wXSLFilename.getText());\r\n\t\t\t\t\t\tdialog.setFileName(fname);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdialog.setFilterNames(new String[] {\r\n\t\t\t\t\t\t\tBaseMessages.getString(PKG, \"XsltDialog.FileType\"),\r\n\t\t\t\t\t\t\tBaseMessages.getString(PKG, \"System.FileType.AllFiles\") });\r\n\r\n\t\t\t\t\tif (dialog.open() != null) {\r\n\t\t\t\t\t\tString str = dialog.getFilterPath()\r\n\t\t\t\t\t\t\t\t+ System.getProperty(\"file.separator\")\r\n\t\t\t\t\t\t\t\t+ dialog.getFileName();\r\n\t\t\t\t\t\twXSLFilename.setText(str);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t\t\t\r\n\t\twTabFolder.setSelection(0);\r\n\t\t\r\n\t\t// Set the shell size, based upon previous time...\r\n\t\tsetSize();\r\n\t\t\r\n\t\tgetData();\r\n\t\tActivewlXSLField();\r\n\r\n\t\t\r\n\t\tinput.setChanged(changed);\r\n\t\r\n\t\tshell.open();\r\n\t\twhile (!shell.isDisposed())\r\n\t\t{\r\n\t\t\t\tif (!display.readAndDispatch()) display.sleep();\r\n\t\t}\r\n\t\treturn stepname;\r\n\t}","id":2474,"modified_method":"public String open()\r\n\t{\r\n\t\tShell parent = getParent();\r\n\t\tDisplay display = parent.getDisplay();\r\n\t\t\r\n\t\tshell = new Shell(parent, SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX | SWT.MIN);\r\n \t\tprops.setLook(shell);\r\n        setShellImage(shell, input);\r\n\r\n\t\tModifyListener lsMod = new ModifyListener() \r\n\t\t{\r\n\t\t\tpublic void modifyText(ModifyEvent e) \r\n\t\t\t{\r\n\t\t\t\tinput.setChanged();\r\n\t\t\t}\r\n\t\t};\r\n\t\tchanged = input.hasChanged();\r\n\r\n\t\tFormLayout formLayout = new FormLayout ();\r\n\t\tformLayout.marginWidth  = Const.FORM_MARGIN;\r\n\t\tformLayout.marginHeight = Const.FORM_MARGIN;\r\n\r\n\t\tshell.setLayout(formLayout);\r\n\t\tshell.setText(BaseMessages.getString(PKG, \"XsltDialog.Shell.Title\")); //$NON-NLS-1$\r\n\t\t\r\n\t\tint middle = props.getMiddlePct();\r\n\t\tint margin = Const.MARGIN;\r\n\r\n\t\t// Filename line\r\n\t\twlStepname=new Label(shell, SWT.RIGHT);\r\n\t\twlStepname.setText(BaseMessages.getString(PKG, \"XsltDialog.Stepname.Label\")); //$NON-NLS-1$\r\n \t\tprops.setLook(wlStepname);\r\n\t\tfdlStepname=new FormData();\r\n\t\tfdlStepname.left = new FormAttachment(0, 0);\r\n\t\tfdlStepname.right= new FormAttachment(middle, -margin);\r\n\t\tfdlStepname.top  = new FormAttachment(0, margin);\r\n\t\twlStepname.setLayoutData(fdlStepname);\r\n\t\twStepname=new Text(shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\r\n\t\twStepname.setText(stepname);\r\n \t\tprops.setLook(wStepname);\r\n\t\twStepname.addModifyListener(lsMod);\r\n\t\tfdStepname=new FormData();\r\n\t\tfdStepname.left = new FormAttachment(middle, 0);\r\n\t\tfdStepname.top  = new FormAttachment(0, margin);\r\n\t\tfdStepname.right= new FormAttachment(100, 0);\r\n\t\twStepname.setLayoutData(fdStepname);\r\n\r\n\t\twTabFolder = new CTabFolder(shell, SWT.BORDER);\r\n \t\tprops.setLook(wTabFolder, Props.WIDGET_STYLE_TAB);\r\n \t\t\r\n \t\t//////////////////////////\r\n\t\t// START OF GENERAL TAB   ///\r\n\t\t//////////////////////////\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\twGeneralTab=new CTabItem(wTabFolder, SWT.NONE);\r\n\t\twGeneralTab.setText(BaseMessages.getString(PKG, \"XsltDialog.GeneralTab.TabTitle\"));\r\n\t\t\r\n\t\twGeneralComp = new Composite(wTabFolder, SWT.NONE);\r\n \t\tprops.setLook(wGeneralComp);\r\n\r\n\t\tFormLayout generalLayout = new FormLayout();\r\n\t\tgeneralLayout.marginWidth  = 3;\r\n\t\tgeneralLayout.marginHeight = 3;\r\n\t\twGeneralComp.setLayout(generalLayout);\r\n\t\t\r\n\r\n\t\t\r\n\t\t\r\n\t\t// FieldName to evaluate\r\n\t\twlField=new Label(wGeneralComp, SWT.RIGHT);\r\n        wlField.setText(BaseMessages.getString(PKG, \"XsltDialog.Field.Label\"));\r\n        props.setLook(wlField);\r\n        fdlField=new FormData();\r\n        fdlField.left = new FormAttachment(0, 0);\r\n        fdlField.top  = new FormAttachment(wStepname, 2*margin);\r\n        fdlField.right= new FormAttachment(middle, -margin);\r\n        wlField.setLayoutData(fdlField);\r\n        wField=new CCombo(wGeneralComp, SWT.BORDER | SWT.READ_ONLY);\r\n        wField.setEditable(true);\r\n        props.setLook(wField);\r\n        wField.addModifyListener(lsMod);\r\n        fdField=new FormData();\r\n        fdField.left = new FormAttachment(middle, margin);\r\n        fdField.top  = new FormAttachment(wStepname, 2*margin);\r\n        fdField.right= new FormAttachment(100, -margin);\r\n        wField.setLayoutData(fdField);\r\n        wField.addFocusListener(new FocusListener()\r\n            {\r\n                public void focusLost(org.eclipse.swt.events.FocusEvent e)\r\n                {\r\n                }\r\n            \r\n                public void focusGained(org.eclipse.swt.events.FocusEvent e)\r\n                {\r\n                    Cursor busy = new Cursor(shell.getDisplay(), SWT.CURSOR_WAIT);\r\n                    shell.setCursor(busy);\r\n                    PopulateFields(wField);\r\n                    shell.setCursor(null);\r\n                    busy.dispose();\r\n                }\r\n            }\r\n        );\r\n\r\n\t\t\r\n    \t// Step Ouput field grouping?\r\n\t\t// ////////////////////////\r\n\t\t// START OF Output Field GROUP\r\n\t\t// \r\n\r\n\t\twOutputField = new Group(wGeneralComp, SWT.SHADOW_NONE);\r\n\t\tprops.setLook(wOutputField);\r\n\t\twOutputField.setText(BaseMessages.getString(PKG, \"XsltDialog.ResultField.Group.Label\"));\r\n\t\t\r\n\t\tFormLayout outputfieldgroupLayout = new FormLayout();\r\n\t\toutputfieldgroupLayout.marginWidth = 10;\r\n\t\toutputfieldgroupLayout.marginHeight = 10;\r\n\t\twOutputField.setLayout(outputfieldgroupLayout);\r\n        \r\n\t      // Output Fieldame\r\n        wResultField = new LabelTextVar(transMeta,wOutputField, BaseMessages.getString(PKG, \"XsltDialog.ResultField.Label\"), \r\n        \t\tBaseMessages.getString(PKG, \"XsltDialog.ResultField.Tooltip\"));\r\n        props.setLook(wResultField);\r\n        wResultField .addModifyListener(lsMod);\r\n        fdResultField  = new FormData();\r\n        fdResultField .left = new FormAttachment(0, 0);\r\n        fdResultField .top = new FormAttachment(wField, margin);\r\n        fdResultField .right = new FormAttachment(100, 0);\r\n        wResultField .setLayoutData(fdResultField );\r\n        \r\n         \r\n\t\tfdOutputField = new FormData();\r\n\t\tfdOutputField.left = new FormAttachment(0, margin);\r\n\t\tfdOutputField.top = new FormAttachment(wField, margin);\r\n\t\tfdOutputField.right = new FormAttachment(100, -margin);\r\n\t\twOutputField.setLayoutData(fdOutputField);\r\n\t\t\r\n\t\t// ///////////////////////////////////////////////////////////\r\n\t\t// / END OF Output Field GROUP\r\n\t\t// ///////////////////////////////////////////////////////////\t\r\n\t\t\r\n\t\t\r\n    \t// XSL File grouping\r\n\t\t// ////////////////////////\r\n\t\t// START OF XSL File GROUP\r\n\t\t// \r\n\r\n\t\twXSLFileGroup = new Group(wGeneralComp, SWT.SHADOW_NONE);\r\n\t\tprops.setLook(wXSLFileGroup);\r\n\t\twXSLFileGroup.setText(BaseMessages.getString(PKG, \"XsltDialog.XSL.Group.Label\"));\r\n\t\t\r\n\t\tFormLayout XSLFileGroupLayout = new FormLayout();\r\n\t\tXSLFileGroupLayout.marginWidth = 10;\r\n\t\tXSLFileGroupLayout.marginHeight = 10;\r\n\t\twXSLFileGroup.setLayout(XSLFileGroupLayout);\r\n\r\n\r\n\t\t// Is XSL source defined in a Field?\r\n\t\twlXSLFileField = new Label(wXSLFileGroup, SWT.RIGHT);\r\n\t\twlXSLFileField.setText(BaseMessages.getString(PKG, \"XsltDialog.XSLFilenameFileField.Label\"));\r\n\t\tprops.setLook(wlXSLFileField);\r\n\t\tfdlXSLFileField = new FormData();\r\n\t\tfdlXSLFileField.left = new FormAttachment(0, 0);\r\n\t\tfdlXSLFileField.top = new FormAttachment(wResultField, margin);\r\n\t\tfdlXSLFileField.right = new FormAttachment(middle, -margin);\r\n\t\twlXSLFileField.setLayoutData(fdlXSLFileField);\r\n\t\twXSLFileField = new Button(wXSLFileGroup, SWT.CHECK);\r\n\t\tprops.setLook(wXSLFileField);\r\n\t\twXSLFileField.setToolTipText(BaseMessages.getString(PKG, \"XsltDialog.XSLFilenameFileField.Tooltip\"));\r\n\t\tfdXSLFileField = new FormData();\r\n\t\tfdXSLFileField.left = new FormAttachment(middle, margin);\r\n\t\tfdXSLFileField.top = new FormAttachment(wResultField, margin);\r\n\t\twXSLFileField.setLayoutData(fdXSLFileField);\r\n\t\t\r\n\t\tSelectionAdapter lsXslFile = new SelectionAdapter()\r\n        {\r\n            public void widgetSelected(SelectionEvent arg0)\r\n            {\r\n            \tActivewlXSLField();\r\n            \tinput.setChanged();\r\n            }\r\n        };\r\n        wXSLFileField.addSelectionListener(lsXslFile);\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t// If XSL File name defined in a Field\r\n\t\twlXSLField=new Label(wXSLFileGroup, SWT.RIGHT);\r\n        wlXSLField.setText(BaseMessages.getString(PKG, \"XsltDialog.XSLFilenameField.Label\"));\r\n        props.setLook(wlXSLField);\r\n        fdlXSLField=new FormData();\r\n        fdlXSLField.left = new FormAttachment(0, 0);\r\n        fdlXSLField.top  = new FormAttachment(wXSLFileField, margin);\r\n        fdlXSLField.right= new FormAttachment(middle, -margin);\r\n        wlXSLField.setLayoutData(fdlXSLField);\r\n        wXSLField=new CCombo(wXSLFileGroup, SWT.BORDER | SWT.READ_ONLY);\r\n        wXSLField.setEditable(true);\r\n        props.setLook(wXSLField);\r\n        wXSLField.addModifyListener(lsMod);\r\n        fdXSLField=new FormData();\r\n        fdXSLField.left = new FormAttachment(middle, margin);\r\n        fdXSLField.top  = new FormAttachment(wXSLFileField, margin);\r\n        fdXSLField.right= new FormAttachment(100, -margin);\r\n        wXSLField.setLayoutData(fdXSLField);\r\n        wXSLField.addFocusListener(new FocusListener()\r\n            {\r\n                public void focusLost(org.eclipse.swt.events.FocusEvent e)\r\n                {\r\n                }\r\n            \r\n                public void focusGained(org.eclipse.swt.events.FocusEvent e)\r\n                {\r\n                    Cursor busy = new Cursor(shell.getDisplay(), SWT.CURSOR_WAIT);\r\n                    shell.setCursor(busy);\r\n                    PopulateFields(wXSLField);\r\n                    shell.setCursor(null);\r\n                    busy.dispose();\r\n                }\r\n            }\r\n        );\r\n\t\t       \r\n        \r\n    \t// Is XSL field defined in a Field is a file?\r\n\t\twlXSLFieldIsAFile = new Label(wXSLFileGroup, SWT.RIGHT);\r\n\t\twlXSLFieldIsAFile.setText(BaseMessages.getString(PKG, \"XsltDialog.XSLFieldIsAFile.Label\"));\r\n\t\tprops.setLook(wlXSLFieldIsAFile);\r\n\t\tfdlXSLFieldIsAFile = new FormData();\r\n\t\tfdlXSLFieldIsAFile.left = new FormAttachment(0, 0);\r\n\t\tfdlXSLFieldIsAFile.top = new FormAttachment(wXSLField, margin);\r\n\t\tfdlXSLFieldIsAFile.right = new FormAttachment(middle, -margin);\r\n\t\twlXSLFieldIsAFile.setLayoutData(fdlXSLFieldIsAFile);\r\n\t\twXSLFieldIsAFile = new Button(wXSLFileGroup, SWT.CHECK);\r\n\t\tprops.setLook(wXSLFieldIsAFile);\r\n\t\twXSLFieldIsAFile.setToolTipText(BaseMessages.getString(PKG, \"XsltDialog.XSLFieldIsAFile.Tooltip\"));\r\n\t\tfdXSLFieldIsAFile = new FormData();\r\n\t\tfdXSLFieldIsAFile.left = new FormAttachment(middle, margin);\r\n\t\tfdXSLFieldIsAFile.top = new FormAttachment(wXSLField, margin);\r\n\t\twXSLFieldIsAFile.setLayoutData(fdXSLFieldIsAFile);\r\n\t\twXSLFieldIsAFile.addSelectionListener(\r\n\t\t\t new SelectionAdapter()\r\n\t        {\r\n\t            public void widgetSelected(SelectionEvent arg0)\r\n\t            {\r\n\t            \tinput.setChanged();\r\n\t            }\r\n\t        }\r\n\t    );\r\n        \r\n\t\t// XSL Filename\r\n\t\twlFilename = new Label(wXSLFileGroup, SWT.RIGHT);\r\n\t\twlFilename.setText(BaseMessages.getString(PKG, \"XsltDialog.XSLFilename.Label\"));\r\n\t\tprops.setLook(wlFilename);\r\n\t\tfdlXSLFilename = new FormData();\r\n\t\tfdlXSLFilename.left = new FormAttachment(0, 0);\r\n\t\tfdlXSLFilename.top = new FormAttachment(wXSLFieldIsAFile, 2*margin);\r\n\t\tfdlXSLFilename.right = new FormAttachment(middle, -margin);\r\n\t\twlFilename.setLayoutData(fdlXSLFilename);\r\n\r\n\t\twbbFilename = new Button(wXSLFileGroup, SWT.PUSH | SWT.CENTER);\r\n\t\tprops.setLook(wbbFilename);\r\n\t\twbbFilename.setText(BaseMessages.getString(PKG, \"XsltDialog.FilenameBrowse.Button\"));\r\n\t\twbbFilename.setToolTipText(BaseMessages.getString(PKG, \"System.Tooltip.BrowseForFileOrDirAndAdd\"));\r\n\t\tfdbXSLFilename = new FormData();\r\n\t\tfdbXSLFilename.right = new FormAttachment(100, 0);\r\n\t\tfdbXSLFilename.top = new FormAttachment(wXSLFieldIsAFile, 2*margin);\r\n\t\twbbFilename.setLayoutData(fdbXSLFilename);\r\n\r\n\t\twXSLFilename = new TextVar(transMeta,wXSLFileGroup, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\r\n\t\tprops.setLook(wXSLFilename);\r\n\t\twXSLFilename.addModifyListener(lsMod);\r\n\t\tfdXSLFilename = new FormData();\r\n\t\tfdXSLFilename.left = new FormAttachment(middle, margin);\r\n\t\tfdXSLFilename.right = new FormAttachment(wbbFilename, -margin);\r\n\t\tfdXSLFilename.top = new FormAttachment(wXSLFieldIsAFile, 2*margin);\r\n\t\twXSLFilename.setLayoutData(fdXSLFilename);\r\n\t\t\t\t\r\n\t\t // XSLTFactory\r\n        wlXSLTFactory=new Label(wXSLFileGroup, SWT.RIGHT);\r\n        wlXSLTFactory.setText(BaseMessages.getString(PKG, \"XsltDialog.XSLTFactory.Label\"));\r\n        props.setLook(wlXSLTFactory);\r\n        fdlXSLTFactory=new FormData();\r\n        fdlXSLTFactory.left = new FormAttachment(0, 0);\r\n        fdlXSLTFactory.top  = new FormAttachment(wXSLFilename, 2*margin);\r\n        fdlXSLTFactory.right= new FormAttachment(middle, -margin);\r\n        wlXSLTFactory.setLayoutData(fdlXSLTFactory);\r\n        wXSLTFactory=new CCombo(wXSLFileGroup, SWT.BORDER | SWT.READ_ONLY);\r\n        wXSLTFactory.setEditable(true);\r\n        props.setLook(wXSLTFactory);\r\n        wXSLTFactory.addModifyListener(lsMod);\r\n        fdXSLTFactory=new FormData();\r\n        fdXSLTFactory.left = new FormAttachment(middle, margin);\r\n        fdXSLTFactory.top  = new FormAttachment(wXSLFilename,2*margin);\r\n        fdXSLTFactory.right= new FormAttachment(100, 0);\r\n        wXSLTFactory.setLayoutData(fdXSLTFactory);\r\n        wXSLTFactory.add(\"JAXP\");\r\n        wXSLTFactory.add(\"SAXON\");\r\n\t\t        \r\n\t\t\r\n\t\tfdXSLFileGroup = new FormData();\r\n\t\tfdXSLFileGroup.left = new FormAttachment(0, margin);\r\n\t\tfdXSLFileGroup.top = new FormAttachment(wOutputField, margin);\r\n\t\tfdXSLFileGroup.right = new FormAttachment(100, -margin);\r\n\t\twXSLFileGroup.setLayoutData(fdXSLFileGroup);\r\n\t\t\r\n\t\t// ///////////////////////////////////////////////////////////\r\n\t\t// / END OF XSL File GROUP\r\n\t\t// ///////////////////////////////////////////////////////////\t\r\n\t\r\n\t        \r\n\t\tfdGeneralComp=new FormData();\r\n\t\tfdGeneralComp.left  = new FormAttachment(0, 0);\r\n\t\tfdGeneralComp.top   = new FormAttachment(wField, 0);\r\n\t\tfdGeneralComp.right = new FormAttachment(100, 0);\r\n\t\tfdGeneralComp.bottom= new FormAttachment(100, 0);\r\n\t\twGeneralComp.setLayoutData(fdGeneralComp);\r\n\t\t\r\n\t\twGeneralComp.layout();\r\n\t\twGeneralTab.setControl(wGeneralComp);\r\n \t\tprops.setLook(wGeneralComp);\r\n \t\t\r\n \t\t\r\n \t\t\r\n\t\t/////////////////////////////////////////////////////////////\r\n\t\t/// END OF GENERAL TAB\r\n\t\t/////////////////////////////////////////////////////////////\r\n \t\t\r\n \t\t// Additional tab...\r\n\t\t//\r\n\t\twAdditionalTab = new CTabItem(wTabFolder, SWT.NONE);\r\n\t\twAdditionalTab.setText(BaseMessages.getString(PKG, \"XsltDialog.AdvancedTab.Title\"));\r\n\t\t\r\n\t\tFormLayout addLayout = new FormLayout ();\r\n\t\taddLayout.marginWidth  = Const.FORM_MARGIN;\r\n\t\taddLayout.marginHeight = Const.FORM_MARGIN;\r\n\t\t\r\n\t\twAdditionalComp = new Composite(wTabFolder, SWT.NONE);\r\n\t\twAdditionalComp.setLayout(addLayout);\r\n \t\tprops.setLook(wAdditionalComp);\r\n \t\t\r\n \t\t\r\n \t\t // Output properties\r\n\t\t wlOutputProperties=new Label(wAdditionalComp, SWT.NONE);\r\n\t     wlOutputProperties.setText(BaseMessages.getString(PKG, \"XsltDialog.OutputProperties.Label\")); //$NON-NLS-1$\r\n\t     props.setLook(wlOutputProperties);\r\n\t     fdlOutputProperties=new FormData();\r\n\t     fdlOutputProperties.left = new FormAttachment(0, 0);\r\n\t     fdlOutputProperties.top  = new FormAttachment(0, margin);\r\n\t     wlOutputProperties.setLayoutData(fdlOutputProperties);\r\n\r\n\t     final int OutputPropertiesRows=input.getParameterField().length;\r\n\t\t\r\n\t\t colinf=new ColumnInfo[] { \r\n\t\t  new ColumnInfo(BaseMessages.getString(PKG, \"XsltDialog.ColumnInfo.OutputProperties.Name\"),      ColumnInfo.COLUMN_TYPE_CCOMBO, new String[] { \"\" }, false),\r\n\t\t  new ColumnInfo(BaseMessages.getString(PKG, \"XsltDialog.ColumnInfo.OutputProperties.Value\"),  ColumnInfo.COLUMN_TYPE_TEXT,   false), //$NON-NLS-1$\r\n\t       };\r\n\t\t colinf[0].setComboValues(XsltMeta.outputProperties);\r\n\t\t colinf[1].setUsingVariables(true);\r\n\t\t\r\n\t\t wOutputProperties=new TableView(transMeta, wAdditionalComp, \r\n\t\t\t\t\t\t\t  SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI, \r\n\t\t\t\t\t\t\t  colinf, \r\n\t\t\t\t\t\t\t  OutputPropertiesRows,  \r\n\t\t\t\t\t\t\t  lsMod,\r\n\t\t\t\t\t\t\t  props\r\n\t\t\t\t\t\t\t  );\r\n\t\tfdOutputProperties=new FormData();\r\n\t\tfdOutputProperties.left  = new FormAttachment(0, 0);\r\n\t\tfdOutputProperties.top   = new FormAttachment(wlOutputProperties, margin);\r\n\t\tfdOutputProperties.right = new FormAttachment(100, -margin);\r\n\t\tfdOutputProperties.bottom= new FormAttachment(wlOutputProperties, 200);\r\n\t\twOutputProperties.setLayoutData(fdOutputProperties);\r\n\t\t\r\n\t\t// Parameters\r\n \t\t\r\n\t\t wlFields=new Label(wAdditionalComp, SWT.NONE);\r\n\t     wlFields.setText(BaseMessages.getString(PKG, \"XsltDialog.Parameters.Label\")); //$NON-NLS-1$\r\n\t     props.setLook(wlFields);\r\n\t     fdlFields=new FormData();\r\n\t     fdlFields.left = new FormAttachment(0, 0);\r\n\t     fdlFields.top  = new FormAttachment(wOutputProperties, 2*margin);\r\n\t     wlFields.setLayoutData(fdlFields);\r\n\t       \r\n\t\twGet=new Button(wAdditionalComp, SWT.PUSH);\r\n\t\twGet.setText(BaseMessages.getString(PKG, \"XsltDialog.GetFields.Button\")); //$NON-NLS-1$\r\n\t\tFormData fdGet = new FormData();\r\n\t\tfdGet.top = new FormAttachment(wlFields, margin);\r\n\t\tfdGet.right = new FormAttachment(100, 0);\r\n\t\twGet.setLayoutData(fdGet);\r\n\t\t\t\r\n\t\tfinal int FieldsRows=input.getParameterField().length;\r\n\t\t\r\n\t\t colinf=new ColumnInfo[] { \r\n\t\t  new ColumnInfo(BaseMessages.getString(PKG, \"XsltDialog.ColumnInfo.Name\"),      ColumnInfo.COLUMN_TYPE_CCOMBO, new String[] { \"\" }, false),\r\n\t\t  new ColumnInfo(BaseMessages.getString(PKG, \"XsltDialog.ColumnInfo.Parameter\"),  ColumnInfo.COLUMN_TYPE_TEXT,   false), //$NON-NLS-1$\r\n\t       };\r\n\t\tcolinf[1].setUsingVariables(true);\r\n\t\t\r\n\t\twFields=new TableView(transMeta, wAdditionalComp, \r\n\t\t\t\t\t\t\t  SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI, \r\n\t\t\t\t\t\t\t  colinf, \r\n\t\t\t\t\t\t\t  FieldsRows,  \r\n\t\t\t\t\t\t\t  lsMod,\r\n\t\t\t\t\t\t\t  props\r\n\t\t\t\t\t\t\t  );\r\n\t\tfdFields=new FormData();\r\n\t\tfdFields.left  = new FormAttachment(0, 0);\r\n\t\tfdFields.top   = new FormAttachment(wlFields, margin);\r\n\t\tfdFields.right = new FormAttachment(wGet, -margin);\r\n\t\tfdFields.bottom= new FormAttachment(100, -margin);\r\n\t\twFields.setLayoutData(fdFields);\r\n\t\t\r\n\t\t\r\n\r\n \t        // Search the fields in the background\r\n \t\t\t\r\n \t        final Runnable runnable = new Runnable()\r\n \t        {\r\n \t            public void run()\r\n \t            {\r\n \t                StepMeta stepMeta = transMeta.findStep(stepname);\r\n \t                if (stepMeta!=null)\r\n \t                {\r\n \t                    try\r\n \t                    {\r\n \t                    \tRowMetaInterface row = transMeta.getPrevStepFields(stepMeta);\r\n \t                       \r\n \t                        // Remember these fields...\r\n \t                        for (int i=0;i<row.size();i++)\r\n \t                        {\r\n \t                            inputFields.put(row.getValueMeta(i).getName(), Integer.valueOf(i));\r\n \t                        }\r\n \t                        setComboBoxes();\r\n \t                    }\r\n \t                    catch(KettleException e)\r\n \t                    {\r\n \t                    \tlogError(BaseMessages.getString(PKG, \"System.Dialog.GetFieldsFailed.Message\"));\r\n \t                    }\r\n \t                }\r\n \t            }\r\n \t        };\r\n \t        new Thread(runnable).start();\r\n\r\n \t\t\r\n \t\t\r\n \t    fdAdditionalComp=new FormData();\r\n \t\tfdAdditionalComp.left  = new FormAttachment(0, 0);\r\n\t\tfdAdditionalComp.top   = new FormAttachment(wStepname, margin);\r\n\t\tfdAdditionalComp.right = new FormAttachment(100, 0);\r\n\t\tfdAdditionalComp.bottom= new FormAttachment(100, 0);\r\n\t\twAdditionalComp.setLayoutData(fdAdditionalComp);\r\n\t\t\r\n\t\twAdditionalComp.layout();\r\n\t\twAdditionalTab.setControl(wAdditionalComp);\r\n\t\t//////// END of Additional Tab\r\n \t\t\r\n \t\t\r\n\t\tfdTabFolder = new FormData();\r\n\t\tfdTabFolder.left  = new FormAttachment(0, 0);\r\n\t\tfdTabFolder.top   = new FormAttachment(wStepname, margin);\r\n\t\tfdTabFolder.right = new FormAttachment(100, 0);\r\n\t\tfdTabFolder.bottom= new FormAttachment(100, -50);\r\n\t\twTabFolder.setLayoutData(fdTabFolder);\r\n\r\n\t\twOK=new Button(shell, SWT.PUSH);\r\n\t\twOK.setText(BaseMessages.getString(PKG, \"System.Button.OK\")); //$NON-NLS-1$\r\n\r\n\t\twCancel=new Button(shell, SWT.PUSH);\r\n\t\twCancel.setText(BaseMessages.getString(PKG, \"System.Button.Cancel\")); //$NON-NLS-1$\r\n\r\n\t\tsetButtonPositions(new Button[] { wOK, wCancel }, margin, wTabFolder);\r\n\r\n\r\n\t\t// Add listeners\r\n\t\tlsCancel   = new Listener() { public void handleEvent(Event e) { cancel();          } };\r\n\t\tlsGet      = new Listener() { public void handleEvent(Event e) { get();        } };\r\n\t\tlsOK       = new Listener() { public void handleEvent(Event e) { ok();              } };\r\n\t\t\r\n\t\twCancel.addListener(SWT.Selection, lsCancel);\r\n\t\twGet.addListener   (SWT.Selection, lsGet   );\r\n\r\n\t\twOK.addListener    (SWT.Selection, lsOK    );\r\n\t\t\r\n\t\tlsDef=new SelectionAdapter() { public void widgetDefaultSelected(SelectionEvent e) { ok(); } };\r\n\t\t\r\n\t\twStepname.addSelectionListener( lsDef );\r\n\r\n\t\t// Whenever something changes, set the tooltip to the expanded version\r\n\t\t// of the filename:\r\n\t\twXSLFilename.addModifyListener(new ModifyListener() {\r\n\t\t\tpublic void modifyText(ModifyEvent e) {\r\n\t\t\t\twXSLFilename.setToolTipText(transMeta.environmentSubstitute(wXSLFilename.getText()));\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Listen to the Browse... button\r\n\t\twbbFilename.addSelectionListener(new SelectionAdapter() {\r\n\t\t\tpublic void widgetSelected(SelectionEvent e) {\r\n\t\t\t\t\r\n\t\t\t\t\tFileDialog dialog = new FileDialog(shell, SWT.OPEN);\r\n\t\t\t\t\tdialog.setFilterExtensions(new String[] { \"*.xsl;*.XSL\",\r\n\t\t\t\t\t\t\t\"*.xslt;.*XSLT\",\r\n\t\t\t\t\t\t\t\"*\" });\r\n\t\t\t\t\tif (wXSLFilename.getText() != null) {\r\n\t\t\t\t\t\tString fname = transMeta.environmentSubstitute(wXSLFilename.getText());\r\n\t\t\t\t\t\tdialog.setFileName(fname);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdialog.setFilterNames(new String[] {\r\n\t\t\t\t\t\t\tBaseMessages.getString(PKG, \"XsltDialog.FileType\"),\r\n\t\t\t\t\t\t\tBaseMessages.getString(PKG, \"System.FileType.AllFiles\") });\r\n\r\n\t\t\t\t\tif (dialog.open() != null) {\r\n\t\t\t\t\t\tString str = dialog.getFilterPath()\r\n\t\t\t\t\t\t\t\t+ System.getProperty(\"file.separator\")\r\n\t\t\t\t\t\t\t\t+ dialog.getFileName();\r\n\t\t\t\t\t\twXSLFilename.setText(str);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\t\t\t\t\r\n\t\twTabFolder.setSelection(0);\r\n\t\t\r\n\t\t// Set the shell size, based upon previous time...\r\n\t\tsetSize();\r\n\t\t\r\n\t\tgetData();\r\n\t\tActivewlXSLField();\r\n\r\n\t\t\r\n\t\tinput.setChanged(changed);\r\n\t\r\n\t\tshell.open();\r\n\t\twhile (!shell.isDisposed())\r\n\t\t{\r\n\t\t\t\tif (!display.readAndDispatch()) display.sleep();\r\n\t\t}\r\n\t\treturn stepname;\r\n\t}","commit_id":"f9f3215cab21e96a814151d163b382b5be8ca9c7","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void readRep(Repository rep, ObjectId id_step, List<DatabaseMeta> databases, Map<String, Counter> counters) throws KettleException\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\txslFilename     = rep.getStepAttributeString(id_step, \"xslfilename\"); //$NON-NLS-1$\r\n\t\t\tfieldName     = rep.getStepAttributeString(id_step, \"fieldname\"); //$NON-NLS-1$\r\n\t\t\tresultFieldname     = rep.getStepAttributeString(id_step, \"resultfieldname\"); //$NON-NLS-1\r\n\t\t\txslFileField     = rep.getStepAttributeString(id_step, \"xslfilefield\");\r\n\t\t\txslFileFieldUse    =      rep.getStepAttributeBoolean(id_step, \"xslfilefielduse\"); \r\n\t\t\txslFactory     = rep.getStepAttributeString(id_step, \"xslfactory\");\r\n\t\t\t\r\n\r\n\t\t}\r\n\t\tcatch(Exception e)\r\n\t\t{\r\n\t\t\tthrow new KettleException(BaseMessages.getString(PKG, \"XsltMeta.Exception.UnexpectedErrorInReadingStepInfo\"), e); //$NON-NLS-1$\r\n\t\t}\r\n\t}","id":2475,"modified_method":"public void readRep(Repository rep, ObjectId id_step, List<DatabaseMeta> databases, Map<String, Counter> counters) throws KettleException\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\txslFilename     = rep.getStepAttributeString(id_step, \"xslfilename\"); //$NON-NLS-1$\r\n\t\t\tfieldName     = rep.getStepAttributeString(id_step, \"fieldname\"); //$NON-NLS-1$\r\n\t\t\tresultFieldname     = rep.getStepAttributeString(id_step, \"resultfieldname\"); //$NON-NLS-1\r\n\t\t\txslFileField     = rep.getStepAttributeString(id_step, \"xslfilefield\");\r\n\t\t\txslFileFieldUse    =      rep.getStepAttributeBoolean(id_step, \"xslfilefielduse\"); \r\n\t\t\tString isAfile    =      rep.getStepAttributeString(id_step, \"xslfieldisafile\"); \r\n\t\t\tif(xslFileFieldUse && Const.isEmpty(isAfile)) {\r\n\t\t\t\txslFieldIsAFile= true;\r\n\t\t\t}else {\r\n\t\t\t\txslFieldIsAFile= \"Y\".equalsIgnoreCase(isAfile);\r\n\t\t\t}\r\n\t\t\txslFactory     = rep.getStepAttributeString(id_step, \"xslfactory\");\r\n\t\t\t\r\n\t\t\t int nrparams = rep.countNrStepAttributes(id_step, \"param_name\"); //$NON-NLS-1$\r\n\t\t\t int nroutputprops = rep.countNrStepAttributes(id_step, \"output_property_name\"); //$NON-NLS-1$\r\n\t         allocate(nrparams, nroutputprops);\r\n\r\n            for (int i = 0; i < nrparams; i++)\r\n            {\r\n                parameterField[i] = rep.getStepAttributeString(id_step, i, \"param_field\"); //$NON-NLS-1$\r\n                parameterName[i] = rep.getStepAttributeString(id_step, i, \"param_name\"); //$NON-NLS-1$\r\n            }\r\n            for (int i = 0; i < nroutputprops; i++)\r\n            {\r\n                outputPropertyName[i] = rep.getStepAttributeString(id_step, i, \"output_property_name\"); //$NON-NLS-1$\r\n                outputPropertyValue[i] = rep.getStepAttributeString(id_step, i, \"output_property_value\"); //$NON-NLS-1$\r\n            }\r\n\t\t}\r\n\t\tcatch(Exception e)\r\n\t\t{\r\n\t\t\tthrow new KettleException(BaseMessages.getString(PKG, \"XsltMeta.Exception.UnexpectedErrorInReadingStepInfo\"), e); //$NON-NLS-1$\r\n\t\t}\r\n\t}","commit_id":"f9f3215cab21e96a814151d163b382b5be8ca9c7","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public boolean useXSLFileFieldUse()\r\n    {\r\n        return xslFileFieldUse;\r\n    }","id":2476,"modified_method":"public boolean useXSLField()\r\n    {\r\n        return xslFileFieldUse;\r\n    }","commit_id":"f9f3215cab21e96a814151d163b382b5be8ca9c7","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public Object clone()\r\n\t{\r\n\t\tXsltMeta retval = (XsltMeta)super.clone();\r\n\t\t\r\n\r\n\t\treturn retval;\r\n\t}","id":2477,"modified_method":"public Object clone()\r\n\t{\r\n\t\tXsltMeta retval = (XsltMeta)super.clone();\r\n\t\tint nrparams = parameterName.length;\r\n\t\tint nroutputprops = outputPropertyName.length;\r\n        retval.allocate(nrparams, nroutputprops);\r\n\r\n        for (int i = 0; i < nrparams; i++)\r\n        {\r\n            retval.parameterName[i] = parameterName[i];\r\n            retval.parameterField[i] = parameterField[i];\r\n        }\r\n        for (int i = 0; i < nroutputprops; i++)\r\n        {\r\n            retval.outputPropertyName[i] = outputPropertyName[i];\r\n            retval.outputPropertyValue[i] = outputPropertyValue[i];\r\n        }\r\n\r\n\t\treturn retval;\r\n\t}","commit_id":"f9f3215cab21e96a814151d163b382b5be8ca9c7","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void getFields(RowMetaInterface inputRowMeta, String name, RowMetaInterface info[], StepMeta nextStep, VariableSpace space) throws KettleStepException\r\n\t{    \t\r\n        // Output field (String)\t\r\n        ValueMetaInterface v = new ValueMeta(space.environmentSubstitute(getResultfieldname()), ValueMeta.TYPE_STRING);\r\n        inputRowMeta.addValueMeta(v);\r\n\r\n    }","id":2478,"modified_method":"public void getFields(RowMetaInterface inputRowMeta, String name, RowMetaInterface info[], StepMeta nextStep, VariableSpace space) throws KettleStepException\r\n\t{    \t\r\n        // Output field (String)\t\r\n        ValueMetaInterface v = new ValueMeta(space.environmentSubstitute(getResultfieldname()), ValueMeta.TYPE_STRING);\r\n        v.setOrigin(name);\r\n        inputRowMeta.addValueMeta(v);\r\n    }","commit_id":"f9f3215cab21e96a814151d163b382b5be8ca9c7","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private void readData(Node stepnode)\r\n\t\tthrows KettleXMLException\r\n\t{\r\n\t\ttry\r\n\t\t{\t\t\r\n\t\t\txslFilename     = XMLHandler.getTagValue(stepnode, \"xslfilename\"); //$NON-NLS-1$\r\n\t\t\tfieldName     = XMLHandler.getTagValue(stepnode, \"fieldname\"); //$NON-NLS-1$\r\n\t\t\tresultFieldname     = XMLHandler.getTagValue(stepnode, \"resultfieldname\"); //$NON-NLS-1$\r\n\t\t\txslFileField     = XMLHandler.getTagValue(stepnode, \"xslfilefield\");\r\n\t\t\txslFileFieldUse = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(stepnode, \"xslfilefielduse\"));\r\n\t\t\txslFactory     = XMLHandler.getTagValue(stepnode, \"xslfactory\"); \r\n\t\t\t\r\n\t\t}\r\n\t\tcatch(Exception e)\r\n\t\t{\r\n\t\t\tthrow new KettleXMLException(BaseMessages.getString(PKG, \"XsltMeta.Exception.UnableToLoadStepInfoFromXML\"), e); //$NON-NLS-1$\r\n\t\t}\r\n\t}","id":2479,"modified_method":"private void readData(Node stepnode)\r\n\t\tthrows KettleXMLException\r\n\t{\r\n\t\ttry\r\n\t\t{\t\t\r\n\t\t\txslFilename     = XMLHandler.getTagValue(stepnode, \"xslfilename\"); //$NON-NLS-1$\r\n\t\t\tfieldName     = XMLHandler.getTagValue(stepnode, \"fieldname\"); //$NON-NLS-1$\r\n\t\t\tresultFieldname     = XMLHandler.getTagValue(stepnode, \"resultfieldname\"); //$NON-NLS-1$\r\n\t\t\txslFileField     = XMLHandler.getTagValue(stepnode, \"xslfilefield\");\r\n\t\t\txslFileFieldUse = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(stepnode, \"xslfilefielduse\"));\r\n\t\t\tString isAFile=XMLHandler.getTagValue(stepnode, \"xslfieldisafile\");\r\n\t\t\tif(xslFileFieldUse && Const.isEmpty(isAFile)) {\r\n\t\t\t\txslFieldIsAFile=true;\r\n\t\t\t}else {\r\n\t\t\t\txslFieldIsAFile = \"Y\".equalsIgnoreCase(isAFile);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\txslFactory     = XMLHandler.getTagValue(stepnode, \"xslfactory\"); \r\n\t\t\t\r\n\t\t\tNode parametersNode = XMLHandler.getSubNode(stepnode, \"parameters\"); //$NON-NLS-1$\r\n            int nrparams = XMLHandler.countNodes(parametersNode, \"parameter\"); //$NON-NLS-1$\r\n            \r\n    \t\tNode parametersOutputProps = XMLHandler.getSubNode(stepnode, \"outputproperties\"); //$NON-NLS-1$\r\n            int nroutputprops = XMLHandler.countNodes(parametersOutputProps, \"outputproperty\");\r\n            allocate(nrparams, nroutputprops);\r\n\r\n            for (int i = 0; i < nrparams; i++)\r\n            {\r\n                Node anode = XMLHandler.getSubNodeByNr(parametersNode, \"parameter\", i); //$NON-NLS-1$\r\n                parameterField[i] = XMLHandler.getTagValue(anode, \"field\"); //$NON-NLS-1$\r\n                parameterName[i] = XMLHandler.getTagValue(anode, \"name\"); //$NON-NLS-1$\r\n            }\r\n            for (int i = 0; i < nroutputprops; i++)\r\n            {\r\n                Node anode = XMLHandler.getSubNodeByNr(parametersOutputProps, \"outputproperty\", i); //$NON-NLS-1$\r\n                outputPropertyName[i] = XMLHandler.getTagValue(anode, \"name\"); //$NON-NLS-1$\r\n                outputPropertyValue[i] = XMLHandler.getTagValue(anode, \"value\"); //$NON-NLS-1$\r\n            }\r\n\r\n\t\t\t\r\n\t\t}\r\n\t\tcatch(Exception e)\r\n\t\t{\r\n\t\t\tthrow new KettleXMLException(BaseMessages.getString(PKG, \"XsltMeta.Exception.UnableToLoadStepInfoFromXML\"), e); //$NON-NLS-1$\r\n\t\t}\r\n\t}","commit_id":"f9f3215cab21e96a814151d163b382b5be8ca9c7","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public String getXML()\r\n\t{\r\n        StringBuffer retval = new StringBuffer();\r\n\t\t\r\n\t\tretval.append(\"    \"+XMLHandler.addTagValue(\"xslfilename\", xslFilename)); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tretval.append(\"    \"+XMLHandler.addTagValue(\"fieldname\", fieldName)); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tretval.append(\"    \"+XMLHandler.addTagValue(\"resultfieldname\", resultFieldname)); //$NON-NLS-1$ //$NON-NLS-2$\t\r\n\t\tretval.append(\"    \"+XMLHandler.addTagValue(\"xslfilefield\", xslFileField));\r\n\t\tretval.append(\"    \"+XMLHandler.addTagValue(\"xslfilefielduse\",  xslFileFieldUse));\r\n\t\tretval.append(\"    \"+XMLHandler.addTagValue(\"xslfactory\", xslFactory)); \r\n\t\t\r\n\t\treturn retval.toString();\r\n\t}","id":2480,"modified_method":"public String getXML()\r\n\t{\r\n        StringBuffer retval = new StringBuffer();\r\n\t\t\r\n\t\tretval.append(\"    \"+XMLHandler.addTagValue(\"xslfilename\", xslFilename)); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tretval.append(\"    \"+XMLHandler.addTagValue(\"fieldname\", fieldName)); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t\tretval.append(\"    \"+XMLHandler.addTagValue(\"resultfieldname\", resultFieldname)); //$NON-NLS-1$ //$NON-NLS-2$\t\r\n\t\tretval.append(\"    \"+XMLHandler.addTagValue(\"xslfilefield\", xslFileField));\r\n\t\tretval.append(\"    \"+XMLHandler.addTagValue(\"xslfilefielduse\",  xslFileFieldUse));\r\n\t\tretval.append(\"    \"+XMLHandler.addTagValue(\"xslfieldisafile\",  xslFieldIsAFile));\r\n\t\t\r\n\t\tretval.append(\"    \"+XMLHandler.addTagValue(\"xslfactory\", xslFactory)); \r\n\t    retval.append(\"    <parameters>\").append(Const.CR); //$NON-NLS-1$\r\n\r\n\t        for (int i = 0; i < parameterName.length; i++)\r\n\t        {\r\n\t            retval.append(\"      <parameter>\").append(Const.CR); //$NON-NLS-1$\r\n\t            retval.append(\"        \").append(XMLHandler.addTagValue(\"field\", parameterField[i])); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t            retval.append(\"        \").append(XMLHandler.addTagValue(\"name\", parameterName[i])); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t            retval.append(\"      <\/parameter>\").append(Const.CR); //$NON-NLS-1$\r\n\t        }\r\n\r\n\t      retval.append(\"    <\/parameters>\").append(Const.CR); //$NON-NLS-1$\r\n\t      retval.append(\"    <outputproperties>\").append(Const.CR); //$NON-NLS-1$\r\n\r\n\t        for (int i = 0; i < outputPropertyName.length; i++)\r\n\t        {\r\n\t            retval.append(\"      <outputproperty>\").append(Const.CR); //$NON-NLS-1$\r\n\t            retval.append(\"        \").append(XMLHandler.addTagValue(\"name\", outputPropertyName[i])); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t            retval.append(\"        \").append(XMLHandler.addTagValue(\"value\", outputPropertyValue[i])); //$NON-NLS-1$ //$NON-NLS-2$\r\n\t            retval.append(\"      <\/outputproperty>\").append(Const.CR); //$NON-NLS-1$\r\n\t        }\r\n\r\n\t      retval.append(\"    <\/outputproperties>\").append(Const.CR); //$NON-NLS-1$\r\n\t\treturn retval.toString();\r\n\t}","commit_id":"f9f3215cab21e96a814151d163b382b5be8ca9c7","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void setDefault()\r\n\t{\r\n\t\txslFilename = null; //$NON-NLS-1$\r\n\t\tfieldName = null;\r\n\t\tresultFieldname=\"result\";\r\n\t\txslFactory=\"JAXP\";\r\n\t\txslFileField=null;\r\n\t\txslFileFieldUse=false;\t\t\r\n\t}","id":2481,"modified_method":"public void setDefault()\r\n\t{\r\n\t\txslFilename = null; //$NON-NLS-1$\r\n\t\tfieldName = null;\r\n\t\tresultFieldname=\"result\";\r\n\t\txslFactory=\"JAXP\"; \r\n\t\txslFileField=null;\r\n\t\txslFileFieldUse=false;\r\n\t\txslFieldIsAFile=true;\r\n\t\t\r\n\t    int nrparams = 0;\r\n\t    int nroutputproperties = 0;\r\n        allocate(nrparams, nroutputproperties);\r\n\r\n        for (int i = 0; i < nrparams; i++)\r\n        {\r\n            parameterField[i] = \"param\" + i; //$NON-NLS-1$\r\n            parameterName[i] = \"param\"; //$NON-NLS-1$\r\n        }\r\n        for (int i = 0; i < nroutputproperties; i++)\r\n        {\r\n        \toutputPropertyName[i] = \"outputprop\" + i; //$NON-NLS-1$\r\n        \toutputPropertyValue[i] = \"outputprop\"; //$NON-NLS-1$\r\n        }\r\n\t}","commit_id":"f9f3215cab21e96a814151d163b382b5be8ca9c7","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void saveRep(Repository rep, ObjectId id_transformation, ObjectId id_step)\r\n\t\tthrows KettleException\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"xslfilename\", xslFilename); //$NON-NLS-1$\r\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"fieldname\", fieldName); //$NON-NLS-1$\r\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"resultfieldname\", resultFieldname); //$NON-NLS-1$\r\n\t\t\t\r\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"xslfilefield\", xslFileField);\r\n\t\t\t\r\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"xslfilefielduse\",  xslFileFieldUse);\r\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"xslfactory\", xslFactory);\r\n\r\n\t\t}\r\n\t\tcatch(Exception e)\r\n\t\t{\r\n\t\t\tthrow new KettleException(BaseMessages.getString(PKG, \"XsltMeta.Exception.UnableToSaveStepInfo\")+id_step, e); //$NON-NLS-1$\r\n\t\t}\r\n\t}","id":2482,"modified_method":"public void saveRep(Repository rep, ObjectId id_transformation, ObjectId id_step)\r\n\t\tthrows KettleException\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"xslfilename\", xslFilename); //$NON-NLS-1$\r\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"fieldname\", fieldName); //$NON-NLS-1$\r\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"resultfieldname\", resultFieldname); //$NON-NLS-1$\r\n\t\t\t\r\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"xslfilefield\", xslFileField);\r\n\t\t\t\r\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"xslfilefielduse\",  xslFileFieldUse);\r\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"xslfieldisafile\",  xslFieldIsAFile);\r\n\t\t\t\r\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"xslfactory\", xslFactory);\r\n\r\n\t\t\tfor (int i = 0; i < parameterName.length; i++)\r\n            {\r\n                rep.saveStepAttribute(id_transformation, id_step, i, \"param_field\", parameterField[i]); //$NON-NLS-1$\r\n                rep.saveStepAttribute(id_transformation, id_step, i, \"param_name\", parameterName[i]); //$NON-NLS-1$\r\n            }\r\n\t\t\tfor (int i = 0; i < outputPropertyName.length; i++)\r\n            {\r\n                rep.saveStepAttribute(id_transformation, id_step, i, \"output_property_name\", outputPropertyName[i]); //$NON-NLS-1$\r\n                rep.saveStepAttribute(id_transformation, id_step, i, \"output_property_value\", outputPropertyValue[i]); //$NON-NLS-1$\r\n            }\r\n\t\t}\r\n\t\tcatch(Exception e)\r\n\t\t{\r\n\t\t\tthrow new KettleException(BaseMessages.getString(PKG, \"XsltMeta.Exception.UnableToSaveStepInfo\")+id_step, e); //$NON-NLS-1$\r\n\t\t}\r\n\t}","commit_id":"f9f3215cab21e96a814151d163b382b5be8ca9c7","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void setXSLFileFieldUse(boolean xslfilefieldusein)\r\n    {\r\n        this.xslFileFieldUse = xslfilefieldusein;\r\n    }","id":2483,"modified_method":"public void setXSLField(boolean value)\r\n    {\r\n        this.xslFileFieldUse = value;\r\n    }","commit_id":"f9f3215cab21e96a814151d163b382b5be8ca9c7","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"/**\n\t * Copy information from the meta-data input to the dialog fields.\n\t */ \n\tpublic void getData()\n\t{\n\t\tif(log.isDebug()) log.logDebug(toString(), Messages.getString(\"FileExistsDialog.Log.GettingKeyInfo\")); //$NON-NLS-1$\n\n\t\tif (input.getDynamicFilenameField() !=null)   wFileName.setText(input.getDynamicFilenameField());\n\t\tif (input.getResultFieldName()!=null)   wResult.setText(input.getResultFieldName());\n\t\twInclFileType.setSelection(input.includeFileType());\n\t\tif (input.getFileTypeFieldName()!=null)   wFileType.setText(input.getFileTypeFieldName());\n\t\twAddResult.setSelection(input.addResultFilenames());\n\t\t\n\t\twStepname.selectAll();\n\t}","id":2484,"modified_method":"/**\n\t * Copy information from the meta-data input to the dialog fields.\n\t */ \n\tpublic void getData()\n\t{\n\t\tif (input.getDynamicFilenameField() !=null)   wFileName.setText(input.getDynamicFilenameField());\n\t\tif (input.getResultFieldName()!=null)   wResult.setText(input.getResultFieldName());\n\t\twInclFileType.setSelection(input.includeFileType());\n\t\tif (input.getFileTypeFieldName()!=null)   wFileType.setText(input.getFileTypeFieldName());\n\t\twAddResult.setSelection(input.addResultFilenames());\n\t\t\n\t\twStepname.selectAll();\n\t}","commit_id":"654aa7a82de5256c43013949ba57b22c08a598e3","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private void get()\n\t {\n\t\t try{\n\t           \n\t\t\t    wFileName.removeAll();\n\t\t\t\tRowMetaInterface r = transMeta.getPrevStepFields(stepname);\n\t\t\t\tif (r!=null)\n\t\t\t\t{\n\t\t             r.getFieldNames();\n\t\t             \n\t\t             for (int i=0;i<r.getFieldNames().length;i++)\n\t\t\t\t\t{\t\n\t\t\t\t\t\twFileName.add(r.getFieldNames()[i]);\t\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t }catch(KettleException ke){\n\t\t\t\tnew ErrorDialog(shell, Messages.getString(\"FileExistsDialog.FailedToGetFields.DialogTitle\"), Messages.getString(\"FileExistsDialog.FailedToGetFields.DialogMessage\"), ke); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t}\n\t }","id":2485,"modified_method":"private void get()\n\t {\n\t\t if(!gotPreviousFields) {\n\t\t try{\n\t            String fieldvalue=wFileName.getText();\n\t\t\t    wFileName.removeAll();\n\t\t\t\tRowMetaInterface r = transMeta.getPrevStepFields(stepname);\n\t\t\t\tif (r!=null)\n\t\t\t\t{\n\t\t\t\t\twFileName.setItems(r.getFieldNames());\n\t\t\t\t}\n\t\t\t\tif(fieldvalue!=null) wFileName.setText(fieldvalue);\n\t\t\t\tgotPreviousFields=true;\n\t\t }catch(KettleException ke){\n\t\t\t\tnew ErrorDialog(shell, Messages.getString(\"FileExistsDialog.FailedToGetFields.DialogTitle\"), Messages.getString(\"FileExistsDialog.FailedToGetFields.DialogMessage\"), ke); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t}\n\t\t }\n\t }","commit_id":"654aa7a82de5256c43013949ba57b22c08a598e3","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private void getPreviousFields() {\n    try {\n      RowMetaInterface r = transMeta.getPrevStepFields( stepname );\n      if ( r != null ) {\n        r.getFieldNames();\n\n        for ( int i = 0; i < r.getFieldNames().length; i++ ) {\n          wfieldevaluate.add( r.getFieldNames()[i] );\n\n        }\n      }\n    } catch ( KettleException ke ) {\n      new ErrorDialog(\n        shell, BaseMessages.getString( PKG, \"RegexEvalDialog.FailedToGetFields.DialogTitle\" ), BaseMessages\n          .getString( PKG, \"RegexEvalDialog.FailedToGetFields.DialogMessage\" ), ke );\n    }\n  }","id":2486,"modified_method":"private void getPreviousFields() {\n    // Save user-selected value, if applicable\n    String selectedValue = wfieldevaluate.getText();\n\n    // Clear the existing list, and reload\n    wfieldevaluate.removeAll();\n    try {\n      RowMetaInterface r = transMeta.getPrevStepFields( stepname );\n      if ( r != null ) {\n        for ( String item : r.getFieldNames() ) {\n            wfieldevaluate.add(  item );\n        }\n      }\n\n      // Re-select the user-selected value, if applicable\n      if ( !Const.isEmpty( selectedValue ) ) {\n        wfieldevaluate.select( wfieldevaluate.indexOf( selectedValue ) );\n      } else {\n        wfieldevaluate.select( 0 );\n      }\n    } catch ( KettleException ke ) {\n      new ErrorDialog(\n        shell, BaseMessages.getString( PKG, \"RegexEvalDialog.FailedToGetFields.DialogTitle\" ), BaseMessages\n          .getString( PKG, \"RegexEvalDialog.FailedToGetFields.DialogMessage\" ), ke );\n    }\n  }","commit_id":"88ed541f67c613f678d362b2febb5f2f025be36b","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public String getOuterAttrs() {\n\t//Note: don't generate zk_type here because Menupopup's zk_type diff\n\n\t\tfinal String attrs = super.getOuterAttrs();\n\t\tif (!zidRequired())\n\t\t\treturn attrs;\n\n\t\tfinal String id = getId();\n \t\tif (ComponentsCtrl.isAutoId(id))\n\t\t\treturn attrs;\n\n\t\tfinal StringBuffer sb = new StringBuffer(80).append(attrs);\n\t\tHTMLs.appendAttribute(sb, \"zid\", id);\n\t\treturn sb.toString();\n\t}","id":2487,"modified_method":"public String getOuterAttrs() {\n\t//Note: don't generate zk_type here because Menupopup's zk_type diff\n\n\t\tfinal StringBuffer sb =\n\t\t\tnew StringBuffer(80).append(super.getOuterAttrs());\n\n\t\tif (isAsapRequired(\"onOpen\"))\n\t\t\tHTMLs.appendAttribute(sb, \"zk_onOpen\", true);\n\n\t\tif (zidRequired()) {\n\t\t\tfinal String id = getId();\n\t \t\tif (!ComponentsCtrl.isAutoId(id))\n\t\t\t\tHTMLs.appendAttribute(sb, \"zid\", id);\n\t\t}\n\t\treturn sb.toString();\n\t}","commit_id":"e5d9e5da292ef21c0d5171db0534c7c95c67bde5","url":"https://github.com/zkoss/zk"},{"original_method":"public String getOuterAttrs() {\n\t\tfinal String attrs = super.getOuterAttrs();\n\t\tif (isDisabled()) {\n\t\t\tfinal StringBuffer sb = new StringBuffer(60).append(attrs);\n\t\t\tHTMLs.appendAttribute(sb, \"z.disd\", true);\n\t\t\treturn sb.toString();\n\t\t}\n\t\treturn attrs;\n\t}","id":2488,"modified_method":"public String getOuterAttrs() {\n\t\tfinal StringBuffer sb = new StringBuffer(60).append(super.getOuterAttrs());\n\t\tHTMLs.appendAttribute(sb, \"z.label\", XMLs.escapeXML(getLabel()));\n\t\t\t\n\t\tif (isDisabled())\n\t\t\tHTMLs.appendAttribute(sb, \"z.disd\", true);\n\t\treturn sb.toString();\n\t}","commit_id":"d52f2f1d3e287bd5e355bcf463d985b23149e147","url":"https://github.com/zkoss/zk"},{"original_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal SmartWriter wh = new SmartWriter(out);\n\t\tfinal Comboitem self = (Comboitem) comp;\n\t\tfinal String uuid = self.getUuid();\n\t\tfinal String zcls = self.getZclass();\n\t\twh.write(\"<tr id=\\\"\").write(uuid).write(\"\\\" z.type=\\\"Cmit\\\"\")\n\t\t\t.write(self.getOuterAttrs()).write(self.getInnerAttrs()).writeln(\">\")\n\t\t\t.write(\"<td class=\\\"\").write(zcls).write(\"-img\\\">\").write(self.getImgTag())\n\t\t\t.write(\"<\/td>\\n<td class=\\\"\").write(zcls).write(\"-text\\\">\");\n\n\t\tnew Out(self.getLabel()).render(out);\n\n\t\tString s = self.getDescription();\n\t\tif (!Strings.isBlank(s)) {\n\t\t\twh.write(\"<br/>\\n<span class=\\\"\").write(zcls).write(\"-inner\\\">\");\n\t\t\tnew Out(s).render(out);\n\t\t\twh.write(\"<\/span>\");\n\t\t}\n\n\t\ts = self.getContent();\n\t\tif (!Strings.isBlank(s))\n\t\t\twh.write(\"<span class=\\\"\").write(zcls).write(\"-cnt\\\">\").write(s).write(\"<\/span>\");\n\t\t\t//1. don't use Out to encode since content might contain HTML tags\n\t\t\t//2. Feature 1908524: no <br/>\n\n\t\twh.writeln(\"<\/td><\/tr>\");\n\t}","id":2489,"modified_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal SmartWriter wh = new SmartWriter(out);\n\t\tfinal Comboitem self = (Comboitem) comp;\n\t\tfinal String uuid = self.getUuid();\n\t\tfinal String zcls = self.getZclass();\n\t\twh.write(\"<tr id=\\\"\").write(uuid).write(\"\\\" z.type=\\\"Cmit\\\"\")\n\t\t\t.write(self.getOuterAttrs()).write(self.getInnerAttrs()).writeln(\">\")\n\t\t\t.write(\"<td class=\\\"\").write(zcls).write(\"-img\\\">\").write(self.getImgTag())\n\t\t\t.write(\"<\/td>\\n<td class=\\\"\").write(zcls).write(\"-text\\\">\");\n\n\t\tOut o = new Out(self.getLabel());\n\t\to.setPre(true);\n\t\to.render(out);\n\n\t\tString s = self.getDescription();\n\t\tif (!Strings.isBlank(s)) {\n\t\t\twh.write(\"<br/>\\n<span class=\\\"\").write(zcls).write(\"-inner\\\">\");\n\t\t\tnew Out(s).render(out);\n\t\t\twh.write(\"<\/span>\");\n\t\t}\n\n\t\ts = self.getContent();\n\t\tif (!Strings.isBlank(s))\n\t\t\twh.write(\"<span class=\\\"\").write(zcls).write(\"-cnt\\\">\").write(s).write(\"<\/span>\");\n\t\t\t//1. don't use Out to encode since content might contain HTML tags\n\t\t\t//2. Feature 1908524: no <br/>\n\n\t\twh.writeln(\"<\/td><\/tr>\");\n\t}","commit_id":"d52f2f1d3e287bd5e355bcf463d985b23149e147","url":"https://github.com/zkoss/zk"},{"original_method":"/** Generates the output to the specified writer.\n\t */\n\tpublic void render(Writer out) throws IOException {\n\t\tint len = _value != null ? _value.length() : 0;\n\t\tif (len == 0 || (_nbsp && _value.trim().length() == 0)) {\n\t\t\tif (_nbsp)\n\t\t\t\tout.write(\"&nbsp;\");\n\t\t\treturn;\n\t\t}\n\n\t\tString value = _value;\n\t\tif (_maxlength > 0 && len > _maxlength) {\n\t\t\tint j = _maxlength;\n\t\t\twhile (j > 0 && Character.isWhitespace(value.charAt(j - 1)))\n\t\t\t\t--j;\n\t\t\tvalue = value.substring(0, j) + \"...\";\n\t\t}\n\n\t\tif (_escapeXML) {\n\t\t\tStringBuffer sb = null;\n\t\t\tlen = value.length();\n\t\t\tfor (int j = 0; j < len; ++j) {\n\t\t\t\tfinal char cc = value.charAt(j);\n\t\t\t\tfinal String replace = _escapeXML ? XMLs.escapeXML(cc)\n\t\t\t\t\t\t: null;\n\n\t\t\t\tif (replace != null) {\n\t\t\t\t\tif (sb == null) {\n\t\t\t\t\t\tsb = new StringBuffer(value.length() + 10);\n\t\t\t\t\t\tsb.append(value.substring(0, j));\n\t\t\t\t\t}\n\t\t\t\t\tsb.append(replace);\n\t\t\t\t} else if (sb != null) {\n\t\t\t\t\tsb.append(cc);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (sb != null)\n\t\t\t\tvalue = sb.toString();\n\t\t}\n\n\t\tout.write(value);\n\t}","id":2490,"modified_method":"/** Generates the output to the specified writer.\n\t */\n\tpublic void render(Writer out) throws IOException {\n\t\tint len = _value != null ? _value.length() : 0;\n\t\tif (len == 0 || (_nbsp && _value.trim().length() == 0)) {\n\t\t\tif (_nbsp)\n\t\t\t\tout.write(\"&nbsp;\");\n\t\t\treturn;\n\t\t}\n\n\t\tString value = _value;\n\t\tif (_maxlength > 0 && len > _maxlength) {\n\t\t\tint j = _maxlength;\n\t\t\twhile (j > 0 && Character.isWhitespace(value.charAt(j - 1)))\n\t\t\t\t--j;\n\t\t\tvalue = value.substring(0, j) + \"...\";\n\t\t}\n\n\t\tif (_escapeXML) {\n\t\t\tStringBuffer sb = null;\n\t\t\tlen = value.length();\n\t\t\tfor (int j = 0; j < len; ++j) {\n\t\t\t\tfinal char cc = value.charAt(j);\n\t\t\t\tfinal String replace;\n\t\t\t\t\n\t\t\t\tif (_pre && cc == ' ')\n\t\t\t\t\treplace = \"&nbsp;\";\n\t\t\t\telse\n\t\t\t\t\treplace = XMLs.escapeXML(cc);\n\n\n\t\t\t\tif (replace != null) {\n\t\t\t\t\tif (sb == null) {\n\t\t\t\t\t\tsb = new StringBuffer(value.length() + 10);\n\t\t\t\t\t\tsb.append(value.substring(0, j));\n\t\t\t\t\t}\n\t\t\t\t\tsb.append(replace);\n\t\t\t\t} else if (sb != null) {\n\t\t\t\t\tsb.append(cc);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (sb != null)\n\t\t\t\tvalue = sb.toString();\n\t\t}\n\n\t\tout.write(value);\n\t}","commit_id":"d52f2f1d3e287bd5e355bcf463d985b23149e147","url":"https://github.com/zkoss/zk"},{"original_method":"public void render(ActionContext ac, boolean nested)\n\tthrows DspException, IOException {\n\t\tif (!isEffective())\n\t\t\treturn;\n\t\tif (nested)\n\t\t\tthrow new DspException(MWeb.DSP_NESTED_ACTION_NOT_ALLOWED,\n\t\t\t\tnew Object[] {this, new Integer(ac.getLineNumber())});\n\n\t\tint len = _value != null ? _value.length(): 0;\n\t\tif (len == 0 || (_nbsp && _value.trim().length() == 0)) {\n\t\t\tif (_nbsp)\n\t\t\t\tac.getOut().write(\"&nbsp;\");\n\t\t\treturn;\n\t\t}\n\t\t\t\n\t\tString value = _value;\n\t\tif (_maxlength > 0 && len > _maxlength) {\n\t\t\tint j = _maxlength;\n\t\t\twhile (j > 0 && Character.isWhitespace(value.charAt(j - 1)))\n\t\t\t\t--j;\n\t\t\tvalue = value.substring(0, j) + \"...\";\n\t\t}\n\n\t\tif (_escapeXML) {\n\t\t\tStringBuffer sb = null;\n\t\t\tlen = value.length();\n\t\t\tfor (int j = 0; j < len; ++j) {\n\t\t\t\tfinal char cc = value.charAt(j);\n\t\t\t\tfinal String replace = _escapeXML ? XMLs.escapeXML(cc): null;\n\n\t\t\t\tif (replace != null) {\n\t\t\t\t\tif (sb == null) {\n\t\t\t\t\t\tsb = new StringBuffer(value.length() + 10);\n\t\t\t\t\t\tsb.append(value.substring(0, j));\n\t\t\t\t\t}\n\t\t\t\t\tsb.append(replace);\n\t\t\t\t} else if (sb != null) {\n\t\t\t\t\tsb.append(cc);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (sb != null)\n\t\t\t\tvalue = sb.toString();\n\t\t}\n\n\t\tac.getOut().write(value);\n\t}","id":2491,"modified_method":"public void render(ActionContext ac, boolean nested)\n\tthrows DspException, IOException {\n\t\tif (!isEffective())\n\t\t\treturn;\n\t\tif (nested)\n\t\t\tthrow new DspException(MWeb.DSP_NESTED_ACTION_NOT_ALLOWED,\n\t\t\t\tnew Object[] {this, new Integer(ac.getLineNumber())});\n\n\t\tint len = _value != null ? _value.length(): 0;\n\t\tif (len == 0 || (_nbsp && _value.trim().length() == 0)) {\n\t\t\tif (_nbsp)\n\t\t\t\tac.getOut().write(\"&nbsp;\");\n\t\t\treturn;\n\t\t}\n\t\t\t\n\t\tString value = _value;\n\t\tif (_maxlength > 0 && len > _maxlength) {\n\t\t\tint j = _maxlength;\n\t\t\twhile (j > 0 && Character.isWhitespace(value.charAt(j - 1)))\n\t\t\t\t--j;\n\t\t\tvalue = value.substring(0, j) + \"...\";\n\t\t}\n\n\t\tif (_escapeXML) {\n\t\t\tStringBuffer sb = null;\n\t\t\tlen = value.length();\n\t\t\tfor (int j = 0; j < len; ++j) {\n\t\t\t\tfinal char cc = value.charAt(j);\n\t\t\t\tfinal String replace;\n\t\t\t\t\n\t\t\t\tif (_pre && cc == ' ')\n\t\t\t\t\treplace = \"&nbsp;\";\n\t\t\t\telse\n\t\t\t\t\treplace = XMLs.escapeXML(cc);\n\n\t\t\t\tif (replace != null) {\n\t\t\t\t\tif (sb == null) {\n\t\t\t\t\t\tsb = new StringBuffer(value.length() + 10);\n\t\t\t\t\t\tsb.append(value.substring(0, j));\n\t\t\t\t\t}\n\t\t\t\t\tsb.append(replace);\n\t\t\t\t} else if (sb != null) {\n\t\t\t\t\tsb.append(cc);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (sb != null)\n\t\t\t\tvalue = sb.toString();\n\t\t}\n\n\t\tac.getOut().write(value);\n\t}","commit_id":"d52f2f1d3e287bd5e355bcf463d985b23149e147","url":"https://github.com/zkoss/zk"},{"original_method":"/** Returns the attributes used to wrap splitter (never null).\n\t * Used only by component development to generate HTML tags.\n\t */\n\tpublic String getSplitterExteriorAttrs() {\n\t\tfinal StringBuffer sb = new StringBuffer(80);\n\t\tfinal boolean vert = \"vertical\".equals(getOrient());\n\t\tHTMLs.appendAttribute(sb, vert ? \"height\": \"width\", \"8px\");\n\t\tHTMLs.appendAttribute(sb, \"background\",\n\t\t\tgetDesktop().getExecution().encodeURL(\n\t\t\t\tvert ? \"~./zul/img/splt/vsplt.gif\": \"~./zul/img/splt/hsplt.gif\"));\n\t\treturn sb.toString();\n\t}","id":2492,"modified_method":"/** Returns the attributes used to wrap splitter (never null).\n\t * Used only by component development to generate HTML tags.\n\t */\n\tpublic String getSplitterExteriorAttrs() {\n\t\tfinal StringBuffer sb = new StringBuffer(60);\n\t\tfinal boolean vert = \"vertical\".equals(getOrient());\n\t\tsb.append(vert ? \"align=\\\"center\\\"\": \"valign=\\\"middle\\\"\");\n\t\tHTMLs.appendAttribute(sb, vert ? \"height\": \"width\", \"8px\");\n\t\treturn sb.toString();\n\t}","commit_id":"a7ddb11a9ff8150ca101413b79189564ff5854a7","url":"https://github.com/zkoss/zk"},{"original_method":"public String getOuterAttrs() {\n\t\tfinal String attrs = super.getOuterAttrs();\n\t\tif (\"none\".equals(_collapse)) return attrs;\n\n\t\tfinal StringBuffer sb = new StringBuffer(80).append(attrs);\n\t\tHTMLs.appendAttribute(sb, \"zk_colps\", _collapse);\n\t\treturn sb.toString();\n\t}","id":2493,"modified_method":"public String getOuterAttrs() {\n\t\tfinal StringBuffer sb =\n\t\t\tnew StringBuffer(80).append(super.getOuterAttrs());\n\t\tif (\"vertical\".equals(getOrient()))\n\t\t\tHTMLs.appendAttribute(sb, \"zk_vert\", \"true\");\n\t\tif (\"none\".equals(_collapse))\n\t\t\tHTMLs.appendAttribute(sb, \"zk_colps\", _collapse);\n\t\treturn sb.toString();\n\t}","commit_id":"a7ddb11a9ff8150ca101413b79189564ff5854a7","url":"https://github.com/zkoss/zk"},{"original_method":"/**\n     * Try to avoid using this nagging method. The other methods use a consistent wording for when things will be removed.\n     */\n    public static void nagUserWith(String message) {\n        inform(LogLevel.WARN, message);\n        logTraceIfNecessary();\n    }","id":2494,"modified_method":"/**\n     * Try to avoid using this nagging method. The other methods use a consistent wording for when things will be removed.\n     */\n    public static void nagUserWith(String message) {\n        if (isEnabled() && MESSAGES.add(message)) {\n            LOGGER.warn(message);\n            logTraceIfNecessary();\n        }\n    }","commit_id":"32a43a3e9fa86edf0a9e6c8f4717e83f0f6bcc92","url":"https://github.com/gradle/gradle"},{"original_method":"public static void nagUserOfReplacedMethod(String methodName, String replacement) {\n        if (isEnabled() && METHODS.add(methodName)) {\n            LOGGER.warn(String.format(\n                    \"The %s method %s. Please use the %s method instead.\",\n                    methodName, getDeprecationMessage(), replacement));\n            logTraceIfNecessary();\n        }\n    }","id":2495,"modified_method":"public static void nagUserOfReplacedMethod(String methodName, String replacement) {\n        nagUserWith(String.format(\n                \"The %s method %s. Please use the %s method instead.\",\n                methodName, getDeprecationMessage(), replacement));\n    }","commit_id":"32a43a3e9fa86edf0a9e6c8f4717e83f0f6bcc92","url":"https://github.com/gradle/gradle"},{"original_method":"public static void nagUserOfReplacedTaskType(String taskName, String replacement) {\n        if (isEnabled() && TASKS.add(taskName)) {\n            LOGGER.warn(String.format(\n                    \"The %s task type %s. Please use the %s instead.\",\n                    taskName, getDeprecationMessage(), replacement));\n            logTraceIfNecessary();\n        }\n    }","id":2496,"modified_method":"public static void nagUserOfReplacedTaskType(String taskName, String replacement) {\n        nagUserWith(String.format(\n                \"The %s task type %s. Please use the %s instead.\",\n                taskName, getDeprecationMessage(), replacement));\n    }","commit_id":"32a43a3e9fa86edf0a9e6c8f4717e83f0f6bcc92","url":"https://github.com/gradle/gradle"},{"original_method":"public static void reset() {\n        PLUGINS.clear();\n        METHODS.clear();\n        PROPERTIES.clear();\n        NAMED_PARAMETERS.clear();\n        DYNAMIC_PROPERTIES.clear();\n    }","id":2497,"modified_method":"public static void reset() {\n        DYNAMIC_PROPERTIES.clear();\n        MESSAGES.clear();\n        FEATURES.clear();\n    }","commit_id":"32a43a3e9fa86edf0a9e6c8f4717e83f0f6bcc92","url":"https://github.com/gradle/gradle"},{"original_method":"public static void informAboutIncubating(String incubatingFeature) {\n        inform(LogLevel.LIFECYCLE, String.format(INCUBATION_MESSAGE, incubatingFeature));\n    }","id":2498,"modified_method":"public static void informAboutIncubating(String incubatingFeature) {\n        if (FEATURES.add(incubatingFeature)) {\n            LOGGER.lifecycle(String.format(INCUBATION_MESSAGE, incubatingFeature));\n        }\n    }","commit_id":"32a43a3e9fa86edf0a9e6c8f4717e83f0f6bcc92","url":"https://github.com/gradle/gradle"},{"original_method":"public static void nagUserOfDiscontinuedProperty(String propertyName, String advice) {\n        if (isEnabled() && PROPERTIES.add(propertyName)) {\n            LOGGER.warn(String.format(\"The %s property %s. %s\",\n                    propertyName, getDeprecationMessage(), advice));\n            logTraceIfNecessary();\n        }\n    }","id":2499,"modified_method":"public static void nagUserOfDiscontinuedProperty(String propertyName, String advice) {\n        nagUserWith(String.format(\"The %s property %s. %s\",\n                propertyName, getDeprecationMessage(), advice));\n    }","commit_id":"32a43a3e9fa86edf0a9e6c8f4717e83f0f6bcc92","url":"https://github.com/gradle/gradle"},{"original_method":"public static void nagUserOfReplacedProperty(String propertyName, String replacement) {\n        if (isEnabled() && PROPERTIES.add(propertyName)) {\n            LOGGER.warn(String.format(\n                    \"The %s property %s. Please use the %s property instead.\",\n                    propertyName, getDeprecationMessage(), replacement));\n            logTraceIfNecessary();\n        }\n    }","id":2500,"modified_method":"public static void nagUserOfReplacedProperty(String propertyName, String replacement) {\n        nagUserWith(String.format(\n                \"The %s property %s. Please use the %s property instead.\",\n                propertyName, getDeprecationMessage(), replacement));\n    }","commit_id":"32a43a3e9fa86edf0a9e6c8f4717e83f0f6bcc92","url":"https://github.com/gradle/gradle"},{"original_method":"public static void nagUserOfDiscontinuedMethod(String methodName) {\n        if (isEnabled() && METHODS.add(methodName)) {\n            LOGGER.warn(String.format(\"The %s method %s.\",\n                    methodName, getDeprecationMessage()));\n            logTraceIfNecessary();\n        }\n    }","id":2501,"modified_method":"public static void nagUserOfDiscontinuedMethod(String methodName) {\n        nagUserWith(String.format(\"The %s method %s.\",\n                methodName, getDeprecationMessage()));\n    }","commit_id":"32a43a3e9fa86edf0a9e6c8f4717e83f0f6bcc92","url":"https://github.com/gradle/gradle"},{"original_method":"public static void nagUserOfReplacedNamedParameter(String parameterName, String replacement) {\n        if (isEnabled() && NAMED_PARAMETERS.add(parameterName)) {\n            LOGGER.warn(String.format(\n                    \"The %s named parameter %s. Please use the %s named parameter instead.\",\n                    parameterName, getDeprecationMessage(), replacement));\n            logTraceIfNecessary();\n        }\n    }","id":2502,"modified_method":"public static void nagUserOfReplacedNamedParameter(String parameterName, String replacement) {\n        nagUserWith(String.format(\n                \"The %s named parameter %s. Please use the %s named parameter instead.\",\n                parameterName, getDeprecationMessage(), replacement));\n    }","commit_id":"32a43a3e9fa86edf0a9e6c8f4717e83f0f6bcc92","url":"https://github.com/gradle/gradle"},{"original_method":"public static void nagUserOfReplacedPlugin(String pluginName, String replacement) {\n        if (isEnabled() && PLUGINS.add(pluginName)) {\n            LOGGER.warn(String.format(\n                    \"The %s plugin %S. Please use the %s plugin instead.\",\n                    pluginName, getDeprecationMessage(), replacement));\n            logTraceIfNecessary();\n        }\n    }","id":2503,"modified_method":"public static void nagUserOfReplacedPlugin(String pluginName, String replacement) {\n        nagUserWith(String.format(\n                \"The %s plugin %S. Please use the %s plugin instead.\",\n                pluginName, getDeprecationMessage(), replacement));\n    }","commit_id":"32a43a3e9fa86edf0a9e6c8f4717e83f0f6bcc92","url":"https://github.com/gradle/gradle"},{"original_method":"public static void nagUserOfDiscontinuedConfiguration(String configurationName, String advice) {\n        if (isEnabled() && CONFIGURATIONS.add(configurationName)) {\n            LOGGER.warn(String.format(\"The %s configuration %s. %s\",\n                    configurationName, getDeprecationMessage(), advice));\n            logTraceIfNecessary();\n        }\n    }","id":2504,"modified_method":"public static void nagUserOfDiscontinuedConfiguration(String configurationName, String advice) {\n        nagUserWith(String.format(\"The %s configuration %s. %s\",\n                configurationName, getDeprecationMessage(), advice));\n    }","commit_id":"32a43a3e9fa86edf0a9e6c8f4717e83f0f6bcc92","url":"https://github.com/gradle/gradle"},{"original_method":"static ServiceController<VirtualFile> addService(final ServiceTarget serviceTarget, final ServiceName serviceName, final byte[] hash) {\n        final ContentServitor service = new ContentServitor(hash);\n        return serviceTarget.addService(serviceName, service)\n            .addDependency(ContentRepository.SERVICE_NAME, ContentRepository.class, service.contentRepositoryInjectedValue)\n            .install();\n    }","id":2505,"modified_method":"static ServiceController<VirtualFile> addService(final ServiceTarget serviceTarget, final ServiceName serviceName, final byte[] hash, final ServiceVerificationHandler verificationHandler) {\n        final ContentServitor service = new ContentServitor(hash);\n        return serviceTarget.addService(serviceName, service)\n            .addDependency(ContentRepository.SERVICE_NAME, ContentRepository.class, service.contentRepositoryInjectedValue)\n            .addListener(verificationHandler)\n            .install();\n    }","commit_id":"6bca44700e7e671d046e70dcbe5b032b40c1324f","url":"https://github.com/wildfly/wildfly"},{"original_method":"public static void redeploy(final NewOperationContext operationContext, final String deploymentUnitName, final String managementName, final ContentItem... contents) throws OperationFailedException {\n        assert contents != null : \"contents is null\";\n\n        if (operationContext.getType() == NewOperationContext.Type.SERVER) {\n            operationContext.addStep(new NewStepHandler() {\n                public void execute(NewOperationContext context, ModelNode operation) throws OperationFailedException {\n                    final ServiceController<?> controller = context.getServiceRegistry(false).getService(Services.deploymentUnitName(deploymentUnitName));\n                    if (controller != null) {\n                        controller.addListener(new AbstractServiceListener<Object>() {\n\n                            @Override\n                            public void listenerAdded(ServiceController<?> controller) {\n                                if (!controller.compareAndSetMode(ServiceController.Mode.ACTIVE, ServiceController.Mode.NEVER)) {\n                                    controller.removeListener(this);\n                                }\n                            }\n\n                            public void serviceStopping(ServiceController<?> controller) {\n                                controller.removeListener(this);\n                                controller.compareAndSetMode(ServiceController.Mode.NEVER, ServiceController.Mode.ACTIVE);\n                            }\n                        });\n                    } else {\n                        doDeploy(context, deploymentUnitName, managementName, contents);\n                    }\n                    context.completeStep();\n                }\n            }, NewOperationContext.Stage.RUNTIME);\n        }\n        operationContext.completeStep();\n    }","id":2506,"modified_method":"public static void redeploy(final NewOperationContext operationContext, final String deploymentUnitName, final String managementName, final ContentItem... contents) throws OperationFailedException {\n        assert contents != null : \"contents is null\";\n\n        if (operationContext.getType() == NewOperationContext.Type.SERVER) {\n            operationContext.addStep(new NewStepHandler() {\n                public void execute(NewOperationContext context, ModelNode operation) throws OperationFailedException {\n                    final ServiceController<?> deploymentController = context.getServiceRegistry(false).getService(Services.deploymentUnitName(deploymentUnitName));\n                    if (deploymentController != null) {\n                        context.removeService(deploymentController.getName());\n                        context.removeService(deploymentController.getName().append(\"contents\"));\n                        if (context.completeStep() == NewOperationContext.ResultAction.ROLLBACK) {\n                            final ModelNode model = context.readModel(PathAddress.EMPTY_ADDRESS);\n                            final String name = model.require(NAME).asString();\n                            final String runtimeName = model.require(RUNTIME_NAME).asString();\n                            final DeploymentHandlerUtil.ContentItem[] contents = getContents(model.require(CONTENT));\n                            final ServiceVerificationHandler verificationHandler = new ServiceVerificationHandler();\n                            doDeploy(context, runtimeName, name, verificationHandler, contents);\n                        }\n                    } else {\n                        context.completeStep();\n                    }\n\n                }\n            }, NewOperationContext.Stage.RUNTIME);\n\n            operationContext.addStep(new NewStepHandler() {\n                public void execute(NewOperationContext context, ModelNode operation) throws OperationFailedException {\n                    final ServiceVerificationHandler verificationHandler = new ServiceVerificationHandler();\n                    final Collection<ServiceController<?>> controllers = doDeploy(context, deploymentUnitName, managementName, verificationHandler, contents);\n\n                    context.addStep(verificationHandler, NewOperationContext.Stage.VERIFY);\n\n                    if (context.completeStep() == NewOperationContext.ResultAction.ROLLBACK) {\n                        for (ServiceController<?> controller : controllers) {\n                            context.removeService(controller.getName());\n                        }\n                    }\n                }\n            }, NewOperationContext.Stage.RUNTIME);\n        }\n        operationContext.completeStep();\n    }","commit_id":"6bca44700e7e671d046e70dcbe5b032b40c1324f","url":"https://github.com/wildfly/wildfly"},{"original_method":"public static void replace(final NewOperationContext operationContext, final String deploymentUnitName, final String managementName,\n                               final String replacedDeploymentUnitName, final ContentItem... contents) throws OperationFailedException {\n        assert contents != null : \"contents is null\";\n\n        if (operationContext.getType() == NewOperationContext.Type.SERVER) {\n            operationContext.addStep(new NewStepHandler() {\n                public void execute(NewOperationContext context, ModelNode operation) throws OperationFailedException {\n                    final ServiceName replacedDeploymentUnitServiceName = Services.deploymentUnitName(replacedDeploymentUnitName);\n                    final ServiceName replacedContentsServiceName = replacedDeploymentUnitServiceName.append(\"contents\");\n                    executeWhenRemoved(new Runnable() {\n                        @Override\n                        public void run() {\n                            doDeploy(operationContext, deploymentUnitName, managementName, contents);\n                        }\n                    }, operationContext.getServiceRegistry(false), replacedDeploymentUnitServiceName, replacedContentsServiceName);\n                    operationContext.removeService(replacedDeploymentUnitServiceName);\n                    operationContext.removeService(replacedContentsServiceName);\n\n                    context.completeStep();\n                }\n            }, NewOperationContext.Stage.RUNTIME);\n        }\n    }","id":2507,"modified_method":"public static void replace(final NewOperationContext operationContext, final String deploymentUnitName, final String managementName,\n                               final String replacedDeploymentUnitName, final ContentItem... contents) throws OperationFailedException {\n        assert contents != null : \"contents is null\";\n\n        if (operationContext.getType() == NewOperationContext.Type.SERVER) {\n            operationContext.addStep(new NewStepHandler() {\n                public void execute(NewOperationContext context, ModelNode operation) throws OperationFailedException {\n                    final ServiceName replacedDeploymentUnitServiceName = Services.deploymentUnitName(replacedDeploymentUnitName);\n                    final ServiceName replacedContentsServiceName = replacedDeploymentUnitServiceName.append(\"contents\");\n                    operationContext.removeService(replacedDeploymentUnitServiceName);\n                    operationContext.removeService(replacedContentsServiceName);\n\n                    if (context.completeStep() == NewOperationContext.ResultAction.ROLLBACK) {\n                        final ModelNode model = context.readModel(PathAddress.EMPTY_ADDRESS);\n                        final String name = model.require(NAME).asString();\n                        final String runtimeName = model.require(RUNTIME_NAME).asString();\n                        final DeploymentHandlerUtil.ContentItem[] contents = getContents(model.require(CONTENT));\n                        final ServiceVerificationHandler verificationHandler = new ServiceVerificationHandler();\n                        doDeploy(context, runtimeName, name, verificationHandler, contents);\n                    }\n                }\n             }, NewOperationContext.Stage.RUNTIME);\n\n             operationContext.addStep(new NewStepHandler() {\n                public void execute(NewOperationContext context, ModelNode operation) throws OperationFailedException {\n                    final ServiceVerificationHandler verificationHandler = new ServiceVerificationHandler();\n                    final Collection<ServiceController<?>> controllers = doDeploy(context, deploymentUnitName, managementName, verificationHandler, contents);\n\n                    context.addStep(verificationHandler, NewOperationContext.Stage.VERIFY);\n\n                    if (context.completeStep() == NewOperationContext.ResultAction.ROLLBACK) {\n                        for (ServiceController<?> controller : controllers) {\n                            context.removeService(controller.getName());\n                        }\n                    }\n                }\n            }, NewOperationContext.Stage.RUNTIME);\n        }\n    }","commit_id":"6bca44700e7e671d046e70dcbe5b032b40c1324f","url":"https://github.com/wildfly/wildfly"},{"original_method":"public static void deploy(final NewOperationContext context, final String deploymentUnitName, final String managementName, final ContentItem... contents) throws OperationFailedException {\n        assert contents != null : \"contents is null\";\n\n        if (context.getType() == NewOperationContext.Type.SERVER) {\n            context.addStep(new NewStepHandler() {\n                public void execute(NewOperationContext context, ModelNode operation) {\n                    doDeploy(context, deploymentUnitName, managementName, contents);\n                    context.completeStep();\n                }\n            }, NewOperationContext.Stage.RUNTIME);\n        }\n    }","id":2508,"modified_method":"public static void deploy(final NewOperationContext context, final String deploymentUnitName, final String managementName, final ContentItem... contents) throws OperationFailedException {\n        assert contents != null : \"contents is null\";\n\n        if (context.getType() == NewOperationContext.Type.SERVER) {\n            context.addStep(new NewStepHandler() {\n                public void execute(NewOperationContext context, ModelNode operation) {\n                    final ServiceVerificationHandler verificationHandler = new ServiceVerificationHandler();\n                    final Collection<ServiceController<?>> controllers = doDeploy(context, deploymentUnitName, managementName, verificationHandler, contents);\n\n                    context.addStep(verificationHandler, NewOperationContext.Stage.VERIFY);\n\n                    if(context.completeStep() == NewOperationContext.ResultAction.ROLLBACK) {\n                        for(ServiceController<?> controller : controllers) {\n                            context.removeService(controller.getName());\n                        }\n                    }\n                }\n            }, NewOperationContext.Stage.RUNTIME);\n        }\n    }","commit_id":"6bca44700e7e671d046e70dcbe5b032b40c1324f","url":"https://github.com/wildfly/wildfly"},{"original_method":"public static void undeploy(final NewOperationContext context, final String deploymentUnitName) {\n        if (context.getType() == NewOperationContext.Type.SERVER) {\n            context.addStep(new NewStepHandler() {\n                public void execute(NewOperationContext context, ModelNode operation) {\n                    final ServiceName deploymentUnitServiceName = Services.deploymentUnitName(deploymentUnitName);\n                    context.removeService(deploymentUnitServiceName);\n                    context.removeService(deploymentUnitServiceName.append(\"contents\"));\n\n                    context.completeStep();\n                }\n            }, NewOperationContext.Stage.RUNTIME);\n        }\n    }","id":2509,"modified_method":"public static void undeploy(final NewOperationContext context, final String deploymentUnitName) {\n        if (context.getType() == NewOperationContext.Type.SERVER) {\n            context.addStep(new NewStepHandler() {\n                public void execute(NewOperationContext context, ModelNode operation) {\n                    final ServiceName deploymentUnitServiceName = Services.deploymentUnitName(deploymentUnitName);\n\n                    context.removeService(deploymentUnitServiceName);\n                    context.removeService(deploymentUnitServiceName.append(\"contents\"));\n\n                    if(context.completeStep() == NewOperationContext.ResultAction.ROLLBACK) {\n                        final ModelNode model = context.readModel(PathAddress.EMPTY_ADDRESS);\n                        final String name = model.require(NAME).asString();\n                        final String runtimeName = model.require(RUNTIME_NAME).asString();\n                        final DeploymentHandlerUtil.ContentItem[] contents = getContents(model.require(CONTENT));\n                        final ServiceVerificationHandler verificationHandler = new ServiceVerificationHandler();\n                        doDeploy(context, runtimeName, name, verificationHandler, contents);\n                    }\n                }\n            }, NewOperationContext.Stage.RUNTIME);\n        }\n    }","commit_id":"6bca44700e7e671d046e70dcbe5b032b40c1324f","url":"https://github.com/wildfly/wildfly"},{"original_method":"private static void doDeploy(final NewOperationContext context, final String deploymentUnitName, final String managementName, final ContentItem... contents) {\n        final ServiceName deploymentUnitServiceName = Services.deploymentUnitName(deploymentUnitName);\n        final ServiceRegistry serviceRegistry = context.getServiceRegistry(false);\n        final ServiceController<?> controller = serviceRegistry.getService(deploymentUnitServiceName);\n        if (controller != null) {\n            controller.setMode(ServiceController.Mode.ACTIVE);\n        } else {\n            final ServiceTarget serviceTarget = context.getServiceTarget();\n            final ServiceController<?> contentService;\n            // TODO: overlay service\n            final ServiceName contentsServiceName = deploymentUnitServiceName.append(\"contents\");\n            if (contents[0].hash != null)\n                contentService = ContentServitor.addService(serviceTarget, contentsServiceName, contents[0].hash);\n            else {\n                final String path = contents[0].path;\n                final String relativeTo = contents[0].relativeTo;\n\n                final ServiceName relativeToPathServiceName = relativeTo != null ? RelativePathService.pathNameOf(relativeTo) : null;\n                contentService = PathContentServitor.addService(serviceTarget, contentsServiceName, path, relativeToPathServiceName);\n            }\n            final RootDeploymentUnitService service = new RootDeploymentUnitService(deploymentUnitName, managementName, null);\n            final ServiceController<DeploymentUnit> deploymentUnitController = serviceTarget.addService(deploymentUnitServiceName, service)\n                    .addDependency(Services.JBOSS_DEPLOYMENT_CHAINS, DeployerChains.class, service.getDeployerChainsInjector())\n                    .addDependency(ServerDeploymentRepository.SERVICE_NAME, ServerDeploymentRepository.class, service.getServerDeploymentRepositoryInjector())\n                    .addDependency(contentsServiceName, VirtualFile.class, service.contentsInjector)\n                    .setInitialMode(ServiceController.Mode.ACTIVE)\n                    .install();\n            contentService.addListener(new AbstractServiceListener<Object>() {\n                @Override\n                public void transition(final ServiceController<? extends Object> controller, final ServiceController.Transition transition) {\n                    if (transition == ServiceController.Transition.REMOVING_to_REMOVED) {\n                        deploymentUnitController.setMode(REMOVE);\n                    }\n                }\n            });\n        }\n    }","id":2510,"modified_method":"private static Collection<ServiceController<?>> doDeploy(final NewOperationContext context, final String deploymentUnitName, final String managementName, final ServiceVerificationHandler verificationHandler, final ContentItem... contents) {\n        final ServiceName deploymentUnitServiceName = Services.deploymentUnitName(deploymentUnitName);\n        final ServiceRegistry serviceRegistry = context.getServiceRegistry(false);\n        final ServiceController<?> controller = serviceRegistry.getService(deploymentUnitServiceName);\n        if (controller != null) {\n            controller.addListener(verificationHandler);\n            controller.setMode(ServiceController.Mode.ACTIVE);\n            return Collections.emptySet();\n\n        } else {\n            final List<ServiceController<?>> controllers = new ArrayList<ServiceController<?>>();\n\n            final ServiceTarget serviceTarget = context.getServiceTarget();\n            final ServiceController<?> contentService;\n            // TODO: overlay service\n            final ServiceName contentsServiceName = deploymentUnitServiceName.append(\"contents\");\n            if (contents[0].hash != null)\n                contentService = ContentServitor.addService(serviceTarget, contentsServiceName, contents[0].hash, verificationHandler);\n            else {\n                final String path = contents[0].path;\n                final String relativeTo = contents[0].relativeTo;\n\n                final ServiceName relativeToPathServiceName = relativeTo != null ? RelativePathService.pathNameOf(relativeTo) : null;\n                contentService = PathContentServitor.addService(serviceTarget, contentsServiceName, path, relativeToPathServiceName);\n            }\n            controllers.add(contentService);\n\n            final RootDeploymentUnitService service = new RootDeploymentUnitService(deploymentUnitName, managementName, null);\n            final ServiceController<DeploymentUnit> deploymentUnitController = serviceTarget.addService(deploymentUnitServiceName, service)\n                    .addDependency(Services.JBOSS_DEPLOYMENT_CHAINS, DeployerChains.class, service.getDeployerChainsInjector())\n                    .addDependency(ServerDeploymentRepository.SERVICE_NAME, ServerDeploymentRepository.class, service.getServerDeploymentRepositoryInjector())\n                    .addDependency(contentsServiceName, VirtualFile.class, service.contentsInjector)\n                    .addListener(verificationHandler)\n                    .setInitialMode(ServiceController.Mode.ACTIVE)\n                    .install();\n            controllers.add(deploymentUnitController);\n\n            contentService.addListener(new AbstractServiceListener<Object>() {\n                @Override\n                public void transition(final ServiceController<? extends Object> controller, final ServiceController.Transition transition) {\n                    if (transition == ServiceController.Transition.REMOVING_to_REMOVED) {\n                        deploymentUnitController.setMode(REMOVE);\n                    }\n                }\n            });\n\n            return controllers;\n        }\n    }","commit_id":"6bca44700e7e671d046e70dcbe5b032b40c1324f","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected abstract ServiceController<?> startConfigAndAddDependency(OperationContext context, ServiceBuilder<?> dataSourceServiceBuilder,\n            AbstractDataSourceService dataSourceService, String jndiName, ServiceTarget serviceTarget, final ModelNode operation, final ServiceVerificationHandler serviceVerificationHandler)\n            throws OperationFailedException;","id":2511,"modified_method":"protected abstract void startConfigAndAddDependency(ServiceBuilder<?> dataSourceServiceBuilder,\n            AbstractDataSourceService dataSourceService, String jndiName, ServiceTarget serviceTarget, final ModelNode operation, final ServiceVerificationHandler serviceVerificationHandler)\n            throws OperationFailedException;","commit_id":"c7bbeeea7b05de5b5e7a60ddc46117a38f6284d9","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model, final ServiceVerificationHandler verificationHandler, final List<ServiceController<?>> controllers) throws OperationFailedException {\n\n        final ModelNode address = operation.require(OP_ADDR);\n        final String dsName = PathAddress.pathAddress(address).getLastElement().getValue();\n\n\n        final ServiceTarget serviceTarget = context.getServiceTarget();\n\n        boolean enabled = false;\n                //!operation.hasDefined(ENABLED.getName()) || operation.get(ENABLED.getName()).asBoolean();\n\n        ModelNode node = operation.require(DATASOURCE_DRIVER.getName());\n\n\n        AbstractDataSourceService dataSourceService = createDataSourceService(dsName);\n\n        final ServiceName dataSourceServiceName = AbstractDataSourceService.SERVICE_NAME_BASE.append(dsName);\n        final ServiceBuilder<?> dataSourceServiceBuilder = serviceTarget\n                .addService(dataSourceServiceName, dataSourceService)\n                .addDependency(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE, TransactionIntegration.class,\n                        dataSourceService.getTransactionIntegrationInjector())\n                .addDependency(ConnectorServices.MANAGEMENT_REPOSISTORY_SERVICE, ManagementRepository.class,\n                        dataSourceService.getmanagementRepositoryInjector())\n                .addDependency(SubjectFactoryService.SERVICE_NAME, SubjectFactory.class,\n                        dataSourceService.getSubjectFactoryInjector())\n                .addDependency(ConnectorServices.JDBC_DRIVER_REGISTRY_SERVICE, DriverRegistry.class,\n                        dataSourceService.getDriverRegistryInjector()).addDependency(NamingService.SERVICE_NAME);\n\n        controllers.add(startConfigAndAddDependency(context, dataSourceServiceBuilder, dataSourceService, dsName, serviceTarget, operation, verificationHandler));\n\n        final String driverName = node.asString();\n        final ServiceName driverServiceName = ServiceName.JBOSS.append(\"jdbc-driver\", driverName.replaceAll(\"\\\\.\", \"_\"));\n        if (driverServiceName != null) {\n            dataSourceServiceBuilder.addDependency(driverServiceName, Driver.class,\n                    dataSourceService.getDriverInjector());\n        }\n\n        final DataSourceReferenceFactoryService referenceFactoryService = new DataSourceReferenceFactoryService();\n        final ServiceName referenceFactoryServiceName = DataSourceReferenceFactoryService.SERVICE_NAME_BASE\n                .append(dsName);\n        final ServiceBuilder<?> referenceBuilder = serviceTarget.addService(referenceFactoryServiceName,\n                referenceFactoryService).addDependency(dataSourceServiceName, DataSource.class,\n                referenceFactoryService.getDataSourceInjector());\n\n        final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(dsName);\n        final BinderService binderService = new BinderService(bindInfo.getBindName());\n        final ServiceBuilder<?> binderBuilder = serviceTarget\n                .addService(bindInfo.getBinderServiceName(), binderService)\n                .addDependency(referenceFactoryServiceName, ManagedReferenceFactory.class, binderService.getManagedObjectInjector())\n                .addDependency(bindInfo.getParentContextServiceName(), ServiceBasedNamingStore.class, binderService.getNamingStoreInjector()).addListener(new AbstractServiceListener<Object>() {\n                    public void transition(final ServiceController<? extends Object> controller, final ServiceController.Transition transition) {\n                        switch (transition) {\n                            case STARTING_to_UP: {\n                                SUBSYSTEM_DATASOURCES_LOGGER.boundDataSource(dsName);\n                                break;\n                            }\n                            case START_REQUESTED_to_DOWN: {\n                                SUBSYSTEM_DATASOURCES_LOGGER.unboundDataSource(dsName);\n                                break;\n                            }\n                            case REMOVING_to_REMOVED: {\n                                SUBSYSTEM_DATASOURCES_LOGGER.debugf(\"Removed JDBC Data-source [%s]\", dsName);\n                                break;\n                            }\n                        }\n                    }\n                });\n\n        if (enabled) {\n            dataSourceServiceBuilder.setInitialMode(ServiceController.Mode.ACTIVE)\n                    .addListener(verificationHandler);\n            referenceBuilder.setInitialMode(ServiceController.Mode.ACTIVE)\n                    .addListener(verificationHandler);\n            binderBuilder.setInitialMode(ServiceController.Mode.ACTIVE)\n                    .addListener(verificationHandler);\n        } else {\n            dataSourceServiceBuilder.setInitialMode(ServiceController.Mode.NEVER);\n            referenceBuilder.setInitialMode(ServiceController.Mode.NEVER);\n            binderBuilder.setInitialMode(ServiceController.Mode.NEVER);\n        }\n        controllers.add(dataSourceServiceBuilder.install());\n        controllers.add(referenceBuilder.install());\n        controllers.add(binderBuilder.install());\n    }","id":2512,"modified_method":"protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model, final ServiceVerificationHandler verificationHandler, final List<ServiceController<?>> controllers) throws OperationFailedException {\n\n        final ModelNode address = operation.require(OP_ADDR);\n        final String dsName = PathAddress.pathAddress(address).getLastElement().getValue();\n        final String jndiName = operation.hasDefined(JNDINAME.getName()) ? operation.get(JNDINAME.getName()).asString() : dsName;\n\n\n        final ServiceTarget serviceTarget = context.getServiceTarget();\n\n        boolean enabled = false;\n                //!operation.hasDefined(ENABLED.getName()) || operation.get(ENABLED.getName()).asBoolean();\n\n        ModelNode node = operation.require(DATASOURCE_DRIVER.getName());\n\n\n        AbstractDataSourceService dataSourceService = createDataSourceService(dsName);\n\n        final ServiceName dataSourceServiceName = AbstractDataSourceService.SERVICE_NAME_BASE.append(dsName);\n        final ServiceBuilder<?> dataSourceServiceBuilder = serviceTarget\n                .addService(dataSourceServiceName, dataSourceService)\n                .addDependency(ConnectorServices.TRANSACTION_INTEGRATION_SERVICE, TransactionIntegration.class,\n                        dataSourceService.getTransactionIntegrationInjector())\n                .addDependency(ConnectorServices.MANAGEMENT_REPOSISTORY_SERVICE, ManagementRepository.class,\n                        dataSourceService.getmanagementRepositoryInjector())\n                .addDependency(SubjectFactoryService.SERVICE_NAME, SubjectFactory.class,\n                        dataSourceService.getSubjectFactoryInjector())\n                .addDependency(ConnectorServices.JDBC_DRIVER_REGISTRY_SERVICE, DriverRegistry.class,\n                        dataSourceService.getDriverRegistryInjector()).addDependency(NamingService.SERVICE_NAME);\n\n        startConfigAndAddDependency(dataSourceServiceBuilder, dataSourceService, dsName, serviceTarget, operation, verificationHandler);\n\n        final String driverName = node.asString();\n        final ServiceName driverServiceName = ServiceName.JBOSS.append(\"jdbc-driver\", driverName.replaceAll(\"\\\\.\", \"_\"));\n        if (driverServiceName != null) {\n            dataSourceServiceBuilder.addDependency(driverServiceName, Driver.class,\n                    dataSourceService.getDriverInjector());\n        }\n\n        dataSourceServiceBuilder.setInitialMode(ServiceController.Mode.NEVER);\n\n        controllers.add(dataSourceServiceBuilder.install());\n\n    }","commit_id":"c7bbeeea7b05de5b5e7a60ddc46117a38f6284d9","url":"https://github.com/wildfly/wildfly"},{"original_method":"static void populateAddModel(final ModelNode existingModel, final ModelNode newModel,\n            final String connectionPropertiesProp, final SimpleAttributeDefinition[] attributes) {\n        if (existingModel.hasDefined(connectionPropertiesProp)) {\n\n            for (Property property : existingModel.get(connectionPropertiesProp).asPropertyList()) {\n                newModel.get(connectionPropertiesProp, property.getName()).set(property.getValue().asString());\n            }\n        }\n        for (final SimpleAttributeDefinition attribute : attributes) {\n            if (existingModel.hasDefined(attribute.getName())) {\n                newModel.get(attribute.getName()).set(existingModel.get(attribute.getName()));\n            }\n        }\n        newModel.get(ENABLED.getName()).set(false);\n\n    }","id":2513,"modified_method":"static void populateAddModel(final ModelNode operation, final ModelNode modelNode,\n            final String connectionPropertiesProp, final SimpleAttributeDefinition[] attributes) throws OperationFailedException {\n        if (operation.hasDefined(connectionPropertiesProp)) {\n\n            for (Property property : operation.get(connectionPropertiesProp).asPropertyList()) {\n                modelNode.get(connectionPropertiesProp, property.getName()).set(property.getValue().asString());\n            }\n        }\n        for (final SimpleAttributeDefinition attribute : attributes) {\n            attribute.validateAndSet(operation, modelNode);\n        }\n        modelNode.get(ENABLED.getName()).set(false);\n\n    }","commit_id":"c7bbeeea7b05de5b5e7a60ddc46117a38f6284d9","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) {\n\n        final ServiceRegistry registry = context.getServiceRegistry(true);\n        final ModelNode address = operation.require(OP_ADDR);\n        final String dsName = PathAddress.pathAddress(address).getLastElement().getValue();\n\n        final ServiceName binderServiceName = ContextNames.bindInfoFor(dsName).getBinderServiceName();\n        final ServiceController<?> binderController = registry.getService(binderServiceName);\n        if (binderController != null) {\n            context.removeService(binderServiceName);\n        }\n\n        final ServiceName referenceFactoryServiceName = DataSourceReferenceFactoryService.SERVICE_NAME_BASE\n                .append(dsName);\n        final ServiceController<?> referenceFactoryController = registry.getService(referenceFactoryServiceName);\n        if (referenceFactoryController != null) {\n            context.removeService(referenceFactoryServiceName);\n        }\n\n        final ServiceName dataSourceConfigServiceName = DataSourceConfigService.SERVICE_NAME_BASE.append(dsName);\n        final ServiceController<?> dataSourceConfigController = registry.getService(dataSourceConfigServiceName);\n        if (dataSourceConfigController != null) {\n            context.removeService(dataSourceConfigServiceName);\n        }\n\n        final ServiceName xaDataSourceConfigServiceName = XADataSourceConfigService.SERVICE_NAME_BASE\n                .append(dsName);\n        final ServiceController<?> xaDataSourceConfigController = registry\n                .getService(xaDataSourceConfigServiceName);\n        if (xaDataSourceConfigController != null) {\n            context.removeService(xaDataSourceConfigServiceName);\n        }\n\n        final ServiceName dataSourceServiceName = AbstractDataSourceService.SERVICE_NAME_BASE.append(dsName);\n        final ServiceController<?> dataSourceController = registry.getService(dataSourceServiceName);\n        if (dataSourceController != null) {\n            context.removeService(dataSourceServiceName);\n        }\n\n    }","id":2514,"modified_method":"protected void performRuntime(OperationContext context, ModelNode operation, ModelNode model) {\n\n        final ServiceRegistry registry = context.getServiceRegistry(true);\n        final ModelNode address = operation.require(OP_ADDR);\n        final String dsName = PathAddress.pathAddress(address).getLastElement().getValue();\n        final String jndiName = model.get(JNDINAME.getName()).asString();\n\n        final ServiceName binderServiceName = ContextNames.bindInfoFor(jndiName).getBinderServiceName();\n        final ServiceController<?> binderController = registry.getService(binderServiceName);\n        if (binderController != null) {\n            context.removeService(binderServiceName);\n        }\n\n        final ServiceName referenceFactoryServiceName = DataSourceReferenceFactoryService.SERVICE_NAME_BASE\n                .append(dsName);\n        final ServiceController<?> referenceFactoryController = registry.getService(referenceFactoryServiceName);\n        if (referenceFactoryController != null) {\n            context.removeService(referenceFactoryServiceName);\n        }\n\n        final ServiceName dataSourceConfigServiceName = DataSourceConfigService.SERVICE_NAME_BASE.append(dsName);\n        final ServiceName xaDataSourceConfigServiceName = XADataSourceConfigService.SERVICE_NAME_BASE\n                        .append(dsName);\n        final List<ServiceName> serviceNames = registry.getServiceNames();\n\n\n        for (ServiceName name : serviceNames) {\n            if (dataSourceConfigServiceName.isParentOf(name) && !dataSourceConfigServiceName.equals(name)) {\n                context.removeService(name);\n            }\n            if (xaDataSourceConfigServiceName.isParentOf(name) && !xaDataSourceConfigServiceName.equals(name)) {\n                context.removeService(name);\n            }\n        }\n\n\n        final ServiceController<?> dataSourceConfigController = registry.getService(dataSourceConfigServiceName);\n        if (dataSourceConfigController != null) {\n            context.removeService(dataSourceConfigServiceName);\n        }\n\n        final ServiceController<?> xaDataSourceConfigController = registry\n                .getService(xaDataSourceConfigServiceName);\n        if (xaDataSourceConfigController != null) {\n            context.removeService(xaDataSourceConfigServiceName);\n        }\n\n        final ServiceName dataSourceServiceName = AbstractDataSourceService.SERVICE_NAME_BASE.append(dsName);\n        final ServiceController<?> dataSourceController = registry.getService(dataSourceServiceName);\n        if (dataSourceController != null) {\n            context.removeService(dataSourceServiceName);\n        }\n\n    }","commit_id":"c7bbeeea7b05de5b5e7a60ddc46117a38f6284d9","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void performRuntime(OperationContext context, ModelNode operation, ModelNode recoveryEnvModel,\n                                  ServiceVerificationHandler verificationHandler,\n                                  List<ServiceController<?>> serviceControllers) throws OperationFailedException {\n\n        final String configPropertyValue = CONNECTION_PROPERTY_VALUE.resolveModelAttribute(context, recoveryEnvModel).asString();\n        final ModelNode address = operation.require(OP_ADDR);\n        PathAddress path = PathAddress.pathAddress(address);\n        final String jndiName = path.getElement(path.size() - 2).getValue();\n        final String configPropertyName = PathAddress.pathAddress(address).getLastElement().getValue();\n\n        ServiceName serviceName = DataSourceConfigService.SERVICE_NAME_BASE.append(jndiName).append(configPropertyName);\n        ServiceName dsServiceName = DataSourceConfigService.SERVICE_NAME_BASE.append(jndiName);\n\n        final ServiceRegistry registry = context.getServiceRegistry(true);\n\n\n        final ServiceName dataSourceConfigServiceName = DataSourceConfigService.SERVICE_NAME_BASE\n                .append(jndiName);\n        final ServiceController<?> dataSourceConfigController = registry\n                .getService(dataSourceConfigServiceName);\n        if (dataSourceConfigController != null && !((DataSource) dataSourceConfigController.getValue()).isEnabled()) {\n\n\n            final ServiceTarget serviceTarget = context.getServiceTarget();\n\n            final ConnectionPropertiesService service = new ConnectionPropertiesService(configPropertyName, configPropertyValue);\n            serviceTarget.addService(serviceName, service).setInitialMode(ServiceController.Mode.ACTIVE)\n                    .addDependency(dsServiceName, ModifiableDataSource.class, service.getDSInjector())\n                    .addListener(verificationHandler).install();\n\n            context.addStep(verificationHandler, OperationContext.Stage.VERIFY);\n        } else {\n            context.reloadRequired();\n        }\n    }","id":2515,"modified_method":"@Override\n    protected void performRuntime(OperationContext context, ModelNode operation, ModelNode recoveryEnvModel,\n                                  ServiceVerificationHandler verificationHandler,\n                                  List<ServiceController<?>> serviceControllers) throws OperationFailedException {\n\n        final String configPropertyValue = CONNECTION_PROPERTY_VALUE.resolveModelAttribute(context, recoveryEnvModel).asString();\n        final ModelNode address = operation.require(OP_ADDR);\n        PathAddress path = PathAddress.pathAddress(address);\n        final String jndiName = path.getElement(path.size() - 2).getValue();\n        final String configPropertyName = PathAddress.pathAddress(address).getLastElement().getValue();\n\n        ServiceName serviceName = DataSourceConfigService.SERVICE_NAME_BASE.append(jndiName).append(configPropertyName);\n        ServiceName dsServiceName = DataSourceConfigService.SERVICE_NAME_BASE.append(jndiName);\n\n        final ServiceRegistry registry = context.getServiceRegistry(true);\n\n\n        final ServiceName dataSourceConfigServiceName = DataSourceConfigService.SERVICE_NAME_BASE\n                .append(jndiName);\n        final ServiceController<?> dataSourceConfigController = registry\n                .getService(dataSourceConfigServiceName);\n        if (dataSourceConfigController == null || !((DataSource) dataSourceConfigController.getValue()).isEnabled()) {\n\n\n            final ServiceTarget serviceTarget = context.getServiceTarget();\n\n            final ConnectionPropertiesService service = new ConnectionPropertiesService(configPropertyName, configPropertyValue);\n            serviceTarget.addService(serviceName, service).setInitialMode(ServiceController.Mode.NEVER)\n                    .addDependency(dsServiceName, ModifiableDataSource.class, service.getDSInjector())\n                    .addListener(verificationHandler).install();\n\n            context.addStep(verificationHandler, OperationContext.Stage.VERIFY);\n        } else {\n            context.reloadRequired();\n        }\n    }","commit_id":"c7bbeeea7b05de5b5e7a60ddc46117a38f6284d9","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected ServiceController<?> startConfigAndAddDependency(OperationContext context, ServiceBuilder<?> dataSourceServiceBuilder,\n            AbstractDataSourceService dataSourceService, String jndiName, ServiceTarget serviceTarget, final ModelNode operation, final ServiceVerificationHandler serviceVerificationHandler)\n            throws OperationFailedException {\n        final ModifiableDataSource dataSourceConfig;\n        try {\n            dataSourceConfig = from(context, operation);\n        } catch (ValidateException e) {\n            e.printStackTrace();\n            throw new OperationFailedException(e, new ModelNode().set(MESSAGES.failedToCreate(\"DataSource\", operation, e.getLocalizedMessage())));\n        }\n        final ServiceName dataSourceCongServiceName = DataSourceConfigService.SERVICE_NAME_BASE.append(jndiName);\n        final DataSourceConfigService configService = new DataSourceConfigService(dataSourceConfig);\n\n        ServiceController<?> svcController = serviceTarget.addService(dataSourceCongServiceName, configService)\n                .addListener(serviceVerificationHandler)\n                .install();\n\n        dataSourceServiceBuilder.addDependency(dataSourceCongServiceName, ModifiableDataSource.class,\n                ((LocalDataSourceService) dataSourceService).getDataSourceConfigInjector());\n\n        return svcController;\n    }","id":2516,"modified_method":"@Override\n    protected void startConfigAndAddDependency(ServiceBuilder<?> dataSourceServiceBuilder,\n            AbstractDataSourceService dataSourceService, String jndiName, ServiceTarget serviceTarget, final ModelNode operation, final ServiceVerificationHandler handler)\n            throws OperationFailedException {\n\n        final ServiceName dataSourceCongServiceName = DataSourceConfigService.SERVICE_NAME_BASE.append(jndiName);\n\n        dataSourceServiceBuilder.addDependency(dataSourceCongServiceName, ModifiableDataSource.class,\n                ((LocalDataSourceService) dataSourceService).getDataSourceConfigInjector());\n\n    }","commit_id":"c7bbeeea7b05de5b5e7a60ddc46117a38f6284d9","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void execute(OperationContext context, ModelNode operation) {\n\n        final ModelNode model = context.readResourceForUpdate(PathAddress.EMPTY_ADDRESS).getModel();\n        model.get(ENABLED).set(false);\n\n        if (context.getType() == OperationContext.Type.SERVER) {\n            context.addStep(new OperationStepHandler() {\n                public void execute(final OperationContext context, ModelNode operation) throws OperationFailedException {\n\n                    final ModelNode address = operation.require(OP_ADDR);\n                    final String dsName = PathAddress.pathAddress(address).getLastElement().getValue();\n\n                    final ServiceRegistry registry = context.getServiceRegistry(true);\n\n                    final ServiceName dataSourceServiceName = AbstractDataSourceService.SERVICE_NAME_BASE.append(dsName);\n                    final ServiceController<?> dataSourceController = registry.getService(dataSourceServiceName);\n                    if (dataSourceController != null) {\n                        if (ServiceController.State.UP.equals(dataSourceController.getState())) {\n                            dataSourceController.setMode(ServiceController.Mode.NEVER);\n                        } else {\n                            throw new OperationFailedException(new ModelNode().set(MESSAGES.serviceNotEnabled(\"Data-source\", dsName)));\n                        }\n                    } else {\n                        throw new OperationFailedException(new ModelNode().set(MESSAGES.serviceNotAvailable(\"Data-source\", dsName)));\n                    }\n\n                    final ServiceName referenceServiceName = DataSourceReferenceFactoryService.SERVICE_NAME_BASE.append(dsName);\n                    final ServiceController<?> referenceController = registry.getService(referenceServiceName);\n                    if (referenceController != null && ServiceController.State.UP.equals(referenceController.getState())) {\n                        referenceController.setMode(ServiceController.Mode.NEVER);\n                    }\n\n                    final ServiceName binderServiceName = ContextNames.bindInfoFor(dsName).getBinderServiceName();\n                    final ServiceController<?> binderController = registry.getService(binderServiceName);\n                    if (binderController != null && ServiceController.State.UP.equals(binderController.getState())) {\n                        binderController.setMode(ServiceController.Mode.NEVER);\n                    }\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n        context.completeStep();\n    }","id":2517,"modified_method":"public void execute(OperationContext context, ModelNode operation) {\n\n        final ModelNode model = context.readResourceForUpdate(PathAddress.EMPTY_ADDRESS).getModel();\n        model.get(ENABLED).set(false);\n\n        if (context.getType() == OperationContext.Type.SERVER) {\n            context.addStep(new OperationStepHandler() {\n                public void execute(final OperationContext context, ModelNode operation) throws OperationFailedException {\n\n                    final ModelNode address = operation.require(OP_ADDR);\n                    final String dsName = PathAddress.pathAddress(address).getLastElement().getValue();\n                    final String jndiName = model.get(JNDINAME.getName()).asString();\n\n                    final ServiceRegistry registry = context.getServiceRegistry(true);\n\n                    final ServiceName dataSourceServiceName = AbstractDataSourceService.SERVICE_NAME_BASE.append(dsName);\n                    final ServiceController<?> dataSourceController = registry.getService(dataSourceServiceName);\n                    if (dataSourceController != null) {\n                        if (ServiceController.State.UP.equals(dataSourceController.getState())) {\n                            dataSourceController.setMode(ServiceController.Mode.NEVER);\n                        } else {\n                            throw new OperationFailedException(new ModelNode().set(MESSAGES.serviceNotEnabled(\"Data-source\", dsName)));\n                        }\n                    } else {\n                        throw new OperationFailedException(new ModelNode().set(MESSAGES.serviceNotAvailable(\"Data-source\", dsName)));\n                    }\n\n                    final ServiceName referenceServiceName = DataSourceReferenceFactoryService.SERVICE_NAME_BASE.append(dsName);\n                    final ServiceController<?> referenceController = registry.getService(referenceServiceName);\n                    if (referenceController != null ) {\n                        referenceController.setMode(ServiceController.Mode.REMOVE);\n                    }\n\n                    final ServiceName binderServiceName = ContextNames.bindInfoFor(jndiName).getBinderServiceName();\n\n                    final ServiceController<?> binderController = registry.getService(binderServiceName);\n                    if (binderController != null ) {\n                        binderController.setMode(ServiceController.Mode.REMOVE);\n                    }\n\n                    final ServiceName dataSourceConfigServiceName = DataSourceConfigService.SERVICE_NAME_BASE.append(dsName);\n                    final ServiceController<?> dataSourceConfigController = registry.getService(dataSourceConfigServiceName);\n\n\n                    final List<ServiceName> serviceNames = registry.getServiceNames();\n\n\n                    final ServiceName xaDataSourceConfigServiceName = XADataSourceConfigService.SERVICE_NAME_BASE.append(dsName);\n                    final ServiceController<?> xaDataSourceConfigController = registry.getService(xaDataSourceConfigServiceName);\n\n\n                    for (ServiceName name : serviceNames) {\n                        if (dataSourceConfigServiceName.isParentOf(name) && !dataSourceConfigServiceName.equals(name)) {\n                            final ServiceController<?> connProperyController = registry.getService(name);\n\n                            if (connProperyController != null) {\n                                if (ServiceController.State.UP.equals(connProperyController.getState())) {\n                                    connProperyController.setMode(ServiceController.Mode.NEVER);\n                                } else {\n                                    throw new OperationFailedException(new ModelNode().set(MESSAGES.serviceAlreadyStarted(\"Data-source.connectionProperty\", name)));\n                                }\n                            } else {\n                                throw new OperationFailedException(new ModelNode().set(MESSAGES.serviceNotAvailable(\"Data-source.connectionProperty\", name)));\n                            }\n                        }\n                        if (xaDataSourceConfigServiceName.isParentOf(name) && !xaDataSourceConfigServiceName.equals(name)) {\n                            final ServiceController<?> xaConfigProperyController = registry.getService(name);\n\n                            if (xaConfigProperyController != null) {\n                                if (ServiceController.State.UP.equals(xaConfigProperyController.getState())) {\n                                    xaConfigProperyController.setMode(ServiceController.Mode.NEVER);\n                                } else {\n                                    throw new OperationFailedException(new ModelNode().set(MESSAGES.serviceAlreadyStarted(\"Data-source.xa-config-property\", name)));\n                                }\n                            } else {\n                                throw new OperationFailedException(new ModelNode().set(MESSAGES.serviceNotAvailable(\"Data-source.xa-config-property\", name)));\n                            }\n                        }\n                    }\n\n\n                    if (xaDataSourceConfigController != null && ServiceController.State.UP.equals(xaDataSourceConfigController.getState())) {\n                        xaDataSourceConfigController.setMode(ServiceController.Mode.REMOVE);\n                    }\n\n                    if (dataSourceConfigController != null && ServiceController.State.UP.equals(dataSourceConfigController.getState())) {\n                        dataSourceConfigController.setMode(ServiceController.Mode.REMOVE);\n                    }\n\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n        context.completeStep();\n    }","commit_id":"c7bbeeea7b05de5b5e7a60ddc46117a38f6284d9","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void execute(OperationContext context, ModelNode operation) {\n\n        final ModelNode model = context.readResourceForUpdate(PathAddress.EMPTY_ADDRESS).getModel();\n\n        // On boot we invoke this op but we may not want to store a default value the model\n        boolean persist = operation.get(PERSISTENT).asBoolean(true);\n        if (persist) {\n            model.get(ENABLED).set(true);\n        } else if (model.hasDefined(ENABLED) && !model.get(ENABLED).asBoolean()) {\n            // Just clear the \"false\" value that gets stored by default\n            model.get(ENABLED).set(new ModelNode());\n        }\n\n        if (context.getType() == OperationContext.Type.SERVER) {\n            context.addStep(new OperationStepHandler() {\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n                    final ModelNode address = operation.require(OP_ADDR);\n                    final String dsName = PathAddress.pathAddress(address).getLastElement().getValue();\n\n                    final ServiceRegistry registry = context.getServiceRegistry(true);\n\n                    if (isXa()) {\n                        final ServiceName dataSourceConfigServiceName = XADataSourceConfigService.SERVICE_NAME_BASE\n                                .append(dsName);\n                        final ServiceController<?> dataSourceConfigController = registry\n                                .getService(dataSourceConfigServiceName);\n                        if (dataSourceConfigController != null) {\n                            ((XaDataSource) dataSourceConfigController.getValue()).setEnabled(true);\n\n                        }\n                    } else {\n                        final ServiceName dataSourceConfigServiceName = DataSourceConfigService.SERVICE_NAME_BASE\n                                .append(dsName);\n                        final ServiceController<?> dataSourceConfigController = registry\n                                .getService(dataSourceConfigServiceName);\n                        if (dataSourceConfigController != null) {\n                            ((DataSource) dataSourceConfigController.getValue()).setEnabled(true);\n\n                        }\n                    }\n\n                    final ServiceName dataSourceServiceName = AbstractDataSourceService.SERVICE_NAME_BASE.append(dsName);\n                    final ServiceController<?> dataSourceController = registry.getService(dataSourceServiceName);\n                    if (dataSourceController != null) {\n                        if (!ServiceController.State.UP.equals(dataSourceController.getState())) {\n                            dataSourceController.setMode(ServiceController.Mode.ACTIVE);\n                        } else {\n                            throw new OperationFailedException(new ModelNode().set(MESSAGES.serviceAlreadyStarted(\"Data-source\", dsName)));\n                        }\n                    } else {\n                        throw new OperationFailedException(new ModelNode().set(MESSAGES.serviceNotAvailable(\"Data-source\", dsName)));\n                    }\n\n                    final ServiceName referenceServiceName = DataSourceReferenceFactoryService.SERVICE_NAME_BASE.append(dsName);\n                    final ServiceController<?> referenceController = registry.getService(referenceServiceName);\n                    if (referenceController != null && !ServiceController.State.UP.equals(referenceController.getState())) {\n                        referenceController.setMode(ServiceController.Mode.ACTIVE);\n                    }\n\n                    final ServiceName binderServiceName = ContextNames.bindInfoFor(dsName).getBinderServiceName();\n                    final ServiceController<?> binderController = registry.getService(binderServiceName);\n                    if (binderController != null && !ServiceController.State.UP.equals(binderController.getState())) {\n                        binderController.setMode(ServiceController.Mode.ACTIVE);\n                    }\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n        context.completeStep();\n    }","id":2518,"modified_method":"public void execute(OperationContext context, ModelNode operation) {\n\n        final ModelNode model = context.readResourceForUpdate(PathAddress.EMPTY_ADDRESS).getModel();\n\n        // On boot we invoke this op but we may not want to store a default value the model\n        boolean persist = operation.get(PERSISTENT).asBoolean(true);\n        if (persist) {\n            model.get(ENABLED).set(true);\n        } else if (model.hasDefined(ENABLED) && !model.get(ENABLED).asBoolean()) {\n            // Just clear the \"false\" value that gets stored by default\n            model.get(ENABLED).set(new ModelNode());\n        }\n\n        if (context.getType() == OperationContext.Type.SERVER) {\n\n            context.addStep(new OperationStepHandler() {\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    final ServiceTarget serviceTarget = context.getServiceTarget();\n                    final ServiceVerificationHandler verificationHandler = new ServiceVerificationHandler();\n\n                    final ModelNode address = operation.require(OP_ADDR);\n                    final String dsName = PathAddress.pathAddress(address).getLastElement().getValue();\n                    final String jndiName = model.get(JNDINAME.getName()).asString();\n                    final ServiceRegistry registry = context.getServiceRegistry(true);\n\n                    final List<ServiceName> serviceNames = registry.getServiceNames();\n\n\n                    if (isXa()) {\n                        final ModifiableXaDataSource dataSourceConfig;\n                        try {\n                            dataSourceConfig = xaFrom(context, model);\n                        } catch (ValidateException e) {\n                            throw new OperationFailedException(e, new ModelNode().set(MESSAGES.failedToCreate(\"XaDataSource\", operation, e.getLocalizedMessage())));\n                        }\n                        final ServiceName xaDataSourceConfigServiceName = XADataSourceConfigService.SERVICE_NAME_BASE.append(dsName);\n                        final XADataSourceConfigService configService = new XADataSourceConfigService(dataSourceConfig);\n\n                        final ServiceBuilder<?> builder = serviceTarget.addService(xaDataSourceConfigServiceName, configService);\n                        builder.addListener(verificationHandler);\n\n                        for (ServiceName name : serviceNames) {\n                            if (xaDataSourceConfigServiceName.isParentOf(name) && !xaDataSourceConfigServiceName.equals(name)) {\n                                final ServiceController<?> xaConfigProperyController = registry.getService(name);\n\n                                if (xaConfigProperyController != null) {\n                                    if (! ServiceController.State.UP.equals(xaConfigProperyController.getState())) {\n                                        xaConfigProperyController.setMode(ServiceController.Mode.ACTIVE);\n                                    } else {\n                                        throw new OperationFailedException(new ModelNode().set(MESSAGES.serviceAlreadyStarted(\"Data-source.xa-config-property\", name)));\n                                    }\n                                } else {\n                                    throw new OperationFailedException(new ModelNode().set(MESSAGES.serviceNotAvailable(\"Data-source.xa-config-property\", name)));\n                                }\n                            }\n                        }\n                        builder.install();\n\n                    } else {\n\n                        final ModifiableDataSource dataSourceConfig;\n                        try {\n                            dataSourceConfig = from(context, model);\n                        } catch (ValidateException e) {\n                            e.printStackTrace();\n                            throw new OperationFailedException(e, new ModelNode().set(MESSAGES.failedToCreate(\"DataSource\", operation, e.getLocalizedMessage())));\n                        }\n                        final ServiceName dataSourceCongServiceName = DataSourceConfigService.SERVICE_NAME_BASE.append(dsName);\n                        final DataSourceConfigService configService = new DataSourceConfigService(dataSourceConfig);\n\n                        final ServiceBuilder<?> builder = serviceTarget.addService(dataSourceCongServiceName, configService);\n                        builder.addListener(verificationHandler);\n\n\n\n                        for (ServiceName name : serviceNames) {\n                            if (dataSourceCongServiceName.isParentOf(name) && !dataSourceCongServiceName.equals(name)) {\n                                final ServiceController<?> dataSourceController = registry.getService(name);\n\n                                if (dataSourceController != null) {\n                                    if (!ServiceController.State.UP.equals(dataSourceController.getState())) {\n                                        dataSourceController.setMode(ServiceController.Mode.ACTIVE);\n                                    } else {\n                                        throw new OperationFailedException(new ModelNode().set(MESSAGES.serviceAlreadyStarted(\"Data-source.connectionProperty\", name)));\n                                    }\n                                } else {\n                                    throw new OperationFailedException(new ModelNode().set(MESSAGES.serviceNotAvailable(\"Data-source.connectionProperty\", name)));\n                                }\n                            }\n                        }\n                        builder.install();\n\n\n                    }\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n\n            context.addStep(new OperationStepHandler() {\n                public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n                    final ServiceTarget serviceTarget = context.getServiceTarget();\n                    final ServiceVerificationHandler verificationHandler = new ServiceVerificationHandler();\n\n                    final ModelNode address = operation.require(OP_ADDR);\n                    final String dsName = PathAddress.pathAddress(address).getLastElement().getValue();\n                    final String jndiName = model.get(JNDINAME.getName()).asString();\n                    final ServiceRegistry registry = context.getServiceRegistry(true);\n\n                    final ServiceName dataSourceServiceName = AbstractDataSourceService.SERVICE_NAME_BASE.append(dsName);\n\n                    final List<ServiceName> serviceNames = registry.getServiceNames();\n\n\n                    final ServiceController<?> dataSourceController = registry.getService(dataSourceServiceName);\n\n                    if (dataSourceController != null) {\n                        if (!ServiceController.State.UP.equals(dataSourceController.getState())) {\n                            dataSourceController.setMode(ServiceController.Mode.ACTIVE);\n                        } else {\n                            throw new OperationFailedException(new ModelNode().set(MESSAGES.serviceAlreadyStarted(\"Data-source\", dsName)));\n                        }\n                    } else {\n                        throw new OperationFailedException(new ModelNode().set(MESSAGES.serviceNotAvailable(\"Data-source\", dsName)));\n                    }\n\n                    final DataSourceReferenceFactoryService referenceFactoryService = new DataSourceReferenceFactoryService();\n                    final ServiceName referenceFactoryServiceName = DataSourceReferenceFactoryService.SERVICE_NAME_BASE\n                            .append(dsName);\n                    final ServiceBuilder<?> referenceBuilder = serviceTarget.addService(referenceFactoryServiceName,\n                            referenceFactoryService).addDependency(dataSourceServiceName, javax.sql.DataSource.class,\n                            referenceFactoryService.getDataSourceInjector());\n\n                    referenceBuilder.install();\n\n                    final ContextNames.BindInfo bindInfo = ContextNames.bindInfoFor(jndiName);\n                    final BinderService binderService = new BinderService(bindInfo.getBindName());\n                    final ServiceBuilder<?> binderBuilder = serviceTarget\n                            .addService(bindInfo.getBinderServiceName(), binderService)\n                            .addDependency(referenceFactoryServiceName, ManagedReferenceFactory.class, binderService.getManagedObjectInjector())\n                            .addDependency(bindInfo.getParentContextServiceName(), ServiceBasedNamingStore.class, binderService.getNamingStoreInjector()).addListener(new AbstractServiceListener<Object>() {\n                                public void transition(final ServiceController<? extends Object> controller, final ServiceController.Transition transition) {\n                                    switch (transition) {\n                                        case STARTING_to_UP: {\n                                            SUBSYSTEM_DATASOURCES_LOGGER.boundDataSource(jndiName);\n                                            break;\n                                        }\n                                        case START_REQUESTED_to_DOWN: {\n                                            SUBSYSTEM_DATASOURCES_LOGGER.unboundDataSource(jndiName);\n                                            break;\n                                        }\n                                        case REMOVING_to_REMOVED: {\n                                            SUBSYSTEM_DATASOURCES_LOGGER.debugf(\"Removed JDBC Data-source [%s]\", jndiName);\n                                            break;\n                                        }\n                                    }\n                                }\n                            });\n                    binderBuilder.setInitialMode(ServiceController.Mode.ACTIVE)\n                            .addListener(verificationHandler);\n                    binderBuilder.install();\n\n                    context.completeStep();\n                }\n            }, OperationContext.Stage.RUNTIME);\n        }\n        context.completeStep();\n    }","commit_id":"c7bbeeea7b05de5b5e7a60ddc46117a38f6284d9","url":"https://github.com/wildfly/wildfly"},{"original_method":"static ModifiableDataSource from(final OperationContext operationContext, final ModelNode dataSourceNode) throws ValidateException {\n        final Map<String, String> connectionProperties= Collections.emptyMap();\n\n        final String connectionUrl = getStringIfSetOrGetDefault(dataSourceNode, CONNECTION_URL, null);\n        final String driverClass = getStringIfSetOrGetDefault(dataSourceNode, DRIVER_CLASS, null);\n        final String dataSourceClass = getStringIfSetOrGetDefault(dataSourceNode, DATASOURCE_CLASS, null);\n        final String jndiName = getStringIfSetOrGetDefault(dataSourceNode, JNDINAME, null);\n        final String driver = getStringIfSetOrGetDefault(dataSourceNode, DATASOURCE_DRIVER, null);\n        final String newConnectionSql = getStringIfSetOrGetDefault(dataSourceNode, NEW_CONNECTION_SQL, null);\n        final String poolName = getStringIfSetOrGetDefault(dataSourceNode, POOLNAME, null);\n        final String urlDelimiter = getStringIfSetOrGetDefault(dataSourceNode, URL_DELIMITER, null);\n        final String urlSelectorStrategyClassName = getStringIfSetOrGetDefault(dataSourceNode,\n                URL_SELECTOR_STRATEGY_CLASS_NAME, null);\n        final boolean useJavaContext = getBooleanIfSetOrGetDefault(dataSourceNode, USE_JAVA_CONTEXT, Defaults.USE_JAVA_CONTEXT);\n        final boolean enabled = false;//getBooleanIfSetOrGetDefault(dataSourceNode, ENABLED, Defaults.ENABLED);\n        final boolean jta = getBooleanIfSetOrGetDefault(dataSourceNode, JTA, Defaults.JTA);\n        final Integer maxPoolSize = getIntIfSetOrGetDefault(dataSourceNode, MAX_POOL_SIZE, Defaults.MAX_POOL_SIZE);\n        final Integer minPoolSize = getIntIfSetOrGetDefault(dataSourceNode, MIN_POOL_SIZE, Defaults.MIN_POOL_SIZE);\n        final boolean prefill = getBooleanIfSetOrGetDefault(dataSourceNode, POOL_PREFILL, Defaults.PREFILL);\n        final boolean useStrictMin = getBooleanIfSetOrGetDefault(dataSourceNode, POOL_USE_STRICT_MIN, Defaults.USE_STRICT_MIN);\n        final FlushStrategy flushStrategy = dataSourceNode.hasDefined(POOL_FLUSH_STRATEGY.getName()) ? FlushStrategy.forName(dataSourceNode\n                .get(POOL_FLUSH_STRATEGY.getName()).asString()) : Defaults.FLUSH_STRATEGY;\n\n        final CommonPool pool = new CommonPoolImpl(minPoolSize, maxPoolSize, prefill, useStrictMin, flushStrategy);\n\n        final String username = getStringIfSetOrGetDefault(dataSourceNode, USERNAME, null);\n\n        final String password = getResolvedStringIfSetOrGetDefault(operationContext, dataSourceNode, PASSWORD, null);\n        final String securityDomain = getStringIfSetOrGetDefault(dataSourceNode, SECURITY_DOMAIN, null);\n\n        final Extension reauthPlugin = extractExtension(dataSourceNode, REAUTHPLUGIN_CLASSNAME, REAUTHPLUGIN_PROPERTIES);\n\n        final DsSecurity security = new DsSecurityImpl(username, password, securityDomain, reauthPlugin);\n\n        final boolean sharePreparedStatements = getBooleanIfSetOrGetDefault(dataSourceNode, SHAREPREPAREDSTATEMENTS, Defaults.SHARE_PREPARED_STATEMENTS);\n        final Long preparedStatementsCacheSize = getLongIfSetOrGetDefault(dataSourceNode, PREPAREDSTATEMENTSCACHESIZE, null);\n        final Statement.TrackStatementsEnum trackStatements = dataSourceNode.hasDefined(TRACKSTATEMENTS.getName()) ? Statement.TrackStatementsEnum\n                .valueOf(dataSourceNode.get(TRACKSTATEMENTS.getName()).asString()) : Defaults.TRACK_STATEMENTS;\n        final Statement statement = new StatementImpl(sharePreparedStatements, preparedStatementsCacheSize, trackStatements);\n\n        final Integer allocationRetry = getIntIfSetOrGetDefault(dataSourceNode, ALLOCATION_RETRY, null);\n        final Long allocationRetryWaitMillis = getLongIfSetOrGetDefault(dataSourceNode, ALLOCATION_RETRY_WAIT_MILLIS, null);\n        final Long blockingTimeoutMillis = getLongIfSetOrGetDefault(dataSourceNode, BLOCKING_TIMEOUT_WAIT_MILLIS, null);\n        final Long idleTimeoutMinutes = getLongIfSetOrGetDefault(dataSourceNode, IDLETIMEOUTMINUTES, null);\n        final Long queryTimeout = getLongIfSetOrGetDefault(dataSourceNode, QUERYTIMEOUT, null);\n        final Integer xaResourceTimeout = getIntIfSetOrGetDefault(dataSourceNode, XA_RESOURCE_TIMEOUT, null);\n        final Long useTryLock = getLongIfSetOrGetDefault(dataSourceNode, USETRYLOCK, null);\n        final boolean setTxQuertTimeout = getBooleanIfSetOrGetDefault(dataSourceNode, SETTXQUERYTIMEOUT, Defaults.SET_TX_QUERY_TIMEOUT);\n        final TimeOut timeOut = new TimeOutImpl(blockingTimeoutMillis, idleTimeoutMinutes, allocationRetry,\n                allocationRetryWaitMillis, xaResourceTimeout, setTxQuertTimeout, queryTimeout, useTryLock);\n        final TransactionIsolation transactionIsolation = dataSourceNode.hasDefined(TRANSACTION_ISOLATION.getName()) ? TransactionIsolation\n                .valueOf(dataSourceNode.get(TRANSACTION_ISOLATION.getName()).asString()) : null;\n        final String checkValidConnectionSql = getStringIfSetOrGetDefault(dataSourceNode, CHECKVALIDCONNECTIONSQL, null);\n\n        final Extension exceptionSorter = extractExtension(dataSourceNode, EXCEPTIONSORTERCLASSNAME, EXCEPTIONSORTER_PROPERTIES);\n        final Extension staleConnectionChecker = extractExtension(dataSourceNode, STALECONNECTIONCHECKERCLASSNAME,\n                STALECONNECTIONCHECKER_PROPERTIES);\n        final Extension validConnectionChecker = extractExtension(dataSourceNode, VALIDCONNECTIONCHECKERCLASSNAME,\n                VALIDCONNECTIONCHECKER_PROPERTIES);\n\n        Long backgroundValidationMillis = getLongIfSetOrGetDefault(dataSourceNode, BACKGROUNDVALIDATIONMILLIS, null);\n        final boolean backgroundValidation = getBooleanIfSetOrGetDefault(dataSourceNode, BACKGROUNDVALIDATION, Defaults.BACKGROUND_VALIDATION);\n        boolean useFastFail = getBooleanIfSetOrGetDefault(dataSourceNode, USE_FAST_FAIL, Defaults.USE_FAST_FAIl);\n        final boolean validateOnMatch = getBooleanIfSetOrGetDefault(dataSourceNode, VALIDATEONMATCH, Defaults.VALIDATE_ON_MATCH);\n        final boolean spy = getBooleanIfSetOrGetDefault(dataSourceNode, SPY, Defaults.SPY);\n        final boolean useCcm = getBooleanIfSetOrGetDefault(dataSourceNode, USE_CCM, Defaults.USE_CCM);\n\n        final Validation validation = new ValidationImpl(backgroundValidation, backgroundValidationMillis, useFastFail,\n                validConnectionChecker, checkValidConnectionSql, validateOnMatch, staleConnectionChecker, exceptionSorter);\n\n        return new ModifiableDataSource(connectionUrl, driverClass, dataSourceClass, driver, transactionIsolation, connectionProperties, timeOut,\n                security, statement, validation, urlDelimiter, urlSelectorStrategyClassName, newConnectionSql, useJavaContext,\n                poolName, enabled, jndiName, spy, useCcm, jta, pool);\n    }","id":2519,"modified_method":"static ModifiableDataSource from(final OperationContext operationContext, final ModelNode dataSourceNode) throws ValidateException {\n        final Map<String, String> connectionProperties= Collections.emptyMap();\n\n        final String connectionUrl = getStringIfSetOrGetDefault(dataSourceNode, CONNECTION_URL, null);\n        final String driverClass = getStringIfSetOrGetDefault(dataSourceNode, DRIVER_CLASS, null);\n        final String dataSourceClass = getStringIfSetOrGetDefault(dataSourceNode, DATASOURCE_CLASS, null);\n        final String jndiName = getStringIfSetOrGetDefault(dataSourceNode, JNDINAME, null);\n        final String driver = getStringIfSetOrGetDefault(dataSourceNode, DATASOURCE_DRIVER, null);\n        final String newConnectionSql = getStringIfSetOrGetDefault(dataSourceNode, NEW_CONNECTION_SQL, null);\n        final String poolName = getStringIfSetOrGetDefault(dataSourceNode, POOLNAME, null);\n        final String urlDelimiter = getStringIfSetOrGetDefault(dataSourceNode, URL_DELIMITER, null);\n        final String urlSelectorStrategyClassName = getStringIfSetOrGetDefault(dataSourceNode,\n                URL_SELECTOR_STRATEGY_CLASS_NAME, null);\n        final boolean useJavaContext = getBooleanIfSetOrGetDefault(dataSourceNode, USE_JAVA_CONTEXT, Defaults.USE_JAVA_CONTEXT);\n        final boolean enabled = getBooleanIfSetOrGetDefault(dataSourceNode, ENABLED, Defaults.ENABLED);\n        final boolean jta = getBooleanIfSetOrGetDefault(dataSourceNode, JTA, Defaults.JTA);\n        final Integer maxPoolSize = getIntIfSetOrGetDefault(dataSourceNode, MAX_POOL_SIZE, Defaults.MAX_POOL_SIZE);\n        final Integer minPoolSize = getIntIfSetOrGetDefault(dataSourceNode, MIN_POOL_SIZE, Defaults.MIN_POOL_SIZE);\n        final boolean prefill = getBooleanIfSetOrGetDefault(dataSourceNode, POOL_PREFILL, Defaults.PREFILL);\n        final boolean useStrictMin = getBooleanIfSetOrGetDefault(dataSourceNode, POOL_USE_STRICT_MIN, Defaults.USE_STRICT_MIN);\n        final FlushStrategy flushStrategy = dataSourceNode.hasDefined(POOL_FLUSH_STRATEGY.getName()) ? FlushStrategy.forName(dataSourceNode\n                .get(POOL_FLUSH_STRATEGY.getName()).asString()) : Defaults.FLUSH_STRATEGY;\n\n        final CommonPool pool = new CommonPoolImpl(minPoolSize, maxPoolSize, prefill, useStrictMin, flushStrategy);\n\n        final String username = getStringIfSetOrGetDefault(dataSourceNode, USERNAME, null);\n\n        final String password = getResolvedStringIfSetOrGetDefault(operationContext, dataSourceNode, PASSWORD, null);\n        final String securityDomain = getStringIfSetOrGetDefault(dataSourceNode, SECURITY_DOMAIN, null);\n\n        final Extension reauthPlugin = extractExtension(dataSourceNode, REAUTHPLUGIN_CLASSNAME, REAUTHPLUGIN_PROPERTIES);\n\n        final DsSecurity security = new DsSecurityImpl(username, password, securityDomain, reauthPlugin);\n\n        final boolean sharePreparedStatements = getBooleanIfSetOrGetDefault(dataSourceNode, SHAREPREPAREDSTATEMENTS, Defaults.SHARE_PREPARED_STATEMENTS);\n        final Long preparedStatementsCacheSize = getLongIfSetOrGetDefault(dataSourceNode, PREPAREDSTATEMENTSCACHESIZE, null);\n        final Statement.TrackStatementsEnum trackStatements = dataSourceNode.hasDefined(TRACKSTATEMENTS.getName()) ? Statement.TrackStatementsEnum\n                .valueOf(dataSourceNode.get(TRACKSTATEMENTS.getName()).asString()) : Defaults.TRACK_STATEMENTS;\n        final Statement statement = new StatementImpl(sharePreparedStatements, preparedStatementsCacheSize, trackStatements);\n\n        final Integer allocationRetry = getIntIfSetOrGetDefault(dataSourceNode, ALLOCATION_RETRY, null);\n        final Long allocationRetryWaitMillis = getLongIfSetOrGetDefault(dataSourceNode, ALLOCATION_RETRY_WAIT_MILLIS, null);\n        final Long blockingTimeoutMillis = getLongIfSetOrGetDefault(dataSourceNode, BLOCKING_TIMEOUT_WAIT_MILLIS, null);\n        final Long idleTimeoutMinutes = getLongIfSetOrGetDefault(dataSourceNode, IDLETIMEOUTMINUTES, null);\n        final Long queryTimeout = getLongIfSetOrGetDefault(dataSourceNode, QUERYTIMEOUT, null);\n        final Integer xaResourceTimeout = getIntIfSetOrGetDefault(dataSourceNode, XA_RESOURCE_TIMEOUT, null);\n        final Long useTryLock = getLongIfSetOrGetDefault(dataSourceNode, USETRYLOCK, null);\n        final boolean setTxQuertTimeout = getBooleanIfSetOrGetDefault(dataSourceNode, SETTXQUERYTIMEOUT, Defaults.SET_TX_QUERY_TIMEOUT);\n        final TimeOut timeOut = new TimeOutImpl(blockingTimeoutMillis, idleTimeoutMinutes, allocationRetry,\n                allocationRetryWaitMillis, xaResourceTimeout, setTxQuertTimeout, queryTimeout, useTryLock);\n        final TransactionIsolation transactionIsolation = dataSourceNode.hasDefined(TRANSACTION_ISOLATION.getName()) ? TransactionIsolation\n                .valueOf(dataSourceNode.get(TRANSACTION_ISOLATION.getName()).asString()) : null;\n        final String checkValidConnectionSql = getStringIfSetOrGetDefault(dataSourceNode, CHECKVALIDCONNECTIONSQL, null);\n\n        final Extension exceptionSorter = extractExtension(dataSourceNode, EXCEPTIONSORTERCLASSNAME, EXCEPTIONSORTER_PROPERTIES);\n        final Extension staleConnectionChecker = extractExtension(dataSourceNode, STALECONNECTIONCHECKERCLASSNAME,\n                STALECONNECTIONCHECKER_PROPERTIES);\n        final Extension validConnectionChecker = extractExtension(dataSourceNode, VALIDCONNECTIONCHECKERCLASSNAME,\n                VALIDCONNECTIONCHECKER_PROPERTIES);\n\n        Long backgroundValidationMillis = getLongIfSetOrGetDefault(dataSourceNode, BACKGROUNDVALIDATIONMILLIS, null);\n        final boolean backgroundValidation = getBooleanIfSetOrGetDefault(dataSourceNode, BACKGROUNDVALIDATION, Defaults.BACKGROUND_VALIDATION);\n        boolean useFastFail = getBooleanIfSetOrGetDefault(dataSourceNode, USE_FAST_FAIL, Defaults.USE_FAST_FAIl);\n        final boolean validateOnMatch = getBooleanIfSetOrGetDefault(dataSourceNode, VALIDATEONMATCH, Defaults.VALIDATE_ON_MATCH);\n        final boolean spy = getBooleanIfSetOrGetDefault(dataSourceNode, SPY, Defaults.SPY);\n        final boolean useCcm = getBooleanIfSetOrGetDefault(dataSourceNode, USE_CCM, Defaults.USE_CCM);\n\n        final Validation validation = new ValidationImpl(backgroundValidation, backgroundValidationMillis, useFastFail,\n                validConnectionChecker, checkValidConnectionSql, validateOnMatch, staleConnectionChecker, exceptionSorter);\n\n        return new ModifiableDataSource(connectionUrl, driverClass, dataSourceClass, driver, transactionIsolation, connectionProperties, timeOut,\n                security, statement, validation, urlDelimiter, urlSelectorStrategyClassName, newConnectionSql, useJavaContext,\n                poolName, enabled, jndiName, spy, useCcm, jta, pool);\n    }","commit_id":"c7bbeeea7b05de5b5e7a60ddc46117a38f6284d9","url":"https://github.com/wildfly/wildfly"},{"original_method":"static ModifiableXaDataSource xaFrom(final OperationContext operationContext, final ModelNode dataSourceNode) throws ValidateException {\n        final Map<String, String> xaDataSourceProperty;\n        if (dataSourceNode.hasDefined(XADATASOURCE_PROPERTIES.getName())) {\n            List<Property> propertyList = dataSourceNode.get(XADATASOURCE_PROPERTIES.getName()).asPropertyList();\n            xaDataSourceProperty = new HashMap<String, String>(propertyList.size());\n            for (Property property : propertyList) {\n                xaDataSourceProperty.put(property.getName(), property.getValue().asString());\n            }\n        } else {\n            xaDataSourceProperty = Collections.emptyMap();\n        }\n\n        final String xaDataSourceClass = getStringIfSetOrGetDefault(dataSourceNode, XADATASOURCECLASS, null);\n        final String jndiName = getStringIfSetOrGetDefault(dataSourceNode, JNDINAME, null);\n        final String module = getStringIfSetOrGetDefault(dataSourceNode, DATASOURCE_DRIVER, null);\n        final String newConnectionSql = getStringIfSetOrGetDefault(dataSourceNode, NEW_CONNECTION_SQL, null);\n        final String poolName = getStringIfSetOrGetDefault(dataSourceNode, POOLNAME, null);\n        final String urlDelimiter = getStringIfSetOrGetDefault(dataSourceNode, URL_DELIMITER, null);\n        final String urlSelectorStrategyClassName = getStringIfSetOrGetDefault(dataSourceNode,\n                URL_SELECTOR_STRATEGY_CLASS_NAME, null);\n        final boolean useJavaContext = getBooleanIfSetOrGetDefault(dataSourceNode, USE_JAVA_CONTEXT, Defaults.USE_JAVA_CONTEXT);\n        final boolean enabled = false;\n                //getBooleanIfSetOrGetDefault(dataSourceNode, ENABLED, Defaults.ENABLED);\n        final Integer maxPoolSize = getIntIfSetOrGetDefault(dataSourceNode, MAX_POOL_SIZE, Defaults.MAX_POOL_SIZE);\n        final Integer minPoolSize = getIntIfSetOrGetDefault(dataSourceNode, MIN_POOL_SIZE, Defaults.MIN_POOL_SIZE);\n        final boolean prefill = getBooleanIfSetOrGetDefault(dataSourceNode, POOL_PREFILL, Defaults.PREFILL);\n        final boolean useStrictMin = getBooleanIfSetOrGetDefault(dataSourceNode, POOL_USE_STRICT_MIN, Defaults.USE_STRICT_MIN);\n        final boolean interleaving = getBooleanIfSetOrGetDefault(dataSourceNode, INTERLEAVING, Defaults.INTERLEAVING);\n        final boolean noTxSeparatePool = getBooleanIfSetOrGetDefault(dataSourceNode, NOTXSEPARATEPOOL, Defaults.NO_TX_SEPARATE_POOL);\n        final boolean padXid = getBooleanIfSetOrGetDefault(dataSourceNode, PAD_XID, Defaults.PAD_XID);\n        final boolean isSameRmOverride = getBooleanIfSetOrGetDefault(dataSourceNode, SAME_RM_OVERRIDE, Defaults.IS_SAME_RM_OVERRIDE);\n        final boolean wrapXaDataSource = getBooleanIfSetOrGetDefault(dataSourceNode, WRAP_XA_RESOURCE, Defaults.WRAP_XA_RESOURCE);\n        final FlushStrategy flushStrategy = dataSourceNode.hasDefined(POOL_FLUSH_STRATEGY.getName()) ? FlushStrategy.forName(dataSourceNode\n                .get(POOL_FLUSH_STRATEGY.getName()).asString()) : Defaults.FLUSH_STRATEGY;\n\n        final CommonXaPool xaPool = new CommonXaPoolImpl(minPoolSize, maxPoolSize, prefill, useStrictMin, flushStrategy,\n                isSameRmOverride, interleaving, padXid, wrapXaDataSource, noTxSeparatePool);\n\n        final String username = getStringIfSetOrGetDefault(dataSourceNode, USERNAME, null);\n        final String password = getResolvedStringIfSetOrGetDefault(operationContext, dataSourceNode, PASSWORD, null);\n        final String securityDomain = getStringIfSetOrGetDefault(dataSourceNode, SECURITY_DOMAIN, null);\n\n        final Extension reauthPlugin = extractExtension(dataSourceNode, REAUTHPLUGIN_CLASSNAME, REAUTHPLUGIN_PROPERTIES);\n\n        final DsSecurity security = new DsSecurityImpl(username, password, securityDomain, reauthPlugin);\n\n        final boolean sharePreparedStatements = dataSourceNode.hasDefined(SHAREPREPAREDSTATEMENTS.getName()) ? dataSourceNode.get(\n                SHAREPREPAREDSTATEMENTS.getName()).asBoolean() : Defaults.SHARE_PREPARED_STATEMENTS;\n        final Long preparedStatementsCacheSize = getLongIfSetOrGetDefault(dataSourceNode, PREPAREDSTATEMENTSCACHESIZE, null);\n        final Statement.TrackStatementsEnum trackStatements = dataSourceNode.hasDefined(TRACKSTATEMENTS.getName()) ? Statement.TrackStatementsEnum\n                .valueOf(dataSourceNode.get(TRACKSTATEMENTS.getName()).asString()) : Defaults.TRACK_STATEMENTS;\n        final Statement statement = new StatementImpl(sharePreparedStatements, preparedStatementsCacheSize, trackStatements);\n\n        final Integer allocationRetry = getIntIfSetOrGetDefault(dataSourceNode, ALLOCATION_RETRY, null);\n        final Long allocationRetryWaitMillis = getLongIfSetOrGetDefault(dataSourceNode, ALLOCATION_RETRY_WAIT_MILLIS, null);\n        final Long blockingTimeoutMillis = getLongIfSetOrGetDefault(dataSourceNode, BLOCKING_TIMEOUT_WAIT_MILLIS, null);\n        final Long idleTimeoutMinutes = getLongIfSetOrGetDefault(dataSourceNode, IDLETIMEOUTMINUTES, null);\n        final Long queryTimeout = getLongIfSetOrGetDefault(dataSourceNode, QUERYTIMEOUT, null);\n        final Integer xaResourceTimeout = getIntIfSetOrGetDefault(dataSourceNode, XA_RESOURCE_TIMEOUT, null);\n        final Long useTryLock = getLongIfSetOrGetDefault(dataSourceNode, USETRYLOCK, null);\n        final boolean setTxQuertTimeout = getBooleanIfSetOrGetDefault(dataSourceNode, SETTXQUERYTIMEOUT, Defaults.SET_TX_QUERY_TIMEOUT);\n        final TimeOut timeOut = new TimeOutImpl(blockingTimeoutMillis, idleTimeoutMinutes, allocationRetry,\n                allocationRetryWaitMillis, xaResourceTimeout, setTxQuertTimeout, queryTimeout, useTryLock);\n        final TransactionIsolation transactionIsolation = dataSourceNode.hasDefined(TRANSACTION_ISOLATION.getName()) ? TransactionIsolation\n                .valueOf(dataSourceNode.get(TRANSACTION_ISOLATION.getName()).asString()) : null;\n        final String checkValidConnectionSql = getStringIfSetOrGetDefault(dataSourceNode, CHECKVALIDCONNECTIONSQL, null);\n\n        final Extension exceptionSorter = extractExtension(dataSourceNode, EXCEPTIONSORTERCLASSNAME, EXCEPTIONSORTER_PROPERTIES);\n        final Extension staleConnectionChecker = extractExtension(dataSourceNode, STALECONNECTIONCHECKERCLASSNAME,\n                STALECONNECTIONCHECKER_PROPERTIES);\n        final Extension validConnectionChecker = extractExtension(dataSourceNode, VALIDCONNECTIONCHECKERCLASSNAME,\n                VALIDCONNECTIONCHECKER_PROPERTIES);\n\n        Long backgroundValidationMillis = getLongIfSetOrGetDefault(dataSourceNode, BACKGROUNDVALIDATIONMILLIS, null);\n        final boolean backgroundValidation = getBooleanIfSetOrGetDefault(dataSourceNode, BACKGROUNDVALIDATION, Defaults.BACKGROUND_VALIDATION);\n        boolean useFastFail = getBooleanIfSetOrGetDefault(dataSourceNode, USE_FAST_FAIL, Defaults.USE_FAST_FAIl);\n        final boolean validateOnMatch = getBooleanIfSetOrGetDefault(dataSourceNode, VALIDATEONMATCH, Defaults.VALIDATE_ON_MATCH);\n        final boolean spy = getBooleanIfSetOrGetDefault(dataSourceNode, SPY, Defaults.SPY);\n        final boolean useCcm = getBooleanIfSetOrGetDefault(dataSourceNode, USE_CCM, Defaults.USE_CCM);\n        final Validation validation = new ValidationImpl(backgroundValidation, backgroundValidationMillis, useFastFail,\n                validConnectionChecker, checkValidConnectionSql, validateOnMatch, staleConnectionChecker, exceptionSorter);\n\n        final String recoveryUsername = getStringIfSetOrGetDefault(dataSourceNode, RECOVERY_USERNAME, null);\n        final String recoveryPassword = getResolvedStringIfSetOrGetDefault(operationContext, dataSourceNode, RECOVERY_PASSWORD, null);\n        final String recoverySecurityDomain = getStringIfSetOrGetDefault(dataSourceNode, RECOVERY_SECURITY_DOMAIN, null);\n\n        final Credential credential = new CredentialImpl(recoveryUsername, recoveryPassword, recoverySecurityDomain);\n\n        final Extension recoverPlugin = extractExtension(dataSourceNode, RECOVERLUGIN_CLASSNAME, RECOVERLUGIN_PROPERTIES);\n        final boolean noRecovery = getBooleanIfSetOrGetDefault(dataSourceNode, NO_RECOVERY, false);\n        Recovery recovery = new Recovery(credential, recoverPlugin, noRecovery);\n        return new ModifiableXaDataSource(transactionIsolation, timeOut, security, statement, validation, urlDelimiter,\n                urlSelectorStrategyClassName, useJavaContext, poolName, enabled, jndiName, spy, useCcm, xaDataSourceProperty,\n                xaDataSourceClass, module, newConnectionSql, xaPool, recovery);\n    }","id":2520,"modified_method":"static ModifiableXaDataSource xaFrom(final OperationContext operationContext, final ModelNode dataSourceNode) throws ValidateException {\n        final Map<String, String> xaDataSourceProperty;\n        if (dataSourceNode.hasDefined(XADATASOURCE_PROPERTIES.getName())) {\n            List<Property> propertyList = dataSourceNode.get(XADATASOURCE_PROPERTIES.getName()).asPropertyList();\n            xaDataSourceProperty = new HashMap<String, String>(propertyList.size());\n            for (Property property : propertyList) {\n                xaDataSourceProperty.put(property.getName(), property.getValue().asString());\n            }\n        } else {\n            xaDataSourceProperty = Collections.emptyMap();\n        }\n\n        final String xaDataSourceClass = getStringIfSetOrGetDefault(dataSourceNode, XADATASOURCECLASS, null);\n        final String jndiName = getStringIfSetOrGetDefault(dataSourceNode, JNDINAME, null);\n        final String module = getStringIfSetOrGetDefault(dataSourceNode, DATASOURCE_DRIVER, null);\n        final String newConnectionSql = getStringIfSetOrGetDefault(dataSourceNode, NEW_CONNECTION_SQL, null);\n        final String poolName = getStringIfSetOrGetDefault(dataSourceNode, POOLNAME, null);\n        final String urlDelimiter = getStringIfSetOrGetDefault(dataSourceNode, URL_DELIMITER, null);\n        final String urlSelectorStrategyClassName = getStringIfSetOrGetDefault(dataSourceNode,\n                URL_SELECTOR_STRATEGY_CLASS_NAME, null);\n        final boolean useJavaContext = getBooleanIfSetOrGetDefault(dataSourceNode, USE_JAVA_CONTEXT, Defaults.USE_JAVA_CONTEXT);\n        final boolean enabled = getBooleanIfSetOrGetDefault(dataSourceNode, ENABLED, Defaults.ENABLED);\n        final Integer maxPoolSize = getIntIfSetOrGetDefault(dataSourceNode, MAX_POOL_SIZE, Defaults.MAX_POOL_SIZE);\n        final Integer minPoolSize = getIntIfSetOrGetDefault(dataSourceNode, MIN_POOL_SIZE, Defaults.MIN_POOL_SIZE);\n        final boolean prefill = getBooleanIfSetOrGetDefault(dataSourceNode, POOL_PREFILL, Defaults.PREFILL);\n        final boolean useStrictMin = getBooleanIfSetOrGetDefault(dataSourceNode, POOL_USE_STRICT_MIN, Defaults.USE_STRICT_MIN);\n        final boolean interleaving = getBooleanIfSetOrGetDefault(dataSourceNode, INTERLEAVING, Defaults.INTERLEAVING);\n        final boolean noTxSeparatePool = getBooleanIfSetOrGetDefault(dataSourceNode, NOTXSEPARATEPOOL, Defaults.NO_TX_SEPARATE_POOL);\n        final boolean padXid = getBooleanIfSetOrGetDefault(dataSourceNode, PAD_XID, Defaults.PAD_XID);\n        final boolean isSameRmOverride = getBooleanIfSetOrGetDefault(dataSourceNode, SAME_RM_OVERRIDE, Defaults.IS_SAME_RM_OVERRIDE);\n        final boolean wrapXaDataSource = getBooleanIfSetOrGetDefault(dataSourceNode, WRAP_XA_RESOURCE, Defaults.WRAP_XA_RESOURCE);\n        final FlushStrategy flushStrategy = dataSourceNode.hasDefined(POOL_FLUSH_STRATEGY.getName()) ? FlushStrategy.forName(dataSourceNode\n                .get(POOL_FLUSH_STRATEGY.getName()).asString()) : Defaults.FLUSH_STRATEGY;\n\n        final CommonXaPool xaPool = new CommonXaPoolImpl(minPoolSize, maxPoolSize, prefill, useStrictMin, flushStrategy,\n                isSameRmOverride, interleaving, padXid, wrapXaDataSource, noTxSeparatePool);\n\n        final String username = getStringIfSetOrGetDefault(dataSourceNode, USERNAME, null);\n        final String password = getResolvedStringIfSetOrGetDefault(operationContext, dataSourceNode, PASSWORD, null);\n        final String securityDomain = getStringIfSetOrGetDefault(dataSourceNode, SECURITY_DOMAIN, null);\n\n        final Extension reauthPlugin = extractExtension(dataSourceNode, REAUTHPLUGIN_CLASSNAME, REAUTHPLUGIN_PROPERTIES);\n\n        final DsSecurity security = new DsSecurityImpl(username, password, securityDomain, reauthPlugin);\n\n        final boolean sharePreparedStatements = dataSourceNode.hasDefined(SHAREPREPAREDSTATEMENTS.getName()) ? dataSourceNode.get(\n                SHAREPREPAREDSTATEMENTS.getName()).asBoolean() : Defaults.SHARE_PREPARED_STATEMENTS;\n        final Long preparedStatementsCacheSize = getLongIfSetOrGetDefault(dataSourceNode, PREPAREDSTATEMENTSCACHESIZE, null);\n        final Statement.TrackStatementsEnum trackStatements = dataSourceNode.hasDefined(TRACKSTATEMENTS.getName()) ? Statement.TrackStatementsEnum\n                .valueOf(dataSourceNode.get(TRACKSTATEMENTS.getName()).asString()) : Defaults.TRACK_STATEMENTS;\n        final Statement statement = new StatementImpl(sharePreparedStatements, preparedStatementsCacheSize, trackStatements);\n\n        final Integer allocationRetry = getIntIfSetOrGetDefault(dataSourceNode, ALLOCATION_RETRY, null);\n        final Long allocationRetryWaitMillis = getLongIfSetOrGetDefault(dataSourceNode, ALLOCATION_RETRY_WAIT_MILLIS, null);\n        final Long blockingTimeoutMillis = getLongIfSetOrGetDefault(dataSourceNode, BLOCKING_TIMEOUT_WAIT_MILLIS, null);\n        final Long idleTimeoutMinutes = getLongIfSetOrGetDefault(dataSourceNode, IDLETIMEOUTMINUTES, null);\n        final Long queryTimeout = getLongIfSetOrGetDefault(dataSourceNode, QUERYTIMEOUT, null);\n        final Integer xaResourceTimeout = getIntIfSetOrGetDefault(dataSourceNode, XA_RESOURCE_TIMEOUT, null);\n        final Long useTryLock = getLongIfSetOrGetDefault(dataSourceNode, USETRYLOCK, null);\n        final boolean setTxQuertTimeout = getBooleanIfSetOrGetDefault(dataSourceNode, SETTXQUERYTIMEOUT, Defaults.SET_TX_QUERY_TIMEOUT);\n        final TimeOut timeOut = new TimeOutImpl(blockingTimeoutMillis, idleTimeoutMinutes, allocationRetry,\n                allocationRetryWaitMillis, xaResourceTimeout, setTxQuertTimeout, queryTimeout, useTryLock);\n        final TransactionIsolation transactionIsolation = dataSourceNode.hasDefined(TRANSACTION_ISOLATION.getName()) ? TransactionIsolation\n                .valueOf(dataSourceNode.get(TRANSACTION_ISOLATION.getName()).asString()) : null;\n        final String checkValidConnectionSql = getStringIfSetOrGetDefault(dataSourceNode, CHECKVALIDCONNECTIONSQL, null);\n\n        final Extension exceptionSorter = extractExtension(dataSourceNode, EXCEPTIONSORTERCLASSNAME, EXCEPTIONSORTER_PROPERTIES);\n        final Extension staleConnectionChecker = extractExtension(dataSourceNode, STALECONNECTIONCHECKERCLASSNAME,\n                STALECONNECTIONCHECKER_PROPERTIES);\n        final Extension validConnectionChecker = extractExtension(dataSourceNode, VALIDCONNECTIONCHECKERCLASSNAME,\n                VALIDCONNECTIONCHECKER_PROPERTIES);\n\n        Long backgroundValidationMillis = getLongIfSetOrGetDefault(dataSourceNode, BACKGROUNDVALIDATIONMILLIS, null);\n        final boolean backgroundValidation = getBooleanIfSetOrGetDefault(dataSourceNode, BACKGROUNDVALIDATION, Defaults.BACKGROUND_VALIDATION);\n        boolean useFastFail = getBooleanIfSetOrGetDefault(dataSourceNode, USE_FAST_FAIL, Defaults.USE_FAST_FAIl);\n        final boolean validateOnMatch = getBooleanIfSetOrGetDefault(dataSourceNode, VALIDATEONMATCH, Defaults.VALIDATE_ON_MATCH);\n        final boolean spy = getBooleanIfSetOrGetDefault(dataSourceNode, SPY, Defaults.SPY);\n        final boolean useCcm = getBooleanIfSetOrGetDefault(dataSourceNode, USE_CCM, Defaults.USE_CCM);\n        final Validation validation = new ValidationImpl(backgroundValidation, backgroundValidationMillis, useFastFail,\n                validConnectionChecker, checkValidConnectionSql, validateOnMatch, staleConnectionChecker, exceptionSorter);\n\n        final String recoveryUsername = getStringIfSetOrGetDefault(dataSourceNode, RECOVERY_USERNAME, null);\n        final String recoveryPassword = getResolvedStringIfSetOrGetDefault(operationContext, dataSourceNode, RECOVERY_PASSWORD, null);\n        final String recoverySecurityDomain = getStringIfSetOrGetDefault(dataSourceNode, RECOVERY_SECURITY_DOMAIN, null);\n\n        final Credential credential = new CredentialImpl(recoveryUsername, recoveryPassword, recoverySecurityDomain);\n\n        final Extension recoverPlugin = extractExtension(dataSourceNode, RECOVERLUGIN_CLASSNAME, RECOVERLUGIN_PROPERTIES);\n        final boolean noRecovery = getBooleanIfSetOrGetDefault(dataSourceNode, NO_RECOVERY, false);\n        Recovery recovery = new Recovery(credential, recoverPlugin, noRecovery);\n        return new ModifiableXaDataSource(transactionIsolation, timeOut, security, statement, validation, urlDelimiter,\n                urlSelectorStrategyClassName, useJavaContext, poolName, enabled, jndiName, spy, useCcm, xaDataSourceProperty,\n                xaDataSourceClass, module, newConnectionSql, xaPool, recovery);\n    }","commit_id":"c7bbeeea7b05de5b5e7a60ddc46117a38f6284d9","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * AS7-1200 test case for xa datasource persistence to xml\n     *\n     * @throws Exception\n     */\n    @Test\n    public void testMarshallUnmarshallXaDs() throws Exception {\n        final String dsName = \"XaDsName2\";\n        final String jndiDsName = \"XaJndiDsName\";\n\n        final ModelNode address = new ModelNode();\n        address.add(\"subsystem\", \"datasources\");\n        address.add(\"xa-data-source\", dsName);\n        address.protect();\n\n        final ModelNode operation = new ModelNode();\n        operation.get(OP).set(\"add\");\n        operation.get(OP_ADDR).set(address);\n\n        operation.get(\"name\").set(dsName);\n        operation.get(\"jndi-name\").set(\"java:jboss/datasources/\" + jndiDsName);\n\n\n        operation.get(\"driver-name\").set(\"h2\");\n        operation.get(\"pool-name\").set(dsName + \"_Pool\");\n\n        operation.get(\"user-name\").set(\"sa\");\n        operation.get(\"password\").set(\"sa\");\n\n        final ModelNode compensatingOperation = new ModelNode();\n        compensatingOperation.get(OP).set(\"remove\");\n        compensatingOperation.get(OP_ADDR).set(address);\n\n        execute(operation);\n\n        final ModelNode xaDatasourcePropertiesAddress = address.clone();\n        xaDatasourcePropertiesAddress.add(\"xa-datasource-properties\", \"URL\");\n        xaDatasourcePropertiesAddress.protect();\n        final ModelNode xaDatasourcePropertyOperation = new ModelNode();\n        xaDatasourcePropertyOperation.get(OP).set(\"add\");\n        xaDatasourcePropertyOperation.get(OP_ADDR).set(xaDatasourcePropertiesAddress);\n        xaDatasourcePropertyOperation.get(\"value\").set(\"jdbc:h2:mem:test\");\n\n        execute(xaDatasourcePropertyOperation);\n\n        final ModelNode operation2 = new ModelNode();\n        operation2.get(OP).set(\"enable\");\n        operation2.get(OP_ADDR).set(address);\n\n        execute(operation2);\n\n        List<ModelNode> newList = marshalAndReparseDsResources(\"xa-data-source\");\n\n        Assert.assertNotNull(newList);\n\n        final Map<String, ModelNode> parseChildren = getChildren(newList.get(1));\n        Assert.assertFalse(parseChildren.isEmpty());\n        Assert.assertEquals(\"java:jboss/datasources/XaJndiDsName\", parseChildren.get(\"jndi-name\").asString());\n\n        remove(xaDatasourcePropertiesAddress);\n        execute(compensatingOperation);\n\n        // remove from xml too\n        marshalAndReparseDsResources(\"xa-data-source\");\n\n    }","id":2521,"modified_method":"/**\n     * AS7-1200 test case for xa datasource persistence to xml\n     *\n     * @throws Exception\n     */\n    @Test\n    public void testMarshallUnmarshallXaDs() throws Exception {\n        final String dsName = \"XaDsName2\";\n        final String jndiDsName = \"XaJndiDsName2\";\n\n        final ModelNode address = new ModelNode();\n        address.add(\"subsystem\", \"datasources\");\n        address.add(\"xa-data-source\", dsName);\n        address.protect();\n\n        final ModelNode operation = new ModelNode();\n        operation.get(OP).set(\"add\");\n        operation.get(OP_ADDR).set(address);\n\n        operation.get(\"name\").set(dsName);\n        operation.get(\"jndi-name\").set(\"java:jboss/datasources/\" + jndiDsName);\n\n\n        operation.get(\"driver-name\").set(\"h2\");\n        operation.get(\"pool-name\").set(dsName + \"_Pool\");\n\n        operation.get(\"user-name\").set(\"sa\");\n        operation.get(\"password\").set(\"sa\");\n\n        final ModelNode compensatingOperation = new ModelNode();\n        compensatingOperation.get(OP).set(\"remove\");\n        compensatingOperation.get(OP_ADDR).set(address);\n\n        execute(operation);\n\n        final ModelNode xaDatasourcePropertiesAddress = address.clone();\n        xaDatasourcePropertiesAddress.add(\"xa-datasource-properties\", \"URL\");\n        xaDatasourcePropertiesAddress.protect();\n        final ModelNode xaDatasourcePropertyOperation = new ModelNode();\n        xaDatasourcePropertyOperation.get(OP).set(\"add\");\n        xaDatasourcePropertyOperation.get(OP_ADDR).set(xaDatasourcePropertiesAddress);\n        xaDatasourcePropertyOperation.get(\"value\").set(\"jdbc:h2:mem:test\");\n\n        execute(xaDatasourcePropertyOperation);\n\n        final ModelNode operation2 = new ModelNode();\n        operation2.get(OP).set(\"enable\");\n        operation2.get(OP_ADDR).set(address);\n\n        execute(operation2);\n\n        List<ModelNode> newList = marshalAndReparseDsResources(\"xa-data-source\");\n\n        Assert.assertNotNull(newList);\n\n        final Map<String, ModelNode> parseChildren = getChildren(newList.get(1));\n        Assert.assertFalse(parseChildren.isEmpty());\n        Assert.assertEquals(\"java:jboss/datasources/XaJndiDsName2\", parseChildren.get(\"jndi-name\").asString());\n\n        remove(xaDatasourcePropertiesAddress);\n        execute(compensatingOperation);\n\n        // remove from xml too\n        marshalAndReparseDsResources(\"xa-data-source\");\n\n    }","commit_id":"c7bbeeea7b05de5b5e7a60ddc46117a38f6284d9","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void initialize(final ExtensionContext context) {\n        SUBSYSTEM_DATASOURCES_LOGGER.debugf(\"Initializing Datasources Extension\");\n\n        final DisableRequiredWriteAttributeHandler disableRequiredWriteAttributeHandler = new DisableRequiredWriteAttributeHandler();\n\n        // Register the remoting subsystem\n        final SubsystemRegistration registration = context.registerSubsystem(SUBSYSTEM_NAME);\n\n        registration.registerXMLElementWriter(NewDataSourceSubsystemParser.INSTANCE);\n\n        // Remoting subsystem description and operation handlers\n        final ManagementResourceRegistration subsystem = registration.registerSubsystemModel(SUBSYSTEM);\n        subsystem.registerOperationHandler(ADD, DataSourcesSubsystemAdd.INSTANCE, SUBSYSTEM_ADD_DESC, false);\n        subsystem.registerOperationHandler(DESCRIBE, DataSourcesSubsystemDescribeHandler.INSTANCE,\n                DataSourcesSubsystemDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);\n\n        subsystem.registerOperationHandler(\"installed-drivers-list\", InstalledDriversListOperationHandler.INSTANCE,\n                INSTALLED_DRIVERS_LIST_DESC);\n        subsystem.registerOperationHandler(\"get-installed-driver\", GetInstalledDriverOperationHandler.INSTANCE,\n                GET_INSTALLED_DRIVER_DESC);\n\n        final ManagementResourceRegistration jdbcDrivers = subsystem.registerSubModel(PathElement.pathElement(JDBC_DRIVER_NAME),\n                JDBC_DRIVER_DESC);\n        jdbcDrivers.registerOperationHandler(ADD, JdbcDriverAdd.INSTANCE, ADD_JDBC_DRIVER_DESC, false);\n        jdbcDrivers.registerOperationHandler(REMOVE, JdbcDriverRemove.INSTANCE, REMOVE_JDBC_DRIVER_DESC, false);\n\n        final ManagementResourceRegistration dataSources = subsystem.registerSubModel(PathElement.pathElement(DATA_SOURCE),\n                DATA_SOURCE_DESC);\n        dataSources.registerOperationHandler(ADD, DataSourceAdd.INSTANCE, ADD_DATA_SOURCE_DESC, false);\n        dataSources.registerOperationHandler(REMOVE, DataSourceRemove.INSTANCE, REMOVE_DATA_SOURCE_DESC, false);\n        dataSources.registerOperationHandler(ENABLE, DataSourceEnable.LOCAL_INSTANCE, ENABLE_DATA_SOURCE_DESC, false);\n        dataSources.registerOperationHandler(DISABLE, DataSourceDisable.INSTANCE, DISABLE_DATA_SOURCE_DESC, false);\n        dataSources.registerOperationHandler(\"flush-idle-connection-in-pool\",\n                PoolOperations.FlushIdleConnectionInPool.DS_INSTANCE, FLUSH_IDLE_CONNECTION_DESC, false);\n        dataSources.registerOperationHandler(\"flush-all-connection-in-pool\",\n                PoolOperations.FlushAllConnectionInPool.DS_INSTANCE, FLUSH_ALL_CONNECTION_DESC, false);\n        dataSources.registerOperationHandler(\"test-connection-in-pool\", PoolOperations.TestConnectionInPool.DS_INSTANCE,\n                TEST_CONNECTION_DESC, false);\n\n        final ManagementResourceRegistration configAdapter = dataSources.registerSubModel(PathElement.pathElement(CONNECTION_PROPERTIES.getName()), CONNECTION_PROPERTIES_DESC);\n        configAdapter.registerOperationHandler(ADD, ConnectionPropertyAdd.INSTANCE, ADD_CONNECTION_PROPERTIES_DESC, false);\n        configAdapter.registerOperationHandler(REMOVE, ConnectionPropertyRemove.INSTANCE, REMOVE_CONNECTION_PROPERTIES_DESC, false);\n\n        for (final String attributeName : PoolMetrics.ATTRIBUTES) {\n            dataSources.registerMetric(attributeName, PoolMetrics.LocalAndXaDataSourcePoolMetricsHandler.INSTANCE);\n\n        }\n\n        for (final String attributeName : LocalAndXaDataSourcesJdbcMetrics.ATTRIBUTES) {\n            dataSources.registerMetric(attributeName, LocalAndXaDataSourcesJdbcMetrics.INSTANCE);\n\n        }\n\n        for (final SimpleAttributeDefinition attribute : DataSourcesSubsystemProviders.DATASOURCE_ATTRIBUTE) {\n            if (PoolConfigurationRWHandler.ATTRIBUTES.contains(attribute.getName())) {\n               dataSources.registerReadWriteAttribute(attribute.getName(), PoolConfigurationReadHandler.INSTANCE,\n                    LocalAndXaDataSourcePoolConfigurationWriteHandler.INSTANCE, Storage.CONFIGURATION);\n            } else {\n               dataSources.registerReadWriteAttribute(attribute.getName(), null, disableRequiredWriteAttributeHandler , Storage.CONFIGURATION);\n            }\n        }\n\n        final ManagementResourceRegistration xaDataSources = subsystem.registerSubModel(PathElement.pathElement(XA_DATASOURCE),\n                XA_DATA_SOURCE_DESC);\n        xaDataSources.registerOperationHandler(ADD, XaDataSourceAdd.INSTANCE, ADD_XA_DATA_SOURCE_DESC, false);\n        xaDataSources.registerOperationHandler(REMOVE, XaDataSourceRemove.INSTANCE, REMOVE_XA_DATA_SOURCE_DESC, false);\n        xaDataSources.registerOperationHandler(ENABLE, DataSourceEnable.XA_INSTANCE, ENABLE_XA_DATA_SOURCE_DESC, false);\n        xaDataSources.registerOperationHandler(DISABLE, DataSourceDisable.INSTANCE, DISABLE_XA_DATA_SOURCE_DESC, false);\n        xaDataSources.registerOperationHandler(\"flush-idle-connection-in-pool\",\n                PoolOperations.FlushIdleConnectionInPool.DS_INSTANCE, FLUSH_IDLE_CONNECTION_DESC, false);\n        xaDataSources.registerOperationHandler(\"flush-all-connection-in-pool\",\n                PoolOperations.FlushAllConnectionInPool.DS_INSTANCE, FLUSH_ALL_CONNECTION_DESC, false);\n        xaDataSources.registerOperationHandler(\"test-connection-in-pool\", PoolOperations.TestConnectionInPool.DS_INSTANCE,\n                TEST_CONNECTION_DESC, false);\n\n        final ManagementResourceRegistration xadatasourcePropertyAdapter = xaDataSources.registerSubModel(PathElement.pathElement(XADATASOURCE_PROPERTIES.getName()), XADATASOURCE_PROPERTIES_DESC);\n        xadatasourcePropertyAdapter.registerOperationHandler(ADD, XaDataSourcePropertyAdd.INSTANCE, ADD_XADATASOURCE_PROPERTIES_DESC, false);\n        xadatasourcePropertyAdapter.registerOperationHandler(REMOVE, XaDataSourcePropertyRemove.INSTANCE, REMOVE_XADATASOURCE_PROPERTIES_DESC, false);\n\n\n        for (final String attributeName : PoolMetrics.ATTRIBUTES) {\n            xaDataSources.registerMetric(attributeName, PoolMetrics.LocalAndXaDataSourcePoolMetricsHandler.INSTANCE);\n        }\n\n        for (final String attributeName : LocalAndXaDataSourcesJdbcMetrics.ATTRIBUTES) {\n            xaDataSources.registerMetric(attributeName, LocalAndXaDataSourcesJdbcMetrics.INSTANCE);\n\n        }\n\n        for (final SimpleAttributeDefinition attribute : DataSourcesSubsystemProviders.XA_DATASOURCE_ATTRIBUTE) {\n            if (PoolConfigurationRWHandler.ATTRIBUTES.contains(attribute.getName())) {\n               xaDataSources.registerReadWriteAttribute(attribute.getName(), PoolConfigurationReadHandler.INSTANCE,\n                    LocalAndXaDataSourcePoolConfigurationWriteHandler.INSTANCE, Storage.CONFIGURATION);\n            } else {\n               xaDataSources.registerReadWriteAttribute(attribute.getName(), null, disableRequiredWriteAttributeHandler , Storage.CONFIGURATION);\n            }\n        }\n\n    }","id":2522,"modified_method":"@Override\n    public void initialize(final ExtensionContext context) {\n        SUBSYSTEM_DATASOURCES_LOGGER.debugf(\"Initializing Datasources Extension\");\n\n        // Register the remoting subsystem\n        final SubsystemRegistration registration = context.registerSubsystem(SUBSYSTEM_NAME);\n\n        registration.registerXMLElementWriter(NewDataSourceSubsystemParser.INSTANCE);\n\n        // Remoting subsystem description and operation handlers\n        final ManagementResourceRegistration subsystem = registration.registerSubsystemModel(SUBSYSTEM);\n        subsystem.registerOperationHandler(ADD, DataSourcesSubsystemAdd.INSTANCE, SUBSYSTEM_ADD_DESC, false);\n        subsystem.registerOperationHandler(DESCRIBE, DataSourcesSubsystemDescribeHandler.INSTANCE,\n                DataSourcesSubsystemDescribeHandler.INSTANCE, false, OperationEntry.EntryType.PRIVATE);\n\n        subsystem.registerOperationHandler(\"installed-drivers-list\", InstalledDriversListOperationHandler.INSTANCE,\n                INSTALLED_DRIVERS_LIST_DESC);\n        subsystem.registerOperationHandler(\"get-installed-driver\", GetInstalledDriverOperationHandler.INSTANCE,\n                GET_INSTALLED_DRIVER_DESC);\n\n        final ManagementResourceRegistration jdbcDrivers = subsystem.registerSubModel(PathElement.pathElement(JDBC_DRIVER_NAME),\n                JDBC_DRIVER_DESC);\n        jdbcDrivers.registerOperationHandler(ADD, JdbcDriverAdd.INSTANCE, ADD_JDBC_DRIVER_DESC, false);\n        jdbcDrivers.registerOperationHandler(REMOVE, JdbcDriverRemove.INSTANCE, REMOVE_JDBC_DRIVER_DESC, false);\n\n        final ManagementResourceRegistration dataSources = subsystem.registerSubModel(PathElement.pathElement(DATA_SOURCE),\n                DATA_SOURCE_DESC);\n        dataSources.registerOperationHandler(ADD, DataSourceAdd.INSTANCE, ADD_DATA_SOURCE_DESC, false);\n        dataSources.registerOperationHandler(REMOVE, DataSourceRemove.INSTANCE, REMOVE_DATA_SOURCE_DESC, false);\n        dataSources.registerOperationHandler(ENABLE, DataSourceEnable.LOCAL_INSTANCE, ENABLE_DATA_SOURCE_DESC, false);\n        dataSources.registerOperationHandler(DISABLE, DataSourceDisable.INSTANCE, DISABLE_DATA_SOURCE_DESC, false);\n        dataSources.registerOperationHandler(\"flush-idle-connection-in-pool\",\n                PoolOperations.FlushIdleConnectionInPool.DS_INSTANCE, FLUSH_IDLE_CONNECTION_DESC, false);\n        dataSources.registerOperationHandler(\"flush-all-connection-in-pool\",\n                PoolOperations.FlushAllConnectionInPool.DS_INSTANCE, FLUSH_ALL_CONNECTION_DESC, false);\n        dataSources.registerOperationHandler(\"test-connection-in-pool\", PoolOperations.TestConnectionInPool.DS_INSTANCE,\n                TEST_CONNECTION_DESC, false);\n\n        final ManagementResourceRegistration configAdapter = dataSources.registerSubModel(PathElement.pathElement(CONNECTION_PROPERTIES.getName()), CONNECTION_PROPERTIES_DESC);\n        configAdapter.registerOperationHandler(ADD, ConnectionPropertyAdd.INSTANCE, ADD_CONNECTION_PROPERTIES_DESC, false);\n        configAdapter.registerOperationHandler(REMOVE, ConnectionPropertyRemove.INSTANCE, REMOVE_CONNECTION_PROPERTIES_DESC, false);\n\n        for (final String attributeName : PoolMetrics.ATTRIBUTES) {\n            dataSources.registerMetric(attributeName, PoolMetrics.LocalAndXaDataSourcePoolMetricsHandler.INSTANCE);\n\n        }\n\n        for (final String attributeName : LocalAndXaDataSourcesJdbcMetrics.ATTRIBUTES) {\n            dataSources.registerMetric(attributeName, LocalAndXaDataSourcesJdbcMetrics.INSTANCE);\n\n        }\n\n        for (final SimpleAttributeDefinition attribute : DataSourcesSubsystemProviders.DATASOURCE_ATTRIBUTE) {\n            if (PoolConfigurationRWHandler.ATTRIBUTES.contains(attribute.getName())) {\n               dataSources.registerReadWriteAttribute(attribute.getName(), PoolConfigurationReadHandler.INSTANCE,\n                    LocalAndXaDataSourcePoolConfigurationWriteHandler.INSTANCE, Storage.CONFIGURATION);\n            } else {\n               dataSources.registerReadWriteAttribute(attribute.getName(), null, new DisableRequiredWriteAttributeHandler(DATASOURCE_ATTRIBUTE) , Storage.CONFIGURATION);\n            }\n        }\n\n        final ManagementResourceRegistration xaDataSources = subsystem.registerSubModel(PathElement.pathElement(XA_DATASOURCE),\n                XA_DATA_SOURCE_DESC);\n        xaDataSources.registerOperationHandler(ADD, XaDataSourceAdd.INSTANCE, ADD_XA_DATA_SOURCE_DESC, false);\n        xaDataSources.registerOperationHandler(REMOVE, XaDataSourceRemove.INSTANCE, REMOVE_XA_DATA_SOURCE_DESC, false);\n        xaDataSources.registerOperationHandler(ENABLE, DataSourceEnable.XA_INSTANCE, ENABLE_XA_DATA_SOURCE_DESC, false);\n        xaDataSources.registerOperationHandler(DISABLE, DataSourceDisable.INSTANCE, DISABLE_XA_DATA_SOURCE_DESC, false);\n        xaDataSources.registerOperationHandler(\"flush-idle-connection-in-pool\",\n                PoolOperations.FlushIdleConnectionInPool.DS_INSTANCE, FLUSH_IDLE_CONNECTION_DESC, false);\n        xaDataSources.registerOperationHandler(\"flush-all-connection-in-pool\",\n                PoolOperations.FlushAllConnectionInPool.DS_INSTANCE, FLUSH_ALL_CONNECTION_DESC, false);\n        xaDataSources.registerOperationHandler(\"test-connection-in-pool\", PoolOperations.TestConnectionInPool.DS_INSTANCE,\n                TEST_CONNECTION_DESC, false);\n\n        final ManagementResourceRegistration xadatasourcePropertyAdapter = xaDataSources.registerSubModel(PathElement.pathElement(XADATASOURCE_PROPERTIES.getName()), XADATASOURCE_PROPERTIES_DESC);\n        xadatasourcePropertyAdapter.registerOperationHandler(ADD, XaDataSourcePropertyAdd.INSTANCE, ADD_XADATASOURCE_PROPERTIES_DESC, false);\n        xadatasourcePropertyAdapter.registerOperationHandler(REMOVE, XaDataSourcePropertyRemove.INSTANCE, REMOVE_XADATASOURCE_PROPERTIES_DESC, false);\n\n\n        for (final String attributeName : PoolMetrics.ATTRIBUTES) {\n            xaDataSources.registerMetric(attributeName, PoolMetrics.LocalAndXaDataSourcePoolMetricsHandler.INSTANCE);\n        }\n\n        for (final String attributeName : LocalAndXaDataSourcesJdbcMetrics.ATTRIBUTES) {\n            xaDataSources.registerMetric(attributeName, LocalAndXaDataSourcesJdbcMetrics.INSTANCE);\n\n        }\n\n        for (final SimpleAttributeDefinition attribute : DataSourcesSubsystemProviders.XA_DATASOURCE_ATTRIBUTE) {\n            if (PoolConfigurationRWHandler.ATTRIBUTES.contains(attribute.getName())) {\n               xaDataSources.registerReadWriteAttribute(attribute.getName(), PoolConfigurationReadHandler.INSTANCE,\n                    LocalAndXaDataSourcePoolConfigurationWriteHandler.INSTANCE, Storage.CONFIGURATION);\n            } else {\n               xaDataSources.registerReadWriteAttribute(attribute.getName(), null, new DisableRequiredWriteAttributeHandler(XA_DATASOURCE_ATTRIBUTE) , Storage.CONFIGURATION);\n            }\n        }\n\n    }","commit_id":"c7bbeeea7b05de5b5e7a60ddc46117a38f6284d9","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected ServiceController<?> startConfigAndAddDependency(OperationContext context, ServiceBuilder<?> dataSourceServiceBuilder,\n            AbstractDataSourceService dataSourceService, String jndiName, ServiceTarget serviceTarget, final ModelNode operation, final ServiceVerificationHandler handler)\n            throws OperationFailedException {\n        final ModifiableXaDataSource dataSourceConfig;\n        try {\n            dataSourceConfig = xaFrom(context, operation);\n        } catch (ValidateException e) {\n            throw new OperationFailedException(e, new ModelNode().set(MESSAGES.failedToCreate(\"XaDataSource\", operation, e.getLocalizedMessage())));\n        }\n        final ServiceName dataSourceCongServiceName = XADataSourceConfigService.SERVICE_NAME_BASE.append(jndiName);\n        final XADataSourceConfigService configService = new XADataSourceConfigService(dataSourceConfig);\n\n        ServiceController<?> svcController = serviceTarget.addService(dataSourceCongServiceName, configService)\n                .addListener(handler)\n                .install();\n\n        dataSourceServiceBuilder.addDependency(dataSourceCongServiceName, ModifiableXaDataSource.class,\n                ((XaDataSourceService) dataSourceService).getDataSourceConfigInjector());\n        return svcController;\n    }","id":2523,"modified_method":"@Override\n    protected void startConfigAndAddDependency(ServiceBuilder<?> dataSourceServiceBuilder,\n                                               AbstractDataSourceService dataSourceService, String jndiName, ServiceTarget serviceTarget, final ModelNode operation, final ServiceVerificationHandler handler)\n            throws OperationFailedException {\n\n        final ServiceName dataSourceCongServiceName = XADataSourceConfigService.SERVICE_NAME_BASE.append(jndiName);\n\n        dataSourceServiceBuilder.addDependency(dataSourceCongServiceName, ModifiableXaDataSource.class,\n                ((XaDataSourceService) dataSourceService).getDataSourceConfigInjector());\n\n    }","commit_id":"c7bbeeea7b05de5b5e7a60ddc46117a38f6284d9","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void performRuntime(OperationContext context, ModelNode operation, ModelNode recoveryEnvModel,\n                                  ServiceVerificationHandler verificationHandler,\n                                  List<ServiceController<?>> serviceControllers) throws OperationFailedException {\n\n        final String configPropertyValue = XADATASOURCE_PROPERTY_VALUE.resolveModelAttribute(context, recoveryEnvModel).asString();\n        final ModelNode address = operation.require(OP_ADDR);\n        PathAddress path = PathAddress.pathAddress(address);\n        final String jndiName = path.getElement(path.size() - 2).getValue();\n        final String configPropertyName = PathAddress.pathAddress(address).getLastElement().getValue();\n\n        ServiceName serviceName = XADataSourceConfigService.SERVICE_NAME_BASE.append(jndiName).append(configPropertyName);\n        ServiceName xadsServiceName = XADataSourceConfigService.SERVICE_NAME_BASE.append(jndiName);\n\n        final ServiceRegistry registry = context.getServiceRegistry(true);\n\n\n        final ServiceName dataSourceConfigServiceName = XADataSourceConfigService.SERVICE_NAME_BASE\n                .append(jndiName);\n        final ServiceController<?> dataSourceConfigController = registry\n                .getService(dataSourceConfigServiceName);\n        if (dataSourceConfigController != null && !((XaDataSource) dataSourceConfigController.getValue()).isEnabled()) {\n\n\n            final ServiceTarget serviceTarget = context.getServiceTarget();\n\n            final XaDataSourcePropertiesService service = new XaDataSourcePropertiesService(configPropertyName, configPropertyValue);\n            serviceTarget.addService(serviceName, service).setInitialMode(ServiceController.Mode.ACTIVE)\n                    .addDependency(xadsServiceName, ModifiableXaDataSource.class, service.getXADSInjector())\n                    .addListener(verificationHandler).install();\n\n            context.addStep(verificationHandler, OperationContext.Stage.VERIFY);\n        } else {\n            context.reloadRequired();\n        }\n    }","id":2524,"modified_method":"@Override\n    protected void performRuntime(OperationContext context, ModelNode operation, ModelNode recoveryEnvModel,\n                                  ServiceVerificationHandler verificationHandler,\n                                  List<ServiceController<?>> serviceControllers) throws OperationFailedException {\n\n        final String configPropertyValue = XADATASOURCE_PROPERTY_VALUE.resolveModelAttribute(context, recoveryEnvModel).asString();\n        final ModelNode address = operation.require(OP_ADDR);\n        PathAddress path = PathAddress.pathAddress(address);\n        final String dsName = path.getElement(path.size() - 2).getValue();\n        final String configPropertyName = PathAddress.pathAddress(address).getLastElement().getValue();\n\n        ServiceName serviceName = XADataSourceConfigService.SERVICE_NAME_BASE.append(dsName).append(configPropertyName);\n        ServiceName xadsServiceName = XADataSourceConfigService.SERVICE_NAME_BASE.append(dsName);\n\n        final ServiceRegistry registry = context.getServiceRegistry(true);\n\n\n        final ServiceName dataSourceConfigServiceName = XADataSourceConfigService.SERVICE_NAME_BASE\n                .append(dsName);\n        final ServiceController<?> dataSourceConfigController = registry\n                .getService(dataSourceConfigServiceName);\n        if (dataSourceConfigController == null || !((XaDataSource) dataSourceConfigController.getValue()).isEnabled()) {\n\n\n            final ServiceTarget serviceTarget = context.getServiceTarget();\n\n            final XaDataSourcePropertiesService service = new XaDataSourcePropertiesService(configPropertyName, configPropertyValue);\n            serviceTarget.addService(serviceName, service).setInitialMode(ServiceController.Mode.NEVER)\n                    .addDependency(xadsServiceName, ModifiableXaDataSource.class, service.getXADSInjector())\n                    .addListener(verificationHandler).install();\n\n            context.addStep(verificationHandler, OperationContext.Stage.VERIFY);\n        } else {\n            context.reloadRequired();\n        }\n    }","commit_id":"c7bbeeea7b05de5b5e7a60ddc46117a38f6284d9","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override Val apply( Env env, Env.StackHelp stk, AST asts[] ) {\n    throw H2O.unimpl();\n  }","id":2525,"modified_method":"@Override Val apply( Env env, Env.StackHelp stk, AST asts[] ) {\n    Frame fr = stk.track(asts[1].exec(env)).getFrame();\n    int ncols = fr.numCols();\n    ASTNumList groupby = check(ncols, asts[2]);\n    ASTNumList orderby = check(ncols, asts[3]);\n    AGG[] agg = new AGG[(asts.length-3)/3];\n    for( int idx = 4; idx < asts.length; idx += 3 ) {\n      AST fcn = asts[idx].exec(env).getFun();\n      ASTNumList col = check(ncols,asts[idx+1]);\n      if( col.cnt() != 1 ) throw new IllegalArgumentException(\"Group-By functions take only a single column\");\n      NAHandling na = NAHandling.valueOf(asts[idx+2].exec(env).getStr().toUpperCase());\n      agg[(idx-3)/3] = new AGG(fcn,(int)col.min(),na);\n    }\n\n    throw H2O.unimpl();\n  }","commit_id":"97a0ac7c83eccc5a82cffeb9ad6c9e7a9bfb0880","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Override Val apply( Env env, Env.StackHelp stk, AST asts[] ) {\n    String pattern     = asts[1].exec(env).getStr();\n    String replacement = asts[2].exec(env).getStr();\n    Frame fr = stk.track(asts[3].exec(env)).getFrame();\n    boolean ignoreCase = asts[4].exec(env).getNum()==1;\n\n    if (fr.numCols() != 1) throw new IllegalArgumentException(\"sub works on a single column at a time.\");\n    String[] doms = fr.anyVec().domain();\n    for (int i = 0; i < doms.length; ++i)\n      doms[i] = ignoreCase\n              ? doms[i].toLowerCase(Locale.ENGLISH).replaceAll(pattern, replacement)\n              : doms[i].replaceAll(pattern, replacement);\n\n    // COW\n    Vec v = fr.anyVec().makeCopy(doms);\n    return new ValFrame(new Frame(v));\n  }","id":2526,"modified_method":"@Override Val apply( Env env, Env.StackHelp stk, AST asts[] ) {\n    String pattern     = asts[1].exec(env).getStr();\n    String replacement = asts[2].exec(env).getStr();\n    Frame fr = stk.track(asts[3].exec(env)).getFrame();\n    boolean ignoreCase = asts[4].exec(env).getNum()==1;\n\n    if (fr.numCols() != 1) throw new IllegalArgumentException(\"sub works on a single column at a time.\");\n    Vec vec = fr.anyVec();   assert vec != null;\n    String[] doms = vec.domain();\n    for (int i = 0; i < doms.length; ++i)\n      doms[i] = ignoreCase\n              ? doms[i].toLowerCase(Locale.ENGLISH).replaceAll(pattern, replacement)\n              : doms[i].replaceAll(pattern, replacement);\n\n    // COW\n    Vec v = vec.makeCopy(doms);\n    return new ValFrame(new Frame(v));\n  }","commit_id":"97a0ac7c83eccc5a82cffeb9ad6c9e7a9bfb0880","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Override Val apply( Env env, Env.StackHelp stk, AST asts[] ) {\n    Frame fr = stk.track(asts[1].exec(env)).getFrame();\n    if (fr.numCols() != 1) throw new IllegalArgumentException(\"trim works on a single column at a time.\");\n    if( !fr.anyVec().isEnum() ) throw new IllegalArgumentException(\"column must be character.\");\n    String[] doms = fr.anyVec().domain();\n    for (int i = 0; i < doms.length; ++i) doms[i] = doms[i].trim();\n\n    // COW\n    Vec v = fr.anyVec().makeCopy(doms);\n    return new ValFrame(new Frame(v));\n  }","id":2527,"modified_method":"@Override Val apply( Env env, Env.StackHelp stk, AST asts[] ) {\n    Frame fr = stk.track(asts[1].exec(env)).getFrame();\n    if (fr.numCols() != 1) throw new IllegalArgumentException(\"trim works on a single column at a time.\");\n    Vec vec = fr.anyVec();   assert vec != null;\n    if( !vec.isEnum() ) throw new IllegalArgumentException(\"column must be character.\");\n    String[] doms = vec.domain();\n    for (int i = 0; i < doms.length; ++i) doms[i] = doms[i].trim();\n\n    // COW\n    Vec v = vec.makeCopy(doms);\n    return new ValFrame(new Frame(v));\n  }","commit_id":"97a0ac7c83eccc5a82cffeb9ad6c9e7a9bfb0880","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Override Val apply( Env env, Env.StackHelp stk, AST asts[] ) {\n    String pattern     = asts[1].exec(env).getStr();\n    String replacement = asts[2].exec(env).getStr();\n    Frame fr = stk.track(asts[3].exec(env)).getFrame();\n    boolean ignoreCase = asts[4].exec(env).getNum()==1;\n\n    if (fr.numCols() != 1) throw new IllegalArgumentException(\"sub works on a single column at a time.\");\n    String[] doms = fr.anyVec().domain();\n    for (int i = 0; i < doms.length; ++i)\n      doms[i] = ignoreCase\n              ? doms[i].toLowerCase(Locale.ENGLISH).replaceFirst(pattern, replacement)\n              : doms[i].replaceFirst(pattern, replacement);\n\n    // COW\n    Vec v = fr.anyVec().makeCopy(doms);\n    return new ValFrame(new Frame(v));\n  }","id":2528,"modified_method":"@Override Val apply( Env env, Env.StackHelp stk, AST asts[] ) {\n    String pattern     = asts[1].exec(env).getStr();\n    String replacement = asts[2].exec(env).getStr();\n    Frame fr = stk.track(asts[3].exec(env)).getFrame();\n    boolean ignoreCase = asts[4].exec(env).getNum()==1;\n\n    if (fr.numCols() != 1) throw new IllegalArgumentException(\"sub works on a single column at a time.\");\n    Vec vec = fr.anyVec();   assert vec != null;\n    String[] doms = vec.domain();\n    for (int i = 0; i < doms.length; ++i)\n      doms[i] = ignoreCase\n              ? doms[i].toLowerCase(Locale.ENGLISH).replaceFirst(pattern, replacement)\n              : doms[i].replaceFirst(pattern, replacement);\n\n    // COW\n    Vec v = vec.makeCopy(doms);\n    return new ValFrame(new Frame(v));\n  }","commit_id":"97a0ac7c83eccc5a82cffeb9ad6c9e7a9bfb0880","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Override Val apply( Env env, Env.StackHelp stk, AST asts[] ) {\n    Frame fr = stk.track(asts[1].exec(env)).getFrame();\n    if (fr.numCols() != 1) throw new IllegalArgumentException(\"tolower only takes a single column of data. Got \"+ fr.numCols()+\" columns.\");\n    if( !fr.anyVec().isEnum() ) throw new IllegalArgumentException(\"expected categorical column.\");\n    String[] dom = fr.anyVec().domain();\n\n    for (int i = 0; i < dom.length; ++i)\n      dom[i] = dom[i].toLowerCase(Locale.ENGLISH);\n\n    // COW\n    Vec v = fr.anyVec().makeCopy(dom);\n    return new ValFrame(new Frame(v));\n  }","id":2529,"modified_method":"@Override Val apply( Env env, Env.StackHelp stk, AST asts[] ) {\n    Frame fr = stk.track(asts[1].exec(env)).getFrame();\n    if (fr.numCols() != 1) throw new IllegalArgumentException(\"tolower only takes a single column of data. Got \"+ fr.numCols()+\" columns.\");\n    Vec vec = fr.anyVec();   assert vec != null;\n    if( !vec.isEnum() ) throw new IllegalArgumentException(\"expected categorical column.\");\n    String[] dom = vec.domain();\n\n    for (int i = 0; i < dom.length; ++i)\n      dom[i] = dom[i].toLowerCase(Locale.ENGLISH);\n\n    // COW\n    Vec v = vec.makeCopy(dom);\n    return new ValFrame(new Frame(v));\n  }","commit_id":"97a0ac7c83eccc5a82cffeb9ad6c9e7a9bfb0880","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Override Val apply( Env env, Env.StackHelp stk, AST asts[] ) {\n    Frame fr = stk.track(asts[1].exec(env)).getFrame();\n    if (fr.numCols() != 1) throw new IllegalArgumentException(\"toupper only takes a single column of data. Got \"+ fr.numCols()+\" columns.\");\n    if( !fr.anyVec().isEnum() ) throw new IllegalArgumentException(\"expected categorical column.\");\n    String[] dom = fr.anyVec().domain();\n\n    for (int i = 0; i < dom.length; ++i)\n      dom[i] = dom[i].toUpperCase(Locale.ENGLISH);\n\n    // COW\n    Vec v = fr.anyVec().makeCopy(dom);\n    return new ValFrame(new Frame(v));\n  }","id":2530,"modified_method":"@Override Val apply( Env env, Env.StackHelp stk, AST asts[] ) {\n    Frame fr = stk.track(asts[1].exec(env)).getFrame();\n    if (fr.numCols() != 1) throw new IllegalArgumentException(\"toupper only takes a single column of data. Got \"+ fr.numCols()+\" columns.\");\n    Vec vec = fr.anyVec();   assert vec != null;\n    if( !vec.isEnum() ) throw new IllegalArgumentException(\"expected categorical column.\");\n    String[] dom = vec.domain();\n\n    for (int i = 0; i < dom.length; ++i)\n      dom[i] = dom[i].toUpperCase(Locale.ENGLISH);\n\n    // COW\n    Vec v = vec.makeCopy(dom);\n    return new ValFrame(new Frame(v));\n  }","commit_id":"97a0ac7c83eccc5a82cffeb9ad6c9e7a9bfb0880","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Test\n\t@Transactional\n\tpublic void testFoldersCountWhenAddingWikiPageAttachments()\n\t\tthrows Exception {\n\n\t\tint foldersCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\taddMessageAttachment();\n\n\t\t// One folder per group, thread and message\n\n\t\tAssert.assertEquals(\n\t\t\tfoldersCount + 3, DLFolderLocalServiceUtil.getDLFoldersCount());\n\n\t\tfoldersCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\taddMessageAttachment();\n\n\t\tAssert.assertEquals(\n\t\t\tfoldersCount, DLFolderLocalServiceUtil.getDLFoldersCount());\n\n\t\tfoldersCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\t_thread = null;\n\t\t_message = null;\n\n\t\taddMessageAttachment();\n\n\t\tAssert.assertEquals(\n\t\t\tfoldersCount + 2, DLFolderLocalServiceUtil.getDLFoldersCount());\n\n\t\tfoldersCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\t_group = null;\n\t\t_message = null;\n\t\t_thread = null;\n\n\t\taddMessageAttachment();\n\n\t\tAssert.assertEquals(\n\t\t\tfoldersCount + 3, DLFolderLocalServiceUtil.getDLFoldersCount());\n\t}","id":2531,"modified_method":"@Test\n\t@Transactional\n\tpublic void testFoldersCountWhenAddingMessageAttachments()\n\t\tthrows Exception {\n\n\t\tint foldersCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\taddMessageAttachment();\n\n\t\t// One folder per group, thread and message\n\n\t\tAssert.assertEquals(\n\t\t\tfoldersCount + 3, DLFolderLocalServiceUtil.getDLFoldersCount());\n\n\t\tfoldersCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\t_message = MBTestUtil.addMessage(\n\t\t\t_message.getGroupId(), _message.getCategoryId(),\n\t\t\t_message.getThreadId(), _message.getMessageId());\n\n\t\taddMessageAttachment();\n\n\t\tAssert.assertEquals(\n\t\t\tfoldersCount + 1, DLFolderLocalServiceUtil.getDLFoldersCount());\n\n\t\tfoldersCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\t_message = null;\n\n\t\taddMessageAttachment();\n\n\t\tAssert.assertEquals(\n\t\t\tfoldersCount + 2, DLFolderLocalServiceUtil.getDLFoldersCount());\n\n\t\tfoldersCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\t_group = null;\n\t\t_message = null;\n\n\t\taddMessageAttachment();\n\n\t\tAssert.assertEquals(\n\t\t\tfoldersCount + 3, DLFolderLocalServiceUtil.getDLFoldersCount());\n\t}","commit_id":"fa730d2bcacc44061b633e10d388dbee19f7bda9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\t@Transactional\n\tpublic void testFoldersCountWhenAddingMessage() throws Exception {\n\t\tint initialFolderCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\taddMessage();\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFolderCount, DLFolderLocalServiceUtil.getDLFoldersCount());\n\t}","id":2532,"modified_method":"@Test\n\t@Transactional\n\tpublic void testFoldersCountWhenAddingMessage() throws Exception {\n\t\tint initialFoldersCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\taddMessage();\n\n\t\t_message = MBTestUtil.addMessage(\n\t\t\t_message.getGroupId(), _message.getCategoryId(),\n\t\t\t_message.getThreadId(), _message.getMessageId());\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFoldersCount, DLFolderLocalServiceUtil.getDLFoldersCount());\n\t}","commit_id":"fa730d2bcacc44061b633e10d388dbee19f7bda9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\t@Transactional\n\tpublic void testFoldersCountWhenAddingCategory() throws Exception {\n\t\tint initialFolderCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\taddCategory();\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFolderCount, DLFolderLocalServiceUtil.getDLFoldersCount());\n\t}","id":2533,"modified_method":"@Test\n\t@Transactional\n\tpublic void testFoldersCountWhenAddingRootMessage() throws Exception {\n\t\tint initialFoldersCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\taddMessage();\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFoldersCount, DLFolderLocalServiceUtil.getDLFoldersCount());\n\t}","commit_id":"fa730d2bcacc44061b633e10d388dbee19f7bda9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\t@Transactional\n\tpublic void testFoldersCountWhenAddingMessageAttachment() throws Exception {\n\t\tint initialFolderCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\taddMessageAttachment();\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFolderCount + 3,\n\t\t\tDLFolderLocalServiceUtil.getDLFoldersCount());\n\t}","id":2534,"modified_method":"@Test\n\t@Transactional\n\tpublic void testFoldersCountWhenAddingMessageAttachment() throws Exception {\n\t\tint initialFoldersCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\taddMessageAttachment();\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFoldersCount + 3,\n\t\t\tDLFolderLocalServiceUtil.getDLFoldersCount());\n\t}","commit_id":"fa730d2bcacc44061b633e10d388dbee19f7bda9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void addMessage() throws Exception {\n\t\tif (_category == null) {\n\t\t\taddCategory();\n\t\t}\n\n\t\t_message = MBTestUtil.addMessage(_category);\n\t}","id":2535,"modified_method":"protected void addMessage() throws Exception {\n\t\tif (_category == null) {\n\t\t\taddCategory();\n\t\t}\n\n\t\tServiceContext serviceContext = ServiceTestUtil.getServiceContext(\n\t\t\t_group.getGroupId());\n\n\t\t_message = MBTestUtil.addMessage(\n\t\t\t_category.getCategoryId(), serviceContext);\n\t}","commit_id":"fa730d2bcacc44061b633e10d388dbee19f7bda9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@After\n\tpublic void tearDown() throws Exception {\n\t\t_group = null;\n\t\t_message = null;\n\t\t_category = null;\n\t\t_thread = null;\n\t}","id":2536,"modified_method":"@After\n\tpublic void tearDown() throws Exception {\n\t\t_group = null;\n\t\t_message = null;\n\t\t_category = null;\n\t}","commit_id":"fa730d2bcacc44061b633e10d388dbee19f7bda9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testMoveToTrashAndDeleteMessage() throws Exception {\n\t\taddMessageAttachment();\n\n\t\t_trashMBAttachments(false);\n\n\t\tRepositoryLocalServiceUtil.deleteRepositories(_group.getGroupId());\n\t\tGroupLocalServiceUtil.deleteGroup(_group);\n\t}","id":2537,"modified_method":"@Test\n\tpublic void testMoveToTrashAndDeleteMessageAttachment() throws Exception {\n\t\taddMessageAttachment();\n\n\t\t_trashMBAttachments(false);\n\n\t\tRepositoryLocalServiceUtil.deleteRepositories(_group.getGroupId());\n\t\tGroupLocalServiceUtil.deleteGroup(_group);\n\t}","commit_id":"fa730d2bcacc44061b633e10d388dbee19f7bda9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\t@Transactional\n\tpublic void testFoldersCountWhenDeletingThreadWithAttachments()\n\t\tthrows Exception {\n\n\t\tint initialFoldersCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\taddMessageAttachment();\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFoldersCount + 3,\n\t\t\tDLFolderLocalServiceUtil.getDLFoldersCount());\n\n\t\tMBThreadLocalServiceUtil.deleteThread(_message.getThreadId());\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFoldersCount + 1,\n\t\t\tDLFolderLocalServiceUtil.getDLFoldersCount());\n\t}","id":2538,"modified_method":"@Test\n\t@Transactional\n\tpublic void testFoldersCountWhenDeletingRootMessageWithAttachments()\n\t\tthrows Exception {\n\n\t\tint initialFoldersCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\taddMessageAttachment();\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFoldersCount + 3,\n\t\t\tDLFolderLocalServiceUtil.getDLFoldersCount());\n\n\t\tMBMessageLocalServiceUtil.deleteMessage(_message);\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFoldersCount + 1,\n\t\t\tDLFolderLocalServiceUtil.getDLFoldersCount());\n\t}","commit_id":"fa730d2bcacc44061b633e10d388dbee19f7bda9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\t@Transactional\n\tpublic void testFoldersCountWhenAddingAttachmentsToSameMessage()\n\t\tthrows Exception {\n\n\t\tint initialFolderCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\taddMessageAttachment();\n\n\t\tint firstFolderCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\tAssert.assertEquals(initialFolderCount + 3, firstFolderCount);\n\n\t\taddMessageAttachment();\n\n\t\tint finalFolderCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\tAssert.assertEquals(firstFolderCount, finalFolderCount);\n\t}","id":2539,"modified_method":"@Test\n\t@Transactional\n\tpublic void testFoldersCountWhenAddingAttachmentsToSameMessage()\n\t\tthrows Exception {\n\n\t\tint initialFoldersCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\taddMessageAttachment();\n\n\t\tint foldersCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\tAssert.assertEquals(initialFoldersCount + 3, foldersCount);\n\n\t\taddMessageAttachment();\n\n\t\tfoldersCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\tAssert.assertEquals(initialFoldersCount + 3, foldersCount);\n\t}","commit_id":"fa730d2bcacc44061b633e10d388dbee19f7bda9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\t@Transactional\n\tpublic void testDeleteAttachmentsWhenDeletingMessage() throws Exception {\n\t\tint initialFileEntryCount =\n\t\t\tDLFileEntryLocalServiceUtil.getFileEntriesCount();\n\n\t\taddMessageAttachment();\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFileEntryCount + 1,\n\t\t\tDLFileEntryLocalServiceUtil.getFileEntriesCount());\n\n\t\tMBMessageLocalServiceUtil.deleteMessage(_message.getMessageId());\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFileEntryCount,\n\t\t\tDLFileEntryLocalServiceUtil.getFileEntriesCount());\n\t}","id":2540,"modified_method":"@Test\n\t@Transactional\n\tpublic void testDeleteAttachmentsWhenDeletingMessage() throws Exception {\n\t\tint initialFileEntriesCount =\n\t\t\tDLFileEntryLocalServiceUtil.getFileEntriesCount();\n\n\t\taddMessageAttachment();\n\n\t\t_message = MBTestUtil.addMessage(\n\t\t\t_message.getGroupId(), _message.getCategoryId(),\n\t\t\t_message.getThreadId(), _message.getMessageId());\n\n\t\taddMessageAttachment();\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFileEntriesCount + 2,\n\t\t\tDLFileEntryLocalServiceUtil.getFileEntriesCount());\n\n\t\tMBMessageLocalServiceUtil.deleteMessage(_message);\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFileEntriesCount + 1,\n\t\t\tDLFileEntryLocalServiceUtil.getFileEntriesCount());\n\t}","commit_id":"fa730d2bcacc44061b633e10d388dbee19f7bda9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\t@Transactional\n\tpublic void testFoldersCountWhenDeletingMessageWithAttachments()\n\t\tthrows Exception {\n\n\t\tint initialFoldersCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\taddMessageAttachment();\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFoldersCount + 3,\n\t\t\tDLFolderLocalServiceUtil.getDLFoldersCount());\n\n\t\tMBMessageLocalServiceUtil.deleteMessage(_message.getMessageId());\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFoldersCount + 1,\n\t\t\tDLFolderLocalServiceUtil.getDLFoldersCount());\n\t}","id":2541,"modified_method":"@Test\n\t@Transactional\n\tpublic void testFoldersCountWhenDeletingMessageWithAttachments()\n\t\tthrows Exception {\n\n\t\tint initialFoldersCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\taddMessageAttachment();\n\n\t\t_message = MBTestUtil.addMessage(\n\t\t\t_message.getGroupId(), _message.getCategoryId(),\n\t\t\t_message.getThreadId(), _message.getMessageId());\n\n\t\taddMessageAttachment();\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFoldersCount + 4,\n\t\t\tDLFolderLocalServiceUtil.getDLFoldersCount());\n\n\t\tMBMessageLocalServiceUtil.deleteMessage(_message);\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFoldersCount + 3,\n\t\t\tDLFolderLocalServiceUtil.getDLFoldersCount());\n\t}","commit_id":"fa730d2bcacc44061b633e10d388dbee19f7bda9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\t@Transactional\n\tpublic void testFoldersCountWhenDeletingMessageWithoutAttachments()\n\t\tthrows Exception {\n\n\t\tint initialFoldersCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\taddMessage();\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFoldersCount, DLFolderLocalServiceUtil.getDLFoldersCount());\n\n\t\tMBMessageLocalServiceUtil.deleteMessage(_message.getMessageId());\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFoldersCount, DLFolderLocalServiceUtil.getDLFoldersCount());\n\t}","id":2542,"modified_method":"@Test\n\t@Transactional\n\tpublic void testFoldersCountWhenDeletingMessageWithoutAttachments()\n\t\tthrows Exception {\n\n\t\tint initialFoldersCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\taddMessage();\n\n\t\t_message = MBTestUtil.addMessage(\n\t\t\t_message.getGroupId(), _message.getCategoryId(),\n\t\t\t_message.getThreadId(), _message.getMessageId());\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFoldersCount, DLFolderLocalServiceUtil.getDLFoldersCount());\n\n\t\tMBMessageLocalServiceUtil.deleteMessage(_message);\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFoldersCount, DLFolderLocalServiceUtil.getDLFoldersCount());\n\t}","commit_id":"fa730d2bcacc44061b633e10d388dbee19f7bda9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testMoveToTrashAndRestoreMessage() throws Exception {\n\t\taddMessageAttachment();\n\n\t\t_trashMBAttachments(true);\n\n\t\tRepositoryLocalServiceUtil.deleteRepositories(_group.getGroupId());\n\t\tGroupLocalServiceUtil.deleteGroup(_group);\n\t}","id":2543,"modified_method":"@Test\n\tpublic void testMoveToTrashAndRestoreMessageAttachment() throws Exception {\n\t\taddMessageAttachment();\n\n\t\t_trashMBAttachments(true);\n\n\t\tRepositoryLocalServiceUtil.deleteRepositories(_group.getGroupId());\n\t\tGroupLocalServiceUtil.deleteGroup(_group);\n\t}","commit_id":"fa730d2bcacc44061b633e10d388dbee19f7bda9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\t@Transactional\n\tpublic void testFoldersCountWhenMovingToTrashMessageAttachments()\n\t\tthrows Exception {\n\n\t\tint initialFoldersCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\taddMessageAttachment();\n\n\t\tint folderCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\tAssert.assertEquals(initialFoldersCount + 3, folderCount);\n\n\t\tMBMessageLocalServiceUtil.moveMessageAttachmentToTrash(\n\t\t\tTestPropsValues.getUserId(), _message.getMessageId(),\n\t\t\t\"company_logo.png\");\n\n\t\tAssert.assertNotEquals(\n\t\t\tinitialFoldersCount, DLFolderLocalServiceUtil.getDLFoldersCount());\n\t}","id":2544,"modified_method":"@Test\n\t@Transactional\n\tpublic void testFoldersCountWhenDeletingRootMessageWithoutAttachments()\n\t\tthrows Exception {\n\n\t\tint initialFoldersCount = DLFolderLocalServiceUtil.getDLFoldersCount();\n\n\t\taddMessage();\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFoldersCount, DLFolderLocalServiceUtil.getDLFoldersCount());\n\n\t\tMBMessageLocalServiceUtil.deleteMessage(_message);\n\n\t\tAssert.assertEquals(\n\t\t\tinitialFoldersCount, DLFolderLocalServiceUtil.getDLFoldersCount());\n\t}","commit_id":"fa730d2bcacc44061b633e10d388dbee19f7bda9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static MBMessage addMessage(\n\t\t\tlong categoryId, String keywords, boolean approved,\n\t\t\tServiceContext serviceContext)\n\t\tthrows Exception {\n\n\t\tif (!Validator.isBlank(keywords)) {\n\t\t\treturn MBMessageLocalServiceUtil.addMessage(\n\t\t\t\tTestPropsValues.getUserId(), ServiceTestUtil.randomString(),\n\t\t\t\tcategoryId, keywords, keywords, serviceContext);\n\t\t}\n\n\t\tMBMessage message = MBMessageLocalServiceUtil.addMessage(\n\t\t\tTestPropsValues.getUserId(), ServiceTestUtil.randomString(),\n\t\t\tcategoryId, \"subject\", \"body\", serviceContext);\n\n\t\tif (!approved) {\n\t\t\treturn MBMessageLocalServiceUtil.updateStatus(\n\t\t\t\tmessage.getStatusByUserId(), message.getMessageId(),\n\t\t\t\tWorkflowConstants.STATUS_DRAFT, serviceContext);\n\n\t\t}\n\n\t\treturn message;\n\t}","id":2545,"modified_method":"public static MBMessage addMessage(\n\t\t\tlong categoryId, String keywords, boolean approved,\n\t\t\tServiceContext serviceContext)\n\t\tthrows Exception {\n\n\t\tString subject = \"subject\";\n\t\tString body = \"body\";\n\n\t\tif (!Validator.isBlank(keywords)) {\n\t\t\tsubject = keywords;\n\t\t\tbody = keywords;\n\t\t}\n\n\t\tMBMessage message = MBMessageLocalServiceUtil.addMessage(\n\t\t\tTestPropsValues.getUserId(), ServiceTestUtil.randomString(),\n\t\t\tcategoryId, subject, body, serviceContext);\n\n\t\tif (!approved) {\n\t\t\treturn MBMessageLocalServiceUtil.updateStatus(\n\t\t\t\tmessage.getStatusByUserId(), message.getMessageId(),\n\t\t\t\tWorkflowConstants.STATUS_DRAFT, serviceContext);\n\t\t}\n\n\t\treturn message;\n\t}","commit_id":"fa730d2bcacc44061b633e10d388dbee19f7bda9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static List<ObjectValuePair<String, InputStream>> getInputStreamOVPs(\n\t\tString fileName, Class<?> clazz, String keywords) {\n\n\t\tList<ObjectValuePair<String, InputStream>> inputStreamOVPs =\n\t\t\tnew ArrayList<ObjectValuePair<String, InputStream>>(1);\n\n\t\tStringBuffer sb = new StringBuffer(2);\n\n\t\tsb.append(\"dependencies/\");\n\t\tsb.append(fileName);\n\n\t\tInputStream inputStream = clazz.getResourceAsStream(sb.toString());\n\n\t\tObjectValuePair<String, InputStream> inputStreamOVP = null;\n\n\t\tif (Validator.isBlank(keywords)) {\n\t\t\tinputStreamOVP = new ObjectValuePair<String, InputStream>(\n\t\t\t\tfileName, inputStream);\n\t\t}\n\t\telse {\n\t\t\tinputStreamOVP = new ObjectValuePair<String, InputStream>(\n\t\t\t\tkeywords, inputStream);\n\t\t}\n\n\t\tinputStreamOVPs.add(inputStreamOVP);\n\n\t\treturn inputStreamOVPs;\n\t}","id":2546,"modified_method":"public static List<ObjectValuePair<String, InputStream>> getInputStreamOVPs(\n\t\tString fileName, Class<?> clazz, String keywords) {\n\n\t\tList<ObjectValuePair<String, InputStream>> inputStreamOVPs =\n\t\t\tnew ArrayList<ObjectValuePair<String, InputStream>>(1);\n\n\t\tInputStream inputStream = clazz.getResourceAsStream(\n\t\t\t\"dependencies/\" + fileName);\n\n\t\tObjectValuePair<String, InputStream> inputStreamOVP = null;\n\n\t\tif (Validator.isBlank(keywords)) {\n\t\t\tinputStreamOVP = new ObjectValuePair<String, InputStream>(\n\t\t\t\tfileName, inputStream);\n\t\t}\n\t\telse {\n\t\t\tinputStreamOVP = new ObjectValuePair<String, InputStream>(\n\t\t\t\tkeywords, inputStream);\n\t\t}\n\n\t\tinputStreamOVPs.add(inputStreamOVP);\n\n\t\treturn inputStreamOVPs;\n\t}","commit_id":"fa730d2bcacc44061b633e10d388dbee19f7bda9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private void createVmDataCommands(DomainRouterVO router, Commands cmds) {\n        long networkId = router.getNetworkId();\n        List<UserVmVO> vms = _userVmDao.listByNetworkIdAndStates(networkId, State.Starting, State.Running, State.Migrating, State.Stopping);\n        for (UserVmVO vm : vms) {\n            NicVO nic = _nicDao.findByInstanceIdAndNetworkId(networkId, vm.getId());\n            if (nic != null) {\n                s_logger.debug(\"Creating user data entry for vm \" + vm + \" on domR \" + router);\n                String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getServiceOfferingId()).getDisplayText();\n                String zoneName = _dcDao.findById(router.getDataCenterIdToDeployIn()).getName();\n                cmds.addCommand(\"vmdata\",\n                        generateVmDataCommand(router, nic.getIp4Address(), vm.getUserData(), serviceOffering, zoneName, nic.getIp4Address(), vm.getHostName(), vm.getInstanceName(), vm.getId(), null));\n            }\n        }\n    }","id":2547,"modified_method":"private void createVmDataCommands(DomainRouterVO router, Commands cmds) {\n        long networkId = router.getNetworkId();\n        List<UserVmVO> vms = _userVmDao.listByNetworkIdAndStates(networkId, State.Running, State.Migrating, State.Stopping);\n        DataCenterVO dc = _dcDao.findById(router.getDataCenterIdToDeployIn());\n        for (UserVmVO vm : vms) {\n            boolean createVmData = true;\n            if (dc.getNetworkType() == NetworkType.Basic && router.getPodIdToDeployIn().longValue() != vm.getPodIdToDeployIn().longValue()) {\n                createVmData = false;\n            }\n            \n            if (createVmData) {\n                NicVO nic = _nicDao.findByInstanceIdAndNetworkId(networkId, vm.getId());\n                if (nic != null) {\n                    s_logger.debug(\"Creating user data entry for vm \" + vm + \" on domR \" + router);\n                    String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(vm.getServiceOfferingId()).getDisplayText();\n                    String zoneName = _dcDao.findById(router.getDataCenterIdToDeployIn()).getName();\n                    cmds.addCommand(\"vmdata\",\n                            generateVmDataCommand(router, nic.getIp4Address(), vm.getUserData(), serviceOffering, zoneName, nic.getIp4Address(), vm.getHostName(), vm.getInstanceName(), vm.getId(), null));\n                }\n            }\n        }\n    }","commit_id":"3167c49687a1190002ef5a17ea3901a4464b4be5","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        _name = name;\n\n        _executor = Executors.newScheduledThreadPool(1, new NamedThreadFactory(\"RouterMonitor\"));\n\n        final ComponentLocator locator = ComponentLocator.getCurrentLocator();\n\n        final Map<String, String> configs = _configDao.getConfiguration(\"AgentManager\", params);\n\n        _mgmt_host = configs.get(\"host\");\n        _routerRamSize = NumbersUtil.parseInt(configs.get(\"router.ram.size\"), DEFAULT_ROUTER_VM_RAMSIZE);\n        _routerCpuMHz = NumbersUtil.parseInt(configs.get(\"router.cpu.mhz\"), DEFAULT_ROUTER_CPU_MHZ);\n        String value = configs.get(\"start.retry\");\n        _retry = NumbersUtil.parseInt(value, 2);\n\n        value = configs.get(\"router.stats.interval\");\n        _routerStatsInterval = NumbersUtil.parseInt(value, 300);\n\n        _instance = configs.get(\"instance.name\");\n        if (_instance == null) {\n            _instance = \"DEFAULT\";\n        }\n\n        s_logger.info(\"Router configurations: \" + \"ramsize=\" + _routerRamSize);\n\n        final UserStatisticsDao statsDao = locator.getDao(UserStatisticsDao.class);\n        if (statsDao == null) {\n            throw new ConfigurationException(\"Unable to get \" + UserStatisticsDao.class.getName());\n        }\n\n        _agentMgr.registerForHostEvents(new SshKeysDistriMonitor(this, _hostDao, _configDao), true, false, false);\n        _itMgr.registerGuru(VirtualMachine.Type.DomainRouter, this);\n\n        boolean useLocalStorage = Boolean.parseBoolean(configs.get(Config.SystemVMUseLocalStorage.key()));\n        _offering = new ServiceOfferingVO(\"System Offering For Software Router\", 1, _routerRamSize, _routerCpuMHz, null, null, true, null, useLocalStorage, true, null, true, VirtualMachine.Type.DomainRouter, true);\n        _offering.setUniqueName(\"Cloud.Com-SoftwareRouter\");\n        _offering = _serviceOfferingDao.persistSystemServiceOffering(_offering);\n        \n        // this can sometimes happen, if DB is manually or programmatically manipulated\n        if(_offering == null) {\n        \tString msg = \"Data integrity problem : System Offering For Software router VM has been removed?\";\n        \ts_logger.error(msg);\n            throw new ConfigurationException(msg);\n        }\n\n        _systemAcct = _accountService.getSystemAccount();\n        \n        trafficSentinelHostname = configs.get(\"traffic.sentinel.hostname\");\n\n        s_logger.info(\"DomainRouterManager is configured.\");\n\n        return true;\n    }","id":2548,"modified_method":"@Override\n    public boolean configure(final String name, final Map<String, Object> params) throws ConfigurationException {\n        _name = name;\n\n        _executor = Executors.newScheduledThreadPool(1, new NamedThreadFactory(\"RouterMonitor\"));\n\n        final ComponentLocator locator = ComponentLocator.getCurrentLocator();\n\n        final Map<String, String> configs = _configDao.getConfiguration(\"AgentManager\", params);\n\n        _mgmt_host = configs.get(\"host\");\n        _routerRamSize = NumbersUtil.parseInt(configs.get(\"router.ram.size\"), DEFAULT_ROUTER_VM_RAMSIZE);\n        _routerCpuMHz = NumbersUtil.parseInt(configs.get(\"router.cpu.mhz\"), DEFAULT_ROUTER_CPU_MHZ);\n        String value = configs.get(\"start.retry\");\n        _retry = NumbersUtil.parseInt(value, 2);\n\n        value = configs.get(\"router.stats.interval\");\n        _routerStatsInterval = NumbersUtil.parseInt(value, 300);\n\n        _instance = configs.get(\"instance.name\");\n        if (_instance == null) {\n            _instance = \"DEFAULT\";\n        }\n\n        s_logger.info(\"Router configurations: \" + \"ramsize=\" + _routerRamSize);\n\n        final UserStatisticsDao statsDao = locator.getDao(UserStatisticsDao.class);\n        if (statsDao == null) {\n            throw new ConfigurationException(\"Unable to get \" + UserStatisticsDao.class.getName());\n        }\n\n        _agentMgr.registerForHostEvents(new SshKeysDistriMonitor(this, _hostDao, _configDao), true, false, false);\n        _itMgr.registerGuru(VirtualMachine.Type.DomainRouter, this);\n\n        boolean useLocalStorage = Boolean.parseBoolean(configs.get(Config.SystemVMUseLocalStorage.key()));\n        _offering = new ServiceOfferingVO(\"System Offering For Software Router\", 1, _routerRamSize, _routerCpuMHz, null, null, true, null, useLocalStorage, true, null, true, VirtualMachine.Type.DomainRouter, true);\n        _offering.setUniqueName(\"Cloud.Com-SoftwareRouter\");\n        _offering = _serviceOfferingDao.persistSystemServiceOffering(_offering);\n        \n        // this can sometimes happen, if DB is manually or programmatically manipulated\n        if(_offering == null) {\n        \tString msg = \"Data integrity problem : System Offering For Software router VM has been removed?\";\n        \ts_logger.error(msg);\n            throw new ConfigurationException(msg);\n        }\n\n        _systemAcct = _accountService.getSystemAccount();\n        \n        trafficSentinelHostname = configs.get(\"traffic.sentinel.hostname\");\n        \n        _dnsBasicZoneUpdates = String.valueOf(_configDao.getValue(Config.DnsBasicZoneUpdates.key()));\n        \n        s_logger.info(\"DomainRouterManager is configured.\");\n\n        return true;\n    }","commit_id":"3167c49687a1190002ef5a17ea3901a4464b4be5","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public boolean savePasswordToRouter(Network network, NicProfile nic, VirtualMachineProfile<UserVm> profile) throws ResourceUnavailableException {\n        DomainRouterVO router = _routerDao.findByNetwork(network.getId());\n        if (router == null) {\n            s_logger.warn(\"Unable save password, router doesn't exist in network \" + network.getId());\n            throw new CloudRuntimeException(\"Unable to save password to router\");\n        }\n        \n        UserVm userVm = profile.getVirtualMachine();\n        String password = (String) profile.getParameter(Param.VmPassword);\n        String encodedPassword = PasswordGenerator.rot13(password);\n\n        Commands cmds = new Commands(OnError.Continue);\n        SavePasswordCommand cmd = new SavePasswordCommand(encodedPassword, nic.getIp4Address(), userVm.getHostName());\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, router.getPrivateIpAddress());\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, router.getGuestIpAddress());\n        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n\n        DataCenterVO dcVo = _dcDao.findById(router.getDataCenterIdToDeployIn());\n        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n        \n        cmds.addCommand(\"password\", cmd);\n\n        return sendCommandsToRouter(router, cmds);\n    }","id":2549,"modified_method":"@Override\n    public boolean savePasswordToRouter(Network network, NicProfile nic, VirtualMachineProfile<UserVm> profile) throws ResourceUnavailableException {\n        List<DomainRouterVO> routers = _routerDao.listByNetworkAndState(network.getId(), null);\n        if (routers == null || routers.isEmpty()) {\n            s_logger.warn(\"Unable save password, router doesn't exist in network \" + network.getId());\n            throw new CloudRuntimeException(\"Unable to save password to router\");\n        }\n        \n        UserVm userVm = profile.getVirtualMachine();\n        String password = (String) profile.getParameter(Param.VmPassword);\n        String encodedPassword = PasswordGenerator.rot13(password);\n        DataCenter dc = _dcDao.findById(userVm.getDataCenterIdToDeployIn());\n\n        boolean result = true;\n        for (DomainRouterVO router : routers) {\n            boolean sendPassword = true;\n            if (dc.getNetworkType() == NetworkType.Basic && userVm.getPodIdToDeployIn().longValue() != router.getPodIdToDeployIn().longValue()) {\n                sendPassword = false;\n            }\n            \n            if (sendPassword) {\n                Commands cmds = new Commands(OnError.Continue);\n                SavePasswordCommand cmd = new SavePasswordCommand(encodedPassword, nic.getIp4Address(), userVm.getHostName());\n                cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, router.getPrivateIpAddress());\n                cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n                DataCenterVO dcVo = _dcDao.findById(router.getDataCenterIdToDeployIn());\n                cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n                cmds.addCommand(\"password\", cmd);\n\n                result = result && sendCommandsToRouter(router, cmds);\n            }\n        }\n        return result;\n    }","commit_id":"3167c49687a1190002ef5a17ea3901a4464b4be5","url":"https://github.com/apache/cloudstack"},{"original_method":"private void createDhcpEntriesCommands(DomainRouterVO router, Commands cmds) {\n        long networkId = router.getNetworkId();\n        List<UserVmVO> vms = _userVmDao.listByNetworkIdAndStates(networkId, State.Starting, State.Running, State.Migrating, State.Stopping);\n        for (UserVmVO vm : vms) {\n            NicVO nic = _nicDao.findByInstanceIdAndNetworkId(networkId, vm.getId());\n            if (nic != null) {\n                s_logger.debug(\"Creating dhcp entry for vm \" + vm + \" on domR \" + router + \".\");\n\n                DhcpEntryCommand dhcpCommand = new DhcpEntryCommand(nic.getMacAddress(), nic.getIp4Address(), vm.getHostName());\n                dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_IP, router.getPrivateIpAddress());\n                dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n                DataCenterVO dcVo = _dcDao.findById(router.getDataCenterIdToDeployIn());\n                dhcpCommand.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n\n                cmds.addCommand(\"dhcp\", dhcpCommand);\n            }\n        }\n    }","id":2550,"modified_method":"private void createDhcpEntriesCommands(DomainRouterVO router, Commands cmds) {\n        long networkId = router.getNetworkId();\n        List<UserVmVO> vms = _userVmDao.listByNetworkIdAndStates(networkId, State.Running, State.Migrating, State.Stopping);\n        DataCenterVO dc = _dcDao.findById(router.getDataCenterIdToDeployIn());\n        for (UserVmVO vm : vms) {\n            boolean createDhcp = true;\n            if (dc.getNetworkType() == NetworkType.Basic && router.getPodIdToDeployIn().longValue() != vm.getPodIdToDeployIn().longValue() && _dnsBasicZoneUpdates.equalsIgnoreCase(\"pod\")) {\n                createDhcp = false;\n            }\n            if (createDhcp) {\n                NicVO nic = _nicDao.findByInstanceIdAndNetworkId(networkId, vm.getId());\n                if (nic != null) {\n                    s_logger.debug(\"Creating dhcp entry for vm \" + vm + \" on domR \" + router + \".\");\n\n                    DhcpEntryCommand dhcpCommand = new DhcpEntryCommand(nic.getMacAddress(), nic.getIp4Address(), vm.getHostName());\n                    dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_IP, router.getPrivateIpAddress());\n                    dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n                    DataCenterVO dcVo = _dcDao.findById(router.getDataCenterIdToDeployIn());\n                    dhcpCommand.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n\n                    cmds.addCommand(\"dhcp\", dhcpCommand);\n                }\n            }\n        }\n    }","commit_id":"3167c49687a1190002ef5a17ea3901a4464b4be5","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n    public VirtualRouter addVirtualMachineIntoNetwork(Network network, NicProfile nic, VirtualMachineProfile<UserVm> profile, DeployDestination dest, ReservationContext context, Boolean startDhcp)\n            throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {\n\n        DomainRouterVO router = startDhcp ? deployDhcp(network, dest, profile.getOwner(), profile.getParameters()) : deployVirtualRouter(network, dest, profile.getOwner(), profile.getParameters());\n\n        _userVmDao.loadDetails((UserVmVO) profile.getVirtualMachine());\n\n        String password = (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword);\n        String userData = profile.getVirtualMachine().getUserData();\n        String sshPublicKey = profile.getVirtualMachine().getDetail(\"SSH.PublicKey\");\n        Commands cmds = new Commands(OnError.Stop);\n\n        String routerControlIpAddress = null;\n        List<NicVO> nics = _nicDao.listByVmId(router.getId());\n        for (NicVO n : nics) {\n            NetworkVO nc = _networkDao.findById(n.getNetworkId());\n            if (nc.getTrafficType() == TrafficType.Control) {\n                routerControlIpAddress = n.getIp4Address();\n            }\n        }\n\n        DhcpEntryCommand dhcpCommand = new DhcpEntryCommand(nic.getMacAddress(), nic.getIp4Address(), profile.getVirtualMachine().getHostName());\n        dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_IP, routerControlIpAddress);\n        dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, router.getGuestIpAddress());\n        dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n        \n        DataCenterVO dcVo = _dcDao.findById(router.getDataCenterIdToDeployIn());\n        dhcpCommand.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n        \n        cmds.addCommand(\"dhcp\", dhcpCommand);\n\n        // password should be set only on default network element\n        if (password != null && network.isDefault()) {\n            final String encodedPassword = PasswordGenerator.rot13(password);\n            SavePasswordCommand cmd = new SavePasswordCommand(encodedPassword, nic.getIp4Address(), profile.getVirtualMachine().getHostName());\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, router.getPrivateIpAddress());\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, router.getGuestIpAddress());\n            cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n            cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dcVo.getNetworkType().toString());\n            \n            cmds.addCommand(\"password\", cmd);\n        }\n\n        String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(profile.getServiceOfferingId()).getDisplayText();\n        String zoneName = _dcDao.findById(network.getDataCenterId()).getName();\n\n        cmds.addCommand(\n                \"vmdata\",\n                generateVmDataCommand(router, nic.getIp4Address(), userData, serviceOffering, zoneName, nic.getIp4Address(), profile.getVirtualMachine().getHostName(), profile.getVirtualMachine()\n                        .getInstanceName(), profile.getId(), sshPublicKey));\n\n        try {\n            _agentMgr.send(router.getHostId(), cmds);\n        } catch (OperationTimedoutException e) {\n            throw new AgentUnavailableException(\"Unable to reach the agent \", router.getHostId(), e);\n        }\n\n        Answer answer = cmds.getAnswer(\"dhcp\");\n        if (!answer.getResult()) {\n            s_logger.error(\"Unable to set dhcp entry for \" + profile + \" on domR: \" + router.getHostName() + \" due to \" + answer.getDetails());\n            throw new ResourceUnavailableException(\"Unable to set dhcp entry for \" + profile + \" due to \" + answer.getDetails(), DataCenter.class, router.getDataCenterIdToDeployIn());\n        }\n\n        answer = cmds.getAnswer(\"password\");\n        if (answer != null && !answer.getResult()) {\n            s_logger.error(\"Unable to set password for \" + profile + \" due to \" + answer.getDetails());\n            throw new ResourceUnavailableException(\"Unable to set password due to \" + answer.getDetails(), DataCenter.class, router.getDataCenterIdToDeployIn());\n        }\n\n        answer = cmds.getAnswer(\"vmdata\");\n        if (answer != null && !answer.getResult()) {\n            s_logger.error(\"Unable to set VM data for \" + profile + \" due to \" + answer.getDetails());\n            throw new ResourceUnavailableException(\"Unable to set VM data due to \" + answer.getDetails(), DataCenter.class, router.getDataCenterIdToDeployIn());\n        }\n        return router;\n    }","id":2551,"modified_method":"@Override\n    public VirtualRouter addVirtualMachineIntoNetwork(Network network, NicProfile nic, VirtualMachineProfile<UserVm> profile, DeployDestination dest, ReservationContext context, Boolean startDhcp)\n            throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {\n\n        DomainRouterVO startedRouter = startDhcp ? deployDhcp(network, dest, profile.getOwner(), profile.getParameters()) : deployVirtualRouter(network, dest, profile.getOwner(), profile.getParameters());\n        List<DomainRouterVO> routers = _routerDao.listByNetworkAndState(network.getId(), State.Running);\n        \n        \n        for (DomainRouterVO router : routers) {\n            boolean sendPasswordAndVmData = true;\n            boolean sendDnsDhcpData = true;\n            _userVmDao.loadDetails((UserVmVO) profile.getVirtualMachine());\n            \n            //for basic zone: \n            //1) send vm data/password information only to the dhcp in the same pod\n            //2) send dhcp/dns information to all routers in the cloudstack only when _dnsBasicZoneUpdates is set to \"all\" value\n            DataCenter dc = dest.getDataCenter();\n            if (dc.getNetworkType() == NetworkType.Basic) {\n                Long podId = dest.getPod().getId();\n                if (router.getPodIdToDeployIn().longValue() != podId.longValue()) {\n                    sendPasswordAndVmData = false;\n                    if (_dnsBasicZoneUpdates.equalsIgnoreCase(\"pod\")) {\n                        sendDnsDhcpData = false;\n                    }\n                }\n            }\n\n            Commands cmds = new Commands(OnError.Stop);\n\n            String routerControlIpAddress = null;\n            List<NicVO> nics = _nicDao.listByVmId(router.getId());\n            for (NicVO n : nics) {\n                NetworkVO nc = _networkDao.findById(n.getNetworkId());\n                if (nc.getTrafficType() == TrafficType.Control) {\n                    routerControlIpAddress = n.getIp4Address();\n                }\n            }\n\n            if (sendDnsDhcpData) {\n                DhcpEntryCommand dhcpCommand = new DhcpEntryCommand(nic.getMacAddress(), nic.getIp4Address(), profile.getVirtualMachine().getHostName());\n                dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_IP, routerControlIpAddress);\n                dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, router.getGuestIpAddress());\n                dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n                \n                dhcpCommand.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dc.getNetworkType().toString());\n                \n                cmds.addCommand(\"dhcp\", dhcpCommand);\n            }\n\n            if (sendPasswordAndVmData) {\n                String password = (String) profile.getParameter(VirtualMachineProfile.Param.VmPassword);\n                String userData = profile.getVirtualMachine().getUserData();\n                String sshPublicKey = profile.getVirtualMachine().getDetail(\"SSH.PublicKey\");\n                \n                // password should be set only on default network element\n                if (password != null && network.isDefault()) {\n                    final String encodedPassword = PasswordGenerator.rot13(password);\n                    SavePasswordCommand cmd = new SavePasswordCommand(encodedPassword, nic.getIp4Address(), profile.getVirtualMachine().getHostName());\n                    cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP, router.getPrivateIpAddress());\n                    cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP, router.getGuestIpAddress());\n                    cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME, router.getInstanceName());\n                    cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE, dc.getNetworkType().toString());\n                    \n                    cmds.addCommand(\"password\", cmd);\n                }\n\n                String serviceOffering = _serviceOfferingDao.findByIdIncludingRemoved(profile.getServiceOfferingId()).getDisplayText();\n                String zoneName = _dcDao.findById(network.getDataCenterId()).getName();\n\n                cmds.addCommand(\n                        \"vmdata\",\n                        generateVmDataCommand(router, nic.getIp4Address(), userData, serviceOffering, zoneName, nic.getIp4Address(), profile.getVirtualMachine().getHostName(), profile.getVirtualMachine()\n                                .getInstanceName(), profile.getId(), sshPublicKey));\n            }\n\n            if (cmds.size() > 0) {\n                try {\n                    _agentMgr.send(router.getHostId(), cmds);\n                } catch (OperationTimedoutException e) {\n                    throw new AgentUnavailableException(\"Unable to reach the agent \", router.getHostId(), e);\n                }\n\n                Answer answer = cmds.getAnswer(\"dhcp\");\n                if (!answer.getResult()) {\n                    s_logger.error(\"Unable to set dhcp entry for \" + profile + \" on domR: \" + router.getHostName() + \" due to \" + answer.getDetails());\n                    throw new ResourceUnavailableException(\"Unable to set dhcp entry for \" + profile + \" due to \" + answer.getDetails(), DataCenter.class, router.getDataCenterIdToDeployIn());\n                }\n\n                answer = cmds.getAnswer(\"password\");\n                if (answer != null && !answer.getResult()) {\n                    s_logger.error(\"Unable to set password for \" + profile + \" due to \" + answer.getDetails());\n                    throw new ResourceUnavailableException(\"Unable to set password due to \" + answer.getDetails(), DataCenter.class, router.getDataCenterIdToDeployIn());\n                }\n\n                answer = cmds.getAnswer(\"vmdata\");\n                if (answer != null && !answer.getResult()) {\n                    s_logger.error(\"Unable to set VM data for \" + profile + \" due to \" + answer.getDetails());\n                    throw new ResourceUnavailableException(\"Unable to set VM data due to \" + answer.getDetails(), DataCenter.class, router.getDataCenterIdToDeployIn());\n                }\n            }\n        }\n        \n        return startedRouter;\n    }","commit_id":"3167c49687a1190002ef5a17ea3901a4464b4be5","url":"https://github.com/apache/cloudstack"},{"original_method":"@Override\n        public String toString() {\n            return String.format(\"{exclude-rule %s}\", rule);\n        }","id":2552,"modified_method":"@Override\n        public String toString() {\n            return String.format(\"{exclude-rule %s:%s with matcher %s}\", moduleId, ivyArtifactName, matcher.getName());\n        }","commit_id":"98af2f57a95b269b92fd982ece5868bf288aa794","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n        protected boolean doAcceptsSameModulesAs(DefaultModuleResolutionFilter other) {\n            ExcludeRuleSpec excludeRuleSpec = (ExcludeRuleSpec) other;\n            // Can't use equals(), as DefaultExcludeRule.equals() does not consider the pattern matcher\n            return rule == excludeRuleSpec.rule;\n        }","id":2553,"modified_method":"@Override\n        protected boolean doAcceptsSameModulesAs(DefaultModuleResolutionFilter other) {\n            ExcludeRuleSpec otherSpec = (ExcludeRuleSpec) other;\n            return moduleId.equals(otherSpec.moduleId)\n                    && ivyArtifactName.equals(otherSpec.ivyArtifactName)\n                    && matcher.getName().equals(otherSpec.matcher.getName());\n        }","commit_id":"98af2f57a95b269b92fd982ece5868bf288aa794","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n        public int hashCode() {\n            return rule.hashCode();\n        }","id":2554,"modified_method":"@Override\n        public int hashCode() {\n            return moduleId.hashCode() ^ ivyArtifactName.hashCode();\n        }","commit_id":"98af2f57a95b269b92fd982ece5868bf288aa794","url":"https://github.com/gradle/gradle"},{"original_method":"private ExcludeRuleBackedSpec(Iterable<ExcludeRule> excludeRules) {\n            for (ExcludeRule rule : excludeRules) {\n                if (!(rule.getMatcher() instanceof ExactPatternMatcher)) {\n                    excludeSpecs.add(new ExcludeRuleSpec(rule));\n                    continue;\n                }\n                ArtifactId artifactId = rule.getId();\n                ModuleId moduleId = artifactId.getModuleId();\n                boolean wildcardOrganisation = MatcherHelper.matchesAnyExpression(moduleId.getOrganisation());\n                boolean wildcardModule = MatcherHelper.matchesAnyExpression(moduleId.getName());\n\n                if (wildcardOrganisation && wildcardModule) {\n                    excludeSpecs.add(new ExcludeRuleSpec(rule));\n                } else if (wildcardOrganisation) {\n                    excludeSpecs.add(new ModuleNameSpec(moduleId.getName()));\n                } else if (wildcardModule) {\n                    excludeSpecs.add(new GroupNameSpec(moduleId.getOrganisation()));\n                } else {\n                    boolean wildcardName = MatcherHelper.matchesAnyExpression(artifactId.getName());\n                    boolean wildcardType = MatcherHelper.matchesAnyExpression(artifactId.getType());\n                    boolean wildcardExt = MatcherHelper.matchesAnyExpression(artifactId.getExt());\n\n                    if(wildcardName && wildcardType && wildcardExt) {\n                        excludeSpecs.add(new ModuleIdSpec(moduleId.getOrganisation(), moduleId.getName()));\n                    } else {\n                        excludeSpecs.add(new ExcludeRuleSpec(rule));\n                    }\n                }\n            }\n        }","id":2555,"modified_method":"private ExcludeRuleBackedSpec(Iterable<ExcludeRule> excludeRules) {\n            for (ExcludeRule rule : excludeRules) {\n                if (!(rule.getMatcher() instanceof ExactPatternMatcher)) {\n                    excludeSpecs.add(new ExcludeRuleSpec(rule));\n                    continue;\n                }\n                ArtifactId artifactId = rule.getId();\n                ModuleId moduleId = artifactId.getModuleId();\n                boolean wildcardOrganisation = isWildcard(moduleId.getOrganisation());\n                boolean wildcardModule = isWildcard(moduleId.getName());\n                boolean wildcardArtifact = isWildcard(artifactId.getName()) && isWildcard(artifactId.getType()) && isWildcard(artifactId.getExt());\n\n                if (wildcardOrganisation && wildcardModule) {\n                    excludeSpecs.add(new ExcludeRuleSpec(rule));\n                } else if (wildcardOrganisation) {\n                    excludeSpecs.add(new ModuleNameSpec(moduleId.getName()));\n                } else if (wildcardModule) {\n                    excludeSpecs.add(new GroupNameSpec(moduleId.getOrganisation()));\n                } else if (wildcardArtifact) {\n                    excludeSpecs.add(new ModuleIdSpec(moduleId.getOrganisation(), moduleId.getName()));\n                } else {\n                    excludeSpecs.add(new ExcludeRuleSpec(rule));\n                }\n            }\n        }","commit_id":"98af2f57a95b269b92fd982ece5868bf288aa794","url":"https://github.com/gradle/gradle"},{"original_method":"private ExcludeRuleSpec(ExcludeRule rule) {\n            this.rule = rule;\n        }","id":2556,"modified_method":"private ExcludeRuleSpec(ExcludeRule rule) {\n            this.moduleId = DefaultModuleIdentifier.newId(rule.getId().getModuleId().getOrganisation(), rule.getId().getModuleId().getName());\n            this.ivyArtifactName = new DefaultIvyArtifactName(rule.getId().getName(), rule.getId().getType(), rule.getId().getExt());\n            this.matcher = rule.getMatcher();\n        }","commit_id":"98af2f57a95b269b92fd982ece5868bf288aa794","url":"https://github.com/gradle/gradle"},{"original_method":"public boolean acceptModule(ModuleIdentifier module) {\n            ArtifactId ruleArtifactId = rule.getId();\n            ModuleIdentifier ruleModuleId = new DefaultModuleIdentifier(ruleArtifactId.getModuleId().getOrganisation(), ruleArtifactId.getModuleId().getName());\n            boolean matchesRule = MatcherHelper.matches(rule.getMatcher(), ruleModuleId, module);\n            return !(matchesRule\n                    && MatcherHelper.matchesAnyExpression(ruleArtifactId.getName())\n                    && MatcherHelper.matchesAnyExpression(ruleArtifactId.getType())\n                    && MatcherHelper.matchesAnyExpression(ruleArtifactId.getExt()));\n        }","id":2557,"modified_method":"public boolean acceptModule(ModuleIdentifier module) {\n            return !(matches(moduleId.getGroup(), module.getGroup())\n                    && matches(moduleId.getName(), module.getName())\n                    && isWildcard(ivyArtifactName.getName())\n                    && isWildcard(ivyArtifactName.getType())\n                    && isWildcard(ivyArtifactName.getExtension()));\n        }","commit_id":"98af2f57a95b269b92fd982ece5868bf288aa794","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n        public boolean equals(Object o) {\n            if (o == this) {\n                return true;\n            }\n            if (o == null || o.getClass() != getClass()) {\n                return false;\n            }\n            ExcludeRuleSpec other = (ExcludeRuleSpec) o;\n            // Can't use equals(), as DefaultExcludeRule.equals() does not consider the pattern matcher\n            return rule == other.rule;\n        }","id":2558,"modified_method":"@Override\n        public boolean equals(Object o) {\n            if (o == this) {\n                return true;\n            }\n            if (o == null || o.getClass() != getClass()) {\n                return false;\n            }\n            ExcludeRuleSpec other = (ExcludeRuleSpec) o;\n            return doAcceptsSameModulesAs(other);\n        }","commit_id":"98af2f57a95b269b92fd982ece5868bf288aa794","url":"https://github.com/gradle/gradle"},{"original_method":"public boolean acceptArtifact(ModuleIdentifier module, IvyArtifactName artifact) {\n            ArtifactId ruleArtifactId = rule.getId();\n            ModuleIdentifier ruleModuleId = new DefaultModuleIdentifier(ruleArtifactId.getModuleId().getOrganisation(), ruleArtifactId.getModuleId().getName());\n            IvyArtifactName ruleIvyArtifactName = new DefaultIvyArtifactName(ruleArtifactId.getName(), ruleArtifactId.getType(), ruleArtifactId.getExt());\n            return !(MatcherHelper.matches(rule.getMatcher(), ruleModuleId, module)\n                    && MatcherHelper.matches(rule.getMatcher(), ruleIvyArtifactName, artifact));\n        }","id":2559,"modified_method":"public boolean acceptArtifact(ModuleIdentifier module, IvyArtifactName artifact) {\n            return !(matches(moduleId.getGroup(), module.getGroup())\n                    && matches(moduleId.getName(), module.getName())\n                    && matches(ivyArtifactName.getName(), artifact.getName())\n                    && matches(ivyArtifactName.getExtension(), artifact.getExtension())\n                    && matches(ivyArtifactName.getType(), artifact.getType()));\n        }","commit_id":"98af2f57a95b269b92fd982ece5868bf288aa794","url":"https://github.com/gradle/gradle"},{"original_method":"/**\n\t * Construct a cache {@link Element} from the key, data, and time to live.\n\t * \n\t * @param cacheKey\n\t * @param data\n\t * @param timeToLive\n\t * @return an appropriate {@link Element}, never null\n\t */\n\tprotected Element constructCacheElement(Serializable cacheKey, CachedPortletData data, int timeToLive) {\n\t\tif(timeToLive <= 0) {\n\t\t\treturn new Element(cacheKey, data);\n\t\t}\n\t\treturn new Element(cacheKey, data, null, null, timeToLive);\n\t}","id":2560,"modified_method":"/**\n\t * Construct an appropriate Cache {@link Element} for the cacheKey and data.\n\t * The element's ttl will be set depending on whether expiration or validation method is indicated from the CacheControl and the cache's configuration.\n\t * \n\t * @param cacheKey\n\t * @param data\n\t * @param cacheConfig\n\t * @param cacheControl\n\t * @return\n\t */\n\tprotected Element constructCacheElement(Serializable cacheKey, CachedPortletData data, CacheConfiguration cacheConfig, CacheControl cacheControl) {\n\t\t// if validation method is being triggered, ignore expirationTime and defer to cache configuration\n\t\tif(StringUtils.isNotBlank(cacheControl.getETag())) {\n\t\t\treturn new Element(cacheKey, data);\n\t\t}\n\t\t\n\t\tInteger cacheControlTTL = cacheControl.getExpirationTime();\n\t\tif(cacheControlTTL < 0) {\n\t\t\t// using expiration method, negative value for CacheControl#expirationTime means \"forever\" (e.g. ignore and defer to cache configuration)\n\t\t\treturn new Element(cacheKey, data);\n\t\t}\n\t\tLong cacheConfigTTL = cacheConfig.getTimeToLiveSeconds();\n\t\tLong min = Math.min(cacheConfigTTL, cacheControlTTL.longValue());\n\t\t\n\t\treturn new Element(cacheKey, data, null, null, min.intValue());\n\t}","commit_id":"370cb11a3bf97df5de68ac0a771e298849b1e700","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n\tpublic void cachePortletResourceOutput(IPortletWindowId portletWindowId,\n\t\t\tHttpServletRequest httpRequest, byte[] content, String contentType, Map<String, String[]> headers, CacheControl cacheControl) {\n\t\tfinal IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId);\n        \n        final IPortletEntityId entityId = portletWindow.getPortletEntityId();\n        final IPortletEntity entity = this.portletEntityRegistry.getPortletEntity(httpRequest, entityId);\n        final IPortletDefinitionId definitionId = entity.getPortletDefinitionId();\t\n\t\t\n        final int expirationTime = cacheControl.getExpirationTime();\n\t\tCachedPortletData newData = new CachedPortletData();\n\t\tnewData.setEtag(cacheControl.getETag());\n\t\tnewData.setByteData(content);\n\t\tnewData.setExpirationTimeSeconds(expirationTime);\n\t\tnewData.setTimeStored(new Date());\n\t\tnewData.setContentType(contentType);\n\t\tnewData.setHeaders(headers);\n\t\t\n\t\t\n\t\tif(cacheControl.isPublicScope()) {\n\t\t\tSerializable publicCacheKey = generatePublicScopePortletDataCacheKey(definitionId, portletWindow.getRenderParameters(), portletWindow.getPublicRenderParameters());\n\t\t\tint ttl = findMinimumCacheTTL(publicScopePortletResourceOutputCache.getCacheConfiguration(), cacheControl);\n\t\t\tElement publicCacheElement = constructCacheElement(publicCacheKey, newData, ttl);\n\t\t\tthis.publicScopePortletResourceOutputCache.put(publicCacheElement);\t\t\n\t\t} else {\n\t\t\tSerializable privateCacheKey = generatePrivateScopePortletDataCacheKey(httpRequest, portletWindowId, entityId, definitionId, portletWindow.getRenderParameters());\n\t\t\tint ttl = findMinimumCacheTTL(privateScopePortletResourceOutputCache.getCacheConfiguration(), cacheControl);\n\t\t\tElement privateCacheElement = constructCacheElement(privateCacheKey, newData, ttl);\n\t\t\tthis.privateScopePortletResourceOutputCache.put(privateCacheElement);\n\t\t}\n\t}","id":2561,"modified_method":"@Override\n\tpublic void cachePortletResourceOutput(IPortletWindowId portletWindowId,\n\t\t\tHttpServletRequest httpRequest, byte[] content, String contentType, Map<String, String[]> headers, CacheControl cacheControl) {\n\t\tfinal IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId);\n        \n        final IPortletEntityId entityId = portletWindow.getPortletEntityId();\n        final IPortletEntity entity = this.portletEntityRegistry.getPortletEntity(httpRequest, entityId);\n        final IPortletDefinitionId definitionId = entity.getPortletDefinitionId();\t\n\t\t\n        final int expirationTime = cacheControl.getExpirationTime();\n\t\tCachedPortletData newData = new CachedPortletData();\n\t\tnewData.setEtag(cacheControl.getETag());\n\t\tnewData.setByteData(content);\n\t\tnewData.setExpirationTimeSeconds(expirationTime);\n\t\tnewData.setTimeStored(new Date());\n\t\tnewData.setContentType(contentType);\n\t\tnewData.setHeaders(headers);\n\t\t\n\t\tif(cacheControl.isPublicScope()) {\n\t\t\tnewData.setCacheConfigurationMaxTTL(new Long(publicScopePortletResourceOutputCache.getCacheConfiguration().getTimeToLiveSeconds()).intValue());\n\t\t\tSerializable publicCacheKey = generatePublicScopePortletDataCacheKey(definitionId, portletWindow.getRenderParameters(), portletWindow.getPublicRenderParameters());\n\t\t\tElement publicCacheElement = constructCacheElement(publicCacheKey, newData, publicScopePortletResourceOutputCache.getCacheConfiguration(), cacheControl);\n\t\t\tthis.publicScopePortletResourceOutputCache.put(publicCacheElement);\t\t\n\t\t} else {\n\t\t\tnewData.setCacheConfigurationMaxTTL(new Long(privateScopePortletResourceOutputCache.getCacheConfiguration().getTimeToLiveSeconds()).intValue());\n\t\t\tSerializable privateCacheKey = generatePrivateScopePortletDataCacheKey(httpRequest, portletWindowId, entityId, definitionId, portletWindow.getRenderParameters());\n\t\t\tElement privateCacheElement = constructCacheElement(privateCacheKey, newData, privateScopePortletResourceOutputCache.getCacheConfiguration(), cacheControl);\n\t\t\tthis.privateScopePortletResourceOutputCache.put(privateCacheElement);\n\t\t}\n\t}","commit_id":"370cb11a3bf97df5de68ac0a771e298849b1e700","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n\tpublic CachedPortletData getCachedPortletResourceOutput(\n\t\t\tIPortletWindowId portletWindowId, HttpServletRequest httpRequest) {\n\t\tfinal IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId);\n        \n        final IPortletEntityId entityId = portletWindow.getPortletEntityId();\n        final IPortletEntity entity = this.portletEntityRegistry.getPortletEntity(httpRequest, entityId);\n        final IPortletDefinitionId definitionId = entity.getPortletDefinitionId();\t\n\t\t\n\t\tSerializable publicCacheKey = generatePublicScopePortletDataCacheKey(definitionId, portletWindow.getRenderParameters(), portletWindow.getPublicRenderParameters());\n\t\tElement publicCacheElement = this.publicScopePortletResourceOutputCache.get(publicCacheKey);\n\t\tif(publicCacheElement != null) {\n\t\t\tif(publicCacheElement.isExpired()) {\n\t\t\t\tthis.publicScopePortletResourceOutputCache.remove(publicCacheKey);\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\treturn (CachedPortletData) publicCacheElement.getValue();\n\t\t\t}\n\t\t} else {\n\t\t\t// public cache contained no content, check private\n\t\t\tSerializable privateCacheKey = generatePrivateScopePortletDataCacheKey(httpRequest, portletWindowId, entityId, definitionId, portletWindow.getRenderParameters());\n\t\t\tElement privateCacheElement = this.privateScopePortletResourceOutputCache.get(privateCacheKey);\n\t\t\tif(privateCacheElement != null) {\n\t\t\t\tif(privateCacheElement.isExpired()) {\n\t\t\t\t\tthis.privateScopePortletResourceOutputCache.remove(privateCacheKey);\n\t\t\t\t\treturn null;\n\t\t\t\t} else {\n\t\t\t\t\treturn (CachedPortletData) privateCacheElement.getValue();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn null;\n\t}","id":2562,"modified_method":"@Override\n\tpublic CachedPortletData getCachedPortletResourceOutput(\n\t\t\tIPortletWindowId portletWindowId, HttpServletRequest httpRequest) {\n\t\tfinal IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId);\n        \n        final IPortletEntityId entityId = portletWindow.getPortletEntityId();\n        final IPortletEntity entity = this.portletEntityRegistry.getPortletEntity(httpRequest, entityId);\n        final IPortletDefinitionId definitionId = entity.getPortletDefinitionId();\t\n\t\t\n\t\tSerializable publicCacheKey = generatePublicScopePortletDataCacheKey(definitionId, portletWindow.getRenderParameters(), portletWindow.getPublicRenderParameters());\n\t\tElement publicCacheElement = this.publicScopePortletResourceOutputCache.get(publicCacheKey);\t\n\t\tif(publicCacheElement != null) {\n\t\t\tCachedPortletData cachedPortletData = (CachedPortletData) publicCacheElement.getValue();\n\t\t\t// only remove from cache if not using validation method\n\t\t\tif(publicCacheElement.isExpired() && StringUtils.isBlank(cachedPortletData.getEtag())) {\n\t\t\t\tthis.publicScopePortletResourceOutputCache.remove(publicCacheKey);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn cachedPortletData;\n\t\t} else {\n\t\t\t// public cache contained no content, check private\n\t\t\tSerializable privateCacheKey = generatePrivateScopePortletDataCacheKey(httpRequest, portletWindowId, entityId, definitionId, portletWindow.getRenderParameters());\n\t\t\tElement privateCacheElement = this.privateScopePortletResourceOutputCache.get(privateCacheKey);\n\t\t\tif(privateCacheElement != null) {\n\t\t\t\tCachedPortletData cachedPortletData = (CachedPortletData) privateCacheElement.getValue();\n\t\t\t\tif(privateCacheElement.isExpired() && StringUtils.isBlank(cachedPortletData.getEtag())) {\n\t\t\t\t\tthis.privateScopePortletResourceOutputCache.remove(privateCacheKey);\n\t\t\t\t\treturn null;\n\t\t\t\t} \t\n\t\t\t\treturn cachedPortletData;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn null;\n\t}","commit_id":"370cb11a3bf97df5de68ac0a771e298849b1e700","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n\tpublic void cachePortletRenderOutput(IPortletWindowId portletWindowId,\n\t\t\tHttpServletRequest httpRequest, String content,\n\t\t\tCacheControl cacheControl) {\n\t\tfinal IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId);\n        \n        final IPortletEntityId entityId = portletWindow.getPortletEntityId();\n        final IPortletEntity entity = this.portletEntityRegistry.getPortletEntity(httpRequest, entityId);\n        final IPortletDefinitionId definitionId = entity.getPortletDefinitionId();\t\n\t\t\n        final int expirationTime = cacheControl.getExpirationTime();\n\t\tCachedPortletData newData = new CachedPortletData();\n\t\tnewData.setExpirationTimeSeconds(expirationTime);\n\t\tnewData.setTimeStored(new Date());\n\t\tnewData.setStringData(content);\n\t\tnewData.setEtag(cacheControl.getETag());\n\t\t\n\t\tif(cacheControl.isPublicScope()) {\n\t\t\tSerializable publicCacheKey = generatePublicScopePortletDataCacheKey(definitionId, portletWindow.getRenderParameters(), portletWindow.getPublicRenderParameters());\n\t\t\tint ttl = findMinimumCacheTTL(publicScopePortletRenderOutputCache.getCacheConfiguration(), cacheControl);\n\t\t\tElement publicCacheElement = constructCacheElement(publicCacheKey, newData, ttl);\n\t\t\tthis.publicScopePortletRenderOutputCache.put(publicCacheElement);\t\t\n\t\t} else {\n\t\t\tSerializable privateCacheKey = generatePrivateScopePortletDataCacheKey(httpRequest, portletWindowId, entityId, definitionId, portletWindow.getRenderParameters());\n\t\t\tint ttl = findMinimumCacheTTL(privateScopePortletRenderOutputCache.getCacheConfiguration(), cacheControl);\n\t\t\tElement privateCacheElement = constructCacheElement(privateCacheKey, newData, ttl);\n\t\t\tthis.privateScopePortletRenderOutputCache.put(privateCacheElement);\n\t\t}\n\t}","id":2563,"modified_method":"@Override\n\tpublic void cachePortletRenderOutput(IPortletWindowId portletWindowId,\n\t\t\tHttpServletRequest httpRequest, String content,\n\t\t\tCacheControl cacheControl) {\n\t\tfinal IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpRequest, portletWindowId);\n        \n        final IPortletEntityId entityId = portletWindow.getPortletEntityId();\n        final IPortletEntity entity = this.portletEntityRegistry.getPortletEntity(httpRequest, entityId);\n        final IPortletDefinitionId definitionId = entity.getPortletDefinitionId();\t\n\t\t\n        final int expirationTime = cacheControl.getExpirationTime();\n\t\tCachedPortletData newData = new CachedPortletData();\n\t\tnewData.setExpirationTimeSeconds(expirationTime);\n\t\tnewData.setTimeStored(new Date());\n\t\tnewData.setStringData(content);\n\t\tnewData.setEtag(cacheControl.getETag());\n\t\t\n\t\tif(cacheControl.isPublicScope()) {\n\t\t\tnewData.setCacheConfigurationMaxTTL(new Long(publicScopePortletRenderOutputCache.getCacheConfiguration().getTimeToLiveSeconds()).intValue());\n\t\t\tSerializable publicCacheKey = generatePublicScopePortletDataCacheKey(definitionId, portletWindow.getRenderParameters(), portletWindow.getPublicRenderParameters());\n\t\t\tElement publicCacheElement = constructCacheElement(publicCacheKey, newData, publicScopePortletRenderOutputCache.getCacheConfiguration(), cacheControl);\n\t\t\tthis.publicScopePortletRenderOutputCache.put(publicCacheElement);\t\t\n\t\t} else {\n\t\t\tnewData.setCacheConfigurationMaxTTL(new Long(privateScopePortletRenderOutputCache.getCacheConfiguration().getTimeToLiveSeconds()).intValue());\n\t\t\tSerializable privateCacheKey = generatePrivateScopePortletDataCacheKey(httpRequest, portletWindowId, entityId, definitionId, portletWindow.getRenderParameters());\n\t\t\tElement privateCacheElement = constructCacheElement(privateCacheKey, newData, privateScopePortletRenderOutputCache.getCacheConfiguration(), cacheControl);\n\t\t\tthis.privateScopePortletRenderOutputCache.put(privateCacheElement);\n\t\t}\n\t}","commit_id":"370cb11a3bf97df5de68ac0a771e298849b1e700","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n\t * Mimic {@link PortletContainer#doServeResource(PortletWindow, HttpServletRequest, HttpServletResponse)} and write\n\t * the cached content out to the response.\n\t * \n\t * @param httpServletRequest\n\t * @param httpServletResponse\n\t * @param cachedPortletData\n\t * @param portletWindow\n\t * @return the milliseconds \n\t */\n\tprotected long doServeResourceCachedOutput(IPortletWindowId portletWindowId, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, CachedPortletData cachedPortletData, IPortletWindow portletWindow) {\n\t\tlong start = System.currentTimeMillis();\n\t\t\n\t\tfinal String ifNoneMatch = httpServletRequest.getHeader(\"If-None-Match\");\n\t\tfinal String etag = cachedPortletData.getEtag();\n\t\tif(StringUtils.isNotBlank(ifNoneMatch) && ifNoneMatch.equals(etag)) {\n\t\t\t// browser already has the content! send a 304\n\t\t\thttpServletResponse.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n\t\t\treturn System.currentTimeMillis() - start;\n\t\t}\n\t\t\n\t\thttpServletResponse.setContentType(cachedPortletData.getContentType());\n\t\tMap<String, String[]> headers = cachedPortletData.getHeaders();\n\t\tfor(Entry<String, String[]> header: headers.entrySet()) {\n\t\t\tfinal String headerName = header.getKey();\n\t\t\tfinal String [] headerValues = header.getValue();\n\t\t\tfor(String value: headerValues) {\n\t\t\t\thttpServletResponse.addHeader(headerName, value);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Set the ETag again\n\t\tif (etag != null) {\n\t\t\thttpServletResponse.setHeader(\"ETag\", etag);\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tServletOutputStream servletOutputStream = httpServletResponse.getOutputStream();\n\t\t\tservletOutputStream.write(cachedPortletData.getByteData());\n\t\t} catch (IOException e) {\n\t\t\t throw new PortletDispatchException(\"The portlet window '\" + portletWindow + \"' threw an exception while writing cached resource content.\", portletWindow, e);\n\t\t} \n\t\t\n\t\tfinal long executionTime = System.currentTimeMillis() - start;\n        \n        final IPortalRequestInfo portalRequestInfo = this.urlSyntaxProvider.getPortalRequestInfo(httpServletRequest);\n        final String resourceId = getResourceId(portletWindowId, portalRequestInfo);\n        final IPortletEntity portletEntity = portletWindow.getPortletEntity();\n        final IPortletDefinition portletDefinition = portletEntity.getPortletDefinition();\n        final String fname = portletDefinition.getFName();\n        final Map<String, List<String>> parameters = this.getParameters(httpServletRequest, portletWindowId, false);\n        this.portalEventFactory.publishPortletResourceExecutionEvent(httpServletRequest, this, fname, executionTime, parameters, resourceId, true);\n        \n        return executionTime;\n\t}","id":2564,"modified_method":"/**\n\t * Mimic {@link PortletContainer#doServeResource(PortletWindow, HttpServletRequest, HttpServletResponse)} and write\n\t * the cached content out to the response.\n\t * \n\t * @param httpServletRequest\n\t * @param httpServletResponse\n\t * @param cachedPortletData\n\t * @param portletWindow\n\t * @return the milliseconds \n\t */\n\tprotected long doServeResourceCachedOutput(IPortletWindowId portletWindowId, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, CachedPortletData cachedPortletData, IPortletWindow portletWindow) {\n\t\tlong start = System.currentTimeMillis();\n\t\t\n\t\tfinal String etag = cachedPortletData.getEtag();\n\t\tif(StringUtils.isNotBlank(etag)) {\n\t\t\tfinal String ifNoneMatch = httpServletRequest.getHeader(IF_NONE_MATCH);\n\t\t\tif(etag.equals(ifNoneMatch)) {\n\t\t\t\t// browser already has the content! send a 304\n\t\t\t\tif(logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"returning 304 for portletWindowId \" + portletWindowId + \", ifNoneMatch header=\" + ifNoneMatch + \", \" + cachedPortletData.getEtag() + \", cachedPortletData#expired=\" + cachedPortletData.isExpired());\n\t\t\t\t}\n\t\t\t\thttpServletResponse.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n\t\t\t\tfinal long executionTime = System.currentTimeMillis() - start;\n\t\t\t\tpublishResourceExecutionEvent(httpServletRequest, portletWindow, executionTime, true);\n\t\t\t\treturn executionTime;\n\t\t\t}\n\t\t}\n\t\t\n\t\thttpServletResponse.setContentType(cachedPortletData.getContentType());\n\t\tMap<String, String[]> headers = cachedPortletData.getHeaders();\n\t\tfor(Entry<String, String[]> header: headers.entrySet()) {\n\t\t\tfinal String headerName = header.getKey();\n\t\t\tfinal String [] headerValues = header.getValue();\n\t\t\tfor(String value: headerValues) {\n\t\t\t\thttpServletResponse.addHeader(headerName, value);\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Set the ETag again\n\t\tif (etag != null) {\n\t\t\thttpServletResponse.setHeader(\"ETag\", etag);\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tServletOutputStream servletOutputStream = httpServletResponse.getOutputStream();\n\t\t\tservletOutputStream.write(cachedPortletData.getByteData());\n\t\t} catch (IOException e) {\n\t\t\t throw new PortletDispatchException(\"The portlet window '\" + portletWindow + \"' threw an exception while writing cached resource content.\", portletWindow, e);\n\t\t} \n\t\t\n\t\tfinal long executionTime = System.currentTimeMillis() - start;\n        \n\t\tpublishResourceExecutionEvent(httpServletRequest, portletWindow, executionTime, true);\n        \n        return executionTime;\n\t}","commit_id":"370cb11a3bf97df5de68ac0a771e298849b1e700","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n\tpublic long doServeResource(\n\t\t\tIPortletWindowId portletWindowId,\n\t\t\tHttpServletRequest httpServletRequest,\n\t\t\tHttpServletResponse httpServletResponse) {\n\t\tfinal IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpServletRequest, portletWindowId);\n\t\tCachedPortletData cachedPortletData = this.portletCacheControlService.getCachedPortletResourceOutput(portletWindowId, httpServletRequest);\n    \tif(cachedPortletData != null && !cachedPortletData.isExpired()) {\n    \t\t// regardless if etag is set or not, we need to replay cachedPortlet Data if it's not expired\n    \t\treturn doServeResourceCachedOutput(portletWindowId, httpServletRequest, httpServletResponse, cachedPortletData, portletWindow);\n    \t}\n\t\t\n    \t// cached data is either null or expired\n    \t// have to invoke PortletContainer#doServeResource\n    \t\n    \t// check cacheControl AFTER portlet serveResource to see if the portlet said \"useCachedContent\"\n        CacheControl cacheControl = this.portletCacheControlService.getPortletResourceCacheControl(portletWindowId, httpServletRequest, httpServletResponse);\n        // construct stream to capture output\n\t\tLimitedBufferOutputStream captureStream = new LimitedBufferOutputStream(this.portletCacheControlService.getCacheSizeThreshold());\n       \n\t    final long start = System.currentTimeMillis();\n\t\ttry {\n\t\t\t//Setup the request and response\n\t        httpServletRequest = this.setupPortletRequest(httpServletRequest);\n\t        // use overloaded setup to override the outputstream\n\t        PortletHttpServletResponseWrapper responseWrapper = this.setupPortletResponse(httpServletResponse, captureStream, true);\n\t\t\tthis.portletContainer.doServeResource(portletWindow.getPlutoPortletWindow(), httpServletRequest, responseWrapper);\n\t\t\t// check cacheControls\n\t\t\t\n\t\t\tboolean useCachedContent = cacheControl.useCachedContent();\n\t        boolean cachedPortletDataNotNull = cachedPortletData != null;\n\t        // we actually don't care if the content is expired at this point, the two prior fields will tell us if the portlet wants us to replay cached content\n\t        if(logger.isDebugEnabled()) {\n\t        \tlogger.debug(portletWindowId + \" useCachedContent=\" + useCachedContent + \", cachedPortletDataNotNull=\" + cachedPortletDataNotNull);\n\t        }\n\t        if(useCachedContent && cachedPortletDataNotNull) {\n\t        \t// the portlet could theoretically set an etag but write to the response erroneously\n\t        \t// check that the response hasn't already been written/committed\n\t        \tif(responseWrapper.isCommitted()) {\n\t        \t\tthrow new PortletDispatchException(\"The portlet window '\"+ portletWindow + \"' indicated it wanted the portlet container to send the cached content, however the portlet wrote content anyways. This is a bug in the portlet; if it sets an etag on the response and sets useCachedContent to true it should not commit the response.\", portletWindow);\n\t        \t}\n\t        \treturn doServeResourceCachedOutput(portletWindowId, httpServletRequest, responseWrapper, cachedPortletData, portletWindow);\n\t        }\n        \tboolean shouldCache = this.portletCacheControlService.shouldOutputBeCached(cacheControl);\n        \t// put the captured content in the cache\n        \tif(shouldCache && !captureStream.isThresholdExceeded()) {\n        \t\tthis.portletCacheControlService.cachePortletResourceOutput(portletWindowId, httpServletRequest, captureStream.getCapturedContent(), responseWrapper.getContentType(), responseWrapper.getCapturedHeaders(), cacheControl);\n        \t}\n\t\t}\n\t\tcatch (PortletException pe) {\n            throw new PortletDispatchException(\"The portlet window '\" + portletWindow + \"' threw an exception while executing serveResource.\", portletWindow, pe);\n        }\n        catch (PortletContainerException pce) {\n            throw new PortletDispatchException(\"The portlet container threw an exception while executing serveResource on portlet window '\" + portletWindow + \"'.\", portletWindow, pce);\n        }\n        catch (IOException ioe) {\n            throw new PortletDispatchException(\"The portlet window '\" + portletWindow + \"' threw an exception while executing serveResource.\", portletWindow, ioe);\n        }\n\t\tfinal long executionTime = System.currentTimeMillis() - start;\n\t\t\n\t\tfinal IPortalRequestInfo portalRequestInfo = this.urlSyntaxProvider.getPortalRequestInfo(httpServletRequest);\n\t\tfinal String resourceId = getResourceId(portletWindowId, portalRequestInfo);\n        final IPortletEntity portletEntity = portletWindow.getPortletEntity();\n        final IPortletDefinition portletDefinition = portletEntity.getPortletDefinition();\n        final String fname = portletDefinition.getFName();\n        final Map<String, List<String>> parameters = this.getParameters(httpServletRequest, portletWindowId, false);\n        this.portalEventFactory.publishPortletResourceExecutionEvent(httpServletRequest, this, fname, executionTime, parameters, resourceId, false);\n        \n        return executionTime;\n\t}","id":2565,"modified_method":"@Override\n\tpublic long doServeResource(\n\t\t\tIPortletWindowId portletWindowId,\n\t\t\tHttpServletRequest httpServletRequest,\n\t\t\tHttpServletResponse httpServletResponse) {\n\t\tfinal IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpServletRequest, portletWindowId);\n\t\tCachedPortletData cachedPortletData = this.portletCacheControlService.getCachedPortletResourceOutput(portletWindowId, httpServletRequest);\n    \tif(cachedPortletData != null && !cachedPortletData.isExpired()) {\n    \t\tif(logger.isDebugEnabled()) {\n    \t\t\tlogger.debug(\"cached content available and not expired for portletWindowId \" + portletWindowId );\n    \t\t}\n    \t\treturn doServeResourceCachedOutput(portletWindowId, httpServletRequest, httpServletResponse, cachedPortletData, portletWindow);\n    \t}\n\t\t\n    \t// cached data is either null or expired\n    \t// have to invoke PortletContainer#doServeResource\n        CacheControl cacheControl = this.portletCacheControlService.getPortletResourceCacheControl(portletWindowId, httpServletRequest, httpServletResponse);\n        // construct stream to capture output\n\t\tLimitedBufferOutputStream captureStream = new LimitedBufferOutputStream(this.portletCacheControlService.getCacheSizeThreshold());\n       \n\t    final long start = System.currentTimeMillis();\n\t\ttry {\n\t\t\t//Setup the request and response\n\t        httpServletRequest = this.setupPortletRequest(httpServletRequest);\n\t        // use overloaded setup to override the outputstream\n\t        PortletHttpServletResponseWrapper responseWrapper = this.setupPortletResponse(httpServletResponse, captureStream, true);\n\t\t\tthis.portletContainer.doServeResource(portletWindow.getPlutoPortletWindow(), httpServletRequest, responseWrapper);\n\t\t\t// check cacheControl AFTER portlet serveResource to see if the portlet said \"useCachedContent\"\n\t\t\tboolean useCachedContent = cacheControl.useCachedContent();\n\t\t\tif(useCachedContent && cachedPortletData == null) {\n\t\t\t\tthrow new PortletDispatchException(\"The portlet window '\"+ portletWindow + \"' indicated via CacheControl#useCachedContent that the portal should render cached content, however there is no cached content to return. This is a portlet bug.\", portletWindow);\n\t\t\t}\n\t       \n\t        // we actually don't care if the content is expired at this point, the two prior fields will tell us if the portlet wants us to replay cached content\n\t        if(useCachedContent) {\n\t        \t// the portlet could theoretically set an etag but write to the response erroneously\n\t        \t// check that the response hasn't already been written/committed\n\t        \tif(responseWrapper.isCommitted()) {\n\t        \t\tthrow new PortletDispatchException(\"The portlet window '\"+ portletWindow + \"' indicated it wanted the portlet container to send the cached content, however the portlet wrote content anyways. This is a bug in the portlet; if it sets an etag on the response and sets useCachedContent to true it should not commit the response.\", portletWindow);\n\t        \t}\n\t        \tif(logger.isDebugEnabled()) {\n\t        \t\tlogger.debug(\"expired cached content deemed still valid by portletWindowId \" + portletWindowId + \", updated expiration time\");\n\t        \t}\n\t        \tcachedPortletData.updateExpirationTime(cacheControl.getExpirationTime());\n\t        \treturn doServeResourceCachedOutput(portletWindowId, httpServletRequest, responseWrapper, cachedPortletData, portletWindow);\n\t        } else {\n\t        \tboolean shouldCache = this.portletCacheControlService.shouldOutputBeCached(cacheControl);\n\t        \t// put the captured content in the cache\n\t        \tif(shouldCache && !captureStream.isThresholdExceeded()) {\n\t        \t\tthis.portletCacheControlService.cachePortletResourceOutput(portletWindowId, httpServletRequest, captureStream.getCapturedContent(), responseWrapper.getContentType(), responseWrapper.getCapturedHeaders(), cacheControl);\n\t        \t}\n\t        }\n\t\t}\n\t\tcatch (PortletException pe) {\n            throw new PortletDispatchException(\"The portlet window '\" + portletWindow + \"' threw an exception while executing serveResource.\", portletWindow, pe);\n        }\n        catch (PortletContainerException pce) {\n            throw new PortletDispatchException(\"The portlet container threw an exception while executing serveResource on portlet window '\" + portletWindow + \"'.\", portletWindow, pce);\n        }\n        catch (IOException ioe) {\n            throw new PortletDispatchException(\"The portlet window '\" + portletWindow + \"' threw an exception while executing serveResource.\", portletWindow, ioe);\n        }\n\t\tfinal long executionTime = System.currentTimeMillis() - start;\n\t\t\n\t\tpublishResourceExecutionEvent(httpServletRequest, portletWindow, executionTime, false);\n        \n        return executionTime;\n\t}","commit_id":"370cb11a3bf97df5de68ac0a771e298849b1e700","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n    * Interacts with the {@link IPortletCacheControlService} to determine if the markup should come from cache or not.\n    * If cached data doesn't exist or is expired, this delegates to {@link #doRenderMarkupInternal(IPortletWindowId, HttpServletRequest, HttpServletResponse, Writer)}.\n    * \n    * (non-Javadoc)\n    * @see org.jasig.portal.portlet.rendering.IPortletRenderer#doRenderMarkup(org.jasig.portal.portlet.om.IPortletWindowId, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.io.Writer)\n    */\n    @Override\n    public PortletRenderResult doRenderMarkup(IPortletWindowId portletWindowId, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Writer writer) {\n    \tCachedPortletData cachedPortletData = this.portletCacheControlService.getCachedPortletRenderOutput(portletWindowId, httpServletRequest);\n    \tif(cachedPortletData != null && !cachedPortletData.isExpired()) {\n    \t\t// regardless if etag is set or not, we need to replay cachedPortlet Data if it's not expired\n    \t\treturn doRenderMarkupReplayCachedContent(portletWindowId, httpServletRequest, writer, cachedPortletData);\n    \t}\n    \t\n    \t// cached data is either null or expired\n    \t// have to invoke PortletContainer#doRender\n    \t\n    \t// check cacheControl AFTER portlet render to see if the portlet said \"useCachedContent\"\n        CacheControl cacheControl = this.portletCacheControlService.getPortletRenderCacheControl(portletWindowId, httpServletRequest);\n        \n        // alter writer argument to capture output\n        LimitedBufferStringWriter captureWriter = new LimitedBufferStringWriter(this.portletCacheControlService.getCacheSizeThreshold());\n        TeeWriter teeWriter = new TeeWriter(writer, captureWriter);\n        // invoke doRenderMarkupInternal\n        PortletRenderResult result = doRenderMarkupInternal(portletWindowId, httpServletRequest, httpServletResponse, teeWriter);\n        \n        boolean useCachedContent = cacheControl.useCachedContent();\n        boolean cachedPortletDataNotNull = cachedPortletData != null;\n        // we actually don't care if the content is expired at this point, the two prior fields will tell us if the portlet wants us to replay cached content\n        if (logger.isDebugEnabled()) {\n        \tlogger.debug(portletWindowId + \" useCachedContent=\" + useCachedContent + \", cachedPortletDataNotNull=\" + cachedPortletDataNotNull);\n        }\n        if (useCachedContent && cachedPortletDataNotNull) {\n    \t\treturn doRenderMarkupReplayCachedContent(portletWindowId, httpServletRequest, writer, cachedPortletData);\n        }\n        \n    \tboolean shouldCache = this.portletCacheControlService.shouldOutputBeCached(cacheControl);\n    \t// put the captured content in the cache\n    \tif(shouldCache && !captureWriter.isLimitExceeded()) {\n    \t\tthis.portletCacheControlService.cachePortletRenderOutput(portletWindowId, httpServletRequest, captureWriter.toString(), cacheControl);\n    \t}\n    \t\n    \treturn result;\n    }","id":2566,"modified_method":"/**\n    * Interacts with the {@link IPortletCacheControlService} to determine if the markup should come from cache or not.\n    * If cached data doesn't exist or is expired, this delegates to {@link #doRenderMarkupInternal(IPortletWindowId, HttpServletRequest, HttpServletResponse, Writer)}.\n    * \n    * (non-Javadoc)\n    * @see org.jasig.portal.portlet.rendering.IPortletRenderer#doRenderMarkup(org.jasig.portal.portlet.om.IPortletWindowId, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.io.Writer)\n    */\n    @Override\n    public PortletRenderResult doRenderMarkup(IPortletWindowId portletWindowId, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Writer writer) {\n    \tCachedPortletData cachedPortletData = this.portletCacheControlService.getCachedPortletRenderOutput(portletWindowId, httpServletRequest);\n    \tif(cachedPortletData != null && !cachedPortletData.isExpired()) {\n    \t\t// regardless if etag is set or not, we need to replay cachedPortlet Data if it's not expired\n    \t\treturn doRenderMarkupReplayCachedContent(portletWindowId, httpServletRequest, writer, cachedPortletData);\n    \t}\n    \t\n    \t// cached data is either null or expired\n    \t// have to invoke PortletContainer#doRender\n    \t\n    \t// check cacheControl AFTER portlet render to see if the portlet said \"useCachedContent\"\n        CacheControl cacheControl = this.portletCacheControlService.getPortletRenderCacheControl(portletWindowId, httpServletRequest);   \n        // alter writer argument to capture output\n        LimitedBufferStringWriter captureWriter = new LimitedBufferStringWriter(this.portletCacheControlService.getCacheSizeThreshold());\n        TeeWriter teeWriter = new TeeWriter(writer, captureWriter);\n        PortletRenderResult result = doRenderMarkupInternal(portletWindowId, httpServletRequest, httpServletResponse, teeWriter);\n        \n        boolean useCachedContent = cacheControl.useCachedContent();\n        final IPortletWindow portletWindow = this.portletWindowRegistry.getPortletWindow(httpServletRequest, portletWindowId);\n\t\tif(useCachedContent && cachedPortletData == null) {\n\t\t\tthrow new PortletDispatchException(\"The portlet window '\"+ portletWindow + \"' indicated via CacheControl#useCachedContent that the portal should render cached content, however there is no cached content to return. This is a portlet bug.\", portletWindow);\n\t\t}\n        \n        if (useCachedContent) {\n        \tcachedPortletData.updateExpirationTime(cacheControl.getExpirationTime());\n    \t\treturn doRenderMarkupReplayCachedContent(portletWindowId, httpServletRequest, writer, cachedPortletData);\n        } else {\n        \tboolean shouldCache = this.portletCacheControlService.shouldOutputBeCached(cacheControl);\n        \tif(shouldCache && !captureWriter.isLimitExceeded()) {\n        \t\tthis.portletCacheControlService.cachePortletRenderOutput(portletWindowId, httpServletRequest, captureWriter.toString(), cacheControl);\n        \t}\n        }\n    \treturn result;\n    }","commit_id":"370cb11a3bf97df5de68ac0a771e298849b1e700","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n\t * Mimic workflow when data cached portlet data using \"validation\" method is available.\n\t * \n\t * @throws PortletContainerException \n\t * @throws IOException \n\t * @throws PortletException \n\t */\n\t@Test\n\tpublic void doRenderMarkupCachedContentValidationMethodExpiredTest() throws PortletException, IOException, PortletContainerException {\n\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n\t\tMockHttpServletResponse response = new MockHttpServletResponse();\n\t\tDate now = new Date();\n\t\tCacheControlImpl cacheControl = new CacheControlImpl();\n\t\t// by setting useCachedContent to true, we are saying even though content is expired, replay it anyways (since etag is still valid)\n\t\tcacheControl.setUseCachedContent(true);\n\t\tcacheControl.setETag(\"123456\");\n\t\tcacheControl.setExpirationTime(300);\n\t\tCachedPortletData cachedPortletData = new CachedPortletData();\n\t\tcachedPortletData.setStringData(\"<p>Some content<\/p>\");\n\t\tcachedPortletData.setEtag(\"123456\");\n\t\tcachedPortletData.setExpirationTimeSeconds(cacheControl.getExpirationTime());\n\t\t// set the time stored to be a time that will trigger the content to be expired\n\t\tDate expiredTime = DateUtils.addSeconds(now, -301); \n\t\tcachedPortletData.setTimeStored(expiredTime);\n\t\t\n\t\tsetupPortletExecutionMocks(request);\n\n\t\twhen(portletCacheControlService.getPortletRenderCacheControl(portletWindowId, request)).thenReturn(cacheControl);\n\t\twhen(portletCacheControlService.getCachedPortletRenderOutput(portletWindowId, request)).thenReturn(cachedPortletData);\n        when(portalRequestInfo.getTargetedPortletWindowId()).thenReturn(portletWindowId);\n\n\t\tStringWriter writer = new StringWriter();\n\t\tportletRenderer.doRenderMarkup(portletWindowId, request, response, writer);\n\t\tAssert.assertEquals(\"<p>Some content<\/p>\", writer.toString());\n\t\t\n\t\t// context is expired, triggers doRender\n\t\tverify(portletContainer, times(1)).doRender(isA(PortletWindow.class), isA(PortletHttpServletRequestWrapper.class), isA(PortletHttpServletResponseWrapper.class));\n\t\t// verify we never enter the other branch of the \"should render cached output\" if statement\n\t\tverify(portletCacheControlService, never()).shouldOutputBeCached(isA(CacheControl.class));\n\t}","id":2567,"modified_method":"/**\n\t * Mimic workflow when data cached portlet data using \"validation\" method is available.\n\t * \n\t * @throws PortletContainerException \n\t * @throws IOException \n\t * @throws PortletException \n\t */\n\t@Test\n\tpublic void doRenderMarkupCachedContentValidationMethodExpiredTest() throws PortletException, IOException, PortletContainerException {\n\t\tMockHttpServletRequest request = new MockHttpServletRequest();\n\t\tMockHttpServletResponse response = new MockHttpServletResponse();\n\t\tDate now = new Date();\n\t\tCacheControlImpl cacheControl = new CacheControlImpl();\n\t\t// by setting useCachedContent to true, we are saying even though content is expired, replay it anyways (since etag is still valid)\n\t\tcacheControl.setUseCachedContent(true);\n\t\tcacheControl.setETag(\"123456\");\n\t\tcacheControl.setExpirationTime(300);\n\t\tCachedPortletData cachedPortletData = new CachedPortletData();\n\t\tcachedPortletData.setStringData(\"<p>Some content<\/p>\");\n\t\tcachedPortletData.setEtag(\"123456\");\n\t\tcachedPortletData.setExpirationTimeSeconds(cacheControl.getExpirationTime());\n\t\t// set the time stored to be a time that will trigger the content to be expired\n\t\tDate expiredTime = DateUtils.addSeconds(now, -301); \n\t\tcachedPortletData.setTimeStored(expiredTime);\n\t\t\n\t\tsetupPortletExecutionMocks(request);\n\n\t\twhen(portletCacheControlService.getPortletRenderCacheControl(portletWindowId, request)).thenReturn(cacheControl);\n\t\twhen(portletCacheControlService.getCachedPortletRenderOutput(portletWindowId, request)).thenReturn(cachedPortletData);\n        when(portalRequestInfo.getTargetedPortletWindowId()).thenReturn(portletWindowId);\n\n\t\tStringWriter writer = new StringWriter();\n\t\tportletRenderer.doRenderMarkup(portletWindowId, request, response, writer);\n\t\tAssert.assertEquals(\"<p>Some content<\/p>\", writer.toString());\n\t\t// verify the expiration time has been updated\n\t\tAssert.assertNotSame(expiredTime, cachedPortletData.getTimeStored());\n\t\t// context is expired, triggers doRender\n\t\tverify(portletContainer, times(1)).doRender(isA(PortletWindow.class), isA(PortletHttpServletRequestWrapper.class), isA(PortletHttpServletResponseWrapper.class));\n\t\t// verify we never enter the other branch of the \"should render cached output\" if statement\n\t\tverify(portletCacheControlService, never()).shouldOutputBeCached(isA(CacheControl.class));\n\t}","commit_id":"370cb11a3bf97df5de68ac0a771e298849b1e700","url":"https://github.com/Jasig/uPortal"},{"original_method":"public Connection() throws IOException {\n            m_sock = new Socket();\n            m_sock.connect(m_address, m_timeout);\n            m_sock.setSoTimeout(500);\n// Removed for fix\n//            m_writer = new OutputStreamWriter(new BufferedOutputStream(m_sock.getOutputStream()));\n            m_writer = new OutputStreamWriter(new BufferedOutputStream(m_sock.getOutputStream()), Charset.defaultCharset());\n            m_input = m_sock.getInputStream();\n            m_rdrThread = new Thread(\"TcpEventProxy Input Discarder\") {\n                public void run() {\n                    for (int ch = 0; ch != -1; ) {\n                        try {\n                            ch = m_input.read();\n                        } catch (InterruptedIOException e) {\n                            ch = 0;\n                        } catch (IOException e) {\n                            ch = -1;\n                        }\n                    }\n                }\n            };\n\n            m_rdrThread.setDaemon(true);\n            m_rdrThread.start();\n        }","id":2568,"modified_method":"public Connection() throws IOException {\n            m_sock = new Socket();\n            m_sock.connect(m_address, m_timeout);\n            m_sock.setSoTimeout(500);\n            log().debug(\"Default Charset:\" + Charset.defaultCharset().displayName());\n            log().debug(\"Setting Charset: UTF-8\");\n            m_writer = new OutputStreamWriter(new BufferedOutputStream(m_sock.getOutputStream()), Charset.forName(\"UTF-8\"));\n            m_input = m_sock.getInputStream();\n            m_rdrThread = new Thread(\"TcpEventProxy Input Discarder\") {\n                public void run() {\n                    for (int ch = 0; ch != -1; ) {\n                        try {\n                            ch = m_input.read();\n                        } catch (InterruptedIOException e) {\n                            ch = 0;\n                        } catch (IOException e) {\n                            ch = -1;\n                        }\n                    }\n                }\n            };\n\n            m_rdrThread.setDaemon(true);\n            m_rdrThread.start();\n        }","commit_id":"9cf0e7ca0659ff5480f8d0502fc125ae0406088d","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Connection() throws IOException {\n            m_sock = new Socket();\n            m_sock.connect(m_address, m_timeout);\n            m_sock.setSoTimeout(500);\n// Removed for fix\n//            m_writer = new OutputStreamWriter(new BufferedOutputStream(m_sock.getOutputStream()));\n            m_writer = new OutputStreamWriter(new BufferedOutputStream(m_sock.getOutputStream()), Charset.defaultCharset());\n            m_input = m_sock.getInputStream();\n            m_rdrThread = new Thread(\"TcpEventProxy Input Discarder\") {\n                public void run() {\n                    for (int ch = 0; ch != -1; ) {\n                        try {\n                            ch = m_input.read();\n                        } catch (InterruptedIOException e) {\n                            ch = 0;\n                        } catch (IOException e) {\n                            ch = -1;\n                        }\n                    }\n                }\n            };\n\n            m_rdrThread.setDaemon(true);\n            m_rdrThread.start();\n        }","id":2569,"modified_method":"public Connection() throws IOException {\n            m_sock = new Socket();\n            m_sock.connect(m_address, m_timeout);\n            m_sock.setSoTimeout(500);\n            log().debug(\"Default Charset:\" + Charset.defaultCharset().displayName());\n            log().debug(\"Setting Charset: UTF-8\");\n            m_writer = new OutputStreamWriter(new BufferedOutputStream(m_sock.getOutputStream()), Charset.forName(\"UTF-8\"));\n            m_input = m_sock.getInputStream();\n            m_rdrThread = new Thread(\"TcpEventProxy Input Discarder\") {\n                public void run() {\n                    for (int ch = 0; ch != -1; ) {\n                        try {\n                            ch = m_input.read();\n                        } catch (InterruptedIOException e) {\n                            ch = 0;\n                        } catch (IOException e) {\n                            ch = -1;\n                        }\n                    }\n                }\n            };\n\n            m_rdrThread.setDaemon(true);\n            m_rdrThread.start();\n        }","commit_id":"3a7dd936c49f6db4f77ad261cbbfa5ab355e0b01","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Connection() throws IOException {\n            m_sock = new Socket();\n            m_sock.connect(m_address, m_timeout);\n            m_sock.setSoTimeout(500);\n// Removed for fix\n//            m_writer = new OutputStreamWriter(new BufferedOutputStream(m_sock.getOutputStream()));\n            m_writer = new OutputStreamWriter(new BufferedOutputStream(m_sock.getOutputStream()), Charset.defaultCharset());\n            m_input = m_sock.getInputStream();\n            m_rdrThread = new Thread(\"TcpEventProxy Input Discarder\") {\n                public void run() {\n                    for (int ch = 0; ch != -1; ) {\n                        try {\n                            ch = m_input.read();\n                        } catch (InterruptedIOException e) {\n                            ch = 0;\n                        } catch (IOException e) {\n                            ch = -1;\n                        }\n                    }\n                }\n            };\n\n            m_rdrThread.setDaemon(true);\n            m_rdrThread.start();\n        }","id":2570,"modified_method":"public Connection() throws IOException {\n            m_sock = new Socket();\n            m_sock.connect(m_address, m_timeout);\n            m_sock.setSoTimeout(500);\n            log().debug(\"Default Charset:\" + Charset.defaultCharset().displayName());\n            log().debug(\"Setting Charset: UTF-8\");\n            m_writer = new OutputStreamWriter(new BufferedOutputStream(m_sock.getOutputStream()), Charset.forName(\"UTF-8\"));\n            m_input = m_sock.getInputStream();\n            m_rdrThread = new Thread(\"TcpEventProxy Input Discarder\") {\n                public void run() {\n                    for (int ch = 0; ch != -1; ) {\n                        try {\n                            ch = m_input.read();\n                        } catch (InterruptedIOException e) {\n                            ch = 0;\n                        } catch (IOException e) {\n                            ch = -1;\n                        }\n                    }\n                }\n            };\n\n            m_rdrThread.setDaemon(true);\n            m_rdrThread.start();\n        }","commit_id":"e7b51707ddfdcf74002cf9a2a349938ea7abcda8","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n   * Factory method for obtaining a resource provider based on a given type and management controller.\n   *\n   * @param type                  the resource type\n   * @param propertyIds           the property ids\n   * @param managementController  the management controller\n   *\n   * @return a new resource provider\n   */\n  public static ResourceProvider getResourceProvider(Resource.Type type,\n                                                     Set<String> propertyIds,\n                                                     Map<Resource.Type, String> keyPropertyIds,\n                                                     AmbariManagementController managementController) {\n    switch (type) {\n      case Cluster:\n        return new ClusterResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case Service:\n        return new ServiceResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case Component:\n        return new ComponentResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case Host:\n        return new HostResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case HostComponent:\n        return new HostComponentResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case Configuration:\n        return new ConfigurationResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case Action:\n        return new ActionResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case Request:\n        return new RequestResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case Task:\n        return new TaskResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case User:\n        return new UserResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case Stack:\n        return new StackResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case StackVersion:\n        return new StackVersionResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case StackService:\n        return new StackServiceResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case StackServiceComponent:\n        return new StackServiceComponentResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case StackConfiguration:\n        return new StackConfigurationResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case OperatingSystem:\n        return new OperatingSystemResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case Repository:\n        return new RepositoryResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case RootService:\n        return new RootServiceResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case RootServiceComponent:\n        return new RootServiceComponentResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case RootServiceHostComponent:\n        return new RootServiceHostComponentResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case ConfigGroup:\n        return new ConfigGroupResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case RequestSchedule:\n        return new RequestScheduleResourceProvider(propertyIds, keyPropertyIds, managementController);\n      default:\n        throw new IllegalArgumentException(\"Unknown type \" + type);\n    }\n  }","id":2571,"modified_method":"/**\n   * Factory method for obtaining a resource provider based on a given type and management controller.\n   *\n   * @param type                  the resource type\n   * @param propertyIds           the property ids\n   * @param managementController  the management controller\n   *\n   * @return a new resource provider\n   */\n  public static ResourceProvider getResourceProvider(Resource.Type type,\n                                                     Set<String> propertyIds,\n                                                     Map<Resource.Type, String> keyPropertyIds,\n                                                     AmbariManagementController managementController) {\n\n    switch (type) {\n      case Cluster:\n        return new ClusterResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case Service:\n        return new ServiceResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case Component:\n        return new ComponentResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case Host:\n        return resourceProviderFactory.getHostResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case HostComponent:\n        return resourceProviderFactory.getHostComponentResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case Configuration:\n        return new ConfigurationResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case Action:\n        return new ActionResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case Request:\n        return new RequestResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case Task:\n        return new TaskResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case User:\n        return new UserResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case Stack:\n        return new StackResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case StackVersion:\n        return new StackVersionResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case StackService:\n        return new StackServiceResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case StackServiceComponent:\n        return new StackServiceComponentResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case StackConfiguration:\n        return new StackConfigurationResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case OperatingSystem:\n        return new OperatingSystemResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case Repository:\n        return new RepositoryResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case RootService:\n        return new RootServiceResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case RootServiceComponent:\n        return new RootServiceComponentResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case RootServiceHostComponent:\n        return new RootServiceHostComponentResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case ConfigGroup:\n        return new ConfigGroupResourceProvider(propertyIds, keyPropertyIds, managementController);\n      case RequestSchedule:\n        return new RequestScheduleResourceProvider(propertyIds, keyPropertyIds, managementController);\n      default:\n        throw new IllegalArgumentException(\"Unknown type \" + type);\n    }\n  }","commit_id":"375172c8eb350d25b73efc62a4637ac65f27d3c0","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * Static injection replacement to wait Persistence Service start\n   */\n  public void performStaticInjection() {\n    AgentResource.init(injector.getInstance(HeartBeatHandler.class));\n    CertificateDownload.init(injector.getInstance(CertificateManager.class));\n    CertificateSign.init(injector.getInstance(CertificateManager.class));\n    GetResource.init(injector.getInstance(ResourceManager.class));\n    PersistKeyValueService.init(injector.getInstance(PersistKeyValueImpl.class));\n    KeyService.init(injector.getInstance(PersistKeyValueImpl.class));\n    AmbariMetaService.init(injector.getInstance(AmbariMetaInfo.class));\n    BootStrapResource.init(injector.getInstance(BootStrapImpl.class));\n    StageUtils.setGson(injector.getInstance(Gson.class));\n    WorkflowJsonService.setDBProperties(\n        injector.getInstance(Configuration.class));\n    SecurityFilter.init(injector.getInstance(Configuration.class));\n    StackDefinedPropertyProvider.init(injector);\n  }","id":2572,"modified_method":"/**\n   * Static injection replacement to wait Persistence Service start\n   */\n  public void performStaticInjection() {\n    AgentResource.init(injector.getInstance(HeartBeatHandler.class));\n    CertificateDownload.init(injector.getInstance(CertificateManager.class));\n    CertificateSign.init(injector.getInstance(CertificateManager.class));\n    GetResource.init(injector.getInstance(ResourceManager.class));\n    PersistKeyValueService.init(injector.getInstance(PersistKeyValueImpl.class));\n    KeyService.init(injector.getInstance(PersistKeyValueImpl.class));\n    AmbariMetaService.init(injector.getInstance(AmbariMetaInfo.class));\n    BootStrapResource.init(injector.getInstance(BootStrapImpl.class));\n    StageUtils.setGson(injector.getInstance(Gson.class));\n    WorkflowJsonService.setDBProperties(\n        injector.getInstance(Configuration.class));\n    SecurityFilter.init(injector.getInstance(Configuration.class));\n    StackDefinedPropertyProvider.init(injector);\n    AbstractControllerResourceProvider.init(injector.getInstance(ResourceProviderFactory.class));\n  }","commit_id":"375172c8eb350d25b73efc62a4637ac65f27d3c0","url":"https://github.com/apache/ambari"},{"original_method":"private void installFactories() {\n    install(new FactoryModuleBuilder().implement(\n        Cluster.class, ClusterImpl.class).build(ClusterFactory.class));\n    install(new FactoryModuleBuilder().implement(\n        Host.class, HostImpl.class).build(HostFactory.class));\n    install(new FactoryModuleBuilder().implement(\n        Service.class, ServiceImpl.class).build(ServiceFactory.class));\n    install(new FactoryModuleBuilder().implement(\n        ServiceComponent.class, ServiceComponentImpl.class).build(\n        ServiceComponentFactory.class));\n    install(new FactoryModuleBuilder().implement(\n        ServiceComponentHost.class, ServiceComponentHostImpl.class).build(\n        ServiceComponentHostFactory.class));\n    install(new FactoryModuleBuilder().implement(\n        Config.class, ConfigImpl.class).build(ConfigFactory.class));\n    install(new FactoryModuleBuilder().implement(\n      ConfigGroup.class, ConfigGroupImpl.class).build(ConfigGroupFactory.class));\n    install(new FactoryModuleBuilder().implement(RequestExecution.class,\n      RequestExecutionImpl.class).build(RequestExecutionFactory.class));\n    install(new FactoryModuleBuilder().build(StageFactory.class));\n    bind(HostRoleCommandFactory.class).to(HostRoleCommandFactoryImpl.class);\n  }","id":2573,"modified_method":"private void installFactories() {\n    install(new FactoryModuleBuilder().implement(\n        Cluster.class, ClusterImpl.class).build(ClusterFactory.class));\n    install(new FactoryModuleBuilder().implement(\n        Host.class, HostImpl.class).build(HostFactory.class));\n    install(new FactoryModuleBuilder().implement(\n        Service.class, ServiceImpl.class).build(ServiceFactory.class));\n   \n    \n    install(new FactoryModuleBuilder()\n        .implement(ResourceProvider.class, Names.named(\"host\"), HostResourceProvider.class)\n        .implement(ResourceProvider.class, Names.named(\"hostComponent\"), HostComponentResourceProvider.class)\n        .build(ResourceProviderFactory.class)); \n\n    \n    install(new FactoryModuleBuilder().implement(\n        ServiceComponent.class, ServiceComponentImpl.class).build(\n        ServiceComponentFactory.class));\n    install(new FactoryModuleBuilder().implement(\n        ServiceComponentHost.class, ServiceComponentHostImpl.class).build(\n        ServiceComponentHostFactory.class));\n    install(new FactoryModuleBuilder().implement(\n        Config.class, ConfigImpl.class).build(ConfigFactory.class));\n    install(new FactoryModuleBuilder().implement(\n      ConfigGroup.class, ConfigGroupImpl.class).build(ConfigGroupFactory.class));\n    install(new FactoryModuleBuilder().implement(RequestExecution.class,\n      RequestExecutionImpl.class).build(RequestExecutionFactory.class));\n    install(new FactoryModuleBuilder().build(StageFactory.class));\n    bind(HostRoleCommandFactory.class).to(HostRoleCommandFactoryImpl.class);\n  }","commit_id":"375172c8eb350d25b73efc62a4637ac65f27d3c0","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * Create a  new resource provider for the given management controller.\n   *\n   * @param propertyIds           the property ids\n   * @param keyPropertyIds        the key property ids\n   * @param managementController  the management controller\n   */\n  HostComponentResourceProvider(Set<String> propertyIds,\n                                Map<Resource.Type, String> keyPropertyIds,\n                                AmbariManagementController managementController) {\n    super(propertyIds, keyPropertyIds, managementController);\n  }","id":2574,"modified_method":"/**\n   * Create a  new resource provider for the given management controller.\n   *\n   * @param propertyIds           the property ids\n   * @param keyPropertyIds        the key property ids\n   * @param managementController  the management controller\n   */\n  @AssistedInject\n  public HostComponentResourceProvider(@Assisted Set<String> propertyIds,\n                                @Assisted Map<Resource.Type, String> keyPropertyIds,\n                                @Assisted AmbariManagementController managementController) {\n    super(propertyIds, keyPropertyIds, managementController);\n  }","commit_id":"375172c8eb350d25b73efc62a4637ac65f27d3c0","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testCreateResources() throws Exception {\n    Resource.Type type = Resource.Type.HostComponent;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    RequestStatusResponse response = createNiceMock(RequestStatusResponse.class);\n\n    managementController.createHostComponents(\n        AbstractResourceProviderTest.Matcher.getHostComponentRequestSet(\n            \"Cluster100\", \"Service100\", \"Component100\", \"Host100\", null, null));\n\n    // replay\n    replay(managementController, response);\n\n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n    // add the property map to a set for the request.  add more maps for multiple creates\n    Set<Map<String, Object>> propertySet = new LinkedHashSet<Map<String, Object>>();\n\n    // Service 1: create a map of properties for the request\n    Map<String, Object> properties = new LinkedHashMap<String, Object>();\n\n    // add properties to the request map\n    properties.put(HostComponentResourceProvider.HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID, \"Cluster100\");\n    properties.put(HostComponentResourceProvider.HOST_COMPONENT_SERVICE_NAME_PROPERTY_ID, \"Service100\");\n    properties.put(HostComponentResourceProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID, \"Component100\");\n    properties.put(HostComponentResourceProvider.HOST_COMPONENT_HOST_NAME_PROPERTY_ID, \"Host100\");\n\n    propertySet.add(properties);\n\n    // create the request\n    Request request = PropertyHelper.getCreateRequest(propertySet, null);\n\n    provider.createResources(request);\n\n    // verify\n    verify(managementController, response);\n  }","id":2575,"modified_method":"@Test\n  public void testCreateResources() throws Exception {\n    Resource.Type type = Resource.Type.HostComponent;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    RequestStatusResponse response = createNiceMock(RequestStatusResponse.class);\n    ResourceProviderFactory resourceProviderFactory = createNiceMock(ResourceProviderFactory.class);\n    HostComponentResourceProvider hostComponentResourceProvider = \n        new HostComponentResourceProvider(PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n    \n    AbstractControllerResourceProvider.init(resourceProviderFactory);\n\n    managementController.createHostComponents(\n        AbstractResourceProviderTest.Matcher.getHostComponentRequestSet(\n            \"Cluster100\", \"Service100\", \"Component100\", \"Host100\", null, null));\n    \n    expect(resourceProviderFactory.getHostComponentResourceProvider(anyObject(Set.class),\n        anyObject(Map.class),\n        eq(managementController))).\n        andReturn(hostComponentResourceProvider).anyTimes();\n    \n\n    // replay\n    replay(managementController, response, resourceProviderFactory);\n\n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n    // add the property map to a set for the request.  add more maps for multiple creates\n    Set<Map<String, Object>> propertySet = new LinkedHashSet<Map<String, Object>>();\n\n    // Service 1: create a map of properties for the request\n    Map<String, Object> properties = new LinkedHashMap<String, Object>();\n\n    // add properties to the request map\n    properties.put(HostComponentResourceProvider.HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID, \"Cluster100\");\n    properties.put(HostComponentResourceProvider.HOST_COMPONENT_SERVICE_NAME_PROPERTY_ID, \"Service100\");\n    properties.put(HostComponentResourceProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID, \"Component100\");\n    properties.put(HostComponentResourceProvider.HOST_COMPONENT_HOST_NAME_PROPERTY_ID, \"Host100\");\n\n    propertySet.add(properties);\n\n    // create the request\n    Request request = PropertyHelper.getCreateRequest(propertySet, null);\n\n    provider.createResources(request);\n\n    // verify\n    verify(managementController, response, resourceProviderFactory);\n  }","commit_id":"375172c8eb350d25b73efc62a4637ac65f27d3c0","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testUpdateResources() throws Exception {\n    Resource.Type type = Resource.Type.HostComponent;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    RequestStatusResponse response = createNiceMock(RequestStatusResponse.class);\n\n    Map<String, String> mapRequestProps = new HashMap<String, String>();\n    mapRequestProps.put(\"context\", \"Called from a test\");\n\n    Set<ServiceComponentHostResponse> nameResponse = new HashSet<ServiceComponentHostResponse>();\n    nameResponse.add(new ServiceComponentHostResponse(\n        \"Cluster102\", \"Service100\", \"Component100\", \"Host100\", \"STARTED\", \"\", \"\", \"\"));\n\n    // set expectations\n    expect(managementController.getHostComponents(\n        EasyMock.<Set<ServiceComponentHostRequest>>anyObject())).andReturn(nameResponse).once();\n    expect(managementController.updateHostComponents(\n        AbstractResourceProviderTest.Matcher.getHostComponentRequestSet(\n            \"Cluster102\", null, \"Component100\", \"Host100\", null, \"STARTED\"),\n            eq(mapRequestProps), eq(false))).andReturn(response).once();\n\n    // replay\n    replay(managementController, response);\n\n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n    Map<String, Object> properties = new LinkedHashMap<String, Object>();\n\n    properties.put(HostComponentResourceProvider.HOST_COMPONENT_STATE_PROPERTY_ID, \"STARTED\");\n\n    // create the request\n    Request request = PropertyHelper.getUpdateRequest(properties, mapRequestProps);\n\n    // update the cluster named Cluster102\n    Predicate predicate = new PredicateBuilder().property(\n        HostComponentResourceProvider.HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID).equals(\"Cluster102\").toPredicate();\n    provider.updateResources(request, predicate);\n\n    // verify\n    verify(managementController, response);\n  }","id":2576,"modified_method":"@Test\n  public void testUpdateResources() throws Exception {\n    Resource.Type type = Resource.Type.HostComponent;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    RequestStatusResponse response = createNiceMock(RequestStatusResponse.class);\n    ResourceProviderFactory resourceProviderFactory = createNiceMock(ResourceProviderFactory.class);\n\n    Map<String, String> mapRequestProps = new HashMap<String, String>();\n    mapRequestProps.put(\"context\", \"Called from a test\");\n\n    Set<ServiceComponentHostResponse> nameResponse = new HashSet<ServiceComponentHostResponse>();\n    nameResponse.add(new ServiceComponentHostResponse(\n        \"Cluster102\", \"Service100\", \"Component100\", \"Host100\", \"STARTED\", \"\", \"\", \"\"));\n    \n    HostComponentResourceProvider provider = \n        new HostComponentResourceProvider(PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n    // set expectations\n    expect(managementController.getHostComponents(\n        EasyMock.<Set<ServiceComponentHostRequest>>anyObject())).andReturn(nameResponse).once();\n    expect(managementController.updateHostComponents(\n        AbstractResourceProviderTest.Matcher.getHostComponentRequestSet(\n            \"Cluster102\", null, \"Component100\", \"Host100\", null, \"STARTED\"),\n            eq(mapRequestProps), eq(false))).andReturn(response).once();\n    \n    expect(resourceProviderFactory.getHostComponentResourceProvider(anyObject(Set.class),\n        anyObject(Map.class),\n        eq(managementController))).\n        andReturn(provider).anyTimes();\n\n    // replay\n    replay(managementController, response, resourceProviderFactory);\n\n    Map<String, Object> properties = new LinkedHashMap<String, Object>();\n\n    properties.put(HostComponentResourceProvider.HOST_COMPONENT_STATE_PROPERTY_ID, \"STARTED\");\n\n    // create the request\n    Request request = PropertyHelper.getUpdateRequest(properties, mapRequestProps);\n\n    // update the cluster named Cluster102\n    Predicate predicate = new PredicateBuilder().property(\n        HostComponentResourceProvider.HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID).equals(\"Cluster102\").toPredicate();\n    provider.updateResources(request, predicate);\n\n    // verify\n    verify(managementController, response, resourceProviderFactory);\n  }","commit_id":"375172c8eb350d25b73efc62a4637ac65f27d3c0","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testCheckPropertyIds() throws Exception {\n    Set<String> propertyIds = new HashSet<String>();\n    propertyIds.add(\"foo\");\n    propertyIds.add(\"cat1/foo\");\n    propertyIds.add(\"cat2/bar\");\n    propertyIds.add(\"cat2/baz\");\n    propertyIds.add(\"cat3/sub1/bam\");\n    propertyIds.add(\"cat4/sub2/sub3/bat\");\n    propertyIds.add(\"cat5/subcat5/map\");\n\n    Map<Resource.Type, String> keyPropertyIds = new HashMap<Resource.Type, String>();\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n\n    AbstractResourceProvider provider =\n        (AbstractResourceProvider) AbstractControllerResourceProvider.getResourceProvider(\n            Resource.Type.HostComponent,\n            propertyIds,\n            keyPropertyIds,\n            managementController);\n\n    Set<String> unsupported = provider.checkPropertyIds(Collections.singleton(\"foo\"));\n    Assert.assertTrue(unsupported.isEmpty());\n\n    // note that key is not in the set of known property ids.  We allow it if its parent is a known property.\n    // this allows for Map type properties where we want to treat the entries as individual properties\n    Assert.assertTrue(provider.checkPropertyIds(Collections.singleton(\"cat5/subcat5/map/key\")).isEmpty());\n\n    unsupported = provider.checkPropertyIds(Collections.singleton(\"bar\"));\n    Assert.assertEquals(1, unsupported.size());\n    Assert.assertTrue(unsupported.contains(\"bar\"));\n\n    unsupported = provider.checkPropertyIds(Collections.singleton(\"cat1/foo\"));\n    Assert.assertTrue(unsupported.isEmpty());\n\n    unsupported = provider.checkPropertyIds(Collections.singleton(\"cat1\"));\n    Assert.assertTrue(unsupported.isEmpty());\n\n    unsupported = provider.checkPropertyIds(Collections.singleton(\"config\"));\n    Assert.assertTrue(unsupported.isEmpty());\n\n    unsupported = provider.checkPropertyIds(Collections.singleton(\"config/unknown_property\"));\n    Assert.assertTrue(unsupported.isEmpty());\n  }","id":2577,"modified_method":"@Test\n  public void testCheckPropertyIds() throws Exception {\n    Set<String> propertyIds = new HashSet<String>();\n    propertyIds.add(\"foo\");\n    propertyIds.add(\"cat1/foo\");\n    propertyIds.add(\"cat2/bar\");\n    propertyIds.add(\"cat2/baz\");\n    propertyIds.add(\"cat3/sub1/bam\");\n    propertyIds.add(\"cat4/sub2/sub3/bat\");\n    propertyIds.add(\"cat5/subcat5/map\");\n\n    Map<Resource.Type, String> keyPropertyIds = new HashMap<Resource.Type, String>();\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n\n    HostComponentResourceProvider provider = \n        new HostComponentResourceProvider(propertyIds,\n        keyPropertyIds,\n        managementController);\n\n    Set<String> unsupported = provider.checkPropertyIds(Collections.singleton(\"foo\"));\n    Assert.assertTrue(unsupported.isEmpty());\n\n    // note that key is not in the set of known property ids.  We allow it if its parent is a known property.\n    // this allows for Map type properties where we want to treat the entries as individual properties\n    Assert.assertTrue(provider.checkPropertyIds(Collections.singleton(\"cat5/subcat5/map/key\")).isEmpty());\n\n    unsupported = provider.checkPropertyIds(Collections.singleton(\"bar\"));\n    Assert.assertEquals(1, unsupported.size());\n    Assert.assertTrue(unsupported.contains(\"bar\"));\n\n    unsupported = provider.checkPropertyIds(Collections.singleton(\"cat1/foo\"));\n    Assert.assertTrue(unsupported.isEmpty());\n\n    unsupported = provider.checkPropertyIds(Collections.singleton(\"cat1\"));\n    Assert.assertTrue(unsupported.isEmpty());\n\n    unsupported = provider.checkPropertyIds(Collections.singleton(\"config\"));\n    Assert.assertTrue(unsupported.isEmpty());\n\n    unsupported = provider.checkPropertyIds(Collections.singleton(\"config/unknown_property\"));\n    Assert.assertTrue(unsupported.isEmpty());\n  }","commit_id":"375172c8eb350d25b73efc62a4637ac65f27d3c0","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testGetResources() throws Exception {\n    Resource.Type type = Resource.Type.HostComponent;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n\n    Set<ServiceComponentHostResponse> allResponse = new HashSet<ServiceComponentHostResponse>();\n    StackId stackId = new StackId(\"HDP-0.1\");\n    StackId stackId2 = new StackId(\"HDP-0.2\");\n    allResponse.add(new ServiceComponentHostResponse(\n        \"Cluster100\", \"Service100\", \"Component100\", \"Host100\", State.INSTALLED.toString(), stackId.getStackId(), State.STARTED.toString(),\n        stackId2.getStackId()));\n    allResponse.add(new ServiceComponentHostResponse(\n        \"Cluster100\", \"Service100\", \"Component101\", \"Host100\", State.INSTALLED.toString(), stackId.getStackId(), State.STARTED.toString(),\n        stackId2.getStackId()));\n    allResponse.add(new ServiceComponentHostResponse(\n        \"Cluster100\", \"Service100\", \"Component102\", \"Host100\", State.INSTALLED.toString(), stackId.getStackId(), State.STARTED.toString(),\n        stackId2.getStackId()));\n    Map<String, String> expectedNameValues = new HashMap<String, String>();\n    expectedNameValues.put(\n        HostComponentResourceProvider.HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID, \"Cluster100\");\n    expectedNameValues.put(\n        HostComponentResourceProvider.HOST_COMPONENT_STATE_PROPERTY_ID, State.INSTALLED.toString());\n    expectedNameValues.put(\n        HostComponentResourceProvider.HOST_COMPONENT_STACK_ID_PROPERTY_ID, stackId.getStackId());\n    expectedNameValues.put(\n        HostComponentResourceProvider.HOST_COMPONENT_DESIRED_STATE_PROPERTY_ID, State.STARTED.toString());\n    expectedNameValues.put(\n        HostComponentResourceProvider.HOST_COMPONENT_DESIRED_STACK_ID_PROPERTY_ID, stackId2.getStackId());\n\n    // set expectations\n    expect(managementController.getHostComponents(\n        AbstractResourceProviderTest.Matcher.getHostComponentRequestSet(\n            \"Cluster100\", null, null, null, null, null))).andReturn(allResponse).once();\n\n    // replay\n    replay(managementController);\n\n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n    Set<String> propertyIds = new HashSet<String>();\n\n    propertyIds.add(HostComponentResourceProvider.HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID);\n    propertyIds.add(HostComponentResourceProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID);\n    propertyIds.add(HostComponentResourceProvider.HOST_COMPONENT_STATE_PROPERTY_ID);\n    propertyIds.add(HostComponentResourceProvider.HOST_COMPONENT_STACK_ID_PROPERTY_ID);\n    propertyIds.add(HostComponentResourceProvider.HOST_COMPONENT_DESIRED_STATE_PROPERTY_ID);\n    propertyIds.add(HostComponentResourceProvider.HOST_COMPONENT_DESIRED_STACK_ID_PROPERTY_ID);\n\n    Predicate predicate = new PredicateBuilder().property(\n        HostComponentResourceProvider.HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID).equals(\"Cluster100\").toPredicate();\n    Request request = PropertyHelper.getReadRequest(propertyIds);\n    Set<Resource> resources = provider.getResources(request, predicate);\n\n    Assert.assertEquals(3, resources.size());\n    Set<String> names = new HashSet<String>();\n    for (Resource resource : resources) {\n      for (String key : expectedNameValues.keySet()) {\n        Assert.assertEquals(expectedNameValues.get(key), resource.getPropertyValue(key));\n      }\n      names.add((String) resource.getPropertyValue(\n          HostComponentResourceProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID));\n    }\n    // Make sure that all of the response objects got moved into resources\n    for (ServiceComponentHostResponse response : allResponse) {\n      Assert.assertTrue(names.contains(response.getComponentName()));\n    }\n\n    // verify\n    verify(managementController);\n  }","id":2578,"modified_method":"@Test\n  public void testGetResources() throws Exception {\n    Resource.Type type = Resource.Type.HostComponent;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    ResourceProviderFactory resourceProviderFactory = createNiceMock(ResourceProviderFactory.class);\n    ResourceProvider hostComponentResourceProvider = createNiceMock(HostComponentResourceProvider.class);\n    \n    AbstractControllerResourceProvider.init(resourceProviderFactory);\n\n    Set<ServiceComponentHostResponse> allResponse = new HashSet<ServiceComponentHostResponse>();\n    StackId stackId = new StackId(\"HDP-0.1\");\n    StackId stackId2 = new StackId(\"HDP-0.2\");\n    allResponse.add(new ServiceComponentHostResponse(\n        \"Cluster100\", \"Service100\", \"Component100\", \"Host100\", State.INSTALLED.toString(), stackId.getStackId(), State.STARTED.toString(),\n        stackId2.getStackId()));\n    allResponse.add(new ServiceComponentHostResponse(\n        \"Cluster100\", \"Service100\", \"Component101\", \"Host100\", State.INSTALLED.toString(), stackId.getStackId(), State.STARTED.toString(),\n        stackId2.getStackId()));\n    allResponse.add(new ServiceComponentHostResponse(\n        \"Cluster100\", \"Service100\", \"Component102\", \"Host100\", State.INSTALLED.toString(), stackId.getStackId(), State.STARTED.toString(),\n        stackId2.getStackId()));\n    Map<String, String> expectedNameValues = new HashMap<String, String>();\n    expectedNameValues.put(\n        HostComponentResourceProvider.HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID, \"Cluster100\");\n    expectedNameValues.put(\n        HostComponentResourceProvider.HOST_COMPONENT_STATE_PROPERTY_ID, State.INSTALLED.toString());\n    expectedNameValues.put(\n        HostComponentResourceProvider.HOST_COMPONENT_STACK_ID_PROPERTY_ID, stackId.getStackId());\n    expectedNameValues.put(\n        HostComponentResourceProvider.HOST_COMPONENT_DESIRED_STATE_PROPERTY_ID, State.STARTED.toString());\n    expectedNameValues.put(\n        HostComponentResourceProvider.HOST_COMPONENT_DESIRED_STACK_ID_PROPERTY_ID, stackId2.getStackId());\n\n    // set expectations\n    expect(resourceProviderFactory.getHostComponentResourceProvider(anyObject(Set.class),\n        anyObject(Map.class),\n        eq(managementController))).\n        andReturn(hostComponentResourceProvider).anyTimes();\n    \n    Set<String> propertyIds = new HashSet<String>();\n\n    propertyIds.add(HostComponentResourceProvider.HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID);\n    propertyIds.add(HostComponentResourceProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID);\n    propertyIds.add(HostComponentResourceProvider.HOST_COMPONENT_STATE_PROPERTY_ID);\n    propertyIds.add(HostComponentResourceProvider.HOST_COMPONENT_STACK_ID_PROPERTY_ID);\n    propertyIds.add(HostComponentResourceProvider.HOST_COMPONENT_DESIRED_STATE_PROPERTY_ID);\n    propertyIds.add(HostComponentResourceProvider.HOST_COMPONENT_DESIRED_STACK_ID_PROPERTY_ID);\n\n    Predicate predicate = new PredicateBuilder().property(\n        HostComponentResourceProvider.HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID).equals(\"Cluster100\").toPredicate();\n    Request request = PropertyHelper.getReadRequest(propertyIds);\n    \n    Set<Resource> hostsComponentResources = new HashSet<Resource>();\n    \n    Resource hostsComponentResource1 = new ResourceImpl(Resource.Type.HostComponent);\n    hostsComponentResource1.setProperty(HostComponentResourceProvider.HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID, \"Cluster100\");\n    hostsComponentResource1.setProperty(HostComponentResourceProvider.HOST_COMPONENT_HOST_NAME_PROPERTY_ID, \"Host100\");\n    hostsComponentResource1.setProperty(HostComponentResourceProvider.HOST_COMPONENT_SERVICE_NAME_PROPERTY_ID, \"Service100\");\n    hostsComponentResource1.setProperty(HostComponentResourceProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID, \"Component100\");\n    hostsComponentResource1.setProperty(HostComponentResourceProvider.HOST_COMPONENT_STATE_PROPERTY_ID, State.INSTALLED.name());\n    hostsComponentResource1.setProperty(HostComponentResourceProvider.HOST_COMPONENT_DESIRED_STATE_PROPERTY_ID, State.STARTED.name());\n    hostsComponentResource1.setProperty(HostComponentResourceProvider.HOST_COMPONENT_STACK_ID_PROPERTY_ID, stackId.getStackId());\n    hostsComponentResource1.setProperty(HostComponentResourceProvider.HOST_COMPONENT_DESIRED_STACK_ID_PROPERTY_ID, stackId2.getStackId());\n    Resource hostsComponentResource2 = new ResourceImpl(Resource.Type.HostComponent);\n    hostsComponentResource2.setProperty(HostComponentResourceProvider.HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID, \"Cluster100\");\n    hostsComponentResource2.setProperty(HostComponentResourceProvider.HOST_COMPONENT_HOST_NAME_PROPERTY_ID, \"Host100\");\n    hostsComponentResource2.setProperty(HostComponentResourceProvider.HOST_COMPONENT_SERVICE_NAME_PROPERTY_ID, \"Service100\");\n    hostsComponentResource2.setProperty(HostComponentResourceProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID, \"Component101\");\n    hostsComponentResource2.setProperty(HostComponentResourceProvider.HOST_COMPONENT_STATE_PROPERTY_ID, State.INSTALLED.name());\n    hostsComponentResource2.setProperty(HostComponentResourceProvider.HOST_COMPONENT_DESIRED_STATE_PROPERTY_ID, State.STARTED.name());\n    hostsComponentResource2.setProperty(HostComponentResourceProvider.HOST_COMPONENT_STACK_ID_PROPERTY_ID, stackId.getStackId());\n    hostsComponentResource2.setProperty(HostComponentResourceProvider.HOST_COMPONENT_DESIRED_STACK_ID_PROPERTY_ID, stackId2.getStackId());\n    Resource hostsComponentResource3 = new ResourceImpl(Resource.Type.HostComponent);\n    hostsComponentResource3.setProperty(HostComponentResourceProvider.HOST_COMPONENT_CLUSTER_NAME_PROPERTY_ID, \"Cluster100\");\n    hostsComponentResource3.setProperty(HostComponentResourceProvider.HOST_COMPONENT_HOST_NAME_PROPERTY_ID, \"Host100\");\n    hostsComponentResource3.setProperty(HostComponentResourceProvider.HOST_COMPONENT_SERVICE_NAME_PROPERTY_ID, \"Service100\");\n    hostsComponentResource3.setProperty(HostComponentResourceProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID, \"Component102\");\n    hostsComponentResource3.setProperty(HostComponentResourceProvider.HOST_COMPONENT_STATE_PROPERTY_ID, State.INSTALLED.name());\n    hostsComponentResource3.setProperty(HostComponentResourceProvider.HOST_COMPONENT_DESIRED_STATE_PROPERTY_ID, State.STARTED.name());\n    hostsComponentResource3.setProperty(HostComponentResourceProvider.HOST_COMPONENT_STACK_ID_PROPERTY_ID, stackId.getStackId());\n    hostsComponentResource3.setProperty(HostComponentResourceProvider.HOST_COMPONENT_DESIRED_STACK_ID_PROPERTY_ID, stackId2.getStackId());\n    hostsComponentResources.add(hostsComponentResource1);\n    hostsComponentResources.add(hostsComponentResource2);\n    hostsComponentResources.add(hostsComponentResource3);\n    \n    expect(hostComponentResourceProvider.getResources(eq(request), eq(predicate))).andReturn(hostsComponentResources).anyTimes();\n\n    // replay\n    replay(managementController, resourceProviderFactory, hostComponentResourceProvider);\n\n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n\n    Set<Resource> resources = provider.getResources(request, predicate);\n\n    Assert.assertEquals(3, resources.size());\n    Set<String> names = new HashSet<String>();\n    for (Resource resource : resources) {\n      for (String key : expectedNameValues.keySet()) {\n        Assert.assertEquals(expectedNameValues.get(key), resource.getPropertyValue(key));\n      }\n      names.add((String) resource.getPropertyValue(\n          HostComponentResourceProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID));\n    }\n    // Make sure that all of the response objects got moved into resources\n    for (ServiceComponentHostResponse response : allResponse) {\n      Assert.assertTrue(names.contains(response.getComponentName()));\n    }\n\n    // verify\n    verify(managementController, resourceProviderFactory, hostComponentResourceProvider);\n  }","commit_id":"375172c8eb350d25b73efc62a4637ac65f27d3c0","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testDeleteResources() throws Exception {\n    Resource.Type type = Resource.Type.HostComponent;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    RequestStatusResponse response = createNiceMock(RequestStatusResponse.class);\n\n    // set expectations\n    expect(managementController.deleteHostComponents(\n        AbstractResourceProviderTest.Matcher.getHostComponentRequestSet(\n            null, null, \"Component100\", \"Host100\", null, null))).andReturn(response);\n\n    // replay\n    replay(managementController, response);\n\n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n    AbstractResourceProviderTest.TestObserver observer = new AbstractResourceProviderTest.TestObserver();\n\n    ((ObservableResourceProvider)provider).addObserver(observer);\n\n    Predicate predicate = new PredicateBuilder().\n        property(HostComponentResourceProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(\"Component100\").and().\n        property(HostComponentResourceProvider.HOST_COMPONENT_HOST_NAME_PROPERTY_ID).equals(\"Host100\").toPredicate();\n    provider.deleteResources(predicate);\n\n\n    ResourceProviderEvent lastEvent = observer.getLastEvent();\n    Assert.assertNotNull(lastEvent);\n    Assert.assertEquals(Resource.Type.HostComponent, lastEvent.getResourceType());\n    Assert.assertEquals(ResourceProviderEvent.Type.Delete, lastEvent.getType());\n    Assert.assertEquals(predicate, lastEvent.getPredicate());\n    Assert.assertNull(lastEvent.getRequest());\n\n    // verify\n    verify(managementController, response);\n  }","id":2579,"modified_method":"@Test\n  public void testDeleteResources() throws Exception {\n    Resource.Type type = Resource.Type.HostComponent;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    RequestStatusResponse response = createNiceMock(RequestStatusResponse.class);\n    \n    HostComponentResourceProvider provider = \n        new HostComponentResourceProvider(PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n    // set expectations\n    expect(managementController.deleteHostComponents(\n        AbstractResourceProviderTest.Matcher.getHostComponentRequestSet(\n            null, null, \"Component100\", \"Host100\", null, null))).andReturn(response);\n\n    // replay\n    replay(managementController, response);\n\n    AbstractResourceProviderTest.TestObserver observer = new AbstractResourceProviderTest.TestObserver();\n\n    ((ObservableResourceProvider)provider).addObserver(observer);\n\n    Predicate predicate = new PredicateBuilder().\n        property(HostComponentResourceProvider.HOST_COMPONENT_COMPONENT_NAME_PROPERTY_ID).equals(\"Component100\").and().\n        property(HostComponentResourceProvider.HOST_COMPONENT_HOST_NAME_PROPERTY_ID).equals(\"Host100\").toPredicate();\n    provider.deleteResources(predicate);\n\n\n    ResourceProviderEvent lastEvent = observer.getLastEvent();\n    Assert.assertNotNull(lastEvent);\n    Assert.assertEquals(Resource.Type.HostComponent, lastEvent.getResourceType());\n    Assert.assertEquals(ResourceProviderEvent.Type.Delete, lastEvent.getType());\n    Assert.assertEquals(predicate, lastEvent.getPredicate());\n    Assert.assertNull(lastEvent.getRequest());\n\n    // verify\n    verify(managementController, response);\n  }","commit_id":"375172c8eb350d25b73efc62a4637ac65f27d3c0","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testGetResources_Status_Alert() throws Exception {\n    Resource.Type type = Resource.Type.Host;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    Clusters clusters = createNiceMock(Clusters.class);\n    Cluster cluster = createNiceMock(Cluster.class);\n    Host host1 = createNiceMock(Host.class);\n    HostHealthStatus healthStatus = createNiceMock(HostHealthStatus.class);\n    AmbariMetaInfo ambariMetaInfo = createNiceMock(AmbariMetaInfo.class);\n    StackId stackId = createNiceMock(StackId.class);\n    ComponentInfo componentInfo = createNiceMock(ComponentInfo.class);\n\n    HostResponse hostResponse1 = createNiceMock(HostResponse.class);\n\n    List<Host> hosts = new LinkedList<Host>();\n    hosts.add(host1);\n\n    Set<Cluster> clusterSet = new HashSet<Cluster>();\n    clusterSet.add(cluster);\n\n    ServiceComponentHostResponse shr1 = new ServiceComponentHostResponse(\"Cluster100\", \"Service100\", \"Component100\", \"Host100\", \"STARTED\", \"\", null, null);\n    ServiceComponentHostResponse shr2 = new ServiceComponentHostResponse(\"Cluster100\", \"Service100\", \"Component102\", \"Host100\", \"INSTALLED\", \"\", null, null);\n    ServiceComponentHostResponse shr3 = new ServiceComponentHostResponse(\"Cluster100\", \"Service100\", \"Component103\", \"Host100\", \"STARTED\", \"\", null, null);\n\n    Set<ServiceComponentHostResponse> responses = new HashSet<ServiceComponentHostResponse>();\n    responses.add(shr1);\n    responses.add(shr2);\n    responses.add(shr3);\n\n    // set expectations\n    expect(managementController.getClusters()).andReturn(clusters).anyTimes();\n    expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();\n    expect(managementController.getHostComponents((Set<ServiceComponentHostRequest>) anyObject())).andReturn(responses).anyTimes();\n\n    expect(clusters.getHosts()).andReturn(hosts).anyTimes();\n\n    expect(clusters.getCluster(\"Cluster100\")).andReturn(cluster).anyTimes();\n\n    expect(clusters.getClustersForHost(\"Host100\")).andReturn(clusterSet).anyTimes();\n\n    expect(host1.getHostName()).andReturn(\"Host100\").anyTimes();\n\n    expect(host1.convertToResponse()).andReturn(hostResponse1);\n\n    expect(hostResponse1.getClusterName()).andReturn(\"Cluster100\").anyTimes();\n    expect(hostResponse1.getHostname()).andReturn(\"Host100\").anyTimes();\n    expect(hostResponse1.getHealthStatus()).andReturn(healthStatus).anyTimes();\n    expect(hostResponse1.getStatus()).andReturn(HealthStatus.ALERT.name()).anyTimes();\n\n    expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.HEALTHY).anyTimes();\n    expect(healthStatus.getHealthReport()).andReturn(\"HEALTHY\").anyTimes();\n\n\n    expect(ambariMetaInfo.getComponentCategory((String) anyObject(), (String) anyObject(),\n        (String) anyObject(), (String) anyObject())).andReturn(componentInfo).anyTimes();\n\n    expect(componentInfo.getCategory()).andReturn(\"SLAVE\").anyTimes();\n\n\n    // replay\n    replay(managementController, clusters, cluster,\n        host1,\n        hostResponse1, stackId, componentInfo,\n        healthStatus, ambariMetaInfo);\n\n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n    Set<String> propertyIds = new HashSet<String>();\n\n    propertyIds.add(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);\n    propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);\n    propertyIds.add(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);\n\n    Predicate predicate =\n        new PredicateBuilder().property(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID).equals(\"Cluster100\").\n            toPredicate();\n    Request request = PropertyHelper.getReadRequest(propertyIds);\n    Set<Resource> resources = provider.getResources(request, predicate);\n\n    Assert.assertEquals(1, resources.size());\n    for (Resource resource : resources) {\n      String clusterName = (String) resource.getPropertyValue(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);\n      Assert.assertEquals(\"Cluster100\", clusterName);\n      String status = (String) resource.getPropertyValue(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);\n      Assert.assertEquals(\"ALERT\", status);\n    }\n\n    // verify\n    verify(managementController, clusters, cluster,\n        host1,\n        hostResponse1, stackId, componentInfo,\n        healthStatus, ambariMetaInfo);\n  }","id":2580,"modified_method":"@Test\n  public void testGetResources_Status_Alert() throws Exception {\n    Resource.Type type = Resource.Type.Host;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    Clusters clusters = createNiceMock(Clusters.class);\n    Cluster cluster = createNiceMock(Cluster.class);\n    HostHealthStatus healthStatus = createNiceMock(HostHealthStatus.class);\n    AmbariMetaInfo ambariMetaInfo = createNiceMock(AmbariMetaInfo.class);\n    StackId stackId = createNiceMock(StackId.class);\n    ComponentInfo componentInfo = createNiceMock(ComponentInfo.class);\n    HostResponse hostResponse1 = createNiceMock(HostResponse.class);\n    ResourceProviderFactory resourceProviderFactory = createNiceMock(ResourceProviderFactory.class);\n    ResourceProvider hostResourceProvider = createNiceMock(HostResourceProvider.class);\n    \n    AbstractControllerResourceProvider.init(resourceProviderFactory);\n\n    Set<Cluster> clusterSet = new HashSet<Cluster>();\n    clusterSet.add(cluster);\n\n    ServiceComponentHostResponse shr1 = new ServiceComponentHostResponse(\"Cluster100\", \"Service100\", \"Component100\", \"Host100\", \"STARTED\", \"\", null, null);\n    ServiceComponentHostResponse shr2 = new ServiceComponentHostResponse(\"Cluster100\", \"Service100\", \"Component102\", \"Host100\", \"INSTALLED\", \"\", null, null);\n    ServiceComponentHostResponse shr3 = new ServiceComponentHostResponse(\"Cluster100\", \"Service100\", \"Component103\", \"Host100\", \"STARTED\", \"\", null, null);\n\n    Set<ServiceComponentHostResponse> responses = new HashSet<ServiceComponentHostResponse>();\n    responses.add(shr1);\n    responses.add(shr2);\n    responses.add(shr3);\n\n    // set expectations\n    expect(managementController.getClusters()).andReturn(clusters).anyTimes();\n    expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();\n    expect(managementController.getHostComponents((Set<ServiceComponentHostRequest>) anyObject())).andReturn(responses).anyTimes();\n    expect(clusters.getCluster(\"Cluster100\")).andReturn(cluster).anyTimes();\n    expect(clusters.getClustersForHost(\"Host100\")).andReturn(clusterSet).anyTimes();\n    expect(hostResponse1.getClusterName()).andReturn(\"Cluster100\").anyTimes();\n    expect(hostResponse1.getHostname()).andReturn(\"Host100\").anyTimes();\n    expect(hostResponse1.getHealthStatus()).andReturn(healthStatus).anyTimes();\n    expect(hostResponse1.getStatus()).andReturn(HealthStatus.ALERT.name()).anyTimes();\n    expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.HEALTHY).anyTimes();\n    expect(healthStatus.getHealthReport()).andReturn(\"HEALTHY\").anyTimes();\n    expect(ambariMetaInfo.getComponentCategory((String) anyObject(), (String) anyObject(),\n        (String) anyObject(), (String) anyObject())).andReturn(componentInfo).anyTimes();\n    expect(componentInfo.getCategory()).andReturn(\"SLAVE\").anyTimes();\n    expect(resourceProviderFactory.getHostResourceProvider(anyObject(Set.class), anyObject(Map.class),\n        eq(managementController))).andReturn(hostResourceProvider).anyTimes();\n    \n    \n    Set<String> propertyIds = new HashSet<String>();\n\n    propertyIds.add(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);\n    propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);\n    propertyIds.add(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);\n\n    Predicate predicate =\n        new PredicateBuilder().property(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID).equals(\"Cluster100\").\n            toPredicate();\n    Request request = PropertyHelper.getReadRequest(propertyIds);\n    \n    Set<Resource> hostsResources = new HashSet<Resource>();\n    \n    Resource hostResource1 = new ResourceImpl(Resource.Type.Host);\n    hostResource1.setProperty(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID, \"Cluster100\");\n    hostResource1.setProperty(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID, HealthStatus.ALERT.name());\n    hostsResources.add(hostResource1);\n    \n    expect(hostResourceProvider.getResources(eq(request), eq(predicate))).andReturn(hostsResources).anyTimes();\n\n\n    // replay\n    replay(managementController, clusters, cluster,\n        hostResponse1, stackId, componentInfo,\n        healthStatus, ambariMetaInfo, resourceProviderFactory, hostResourceProvider);\n\n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n    \n    Set<Resource> resources = provider.getResources(request, predicate);\n\n    Assert.assertEquals(1, resources.size());\n    for (Resource resource : resources) {\n      String clusterName = (String) resource.getPropertyValue(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);\n      Assert.assertEquals(\"Cluster100\", clusterName);\n      String status = (String) resource.getPropertyValue(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);\n      Assert.assertEquals(\"ALERT\", status);\n    }\n\n    // verify\n    verify(managementController, clusters, cluster,\n        hostResponse1, stackId, componentInfo,\n        healthStatus, ambariMetaInfo, resourceProviderFactory, hostResourceProvider);\n  }","commit_id":"375172c8eb350d25b73efc62a4637ac65f27d3c0","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testUpdateDesiredConfig() throws Exception {\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    Clusters clusters = createNiceMock(Clusters.class);\n    Cluster cluster = createNiceMock(Cluster.class);\n    Host host1 = createNiceMock(Host.class);\n    HostHealthStatus healthStatus = createNiceMock(HostHealthStatus.class);\n    AmbariMetaInfo ambariMetaInfo = createNiceMock(AmbariMetaInfo.class);\n\n    HostResponse hostResponse1 = createNiceMock(HostResponse.class);\n\n    List<Host> hosts = new LinkedList<Host>();\n    hosts.add(host1);\n\n    Set<Cluster> clusterSet = new HashSet<Cluster>();\n    clusterSet.add(cluster);\n\n    // set expectations\n    expect(managementController.getClusters()).andReturn(clusters).anyTimes();\n    expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();\n    expect(managementController.getHostComponents((Set<ServiceComponentHostRequest>) anyObject())).andReturn(Collections.<ServiceComponentHostResponse>emptySet()).anyTimes();\n\n    expect(clusters.getHosts()).andReturn(hosts).anyTimes();\n    expect(clusters.getHost(\"Host100\")).andReturn(host1).anyTimes();\n\n    expect(clusters.getCluster(\"Cluster100\")).andReturn(cluster).anyTimes();\n\n    expect(clusters.getClustersForHost(\"Host100\")).andReturn(clusterSet).anyTimes();\n\n    expect(host1.getHostName()).andReturn(\"Host100\").anyTimes();\n\n    expect(host1.convertToResponse()).andReturn(hostResponse1);\n\n    expect(hostResponse1.getClusterName()).andReturn(\"Cluster100\").anyTimes();\n    expect(hostResponse1.getHostname()).andReturn(\"Host100\").anyTimes();\n    expect(hostResponse1.getHealthStatus()).andReturn(healthStatus).anyTimes();\n\n    expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.HEALTHY).anyTimes();\n    expect(healthStatus.getHealthReport()).andReturn(\"HEALTHY\").anyTimes();\n\n    // replay\n    replay(managementController, clusters, cluster,\n        host1,\n        hostResponse1,\n        healthStatus, ambariMetaInfo);\n\n    Map<String, Object> properties = new LinkedHashMap<String, Object>();\n\n    properties.put(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID, \"Cluster100\");\n    properties.put(HostResourceProvider.HOST_NAME_PROPERTY_ID, \"Host100\");\n    \n    properties.put(PropertyHelper.getPropertyId(\"Hosts.desired_config\", \"type\"), \"global\");\n    properties.put(PropertyHelper.getPropertyId(\"Hosts.desired_config\", \"tag\"), \"version1\");\n    properties.put(PropertyHelper.getPropertyId(\"Hosts.desired_config.properties\", \"a\"), \"b\");\n    properties.put(PropertyHelper.getPropertyId(\"Hosts.desired_config.properties\", \"x\"), \"y\");\n\n    // create the request\n    Request request = PropertyHelper.getUpdateRequest(properties, null);\n    \n    Predicate  predicate = new PredicateBuilder().property(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID).\n        equals(\"Cluster100\").\n        and().property(HostResourceProvider.HOST_NAME_PROPERTY_ID).equals(\"Host100\").toPredicate();\n    \n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        Resource.Type.Host,\n        PropertyHelper.getPropertyIds(Resource.Type.Host),\n        PropertyHelper.getKeyPropertyIds(Resource.Type.Host),\n        managementController);\n    \n    provider.updateResources(request, predicate);\n    \n    // verify\n    verify(managementController, clusters, cluster,\n        host1,\n        hostResponse1,\n        healthStatus, ambariMetaInfo);\n  }","id":2581,"modified_method":"@Test\n  public void testUpdateDesiredConfig() throws Exception {\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    Clusters clusters = createNiceMock(Clusters.class);\n    Cluster cluster = createNiceMock(Cluster.class);\n    HostHealthStatus healthStatus = createNiceMock(HostHealthStatus.class);\n    AmbariMetaInfo ambariMetaInfo = createNiceMock(AmbariMetaInfo.class);\n    HostResponse hostResponse1 = createNiceMock(HostResponse.class);\n    ResourceProviderFactory resourceProviderFactory = createNiceMock(ResourceProviderFactory.class);\n    ResourceProvider hostResourceProvider = createNiceMock(HostResourceProvider.class);\n    \n    AbstractControllerResourceProvider.init(resourceProviderFactory);\n\n    Set<Cluster> clusterSet = new HashSet<Cluster>();\n    clusterSet.add(cluster);\n\n    // set expectations\n    expect(managementController.getClusters()).andReturn(clusters).anyTimes();\n    expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();\n    expect(managementController.getHostComponents((Set<ServiceComponentHostRequest>) anyObject())).andReturn(Collections.<ServiceComponentHostResponse>emptySet()).anyTimes();\n    expect(clusters.getCluster(\"Cluster100\")).andReturn(cluster).anyTimes();\n    expect(clusters.getClustersForHost(\"Host100\")).andReturn(clusterSet).anyTimes();\n    expect(hostResponse1.getClusterName()).andReturn(\"Cluster100\").anyTimes();\n    expect(hostResponse1.getHostname()).andReturn(\"Host100\").anyTimes();\n    expect(hostResponse1.getHealthStatus()).andReturn(healthStatus).anyTimes();\n    expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.HEALTHY).anyTimes();\n    expect(healthStatus.getHealthReport()).andReturn(\"HEALTHY\").anyTimes();\n    expect(resourceProviderFactory.getHostResourceProvider(anyObject(Set.class), anyObject(Map.class),\n        eq(managementController))).andReturn(hostResourceProvider).anyTimes();\n\n    // replay\n    replay(managementController, clusters, cluster,\n        hostResponse1,\n        healthStatus, ambariMetaInfo, resourceProviderFactory, hostResourceProvider);\n\n    Map<String, Object> properties = new LinkedHashMap<String, Object>();\n\n    properties.put(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID, \"Cluster100\");\n    properties.put(HostResourceProvider.HOST_NAME_PROPERTY_ID, \"Host100\");\n    properties.put(PropertyHelper.getPropertyId(\"Hosts.desired_config\", \"type\"), \"global\");\n    properties.put(PropertyHelper.getPropertyId(\"Hosts.desired_config\", \"tag\"), \"version1\");\n    properties.put(PropertyHelper.getPropertyId(\"Hosts.desired_config.properties\", \"a\"), \"b\");\n    properties.put(PropertyHelper.getPropertyId(\"Hosts.desired_config.properties\", \"x\"), \"y\");\n\n    // create the request\n    Request request = PropertyHelper.getUpdateRequest(properties, null);\n    \n    Predicate  predicate = new PredicateBuilder().property(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID).\n        equals(\"Cluster100\").\n        and().property(HostResourceProvider.HOST_NAME_PROPERTY_ID).equals(\"Host100\").toPredicate();\n    \n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        Resource.Type.Host,\n        PropertyHelper.getPropertyIds(Resource.Type.Host),\n        PropertyHelper.getKeyPropertyIds(Resource.Type.Host),\n        managementController);\n    \n    provider.updateResources(request, predicate);\n    \n    // verify\n    verify(managementController, clusters, cluster,\n        hostResponse1,\n        healthStatus, ambariMetaInfo, resourceProviderFactory, hostResourceProvider);\n  }","commit_id":"375172c8eb350d25b73efc62a4637ac65f27d3c0","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testGetResources_Status_Unhealthy() throws Exception {\n    Resource.Type type = Resource.Type.Host;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    Clusters clusters = createNiceMock(Clusters.class);\n    Cluster cluster = createNiceMock(Cluster.class);\n    Host host1 = createNiceMock(Host.class);\n    HostHealthStatus healthStatus = createNiceMock(HostHealthStatus.class);\n    AmbariMetaInfo ambariMetaInfo = createNiceMock(AmbariMetaInfo.class);\n    StackId stackId = createNiceMock(StackId.class);\n    ComponentInfo componentInfo = createNiceMock(ComponentInfo.class);\n\n    HostResponse hostResponse1 = createNiceMock(HostResponse.class);\n\n    List<Host> hosts = new LinkedList<Host>();\n    hosts.add(host1);\n\n    Set<Cluster> clusterSet = new HashSet<Cluster>();\n    clusterSet.add(cluster);\n\n    ServiceComponentHostResponse shr1 = new ServiceComponentHostResponse(\"Cluster100\", \"Service100\", \"Component100\", \"Host100\", \"STARTED\", \"\", null, null);\n    ServiceComponentHostResponse shr2 = new ServiceComponentHostResponse(\"Cluster100\", \"Service100\", \"Component102\", \"Host100\", \"INSTALLED\", \"\", null, null);\n    ServiceComponentHostResponse shr3 = new ServiceComponentHostResponse(\"Cluster100\", \"Service100\", \"Component103\", \"Host100\", \"STARTED\", \"\", null, null);\n\n    Set<ServiceComponentHostResponse> responses = new HashSet<ServiceComponentHostResponse>();\n    responses.add(shr1);\n    responses.add(shr2);\n    responses.add(shr3);\n\n    // set expectations\n    expect(managementController.getClusters()).andReturn(clusters).anyTimes();\n    expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();\n    expect(managementController.getHostComponents((Set<ServiceComponentHostRequest>) anyObject())).andReturn(responses).anyTimes();\n\n    expect(clusters.getHosts()).andReturn(hosts).anyTimes();\n\n    expect(clusters.getCluster(\"Cluster100\")).andReturn(cluster).anyTimes();\n\n    expect(clusters.getClustersForHost(\"Host100\")).andReturn(clusterSet).anyTimes();\n\n    expect(host1.getHostName()).andReturn(\"Host100\").anyTimes();\n\n    expect(host1.convertToResponse()).andReturn(hostResponse1);\n\n    expect(hostResponse1.getClusterName()).andReturn(\"Cluster100\").anyTimes();\n    expect(hostResponse1.getHostname()).andReturn(\"Host100\").anyTimes();\n    expect(hostResponse1.getHealthStatus()).andReturn(healthStatus).anyTimes();\n    expect(hostResponse1.getStatus()).andReturn(HealthStatus.UNHEALTHY.name()).anyTimes();\n\n    expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.HEALTHY).anyTimes();\n    expect(healthStatus.getHealthReport()).andReturn(\"HEALTHY\").anyTimes();\n\n\n    expect(ambariMetaInfo.getComponentCategory((String) anyObject(), (String) anyObject(),\n        (String) anyObject(), (String) anyObject())).andReturn(componentInfo).anyTimes();\n\n    expect(componentInfo.getCategory()).andReturn(\"MASTER\").anyTimes();\n\n\n    // replay\n    replay(managementController, clusters, cluster,\n        host1,\n        hostResponse1, stackId, componentInfo,\n        healthStatus, ambariMetaInfo);\n\n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n    Set<String> propertyIds = new HashSet<String>();\n\n    propertyIds.add(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);\n    propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);\n    propertyIds.add(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);\n\n    Predicate predicate =\n        new PredicateBuilder().property(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID).equals(\"Cluster100\").\n            toPredicate();\n    Request request = PropertyHelper.getReadRequest(propertyIds);\n    Set<Resource> resources = provider.getResources(request, predicate);\n\n    Assert.assertEquals(1, resources.size());\n    for (Resource resource : resources) {\n      String clusterName = (String) resource.getPropertyValue(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);\n      Assert.assertEquals(\"Cluster100\", clusterName);\n      String status = (String) resource.getPropertyValue(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);\n      Assert.assertEquals(\"UNHEALTHY\", status);\n    }\n\n    // verify\n    verify(managementController, clusters, cluster,\n        host1,\n        hostResponse1, stackId, componentInfo,\n        healthStatus, ambariMetaInfo);\n  }","id":2582,"modified_method":"@Test\n  public void testGetResources_Status_Unhealthy() throws Exception {\n    Resource.Type type = Resource.Type.Host;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    Clusters clusters = createNiceMock(Clusters.class);\n    Cluster cluster = createNiceMock(Cluster.class);\n    HostHealthStatus healthStatus = createNiceMock(HostHealthStatus.class);\n    AmbariMetaInfo ambariMetaInfo = createNiceMock(AmbariMetaInfo.class);\n    StackId stackId = createNiceMock(StackId.class);\n    ComponentInfo componentInfo = createNiceMock(ComponentInfo.class);\n    HostResponse hostResponse1 = createNiceMock(HostResponse.class);\n    ResourceProviderFactory resourceProviderFactory = createNiceMock(ResourceProviderFactory.class);\n    ResourceProvider hostResourceProvider = createNiceMock(HostResourceProvider.class);\n    \n    AbstractControllerResourceProvider.init(resourceProviderFactory);\n    \n    Set<Cluster> clusterSet = new HashSet<Cluster>();\n    clusterSet.add(cluster);\n\n    ServiceComponentHostResponse shr1 = new ServiceComponentHostResponse(\"Cluster100\", \"Service100\", \"Component100\", \"Host100\", \"STARTED\", \"\", null, null);\n    ServiceComponentHostResponse shr2 = new ServiceComponentHostResponse(\"Cluster100\", \"Service100\", \"Component102\", \"Host100\", \"INSTALLED\", \"\", null, null);\n    ServiceComponentHostResponse shr3 = new ServiceComponentHostResponse(\"Cluster100\", \"Service100\", \"Component103\", \"Host100\", \"STARTED\", \"\", null, null);\n\n    Set<ServiceComponentHostResponse> responses = new HashSet<ServiceComponentHostResponse>();\n    responses.add(shr1);\n    responses.add(shr2);\n    responses.add(shr3);\n\n    // set expectations\n    expect(managementController.getClusters()).andReturn(clusters).anyTimes();\n    expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();\n    expect(managementController.getHostComponents((Set<ServiceComponentHostRequest>) anyObject())).andReturn(responses).anyTimes();\n\n    expect(clusters.getCluster(\"Cluster100\")).andReturn(cluster).anyTimes();\n\n    expect(clusters.getClustersForHost(\"Host100\")).andReturn(clusterSet).anyTimes();\n\n    expect(hostResponse1.getClusterName()).andReturn(\"Cluster100\").anyTimes();\n    expect(hostResponse1.getHostname()).andReturn(\"Host100\").anyTimes();\n    expect(hostResponse1.getHealthStatus()).andReturn(healthStatus).anyTimes();\n    expect(hostResponse1.getStatus()).andReturn(HealthStatus.UNHEALTHY.name()).anyTimes();\n\n    expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.HEALTHY).anyTimes();\n    expect(healthStatus.getHealthReport()).andReturn(\"HEALTHY\").anyTimes();\n\n\n    expect(ambariMetaInfo.getComponentCategory((String) anyObject(), (String) anyObject(),\n        (String) anyObject(), (String) anyObject())).andReturn(componentInfo).anyTimes();\n\n    expect(componentInfo.getCategory()).andReturn(\"MASTER\").anyTimes();\n    \n    expect(resourceProviderFactory.getHostResourceProvider(anyObject(Set.class), anyObject(Map.class),\n        eq(managementController))).andReturn(hostResourceProvider).anyTimes();\n    \n    Set<String> propertyIds = new HashSet<String>();\n\n    propertyIds.add(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);\n    propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);\n    propertyIds.add(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);\n\n    Predicate predicate =\n        new PredicateBuilder().property(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID).equals(\"Cluster100\").\n            toPredicate();\n    Request request = PropertyHelper.getReadRequest(propertyIds);\n    \n    \n    Set<Resource> hostsResources = new HashSet<Resource>();\n    \n    Resource hostResource1 = new ResourceImpl(Resource.Type.Host);\n    hostResource1.setProperty(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID, \"Cluster100\");\n    hostResource1.setProperty(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID, HealthStatus.UNHEALTHY.name());\n    hostsResources.add(hostResource1);\n    \n    expect(hostResourceProvider.getResources(eq(request), eq(predicate))).andReturn(hostsResources).anyTimes();\n\n\n    // replay\n    replay(managementController, clusters, cluster,\n        hostResponse1, stackId, componentInfo,\n        healthStatus, ambariMetaInfo, resourceProviderFactory, hostResourceProvider);\n\n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n\n    Set<Resource> resources = provider.getResources(request, predicate);\n\n    Assert.assertEquals(1, resources.size());\n    for (Resource resource : resources) {\n      String clusterName = (String) resource.getPropertyValue(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);\n      Assert.assertEquals(\"Cluster100\", clusterName);\n      String status = (String) resource.getPropertyValue(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);\n      Assert.assertEquals(\"UNHEALTHY\", status);\n    }\n\n    // verify\n    verify(managementController, clusters, cluster,\n        hostResponse1, stackId, componentInfo,\n        healthStatus, ambariMetaInfo, resourceProviderFactory, hostResourceProvider);\n  }","commit_id":"375172c8eb350d25b73efc62a4637ac65f27d3c0","url":"https://github.com/apache/ambari"},{"original_method":"public static HostResourceProvider getHostProvider(AmbariManagementController managementController) {\n    Resource.Type type = Resource.Type.Host;\n\n    return (HostResourceProvider) AbstractControllerResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n  }","id":2583,"modified_method":"public static HostResourceProvider getHostProvider(AmbariManagementController managementController) {\n    Resource.Type type = Resource.Type.Host;\n\n    return new HostResourceProvider(PropertyHelper.getPropertyIds(type),\n                                    PropertyHelper.getKeyPropertyIds(type),\n                                    managementController);\n  }","commit_id":"375172c8eb350d25b73efc62a4637ac65f27d3c0","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testGetResources() throws Exception {\n    Resource.Type type = Resource.Type.Host;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    Clusters clusters = createNiceMock(Clusters.class);\n    Cluster cluster = createNiceMock(Cluster.class);\n    Host host1 = createNiceMock(Host.class);\n    Host host2 = createNiceMock(Host.class);\n    Host host3 = createNiceMock(Host.class);\n    HostHealthStatus healthStatus = createNiceMock(HostHealthStatus.class);\n    AmbariMetaInfo ambariMetaInfo = createNiceMock(AmbariMetaInfo.class);\n\n    HostResponse hostResponse1 = createNiceMock(HostResponse.class);\n    HostResponse hostResponse2 = createNiceMock(HostResponse.class);\n    HostResponse hostResponse3 = createNiceMock(HostResponse.class);\n\n    List<Host> hosts = new LinkedList<Host>();\n    hosts.add(host1);\n    hosts.add(host2);\n    hosts.add(host3);\n\n    Set<Cluster> clusterSet = new HashSet<Cluster>();\n    clusterSet.add(cluster);\n\n    // set expectations\n    expect(managementController.getClusters()).andReturn(clusters).anyTimes();\n    expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();\n    expect(managementController.getHostComponents((Set<ServiceComponentHostRequest>) anyObject())).andReturn(Collections.<ServiceComponentHostResponse>emptySet()).anyTimes();\n\n    expect(clusters.getHosts()).andReturn(hosts).anyTimes();\n\n    expect(clusters.getCluster(\"Cluster100\")).andReturn(cluster).anyTimes();\n\n    expect(clusters.getClustersForHost(\"Host100\")).andReturn(clusterSet).anyTimes();\n    expect(clusters.getClustersForHost(\"Host101\")).andReturn(clusterSet).anyTimes();\n    expect(clusters.getClustersForHost(\"Host102\")).andReturn(clusterSet).anyTimes();\n\n    expect(host1.getHostName()).andReturn(\"Host100\").anyTimes();\n    expect(host2.getHostName()).andReturn(\"Host101\").anyTimes();\n    expect(host3.getHostName()).andReturn(\"Host102\").anyTimes();\n\n    expect(host1.convertToResponse()).andReturn(hostResponse1);\n    expect(host2.convertToResponse()).andReturn(hostResponse2);\n    expect(host3.convertToResponse()).andReturn(hostResponse3);\n\n    expect(hostResponse1.getClusterName()).andReturn(\"Cluster100\").anyTimes();\n    expect(hostResponse2.getClusterName()).andReturn(\"Cluster100\").anyTimes();\n    expect(hostResponse3.getClusterName()).andReturn(\"Cluster100\").anyTimes();\n    expect(hostResponse1.getHostname()).andReturn(\"Host100\").anyTimes();\n    expect(hostResponse2.getHostname()).andReturn(\"Host101\").anyTimes();\n    expect(hostResponse3.getHostname()).andReturn(\"Host102\").anyTimes();\n    expect(hostResponse1.getHealthStatus()).andReturn(healthStatus).anyTimes();\n    expect(hostResponse2.getHealthStatus()).andReturn(healthStatus).anyTimes();\n    expect(hostResponse3.getHealthStatus()).andReturn(healthStatus).anyTimes();\n\n    expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.HEALTHY).anyTimes();\n    expect(healthStatus.getHealthReport()).andReturn(\"HEALTHY\").anyTimes();\n\n    // replay\n    replay(managementController, clusters, cluster,\n        host1, host2, host3,\n        hostResponse1, hostResponse2, hostResponse3,\n        healthStatus, ambariMetaInfo);\n\n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n    Set<String> propertyIds = new HashSet<String>();\n\n    propertyIds.add(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);\n    propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);\n\n    Predicate predicate =\n        new PredicateBuilder().property(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID).equals(\"Cluster100\").\n            toPredicate();\n    Request request = PropertyHelper.getReadRequest(propertyIds);\n    Set<Resource> resources = provider.getResources(request, predicate);\n\n    Assert.assertEquals(3, resources.size());\n    for (Resource resource : resources) {\n      String clusterName = (String) resource.getPropertyValue(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);\n      Assert.assertEquals(\"Cluster100\", clusterName);\n    }\n\n    // verify\n    verify(managementController, clusters, cluster,\n        host1, host2, host3,\n        hostResponse1, hostResponse2, hostResponse3,\n        healthStatus, ambariMetaInfo);\n  }","id":2584,"modified_method":"@Test\n  public void testGetResources() throws Exception {\n    Resource.Type type = Resource.Type.Host;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    Clusters clusters = createNiceMock(Clusters.class);\n    Cluster cluster = createNiceMock(Cluster.class);\n    Host host1 = createNiceMock(Host.class);\n    Host host2 = createNiceMock(Host.class);\n    Host host3 = createNiceMock(Host.class);\n    HostHealthStatus healthStatus = createNiceMock(HostHealthStatus.class);\n    AmbariMetaInfo ambariMetaInfo = createNiceMock(AmbariMetaInfo.class);\n    ResourceProviderFactory resourceProviderFactory = createNiceMock(ResourceProviderFactory.class);\n    ResourceProvider hostResourceProvider = createNiceMock(HostResourceProvider.class);\n    \n    AbstractControllerResourceProvider.init(resourceProviderFactory);\n\n    List<Host> hosts = new LinkedList<Host>();\n    hosts.add(host1);\n    hosts.add(host2);\n    hosts.add(host3);\n\n    Set<Cluster> clusterSet = new HashSet<Cluster>();\n    clusterSet.add(cluster);\n\n    // set expectations\n    expect(managementController.getClusters()).andReturn(clusters).anyTimes();\n    expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();\n    expect(managementController.getHostComponents((Set<ServiceComponentHostRequest>) anyObject())).andReturn(Collections.<ServiceComponentHostResponse>emptySet()).anyTimes();\n    expect(resourceProviderFactory.getHostResourceProvider(anyObject(Set.class),\n                                                           anyObject(Map.class),\n                                                           eq(managementController))).\n                                                           andReturn(hostResourceProvider).anyTimes();\n\n    expect(clusters.getHosts()).andReturn(hosts).anyTimes();\n\n    expect(clusters.getCluster(\"Cluster100\")).andReturn(cluster).anyTimes();\n\n    expect(clusters.getClustersForHost(\"Host100\")).andReturn(clusterSet).anyTimes();\n    expect(clusters.getClustersForHost(\"Host101\")).andReturn(clusterSet).anyTimes();\n    expect(clusters.getClustersForHost(\"Host102\")).andReturn(clusterSet).anyTimes();\n\n    expect(host1.getHostName()).andReturn(\"Host100\").anyTimes();\n    expect(host2.getHostName()).andReturn(\"Host101\").anyTimes();\n    expect(host3.getHostName()).andReturn(\"Host102\").anyTimes();\n\n    expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.HEALTHY).anyTimes();\n    expect(healthStatus.getHealthReport()).andReturn(\"HEALTHY\").anyTimes();\n    \n    Set<String> propertyIds = new HashSet<String>();\n\n    propertyIds.add(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);\n    propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);\n\n    Predicate predicate =\n        new PredicateBuilder().property(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID).equals(\"Cluster100\").\n            toPredicate();\n    Request request = PropertyHelper.getReadRequest(propertyIds);\n    \n    Set<Resource> hostsResources = new HashSet<Resource>();\n    \n    Resource hostResource1 = new ResourceImpl(Resource.Type.Host);\n    hostResource1.setProperty(PropertyHelper.getPropertyId(\"Hosts\", \"cluster_name\"), \"Cluster100\");\n    hostResource1.setProperty(PropertyHelper.getPropertyId(\"Hosts\", \"host_name\"), \"Host100\");\n    Resource hostResource2 = new ResourceImpl(Resource.Type.Host);\n    hostResource2.setProperty(PropertyHelper.getPropertyId(\"Hosts\", \"cluster_name\"), \"Cluster100\");\n    hostResource2.setProperty(PropertyHelper.getPropertyId(\"Hosts\", \"host_name\"), \"Host101\");\n    Resource hostResource3 = new ResourceImpl(Resource.Type.Host);\n    hostResource3.setProperty(PropertyHelper.getPropertyId(\"Hosts\", \"cluster_name\"), \"Cluster100\");\n    hostResource3.setProperty(PropertyHelper.getPropertyId(\"Hosts\", \"host_name\"), \"Host102\");\n    hostsResources.add(hostResource1);\n    hostsResources.add(hostResource2);\n    hostsResources.add(hostResource3);\n    \n    expect(hostResourceProvider.getResources(eq(request), eq(predicate))).andReturn(hostsResources).anyTimes();\n    \n\n    // replay\n    replay(managementController, clusters, cluster,\n        host1, host2, host3,\n        healthStatus, ambariMetaInfo, resourceProviderFactory, hostResourceProvider);\n\n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n    \n    Set<Resource> resources = provider.getResources(request, predicate);\n\n    Assert.assertEquals(3, resources.size());\n    for (Resource resource : resources) {\n      String clusterName = (String) resource.getPropertyValue(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);\n      Assert.assertEquals(\"Cluster100\", clusterName);\n    }\n\n    // verify\n    verify(managementController, clusters, cluster,\n        host1, host2, host3,\n        healthStatus, ambariMetaInfo);\n  }","commit_id":"375172c8eb350d25b73efc62a4637ac65f27d3c0","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testGetResources_Status_NoCluster() throws Exception {\n    Resource.Type type = Resource.Type.Host;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    Clusters clusters = createNiceMock(Clusters.class);\n    Cluster cluster = createNiceMock(Cluster.class);\n    Host host1 = createNiceMock(Host.class);\n    HostHealthStatus healthStatus = createNiceMock(HostHealthStatus.class);\n    AmbariMetaInfo ambariMetaInfo = createNiceMock(AmbariMetaInfo.class);\n    ComponentInfo componentInfo = createNiceMock(ComponentInfo.class);\n\n    HostResponse hostResponse1 = createNiceMock(HostResponse.class);\n\n    List<Host> hosts = new LinkedList<Host>();\n    hosts.add(host1);\n\n    Set<Cluster> clusterSet = new HashSet<Cluster>();\n    clusterSet.add(cluster);\n\n    ServiceComponentHostResponse shr1 = new ServiceComponentHostResponse(\"Cluster100\", \"Service100\", \"Component100\", \"Host100\", \"STARTED\", \"\", null, null);\n    ServiceComponentHostResponse shr2 = new ServiceComponentHostResponse(\"Cluster100\", \"Service100\", \"Component102\", \"Host100\", \"STARTED\", \"\", null, null);\n    ServiceComponentHostResponse shr3 = new ServiceComponentHostResponse(\"Cluster100\", \"Service100\", \"Component103\", \"Host100\", \"STARTED\", \"\", null, null);\n\n    Set<ServiceComponentHostResponse> responses = new HashSet<ServiceComponentHostResponse>();\n    responses.add(shr1);\n    responses.add(shr2);\n    responses.add(shr3);\n\n    // set expectations\n    expect(managementController.getClusters()).andReturn(clusters).anyTimes();\n    expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();\n    expect(managementController.getHostComponents((Set<ServiceComponentHostRequest>) anyObject())).andReturn(responses).anyTimes();\n\n    expect(clusters.getHosts()).andReturn(hosts).anyTimes();\n\n    expect(clusters.getCluster(\"Cluster100\")).andReturn(cluster).anyTimes();\n\n    expect(clusters.getClustersForHost(\"Host100\")).andReturn(clusterSet).anyTimes();\n\n    expect(host1.getHostName()).andReturn(\"Host100\").anyTimes();\n\n    expect(host1.convertToResponse()).andReturn(hostResponse1);\n\n    expect(hostResponse1.getClusterName()).andReturn(\"\").anyTimes();\n    expect(hostResponse1.getHostname()).andReturn(\"Host100\").anyTimes();\n    expect(hostResponse1.getHealthStatus()).andReturn(healthStatus).anyTimes();\n    expect(hostResponse1.getStatus()).andReturn(HealthStatus.HEALTHY.name()).anyTimes();\n\n    expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.HEALTHY).anyTimes();\n    expect(healthStatus.getHealthReport()).andReturn(\"HEALTHY\").anyTimes();\n\n\n    expect(ambariMetaInfo.getComponentCategory((String) anyObject(), (String) anyObject(),\n        (String) anyObject(), (String) anyObject())).andReturn(componentInfo).anyTimes();\n\n    expect(componentInfo.getCategory()).andReturn(\"MASTER\").anyTimes();\n\n\n    // replay\n    replay(managementController, clusters, cluster,\n        host1,\n        hostResponse1, componentInfo,\n        healthStatus, ambariMetaInfo);\n\n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n    Set<String> propertyIds = new HashSet<String>();\n\n    propertyIds.add(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);\n    propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);\n    propertyIds.add(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);\n\n    Predicate predicate =\n        new PredicateBuilder().property(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID).equals(\"Cluster100\").\n            toPredicate();\n    Request request = PropertyHelper.getReadRequest(propertyIds);\n    Set<Resource> resources = provider.getResources(request, predicate);\n\n    Assert.assertEquals(1, resources.size());\n    for (Resource resource : resources) {\n      String clusterName = (String) resource.getPropertyValue(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);\n      Assert.assertNull(clusterName);\n      String status = (String) resource.getPropertyValue(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);\n      Assert.assertEquals(\"HEALTHY\", status);\n    }\n\n    // verify\n    verify(managementController, clusters, cluster,\n        host1,\n        hostResponse1, componentInfo,\n        healthStatus, ambariMetaInfo);\n  }","id":2585,"modified_method":"@Test\n  public void testGetResources_Status_NoCluster() throws Exception {\n    Resource.Type type = Resource.Type.Host;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    Clusters clusters = createNiceMock(Clusters.class);\n    Cluster cluster = createNiceMock(Cluster.class);\n    HostHealthStatus healthStatus = createNiceMock(HostHealthStatus.class);\n    AmbariMetaInfo ambariMetaInfo = createNiceMock(AmbariMetaInfo.class);\n    ComponentInfo componentInfo = createNiceMock(ComponentInfo.class);\n\n    HostResponse hostResponse1 = createNiceMock(HostResponse.class);\n    \n    ResourceProviderFactory resourceProviderFactory = createNiceMock(ResourceProviderFactory.class);\n    ResourceProvider hostResourceProvider = createNiceMock(HostResourceProvider.class);\n    \n    AbstractControllerResourceProvider.init(resourceProviderFactory);\n\n    Set<Cluster> clusterSet = new HashSet<Cluster>();\n    clusterSet.add(cluster);\n\n    ServiceComponentHostResponse shr1 = new ServiceComponentHostResponse(\"Cluster100\", \"Service100\", \"Component100\", \"Host100\", \"STARTED\", \"\", null, null);\n    ServiceComponentHostResponse shr2 = new ServiceComponentHostResponse(\"Cluster100\", \"Service100\", \"Component102\", \"Host100\", \"STARTED\", \"\", null, null);\n    ServiceComponentHostResponse shr3 = new ServiceComponentHostResponse(\"Cluster100\", \"Service100\", \"Component103\", \"Host100\", \"STARTED\", \"\", null, null);\n\n    Set<ServiceComponentHostResponse> responses = new HashSet<ServiceComponentHostResponse>();\n    responses.add(shr1);\n    responses.add(shr2);\n    responses.add(shr3);\n\n    // set expectations\n    expect(managementController.getClusters()).andReturn(clusters).anyTimes();\n    expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();\n    expect(managementController.getHostComponents((Set<ServiceComponentHostRequest>) anyObject())).andReturn(responses).anyTimes();\n\n    expect(clusters.getCluster(\"Cluster100\")).andReturn(cluster).anyTimes();\n\n    expect(clusters.getClustersForHost(\"Host100\")).andReturn(clusterSet).anyTimes();\n\n\n    expect(hostResponse1.getClusterName()).andReturn(\"\").anyTimes();\n    expect(hostResponse1.getHostname()).andReturn(\"Host100\").anyTimes();\n    expect(hostResponse1.getHealthStatus()).andReturn(healthStatus).anyTimes();\n    expect(hostResponse1.getStatus()).andReturn(HealthStatus.HEALTHY.name()).anyTimes();\n\n    expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.HEALTHY).anyTimes();\n    expect(healthStatus.getHealthReport()).andReturn(\"HEALTHY\").anyTimes();\n\n\n    expect(ambariMetaInfo.getComponentCategory((String) anyObject(), (String) anyObject(),\n        (String) anyObject(), (String) anyObject())).andReturn(componentInfo).anyTimes();\n\n    expect(componentInfo.getCategory()).andReturn(\"MASTER\").anyTimes();\n    \n    expect(resourceProviderFactory.getHostResourceProvider(anyObject(Set.class),\n                                                               anyObject(Map.class),\n                                                               eq(managementController))).\n                                                               andReturn(hostResourceProvider).anyTimes();\n    \n    Set<String> propertyIds = new HashSet<String>();\n\n    propertyIds.add(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);\n    propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);\n    propertyIds.add(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);\n\n    Predicate predicate =\n        new PredicateBuilder().property(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID).equals(\"Cluster100\").\n            toPredicate();\n    Request request = PropertyHelper.getReadRequest(propertyIds);\n    \n    Set<Resource> hostsResources = new HashSet<Resource>();\n    \n    Resource hostResource1 = new ResourceImpl(Resource.Type.Host);\n    hostResource1.setProperty(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID, HealthStatus.HEALTHY.name());\n    hostsResources.add(hostResource1);\n    \n    expect(hostResourceProvider.getResources(eq(request), eq(predicate))).andReturn(hostsResources).anyTimes();\n\n\n    // replay\n    replay(managementController, clusters, cluster,\n        hostResponse1, componentInfo,\n        healthStatus, ambariMetaInfo, resourceProviderFactory, hostResourceProvider);\n\n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n    Set<Resource> resources = provider.getResources(request, predicate);\n\n    Assert.assertEquals(1, resources.size());\n    for (Resource resource : resources) {\n      String clusterName = (String) resource.getPropertyValue(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);\n      Assert.assertNull(clusterName);\n      String status = (String) resource.getPropertyValue(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);\n      Assert.assertEquals(\"HEALTHY\", status);\n    }\n\n    // verify\n    verify(managementController, clusters, cluster,\n        hostResponse1, componentInfo,\n        healthStatus, ambariMetaInfo);\n  }","commit_id":"375172c8eb350d25b73efc62a4637ac65f27d3c0","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testGetResources_Status_Unknown() throws Exception {\n    Resource.Type type = Resource.Type.Host;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    Clusters clusters = createNiceMock(Clusters.class);\n    Cluster cluster = createNiceMock(Cluster.class);\n    Host host1 = createNiceMock(Host.class);\n    HostHealthStatus healthStatus = createNiceMock(HostHealthStatus.class);\n    AmbariMetaInfo ambariMetaInfo = createNiceMock(AmbariMetaInfo.class);\n\n    HostResponse hostResponse1 = createNiceMock(HostResponse.class);\n\n    List<Host> hosts = new LinkedList<Host>();\n    hosts.add(host1);\n\n    Set<Cluster> clusterSet = new HashSet<Cluster>();\n    clusterSet.add(cluster);\n\n    // set expectations\n    expect(managementController.getClusters()).andReturn(clusters).anyTimes();\n    expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();\n\n    expect(clusters.getHosts()).andReturn(hosts).anyTimes();\n\n    expect(clusters.getCluster(\"Cluster100\")).andReturn(cluster).anyTimes();\n\n    expect(clusters.getClustersForHost(\"Host100\")).andReturn(clusterSet).anyTimes();\n\n    expect(host1.getHostName()).andReturn(\"Host100\").anyTimes();\n\n    expect(host1.convertToResponse()).andReturn(hostResponse1);\n\n    expect(hostResponse1.getClusterName()).andReturn(\"Cluster100\").anyTimes();\n    expect(hostResponse1.getHostname()).andReturn(\"Host100\").anyTimes();\n    expect(hostResponse1.getHealthStatus()).andReturn(healthStatus).anyTimes();\n    expect(hostResponse1.getStatus()).andReturn(HealthStatus.UNKNOWN.name()).anyTimes();\n\n    expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.UNKNOWN).anyTimes();\n    expect(healthStatus.getHealthReport()).andReturn(\"UNKNOWN\").anyTimes();\n\n\n    // replay\n    replay(managementController, clusters, cluster,\n        host1,\n        hostResponse1,\n        healthStatus, ambariMetaInfo);\n\n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n    Set<String> propertyIds = new HashSet<String>();\n\n    propertyIds.add(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);\n    propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);\n    propertyIds.add(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);\n\n    Predicate predicate =\n        new PredicateBuilder().property(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID).equals(\"Cluster100\").\n            toPredicate();\n    Request request = PropertyHelper.getReadRequest(propertyIds);\n    Set<Resource> resources = provider.getResources(request, predicate);\n\n    Assert.assertEquals(1, resources.size());\n    for (Resource resource : resources) {\n      String clusterName = (String) resource.getPropertyValue(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);\n      Assert.assertEquals(\"Cluster100\", clusterName);\n      String status = (String) resource.getPropertyValue(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);\n      Assert.assertEquals(\"UNKNOWN\", status);\n    }\n\n    // verify\n    verify(managementController, clusters, cluster,\n        host1,\n        hostResponse1,\n        healthStatus, ambariMetaInfo);\n  }","id":2586,"modified_method":"@Test\n  public void testGetResources_Status_Unknown() throws Exception {\n    Resource.Type type = Resource.Type.Host;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    Clusters clusters = createNiceMock(Clusters.class);\n    Cluster cluster = createNiceMock(Cluster.class);\n    HostHealthStatus healthStatus = createNiceMock(HostHealthStatus.class);\n    AmbariMetaInfo ambariMetaInfo = createNiceMock(AmbariMetaInfo.class);\n    HostResponse hostResponse1 = createNiceMock(HostResponse.class);\n    ResourceProviderFactory resourceProviderFactory = createNiceMock(ResourceProviderFactory.class);\n    ResourceProvider hostResourceProvider = createNiceMock(HostResourceProvider.class);\n    \n    AbstractControllerResourceProvider.init(resourceProviderFactory);\n    \n    Set<Cluster> clusterSet = new HashSet<Cluster>();\n    clusterSet.add(cluster);\n\n    // set expectations\n    expect(managementController.getClusters()).andReturn(clusters).anyTimes();\n    expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();\n\n    expect(clusters.getCluster(\"Cluster100\")).andReturn(cluster).anyTimes();\n\n    expect(clusters.getClustersForHost(\"Host100\")).andReturn(clusterSet).anyTimes();\n    \n    expect(hostResponse1.getClusterName()).andReturn(\"Cluster100\").anyTimes();\n    expect(hostResponse1.getHostname()).andReturn(\"Host100\").anyTimes();\n    expect(hostResponse1.getHealthStatus()).andReturn(healthStatus).anyTimes();\n    expect(hostResponse1.getStatus()).andReturn(HealthStatus.UNKNOWN.name()).anyTimes();\n\n    expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.UNKNOWN).anyTimes();\n    expect(healthStatus.getHealthReport()).andReturn(\"UNKNOWN\").anyTimes();\n    expect(resourceProviderFactory.getHostResourceProvider(anyObject(Set.class), anyObject(Map.class),\n        eq(managementController))).andReturn(hostResourceProvider).anyTimes();\n    \n    Set<Resource> hostsResources = new HashSet<Resource>();\n    \n    Resource hostResource1 = new ResourceImpl(Resource.Type.Host);\n    hostResource1.setProperty(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID, \"Cluster100\");\n    hostResource1.setProperty(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID, HealthStatus.UNKNOWN.name());\n    hostsResources.add(hostResource1);\n    \n    Set<String> propertyIds = new HashSet<String>();\n\n    propertyIds.add(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);\n    propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);\n    propertyIds.add(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);\n\n    Predicate predicate =\n        new PredicateBuilder().property(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID).equals(\"Cluster100\").\n            toPredicate();\n    Request request = PropertyHelper.getReadRequest(propertyIds);\n    \n    expect(hostResourceProvider.getResources(eq(request), eq(predicate))).andReturn(hostsResources).anyTimes();\n\n    // replay\n    replay(managementController, clusters, cluster,\n        hostResponse1,\n        healthStatus, ambariMetaInfo, resourceProviderFactory, hostResourceProvider);\n\n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n    Set<Resource> resources = provider.getResources(request, predicate);\n\n    Assert.assertEquals(1, resources.size());\n    for (Resource resource : resources) {\n      String clusterName = (String) resource.getPropertyValue(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);\n      Assert.assertEquals(\"Cluster100\", clusterName);\n      String status = (String) resource.getPropertyValue(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);\n      Assert.assertEquals(\"UNKNOWN\", status);\n    }\n\n    // verify\n    verify(managementController, clusters, cluster,\n        hostResponse1,\n        healthStatus, ambariMetaInfo, resourceProviderFactory, hostResourceProvider);\n  }","commit_id":"375172c8eb350d25b73efc62a4637ac65f27d3c0","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testDeleteResources() throws Exception {\n    Resource.Type type = Resource.Type.Host;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    Clusters clusters = createNiceMock(Clusters.class);\n    Cluster cluster = createNiceMock(Cluster.class);\n    Host host1 = createNiceMock(Host.class);\n    HostHealthStatus healthStatus = createNiceMock(HostHealthStatus.class);\n\n    List<Host> hosts = new LinkedList<Host>();\n    hosts.add(host1);\n\n    Set<Cluster> clusterSet = new HashSet<Cluster>();\n\n    // set expectations\n    expect(managementController.getClusters()).andReturn(clusters).anyTimes();\n    expect(clusters.getHosts()).andReturn(hosts).anyTimes();\n    expect(clusters.getHost(\"Host100\")).andReturn(host1).anyTimes();\n\n    expect(clusters.getCluster(\"Cluster100\")).andReturn(cluster).anyTimes();\n\n    expect(clusters.getClustersForHost(\"Host100\")).andReturn(clusterSet).anyTimes();\n\n    expect(host1.getHostName()).andReturn(\"Host100\").anyTimes();\n\n    expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.HEALTHY).anyTimes();\n    expect(healthStatus.getHealthReport()).andReturn(\"HEALTHY\").anyTimes();\n\n    // replay\n    replay(managementController, clusters, cluster,\n        host1,\n        healthStatus);\n\n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n    AbstractResourceProviderTest.TestObserver observer = new AbstractResourceProviderTest.TestObserver();\n\n    ((ObservableResourceProvider)provider).addObserver(observer);\n\n    Predicate predicate = new PredicateBuilder().property(HostResourceProvider.HOST_NAME_PROPERTY_ID).equals(\"Host100\").\n        toPredicate();\n    provider.deleteResources(predicate);\n\n\n    ResourceProviderEvent lastEvent = observer.getLastEvent();\n    Assert.assertNotNull(lastEvent);\n    Assert.assertEquals(Resource.Type.Host, lastEvent.getResourceType());\n    Assert.assertEquals(ResourceProviderEvent.Type.Delete, lastEvent.getType());\n    Assert.assertEquals(predicate, lastEvent.getPredicate());\n    Assert.assertNull(lastEvent.getRequest());\n\n    // verify\n    verify(managementController, clusters, cluster,\n        host1,\n        healthStatus);\n  }","id":2587,"modified_method":"@Test\n  public void testDeleteResources() throws Exception {\n    Resource.Type type = Resource.Type.Host;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    Clusters clusters = createNiceMock(Clusters.class);\n    Cluster cluster = createNiceMock(Cluster.class);\n    Host host1 = createNiceMock(Host.class);\n    HostHealthStatus healthStatus = createNiceMock(HostHealthStatus.class);\n\n    List<Host> hosts = new LinkedList<Host>();\n    hosts.add(host1);\n\n    Set<Cluster> clusterSet = new HashSet<Cluster>();\n\n    // set expectations\n    expect(managementController.getClusters()).andReturn(clusters).anyTimes();\n    expect(clusters.getHosts()).andReturn(hosts).anyTimes();\n    expect(clusters.getHost(\"Host100\")).andReturn(host1).anyTimes();\n    expect(clusters.getCluster(\"Cluster100\")).andReturn(cluster).anyTimes();\n    expect(clusters.getClustersForHost(\"Host100\")).andReturn(clusterSet).anyTimes();\n    expect(host1.getHostName()).andReturn(\"Host100\").anyTimes();\n    expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.HEALTHY).anyTimes();\n    expect(healthStatus.getHealthReport()).andReturn(\"HEALTHY\").anyTimes();\n\n    // replay\n    replay(managementController, clusters, cluster,\n        host1,\n        healthStatus);\n\n    ResourceProvider provider = getHostProvider(managementController);\n\n    AbstractResourceProviderTest.TestObserver observer = new AbstractResourceProviderTest.TestObserver();\n\n    ((ObservableResourceProvider)provider).addObserver(observer);\n\n    Predicate predicate = new PredicateBuilder().property(HostResourceProvider.HOST_NAME_PROPERTY_ID).equals(\"Host100\").\n        toPredicate();\n    provider.deleteResources(predicate);\n\n\n    ResourceProviderEvent lastEvent = observer.getLastEvent();\n    Assert.assertNotNull(lastEvent);\n    Assert.assertEquals(Resource.Type.Host, lastEvent.getResourceType());\n    Assert.assertEquals(ResourceProviderEvent.Type.Delete, lastEvent.getType());\n    Assert.assertEquals(predicate, lastEvent.getPredicate());\n    Assert.assertNull(lastEvent.getRequest());\n\n    // verify\n    verify(managementController, clusters, cluster,\n        host1,\n        healthStatus);\n  }","commit_id":"375172c8eb350d25b73efc62a4637ac65f27d3c0","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testGetResources_Status_Healthy() throws Exception {\n    Resource.Type type = Resource.Type.Host;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    Clusters clusters = createNiceMock(Clusters.class);\n    Cluster cluster = createNiceMock(Cluster.class);\n    Host host1 = createNiceMock(Host.class);\n    HostHealthStatus healthStatus = createNiceMock(HostHealthStatus.class);\n    AmbariMetaInfo ambariMetaInfo = createNiceMock(AmbariMetaInfo.class);\n    StackId stackId = createNiceMock(StackId.class);\n    ComponentInfo componentInfo = createNiceMock(ComponentInfo.class);\n\n    HostResponse hostResponse1 = createNiceMock(HostResponse.class);\n\n    List<Host> hosts = new LinkedList<Host>();\n    hosts.add(host1);\n\n    Set<Cluster> clusterSet = new HashSet<Cluster>();\n    clusterSet.add(cluster);\n\n    ServiceComponentHostResponse shr1 = new ServiceComponentHostResponse(\"Cluster100\", \"Service100\", \"Component100\", \"Host100\", \"STARTED\", \"\", null, null);\n    ServiceComponentHostResponse shr2 = new ServiceComponentHostResponse(\"Cluster100\", \"Service100\", \"Component102\", \"Host100\", \"STARTED\", \"\", null, null);\n    ServiceComponentHostResponse shr3 = new ServiceComponentHostResponse(\"Cluster100\", \"Service100\", \"Component103\", \"Host100\", \"STARTED\", \"\", null, null);\n\n    Set<ServiceComponentHostResponse> responses = new HashSet<ServiceComponentHostResponse>();\n    responses.add(shr1);\n    responses.add(shr2);\n    responses.add(shr3);\n\n    // set expectations\n    expect(managementController.getClusters()).andReturn(clusters).anyTimes();\n    expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();\n    expect(managementController.getHostComponents((Set<ServiceComponentHostRequest>) anyObject())).andReturn(responses).anyTimes();\n\n    expect(clusters.getHosts()).andReturn(hosts).anyTimes();\n\n    expect(clusters.getCluster(\"Cluster100\")).andReturn(cluster).anyTimes();\n\n    expect(clusters.getClustersForHost(\"Host100\")).andReturn(clusterSet).anyTimes();\n\n    expect(host1.getHostName()).andReturn(\"Host100\").anyTimes();\n\n    expect(host1.convertToResponse()).andReturn(hostResponse1);\n\n    expect(hostResponse1.getClusterName()).andReturn(\"Cluster100\").anyTimes();\n    expect(hostResponse1.getHostname()).andReturn(\"Host100\").anyTimes();\n    expect(hostResponse1.getHealthStatus()).andReturn(healthStatus).anyTimes();\n    expect(hostResponse1.getStatus()).andReturn(HealthStatus.HEALTHY.name()).anyTimes();\n\n    expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.HEALTHY).anyTimes();\n    expect(healthStatus.getHealthReport()).andReturn(\"HEALTHY\").anyTimes();\n\n\n    expect(ambariMetaInfo.getComponentCategory((String) anyObject(), (String) anyObject(),\n        (String) anyObject(), (String) anyObject())).andReturn(componentInfo).anyTimes();\n\n    expect(componentInfo.getCategory()).andReturn(\"MASTER\").anyTimes();\n\n\n    // replay\n    replay(managementController, clusters, cluster,\n        host1,\n        hostResponse1, stackId, componentInfo,\n        healthStatus, ambariMetaInfo);\n\n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n    Set<String> propertyIds = new HashSet<String>();\n\n    propertyIds.add(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);\n    propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);\n    propertyIds.add(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);\n\n    Predicate predicate =\n        new PredicateBuilder().property(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID).equals(\"Cluster100\").\n            toPredicate();\n    Request request = PropertyHelper.getReadRequest(propertyIds);\n    Set<Resource> resources = provider.getResources(request, predicate);\n\n    Assert.assertEquals(1, resources.size());\n    for (Resource resource : resources) {\n      String clusterName = (String) resource.getPropertyValue(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);\n      Assert.assertEquals(\"Cluster100\", clusterName);\n      String status = (String) resource.getPropertyValue(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);\n      Assert.assertEquals(\"HEALTHY\", status);\n    }\n\n    // verify\n    verify(managementController, clusters, cluster,\n        host1,\n        hostResponse1, stackId, componentInfo,\n        healthStatus, ambariMetaInfo);\n  }","id":2588,"modified_method":"@Test\n  public void testGetResources_Status_Healthy() throws Exception {\n    Resource.Type type = Resource.Type.Host;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    Clusters clusters = createNiceMock(Clusters.class);\n    Cluster cluster = createNiceMock(Cluster.class);\n    HostHealthStatus healthStatus = createNiceMock(HostHealthStatus.class);\n    AmbariMetaInfo ambariMetaInfo = createNiceMock(AmbariMetaInfo.class);\n    StackId stackId = createNiceMock(StackId.class);\n    ComponentInfo componentInfo = createNiceMock(ComponentInfo.class);\n\n    HostResponse hostResponse1 = createNiceMock(HostResponse.class);\n    \n    ResourceProviderFactory resourceProviderFactory = createNiceMock(ResourceProviderFactory.class);\n    ResourceProvider hostResourceProvider = createNiceMock(HostResourceProvider.class);\n    \n    AbstractControllerResourceProvider.init(resourceProviderFactory);\n\n    Set<Cluster> clusterSet = new HashSet<Cluster>();\n    clusterSet.add(cluster);\n\n    ServiceComponentHostResponse shr1 = new ServiceComponentHostResponse(\"Cluster100\", \"Service100\", \"Component100\", \"Host100\", \"STARTED\", \"\", null, null);\n    ServiceComponentHostResponse shr2 = new ServiceComponentHostResponse(\"Cluster100\", \"Service100\", \"Component102\", \"Host100\", \"STARTED\", \"\", null, null);\n    ServiceComponentHostResponse shr3 = new ServiceComponentHostResponse(\"Cluster100\", \"Service100\", \"Component103\", \"Host100\", \"STARTED\", \"\", null, null);\n\n    Set<ServiceComponentHostResponse> responses = new HashSet<ServiceComponentHostResponse>();\n    responses.add(shr1);\n    responses.add(shr2);\n    responses.add(shr3);\n\n    // set expectations\n    expect(managementController.getClusters()).andReturn(clusters).anyTimes();\n    expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();\n    expect(managementController.getHostComponents((Set<ServiceComponentHostRequest>) anyObject())).andReturn(responses).anyTimes();\n\n    expect(clusters.getCluster(\"Cluster100\")).andReturn(cluster).anyTimes();\n\n    expect(clusters.getClustersForHost(\"Host100\")).andReturn(clusterSet).anyTimes();\n\n    expect(hostResponse1.getClusterName()).andReturn(\"Cluster100\").anyTimes();\n    expect(hostResponse1.getHostname()).andReturn(\"Host100\").anyTimes();\n    expect(hostResponse1.getHealthStatus()).andReturn(healthStatus).anyTimes();\n    expect(hostResponse1.getStatus()).andReturn(HealthStatus.HEALTHY.name()).anyTimes();\n\n    expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.HEALTHY).anyTimes();\n    expect(healthStatus.getHealthReport()).andReturn(\"HEALTHY\").anyTimes();\n\n\n    expect(ambariMetaInfo.getComponentCategory((String) anyObject(), (String) anyObject(),\n        (String) anyObject(), (String) anyObject())).andReturn(componentInfo).anyTimes();\n\n    expect(componentInfo.getCategory()).andReturn(\"MASTER\").anyTimes();\n    \n    expect(resourceProviderFactory.getHostResourceProvider(anyObject(Set.class), anyObject(Map.class),\n        eq(managementController))).andReturn(hostResourceProvider).anyTimes();\n    \n    Set<String> propertyIds = new HashSet<String>();\n\n    propertyIds.add(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);\n    propertyIds.add(HostResourceProvider.HOST_NAME_PROPERTY_ID);\n    propertyIds.add(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);\n\n    Predicate predicate =\n        new PredicateBuilder().property(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID).equals(\"Cluster100\").\n            toPredicate();\n    Request request = PropertyHelper.getReadRequest(propertyIds);\n    \n    \n    Set<Resource> hostsResources = new HashSet<Resource>();\n       \n    Resource hostResource1 = new ResourceImpl(Resource.Type.Host);\n    hostResource1.setProperty(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID, \"Cluster100\");\n    hostResource1.setProperty(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID, HealthStatus.HEALTHY.name());\n    hostsResources.add(hostResource1);\n    \n    expect(hostResourceProvider.getResources(eq(request), eq(predicate))).andReturn(hostsResources).anyTimes();\n\n\n    // replay\n    replay(managementController, clusters, cluster,\n        hostResponse1, stackId, componentInfo,\n        healthStatus, ambariMetaInfo, resourceProviderFactory, hostResourceProvider);\n\n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n\n    Set<Resource> resources = provider.getResources(request, predicate);\n\n    Assert.assertEquals(1, resources.size());\n    for (Resource resource : resources) {\n      String clusterName = (String) resource.getPropertyValue(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID);\n      Assert.assertEquals(\"Cluster100\", clusterName);\n      String status = (String) resource.getPropertyValue(HostResourceProvider.HOST_HOST_STATUS_PROPERTY_ID);\n      Assert.assertEquals(\"HEALTHY\", status);\n    }\n\n    // verify\n    verify(managementController, clusters, cluster,\n        hostResponse1, stackId, componentInfo,\n        healthStatus, ambariMetaInfo, resourceProviderFactory, hostResourceProvider);\n  }","commit_id":"375172c8eb350d25b73efc62a4637ac65f27d3c0","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testUpdateResources() throws Exception {\n    Resource.Type type = Resource.Type.Host;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    Clusters clusters = createNiceMock(Clusters.class);\n    Cluster cluster = createNiceMock(Cluster.class);\n    Host host1 = createNiceMock(Host.class);\n    HostHealthStatus healthStatus = createNiceMock(HostHealthStatus.class);\n    AmbariMetaInfo ambariMetaInfo = createNiceMock(AmbariMetaInfo.class);\n\n    HostResponse hostResponse1 = createNiceMock(HostResponse.class);\n\n    List<Host> hosts = new LinkedList<Host>();\n    hosts.add(host1);\n\n    Set<Cluster> clusterSet = new HashSet<Cluster>();\n    clusterSet.add(cluster);\n\n    // set expectations\n    expect(managementController.getClusters()).andReturn(clusters).anyTimes();\n    expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();\n    expect(managementController.getHostComponents((Set<ServiceComponentHostRequest>) anyObject())).andReturn(Collections.<ServiceComponentHostResponse>emptySet()).anyTimes();\n\n    expect(clusters.getHosts()).andReturn(hosts).anyTimes();\n    expect(clusters.getHost(\"Host100\")).andReturn(host1).anyTimes();\n\n    expect(clusters.getCluster(\"Cluster100\")).andReturn(cluster).anyTimes();\n\n    expect(clusters.getClustersForHost(\"Host100\")).andReturn(clusterSet).anyTimes();\n\n    expect(host1.getHostName()).andReturn(\"Host100\").anyTimes();\n\n    expect(host1.convertToResponse()).andReturn(hostResponse1);\n\n    expect(hostResponse1.getClusterName()).andReturn(\"Cluster100\").anyTimes();\n    expect(hostResponse1.getHostname()).andReturn(\"Host100\").anyTimes();\n    expect(hostResponse1.getHealthStatus()).andReturn(healthStatus).anyTimes();\n\n    expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.HEALTHY).anyTimes();\n    expect(healthStatus.getHealthReport()).andReturn(\"HEALTHY\").anyTimes();\n\n    // replay\n    replay(managementController, clusters, cluster,\n        host1,\n        hostResponse1,\n        healthStatus, ambariMetaInfo);\n\n\n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n    // add the property map to a set for the request.\n    Map<String, Object> properties = new LinkedHashMap<String, Object>();\n\n    properties.put(HostResourceProvider.HOST_RACK_INFO_PROPERTY_ID, \"rack info\");\n\n    // create the request\n    Request request = PropertyHelper.getUpdateRequest(properties, null);\n\n    Predicate  predicate = new PredicateBuilder().property(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID).\n        equals(\"Cluster100\").\n        and().property(HostResourceProvider.HOST_NAME_PROPERTY_ID).equals(\"Host100\").toPredicate();\n    provider.updateResources(request, predicate);\n\n    // verify\n    verify(managementController, clusters, cluster,\n        host1,\n        hostResponse1,\n        healthStatus, ambariMetaInfo);\n  }","id":2589,"modified_method":"@Test\n  public void testUpdateResources() throws Exception {\n    Resource.Type type = Resource.Type.Host;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    Clusters clusters = createNiceMock(Clusters.class);\n    Cluster cluster = createNiceMock(Cluster.class);\n    HostHealthStatus healthStatus = createNiceMock(HostHealthStatus.class);\n    AmbariMetaInfo ambariMetaInfo = createNiceMock(AmbariMetaInfo.class);\n    HostResponse hostResponse1 = createNiceMock(HostResponse.class);\n    ResourceProviderFactory resourceProviderFactory = createNiceMock(ResourceProviderFactory.class);\n    ResourceProvider hostResourceProvider = createNiceMock(HostResourceProvider.class);\n    \n    AbstractControllerResourceProvider.init(resourceProviderFactory);\n\n    Set<Cluster> clusterSet = new HashSet<Cluster>();\n    clusterSet.add(cluster);\n\n    // set expectations\n    expect(managementController.getClusters()).andReturn(clusters).anyTimes();\n    expect(managementController.getAmbariMetaInfo()).andReturn(ambariMetaInfo).anyTimes();\n    expect(managementController.getHostComponents((Set<ServiceComponentHostRequest>) anyObject())).andReturn(Collections.<ServiceComponentHostResponse>emptySet()).anyTimes();\n    expect(clusters.getCluster(\"Cluster100\")).andReturn(cluster).anyTimes();\n    expect(clusters.getClustersForHost(\"Host100\")).andReturn(clusterSet).anyTimes();\n    expect(hostResponse1.getClusterName()).andReturn(\"Cluster100\").anyTimes();\n    expect(hostResponse1.getHostname()).andReturn(\"Host100\").anyTimes();\n    expect(hostResponse1.getHealthStatus()).andReturn(healthStatus).anyTimes();\n    expect(healthStatus.getHealthStatus()).andReturn(HostHealthStatus.HealthStatus.HEALTHY).anyTimes();\n    expect(healthStatus.getHealthReport()).andReturn(\"HEALTHY\").anyTimes();\n    expect(resourceProviderFactory.getHostResourceProvider(anyObject(Set.class), anyObject(Map.class),\n        eq(managementController))).andReturn(hostResourceProvider).anyTimes();\n\n    // replay\n    replay(managementController, clusters, cluster,\n        hostResponse1,\n        healthStatus, ambariMetaInfo, resourceProviderFactory, hostResourceProvider);\n\n\n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n    // add the property map to a set for the request.\n    Map<String, Object> properties = new LinkedHashMap<String, Object>();\n\n    properties.put(HostResourceProvider.HOST_RACK_INFO_PROPERTY_ID, \"rack info\");\n\n    // create the request\n    Request request = PropertyHelper.getUpdateRequest(properties, null);\n\n    Predicate  predicate = new PredicateBuilder().property(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID).\n        equals(\"Cluster100\").\n        and().property(HostResourceProvider.HOST_NAME_PROPERTY_ID).equals(\"Host100\").toPredicate();\n    provider.updateResources(request, predicate);\n\n    // verify\n    verify(managementController, clusters, cluster,\n        hostResponse1,\n        healthStatus, ambariMetaInfo, resourceProviderFactory, hostResourceProvider);\n  }","commit_id":"375172c8eb350d25b73efc62a4637ac65f27d3c0","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testCreateResources() throws Exception {\n    Resource.Type type = Resource.Type.Host;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    Clusters clusters = createNiceMock(Clusters.class);\n    RequestStatusResponse response = createNiceMock(RequestStatusResponse.class);\n\n    expect(managementController.getClusters()).andReturn(clusters);\n\n    // replay\n    replay(managementController, response, clusters);\n\n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n    // add the property map to a set for the request.  add more maps for multiple creates\n    Set<Map<String, Object>> propertySet = new LinkedHashSet<Map<String, Object>>();\n\n    Map<String, Object> properties = new LinkedHashMap<String, Object>();\n\n    // add properties to the request map\n    properties.put(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID, \"Cluster100\");\n    properties.put(HostResourceProvider.HOST_NAME_PROPERTY_ID, \"Host100\");\n\n    propertySet.add(properties);\n\n    // create the request\n    Request request = PropertyHelper.getCreateRequest(propertySet, null);\n\n    provider.createResources(request);\n\n    // verify\n    verify(managementController, response, clusters);\n  }","id":2590,"modified_method":"@Test\n  public void testCreateResources() throws Exception {\n    Resource.Type type = Resource.Type.Host;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n    Clusters clusters = createNiceMock(Clusters.class);\n    RequestStatusResponse response = createNiceMock(RequestStatusResponse.class);\n    ResourceProviderFactory resourceProviderFactory = createNiceMock(ResourceProviderFactory.class);\n    ResourceProvider hostResourceProvider = createNiceMock(HostResourceProvider.class);\n    \n    AbstractControllerResourceProvider.init(resourceProviderFactory);\n    \n    expect(resourceProviderFactory.getHostResourceProvider(anyObject(Set.class), anyObject(Map.class),\n        eq(managementController))).andReturn(hostResourceProvider).anyTimes();\n    // replay\n    replay(managementController, response, clusters, resourceProviderFactory, hostResourceProvider);\n\n    ResourceProvider provider = AbstractControllerResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n    // add the property map to a set for the request.  add more maps for multiple creates\n    Set<Map<String, Object>> propertySet = new LinkedHashSet<Map<String, Object>>();\n\n    Map<String, Object> properties = new LinkedHashMap<String, Object>();\n\n    // add properties to the request map\n    properties.put(HostResourceProvider.HOST_CLUSTER_NAME_PROPERTY_ID, \"Cluster100\");\n    properties.put(HostResourceProvider.HOST_NAME_PROPERTY_ID, \"Host100\");\n\n    propertySet.add(properties);\n\n    // create the request\n    Request request = PropertyHelper.getCreateRequest(propertySet, null);\n\n    provider.createResources(request);\n\n    // verify\n    verify(managementController, response, clusters);\n  }","commit_id":"375172c8eb350d25b73efc62a4637ac65f27d3c0","url":"https://github.com/apache/ambari"},{"original_method":"public void addEquation(IWrapper lhs, IWrapper rhs, EquationInfo errorInfo) {\n    IWrapper lhsRepresentator = getRepresentatorWrapper(lhs);\n    IWrapper rhsRepresentator = getRepresentatorWrapper(rhs);\n\n    // no equation needed\n    if (EqualUtil.equals(rhsRepresentator, lhsRepresentator)) return;\n    if (rhsRepresentator == null || lhsRepresentator == null) return;\n\n    // add var to type's multieq\n    RuntimeTypeVariable varRhs = rhsRepresentator.getVariable();\n    RuntimeTypeVariable varLhs = lhsRepresentator.getVariable();\n    if (varRhs != null) {\n      processEquation(rhsRepresentator, lhsRepresentator, errorInfo);\n      return;\n    } else {\n      if (varLhs != null) {\n        processEquation(lhsRepresentator, rhsRepresentator, errorInfo);\n        return;\n      }\n    }\n\n    // solve equation\n    if (!compareWrappers(rhsRepresentator, lhsRepresentator, errorInfo)) {\n      IErrorReporter errorReporter;\n      SNode nodeWithError = errorInfo == null ? null : errorInfo.getNodeWithError();\n      if (errorInfo != null && errorInfo.getErrorString() != null) {\n        errorReporter = new SimpleErrorReporter(errorInfo.getErrorString(), errorInfo.getRuleModel(), errorInfo.getRuleId());\n      } else {\n        String ruleModel = errorInfo == null ? null : errorInfo.getRuleModel();\n        String ruleId = errorInfo == null ? null : errorInfo.getRuleId();\n        errorReporter =\n          new EquationErrorReporter(this, \"incompatible types: \",\n            rhsRepresentator, \" and \", lhsRepresentator, \"\", ruleModel, ruleId);\n      }\n      if (errorInfo != null) {\n        errorReporter.setIntentionProvider(errorInfo.getIntentionProvider());\n      }\n      processErrorEquation(lhsRepresentator, rhsRepresentator, errorReporter, nodeWithError);\n      return;\n    }\n  }","id":2591,"modified_method":"public void addEquation(IWrapper lhs, IWrapper rhs, EquationInfo errorInfo) {\n    IWrapper lhsRepresentator = getRepresentatorWrapper(lhs);\n    IWrapper rhsRepresentator = getRepresentatorWrapper(rhs);\n\n    // no equation needed\n    if (EqualUtil.equals(rhsRepresentator, lhsRepresentator)) return;\n    if (rhsRepresentator == null || lhsRepresentator == null) return;\n\n    // add var to type's multieq\n    RuntimeTypeVariable varRhs = rhsRepresentator.getVariable();\n    RuntimeTypeVariable varLhs = lhsRepresentator.getVariable();\n    if (varRhs != null) {\n      processEquation(rhsRepresentator, lhsRepresentator, errorInfo);\n      return;\n    } else {\n      if (varLhs != null) {\n        processEquation(lhsRepresentator, rhsRepresentator, errorInfo);\n        return;\n      }\n    }\n\n    // solve equation\n    if (!compareWrappers(rhsRepresentator, lhsRepresentator, errorInfo)) {\n      IErrorReporter errorReporter;\n      SNode nodeWithError = errorInfo == null ? null : errorInfo.getNodeWithError();\n      IntentionProvider intentionProvider = errorInfo == null ? null : errorInfo.getIntentionProvider();\n      String errorString = errorInfo == null ? null : errorInfo.getErrorString();\n      String ruleModel = errorInfo == null ? null : errorInfo.getRuleModel();\n      String ruleId = errorInfo == null ? null : errorInfo.getRuleId();\n\n      if (errorString != null) {\n        errorReporter = new SimpleErrorReporter(errorString, ruleModel, ruleId);\n      } else {\n        errorReporter =\n          new EquationErrorReporter(this, \"incompatible types: \",\n            rhsRepresentator, \" and \", lhsRepresentator, \"\", ruleModel, ruleId);\n      }\n      errorReporter.setIntentionProvider(intentionProvider);\n      processErrorEquation(lhsRepresentator, rhsRepresentator, errorReporter, nodeWithError);\n      return;\n    }\n  }","commit_id":"755247254f6522306e4393a2a83c093fcb89ff77","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void addInequation(IWrapper subType, IWrapper supertype, EquationInfo equationInfo, boolean isWeak, boolean solveOnlyConcrete, boolean checkOnly) {\n    IWrapper subtypeRepresentator = getRepresentatorWrapper(subType);\n    IWrapper supertypeRepresentator = getRepresentatorWrapper(supertype);\n\n    // no equation needed\n    if (NodeWrapper.fromWrapper(subtypeRepresentator) == NodeWrapper.fromWrapper(supertypeRepresentator)) return;\n\n    // RuntimeTypeVariable varSubtype = subtypeRepresentator == null ? null : subtypeRepresentator.getVariable();\n    RuntimeTypeVariable varSupertype = supertypeRepresentator == null ? null : supertypeRepresentator.getVariable();\n    isConcrete(subtypeRepresentator);\n    boolean subtypeHasNonConcreteVars = !isConcrete(subtypeRepresentator);\n    boolean supertypeHasNonConcreteVars = !isConcrete(supertypeRepresentator);\n\n    //if check only\n    if (checkOnly) {\n      if (subtypeHasNonConcreteVars || supertypeHasNonConcreteVars) {\n        if (isWeak) {\n          addSubtyping(subtypeRepresentator, supertypeRepresentator, equationInfo, true);\n        } else {\n          addStrongSubtyping(subtypeRepresentator, supertypeRepresentator, equationInfo, true);\n        }\n        return;\n      }\n    }\n\n    //elimination rules:\n    if (subtypeRepresentator instanceof NodeWrapper && supertypeRepresentator instanceof NodeWrapper) {\n      SNode node1 = subtypeRepresentator.getNode();\n      SNode node2 = supertypeRepresentator.getNode();\n      Set<InequationReplacementRule_Runtime> inequationReplacementRules = myTypeChecker.getRulesManager().getReplacementRules(node1, node2);\n      for (InequationReplacementRule_Runtime inequationReplacementRule : inequationReplacementRules) {\n        inequationReplacementRule.processInequation(node1, node2, equationInfo);\n        return;\n      }\n    }\n\n    // if one of them is a var\n    if (subtypeHasNonConcreteVars && solveOnlyConcrete || varSupertype != null) {\n      if (isWeak) {\n        addSubtyping(subtypeRepresentator, supertypeRepresentator, equationInfo, false);\n      } else {\n        addStrongSubtyping(subtypeRepresentator, supertypeRepresentator, equationInfo, false);\n      }\n      return;\n    }\n\n    //expand, if contains some vars.\n    if (subtypeRepresentator instanceof NodeWrapper) {\n      NodeWrapper subtypeNodeWrapper = (NodeWrapper) subtypeRepresentator;\n      SModel typesModel = myTypeChecker.getRuntimeTypesModel();\n      NodeWrapper representatorCopy = NodeWrapper.fromNode(CopyUtil.copy(subtypeNodeWrapper.getNode()), this);\n      subtypeRepresentator = expandWrapper(null, representatorCopy, typesModel);\n    }\n    if (supertypeRepresentator instanceof NodeWrapper) {\n      NodeWrapper supertypeNodeWrapper = (NodeWrapper) supertypeRepresentator;\n      SModel typesModel = myTypeChecker.getRuntimeTypesModel();\n      NodeWrapper representatorCopy = NodeWrapper.fromNode(CopyUtil.copy(supertypeNodeWrapper.getNode()), this);\n      supertypeRepresentator = expandWrapper(null, representatorCopy, typesModel);\n    }\n\n    // if subtyping\n    if (myTypeChecker.getSubtypingManager().isSubtype(subtypeRepresentator, supertypeRepresentator, this, equationInfo, isWeak)) {\n      return;\n    }\n\n    if (equationInfo.getErrorString() != null) {\n      myTypeChecker.reportTypeError(equationInfo.getNodeWithError(), equationInfo.getErrorString());\n      return;\n    }\n    String strongString = isWeak ? \"\" : \" strong\";\n    EquationErrorReporter errorReporter =\n      new EquationErrorReporter(this, \"type \", subtypeRepresentator,\n        \" is not a\" + strongString + \" subtype of \", supertypeRepresentator, \"\", equationInfo.getRuleModel(), equationInfo.getRuleId());\n    errorReporter.setIntentionProvider(equationInfo.getIntentionProvider());\n    myTypeChecker.reportTypeError(equationInfo.getNodeWithError(), errorReporter);\n\n    //4debug\n    // myTypeChecker.getSubtypingManager().isSubtype(subtypeRepresentator, supertypeRepresentator, this, errorInfo, isWeak);\n  }","id":2592,"modified_method":"public void addInequation(IWrapper subType, IWrapper supertype, EquationInfo equationInfo, boolean isWeak, boolean solveOnlyConcrete, boolean checkOnly) {\n    IWrapper subtypeRepresentator = getRepresentatorWrapper(subType);\n    IWrapper supertypeRepresentator = getRepresentatorWrapper(supertype);\n\n    // no equation needed\n    if (NodeWrapper.fromWrapper(subtypeRepresentator) == NodeWrapper.fromWrapper(supertypeRepresentator)) return;\n\n    // RuntimeTypeVariable varSubtype = subtypeRepresentator == null ? null : subtypeRepresentator.getVariable();\n    RuntimeTypeVariable varSupertype = supertypeRepresentator == null ? null : supertypeRepresentator.getVariable();\n    isConcrete(subtypeRepresentator);\n    boolean subtypeHasNonConcreteVars = !isConcrete(subtypeRepresentator);\n    boolean supertypeHasNonConcreteVars = !isConcrete(supertypeRepresentator);\n\n    //if check only\n    if (checkOnly) {\n      if (subtypeHasNonConcreteVars || supertypeHasNonConcreteVars) {\n        if (isWeak) {\n          addSubtyping(subtypeRepresentator, supertypeRepresentator, equationInfo, true);\n        } else {\n          addStrongSubtyping(subtypeRepresentator, supertypeRepresentator, equationInfo, true);\n        }\n        return;\n      }\n    }\n\n    //elimination rules:\n    if (subtypeRepresentator instanceof NodeWrapper && supertypeRepresentator instanceof NodeWrapper) {\n      SNode node1 = subtypeRepresentator.getNode();\n      SNode node2 = supertypeRepresentator.getNode();\n      Set<InequationReplacementRule_Runtime> inequationReplacementRules = myTypeChecker.getRulesManager().getReplacementRules(node1, node2);\n      for (InequationReplacementRule_Runtime inequationReplacementRule : inequationReplacementRules) {\n        inequationReplacementRule.processInequation(node1, node2, equationInfo);\n        return;\n      }\n    }\n\n    // if one of them is a var\n    if (subtypeHasNonConcreteVars && solveOnlyConcrete || varSupertype != null) {\n      if (isWeak) {\n        addSubtyping(subtypeRepresentator, supertypeRepresentator, equationInfo, false);\n      } else {\n        addStrongSubtyping(subtypeRepresentator, supertypeRepresentator, equationInfo, false);\n      }\n      return;\n    }\n\n    //expand, if contains some vars.\n    if (subtypeRepresentator instanceof NodeWrapper) {\n      NodeWrapper subtypeNodeWrapper = (NodeWrapper) subtypeRepresentator;\n      SModel typesModel = myTypeChecker.getRuntimeTypesModel();\n      NodeWrapper representatorCopy = NodeWrapper.fromNode(CopyUtil.copy(subtypeNodeWrapper.getNode()), this);\n      subtypeRepresentator = expandWrapper(null, representatorCopy, typesModel);\n    }\n    if (supertypeRepresentator instanceof NodeWrapper) {\n      NodeWrapper supertypeNodeWrapper = (NodeWrapper) supertypeRepresentator;\n      SModel typesModel = myTypeChecker.getRuntimeTypesModel();\n      NodeWrapper representatorCopy = NodeWrapper.fromNode(CopyUtil.copy(supertypeNodeWrapper.getNode()), this);\n      supertypeRepresentator = expandWrapper(null, representatorCopy, typesModel);\n    }\n\n    // if subtyping\n    if (myTypeChecker.getSubtypingManager().isSubtype(subtypeRepresentator, supertypeRepresentator, this, equationInfo, isWeak)) {\n      return;\n    }\n\n    IErrorReporter errorReporter;\n    String errorString = equationInfo.getErrorString();\n    String ruleModel = equationInfo.getRuleModel();\n    String ruleId = equationInfo.getRuleId();\n    if (errorString == null) {\n      String strongString = isWeak ? \"\" : \" strong\";\n      errorReporter = new EquationErrorReporter(this, \"type \", subtypeRepresentator,\n        \" is not a\" + strongString + \" subtype of \", supertypeRepresentator, \"\", ruleModel, ruleId);\n    } else {\n      errorReporter = new SimpleErrorReporter(errorString, ruleModel, ruleId);\n    }\n    errorReporter.setIntentionProvider(equationInfo.getIntentionProvider());\n    myTypeChecker.reportTypeError(equationInfo.getNodeWithError(), errorReporter);\n\n    //4debug\n    // myTypeChecker.getSubtypingManager().isSubtype(subtypeRepresentator, supertypeRepresentator, this, errorInfo, isWeak);\n  }","commit_id":"755247254f6522306e4393a2a83c093fcb89ff77","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void addInequationComparable(IWrapper type1, IWrapper type2, EquationInfo errorInfo, boolean isWeak) {\n    IWrapper representator1 = getRepresentatorWrapper(type1);\n    IWrapper representator2 = getRepresentatorWrapper(type2);\n\n    // no equation needed\n    if (NodeWrapper.fromWrapper(representator1) == NodeWrapper.fromWrapper(representator2)) return;\n\n    // if one of them is a var\n    RuntimeTypeVariable varSubtype = representator1 == null ? null : representator1.getVariable();\n    RuntimeTypeVariable varSupertype = representator2 == null ? null : representator2.getVariable();\n    if (varSubtype != null || varSupertype != null) {\n      if (isWeak) {\n        addComparable(representator1, representator2, errorInfo);\n      } else {\n        addStrongComparable(representator1, representator2, errorInfo);\n      }\n      return;\n    }\n\n    // if subtype or supertype\n    if (myTypeChecker.getSubtypingManager().isComparableWRTRules(representator1, representator2, this, errorInfo, isWeak)) {\n      return;\n    }\n    if (myTypeChecker.getSubtypingManager().isSubtype(representator1, representator2, this, errorInfo, isWeak)) {\n      return;\n    }\n    if (myTypeChecker.getSubtypingManager().isSubtype(representator2, representator1, this, errorInfo, isWeak)) {\n      return;\n    }\n\n    if (errorInfo.getErrorString() != null) {\n      myTypeChecker.reportTypeError(errorInfo.getNodeWithError(), errorInfo.getErrorString());\n      return;\n    }\n    String strongString = isWeak ? \"\" : \" strongly\";\n    EquationErrorReporter errorReporter =\n      new EquationErrorReporter(this, \"type \", representator1, \" is not\" + strongString + \" comparable with \",\n        representator2, \"\", errorInfo.getRuleModel(), errorInfo.getRuleId());\n    errorReporter.setIntentionProvider(errorInfo.getIntentionProvider());\n    myTypeChecker.reportTypeError(errorInfo.getNodeWithError(), errorReporter);\n  }","id":2593,"modified_method":"public void addInequationComparable(IWrapper type1, IWrapper type2, EquationInfo errorInfo, boolean isWeak) {\n    IWrapper representator1 = getRepresentatorWrapper(type1);\n    IWrapper representator2 = getRepresentatorWrapper(type2);\n\n    // no equation needed\n    if (NodeWrapper.fromWrapper(representator1) == NodeWrapper.fromWrapper(representator2)) return;\n\n    // if one of them is a var\n    RuntimeTypeVariable varSubtype = representator1 == null ? null : representator1.getVariable();\n    RuntimeTypeVariable varSupertype = representator2 == null ? null : representator2.getVariable();\n    if (varSubtype != null || varSupertype != null) {\n      if (isWeak) {\n        addComparable(representator1, representator2, errorInfo);\n      } else {\n        addStrongComparable(representator1, representator2, errorInfo);\n      }\n      return;\n    }\n\n    // if subtype or supertype\n    if (myTypeChecker.getSubtypingManager().isComparableWRTRules(representator1, representator2, this, errorInfo, isWeak)) {\n      return;\n    }\n    if (myTypeChecker.getSubtypingManager().isSubtype(representator1, representator2, this, errorInfo, isWeak)) {\n      return;\n    }\n    if (myTypeChecker.getSubtypingManager().isSubtype(representator2, representator1, this, errorInfo, isWeak)) {\n      return;\n    }\n\n    String ruleModel = errorInfo.getRuleModel();\n    String ruleId = errorInfo.getRuleId();\n    String errorString = errorInfo.getErrorString();\n    IErrorReporter errorReporter;\n    if (errorString == null) {\n      String strongString = isWeak ? \"\" : \" strongly\";\n      errorReporter = new EquationErrorReporter(this, \"type \", representator1, \" is not\" + strongString + \" comparable with \",\n        representator2, \"\", ruleModel, ruleId);\n    } else {\n      errorReporter = new SimpleErrorReporter(errorString, ruleModel, ruleId);\n    }\n    errorReporter.setIntentionProvider(errorInfo.getIntentionProvider());\n    myTypeChecker.reportTypeError(errorInfo.getNodeWithError(), errorReporter);\n  }","commit_id":"755247254f6522306e4393a2a83c093fcb89ff77","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static void doTestCoalescePairNotNull(Client cl, String col1, String col2) throws Exception {\n        // coalesce(col2, col1) == col2\n        String sql = \"SELECT DECODE(COALESCE(\"+col2+\",\"+ col1+\"),\" + col2 + \", 0, 1) \"\n                + \"FROM C_NULL WHERE ID = 2;\";\n        ClientResponse cr = cl.callProcedure(\"@AdHoc\", sql);\n        assertEquals(cr.getStatus(), ClientResponse.SUCCESS);\n        VoltTable result = cr.getResults()[0];\n        result.advanceRow();\n        long rv = result.getLong(0);\n        assertEquals(rv, 0);\n\n        // coalesce(col1, col2) == col1\n        sql = \"SELECT DECODE(COALESCE(\"+col1+\",\"+ col2+\"),\" + col1 + \", 0, 1) \"\n                + \"FROM C_NULL WHERE ID = 2;\";\n        cr = cl.callProcedure(\"@AdHoc\", sql);\n        assertEquals(cr.getStatus(), ClientResponse.SUCCESS);\n        result = cr.getResults()[0];\n        result.advanceRow();\n        rv = result.getLong(0);\n        assertEquals(rv, 0);\n    }","id":2594,"modified_method":"private static void doTestCoalescePairNotNull(Client cl, String col1, String col2) throws Exception {\n        // coalesce(col1, col2) == col1\n        doTestCoalesceWithoutConst(cl, new String[]{col1, col2}, col1, \"2\");\n        // coalesce(col2, col1) == col2\n        doTestCoalesceWithoutConst(cl, new String[]{col2, col1}, col2, \"2\");\n    }","commit_id":"f930377f38488a20e3b11894a83a07892a49a66a","url":"https://github.com/VoltDB/voltdb"},{"original_method":"private static void doTestCoalescePairOneNull(Client cl, String col1, String col2) throws Exception {\n        // coalesce(col1, col2) == coalesce(col2, col1)\n        String sql = \"SELECT DECODE(COALESCE(\"+col1+\",\"+ col2+\"),COALESCE(\"+col2+\",\"+col1+\"), 0, 1) \"\n                + \"FROM C_NULL WHERE ID = 1;\";\n        ClientResponse cr = cl.callProcedure(\"@AdHoc\", sql);\n        assertEquals(cr.getStatus(), ClientResponse.SUCCESS);\n        VoltTable result = cr.getResults()[0];\n        result.advanceRow();\n        long rv = result.getLong(0);\n        assertEquals(rv, 0);\n\n        // coalesce(col1, col2) == col1\n        sql = \"SELECT DECODE(COALESCE(\"+col1+\",\"+ col2+\"),\" + col1 + \", 0, 1) \"\n                + \"FROM C_NULL WHERE ID = 1;\";\n        cr = cl.callProcedure(\"@AdHoc\", sql);\n        assertEquals(cr.getStatus(), ClientResponse.SUCCESS);\n        result = cr.getResults()[0];\n        result.advanceRow();\n        rv = result.getLong(0);\n        assertEquals(rv, 0);\n    }","id":2595,"modified_method":"private static void doTestCoalescePairOneNull(Client cl, String col1, String col2) throws Exception {\n        // coalesce(col1, col2) == coalesce(col2, col1) == col1\n        doTestCoalesceWithoutConst(cl, new String[]{col1, col2}, col1, \"1\");\n        doTestCoalesceWithoutConst(cl, new String[]{col2, col1}, col1, \"1\");\n    }","commit_id":"f930377f38488a20e3b11894a83a07892a49a66a","url":"https://github.com/VoltDB/voltdb"},{"original_method":"private static void doTestCoalescePairBothNull(Client cl, String col1, String col2) throws Exception{\n        // coalesce(col1, col2) == coalesce(col2, col1)\n        String sql = \"SELECT DECODE(COALESCE(\"+col1+\",\"+ col2+\"),COALESCE(\"+col2+\",\"+col1+\"), 0, 1) \"\n                + \"FROM C_NULL WHERE ID = 0;\";\n        ClientResponse cr = cl.callProcedure(\"@AdHoc\", sql);\n        assertEquals(cr.getStatus(), ClientResponse.SUCCESS);\n        VoltTable result = cr.getResults()[0];\n        result.advanceRow();\n        long rv = result.getLong(0);\n        assertEquals(rv, 0);\n\n        // coalesce(col1, col2) == col1\n        sql = \"SELECT DECODE(COALESCE(\"+col1+\",\"+ col2+\"),\" + col1 + \", 0, 1) \"\n                + \"FROM C_NULL WHERE ID = 0;\";\n        cr = cl.callProcedure(\"@AdHoc\", sql);\n        assertEquals(cr.getStatus(), ClientResponse.SUCCESS);\n        result = cr.getResults()[0];\n        result.advanceRow();\n        rv = result.getLong(0);\n        assertEquals(rv, 0);\n    }","id":2596,"modified_method":"private static void doTestCoalescePairBothNull(Client cl, String col1, String col2) throws Exception{\n        // coalesce(col1, col2) == coalesce(col2, col1) == col1\n        doTestCoalesceWithoutConst(cl, new String[]{col1, col2}, col1, \"0\");\n        doTestCoalesceWithoutConst(cl, new String[]{col2, col1}, col1, \"0\");\n    }","commit_id":"f930377f38488a20e3b11894a83a07892a49a66a","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void testCoalesce() throws Exception {\n        System.out.println(\"STARTING test Case COALESCE function...\");\n        Client cl = getClient();\n\n        cl.callProcedure(\"@AdHoc\", \"insert into C_NULL(ID) values (0);\");\n        cl.callProcedure(\"@AdHoc\", \"insert into C_NULL(ID,S1,I1,F1,D1,V1,T1) values (1,1,1,1,1,'1',100000)\");\n        // TODO: below is wrong, because the null timestamp will be regarded as an invalid input by hsql\n        //cl.callProcedure(\"C_NULL.insert\", 1,1,1,1,1,\"1\",new Timestamp(1000000000000L), null, null, null, null, null);\n        cl.callProcedure(\"C_NULL.insert\", 2,1,1,1,1,\"1\",new Timestamp(1000000000000L),\n                12,12,12,\"12\",new Timestamp(1200000000000L));\n\n        doTestCoalescePairBothNull(cl, \"I1\", \"I2\");\n        doTestCoalescePairBothNull(cl, \"F1\", \"F2\");\n        doTestCoalescePairBothNull(cl, \"D1\", \"D2\");\n        doTestCoalescePairBothNull(cl, \"V1\", \"V2\");\n        doTestCoalescePairBothNull(cl, \"T1\", \"T2\");\n\n        doTestCoalescePairOneNull(cl, \"I1\", \"I2\");\n        doTestCoalescePairOneNull(cl, \"F1\", \"F2\");\n        doTestCoalescePairOneNull(cl, \"D1\", \"D2\");\n        doTestCoalescePairOneNull(cl, \"V1\", \"V2\");\n        doTestCoalescePairOneNull(cl, \"T1\", \"T2\");\n\n        doTestCoalescePairNotNull(cl, \"I1\", \"I2\");\n        doTestCoalescePairNotNull(cl, \"F1\", \"F2\");\n        doTestCoalescePairNotNull(cl, \"D1\", \"D2\");\n        doTestCoalescePairNotNull(cl, \"V1\", \"V2\");\n        doTestCoalescePairNotNull(cl, \"T1\", \"T2\");\n\n        // TODO: add more test cases, like adhoc query with all NULL parameters\n    }","id":2597,"modified_method":"public void testCoalesce() throws Exception {\n        System.out.println(\"STARTING test Case COALESCE function...\");\n        Client cl = getClient();\n\n        // three set nulls\n        cl.callProcedure(\"@AdHoc\", \"insert into C_NULL(ID) values (0);\");\n        // one set non-null and two sets nulls\n        cl.callProcedure(\"@AdHoc\", \"insert into C_NULL(ID,S1,I1,F1,D1,V1,T1) values (1,1,1,1,1,'1',100000)\");\n        // TODO: below is wrong, because the null timestamp will be regarded as an invalid input by hsql\n        //cl.callProcedure(\"C_NULL.insert\", 1,1,1,1,1,\"1\",new Timestamp(1000000000000L), null, null, null, null, null);\n        // two sets non-nulls and one set null\n        cl.callProcedure(\"@AdHoc\", \"insert into C_NULL(ID,S1,I1,F1,D1,V1,T1,I2,F2,D2,V2,T2)\"\n                                + \" values (2,1,1,1,1,'1',100000,2,2,2,'2',200000)\");\n        // three set non-nulls\n        cl.callProcedure(\"C_NULL.insert\", 3,1,1,1,1,\"1\",new Timestamp(1000000000000L),\n                                              2,2,2,\"2\",new Timestamp(2000000000000L),\n                                              3,3,3,\"3\",new Timestamp(3000000000000L));\n\n        doTestTwoColCoalesce(cl, \"I1\", \"I2\");\n        doTestTwoColCoalesce(cl, \"F1\", \"F2\");\n        doTestTwoColCoalesce(cl, \"D1\", \"D2\");\n        doTestTwoColCoalesce(cl, \"V1\", \"V2\");\n        doTestTwoColCoalesce(cl, \"T1\", \"T2\");\n\n        doTestThreeColCoalesce(cl, \"I1\", \"I2\", \"I3\", \"100\");\n        doTestThreeColCoalesce(cl, \"F1\", \"F2\", \"F3\", \"100.0\");\n        doTestThreeColCoalesce(cl, \"D1\", \"D2\", \"D3\", \"100.0\");\n        doTestThreeColCoalesce(cl, \"V1\", \"V2\", \"V3\", \"'hahaha'\");\n        doTestThreeColCoalesce(cl, \"T1\", \"T2\", \"T3\", \"CAST ('2014-07-09 00:00:00.000000' as TIMESTAMP)\");\n\n        // test compatiable types\n        doTestThreeColCoalesce(cl, \"S1\", \"I2\", \"I3\", \"100\");\n        doTestThreeColCoalesce(cl, \"S1\", \"F2\", \"D3\", \"100.0\");\n        doTestThreeColCoalesce(cl, \"I1\", \"F2\", \"D3\", \"100.0\");\n\n        // test incompatiable types\n        // TODO: Is the exception throwed by coalesce? Or by decode?\n        try {\n            doTestThreeColCoalesce(cl, \"S1\", \"I2\", \"V3\", \"100\");\n            fail();\n        } catch (ProcCallException pcex){\n            assertTrue(pcex.getMessage().contains(\"incompatible data types\"));\n        }\n        try {\n            doTestThreeColCoalesce(cl, \"S1\", \"I2\", \"T3\", \"100\");\n            fail();\n        } catch (ProcCallException pcex){\n            assertTrue(pcex.getMessage().contains(\"incompatible data types\"));\n        }\n    }","commit_id":"f930377f38488a20e3b11894a83a07892a49a66a","url":"https://github.com/VoltDB/voltdb"},{"original_method":"static public junit.framework.Test suite() {\n\n        VoltServerConfig config = null;\n        MultiConfigSuiteBuilder builder =\n            new MultiConfigSuiteBuilder(TestFunctionsForVoltDBSuite.class);\n        boolean success;\n\n        VoltProjectBuilder project = new VoltProjectBuilder();\n        final String literalSchema =\n                \"CREATE TABLE P1 ( \" +\n                \"ID INTEGER DEFAULT '0' NOT NULL, \" +\n                \"DESC VARCHAR(300), \" +\n                \"NUM INTEGER, \" +\n                \"RATIO FLOAT, \" +\n                \"PRIMARY KEY (ID) ); \" +\n                \"PARTITION TABLE P1 ON COLUMN ID;\" +\n\n                \"CREATE TABLE P2 ( \" +\n                \"ID INTEGER DEFAULT '0' NOT NULL, \" +\n                \"TM TIMESTAMP DEFAULT NULL, \" +\n                \"PRIMARY KEY (ID) ); \" +\n                \"PARTITION TABLE P2 ON COLUMN ID;\\n\" +\n\n                \"CREATE TABLE P3_INLINE_DESC ( \" +\n                \"ID INTEGER DEFAULT '0' NOT NULL, \" +\n                \"DESC VARCHAR(30), \" +\n                \"NUM INTEGER, \" +\n                \"RATIO FLOAT, \" +\n                \"PRIMARY KEY (ID) ); \" +\n                \"PARTITION TABLE P3_INLINE_DESC ON COLUMN ID;\" +\n\n                \"CREATE TABLE C_NULL ( \" +\n                \"ID INTEGER DEFAULT 0 NOT NULL, \" +\n                \"S1 SMALLINT DEFAULT NULL, \" +\n                \"I1 INTEGER DEFAULT NULL, \" +\n                \"F1 FLOAT DEFAULT NULL, \" +\n                \"D1 DECIMAL DEFAULT NULL, \" +\n                \"V1 VARCHAR(10) DEFAULT NULL, \" +\n                \"T1 TIMESTAMP DEFAULT NULL, \" +\n                \"I2 INTEGER DEFAULT NULL, \" +\n                \"F2 FLOAT DEFAULT NULL, \" +\n                \"D2 DECIMAL DEFAULT NULL, \" +\n                \"V2 VARCHAR(10) DEFAULT NULL, \" +\n                \"T2 TIMESTAMP DEFAULT NULL, \" +\n                \"PRIMARY KEY (ID) ); \" +\n                \"PARTITION TABLE C_NULL ON COLUMN ID;\" +\n\n                \"CREATE TABLE R3 ( \" +\n                \"ID INTEGER DEFAULT '0' NOT NULL, \" +\n                \"TINY TINYINT, \" +\n                \"SMALL SMALLINT, \" +\n                \"NUM INTEGER, \" +\n                \"BIG BIGINT, \" +\n                \"RATIO FLOAT, \" +\n                \"TM TIMESTAMP DEFAULT NULL, \" +\n                \"VAR VARCHAR(300), \" +\n                \"DEC DECIMAL, \" +\n                \"PRIMARY KEY (ID) ); \" +\n\n                \"CREATE TABLE JS1 (\\n\" +\n                \"  ID INTEGER NOT NULL, \\n\" +\n                \"  DOC VARCHAR(8192),\\n\" +\n                \"  PRIMARY KEY(ID))\\n\" +\n                \";\\n\" +\n\n                \"CREATE TABLE D1 (\\n\" +\n                \"  ID INTEGER NOT NULL, \\n\" +\n                \"  DEC DECIMAL, \\n\" +\n                \"  PRIMARY KEY(ID))\\n\" +\n                \";\\n\" +\n\n                \"CREATE PROCEDURE IdFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(DOC, ?) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE InnerFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(FIELD(DOC, 'inner'), ?) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NullFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(DOC, ?) IS NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE IdArrayProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, ?), ?) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NullArrayProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, ?), ?) IS NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE IdArrayLengthProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NullArrayLengthProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) IS NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE SmallArrayLengthProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) BETWEEN 0 AND ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE LargeArrayLengthProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) > ? ORDER BY ID\\n\" +\n                \";\\n\" +\n\n                \"CREATE TABLE JSBAD (\\n\" +\n                \"  ID INTEGER NOT NULL,\\n\" +\n                \"  DOC VARCHAR(8192),\\n\" +\n                \"  PRIMARY KEY(ID))\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE BadIdFieldProc AS\\n\" +\n                \"  SELECT ID FROM JSBAD WHERE ID = ? AND FIELD(DOC, ?) = ?\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE BadIdArrayProc AS\\n\" +\n                \"  SELECT ID FROM JSBAD WHERE ID = ? AND ARRAY_ELEMENT(FIELD(DOC, ?), 1) = ?\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE BadIdArrayLengthProc AS\\n\" +\n                \"  SELECT ID FROM JSBAD WHERE ID = ? AND ARRAY_LENGTH(FIELD(DOC, ?)) = ?\\n\" +\n                \";\\n\" +\n                \"\";\n        try {\n            project.addLiteralSchema(literalSchema);\n        } catch (IOException e) {\n            assertFalse(true);\n        }\n\n        // Test DECODE\n        project.addStmtProcedure(\"DECODE\", \"select desc,  DECODE (desc,'IBM','zheng',\" +\n                        \"'Microsoft','li',\" +\n                        \"'Hewlett Packard','at',\" +\n                        \"'Gateway','VoltDB',\" +\n                        \"'where') from P1 where id = ?\");\n        project.addStmtProcedure(\"DECODEND\", \"select desc,  DECODE (desc,'zheng','a') from P1 where id = ?\");\n        project.addStmtProcedure(\"DECODEVERYLONG\", \"select desc,  DECODE (desc,'a','a',\" +\n                \"'a','a',\" +\n                \"'a','a',\" +\n                \"'a','a',\" +\n                \"'a','a',\" +\n                \"'a','a',\" +\n                \"'a','a',\" +\n                \"'a','a',\" +\n                \"'a','a',\" +\n                \"'a','a',\" +\n                \"'a','a',\" +\n                \"'a','a',\" +\n                \"'where') from P1 where id = ?\");\n        project.addStmtProcedure(\"DECODE_PARAM_INFER_STRING\", \"select desc,  DECODE (desc,?,?,desc) from P1 where id = ?\");\n        project.addStmtProcedure(\"DECODE_PARAM_INFER_INT\", \"select desc,  DECODE (id,?,?,id) from P1 where id = ?\");\n        project.addStmtProcedure(\"DECODE_PARAM_INFER_DEFAULT\", \"select desc,  DECODE (?,?,?,?) from P1 where id = ?\");\n        project.addStmtProcedure(\"DECODE_PARAM_INFER_CONFLICTING\", \"select desc,  DECODE (id,1,?,2,99,'贾鑫') from P1 where id = ?\");\n        // Test OCTET_LENGTH\n        project.addStmtProcedure(\"OCTET_LENGTH\", \"select desc,  OCTET_LENGTH (desc) from P1 where id = ?\");\n        // Test POSITION and CHAR_LENGTH\n        project.addStmtProcedure(\"POSITION\", \"select desc, POSITION (? IN desc) from P1 where id = ?\");\n        project.addStmtProcedure(\"CHAR_LENGTH\", \"select desc, CHAR_LENGTH (desc) from P1 where id = ?\");\n        // Test SINCE_EPOCH\n        project.addStmtProcedure(\"SINCE_EPOCH_SECOND\", \"select SINCE_EPOCH (SECOND, TM) from P2 where id = ?\");\n        project.addStmtProcedure(\"SINCE_EPOCH_MILLIS\", \"select SINCE_EPOCH (MILLIS, TM) from P2 where id = ?\");\n        project.addStmtProcedure(\"SINCE_EPOCH_MILLISECOND\", \"select SINCE_EPOCH (MILLISECOND, TM) from P2 where id = ?\");\n        project.addStmtProcedure(\"SINCE_EPOCH_MICROS\", \"select SINCE_EPOCH (MICROS, TM) from P2 where id = ?\");\n        project.addStmtProcedure(\"SINCE_EPOCH_MICROSECOND\", \"select SINCE_EPOCH (MICROSECOND, TM) from P2 where id = ?\");\n        // Test TO_TIMESTAMP\n        project.addStmtProcedure(\"TO_TIMESTAMP_SECOND\", \"select TO_TIMESTAMP (SECOND, ?) from P2 where id = ?\");\n        project.addStmtProcedure(\"TO_TIMESTAMP_MILLIS\", \"select TO_TIMESTAMP (MILLIS, ?) from P2 where id = ?\");\n        project.addStmtProcedure(\"TO_TIMESTAMP_MILLISECOND\", \"select TO_TIMESTAMP (MILLISECOND, ?) from P2 where id = ?\");\n        project.addStmtProcedure(\"TO_TIMESTAMP_MICROS\", \"select TO_TIMESTAMP (MICROS, ?) from P2 where id = ?\");\n        project.addStmtProcedure(\"TO_TIMESTAMP_MICROSECOND\", \"select TO_TIMESTAMP (MICROSECOND, ?) from P2 where id = ?\");\n\n        project.addStmtProcedure(\"TRUNCATE\", \"select TRUNCATE(YEAR, TM), TRUNCATE(QUARTER, TM), TRUNCATE(MONTH, TM), \" +\n                \"TRUNCATE(DAY, TM), TRUNCATE(HOUR, TM),TRUNCATE(MINUTE, TM),TRUNCATE(SECOND, TM), TRUNCATE(MILLIS, TM), \" +\n                \"TRUNCATE(MILLISECOND, TM), TRUNCATE(MICROS, TM), TRUNCATE(MICROSECOND, TM) from P2 where id = ?\");\n\n        project.addStmtProcedure(\"FROM_UNIXTIME\", \"select FROM_UNIXTIME (?) from P2 where id = ?\");\n\n        project.addStmtProcedure(\"TestDecodeNull\", \"select DECODE(tiny, NULL, 'null tiny', tiny),\" +\n                \"DECODE(small, NULL, 'null small', small), DECODE(num, NULL, 'null num', num),  \" +\n                \"DECODE(big, NULL, 'null big', big), DECODE(ratio, NULL, 'null ratio', ratio),  \" +\n                \"DECODE(tm, NULL, 'null tm', 'tm'), DECODE(var, NULL, 'null var', var), \" +\n                \"DECODE(dec, NULL, 'null dec', dec) from R3 where id = ?\");\n        project.addStmtProcedure(\"TestDecodeNullParam\", \"select DECODE(tiny, ?, 'null tiny', tiny),\" +\n                \"DECODE(small, ?, 'null small', small), DECODE(num, ?, 'null num', num),  \" +\n                \"DECODE(big, ?, 'null big', big), DECODE(ratio, ?, 'null ratio', ratio),  \" +\n                \"DECODE(tm, ?, 'null tm', 'tm'), DECODE(var, ?, 'null var', var), \" +\n                \"DECODE(dec, ?, 'null dec', dec) from R3 where id = ?\");\n\n        project.addStmtProcedure(\"TestDecodeNullTimestamp\", \"select DECODE(tm, NULL, 'null tm', tm) from R3 where id = ?\");\n\n        // CONFIG #1: Local Site/Partition running on JNI backend\n        config = new LocalCluster(\"fixedsql-onesite.jar\", 1, 1, 0, BackendTarget.NATIVE_EE_JNI);\n        success = config.compile(project);\n        assertTrue(success);\n        builder.addServerConfig(config);\n\n        // CONFIG #2: Local Site/Partitions running on JNI backend\n        config = new LocalCluster(\"fixedsql-threesite.jar\", 3, 1, 0, BackendTarget.NATIVE_EE_JNI);\n        success = config.compile(project);\n        assertTrue(success);\n        builder.addServerConfig(config);\n/*\n\n        // CONFIG #2: HSQL -- disabled, the functions being tested are not HSQL compatible\n        config = new LocalCluster(\"fixedsql-hsql.jar\", 1, 1, 0, BackendTarget.HSQLDB_BACKEND);\n        success = config.compile(project);\n        assertTrue(success);\n        builder.addServerConfig(config);\n\n*/\n        // no clustering tests for functions\n\n        return builder;\n    }","id":2598,"modified_method":"static public junit.framework.Test suite() {\n\n        VoltServerConfig config = null;\n        MultiConfigSuiteBuilder builder =\n            new MultiConfigSuiteBuilder(TestFunctionsForVoltDBSuite.class);\n        boolean success;\n\n        VoltProjectBuilder project = new VoltProjectBuilder();\n        final String literalSchema =\n                \"CREATE TABLE P1 ( \" +\n                \"ID INTEGER DEFAULT '0' NOT NULL, \" +\n                \"DESC VARCHAR(300), \" +\n                \"NUM INTEGER, \" +\n                \"RATIO FLOAT, \" +\n                \"PRIMARY KEY (ID) ); \" +\n                \"PARTITION TABLE P1 ON COLUMN ID;\" +\n\n                \"CREATE TABLE P2 ( \" +\n                \"ID INTEGER DEFAULT '0' NOT NULL, \" +\n                \"TM TIMESTAMP DEFAULT NULL, \" +\n                \"PRIMARY KEY (ID) ); \" +\n                \"PARTITION TABLE P2 ON COLUMN ID;\\n\" +\n\n                \"CREATE TABLE P3_INLINE_DESC ( \" +\n                \"ID INTEGER DEFAULT '0' NOT NULL, \" +\n                \"DESC VARCHAR(30), \" +\n                \"NUM INTEGER, \" +\n                \"RATIO FLOAT, \" +\n                \"PRIMARY KEY (ID) ); \" +\n                \"PARTITION TABLE P3_INLINE_DESC ON COLUMN ID;\" +\n\n                \"CREATE TABLE C_NULL ( \" +\n                \"ID INTEGER DEFAULT 0 NOT NULL, \" +\n                \"S1 SMALLINT DEFAULT NULL, \" +\n                \"I1 INTEGER DEFAULT NULL, \" +\n                \"F1 FLOAT DEFAULT NULL, \" +\n                \"D1 DECIMAL DEFAULT NULL, \" +\n                \"V1 VARCHAR(10) DEFAULT NULL, \" +\n                \"T1 TIMESTAMP DEFAULT NULL, \" +\n                \"I2 INTEGER DEFAULT NULL, \" +\n                \"F2 FLOAT DEFAULT NULL, \" +\n                \"D2 DECIMAL DEFAULT NULL, \" +\n                \"V2 VARCHAR(10) DEFAULT NULL, \" +\n                \"T2 TIMESTAMP DEFAULT NULL, \" +\n                \"I3 INTEGER DEFAULT NULL, \" +\n                \"F3 FLOAT DEFAULT NULL, \" +\n                \"D3 DECIMAL DEFAULT NULL, \" +\n                \"V3 VARCHAR(10) DEFAULT NULL, \" +\n                \"T3 TIMESTAMP DEFAULT NULL, \" +\n                \"PRIMARY KEY (ID) ); \" +\n                \"PARTITION TABLE C_NULL ON COLUMN ID;\" +\n\n                \"CREATE TABLE R3 ( \" +\n                \"ID INTEGER DEFAULT '0' NOT NULL, \" +\n                \"TINY TINYINT, \" +\n                \"SMALL SMALLINT, \" +\n                \"NUM INTEGER, \" +\n                \"BIG BIGINT, \" +\n                \"RATIO FLOAT, \" +\n                \"TM TIMESTAMP DEFAULT NULL, \" +\n                \"VAR VARCHAR(300), \" +\n                \"DEC DECIMAL, \" +\n                \"PRIMARY KEY (ID) ); \" +\n\n                \"CREATE TABLE JS1 (\\n\" +\n                \"  ID INTEGER NOT NULL, \\n\" +\n                \"  DOC VARCHAR(8192),\\n\" +\n                \"  PRIMARY KEY(ID))\\n\" +\n                \";\\n\" +\n\n                \"CREATE TABLE D1 (\\n\" +\n                \"  ID INTEGER NOT NULL, \\n\" +\n                \"  DEC DECIMAL, \\n\" +\n                \"  PRIMARY KEY(ID))\\n\" +\n                \";\\n\" +\n\n                \"CREATE PROCEDURE IdFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(DOC, ?) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE InnerFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(FIELD(DOC, 'inner'), ?) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NullFieldProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE FIELD(DOC, ?) IS NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE IdArrayProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, ?), ?) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NullArrayProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_ELEMENT(FIELD(DOC, ?), ?) IS NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE IdArrayLengthProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) = ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE NullArrayLengthProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) IS NULL ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE SmallArrayLengthProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) BETWEEN 0 AND ? ORDER BY ID\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE LargeArrayLengthProc AS\\n\" +\n                \"   SELECT ID FROM JS1 WHERE ARRAY_LENGTH(FIELD(DOC, ?)) > ? ORDER BY ID\\n\" +\n                \";\\n\" +\n\n                \"CREATE TABLE JSBAD (\\n\" +\n                \"  ID INTEGER NOT NULL,\\n\" +\n                \"  DOC VARCHAR(8192),\\n\" +\n                \"  PRIMARY KEY(ID))\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE BadIdFieldProc AS\\n\" +\n                \"  SELECT ID FROM JSBAD WHERE ID = ? AND FIELD(DOC, ?) = ?\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE BadIdArrayProc AS\\n\" +\n                \"  SELECT ID FROM JSBAD WHERE ID = ? AND ARRAY_ELEMENT(FIELD(DOC, ?), 1) = ?\\n\" +\n                \";\\n\" +\n                \"CREATE PROCEDURE BadIdArrayLengthProc AS\\n\" +\n                \"  SELECT ID FROM JSBAD WHERE ID = ? AND ARRAY_LENGTH(FIELD(DOC, ?)) = ?\\n\" +\n                \";\\n\" +\n                \"\";\n        try {\n            project.addLiteralSchema(literalSchema);\n        } catch (IOException e) {\n            assertFalse(true);\n        }\n\n        // Test DECODE\n        project.addStmtProcedure(\"DECODE\", \"select desc,  DECODE (desc,'IBM','zheng',\" +\n                        \"'Microsoft','li',\" +\n                        \"'Hewlett Packard','at',\" +\n                        \"'Gateway','VoltDB',\" +\n                        \"'where') from P1 where id = ?\");\n        project.addStmtProcedure(\"DECODEND\", \"select desc,  DECODE (desc,'zheng','a') from P1 where id = ?\");\n        project.addStmtProcedure(\"DECODEVERYLONG\", \"select desc,  DECODE (desc,'a','a',\" +\n                \"'a','a',\" +\n                \"'a','a',\" +\n                \"'a','a',\" +\n                \"'a','a',\" +\n                \"'a','a',\" +\n                \"'a','a',\" +\n                \"'a','a',\" +\n                \"'a','a',\" +\n                \"'a','a',\" +\n                \"'a','a',\" +\n                \"'a','a',\" +\n                \"'where') from P1 where id = ?\");\n        project.addStmtProcedure(\"DECODE_PARAM_INFER_STRING\", \"select desc,  DECODE (desc,?,?,desc) from P1 where id = ?\");\n        project.addStmtProcedure(\"DECODE_PARAM_INFER_INT\", \"select desc,  DECODE (id,?,?,id) from P1 where id = ?\");\n        project.addStmtProcedure(\"DECODE_PARAM_INFER_DEFAULT\", \"select desc,  DECODE (?,?,?,?) from P1 where id = ?\");\n        project.addStmtProcedure(\"DECODE_PARAM_INFER_CONFLICTING\", \"select desc,  DECODE (id,1,?,2,99,'贾鑫') from P1 where id = ?\");\n        // Test OCTET_LENGTH\n        project.addStmtProcedure(\"OCTET_LENGTH\", \"select desc,  OCTET_LENGTH (desc) from P1 where id = ?\");\n        // Test POSITION and CHAR_LENGTH\n        project.addStmtProcedure(\"POSITION\", \"select desc, POSITION (? IN desc) from P1 where id = ?\");\n        project.addStmtProcedure(\"CHAR_LENGTH\", \"select desc, CHAR_LENGTH (desc) from P1 where id = ?\");\n        // Test SINCE_EPOCH\n        project.addStmtProcedure(\"SINCE_EPOCH_SECOND\", \"select SINCE_EPOCH (SECOND, TM) from P2 where id = ?\");\n        project.addStmtProcedure(\"SINCE_EPOCH_MILLIS\", \"select SINCE_EPOCH (MILLIS, TM) from P2 where id = ?\");\n        project.addStmtProcedure(\"SINCE_EPOCH_MILLISECOND\", \"select SINCE_EPOCH (MILLISECOND, TM) from P2 where id = ?\");\n        project.addStmtProcedure(\"SINCE_EPOCH_MICROS\", \"select SINCE_EPOCH (MICROS, TM) from P2 where id = ?\");\n        project.addStmtProcedure(\"SINCE_EPOCH_MICROSECOND\", \"select SINCE_EPOCH (MICROSECOND, TM) from P2 where id = ?\");\n        // Test TO_TIMESTAMP\n        project.addStmtProcedure(\"TO_TIMESTAMP_SECOND\", \"select TO_TIMESTAMP (SECOND, ?) from P2 where id = ?\");\n        project.addStmtProcedure(\"TO_TIMESTAMP_MILLIS\", \"select TO_TIMESTAMP (MILLIS, ?) from P2 where id = ?\");\n        project.addStmtProcedure(\"TO_TIMESTAMP_MILLISECOND\", \"select TO_TIMESTAMP (MILLISECOND, ?) from P2 where id = ?\");\n        project.addStmtProcedure(\"TO_TIMESTAMP_MICROS\", \"select TO_TIMESTAMP (MICROS, ?) from P2 where id = ?\");\n        project.addStmtProcedure(\"TO_TIMESTAMP_MICROSECOND\", \"select TO_TIMESTAMP (MICROSECOND, ?) from P2 where id = ?\");\n\n        project.addStmtProcedure(\"TRUNCATE\", \"select TRUNCATE(YEAR, TM), TRUNCATE(QUARTER, TM), TRUNCATE(MONTH, TM), \" +\n                \"TRUNCATE(DAY, TM), TRUNCATE(HOUR, TM),TRUNCATE(MINUTE, TM),TRUNCATE(SECOND, TM), TRUNCATE(MILLIS, TM), \" +\n                \"TRUNCATE(MILLISECOND, TM), TRUNCATE(MICROS, TM), TRUNCATE(MICROSECOND, TM) from P2 where id = ?\");\n\n        project.addStmtProcedure(\"FROM_UNIXTIME\", \"select FROM_UNIXTIME (?) from P2 where id = ?\");\n\n        project.addStmtProcedure(\"TestDecodeNull\", \"select DECODE(tiny, NULL, 'null tiny', tiny),\" +\n                \"DECODE(small, NULL, 'null small', small), DECODE(num, NULL, 'null num', num),  \" +\n                \"DECODE(big, NULL, 'null big', big), DECODE(ratio, NULL, 'null ratio', ratio),  \" +\n                \"DECODE(tm, NULL, 'null tm', 'tm'), DECODE(var, NULL, 'null var', var), \" +\n                \"DECODE(dec, NULL, 'null dec', dec) from R3 where id = ?\");\n        project.addStmtProcedure(\"TestDecodeNullParam\", \"select DECODE(tiny, ?, 'null tiny', tiny),\" +\n                \"DECODE(small, ?, 'null small', small), DECODE(num, ?, 'null num', num),  \" +\n                \"DECODE(big, ?, 'null big', big), DECODE(ratio, ?, 'null ratio', ratio),  \" +\n                \"DECODE(tm, ?, 'null tm', 'tm'), DECODE(var, ?, 'null var', var), \" +\n                \"DECODE(dec, ?, 'null dec', dec) from R3 where id = ?\");\n\n        project.addStmtProcedure(\"TestDecodeNullTimestamp\", \"select DECODE(tm, NULL, 'null tm', tm) from R3 where id = ?\");\n\n        // CONFIG #1: Local Site/Partition running on JNI backend\n        config = new LocalCluster(\"fixedsql-onesite.jar\", 1, 1, 0, BackendTarget.NATIVE_EE_JNI);\n        success = config.compile(project);\n        assertTrue(success);\n        builder.addServerConfig(config);\n\n        // CONFIG #2: Local Site/Partitions running on JNI backend\n        config = new LocalCluster(\"fixedsql-threesite.jar\", 3, 1, 0, BackendTarget.NATIVE_EE_JNI);\n        success = config.compile(project);\n        assertTrue(success);\n        builder.addServerConfig(config);\n/*\n\n        // CONFIG #2: HSQL -- disabled, the functions being tested are not HSQL compatible\n        config = new LocalCluster(\"fixedsql-hsql.jar\", 1, 1, 0, BackendTarget.HSQLDB_BACKEND);\n        success = config.compile(project);\n        assertTrue(success);\n        builder.addServerConfig(config);\n\n*/\n        // no clustering tests for functions\n\n        return builder;\n    }","commit_id":"f930377f38488a20e3b11894a83a07892a49a66a","url":"https://github.com/VoltDB/voltdb"},{"original_method":"@Override\n    public void onStartup(ServletContext servletContext) throws ServletException {\n        AnnotationConfigWebApplicationContext rootContext = new AnnotationConfigWebApplicationContext();\n\n        //Get the values out of the system properties that we'll need\n        String configRoot = servletContext.getInitParameter(\n                ReposeSpringProperties.stripSpringValueStupidity(ReposeSpringProperties.CORE.CONFIG_ROOT));\n        boolean insecure = Boolean.parseBoolean(\n                servletContext.getInitParameter(ReposeSpringProperties.stripSpringValueStupidity(ReposeSpringProperties.CORE.INSECURE)));\n\n        //Default the configuration root to /etc/repose\n        if (configRoot == null) {\n            configRoot = \"/etc/repose\";\n        }\n\n        String clusterId = servletContext.getInitParameter(ReposeSpringProperties.stripSpringValueStupidity(ReposeSpringProperties.NODE.CLUSTER_ID));\n        String nodeId = servletContext.getInitParameter(ReposeSpringProperties.stripSpringValueStupidity(ReposeSpringProperties.NODE.NODE_ID));\n\n        CoreSpringProvider csp = CoreSpringProvider.getInstance();\n        csp.initializeCoreContext(configRoot, insecure);\n\n        //The parent context is not the core spring context, but an instance of a node context\n        //A war file is only ever one local node.\n        rootContext.setParent(csp.getNodeContext(clusterId, nodeId));\n        rootContext.setDisplayName(\"ReposeWARFileContext\");\n\n        PropertySourcesPlaceholderConfigurer propConfig = new PropertySourcesPlaceholderConfigurer();\n        propConfig.setEnvironment(rootContext.getEnvironment());\n        rootContext.addBeanFactoryPostProcessor(propConfig);\n\n        Config config = ConfigFactory.load(\"springConfiguration.conf\");\n        rootContext.scan(config.getString(\"powerFilterSpringContextPath\"));\n\n        servletContext.addListener(new ContextLoaderListener(rootContext));\n        servletContext.addServlet(\"emptyServlet\", EmptyServlet.class).addMapping(\"/*\");\n        servletContext.addFilter(\"springDelegatingFilterProxy\", new DelegatingFilterProxy(\"powerFilter\"))\n                .addMappingForUrlPatterns(EnumSet.allOf(DispatcherType.class), false, \"/*\");\n    }","id":2599,"modified_method":"@Override\n    public void onStartup(ServletContext servletContext) throws ServletException {\n        AnnotationConfigWebApplicationContext rootContext = new AnnotationConfigWebApplicationContext();\n\n        final String CONFIG_ROOT = ReposeSpringProperties.stripSpringValueStupidity(ReposeSpringProperties.CORE.CONFIG_ROOT);\n        final String INSECURE = ReposeSpringProperties.stripSpringValueStupidity(ReposeSpringProperties.CORE.INSECURE);\n        final String CLUSTER_ID = ReposeSpringProperties.stripSpringValueStupidity(ReposeSpringProperties.NODE.CLUSTER_ID);\n        final String NODE_ID = ReposeSpringProperties.stripSpringValueStupidity(ReposeSpringProperties.NODE.NODE_ID);\n\n        //Get the values out of the system properties that we'll need\n        String configRoot = System.getProperty(CONFIG_ROOT);\n        String clusterId = System.getProperty(CLUSTER_ID);\n        String nodeId = System.getProperty(NODE_ID);\n\n        if (configRoot == null) {\n            configRoot = servletContext.getInitParameter(CONFIG_ROOT);\n            if (configRoot == null) {\n                configRoot = \"/etc/repose\";\n            }\n        }\n        if (clusterId == null) {\n            clusterId = servletContext.getInitParameter(CLUSTER_ID);\n        }\n        if (nodeId == null) {\n            nodeId = servletContext.getInitParameter(NODE_ID);\n        }\n\n        boolean insecure = Boolean.parseBoolean(System.getProperty(INSECURE)) || Boolean.parseBoolean(servletContext.getInitParameter(INSECURE));\n\n        CoreSpringProvider csp = CoreSpringProvider.getInstance();\n        csp.initializeCoreContext(configRoot, insecure);\n\n        //The parent context is not the core spring context, but an instance of a node context\n        //A war file is only ever one local node.\n        rootContext.setParent(csp.getNodeContext(clusterId, nodeId));\n        rootContext.setDisplayName(\"ReposeWARFileContext\");\n\n        PropertySourcesPlaceholderConfigurer propConfig = new PropertySourcesPlaceholderConfigurer();\n        propConfig.setEnvironment(rootContext.getEnvironment());\n        rootContext.addBeanFactoryPostProcessor(propConfig);\n\n        Config config = ConfigFactory.load(\"springConfiguration.conf\");\n        rootContext.scan(config.getString(\"powerFilterSpringContextPath\"));\n\n        servletContext.addListener(new ContextLoaderListener(rootContext));\n        servletContext.addServlet(\"emptyServlet\", EmptyServlet.class).addMapping(\"/*\");\n        servletContext.addFilter(\"springDelegatingFilterProxy\", new DelegatingFilterProxy(\"powerFilter\"))\n                .addMappingForUrlPatterns(EnumSet.allOf(DispatcherType.class), false, \"/*\");\n    }","commit_id":"e71768b3938f386f30e18957eb34f0cb1f79d2e6","url":"https://github.com/rackerlabs/repose"},{"original_method":"public static void main(String[] args) {\n        LinkedProperties preProcessedCommands = new LinkedProperties();\n        String[] fileNames = null;\n\n        List<String> argsList = Arrays.asList(args);\n        Iterator<String> iter = argsList.iterator();\n        while (iter.hasNext()) {\n            String arg = iter.next();\n            // populate the file names\n            if (arg.equals(\"-f\")) {\n                fileNames = iter.next().split(\",\");\n            }\n            if (arg.equals(\"-d\")) {\n                dirName = iter.next();\n            }\n        }\n\n        if ((fileNames == null) || (fileNames.length == 0)) {\n            System.out.println(\"Please specify input file(s) separated by coma using -f option\");\n            System.exit(2);\n        }\n\n        for (String fileName : fileNames) {\n            try {\n                FileInputStream in = new FileInputStream(fileName);\n                preProcessedCommands.load(in);\n            } catch (FileNotFoundException ex) {\n                System.out.println(\"Can't find file \" + fileName);\n                System.exit(2);\n            } catch (IOException ex1) {\n                System.out.println(\"Error reading from file \" + ex1);\n                System.exit(2);\n            }\n        }\n\n        Iterator<?> propertiesIterator = preProcessedCommands.keys.iterator();\n        // Get command classes and response object classes\n        while (propertiesIterator.hasNext()) {\n            String key = (String) propertiesIterator.next();\n            String preProcessedCommand = preProcessedCommands.getProperty(key);\n            String[] commandParts = preProcessedCommand.split(\";\");\n            String commandName = commandParts[0];\n            all_api_commands.put(key, commandName);\n\n            short cmdPermissions = 1;\n            if (commandParts.length > 1 && commandParts[1] != null) {\n                cmdPermissions = Short.parseShort(commandParts[1]);\n            }\n\n            if ((cmdPermissions & DOMAIN_ADMIN_COMMAND) != 0) {\n                domain_admin_api_commands.put(key, commandName);\n            }\n            if ((cmdPermissions & USER_COMMAND) != 0) {\n                regular_user_api_commands.put(key, commandName);\n            }\n        }\n\n        // Login and logout commands are hardcoded\n        all_api_commands.put(\"login\", \"login\");\n        domain_admin_api_commands.put(\"login\", \"login\");\n        regular_user_api_commands.put(\"login\", \"login\");\n\n        all_api_commands.put(\"logout\", \"logout\");\n        domain_admin_api_commands.put(\"logout\", \"logout\");\n        regular_user_api_commands.put(\"logout\", \"logout\");\n\n        all_api_commands_sorted.putAll(all_api_commands);\n        domain_admin_api_commands_sorted.putAll(domain_admin_api_commands);\n        regular_user_api_commands_sorted.putAll(regular_user_api_commands);\n\n        try {\n            // Create object writer\n            XStream xs = new XStream();\n            xs.alias(\"command\", Command.class);\n            xs.alias(\"arg\", Argument.class);\n            String xmlDocDir = dirName + \"/xmldoc\";\n            String rootAdminDirName = xmlDocDir + \"/root_admin\";\n            String domainAdminDirName = xmlDocDir + \"/domain_admin\";\n            String regularUserDirName = xmlDocDir + \"/regular_user\";\n            (new File(rootAdminDirName)).mkdirs();\n            (new File(domainAdminDirName)).mkdirs();\n            (new File(regularUserDirName)).mkdirs();\n\n            ObjectOutputStream out = xs.createObjectOutputStream(new FileWriter(dirName + \"/commands.xml\"), \"commands\");\n            ObjectOutputStream rootAdmin = xs.createObjectOutputStream(new FileWriter(rootAdminDirName + \"/\" + \"rootAdminSummary.xml\"), \"commands\");\n            ObjectOutputStream rootAdminSorted = xs.createObjectOutputStream(new FileWriter(rootAdminDirName + \"/\" + \"rootAdminSummarySorted.xml\"), \"commands\");\n            ObjectOutputStream domainAdmin = xs.createObjectOutputStream(new FileWriter(domainAdminDirName + \"/\" + \"domainAdminSummary.xml\"), \"commands\");\n            ObjectOutputStream outDomainAdminSorted = xs.createObjectOutputStream(new FileWriter(domainAdminDirName + \"/\" + \"domainAdminSummarySorted.xml\"), \"commands\");\n            ObjectOutputStream regularUser = xs.createObjectOutputStream(new FileWriter(regularUserDirName + \"/regularUserSummary.xml\"), \"commands\");\n            ObjectOutputStream regularUserSorted = xs.createObjectOutputStream(new FileWriter(regularUserDirName + \"/regularUserSummarySorted.xml\"), \"commands\");\n\n            // Write commands in the order they are represented in commands.properties.in file\n            Iterator<?> it = all_api_commands.keySet().iterator();\n            while (it.hasNext()) {\n                String key = (String) it.next();\n\n                // Write admin commands\n                if (key.equals(\"login\")) {\n                    writeLoginCommand(out);\n                    writeLoginCommand(rootAdmin);\n                    writeLoginCommand(domainAdmin);\n                    writeLoginCommand(regularUser);\n\n                    ObjectOutputStream singleRootAdminCommandOs = xs.createObjectOutputStream(new FileWriter(rootAdminDirName + \"/\" + \"login\" + \".xml\"), \"command\");\n                    writeLoginCommand(singleRootAdminCommandOs);\n                    singleRootAdminCommandOs.close();\n\n                    ObjectOutputStream singleDomainAdminCommandOs = xs.createObjectOutputStream(new FileWriter(domainAdminDirName + \"/\" + \"login\" + \".xml\"), \"command\");\n                    writeLoginCommand(singleDomainAdminCommandOs);\n                    singleDomainAdminCommandOs.close();\n\n                    ObjectOutputStream singleRegularUserCommandOs = xs.createObjectOutputStream(new FileWriter(regularUserDirName + \"/\" + \"login\" + \".xml\"), \"command\");\n                    writeLoginCommand(singleRegularUserCommandOs);\n                    singleRegularUserCommandOs.close();\n\n                } else if (key.equals(\"logout\")) {\n                    writeLogoutCommand(out);\n                    writeLogoutCommand(rootAdmin);\n                    writeLogoutCommand(domainAdmin);\n                    writeLogoutCommand(regularUser);\n\n                    ObjectOutputStream singleRootAdminCommandOs = xs.createObjectOutputStream(new FileWriter(rootAdminDirName + \"/\" + \"logout\" + \".xml\"), \"command\");\n                    writeLogoutCommand(singleRootAdminCommandOs);\n                    singleRootAdminCommandOs.close();\n\n                    ObjectOutputStream singleDomainAdminCommandOs = xs.createObjectOutputStream(new FileWriter(domainAdminDirName + \"/\" + \"logout\" + \".xml\"), \"command\");\n                    writeLogoutCommand(singleDomainAdminCommandOs);\n                    singleDomainAdminCommandOs.close();\n\n                    ObjectOutputStream singleRegularUserCommandOs = xs.createObjectOutputStream(new FileWriter(regularUserDirName + \"/\" + \"logout\" + \".xml\"), \"command\");\n                    writeLogoutCommand(singleRegularUserCommandOs);\n                    singleRegularUserCommandOs.close();\n\n                } else {\n                    writeCommand(out, key);\n                    writeCommand(rootAdmin, key);\n\n                    // Write single commands to separate xml files\n                    if (!key.equals(\"login\")) {\n                        ObjectOutputStream singleRootAdminCommandOs = xs.createObjectOutputStream(new FileWriter(rootAdminDirName + \"/\" + key + \".xml\"), \"command\");\n                        writeCommand(singleRootAdminCommandOs, key);\n                        singleRootAdminCommandOs.close();\n                    }\n\n                    if (domain_admin_api_commands.containsKey(key)) {\n                        writeCommand(domainAdmin, key);\n                        ObjectOutputStream singleDomainAdminCommandOs = xs.createObjectOutputStream(new FileWriter(domainAdminDirName + \"/\" + key + \".xml\"), \"command\");\n                        writeCommand(singleDomainAdminCommandOs, key);\n                        singleDomainAdminCommandOs.close();\n                    }\n\n                    if (regular_user_api_commands.containsKey(key)) {\n                        writeCommand(regularUser, key);\n                        ObjectOutputStream singleRegularUserCommandOs = xs.createObjectOutputStream(new FileWriter(regularUserDirName + \"/\" + key + \".xml\"), \"command\");\n                        writeCommand(singleRegularUserCommandOs, key);\n                        singleRegularUserCommandOs.close();\n                    }\n                }\n            }\n\n            // Write sorted commands\n            it = all_api_commands_sorted.keySet().iterator();\n            while (it.hasNext()) {\n                String key = (String) it.next();\n\n                if (key.equals(\"login\")) {\n                    writeLoginCommand(rootAdminSorted);\n                    writeLoginCommand(outDomainAdminSorted);\n                    writeLoginCommand(regularUserSorted);\n                } else if (key.equals(\"logout\")) {\n                    writeLogoutCommand(rootAdminSorted);\n                    writeLogoutCommand(outDomainAdminSorted);\n                    writeLogoutCommand(regularUserSorted);\n                } else {\n                    writeCommand(rootAdminSorted, key);\n\n                    if (domain_admin_api_commands.containsKey(key)) {\n                        writeCommand(outDomainAdminSorted, key);\n                    }\n\n                    if (regular_user_api_commands.containsKey(key)) {\n                        writeCommand(regularUserSorted, key);\n                    }\n                }\n            }\n\n            out.close();\n            rootAdmin.close();\n            rootAdminSorted.close();\n            domainAdmin.close();\n            outDomainAdminSorted.close();\n            regularUser.close();\n            regularUserSorted.close();\n\n            // write alerttypes to xml\n            writeAlertTypes(xmlDocDir);\n\n            // gzip directory with xml doc\n            // zipDir(dirName + \"xmldoc.zip\", xmlDocDir);\n\n            // Delete directory\n            // deleteDir(new File(xmlDocDir));\n\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            System.exit(2);\n        }\n    }","id":2600,"modified_method":"public static void main(String[] args) {\n        // Populate api name and cmd class mappings\n        Reflections reflections = new Reflections(\"org.apache.cloudstack.api\");\n        Set<Class<?>> cmdClasses = reflections.getTypesAnnotatedWith(APICommand.class);\n        reflections = new Reflections(\"com.cloud.api\");\n        cmdClasses.addAll(reflections.getTypesAnnotatedWith(APICommand.class));\n        for(Class<?> cmdClass: cmdClasses) {\n            String apiName = cmdClass.getAnnotation(APICommand.class).name();\n            _apiNameCmdClassMap.put(apiName, cmdClass);\n        }\n\n        LinkedProperties preProcessedCommands = new LinkedProperties();\n        String[] fileNames = null;\n\n        List<String> argsList = Arrays.asList(args);\n        Iterator<String> iter = argsList.iterator();\n        while (iter.hasNext()) {\n            String arg = iter.next();\n            // populate the file names\n            if (arg.equals(\"-f\")) {\n                fileNames = iter.next().split(\",\");\n            }\n            if (arg.equals(\"-d\")) {\n                dirName = iter.next();\n            }\n        }\n\n        if ((fileNames == null) || (fileNames.length == 0)) {\n            System.out.println(\"Please specify input file(s) separated by coma using -f option\");\n            System.exit(2);\n        }\n\n        for (String fileName : fileNames) {\n            try {\n                FileInputStream in = new FileInputStream(fileName);\n                preProcessedCommands.load(in);\n            } catch (FileNotFoundException ex) {\n                System.out.println(\"Can't find file \" + fileName);\n                System.exit(2);\n            } catch (IOException ex1) {\n                System.out.println(\"Error reading from file \" + ex1);\n                System.exit(2);\n            }\n        }\n\n        Iterator<?> propertiesIterator = preProcessedCommands.keys.iterator();\n        // Get command classes and response object classes\n        while (propertiesIterator.hasNext()) {\n            String key = (String) propertiesIterator.next();\n            String preProcessedCommand = preProcessedCommands.getProperty(key);\n            int splitIndex = preProcessedCommand.lastIndexOf(\";\");\n            String commandRoleMask = preProcessedCommand.substring(splitIndex + 1);\n            Class<?> cmdClass = _apiNameCmdClassMap.get(key);\n            if (cmdClass == null) {\n                System.out.println(\"Check, Null Value for key: \" + key + \" preProcessedCommand=\" + preProcessedCommand);\n                continue;\n            }\n            String commandName = cmdClass.getName();\n            all_api_commands.put(key, commandName);\n\n            short cmdPermissions = 1;\n            if (commandRoleMask != null) {\n                cmdPermissions = Short.parseShort(commandRoleMask);\n            }\n\n            if ((cmdPermissions & DOMAIN_ADMIN_COMMAND) != 0) {\n                domain_admin_api_commands.put(key, commandName);\n            }\n            if ((cmdPermissions & USER_COMMAND) != 0) {\n                regular_user_api_commands.put(key, commandName);\n            }\n        }\n\n        // Login and logout commands are hardcoded\n        all_api_commands.put(\"login\", \"login\");\n        domain_admin_api_commands.put(\"login\", \"login\");\n        regular_user_api_commands.put(\"login\", \"login\");\n\n        all_api_commands.put(\"logout\", \"logout\");\n        domain_admin_api_commands.put(\"logout\", \"logout\");\n        regular_user_api_commands.put(\"logout\", \"logout\");\n\n        all_api_commands_sorted.putAll(all_api_commands);\n        domain_admin_api_commands_sorted.putAll(domain_admin_api_commands);\n        regular_user_api_commands_sorted.putAll(regular_user_api_commands);\n\n        try {\n            // Create object writer\n            XStream xs = new XStream();\n            xs.alias(\"command\", Command.class);\n            xs.alias(\"arg\", Argument.class);\n            String xmlDocDir = dirName + \"/xmldoc\";\n            String rootAdminDirName = xmlDocDir + \"/root_admin\";\n            String domainAdminDirName = xmlDocDir + \"/domain_admin\";\n            String regularUserDirName = xmlDocDir + \"/regular_user\";\n            (new File(rootAdminDirName)).mkdirs();\n            (new File(domainAdminDirName)).mkdirs();\n            (new File(regularUserDirName)).mkdirs();\n\n            ObjectOutputStream out = xs.createObjectOutputStream(new FileWriter(dirName + \"/commands.xml\"), \"commands\");\n            ObjectOutputStream rootAdmin = xs.createObjectOutputStream(new FileWriter(rootAdminDirName + \"/\" + \"rootAdminSummary.xml\"), \"commands\");\n            ObjectOutputStream rootAdminSorted = xs.createObjectOutputStream(new FileWriter(rootAdminDirName + \"/\" + \"rootAdminSummarySorted.xml\"), \"commands\");\n            ObjectOutputStream domainAdmin = xs.createObjectOutputStream(new FileWriter(domainAdminDirName + \"/\" + \"domainAdminSummary.xml\"), \"commands\");\n            ObjectOutputStream outDomainAdminSorted = xs.createObjectOutputStream(new FileWriter(domainAdminDirName + \"/\" + \"domainAdminSummarySorted.xml\"), \"commands\");\n            ObjectOutputStream regularUser = xs.createObjectOutputStream(new FileWriter(regularUserDirName + \"/regularUserSummary.xml\"), \"commands\");\n            ObjectOutputStream regularUserSorted = xs.createObjectOutputStream(new FileWriter(regularUserDirName + \"/regularUserSummarySorted.xml\"), \"commands\");\n\n            // Write commands in the order they are represented in commands.properties.in file\n            Iterator<?> it = all_api_commands.keySet().iterator();\n            while (it.hasNext()) {\n                String key = (String) it.next();\n\n                // Write admin commands\n                if (key.equals(\"login\")) {\n                    writeLoginCommand(out);\n                    writeLoginCommand(rootAdmin);\n                    writeLoginCommand(domainAdmin);\n                    writeLoginCommand(regularUser);\n\n                    ObjectOutputStream singleRootAdminCommandOs = xs.createObjectOutputStream(new FileWriter(rootAdminDirName + \"/\" + \"login\" + \".xml\"), \"command\");\n                    writeLoginCommand(singleRootAdminCommandOs);\n                    singleRootAdminCommandOs.close();\n\n                    ObjectOutputStream singleDomainAdminCommandOs = xs.createObjectOutputStream(new FileWriter(domainAdminDirName + \"/\" + \"login\" + \".xml\"), \"command\");\n                    writeLoginCommand(singleDomainAdminCommandOs);\n                    singleDomainAdminCommandOs.close();\n\n                    ObjectOutputStream singleRegularUserCommandOs = xs.createObjectOutputStream(new FileWriter(regularUserDirName + \"/\" + \"login\" + \".xml\"), \"command\");\n                    writeLoginCommand(singleRegularUserCommandOs);\n                    singleRegularUserCommandOs.close();\n\n                } else if (key.equals(\"logout\")) {\n                    writeLogoutCommand(out);\n                    writeLogoutCommand(rootAdmin);\n                    writeLogoutCommand(domainAdmin);\n                    writeLogoutCommand(regularUser);\n\n                    ObjectOutputStream singleRootAdminCommandOs = xs.createObjectOutputStream(new FileWriter(rootAdminDirName + \"/\" + \"logout\" + \".xml\"), \"command\");\n                    writeLogoutCommand(singleRootAdminCommandOs);\n                    singleRootAdminCommandOs.close();\n\n                    ObjectOutputStream singleDomainAdminCommandOs = xs.createObjectOutputStream(new FileWriter(domainAdminDirName + \"/\" + \"logout\" + \".xml\"), \"command\");\n                    writeLogoutCommand(singleDomainAdminCommandOs);\n                    singleDomainAdminCommandOs.close();\n\n                    ObjectOutputStream singleRegularUserCommandOs = xs.createObjectOutputStream(new FileWriter(regularUserDirName + \"/\" + \"logout\" + \".xml\"), \"command\");\n                    writeLogoutCommand(singleRegularUserCommandOs);\n                    singleRegularUserCommandOs.close();\n\n                } else {\n                    writeCommand(out, key);\n                    writeCommand(rootAdmin, key);\n\n                    // Write single commands to separate xml files\n                    if (!key.equals(\"login\")) {\n                        ObjectOutputStream singleRootAdminCommandOs = xs.createObjectOutputStream(new FileWriter(rootAdminDirName + \"/\" + key + \".xml\"), \"command\");\n                        writeCommand(singleRootAdminCommandOs, key);\n                        singleRootAdminCommandOs.close();\n                    }\n\n                    if (domain_admin_api_commands.containsKey(key)) {\n                        writeCommand(domainAdmin, key);\n                        ObjectOutputStream singleDomainAdminCommandOs = xs.createObjectOutputStream(new FileWriter(domainAdminDirName + \"/\" + key + \".xml\"), \"command\");\n                        writeCommand(singleDomainAdminCommandOs, key);\n                        singleDomainAdminCommandOs.close();\n                    }\n\n                    if (regular_user_api_commands.containsKey(key)) {\n                        writeCommand(regularUser, key);\n                        ObjectOutputStream singleRegularUserCommandOs = xs.createObjectOutputStream(new FileWriter(regularUserDirName + \"/\" + key + \".xml\"), \"command\");\n                        writeCommand(singleRegularUserCommandOs, key);\n                        singleRegularUserCommandOs.close();\n                    }\n                }\n            }\n\n            // Write sorted commands\n            it = all_api_commands_sorted.keySet().iterator();\n            while (it.hasNext()) {\n                String key = (String) it.next();\n\n                if (key.equals(\"login\")) {\n                    writeLoginCommand(rootAdminSorted);\n                    writeLoginCommand(outDomainAdminSorted);\n                    writeLoginCommand(regularUserSorted);\n                } else if (key.equals(\"logout\")) {\n                    writeLogoutCommand(rootAdminSorted);\n                    writeLogoutCommand(outDomainAdminSorted);\n                    writeLogoutCommand(regularUserSorted);\n                } else {\n                    writeCommand(rootAdminSorted, key);\n\n                    if (domain_admin_api_commands.containsKey(key)) {\n                        writeCommand(outDomainAdminSorted, key);\n                    }\n\n                    if (regular_user_api_commands.containsKey(key)) {\n                        writeCommand(regularUserSorted, key);\n                    }\n                }\n            }\n\n            out.close();\n            rootAdmin.close();\n            rootAdminSorted.close();\n            domainAdmin.close();\n            outDomainAdminSorted.close();\n            regularUser.close();\n            regularUserSorted.close();\n\n            // write alerttypes to xml\n            writeAlertTypes(xmlDocDir);\n\n            // gzip directory with xml doc\n            // zipDir(dirName + \"xmldoc.zip\", xmlDocDir);\n\n            // Delete directory\n            // deleteDir(new File(xmlDocDir));\n\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            System.exit(2);\n        }\n    }","commit_id":"6f6ed858399a1b9e44543ccc5d02d7ba3d8b46c4","url":"https://github.com/apache/cloudstack"},{"original_method":"private void processConfigFiles(List<String> configFiles) {\n        if (_apiCommands == null)\n            _apiCommands = new Properties();\n\n        Properties preProcessedCommands = new Properties();\n\n        for (String configFile : configFiles) {\n            File commandsFile = PropertiesUtil.findConfigFile(configFile);\n            if (commandsFile != null) {\n                try {\n                    preProcessedCommands.load(new FileInputStream(commandsFile));\n                } catch (FileNotFoundException fnfex) {\n                    // in case of a file within a jar in classpath, try to open stream using url\n                    InputStream stream = PropertiesUtil.openStreamFromURL(configFile);\n                    if (stream != null) {\n                        try {\n                            preProcessedCommands.load(stream);\n                        } catch (IOException e) {\n                            s_logger.error(\"IO Exception, unable to find properties file:\", fnfex);\n                        }\n                    } else {\n                        s_logger.error(\"Unable to find properites file\", fnfex);\n                    }\n                } catch (IOException ioe) {\n                    s_logger.error(\"IO Exception loading properties file\", ioe);\n                }\n            }\n        }\n\n        for (Object key : preProcessedCommands.keySet()) {\n            String preProcessedCommand = preProcessedCommands.getProperty((String) key);\n            String[] commandParts = preProcessedCommand.split(\";\");\n            _apiCommands.setProperty(key.toString(), commandParts[0]);\n\n            if (commandParts.length > 1) {\n                try {\n                    short cmdPermissions = Short.parseShort(commandParts[1]);\n                    if ((cmdPermissions & ADMIN_COMMAND) != 0) {\n                        s_adminCommands.add((String) key);\n                    }\n                    if ((cmdPermissions & RESOURCE_DOMAIN_ADMIN_COMMAND) != 0) {\n                        s_resourceDomainAdminCommands.add((String) key);\n                    }\n                    if ((cmdPermissions & DOMAIN_ADMIN_COMMAND) != 0) {\n                        s_resellerCommands.add((String) key);\n                    }\n                    if ((cmdPermissions & USER_COMMAND) != 0) {\n                        s_userCommands.add((String) key);\n                    }\n                    s_allCommands.addAll(s_adminCommands);\n                    s_allCommands.addAll(s_resourceDomainAdminCommands);\n                    s_allCommands.addAll(s_userCommands);\n                    s_allCommands.addAll(s_resellerCommands);\n                } catch (NumberFormatException nfe) {\n                    s_logger.info(\"Malformed command.properties permissions value, key = \" + key + \", value = \" + preProcessedCommand);\n                }\n            }\n        }\n    }","id":2601,"modified_method":"private void processConfigFiles(List<String> configFiles) {\n        Properties preProcessedCommands = new Properties();\n\n        for (String configFile : configFiles) {\n            File commandsFile = PropertiesUtil.findConfigFile(configFile);\n            if (commandsFile != null) {\n                try {\n                    preProcessedCommands.load(new FileInputStream(commandsFile));\n                } catch (FileNotFoundException fnfex) {\n                    // in case of a file within a jar in classpath, try to open stream using url\n                    InputStream stream = PropertiesUtil.openStreamFromURL(configFile);\n                    if (stream != null) {\n                        try {\n                            preProcessedCommands.load(stream);\n                        } catch (IOException e) {\n                            s_logger.error(\"IO Exception, unable to find properties file:\", fnfex);\n                        }\n                    } else {\n                        s_logger.error(\"Unable to find properites file\", fnfex);\n                    }\n                } catch (IOException ioe) {\n                    s_logger.error(\"IO Exception loading properties file\", ioe);\n                }\n            }\n        }\n\n        for (Object key : preProcessedCommands.keySet()) {\n            String preProcessedCommand = preProcessedCommands.getProperty((String) key);\n            int splitIndex = preProcessedCommand.lastIndexOf(\";\");\n            // Backward compatible to old style, apiname=pkg;mask\n            String mask = preProcessedCommand.substring(splitIndex+1);\n\n            try {\n                short cmdPermissions = Short.parseShort(mask);\n                if ((cmdPermissions & ADMIN_COMMAND) != 0) {\n                    s_adminCommands.add((String) key);\n                }\n                if ((cmdPermissions & RESOURCE_DOMAIN_ADMIN_COMMAND) != 0) {\n                    s_resourceDomainAdminCommands.add((String) key);\n                }\n                if ((cmdPermissions & DOMAIN_ADMIN_COMMAND) != 0) {\n                    s_resellerCommands.add((String) key);\n                }\n                if ((cmdPermissions & USER_COMMAND) != 0) {\n                    s_userCommands.add((String) key);\n                }\n                s_allCommands.addAll(s_adminCommands);\n                s_allCommands.addAll(s_resourceDomainAdminCommands);\n                s_allCommands.addAll(s_userCommands);\n                s_allCommands.addAll(s_resellerCommands);\n            } catch (NumberFormatException nfe) {\n                s_logger.info(\"Malformed command.properties permissions value, key = \" + key + \", value = \" + preProcessedCommand);\n            }\n        }\n    }","commit_id":"c5b51b7c39d3215c412f47d272d204ec276a4bf1","url":"https://github.com/apache/cloudstack"},{"original_method":"public static String serialize(SNodeReference p) {\n    SNodePointer np = (SNodePointer) p;\n    SModelReference ref = np.myModelReference;\n    SNodeId id = np.myNodeId;\n\n    assert ref != null && id != null;\n\n    return ref.toString() + \"/\" + id.toString();\n  }","id":2602,"modified_method":"public static String serialize(SNodeReference p) {\n    SNodePointer np = (SNodePointer) p;\n    SModelReference ref = np.myModelReference;\n    SNodeId id = np.myNodeId;\n\n    assert ref != null && id != null;\n\n    return ref.toString() + \"/\" + StringUtil.escapeRefChars(id.toString());\n  }","commit_id":"65cc6a0b223272d7b20ebd53c94a2189847da641","url":"https://github.com/JetBrains/MPS"},{"original_method":"public String toString() {\n    SNode node = resolve(MPSModuleRepository.getInstance());\n    if (node == null) {\n      return \"[bad pointer] model=\" + myModelReference + \" node id=\" + myNodeId;\n    }\n    return org.jetbrains.mps.openapi.model.SNodeUtil.getDebugText(node);\n  }","id":2603,"modified_method":"public String toString() {\n    return serialize(this);\n  }","commit_id":"65cc6a0b223272d7b20ebd53c94a2189847da641","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static SNodeReference deserialize(String from) {\n    String[] split = from.split(\"/\");\n    assert split.length == 2 : from;\n    return new jetbrains.mps.smodel.SNodePointer(split[0], split[1]);\n  }","id":2604,"modified_method":"public static SNodeReference deserialize(String from) {\n    int delimiterIndex = from.lastIndexOf(\"/\");\n    String nodeId = StringUtil.unescapeRefChars(from.substring(delimiterIndex + 1));\n    String modelReference = from.substring(0, delimiterIndex);\n\n    return new jetbrains.mps.smodel.SNodePointer(modelReference, nodeId);\n  }","commit_id":"65cc6a0b223272d7b20ebd53c94a2189847da641","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_puymhi_a0a0a0a1a0a4a(Object parameter_1) {\n      PersistenceFacade facade = PersistenceFacade.getInstance();\n      SNode quotedNode_2 = null;\n      quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eb0ad38eL, \"jetbrains.mps.lang.editor.structure.CellModel_RefNodeList\"), null, null, false);\n      SNodeAccessUtil.setReferenceTarget(quotedNode_2, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10964446123L, 0x10973779681L, \"relationDeclaration\"), (SNode) parameter_1);\n      return quotedNode_2;\n    }","id":2605,"modified_method":"private static SNode _quotation_createNode_puymhi_a0a0a0a1a0a4a(Object parameter_1) {\n      PersistenceFacade facade = PersistenceFacade.getInstance();\n      SNode quotedNode_2 = null;\n      SNode quotedNode_3 = null;\n      SNode quotedNode_4 = null;\n      quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eb0ad38eL, \"jetbrains.mps.lang.editor.structure.CellModel_RefNodeList\"), null, null, false);\n      SNodeAccessUtil.setReferenceTarget(quotedNode_2, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10964446123L, 0x10973779681L, \"relationDeclaration\"), (SNode) parameter_1);\n      quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x120154df6f3L, \"jetbrains.mps.lang.editor.structure.IndentLayoutNewLineStyleClassItem\"), null, null, false);\n      SNodeAccessUtil.setProperty(quotedNode_3, MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1143bd1283bL, 0x1143bd161dbL, \"flag\"), \"true\");\n      quotedNode_2.addChild(MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11beb039542L, 0x11beb040d06L, \"styleItem\"), quotedNode_3);\n      quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x120154c4089L, \"jetbrains.mps.lang.editor.structure.IndentLayoutIndentStyleClassItem\"), null, null, false);\n      SNodeAccessUtil.setProperty(quotedNode_4, MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1143bd1283bL, 0x1143bd161dbL, \"flag\"), \"true\");\n      quotedNode_2.addChild(MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11beb039542L, 0x11beb040d06L, \"styleItem\"), quotedNode_4);\n      return quotedNode_2;\n    }","commit_id":"037a67dce07c5d28a10c6be3a851c7070f76c956","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_puymhi_a0a0a1a0a4a(Object parameter_1) {\n      PersistenceFacade facade = PersistenceFacade.getInstance();\n      SNode quotedNode_2 = null;\n      quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfd52a2c922L, \"jetbrains.mps.lang.editor.structure.CellModel_RefCell\"), null, null, false);\n      SNodeAccessUtil.setReferenceTarget(quotedNode_2, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10964446123L, 0x10973779681L, \"relationDeclaration\"), (SNode) parameter_1);\n      return quotedNode_2;\n    }","id":2606,"modified_method":"private static SNode _quotation_createNode_puymhi_a0a0a1a0a4a(Object parameter_1) {\n      PersistenceFacade facade = PersistenceFacade.getInstance();\n      SNode quotedNode_2 = null;\n      SNode quotedNode_3 = null;\n      SNode quotedNode_4 = null;\n      quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfd52a2c922L, \"jetbrains.mps.lang.editor.structure.CellModel_RefCell\"), null, null, false);\n      SNodeAccessUtil.setReferenceTarget(quotedNode_2, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10964446123L, 0x10973779681L, \"relationDeclaration\"), (SNode) parameter_1);\n      quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x120154df6f3L, \"jetbrains.mps.lang.editor.structure.IndentLayoutNewLineStyleClassItem\"), null, null, false);\n      SNodeAccessUtil.setProperty(quotedNode_3, MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1143bd1283bL, 0x1143bd161dbL, \"flag\"), \"true\");\n      quotedNode_2.addChild(MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11beb039542L, 0x11beb040d06L, \"styleItem\"), quotedNode_3);\n      quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x120154c4089L, \"jetbrains.mps.lang.editor.structure.IndentLayoutIndentStyleClassItem\"), null, null, false);\n      SNodeAccessUtil.setProperty(quotedNode_4, MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1143bd1283bL, 0x1143bd161dbL, \"flag\"), \"true\");\n      quotedNode_2.addChild(MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11beb039542L, 0x11beb040d06L, \"styleItem\"), quotedNode_4);\n      return quotedNode_2;\n    }","commit_id":"037a67dce07c5d28a10c6be3a851c7070f76c956","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_puymhi_a0a0a0b0a0e0(Object parameter_1) {\n      PersistenceFacade facade = PersistenceFacade.getInstance();\n      SNode quotedNode_2 = null;\n      quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eb05cdc7L, \"jetbrains.mps.lang.editor.structure.CellModel_RefNode\"), null, null, false);\n      SNodeAccessUtil.setReferenceTarget(quotedNode_2, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10964446123L, 0x10973779681L, \"relationDeclaration\"), (SNode) parameter_1);\n      return quotedNode_2;\n    }","id":2607,"modified_method":"private static SNode _quotation_createNode_puymhi_a0a0a0b0a0e0(Object parameter_1) {\n      PersistenceFacade facade = PersistenceFacade.getInstance();\n      SNode quotedNode_2 = null;\n      SNode quotedNode_3 = null;\n      SNode quotedNode_4 = null;\n      quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eb05cdc7L, \"jetbrains.mps.lang.editor.structure.CellModel_RefNode\"), null, null, false);\n      SNodeAccessUtil.setReferenceTarget(quotedNode_2, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10964446123L, 0x10973779681L, \"relationDeclaration\"), (SNode) parameter_1);\n      quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x120154df6f3L, \"jetbrains.mps.lang.editor.structure.IndentLayoutNewLineStyleClassItem\"), null, null, false);\n      SNodeAccessUtil.setProperty(quotedNode_3, MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1143bd1283bL, 0x1143bd161dbL, \"flag\"), \"true\");\n      quotedNode_2.addChild(MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11beb039542L, 0x11beb040d06L, \"styleItem\"), quotedNode_3);\n      quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x120154c4089L, \"jetbrains.mps.lang.editor.structure.IndentLayoutIndentStyleClassItem\"), null, null, false);\n      SNodeAccessUtil.setProperty(quotedNode_4, MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1143bd1283bL, 0x1143bd161dbL, \"flag\"), \"true\");\n      quotedNode_2.addChild(MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11beb039542L, 0x11beb040d06L, \"styleItem\"), quotedNode_4);\n      return quotedNode_2;\n    }","commit_id":"037a67dce07c5d28a10c6be3a851c7070f76c956","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_puymhi_a0a0a0d0(Object parameter_1) {\n      PersistenceFacade facade = PersistenceFacade.getInstance();\n      SNode quotedNode_2 = null;\n      quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfb35c96896L, \"jetbrains.mps.lang.editor.structure.CellModel_Component\"), null, null, false);\n      SNodeAccessUtil.setReferenceTarget(quotedNode_2, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfb35c96896L, 0xfb35c96897L, \"editorComponent\"), (SNode) parameter_1);\n      return quotedNode_2;\n    }","id":2608,"modified_method":"private static SNode _quotation_createNode_puymhi_a0a0a0d0(Object parameter_1) {\n      PersistenceFacade facade = PersistenceFacade.getInstance();\n      SNode quotedNode_2 = null;\n      SNode quotedNode_3 = null;\n      quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfb35c96896L, \"jetbrains.mps.lang.editor.structure.CellModel_Component\"), null, null, false);\n      SNodeAccessUtil.setReferenceTarget(quotedNode_2, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfb35c96896L, 0xfb35c96897L, \"editorComponent\"), (SNode) parameter_1);\n      quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x120154df6f3L, \"jetbrains.mps.lang.editor.structure.IndentLayoutNewLineStyleClassItem\"), null, null, false);\n      SNodeAccessUtil.setProperty(quotedNode_3, MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1143bd1283bL, 0x1143bd161dbL, \"flag\"), \"true\");\n      quotedNode_2.addChild(MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11beb039542L, 0x11beb040d06L, \"styleItem\"), quotedNode_3);\n      return quotedNode_2;\n    }","commit_id":"037a67dce07c5d28a10c6be3a851c7070f76c956","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n      public void execute(@NotNull String pattern) {\n        SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eaff2517L, \"jetbrains.mps.lang.editor.structure.CellModel_Collection\")));\n      }","id":2609,"modified_method":"@Override\n      public void execute(@NotNull String pattern) {\n        SNodeOperations.replaceWithAnother(_context.getNode(), _quotation_createNode_puymhi_a0a0a0a0());\n      }","commit_id":"037a67dce07c5d28a10c6be3a851c7070f76c956","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_puymhi_a0a0a0c0(Object parameter_1) {\n      PersistenceFacade facade = PersistenceFacade.getInstance();\n      SNode quotedNode_2 = null;\n      quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eb02612eL, \"jetbrains.mps.lang.editor.structure.CellModel_Property\"), null, null, false);\n      SNodeAccessUtil.setReferenceTarget(quotedNode_2, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10964446123L, 0x10973779681L, \"relationDeclaration\"), (SNode) parameter_1);\n      return quotedNode_2;\n    }","id":2610,"modified_method":"private static SNode _quotation_createNode_puymhi_a0a0a0c0(Object parameter_1) {\n      PersistenceFacade facade = PersistenceFacade.getInstance();\n      SNode quotedNode_2 = null;\n      SNode quotedNode_3 = null;\n      quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eb02612eL, \"jetbrains.mps.lang.editor.structure.CellModel_Property\"), null, null, false);\n      SNodeAccessUtil.setReferenceTarget(quotedNode_2, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10964446123L, 0x10973779681L, \"relationDeclaration\"), (SNode) parameter_1);\n      quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x120154df6f3L, \"jetbrains.mps.lang.editor.structure.IndentLayoutNewLineStyleClassItem\"), null, null, false);\n      SNodeAccessUtil.setProperty(quotedNode_3, MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1143bd1283bL, 0x1143bd161dbL, \"flag\"), \"true\");\n      quotedNode_2.addChild(MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11beb039542L, 0x11beb040d06L, \"styleItem\"), quotedNode_3);\n      return quotedNode_2;\n    }","commit_id":"037a67dce07c5d28a10c6be3a851c7070f76c956","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n      public void execute(@NotNull String pattern) {\n        SNode componentCell = SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfb35c96896L, \"jetbrains.mps.lang.editor.structure.CellModel_Component\")));\n        SLinkOperations.setTarget(componentCell, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfb35c96896L, 0xfb35c96897L, \"editorComponent\"), SNodeOperations.getNode(\"r:00000000-0000-4000-0000-011c89590284(jetbrains.mps.lang.core.editor)\", \"2900100530630621651\"));\n      }","id":2611,"modified_method":"@Override\n      public void execute(@NotNull String pattern) {\n        SNodeOperations.replaceWithAnother(_context.getNode(), _quotation_createNode_puymhi_a0a0a0d0(SNodeOperations.getNode(\"r:00000000-0000-4000-0000-011c89590284(jetbrains.mps.lang.core.editor)\", \"2900100530630621651\")));\n      }","commit_id":"c48e94ac7ef43da4b8c7b5d16a0995bfb7bdcecf","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n      public void execute(@NotNull String pattern) {\n        SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eb01232eL, \"jetbrains.mps.lang.editor.structure.CellModel_Constant\")));\n      }","id":2612,"modified_method":"@Override\n      public void execute(@NotNull String pattern) {\n        SNodeOperations.replaceWithAnother(_context.getNode(), _quotation_createNode_puymhi_a0a0a0b0());\n      }","commit_id":"c48e94ac7ef43da4b8c7b5d16a0995bfb7bdcecf","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n      public void execute(@NotNull String pattern) {\n        SNode emptyCellModel = new jetbrains.mps.smodel.SNode(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eafb9a39L, \"jetbrains.mps.lang.editor.structure.EditorCellModel\"));\n        SNodeOperations.insertNextSiblingChild(_context.getNode(), emptyCellModel);\n      }","id":2613,"modified_method":"@Override\n      public void execute(@NotNull String pattern) {\n        SNodeOperations.insertNextSiblingChild(_context.getNode(), _quotation_createNode_puymhi_a0a0a0f0());\n      }","commit_id":"c48e94ac7ef43da4b8c7b5d16a0995bfb7bdcecf","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n      public boolean canExecute(@NotNull String pattern) {\n        EditorAssistantUtilities assistantUtils = new EditorAssistantUtilities(_context.getNode());\n        if (!(assistantUtils.isAbstratCell()) || assistantUtils.getEditorDeclaration() == null || SLinkOperations.getTarget(assistantUtils.getEditorDeclaration(), MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f7df344a9L, 0x10f7df451aeL, \"conceptDeclaration\")) == null) {\n          return false;\n        }\n\n        if (assistantUtils.hasFeatures() && SNodeOperations.getParent(_context.getNode()) == assistantUtils.getEditorDeclaration()) {\n          return false;\n        }\n\n        return null == assistantUtils.getFirstCellValue(new _FunctionTypes._return_P1_E0<Boolean, SNode>() {\n          public Boolean invoke(SNode cell) {\n            SNode propertyCell = SNodeOperations.as(cell, MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eb02612eL, \"jetbrains.mps.lang.editor.structure.CellModel_Property\"));\n            if (propertyCell != null && SLinkOperations.getTarget(propertyCell, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10964446123L, 0x10973779681L, \"relationDeclaration\")) == MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x10d34fa226eL, \"alias\").getDeclarationNode()) {\n              return Boolean.FALSE;\n            }\n\n            return (SLinkOperations.getTarget(SNodeOperations.as(cell, MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfb35c96896L, \"jetbrains.mps.lang.editor.structure.CellModel_Component\")), MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfb35c96896L, 0xfb35c96897L, \"editorComponent\")) == SNodeOperations.getNode(\"r:00000000-0000-4000-0000-011c89590284(jetbrains.mps.lang.core.editor)\", \"2900100530630621651\") ? Boolean.FALSE : null);\n          }\n        });\n      }","id":2614,"modified_method":"@Override\n      public boolean canExecute(@NotNull String pattern) {\n        EditorAssistantUtilities assistantUtils = new EditorAssistantUtilities(_context.getNode());\n        if (!(assistantUtils.isAbstratCell()) || assistantUtils.getEditorDeclaration() == null || SLinkOperations.getTarget(assistantUtils.getEditorDeclaration(), MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f7df344a9L, 0x10f7df451aeL, \"conceptDeclaration\")) == null) {\n          return false;\n        }\n\n        if (assistantUtils.hasFeatures() && SNodeOperations.getParent(_context.getNode()) == assistantUtils.getEditorDeclaration()) {\n          return false;\n        }\n        // Do not suggest creation of #alias# cell if concept has name property \n        if (Sequence.fromIterable(AbstractConceptDeclaration__BehaviorDescriptor.getAllSuperConcepts_id2A8AB0rAWpG.invoke(SLinkOperations.getTarget(assistantUtils.getEditorDeclaration(), MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f7df344a9L, 0x10f7df451aeL, \"conceptDeclaration\")), ((boolean) true))).contains(MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, \"jetbrains.mps.lang.core.structure.INamedConcept\").getDeclarationNode())) {\n          return false;\n        }\n\n        return null == assistantUtils.getFirstCellValue(new _FunctionTypes._return_P1_E0<Boolean, SNode>() {\n          public Boolean invoke(SNode cell) {\n            SNode propertyCell = SNodeOperations.as(cell, MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eb02612eL, \"jetbrains.mps.lang.editor.structure.CellModel_Property\"));\n            if (propertyCell != null && SLinkOperations.getTarget(propertyCell, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10964446123L, 0x10973779681L, \"relationDeclaration\")) == MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x10d34fa226eL, \"alias\").getDeclarationNode()) {\n              return Boolean.FALSE;\n            }\n\n            return (SLinkOperations.getTarget(SNodeOperations.as(cell, MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfb35c96896L, \"jetbrains.mps.lang.editor.structure.CellModel_Component\")), MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfb35c96896L, 0xfb35c96897L, \"editorComponent\")) == SNodeOperations.getNode(\"r:00000000-0000-4000-0000-011c89590284(jetbrains.mps.lang.core.editor)\", \"2900100530630621651\") ? Boolean.FALSE : null);\n          }\n        });\n      }","commit_id":"c48e94ac7ef43da4b8c7b5d16a0995bfb7bdcecf","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  protected List<MenuPart<TransformationMenuItem, TransformationMenuContext>> getParts(TransformationMenuContext _context) {\n    List<MenuPart<TransformationMenuItem, TransformationMenuContext>> result = new ArrayList<MenuPart<TransformationMenuItem, TransformationMenuContext>>();\n    if (ListSequence.fromListAndArray(new ArrayList<String>(), MenuLocations.CONTEXT_ASSISTANT).contains(_context.getMenuLocation())) {\n      result.add(new EditorCellModel_TransformationMenu.TransformationMenuPart_Action_puymhi_a0());\n      result.add(new EditorCellModel_TransformationMenu.TransformationMenuPart_Action_puymhi_b0());\n      result.add(new EditorCellModel_TransformationMenu.TransformationMenuPart_Action_puymhi_c0());\n      result.add(new EditorCellModel_TransformationMenu.TransformationMenuPart_Action_puymhi_d0());\n      result.add(new EditorCellModel_TransformationMenu.TransformationMenuPart_Parameterized_puymhi_e0());\n      result.add(new EditorCellModel_TransformationMenu.TransformationMenuPart_Action_puymhi_f0());\n      result.add(new EditorCellModel_TransformationMenu.TransformationMenuPart_Action_puymhi_g0());\n    }\n    return result;\n  }","id":2615,"modified_method":"@Override\n  protected List<MenuPart<TransformationMenuItem, TransformationMenuContext>> getParts(TransformationMenuContext _context) {\n    List<MenuPart<TransformationMenuItem, TransformationMenuContext>> result = new ArrayList<MenuPart<TransformationMenuItem, TransformationMenuContext>>();\n    if (ListSequence.fromListAndArray(new ArrayList<String>(), MenuLocations.CONTEXT_ASSISTANT).contains(_context.getMenuLocation())) {\n      result.add(new EditorCellModel_TransformationMenu.TransformationMenuPart_Action_puymhi_a0());\n      result.add(new EditorCellModel_TransformationMenu.TransformationMenuPart_Action_puymhi_b0());\n      result.add(new EditorCellModel_TransformationMenu.TransformationMenuPart_Action_puymhi_c0());\n      result.add(new EditorCellModel_TransformationMenu.TransformationMenuPart_Action_puymhi_d0());\n      result.add(new EditorCellModel_TransformationMenu.TransformationMenuPart_Parameterized_puymhi_e0());\n      result.add(new EditorCellModel_TransformationMenu.TransformationMenuPart_Action_puymhi_f0());\n    }\n    return result;\n  }","commit_id":"c48e94ac7ef43da4b8c7b5d16a0995bfb7bdcecf","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n      public void execute(@NotNull String pattern) {\n        SNode propertyCell = SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eb02612eL, \"jetbrains.mps.lang.editor.structure.CellModel_Property\")));\n        SLinkOperations.setTarget(propertyCell, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10964446123L, 0x10973779681L, \"relationDeclaration\"), SNodeOperations.as(MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, \"name\").getDeclarationNode(), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086bL, \"jetbrains.mps.lang.structure.structure.PropertyDeclaration\")));\n      }","id":2616,"modified_method":"@Override\n      public void execute(@NotNull String pattern) {\n        SNodeOperations.replaceWithAnother(_context.getNode(), _quotation_createNode_puymhi_a0a0a0c0(MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, \"name\").getDeclarationNode()));\n      }","commit_id":"c48e94ac7ef43da4b8c7b5d16a0995bfb7bdcecf","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n      public void execute(@NotNull String pattern) {\n        if (SPropertyOperations.hasValue(myParameterObject, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, 0xf980556927L, \"metaClass\"), \"aggregation\", \"reference\")) {\n          if ((boolean) LinkDeclaration__BehaviorDescriptor.isSingular_idhEwIfAt.invoke(myParameterObject)) {\n            SNode refNode = SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eb05cdc7L, \"jetbrains.mps.lang.editor.structure.CellModel_RefNode\")));\n            SLinkOperations.setTarget(refNode, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10964446123L, 0x10973779681L, \"relationDeclaration\"), myParameterObject);\n          } else {\n            SNode refNodeList = SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eb0ad38eL, \"jetbrains.mps.lang.editor.structure.CellModel_RefNodeList\")));\n            SLinkOperations.setTarget(refNodeList, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10964446123L, 0x10973779681L, \"relationDeclaration\"), myParameterObject);\n          }\n        } else {\n          SNode refCell = SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfd52a2c922L, \"jetbrains.mps.lang.editor.structure.CellModel_RefCell\")));\n          SLinkOperations.setTarget(refCell, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10964446123L, 0x10973779681L, \"relationDeclaration\"), myParameterObject);\n          SLinkOperations.setTarget(SLinkOperations.getTarget(refCell, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfd52a2c922L, 0xfd5cf2df2aL, \"editorComponent\")), MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfba0eb7c50L, 0xfba0ec5415L, \"cellModel\"), SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x8ace515f0191e6eL, \"jetbrains.mps.lang.editor.structure.CellModel_ReferencePresentation\")));\n        }\n\n      }","id":2617,"modified_method":"@Override\n      public void execute(@NotNull String pattern) {\n        SNode newCell;\n        if (SPropertyOperations.hasValue(myParameterObject, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, 0xf980556927L, \"metaClass\"), \"aggregation\", \"reference\")) {\n          if ((boolean) LinkDeclaration__BehaviorDescriptor.isSingular_idhEwIfAt.invoke(myParameterObject)) {\n            newCell = _quotation_createNode_puymhi_a0a0a0b0a0e0(myParameterObject);\n          } else {\n            newCell = _quotation_createNode_puymhi_a0a0a0a1a0a4a(myParameterObject);\n          }\n        } else {\n          SNode refCell = _quotation_createNode_puymhi_a0a0a1a0a4a(myParameterObject);\n          SLinkOperations.setTarget(SLinkOperations.getTarget(refCell, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfd52a2c922L, 0xfd5cf2df2aL, \"editorComponent\")), MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfba0eb7c50L, 0xfba0ec5415L, \"cellModel\"), SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x8ace515f0191e6eL, \"jetbrains.mps.lang.editor.structure.CellModel_ReferencePresentation\")));\n          newCell = refCell;\n        }\n        SNodeOperations.replaceWithAnother(_context.getNode(), newCell);\n      }","commit_id":"c48e94ac7ef43da4b8c7b5d16a0995bfb7bdcecf","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void execute()\n        throws MojoExecutionException\n    {\n        if ( project.getFile() == null || !project.getFile().exists() )\n        {\n            throw new MojoExecutionException( \"There must be a POM in the current working directory for the Eclipse plugin to work.\" );\n        }\n\n        if ( \"pom\".equals( project.getPackaging() ) )\n        {\n            getLog().info( \"Don't generate Eclipse project for pom project\" );\n\n            return;\n        }\n\n        if ( outputDir == null )\n        {\n            outputDir = project.getFile().getParentFile();\n        }\n        else\n        {\n            if ( !outputDir.isDirectory() )\n            {\n                throw new MojoExecutionException( \"Not a directory: '\" + outputDir + \"'\" );\n            }\n\n            outputDir = new File( outputDir, project.getArtifactId() );\n\n            if ( !outputDir.isDirectory() && !outputDir.mkdir() )\n            {\n                throw new MojoExecutionException( \"Can't create directory '\" + outputDir + \"'\" );\n            }\n        }\n\n        try\n        {\n            eclipseWriter.setLocalRepositoryFile( new File ( localRepository.getBasedir() ) );\n\n            eclipseWriter.setLog( getLog() );\n\n            if ( executedProject == null )\n            {\n                // backwards compat with alpha-2 only\n                executedProject = project;\n            }\n\n            eclipseWriter.write( outputDir, project, executedProject, reactorProjects );\n        }\n        catch ( EclipsePluginException e )\n        {\n            throw new MojoExecutionException( \"Error writing eclipse files.\", e );\n        }\n    }","id":2618,"modified_method":"public void execute()\n        throws MojoExecutionException\n    {\n        if ( project.getFile() == null || !project.getFile().exists() )\n        {\n            throw new MojoExecutionException( \"There must be a POM in the current working directory for the Eclipse plugin to work.\" );\n        }\n\n        if ( \"pom\".equals( project.getPackaging() ) )\n        {\n            getLog().info( \"Don't generate Eclipse project for pom project\" );\n\n            return;\n        }\n\n        if ( outputDir == null )\n        {\n            outputDir = project.getFile().getParentFile();\n        }\n        else if ( !outputDir.equals( project.getFile().getParentFile() ) )\n        {\n            if ( !outputDir.isDirectory() )\n            {\n                throw new MojoExecutionException( \"Not a directory: '\" + outputDir + \"'\" );\n            }\n\n            outputDir = new File( outputDir, project.getArtifactId() );\n\n            if ( !outputDir.isDirectory() && !outputDir.mkdir() )\n            {\n                throw new MojoExecutionException( \"Can't create directory '\" + outputDir + \"'\" );\n            }\n        }\n\n        try\n        {\n            eclipseWriter.setLocalRepositoryFile( new File ( localRepository.getBasedir() ) );\n\n            eclipseWriter.setLog( getLog() );\n\n            if ( executedProject == null )\n            {\n                // backwards compat with alpha-2 only\n                executedProject = project;\n            }\n\n            eclipseWriter.write( outputDir, project, executedProject, reactorProjects );\n        }\n        catch ( EclipsePluginException e )\n        {\n            throw new MojoExecutionException( \"Error writing eclipse files.\", e );\n        }\n    }","commit_id":"9f4e106da7718ea16de897173c86eece6d9b0ef0","url":"https://github.com/apache/maven-plugins"},{"original_method":"private void assertFileEquals( String mavenRepo, File expectedFile, File actualFile )\n        throws IOException\n    {\n        List expectedLines = getLines( mavenRepo, expectedFile );\n\n        List actualLines = getLines( mavenRepo, actualFile );\n\n        for ( int i = 0; i < expectedLines.size(); i++ )\n        {\n            String expected = expectedLines.get( i ).toString();\n\n            if ( actualLines.size() < i )\n            {\n                fail( \"Too few lines in the actual file. Was \" + actualLines.size() + \", expected: \" + expectedLines.size() );\n            }\n\n            String actual = actualLines.get( i ).toString();\n\n            assertEquals( \"Checking line #\" + (i + 1), expected, actual );\n        }\n\n        assertTrue( \"Unequal number of lines.\", expectedLines.size() == actualLines.size() );\n    }","id":2619,"modified_method":"private void assertFileEquals( String mavenRepo, File expectedFile, File actualFile )\n        throws IOException\n    {\n        List expectedLines = getLines( mavenRepo, expectedFile );\n\n        List actualLines = getLines( mavenRepo, actualFile );\n\n        for ( int i = 0; i < expectedLines.size(); i++ )\n        {\n            String expected = expectedLines.get( i ).toString();\n\n            // replace some vars in the expected line, to account\n            // for absolute paths that are different on each installation.\n\n            expected = StringUtils.replace( expected, \"${basedir}\", basedir );\n\n            if ( actualLines.size() < i )\n            {\n                fail( \"Too few lines in the actual file. Was \" + actualLines.size() + \", expected: \" + expectedLines.size() );\n            }\n\n            String actual = actualLines.get( i ).toString();\n\n            assertEquals( \"Checking line #\" + (i + 1), expected, actual );\n        }\n\n        assertTrue( \"Unequal number of lines.\", expectedLines.size() == actualLines.size() );\n    }","commit_id":"9f4e106da7718ea16de897173c86eece6d9b0ef0","url":"https://github.com/apache/maven-plugins"},{"original_method":"private void testProject( String projectName )\n        throws Exception\n    {\n        File basedir = getTestFile( \"src/test/projects/\" + projectName );\n\n        MavenProjectBuilder builder = (MavenProjectBuilder) lookup( MavenProjectBuilder.ROLE );\n\n        EclipsePlugin plugin = new EclipsePlugin();\n\n        File repo = getTestFile( \"src/test/repository\" );\n\n        ArtifactRepositoryLayout localRepositoryLayout = (ArtifactRepositoryLayout) lookup( ArtifactRepositoryLayout.ROLE, \"legacy\" );\n\n        ArtifactRepository localRepository = new DefaultArtifactRepository( \"local\", \"file://\" + repo.getAbsolutePath(),\n                                                                            localRepositoryLayout );\n\n        MavenProject project = builder.buildWithDependencies( new File( basedir, \"project.xml\" ), localRepository, null );\n\n        for ( Iterator it = project.getArtifacts().iterator(); it.hasNext(); )\n        {\n            Artifact artifact = (Artifact) it.next();\n            artifact.setFile(new File(localRepository.getBasedir(), localRepository.pathOf(artifact)));\n        }\n\n        plugin.setProject( project );\n\n        plugin.setLocalRepository( localRepository );\n\n        plugin.execute();\n\n        assertFileEquals( localRepository.getBasedir(), new File( basedir, \"project\" ), new File( basedir, \".project\" ) );\n\n        assertFileEquals( localRepository.getBasedir(), new File( basedir, \"classpath\" ), new File( basedir, \".classpath\" ) );\n    }","id":2620,"modified_method":"private void testProject( String projectName, File outputDir )\n        throws Exception\n    {\n        File basedir = getTestFile( \"src/test/projects/\" + projectName );\n\n        MavenProjectBuilder builder = (MavenProjectBuilder) lookup( MavenProjectBuilder.ROLE );\n\n        EclipsePlugin plugin = new EclipsePlugin();\n\n        File repo = getTestFile( \"src/test/repository\" );\n\n        ArtifactRepositoryLayout localRepositoryLayout = (ArtifactRepositoryLayout) lookup( ArtifactRepositoryLayout.ROLE, \"legacy\" );\n\n        ArtifactRepository localRepository = new DefaultArtifactRepository( \"local\", \"file://\" + repo.getAbsolutePath(),\n                                                                            localRepositoryLayout );\n\n        MavenProject project = builder.buildWithDependencies( new File( basedir, \"project.xml\" ), localRepository, null );\n\n        File projectOutputDir = basedir;\n\n        if ( outputDir == null )\n        {\n            outputDir = basedir;\n        }\n        else\n        {\n            outputDir.mkdirs();\n\n            projectOutputDir = new File( outputDir, project.getArtifactId() );\n        }\n\n        System.err.println(\"basedir: \" + basedir+\"\\noutputdir: \" + outputDir+\"\\nprojectOutputDir: \" + projectOutputDir );\n\n        plugin.setOutputDir( outputDir );\n\n\n        for ( Iterator it = project.getArtifacts().iterator(); it.hasNext(); )\n        {\n            Artifact artifact = (Artifact) it.next();\n            artifact.setFile(new File(localRepository.getBasedir(), localRepository.pathOf(artifact)));\n        }\n\n        plugin.setProject( project );\n\n        plugin.setLocalRepository( localRepository );\n\n        plugin.execute();\n\n        assertFileEquals( localRepository.getBasedir(), new File( basedir, \"project\" ), new File( projectOutputDir, \".project\" ) );\n\n        assertFileEquals( localRepository.getBasedir(), new File( basedir, \"classpath\" ), new File( projectOutputDir, \".classpath\" ) );\n    }","commit_id":"9f4e106da7718ea16de897173c86eece6d9b0ef0","url":"https://github.com/apache/maven-plugins"},{"original_method":"public void testProject1()\n        throws Exception\n    {\n        testProject( \"project-1\" );\n    }","id":2621,"modified_method":"public void testProject1()\n        throws Exception\n    {\n        testProject( \"project-1\", null );\n    }","commit_id":"9f4e106da7718ea16de897173c86eece6d9b0ef0","url":"https://github.com/apache/maven-plugins"},{"original_method":"public void testProject2()\n        throws Exception\n    {\n        testProject( \"project-2\" );\n    }","id":2622,"modified_method":"public void testProject2()\n        throws Exception\n    {\n        testProject( \"project-2\", null );\n    }","commit_id":"9f4e106da7718ea16de897173c86eece6d9b0ef0","url":"https://github.com/apache/maven-plugins"},{"original_method":"public void write( File outputDir, MavenProject project, MavenProject executedProject, List reactorProjects )\n        throws EclipsePluginException\n    {\n        assertNotEmpty( project.getGroupId(), \"groupId\" );\n\n        assertNotEmpty( project.getArtifactId(), \"artifactId\" );\n\n        File projectBaseDir = project.getFile().getParentFile();\n\n        Collection referencedProjects = writeEclipseClasspath( projectBaseDir, outputDir, project, executedProject, reactorProjects );\n        \n        writeEclipseProject( projectBaseDir, outputDir, project, executedProject, referencedProjects );\n\n        writeEclipseSettings( projectBaseDir, outputDir, project, executedProject );\n\n        log.info( \"Wrote Eclipse project for \" + project.getArtifactId() + \" to \" + outputDir.getAbsolutePath() );\n    }","id":2623,"modified_method":"public void write( File outputDir, MavenProject project, MavenProject executedProject, List reactorProjects )\n        throws EclipsePluginException\n    {\n        assertNotEmpty( project.getGroupId(), \"groupId\" );\n\n        assertNotEmpty( project.getArtifactId(), \"artifactId\" );\n\n        File projectBaseDir = project.getFile().getParentFile();\n        \n        Map eclipseSourceRoots = new HashMap();\n\n        Collection referencedProjects = writeEclipseClasspath(\n        \tprojectBaseDir, outputDir, project, executedProject, reactorProjects, eclipseSourceRoots\n        );\n        \n        writeEclipseProject( projectBaseDir, outputDir, project, executedProject, referencedProjects, eclipseSourceRoots );\n\n        writeEclipseSettings( projectBaseDir, outputDir, project, executedProject);\n\n        log.info( \"Wrote Eclipse project for \" + project.getArtifactId() + \" to \" + outputDir.getAbsolutePath() );\n    }","commit_id":"9f4e106da7718ea16de897173c86eece6d9b0ef0","url":"https://github.com/apache/maven-plugins"},{"original_method":"protected void writeEclipseProject( File projectBaseDir, File basedir, MavenProject project, MavenProject executedProject, Collection referencedProjects )\n        throws EclipsePluginException\n    {\n        FileWriter w;\n\n        try\n        {\n            w = new FileWriter( new File( basedir, \".project\" ) );\n        }\n        catch ( IOException ex )\n        {\n            throw new EclipsePluginException( \"Exception while opening file.\", ex );\n        }\n\n        XMLWriter writer = new PrettyPrintXMLWriter( w );\n\n        writer.startElement( \"projectDescription\" );\n\n        writer.startElement( \"name\" );\n\n        if ( project.getArtifactId() == null )\n        {\n            throw new EclipsePluginException( \"Missing element from the POM: artifactId.\" );\n        }\n\n        writer.writeText( project.getArtifactId() );\n\n        writer.endElement();\n\n        // TODO: this entire element might be dropped if the comment is null.\n        // but as the maven1 eclipse plugin does it, it's better to be safe than sorry\n        // A eclipse developer might want to look at this.\n        writer.startElement( \"comment\" );\n\n        if ( project.getDescription() != null )\n        {\n            writer.writeText( project.getDescription() );\n        }\n\n        writer.endElement();\n\n        writer.startElement( \"projects\" );\n\n        for ( Iterator it = referencedProjects.iterator(); it.hasNext(); )\n        {\n            writer.startElement( \"project\" );\n            \n            writer.writeText( ( (MavenProject) it.next() ).getArtifactId() );\n            \n            writer.endElement();\n        }\n        \n        writer.endElement(); // projects\n\n        writer.startElement( \"buildSpec\" );\n\n        writer.startElement( \"buildCommand\" );\n\n        writer.startElement( \"name\" );\n\n        writer.writeText( \"org.eclipse.jdt.core.javabuilder\" );\n\n        writer.endElement(); // name\n\n        writer.startElement( \"arguments\" );\n\n        writer.endElement(); // arguments\n\n        writer.endElement(); // buildCommand\n\n        writer.endElement(); // buildSpec\n\n        writer.startElement( \"natures\" );\n\n        writer.startElement( \"nature\" );\n\n        writer.writeText( \"org.eclipse.jdt.core.javanature\" );\n\n        writer.endElement(); // nature\n\n        writer.endElement(); // natures\n\n\n        if ( ! projectBaseDir.equals( basedir ) )\n        {\n            writer.startElement( \"linkedResources\" );\n\n            addFileLink( writer, projectBaseDir, basedir, project.getFile() );\n\n            addSourceLinks( writer, projectBaseDir, basedir, executedProject.getCompileSourceRoots() );\n\n            addResourceLinks( writer, projectBaseDir, basedir, executedProject.getBuild().getResources() );\n\n            addSourceLinks( writer, projectBaseDir, basedir, executedProject.getTestCompileSourceRoots() );\n\n            addResourceLinks( writer, projectBaseDir, basedir, executedProject.getBuild().getTestResources() );\n\n            writer.endElement(); // linkedResources\n        }\n\n        writer.endElement(); // projectDescription\n\n        close( w );\n    }","id":2624,"modified_method":"protected void writeEclipseProject( File projectBaseDir, File basedir, MavenProject project, MavenProject executedProject, Collection referencedProjects, Map eclipseSourceRoots )\n        throws EclipsePluginException\n    {\n        FileWriter w;\n\n        try\n        {\n            w = new FileWriter( new File( basedir, \".project\" ) );\n        }\n        catch ( IOException ex )\n        {\n            throw new EclipsePluginException( \"Exception while opening file.\", ex );\n        }\n\n        XMLWriter writer = new PrettyPrintXMLWriter( w );\n\n        writer.startElement( \"projectDescription\" );\n\n        writer.startElement( \"name\" );\n\n        if ( project.getArtifactId() == null )\n        {\n            throw new EclipsePluginException( \"Missing element from the POM: artifactId.\" );\n        }\n\n        writer.writeText( project.getArtifactId() );\n\n        writer.endElement();\n\n        // TODO: this entire element might be dropped if the comment is null.\n        // but as the maven1 eclipse plugin does it, it's better to be safe than sorry\n        // A eclipse developer might want to look at this.\n        writer.startElement( \"comment\" );\n\n        if ( project.getDescription() != null )\n        {\n            writer.writeText( project.getDescription() );\n        }\n\n        writer.endElement();\n\n        writer.startElement( \"projects\" );\n\n        for ( Iterator it = referencedProjects.iterator(); it.hasNext(); )\n        {\n            writer.startElement( \"project\" );\n            \n            writer.writeText( ( (MavenProject) it.next() ).getArtifactId() );\n            \n            writer.endElement();\n        }\n        \n        writer.endElement(); // projects\n\n        writer.startElement( \"buildSpec\" );\n\n        writer.startElement( \"buildCommand\" );\n\n        writer.startElement( \"name\" );\n\n        writer.writeText( \"org.eclipse.jdt.core.javabuilder\" );\n\n        writer.endElement(); // name\n\n        writer.startElement( \"arguments\" );\n\n        writer.endElement(); // arguments\n\n        writer.endElement(); // buildCommand\n\n        writer.endElement(); // buildSpec\n\n        writer.startElement( \"natures\" );\n\n        writer.startElement( \"nature\" );\n\n        writer.writeText( \"org.eclipse.jdt.core.javanature\" );\n\n        writer.endElement(); // nature\n\n        writer.endElement(); // natures\n\n\n        if ( ! projectBaseDir.equals( basedir ) )\n        {\n            writer.startElement( \"linkedResources\" );\n\n            addFileLink( writer, projectBaseDir, basedir, project.getFile() );\n            \n            addSourceLinks( writer, projectBaseDir, basedir, eclipseSourceRoots );\n\n            writer.endElement(); // linkedResources\n        }\n\n        writer.endElement(); // projectDescription\n\n        close( w );\n    }","commit_id":"9f4e106da7718ea16de897173c86eece6d9b0ef0","url":"https://github.com/apache/maven-plugins"},{"original_method":"private void addSourceRoots( XMLWriter writer, File projectBaseDir, File basedir, List sourceRoots, String output )\n    {\n        for ( Iterator it = sourceRoots.iterator(); it.hasNext(); )\n        {\n            String sourceRoot = (String) it.next();\n\n            if ( new File( sourceRoot ).isDirectory() )\n            {\n                writer.startElement( \"classpathentry\" );\n\n                writer.addAttribute( \"kind\", \"src\" );\n\n                sourceRoot = toRelative( projectBaseDir, sourceRoot );\n                if (!projectBaseDir.equals(basedir))\n                {\n                    sourceRoot = sourceRoot.replaceAll( \"/\", \"-\" );\n                }\n                \n                writer.addAttribute( \"path\", sourceRoot );\n\n                if ( output != null )\n                {\n                    writer.addAttribute( \"output\", toRelative( projectBaseDir, output ) );\n                }\n\n                writer.endElement();\n            }\n        }\n    }","id":2625,"modified_method":"private void addSourceRoots( XMLWriter writer, File projectBaseDir, File basedir, List sourceRoots, String output, Map addedSourceRoots )\n    {\n        for ( Iterator it = sourceRoots.iterator(); it.hasNext(); )\n        {\n            String sourceRoot = (String) it.next();\n\n            if ( new File( sourceRoot ).isDirectory() )\n            {\n                // Don't add the same sourceroots twice. No include/exclude\n            \t// patterns possible in maven for (test|script|)source directories.\n                if ( addedSourceRoots.containsKey( sourceRoot ) )\n                {\n                \tcontinue; \n                }\n\n                writer.startElement( \"classpathentry\" );\n\n                writer.addAttribute( \"kind\", \"src\" );\n\n                String eclipseSourceRoot = toRelative( projectBaseDir, sourceRoot );\n                \n                if (!projectBaseDir.equals(basedir))\n                {\n                    eclipseSourceRoot = eclipseSourceRoot.replaceAll( \"/\", \"-\" );\n                }\n                \n                addedSourceRoots.put( sourceRoot, eclipseSourceRoot );\n                \n                writer.addAttribute( \"path\", eclipseSourceRoot );\n\n                if ( output != null )\n                {\n                    writer.addAttribute( \"output\", toRelative( projectBaseDir, output ) );\n                }\n\n                writer.endElement();\n            }\n        }\n    }","commit_id":"9f4e106da7718ea16de897173c86eece6d9b0ef0","url":"https://github.com/apache/maven-plugins"},{"original_method":"private void addResources( XMLWriter writer, File projectBaseDir, File basedir, List resources, String output )\n    {\n        for ( Iterator it = resources.iterator(); it.hasNext(); )\n        {\n            Resource resource = (Resource) it.next();\n\n            if ( resource.getIncludes().size() != 0 )\n            {\n                log.warn( \"This plugin currently doesn't support include patterns for resources. Adding the entire directory.\" );\n            }\n\n            if ( resource.getExcludes().size() != 0 )\n            {\n                log.warn( \"This plugin currently doesn't support exclude patterns for resources. Adding the entire directory.\" );\n            }\n\n            if ( !StringUtils.isEmpty( resource.getTargetPath() ) )\n            {\n                log.error( \"This plugin currently doesn't support target paths for resources.\" );\n\n                return;\n            }\n\n            File resourceDirectory = new File( resource.getDirectory() );\n\n            if ( !resourceDirectory.exists() || !resourceDirectory.isDirectory() )\n            {\n                continue;\n            }\n\n            writer.startElement( \"classpathentry\" );\n\n            writer.addAttribute( \"kind\", \"src\" );\n\n            String resourceDir = resource.getDirectory();\n            resourceDir = toRelative( projectBaseDir, resourceDir );\n            if (!projectBaseDir.equals(basedir))\n            {\n                resourceDir = resourceDir.replaceAll( \"/\", \"-\" );\n            }\n            \n            writer.addAttribute( \"path\", resourceDir );\n\n            if ( output != null )\n            {\n                writer.addAttribute( \"output\", toRelative( projectBaseDir, output ) );\n            }\n\n            writer.endElement();\n        }\n    }","id":2626,"modified_method":"private void addResources( XMLWriter writer, File projectBaseDir, File basedir, List resources, String output, Map addedSourceRoots )\n    {\n        for ( Iterator it = resources.iterator(); it.hasNext(); )\n        {\n            Resource resource = (Resource) it.next();\n\n            if ( resource.getIncludes().size() != 0 )\n            {\n                log.warn( \"This plugin currently doesn't support include patterns for resources. Adding the entire directory.\" );\n            }\n\n            if ( resource.getExcludes().size() != 0 )\n            {\n                log.warn( \"This plugin currently doesn't support exclude patterns for resources. Adding the entire directory.\" );\n            }\n\n            if ( !StringUtils.isEmpty( resource.getTargetPath() ) )\n            {\n            \toutput = resource.getTargetPath();\n            }\n\n            File resourceDirectory = new File( resource.getDirectory() );\n\n            if ( !resourceDirectory.exists() || !resourceDirectory.isDirectory() )\n            {\n                continue;\n            }\n\n            String resourceDir = resource.getDirectory();\n            \n            // don't add the same sourceroot twice; eclipse can't handle\n            // that, even with mutual exclusive include/exclude patterns.\n            if ( addedSourceRoots.containsKey( resourceDir ) )\n            {\n            \tcontinue;\n            }\n\n            String eclipseResourceDir = toRelative( projectBaseDir, resourceDir );\n            \n            if ( ! projectBaseDir.equals( basedir ) )\n            {\n                eclipseResourceDir = eclipseResourceDir.replaceAll( \"/\", \"-\" );\n            }\n\n            addedSourceRoots.put( resourceDir, eclipseResourceDir );\n            \n            writer.startElement( \"classpathentry\" );\n\n            writer.addAttribute( \"kind\", \"src\" );\n            \n            writer.addAttribute( \"path\", eclipseResourceDir );\n\n//\t\t\tExample of setting include/exclude patterns for future reference.\n//\n//          TODO: figure out how to merge if the same dir is specified twice\n//          with different in/exclude patterns. We can't write them now,\n//\t\t\tsince only the the first one would be included.\n//\n//          if ( resource.getIncludes().size() != 0 )\n//          {\n//          \twriter.addAttribute(\n//            \t\t\"including\", StringUtils.join( resource.getIncludes().iterator(), \"|\" )\n//        \t\t);\n//          }\n//\n//          if ( resource.getExcludes().size() != 0 )\n//          {\n//          \twriter.addAttribute(\n//          \t\t\"excluding\", StringUtils.join( resource.getExcludes().iterator(), \"|\" )\n//          \t);\n//          }\n            \n            if ( output != null )\n            {\n                writer.addAttribute( \"output\", toRelative( projectBaseDir, output ) );\n            }\n\n            writer.endElement();\n        }\n    }","commit_id":"9f4e106da7718ea16de897173c86eece6d9b0ef0","url":"https://github.com/apache/maven-plugins"},{"original_method":"protected Collection writeEclipseClasspath( File projectBaseDir, File basedir, MavenProject project, MavenProject executedProject, List reactorProjects )\n        throws EclipsePluginException\n    {\n        FileWriter w;\n\n        try\n        {\n            w = new FileWriter( new File( basedir, \".classpath\" ) );\n        }\n        catch ( IOException ex )\n        {\n            throw new EclipsePluginException( \"Exception while opening file.\", ex );\n        }\n\n        XMLWriter writer = new PrettyPrintXMLWriter( w );\n\n        writer.startElement( \"classpath\" );\n\n        // ----------------------------------------------------------------------\n        // The source roots\n        // ----------------------------------------------------------------------\n\n        addSourceRoots( writer, projectBaseDir, basedir,\n                        executedProject.getCompileSourceRoots(),\n                        null );\n\n        addResources( writer, projectBaseDir, basedir,\n                      project.getBuild().getResources(),\n                      null );\n\n        // ----------------------------------------------------------------------\n        // The test sources and resources\n        // ----------------------------------------------------------------------\n\n        addSourceRoots( writer, projectBaseDir, basedir,\n                        executedProject.getTestCompileSourceRoots(),\n                        project.getBuild().getTestOutputDirectory() );\n\n        addResources( writer, projectBaseDir, basedir,\n                      project.getBuild().getTestResources(),\n                      project.getBuild().getTestOutputDirectory() );\n\n        // ----------------------------------------------------------------------\n        // The default output\n        // ----------------------------------------------------------------------\n\n        writer.startElement( \"classpathentry\" );\n\n        writer.addAttribute( \"kind\", \"output\" );\n\n        writer.addAttribute( \"path\", toRelative( projectBaseDir, project.getBuild().getOutputDirectory() ) );\n\n        writer.endElement();\n\n        // ----------------------------------------------------------------------\n        // The JRE reference\n        // ----------------------------------------------------------------------\n\n        writer.startElement( \"classpathentry\" );\n\n        writer.addAttribute( \"kind\", \"var\" );\n\n        writer.addAttribute( \"rootpath\", \"JRE_SRCROOT\" );\n\n        writer.addAttribute( \"path\", \"JRE_LIB\" );\n\n        writer.addAttribute( \"sourcepath\", \"JRE_SRC\" );\n\n        writer.endElement();\n\n        // ----------------------------------------------------------------------\n        // The dependencies\n        // ----------------------------------------------------------------------\n        \n        Collection referencedProjects = new HashSet();\n\n        Set artifacts = project.getArtifacts();\n\n        for ( Iterator it = artifacts.iterator(); it.hasNext(); )\n        {\n            Artifact artifact = (Artifact) it.next();\n\n            addDependency( writer, artifact, reactorProjects, referencedProjects );\n        }\n\n        writer.endElement();\n\n        close( w );\n        \n        return referencedProjects;\n    }","id":2627,"modified_method":"protected Collection writeEclipseClasspath( File projectBaseDir, File basedir, MavenProject project, MavenProject executedProject, List reactorProjects, Map eclipseSourceRoots )\n        throws EclipsePluginException\n    {\n        FileWriter w;\n\n        try\n        {\n            w = new FileWriter( new File( basedir, \".classpath\" ) );\n        }\n        catch ( IOException ex )\n        {\n            throw new EclipsePluginException( \"Exception while opening file.\", ex );\n        }\n\n        XMLWriter writer = new PrettyPrintXMLWriter( w );\n\n        writer.startElement( \"classpath\" );\n\n        // ----------------------------------------------------------------------\n        // The source roots\n        // ----------------------------------------------------------------------\n\n        addSourceRoots( writer, projectBaseDir, basedir,\n                        executedProject.getCompileSourceRoots(),\n                        null, eclipseSourceRoots );\n\n        addResources( writer, projectBaseDir, basedir,\n                      project.getBuild().getResources(),\n                      null, eclipseSourceRoots );\n\n        // ----------------------------------------------------------------------\n        // The test sources and resources\n        // ----------------------------------------------------------------------\n\n        addSourceRoots( writer, projectBaseDir, basedir,\n                        executedProject.getTestCompileSourceRoots(),\n                        project.getBuild().getTestOutputDirectory(),\n                        eclipseSourceRoots );\n\n        addResources( writer, projectBaseDir, basedir,\n                      project.getBuild().getTestResources(),\n                      project.getBuild().getTestOutputDirectory(),\n                      eclipseSourceRoots );\n\n        // ----------------------------------------------------------------------\n        // The default output\n        // ----------------------------------------------------------------------\n\n        writer.startElement( \"classpathentry\" );\n\n        writer.addAttribute( \"kind\", \"output\" );\n\n        writer.addAttribute( \"path\", toRelative( projectBaseDir, project.getBuild().getOutputDirectory() ) );\n\n        writer.endElement();\n\n        // ----------------------------------------------------------------------\n        // The JRE reference\n        // ----------------------------------------------------------------------\n\n        writer.startElement( \"classpathentry\" );\n\n        writer.addAttribute( \"kind\", \"var\" );\n\n        writer.addAttribute( \"rootpath\", \"JRE_SRCROOT\" );\n\n        writer.addAttribute( \"path\", \"JRE_LIB\" );\n\n        writer.addAttribute( \"sourcepath\", \"JRE_SRC\" );\n\n        writer.endElement();\n\n        // ----------------------------------------------------------------------\n        // The dependencies\n        // ----------------------------------------------------------------------\n        \n        Collection referencedProjects = new HashSet();\n\n        Set artifacts = project.getArtifacts();\n\n        for ( Iterator it = artifacts.iterator(); it.hasNext(); )\n        {\n            Artifact artifact = (Artifact) it.next();\n\n            addDependency( writer, artifact, reactorProjects, referencedProjects );\n        }\n\n        writer.endElement();\n\n        close( w );\n        \n        return referencedProjects;\n    }","commit_id":"9f4e106da7718ea16de897173c86eece6d9b0ef0","url":"https://github.com/apache/maven-plugins"},{"original_method":"private void addSourceLinks( XMLWriter writer, File projectBaseDir, File basedir, List sourceRoots )\n    {\n        for ( Iterator it = sourceRoots.iterator(); it.hasNext(); )\n        {\n            String sourceRoot = (String) it.next();\n\n            if ( new File( sourceRoot ).isDirectory() )\n            {\n                writer.startElement( \"link\" );\n\n                writer.startElement( \"name\" );\n\n                writer.writeText( toRelative( projectBaseDir, sourceRoot ).replaceAll( \"/\", \"-\" ) );\n                \n                writer.endElement(); // name\n\n                writer.startElement( \"type\" );\n\n                writer.writeText( \"2\" );\n\n                writer.endElement(); // type\n\n                writer.startElement( \"location\" );\n\n                writer.writeText( sourceRoot.replaceAll(\"\\\\\\\\\", \"/\") );\n\n                writer.endElement(); // location\n\n                writer.endElement(); // link\n            }\n        }\n    }","id":2628,"modified_method":"private void addSourceLinks( XMLWriter writer, File projectBaseDir, File basedir, Map sourceRoots )\n    {\n        for ( Iterator it = sourceRoots.keySet().iterator(); it.hasNext(); )\n        {\n            String sourceRoot = (String) it.next();\n            \n            String linkName = (String) sourceRoots.get( sourceRoot );\n            \n            sourceRoot = sourceRoot.replaceAll(\"\\\\\\\\\", \"/\");\n            \n            log.debug( \"Adding link '\" + linkName + \"' to '\" + sourceRoot + \"'\" );\n\n            if ( new File( sourceRoot ).isDirectory() )\n            {\n                writer.startElement( \"link\" );\n\n                writer.startElement( \"name\" );\n\n                writer.writeText( linkName );\n                \n                writer.endElement(); // name\n\n                writer.startElement( \"type\" );\n\n                writer.writeText( \"2\" );\n\n                writer.endElement(); // type\n\n                writer.startElement( \"location\" );\n\n                writer.writeText( sourceRoot );\n\n                writer.endElement(); // location\n\n                writer.endElement(); // link\n            }\n        }\n    }","commit_id":"9f4e106da7718ea16de897173c86eece6d9b0ef0","url":"https://github.com/apache/maven-plugins"},{"original_method":"public void execute()\n        throws MojoExecutionException\n    {\n        if ( project.getFile() == null || !project.getFile().exists() )\n        {\n            throw new MojoExecutionException( \"There must be a POM in the current working directory for the Eclipse plugin to work.\" );\n        }\n\n        if ( \"pom\".equals( project.getPackaging() ) )\n        {\n            getLog().info( \"Don't generate Eclipse project for pom project\" );\n\n            return;\n        }\n\n        if ( outputDir == null )\n        {\n            outputDir = project.getFile().getParentFile();\n        }\n        else\n        {\n            if ( !outputDir.isDirectory() )\n            {\n                throw new MojoExecutionException( \"Not a directory: '\" + outputDir + \"'\" );\n            }\n\n            outputDir = new File( outputDir, project.getArtifactId() );\n\n            if ( !outputDir.isDirectory() && !outputDir.mkdir() )\n            {\n                throw new MojoExecutionException( \"Can't create directory '\" + outputDir + \"'\" );\n            }\n        }\n\n        try\n        {\n            eclipseWriter.setLocalRepositoryFile( new File ( localRepository.getBasedir() ) );\n\n            eclipseWriter.setLog( getLog() );\n\n            if ( executedProject == null )\n            {\n                // backwards compat with alpha-2 only\n                executedProject = project;\n            }\n\n            eclipseWriter.write( outputDir, project, executedProject, reactorProjects );\n        }\n        catch ( EclipsePluginException e )\n        {\n            throw new MojoExecutionException( \"Error writing eclipse files.\", e );\n        }\n    }","id":2629,"modified_method":"public void execute()\n        throws MojoExecutionException\n    {\n        if ( project.getFile() == null || !project.getFile().exists() )\n        {\n            throw new MojoExecutionException( \"There must be a POM in the current working directory for the Eclipse plugin to work.\" );\n        }\n\n        if ( \"pom\".equals( project.getPackaging() ) )\n        {\n            getLog().info( \"Don't generate Eclipse project for pom project\" );\n\n            return;\n        }\n\n        if ( outputDir == null )\n        {\n            outputDir = project.getFile().getParentFile();\n        }\n        else if ( !outputDir.equals( project.getFile().getParentFile() ) )\n        {\n            if ( !outputDir.isDirectory() )\n            {\n                throw new MojoExecutionException( \"Not a directory: '\" + outputDir + \"'\" );\n            }\n\n            outputDir = new File( outputDir, project.getArtifactId() );\n\n            if ( !outputDir.isDirectory() && !outputDir.mkdir() )\n            {\n                throw new MojoExecutionException( \"Can't create directory '\" + outputDir + \"'\" );\n            }\n        }\n\n        try\n        {\n            eclipseWriter.setLocalRepositoryFile( new File ( localRepository.getBasedir() ) );\n\n            eclipseWriter.setLog( getLog() );\n\n            if ( executedProject == null )\n            {\n                // backwards compat with alpha-2 only\n                executedProject = project;\n            }\n\n            eclipseWriter.write( outputDir, project, executedProject, reactorProjects );\n        }\n        catch ( EclipsePluginException e )\n        {\n            throw new MojoExecutionException( \"Error writing eclipse files.\", e );\n        }\n    }","commit_id":"a98961eeedc4cd03fc02694b9502939edbfe43b2","url":"https://github.com/apache/maven"},{"original_method":"private void testProject( String projectName )\n        throws Exception\n    {\n        File basedir = getTestFile( \"src/test/projects/\" + projectName );\n\n        MavenProjectBuilder builder = (MavenProjectBuilder) lookup( MavenProjectBuilder.ROLE );\n\n        EclipsePlugin plugin = new EclipsePlugin();\n\n        File repo = getTestFile( \"src/test/repository\" );\n\n        ArtifactRepositoryLayout localRepositoryLayout = (ArtifactRepositoryLayout) lookup( ArtifactRepositoryLayout.ROLE, \"legacy\" );\n\n        ArtifactRepository localRepository = new DefaultArtifactRepository( \"local\", \"file://\" + repo.getAbsolutePath(),\n                                                                            localRepositoryLayout );\n\n        MavenProject project = builder.buildWithDependencies( new File( basedir, \"project.xml\" ), localRepository, null );\n\n        for ( Iterator it = project.getArtifacts().iterator(); it.hasNext(); )\n        {\n            Artifact artifact = (Artifact) it.next();\n            artifact.setFile(new File(localRepository.getBasedir(), localRepository.pathOf(artifact)));\n        }\n\n        plugin.setProject( project );\n\n        plugin.setLocalRepository( localRepository );\n\n        plugin.execute();\n\n        assertFileEquals( localRepository.getBasedir(), new File( basedir, \"project\" ), new File( basedir, \".project\" ) );\n\n        assertFileEquals( localRepository.getBasedir(), new File( basedir, \"classpath\" ), new File( basedir, \".classpath\" ) );\n    }","id":2630,"modified_method":"private void testProject( String projectName, File outputDir )\n        throws Exception\n    {\n        File basedir = getTestFile( \"src/test/projects/\" + projectName );\n\n        MavenProjectBuilder builder = (MavenProjectBuilder) lookup( MavenProjectBuilder.ROLE );\n\n        EclipsePlugin plugin = new EclipsePlugin();\n\n        File repo = getTestFile( \"src/test/repository\" );\n\n        ArtifactRepositoryLayout localRepositoryLayout = (ArtifactRepositoryLayout) lookup( ArtifactRepositoryLayout.ROLE, \"legacy\" );\n\n        ArtifactRepository localRepository = new DefaultArtifactRepository( \"local\", \"file://\" + repo.getAbsolutePath(),\n                                                                            localRepositoryLayout );\n\n        MavenProject project = builder.buildWithDependencies( new File( basedir, \"project.xml\" ), localRepository, null );\n\n        File projectOutputDir = basedir;\n\n        if ( outputDir == null )\n        {\n            outputDir = basedir;\n        }\n        else\n        {\n            outputDir.mkdirs();\n\n            projectOutputDir = new File( outputDir, project.getArtifactId() );\n        }\n\n        System.err.println(\"basedir: \" + basedir+\"\\noutputdir: \" + outputDir+\"\\nprojectOutputDir: \" + projectOutputDir );\n\n        plugin.setOutputDir( outputDir );\n\n\n        for ( Iterator it = project.getArtifacts().iterator(); it.hasNext(); )\n        {\n            Artifact artifact = (Artifact) it.next();\n            artifact.setFile(new File(localRepository.getBasedir(), localRepository.pathOf(artifact)));\n        }\n\n        plugin.setProject( project );\n\n        plugin.setLocalRepository( localRepository );\n\n        plugin.execute();\n\n        assertFileEquals( localRepository.getBasedir(), new File( basedir, \"project\" ), new File( projectOutputDir, \".project\" ) );\n\n        assertFileEquals( localRepository.getBasedir(), new File( basedir, \"classpath\" ), new File( projectOutputDir, \".classpath\" ) );\n    }","commit_id":"a98961eeedc4cd03fc02694b9502939edbfe43b2","url":"https://github.com/apache/maven"},{"original_method":"public void testProject2()\n        throws Exception\n    {\n        testProject( \"project-2\" );\n    }","id":2631,"modified_method":"public void testProject2()\n        throws Exception\n    {\n        testProject( \"project-2\", null );\n    }","commit_id":"a98961eeedc4cd03fc02694b9502939edbfe43b2","url":"https://github.com/apache/maven"},{"original_method":"private void assertFileEquals( String mavenRepo, File expectedFile, File actualFile )\n        throws IOException\n    {\n        List expectedLines = getLines( mavenRepo, expectedFile );\n\n        List actualLines = getLines( mavenRepo, actualFile );\n\n        for ( int i = 0; i < expectedLines.size(); i++ )\n        {\n            String expected = expectedLines.get( i ).toString();\n\n            if ( actualLines.size() < i )\n            {\n                fail( \"Too few lines in the actual file. Was \" + actualLines.size() + \", expected: \" + expectedLines.size() );\n            }\n\n            String actual = actualLines.get( i ).toString();\n\n            assertEquals( \"Checking line #\" + (i + 1), expected, actual );\n        }\n\n        assertTrue( \"Unequal number of lines.\", expectedLines.size() == actualLines.size() );\n    }","id":2632,"modified_method":"private void assertFileEquals( String mavenRepo, File expectedFile, File actualFile )\n        throws IOException\n    {\n        List expectedLines = getLines( mavenRepo, expectedFile );\n\n        List actualLines = getLines( mavenRepo, actualFile );\n\n        for ( int i = 0; i < expectedLines.size(); i++ )\n        {\n            String expected = expectedLines.get( i ).toString();\n\n            // replace some vars in the expected line, to account\n            // for absolute paths that are different on each installation.\n\n            expected = StringUtils.replace( expected, \"${basedir}\", basedir );\n\n            if ( actualLines.size() < i )\n            {\n                fail( \"Too few lines in the actual file. Was \" + actualLines.size() + \", expected: \" + expectedLines.size() );\n            }\n\n            String actual = actualLines.get( i ).toString();\n\n            assertEquals( \"Checking line #\" + (i + 1), expected, actual );\n        }\n\n        assertTrue( \"Unequal number of lines.\", expectedLines.size() == actualLines.size() );\n    }","commit_id":"a98961eeedc4cd03fc02694b9502939edbfe43b2","url":"https://github.com/apache/maven"},{"original_method":"public void testProject1()\n        throws Exception\n    {\n        testProject( \"project-1\" );\n    }","id":2633,"modified_method":"public void testProject1()\n        throws Exception\n    {\n        testProject( \"project-1\", null );\n    }","commit_id":"a98961eeedc4cd03fc02694b9502939edbfe43b2","url":"https://github.com/apache/maven"},{"original_method":"private void addSourceLinks( XMLWriter writer, File projectBaseDir, File basedir, List sourceRoots )\n    {\n        for ( Iterator it = sourceRoots.iterator(); it.hasNext(); )\n        {\n            String sourceRoot = (String) it.next();\n\n            if ( new File( sourceRoot ).isDirectory() )\n            {\n                writer.startElement( \"link\" );\n\n                writer.startElement( \"name\" );\n\n                writer.writeText( toRelative( projectBaseDir, sourceRoot ).replaceAll( \"/\", \"-\" ) );\n                \n                writer.endElement(); // name\n\n                writer.startElement( \"type\" );\n\n                writer.writeText( \"2\" );\n\n                writer.endElement(); // type\n\n                writer.startElement( \"location\" );\n\n                writer.writeText( sourceRoot.replaceAll(\"\\\\\\\\\", \"/\") );\n\n                writer.endElement(); // location\n\n                writer.endElement(); // link\n            }\n        }\n    }","id":2634,"modified_method":"private void addSourceLinks( XMLWriter writer, File projectBaseDir, File basedir, Map sourceRoots )\n    {\n        for ( Iterator it = sourceRoots.keySet().iterator(); it.hasNext(); )\n        {\n            String sourceRoot = (String) it.next();\n            \n            String linkName = (String) sourceRoots.get( sourceRoot );\n            \n            sourceRoot = sourceRoot.replaceAll(\"\\\\\\\\\", \"/\");\n            \n            log.debug( \"Adding link '\" + linkName + \"' to '\" + sourceRoot + \"'\" );\n\n            if ( new File( sourceRoot ).isDirectory() )\n            {\n                writer.startElement( \"link\" );\n\n                writer.startElement( \"name\" );\n\n                writer.writeText( linkName );\n                \n                writer.endElement(); // name\n\n                writer.startElement( \"type\" );\n\n                writer.writeText( \"2\" );\n\n                writer.endElement(); // type\n\n                writer.startElement( \"location\" );\n\n                writer.writeText( sourceRoot );\n\n                writer.endElement(); // location\n\n                writer.endElement(); // link\n            }\n        }\n    }","commit_id":"a98961eeedc4cd03fc02694b9502939edbfe43b2","url":"https://github.com/apache/maven"},{"original_method":"public void write( File outputDir, MavenProject project, MavenProject executedProject, List reactorProjects )\n        throws EclipsePluginException\n    {\n        assertNotEmpty( project.getGroupId(), \"groupId\" );\n\n        assertNotEmpty( project.getArtifactId(), \"artifactId\" );\n\n        File projectBaseDir = project.getFile().getParentFile();\n\n        Collection referencedProjects = writeEclipseClasspath( projectBaseDir, outputDir, project, executedProject, reactorProjects );\n        \n        writeEclipseProject( projectBaseDir, outputDir, project, executedProject, referencedProjects );\n\n        writeEclipseSettings( projectBaseDir, outputDir, project, executedProject );\n\n        log.info( \"Wrote Eclipse project for \" + project.getArtifactId() + \" to \" + outputDir.getAbsolutePath() );\n    }","id":2635,"modified_method":"public void write( File outputDir, MavenProject project, MavenProject executedProject, List reactorProjects )\n        throws EclipsePluginException\n    {\n        assertNotEmpty( project.getGroupId(), \"groupId\" );\n\n        assertNotEmpty( project.getArtifactId(), \"artifactId\" );\n\n        File projectBaseDir = project.getFile().getParentFile();\n        \n        Map eclipseSourceRoots = new HashMap();\n\n        Collection referencedProjects = writeEclipseClasspath(\n        \tprojectBaseDir, outputDir, project, executedProject, reactorProjects, eclipseSourceRoots\n        );\n        \n        writeEclipseProject( projectBaseDir, outputDir, project, executedProject, referencedProjects, eclipseSourceRoots );\n\n        writeEclipseSettings( projectBaseDir, outputDir, project, executedProject);\n\n        log.info( \"Wrote Eclipse project for \" + project.getArtifactId() + \" to \" + outputDir.getAbsolutePath() );\n    }","commit_id":"a98961eeedc4cd03fc02694b9502939edbfe43b2","url":"https://github.com/apache/maven"},{"original_method":"private void addResources( XMLWriter writer, File projectBaseDir, File basedir, List resources, String output )\n    {\n        for ( Iterator it = resources.iterator(); it.hasNext(); )\n        {\n            Resource resource = (Resource) it.next();\n\n            if ( resource.getIncludes().size() != 0 )\n            {\n                log.warn( \"This plugin currently doesn't support include patterns for resources. Adding the entire directory.\" );\n            }\n\n            if ( resource.getExcludes().size() != 0 )\n            {\n                log.warn( \"This plugin currently doesn't support exclude patterns for resources. Adding the entire directory.\" );\n            }\n\n            if ( !StringUtils.isEmpty( resource.getTargetPath() ) )\n            {\n                log.error( \"This plugin currently doesn't support target paths for resources.\" );\n\n                return;\n            }\n\n            File resourceDirectory = new File( resource.getDirectory() );\n\n            if ( !resourceDirectory.exists() || !resourceDirectory.isDirectory() )\n            {\n                continue;\n            }\n\n            writer.startElement( \"classpathentry\" );\n\n            writer.addAttribute( \"kind\", \"src\" );\n\n            String resourceDir = resource.getDirectory();\n            resourceDir = toRelative( projectBaseDir, resourceDir );\n            if (!projectBaseDir.equals(basedir))\n            {\n                resourceDir = resourceDir.replaceAll( \"/\", \"-\" );\n            }\n            \n            writer.addAttribute( \"path\", resourceDir );\n\n            if ( output != null )\n            {\n                writer.addAttribute( \"output\", toRelative( projectBaseDir, output ) );\n            }\n\n            writer.endElement();\n        }\n    }","id":2636,"modified_method":"private void addResources( XMLWriter writer, File projectBaseDir, File basedir, List resources, String output, Map addedSourceRoots )\n    {\n        for ( Iterator it = resources.iterator(); it.hasNext(); )\n        {\n            Resource resource = (Resource) it.next();\n\n            if ( resource.getIncludes().size() != 0 )\n            {\n                log.warn( \"This plugin currently doesn't support include patterns for resources. Adding the entire directory.\" );\n            }\n\n            if ( resource.getExcludes().size() != 0 )\n            {\n                log.warn( \"This plugin currently doesn't support exclude patterns for resources. Adding the entire directory.\" );\n            }\n\n            if ( !StringUtils.isEmpty( resource.getTargetPath() ) )\n            {\n            \toutput = resource.getTargetPath();\n            }\n\n            File resourceDirectory = new File( resource.getDirectory() );\n\n            if ( !resourceDirectory.exists() || !resourceDirectory.isDirectory() )\n            {\n                continue;\n            }\n\n            String resourceDir = resource.getDirectory();\n            \n            // don't add the same sourceroot twice; eclipse can't handle\n            // that, even with mutual exclusive include/exclude patterns.\n            if ( addedSourceRoots.containsKey( resourceDir ) )\n            {\n            \tcontinue;\n            }\n\n            String eclipseResourceDir = toRelative( projectBaseDir, resourceDir );\n            \n            if ( ! projectBaseDir.equals( basedir ) )\n            {\n                eclipseResourceDir = eclipseResourceDir.replaceAll( \"/\", \"-\" );\n            }\n\n            addedSourceRoots.put( resourceDir, eclipseResourceDir );\n            \n            writer.startElement( \"classpathentry\" );\n\n            writer.addAttribute( \"kind\", \"src\" );\n            \n            writer.addAttribute( \"path\", eclipseResourceDir );\n\n//\t\t\tExample of setting include/exclude patterns for future reference.\n//\n//          TODO: figure out how to merge if the same dir is specified twice\n//          with different in/exclude patterns. We can't write them now,\n//\t\t\tsince only the the first one would be included.\n//\n//          if ( resource.getIncludes().size() != 0 )\n//          {\n//          \twriter.addAttribute(\n//            \t\t\"including\", StringUtils.join( resource.getIncludes().iterator(), \"|\" )\n//        \t\t);\n//          }\n//\n//          if ( resource.getExcludes().size() != 0 )\n//          {\n//          \twriter.addAttribute(\n//          \t\t\"excluding\", StringUtils.join( resource.getExcludes().iterator(), \"|\" )\n//          \t);\n//          }\n            \n            if ( output != null )\n            {\n                writer.addAttribute( \"output\", toRelative( projectBaseDir, output ) );\n            }\n\n            writer.endElement();\n        }\n    }","commit_id":"a98961eeedc4cd03fc02694b9502939edbfe43b2","url":"https://github.com/apache/maven"},{"original_method":"protected void writeEclipseProject( File projectBaseDir, File basedir, MavenProject project, MavenProject executedProject, Collection referencedProjects )\n        throws EclipsePluginException\n    {\n        FileWriter w;\n\n        try\n        {\n            w = new FileWriter( new File( basedir, \".project\" ) );\n        }\n        catch ( IOException ex )\n        {\n            throw new EclipsePluginException( \"Exception while opening file.\", ex );\n        }\n\n        XMLWriter writer = new PrettyPrintXMLWriter( w );\n\n        writer.startElement( \"projectDescription\" );\n\n        writer.startElement( \"name\" );\n\n        if ( project.getArtifactId() == null )\n        {\n            throw new EclipsePluginException( \"Missing element from the POM: artifactId.\" );\n        }\n\n        writer.writeText( project.getArtifactId() );\n\n        writer.endElement();\n\n        // TODO: this entire element might be dropped if the comment is null.\n        // but as the maven1 eclipse plugin does it, it's better to be safe than sorry\n        // A eclipse developer might want to look at this.\n        writer.startElement( \"comment\" );\n\n        if ( project.getDescription() != null )\n        {\n            writer.writeText( project.getDescription() );\n        }\n\n        writer.endElement();\n\n        writer.startElement( \"projects\" );\n\n        for ( Iterator it = referencedProjects.iterator(); it.hasNext(); )\n        {\n            writer.startElement( \"project\" );\n            \n            writer.writeText( ( (MavenProject) it.next() ).getArtifactId() );\n            \n            writer.endElement();\n        }\n        \n        writer.endElement(); // projects\n\n        writer.startElement( \"buildSpec\" );\n\n        writer.startElement( \"buildCommand\" );\n\n        writer.startElement( \"name\" );\n\n        writer.writeText( \"org.eclipse.jdt.core.javabuilder\" );\n\n        writer.endElement(); // name\n\n        writer.startElement( \"arguments\" );\n\n        writer.endElement(); // arguments\n\n        writer.endElement(); // buildCommand\n\n        writer.endElement(); // buildSpec\n\n        writer.startElement( \"natures\" );\n\n        writer.startElement( \"nature\" );\n\n        writer.writeText( \"org.eclipse.jdt.core.javanature\" );\n\n        writer.endElement(); // nature\n\n        writer.endElement(); // natures\n\n\n        if ( ! projectBaseDir.equals( basedir ) )\n        {\n            writer.startElement( \"linkedResources\" );\n\n            addFileLink( writer, projectBaseDir, basedir, project.getFile() );\n\n            addSourceLinks( writer, projectBaseDir, basedir, executedProject.getCompileSourceRoots() );\n\n            addResourceLinks( writer, projectBaseDir, basedir, executedProject.getBuild().getResources() );\n\n            addSourceLinks( writer, projectBaseDir, basedir, executedProject.getTestCompileSourceRoots() );\n\n            addResourceLinks( writer, projectBaseDir, basedir, executedProject.getBuild().getTestResources() );\n\n            writer.endElement(); // linkedResources\n        }\n\n        writer.endElement(); // projectDescription\n\n        close( w );\n    }","id":2637,"modified_method":"protected void writeEclipseProject( File projectBaseDir, File basedir, MavenProject project, MavenProject executedProject, Collection referencedProjects, Map eclipseSourceRoots )\n        throws EclipsePluginException\n    {\n        FileWriter w;\n\n        try\n        {\n            w = new FileWriter( new File( basedir, \".project\" ) );\n        }\n        catch ( IOException ex )\n        {\n            throw new EclipsePluginException( \"Exception while opening file.\", ex );\n        }\n\n        XMLWriter writer = new PrettyPrintXMLWriter( w );\n\n        writer.startElement( \"projectDescription\" );\n\n        writer.startElement( \"name\" );\n\n        if ( project.getArtifactId() == null )\n        {\n            throw new EclipsePluginException( \"Missing element from the POM: artifactId.\" );\n        }\n\n        writer.writeText( project.getArtifactId() );\n\n        writer.endElement();\n\n        // TODO: this entire element might be dropped if the comment is null.\n        // but as the maven1 eclipse plugin does it, it's better to be safe than sorry\n        // A eclipse developer might want to look at this.\n        writer.startElement( \"comment\" );\n\n        if ( project.getDescription() != null )\n        {\n            writer.writeText( project.getDescription() );\n        }\n\n        writer.endElement();\n\n        writer.startElement( \"projects\" );\n\n        for ( Iterator it = referencedProjects.iterator(); it.hasNext(); )\n        {\n            writer.startElement( \"project\" );\n            \n            writer.writeText( ( (MavenProject) it.next() ).getArtifactId() );\n            \n            writer.endElement();\n        }\n        \n        writer.endElement(); // projects\n\n        writer.startElement( \"buildSpec\" );\n\n        writer.startElement( \"buildCommand\" );\n\n        writer.startElement( \"name\" );\n\n        writer.writeText( \"org.eclipse.jdt.core.javabuilder\" );\n\n        writer.endElement(); // name\n\n        writer.startElement( \"arguments\" );\n\n        writer.endElement(); // arguments\n\n        writer.endElement(); // buildCommand\n\n        writer.endElement(); // buildSpec\n\n        writer.startElement( \"natures\" );\n\n        writer.startElement( \"nature\" );\n\n        writer.writeText( \"org.eclipse.jdt.core.javanature\" );\n\n        writer.endElement(); // nature\n\n        writer.endElement(); // natures\n\n\n        if ( ! projectBaseDir.equals( basedir ) )\n        {\n            writer.startElement( \"linkedResources\" );\n\n            addFileLink( writer, projectBaseDir, basedir, project.getFile() );\n            \n            addSourceLinks( writer, projectBaseDir, basedir, eclipseSourceRoots );\n\n            writer.endElement(); // linkedResources\n        }\n\n        writer.endElement(); // projectDescription\n\n        close( w );\n    }","commit_id":"a98961eeedc4cd03fc02694b9502939edbfe43b2","url":"https://github.com/apache/maven"},{"original_method":"protected Collection writeEclipseClasspath( File projectBaseDir, File basedir, MavenProject project, MavenProject executedProject, List reactorProjects )\n        throws EclipsePluginException\n    {\n        FileWriter w;\n\n        try\n        {\n            w = new FileWriter( new File( basedir, \".classpath\" ) );\n        }\n        catch ( IOException ex )\n        {\n            throw new EclipsePluginException( \"Exception while opening file.\", ex );\n        }\n\n        XMLWriter writer = new PrettyPrintXMLWriter( w );\n\n        writer.startElement( \"classpath\" );\n\n        // ----------------------------------------------------------------------\n        // The source roots\n        // ----------------------------------------------------------------------\n\n        addSourceRoots( writer, projectBaseDir, basedir,\n                        executedProject.getCompileSourceRoots(),\n                        null );\n\n        addResources( writer, projectBaseDir, basedir,\n                      project.getBuild().getResources(),\n                      null );\n\n        // ----------------------------------------------------------------------\n        // The test sources and resources\n        // ----------------------------------------------------------------------\n\n        addSourceRoots( writer, projectBaseDir, basedir,\n                        executedProject.getTestCompileSourceRoots(),\n                        project.getBuild().getTestOutputDirectory() );\n\n        addResources( writer, projectBaseDir, basedir,\n                      project.getBuild().getTestResources(),\n                      project.getBuild().getTestOutputDirectory() );\n\n        // ----------------------------------------------------------------------\n        // The default output\n        // ----------------------------------------------------------------------\n\n        writer.startElement( \"classpathentry\" );\n\n        writer.addAttribute( \"kind\", \"output\" );\n\n        writer.addAttribute( \"path\", toRelative( projectBaseDir, project.getBuild().getOutputDirectory() ) );\n\n        writer.endElement();\n\n        // ----------------------------------------------------------------------\n        // The JRE reference\n        // ----------------------------------------------------------------------\n\n        writer.startElement( \"classpathentry\" );\n\n        writer.addAttribute( \"kind\", \"var\" );\n\n        writer.addAttribute( \"rootpath\", \"JRE_SRCROOT\" );\n\n        writer.addAttribute( \"path\", \"JRE_LIB\" );\n\n        writer.addAttribute( \"sourcepath\", \"JRE_SRC\" );\n\n        writer.endElement();\n\n        // ----------------------------------------------------------------------\n        // The dependencies\n        // ----------------------------------------------------------------------\n        \n        Collection referencedProjects = new HashSet();\n\n        Set artifacts = project.getArtifacts();\n\n        for ( Iterator it = artifacts.iterator(); it.hasNext(); )\n        {\n            Artifact artifact = (Artifact) it.next();\n\n            addDependency( writer, artifact, reactorProjects, referencedProjects );\n        }\n\n        writer.endElement();\n\n        close( w );\n        \n        return referencedProjects;\n    }","id":2638,"modified_method":"protected Collection writeEclipseClasspath( File projectBaseDir, File basedir, MavenProject project, MavenProject executedProject, List reactorProjects, Map eclipseSourceRoots )\n        throws EclipsePluginException\n    {\n        FileWriter w;\n\n        try\n        {\n            w = new FileWriter( new File( basedir, \".classpath\" ) );\n        }\n        catch ( IOException ex )\n        {\n            throw new EclipsePluginException( \"Exception while opening file.\", ex );\n        }\n\n        XMLWriter writer = new PrettyPrintXMLWriter( w );\n\n        writer.startElement( \"classpath\" );\n\n        // ----------------------------------------------------------------------\n        // The source roots\n        // ----------------------------------------------------------------------\n\n        addSourceRoots( writer, projectBaseDir, basedir,\n                        executedProject.getCompileSourceRoots(),\n                        null, eclipseSourceRoots );\n\n        addResources( writer, projectBaseDir, basedir,\n                      project.getBuild().getResources(),\n                      null, eclipseSourceRoots );\n\n        // ----------------------------------------------------------------------\n        // The test sources and resources\n        // ----------------------------------------------------------------------\n\n        addSourceRoots( writer, projectBaseDir, basedir,\n                        executedProject.getTestCompileSourceRoots(),\n                        project.getBuild().getTestOutputDirectory(),\n                        eclipseSourceRoots );\n\n        addResources( writer, projectBaseDir, basedir,\n                      project.getBuild().getTestResources(),\n                      project.getBuild().getTestOutputDirectory(),\n                      eclipseSourceRoots );\n\n        // ----------------------------------------------------------------------\n        // The default output\n        // ----------------------------------------------------------------------\n\n        writer.startElement( \"classpathentry\" );\n\n        writer.addAttribute( \"kind\", \"output\" );\n\n        writer.addAttribute( \"path\", toRelative( projectBaseDir, project.getBuild().getOutputDirectory() ) );\n\n        writer.endElement();\n\n        // ----------------------------------------------------------------------\n        // The JRE reference\n        // ----------------------------------------------------------------------\n\n        writer.startElement( \"classpathentry\" );\n\n        writer.addAttribute( \"kind\", \"var\" );\n\n        writer.addAttribute( \"rootpath\", \"JRE_SRCROOT\" );\n\n        writer.addAttribute( \"path\", \"JRE_LIB\" );\n\n        writer.addAttribute( \"sourcepath\", \"JRE_SRC\" );\n\n        writer.endElement();\n\n        // ----------------------------------------------------------------------\n        // The dependencies\n        // ----------------------------------------------------------------------\n        \n        Collection referencedProjects = new HashSet();\n\n        Set artifacts = project.getArtifacts();\n\n        for ( Iterator it = artifacts.iterator(); it.hasNext(); )\n        {\n            Artifact artifact = (Artifact) it.next();\n\n            addDependency( writer, artifact, reactorProjects, referencedProjects );\n        }\n\n        writer.endElement();\n\n        close( w );\n        \n        return referencedProjects;\n    }","commit_id":"a98961eeedc4cd03fc02694b9502939edbfe43b2","url":"https://github.com/apache/maven"},{"original_method":"private void addSourceRoots( XMLWriter writer, File projectBaseDir, File basedir, List sourceRoots, String output )\n    {\n        for ( Iterator it = sourceRoots.iterator(); it.hasNext(); )\n        {\n            String sourceRoot = (String) it.next();\n\n            if ( new File( sourceRoot ).isDirectory() )\n            {\n                writer.startElement( \"classpathentry\" );\n\n                writer.addAttribute( \"kind\", \"src\" );\n\n                sourceRoot = toRelative( projectBaseDir, sourceRoot );\n                if (!projectBaseDir.equals(basedir))\n                {\n                    sourceRoot = sourceRoot.replaceAll( \"/\", \"-\" );\n                }\n                \n                writer.addAttribute( \"path\", sourceRoot );\n\n                if ( output != null )\n                {\n                    writer.addAttribute( \"output\", toRelative( projectBaseDir, output ) );\n                }\n\n                writer.endElement();\n            }\n        }\n    }","id":2639,"modified_method":"private void addSourceRoots( XMLWriter writer, File projectBaseDir, File basedir, List sourceRoots, String output, Map addedSourceRoots )\n    {\n        for ( Iterator it = sourceRoots.iterator(); it.hasNext(); )\n        {\n            String sourceRoot = (String) it.next();\n\n            if ( new File( sourceRoot ).isDirectory() )\n            {\n                // Don't add the same sourceroots twice. No include/exclude\n            \t// patterns possible in maven for (test|script|)source directories.\n                if ( addedSourceRoots.containsKey( sourceRoot ) )\n                {\n                \tcontinue; \n                }\n\n                writer.startElement( \"classpathentry\" );\n\n                writer.addAttribute( \"kind\", \"src\" );\n\n                String eclipseSourceRoot = toRelative( projectBaseDir, sourceRoot );\n                \n                if (!projectBaseDir.equals(basedir))\n                {\n                    eclipseSourceRoot = eclipseSourceRoot.replaceAll( \"/\", \"-\" );\n                }\n                \n                addedSourceRoots.put( sourceRoot, eclipseSourceRoot );\n                \n                writer.addAttribute( \"path\", eclipseSourceRoot );\n\n                if ( output != null )\n                {\n                    writer.addAttribute( \"output\", toRelative( projectBaseDir, output ) );\n                }\n\n                writer.endElement();\n            }\n        }\n    }","commit_id":"a98961eeedc4cd03fc02694b9502939edbfe43b2","url":"https://github.com/apache/maven"},{"original_method":"public MultiMapTransactionLog(Data key, CollectionProxyId proxyId, long ttl, int threadId, long version, Operation op) {\n        this.key = key;\n        this.proxyId = proxyId;\n        this.ttl = ttl;\n        this.threadId = threadId;\n        this.txVersion = version;\n        opList.add(op);\n    }","id":2640,"modified_method":"public MultiMapTransactionLog(Data key, CollectionProxyId proxyId, long ttl, int threadId, long version) {\n        this.key = key;\n        this.proxyId = proxyId;\n        this.ttl = ttl;\n        this.threadId = threadId;\n        this.txVersion = version;\n    }","commit_id":"f1e3931bd70fe430150bf4d17a31764bab6d0cd3","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"protected boolean removeInternal(Data key, Data value) {\n        throwExceptionIfNull(key);\n        throwExceptionIfNull(value);\n        Collection<CollectionRecord> coll = txMap.get(key);\n        long timeout = tx.getTimeoutMillis();\n        long ttl = timeout*3/2;\n        if (coll == null){\n            CollectionResponse response = lockAndGet(key, timeout, ttl);\n            if (response == null){\n                throw new ConcurrentModificationException(\"Transaction couldn't obtain lock \" + getThreadId());\n            }\n            version = response.getTxVersion();\n            coll =  createCollection(response.getRecordCollection(getNodeEngine()));\n            txMap.put(key, coll);\n        }\n        CollectionRecord record = new CollectionRecord(config.isBinary() ? value : getNodeEngine().toObject(value));\n        Iterator<CollectionRecord> iterator = coll.iterator();\n        long recordId = -1;\n        while (iterator.hasNext()){\n            CollectionRecord r = iterator.next();\n            if (r.equals(record)){\n                iterator.remove();\n                recordId = r.getRecordId();\n                break;\n            }\n        }\n        if (version != -1 || recordId != -1){\n            TxnRemoveOperation operation = new TxnRemoveOperation(proxyId, key, recordId, value);\n            MultiMapTransactionLog log = (MultiMapTransactionLog)tx.getTransactionLog(getTxLogKey(key));\n            if (log != null){\n                log.addOperation(operation);\n            }\n            else {\n                log = new MultiMapTransactionLog(key, proxyId, ttl, getThreadId(), version, operation);\n                tx.addTransactionLog(log);\n            }\n            return recordId != -1;\n        }\n        return false;\n    }","id":2641,"modified_method":"protected boolean removeInternal(Data key, Data value) {\n        throwExceptionIfNull(key);\n        throwExceptionIfNull(value);\n        Collection<CollectionRecord> coll = txMap.get(key);\n        long timeout = tx.getTimeoutMillis();\n        long ttl = timeout*3/2;\n        final MultiMapTransactionLog log;\n        if (coll == null){\n            CollectionResponse response = lockAndGet(key, timeout, ttl);\n            if (response == null){\n                throw new ConcurrentModificationException(\"Transaction couldn't obtain lock \" + getThreadId());\n            }\n            log = new MultiMapTransactionLog(key, proxyId, ttl, getThreadId(), version);\n            tx.addTransactionLog(log);\n            version = response.getTxVersion();\n            coll =  createCollection(response.getRecordCollection(getNodeEngine()));\n            txMap.put(key, coll);\n        } else {\n            log = (MultiMapTransactionLog)tx.getTransactionLog(getTxLogKey(key));\n        }\n        CollectionRecord record = new CollectionRecord(config.isBinary() ? value : getNodeEngine().toObject(value));\n        Iterator<CollectionRecord> iterator = coll.iterator();\n        long recordId = -1;\n        while (iterator.hasNext()){\n            CollectionRecord r = iterator.next();\n            if (r.equals(record)){\n                iterator.remove();\n                recordId = r.getRecordId();\n                break;\n            }\n        }\n        if (version != -1 || recordId != -1){\n            TxnRemoveOperation operation = new TxnRemoveOperation(proxyId, key, recordId, value);\n            log.addOperation(operation);\n            return recordId != -1;\n        }\n        return false;\n    }","commit_id":"f1e3931bd70fe430150bf4d17a31764bab6d0cd3","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"protected Collection<CollectionRecord> removeAllInternal(Data key){\n        throwExceptionIfNull(key);\n        long timeout = tx.getTimeoutMillis();\n        long ttl = timeout*3/2;\n        Collection<CollectionRecord> coll = txMap.get(key);\n        if (coll == null){\n            CollectionResponse response = lockAndGet(key, timeout, ttl);\n            if (response == null){\n                throw new ConcurrentModificationException(\"Transaction couldn't obtain lock \" + getThreadId());\n            }\n            version = response.getTxVersion();\n            coll =  createCollection(response.getRecordCollection(getNodeEngine()));\n        }\n        txMap.put(key, createCollection());\n        TxnRemoveAllOperation operation = new TxnRemoveAllOperation(proxyId, key, coll);\n\n        MultiMapTransactionLog log = (MultiMapTransactionLog)tx.getTransactionLog(getTxLogKey(key));\n        if (log != null){\n            log.addOperation(operation);\n        }\n        else {\n            log = new MultiMapTransactionLog(key, proxyId, ttl, getThreadId(), version, operation);\n            tx.addTransactionLog(log);\n        }\n        return coll;\n    }","id":2642,"modified_method":"protected Collection<CollectionRecord> removeAllInternal(Data key){\n        throwExceptionIfNull(key);\n        long timeout = tx.getTimeoutMillis();\n        long ttl = timeout*3/2;\n        Collection<CollectionRecord> coll = txMap.get(key);\n        final MultiMapTransactionLog log;\n        if (coll == null){\n            CollectionResponse response = lockAndGet(key, timeout, ttl);\n            if (response == null){\n                throw new ConcurrentModificationException(\"Transaction couldn't obtain lock \" + getThreadId());\n            }\n            log = new MultiMapTransactionLog(key, proxyId, ttl, getThreadId(), version);\n            version = response.getTxVersion();\n            coll =  createCollection(response.getRecordCollection(getNodeEngine()));\n        } else {\n            log = (MultiMapTransactionLog)tx.getTransactionLog(getTxLogKey(key));\n        }\n        txMap.put(key, createCollection());\n        TxnRemoveAllOperation operation = new TxnRemoveAllOperation(proxyId, key, coll);\n        log.addOperation(operation);\n        return coll;\n    }","commit_id":"f1e3931bd70fe430150bf4d17a31764bab6d0cd3","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"protected boolean putInternal(Data key, Data value) {\n        throwExceptionIfNull(key);\n        throwExceptionIfNull(value);\n        Collection<CollectionRecord> coll = txMap.get(key);\n        long recordId = -1;\n        long timeout = tx.getTimeoutMillis();\n        long ttl = timeout*3/2;\n        if (coll == null){\n            CollectionResponse response = lockAndGet(key, timeout, ttl);\n            if (response == null){\n                throw new ConcurrentModificationException(\"Transaction couldn't obtain lock \" + getThreadId());\n            }\n            recordId = response.getNextRecordId();\n            version = response.getTxVersion();\n            coll =  createCollection(response.getRecordCollection(getNodeEngine()));\n            txMap.put(key, coll);\n        }\n        CollectionRecord record = new CollectionRecord(config.isBinary() ? value : getNodeEngine().toObject(value));\n        if (coll.add(record)){\n            if (recordId == -1){\n                recordId = nextId(key);\n            }\n            record.setRecordId(recordId);\n            TxnPutOperation operation = new TxnPutOperation(proxyId, key, value, recordId);\n            MultiMapTransactionLog log = (MultiMapTransactionLog)tx.getTransactionLog(getTxLogKey(key));\n            if (log != null){\n                log.addOperation(operation);\n            }\n            else {\n                log = new MultiMapTransactionLog(key, proxyId, ttl, getThreadId(), version, operation);\n                tx.addTransactionLog(log);\n            }\n            return true;\n        }\n        return false;\n    }","id":2643,"modified_method":"protected boolean putInternal(Data key, Data value) {\n        throwExceptionIfNull(key);\n        throwExceptionIfNull(value);\n        Collection<CollectionRecord> coll = txMap.get(key);\n        long recordId = -1;\n        long timeout = tx.getTimeoutMillis();\n        long ttl = timeout*3/2;\n        final MultiMapTransactionLog log;\n        if (coll == null){\n            CollectionResponse response = lockAndGet(key, timeout, ttl);\n            if (response == null){\n                throw new ConcurrentModificationException(\"Transaction couldn't obtain lock \" + getThreadId());\n            }\n            log = new MultiMapTransactionLog(key, proxyId, ttl, getThreadId(), version);\n            tx.addTransactionLog(log);\n            recordId = response.getNextRecordId();\n            version = response.getTxVersion();\n            coll =  createCollection(response.getRecordCollection(getNodeEngine()));\n            txMap.put(key, coll);\n        } else {\n            log = (MultiMapTransactionLog)tx.getTransactionLog(getTxLogKey(key));\n        }\n        CollectionRecord record = new CollectionRecord(config.isBinary() ? value : getNodeEngine().toObject(value));\n        if (coll.add(record)){\n            if (recordId == -1){\n                recordId = nextId(key);\n            }\n            record.setRecordId(recordId);\n            TxnPutOperation operation = new TxnPutOperation(proxyId, key, value, recordId);\n            log.addOperation(operation);\n            return true;\n        }\n        return false;\n    }","commit_id":"f1e3931bd70fe430150bf4d17a31764bab6d0cd3","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"/** Look for a requested session ID in cookies and URI parameters\n     * @param baseRequest\n     * @param request\n     */\n    protected void checkRequestedSessionId(Request baseRequest, HttpServletRequest request)\n    {\n        String requested_session_id=request.getRequestedSessionId();\n        \n        SessionManager sessionManager = getSessionManager();\n        \n        if (requested_session_id!=null && sessionManager!=null)\n        {\n            HttpSession session=sessionManager.getHttpSession(requested_session_id);\n            if (session!=null && sessionManager.isValid(session))\n                baseRequest.setSession(session);\n            return;\n        }\n        else if (!DispatcherType.REQUEST.equals(baseRequest.getDispatcherType()))\n            return;\n\n        boolean requested_session_id_from_cookie=false;\n        HttpSession session=null;\n\n        // Look for session id cookie\n        if (_sessionManager.isUsingCookies())\n        {\n            Cookie[] cookies=request.getCookies();\n            if (cookies!=null && cookies.length>0)\n            {\n                for (int i=0;i<cookies.length;i++)\n                {\n                    if (sessionManager.getSessionCookie().equalsIgnoreCase(cookies[i].getName()))\n                    {\n                        requested_session_id=cookies[i].getValue();\n                        requested_session_id_from_cookie = true;\n                        if(LOG.isDebugEnabled())\n                            LOG.debug(\"Got Session ID {} from cookie\",requested_session_id);\n                        \n                        session=sessionManager.getHttpSession(requested_session_id);\n                        if (session!=null && sessionManager.isValid(session))\n                            break;\n                    }\n                }\n            }\n        }\n\n        if (requested_session_id==null || session==null)\n        {\n            String uri = request.getRequestURI();\n\n            String prefix=sessionManager.getSessionIdPathParameterNamePrefix();\n            if (prefix!=null)\n            {\n                int s = uri.indexOf(prefix);\n                if (s>=0)\n                {   \n                    s+=prefix.length();\n                    int i=s;\n                    while (i<uri.length())\n                    {\n                        char c=uri.charAt(i);\n                        if (c==';'||c=='#'||c=='?'||c=='/')\n                            break;\n                        i++;\n                    }\n\n                    requested_session_id = uri.substring(s,i);\n                    requested_session_id_from_cookie = false;\n                    session=sessionManager.getHttpSession(requested_session_id);\n                    if(LOG.isDebugEnabled())\n                        LOG.debug(\"Got Session ID {} from URL\",requested_session_id);\n                }\n            }\n        }\n\n        baseRequest.setRequestedSessionId(requested_session_id);\n        baseRequest.setRequestedSessionIdFromCookie(requested_session_id!=null && requested_session_id_from_cookie); \n        if (session!=null && sessionManager.isValid(session))\n            baseRequest.setSession(session);                 \n    }","id":2644,"modified_method":"/**\n     * Look for a requested session ID in cookies and URI parameters\n     * \n     * @param baseRequest\n     * @param request\n     */\n    protected void checkRequestedSessionId(Request baseRequest, HttpServletRequest request)\n    {\n        String requested_session_id = request.getRequestedSessionId();\n\n        SessionManager sessionManager = getSessionManager();\n\n        if (requested_session_id != null && sessionManager != null)\n        {\n            HttpSession session = sessionManager.getHttpSession(requested_session_id);\n            if (session != null && sessionManager.isValid(session))\n                baseRequest.setSession(session);\n            return;\n        }\n        else if (!DispatcherType.REQUEST.equals(baseRequest.getDispatcherType()))\n            return;\n\n        boolean requested_session_id_from_cookie = false;\n        HttpSession session = null;\n\n        // Look for session id cookie\n        if (_sessionManager.isUsingCookies())\n        {\n            Cookie[] cookies = request.getCookies();\n            if (cookies != null && cookies.length > 0)\n            {\n                for (int i = 0; i < cookies.length; i++)\n                {\n                    if (sessionManager.getSessionCookie().equalsIgnoreCase(cookies[i].getName()))\n                    {\n                        requested_session_id = cookies[i].getValue();\n                        requested_session_id_from_cookie = true;\n\n                        LOG.info(\"Got Session ID {} from cookie\",requested_session_id);\n\n                        if (requested_session_id != null)\n                        {\n                            session = sessionManager.getHttpSession(requested_session_id);\n\n                            if (session != null && sessionManager.isValid(session))\n                            {\n                                break;\n                            }\n                        }\n                        else\n                        {\n                            LOG.warn(\"null session id from cookie\");\n                        }\n                    }\n                }\n            }\n        }\n\n        if (requested_session_id == null || session == null)\n        {\n            String uri = request.getRequestURI();\n\n            String prefix = sessionManager.getSessionIdPathParameterNamePrefix();\n            if (prefix != null)\n            {\n                int s = uri.indexOf(prefix);\n                if (s >= 0)\n                {\n                    s += prefix.length();\n                    int i = s;\n                    while (i < uri.length())\n                    {\n                        char c = uri.charAt(i);\n                        if (c == ';' || c == '#' || c == '?' || c == '/')\n                            break;\n                        i++;\n                    }\n\n                    requested_session_id = uri.substring(s,i);\n                    requested_session_id_from_cookie = false;\n                    session = sessionManager.getHttpSession(requested_session_id);\n                    if (LOG.isDebugEnabled())\n                        LOG.debug(\"Got Session ID {} from URL\",requested_session_id);\n                }\n            }\n        }\n\n        baseRequest.setRequestedSessionId(requested_session_id);\n        baseRequest.setRequestedSessionIdFromCookie(requested_session_id != null && requested_session_id_from_cookie);\n        if (session != null && sessionManager.isValid(session))\n            baseRequest.setSession(session);\n    }","commit_id":"cf1337264b99c8fe5d635bc9021d429cbd31eed5","url":"https://github.com/eclipse/jetty.project"},{"original_method":"private void configureRecovery(Element recovery) throws DatabaseConfigurationException {\n        String option = recovery.getAttribute(BrokerPool.RECOVERY_ENABLED_ATTRIBUTE);\n        boolean value = true;\n        if (option != null) {\n            value = option.equals(\"yes\");\n        }\n        setProperty(BrokerPool.PROPERTY_RECOVERY_ENABLED, new Boolean(value));\n        LOG.debug(BrokerPool.PROPERTY_RECOVERY_ENABLED + \": \" + config.get(BrokerPool.PROPERTY_RECOVERY_ENABLED));\n        \n        option = recovery.getAttribute(Journal.RECOVERY_SYNC_ON_COMMIT_ATTRIBUTE);\n        value = true;\n        if (option != null) {\n            value = option.equals(\"yes\");\n        }\n        setProperty(Journal.PROPERTY_RECOVERY_SYNC_ON_COMMIT, new Boolean(value));\n        LOG.debug(Journal.PROPERTY_RECOVERY_SYNC_ON_COMMIT + \": \" + config.get(Journal.PROPERTY_RECOVERY_SYNC_ON_COMMIT));\n        \n        option = recovery.getAttribute(TransactionManager.RECOVERY_GROUP_COMMIT_ATTRIBUTE);\n        value = false;\n        if (option != null) {\n            value = option.equals(\"yes\");\n        }\n        setProperty(TransactionManager.PROPERTY_RECOVERY_GROUP_COMMIT, new Boolean(value));\n        LOG.debug(TransactionManager.PROPERTY_RECOVERY_GROUP_COMMIT + \": \" + config.get(TransactionManager.PROPERTY_RECOVERY_GROUP_COMMIT));\n        \n        option = recovery.getAttribute(Journal.RECOVERY_JOURNAL_DIR_ATTRIBUTE);\n        if (option != null) {\n            setProperty(Journal.PROPERTY_RECOVERY_JOURNAL_DIR, option);\n            LOG.debug(Journal.PROPERTY_RECOVERY_JOURNAL_DIR + \": \" + config.get(Journal.PROPERTY_RECOVERY_JOURNAL_DIR));\n        }\n        \n        option = recovery.getAttribute(Journal.RECOVERY_SIZE_LIMIT_ATTRIBUTE);\n        if (option != null) {\n            if (option.endsWith(\"M\") || option.endsWith(\"m\"))\n                option = option.substring(0, option.length() - 1);\n            try {\n                Integer size = new Integer(option);\n                setProperty(Journal.PROPERTY_RECOVERY_SIZE_LIMIT, size);\n                LOG.debug(Journal.PROPERTY_RECOVERY_SIZE_LIMIT + \": \" + config.get(Journal.PROPERTY_RECOVERY_SIZE_LIMIT) + \"m\");\n            } catch (NumberFormatException e) {\n                throw new DatabaseConfigurationException(\"size attribute in recovery section needs to be a number\");\n            }\n        }\n    }","id":2645,"modified_method":"private void configureRecovery(Element recovery) throws DatabaseConfigurationException {\n        String option = recovery.getAttribute(BrokerPool.RECOVERY_ENABLED_ATTRIBUTE);\n        boolean value = true;\n        if (option != null) {\n            value = option.equals(\"yes\");\n        }\n        setProperty(BrokerPool.PROPERTY_RECOVERY_ENABLED, new Boolean(value));\n        LOG.debug(BrokerPool.PROPERTY_RECOVERY_ENABLED + \": \" + config.get(BrokerPool.PROPERTY_RECOVERY_ENABLED));\n        \n        option = recovery.getAttribute(Journal.RECOVERY_SYNC_ON_COMMIT_ATTRIBUTE);\n        value = true;\n        if (option != null) {\n            value = option.equals(\"yes\");\n        }\n        setProperty(Journal.PROPERTY_RECOVERY_SYNC_ON_COMMIT, new Boolean(value));\n        LOG.debug(Journal.PROPERTY_RECOVERY_SYNC_ON_COMMIT + \": \" + config.get(Journal.PROPERTY_RECOVERY_SYNC_ON_COMMIT));\n        \n        option = recovery.getAttribute(TransactionManager.RECOVERY_GROUP_COMMIT_ATTRIBUTE);\n        value = false;\n        if (option != null) {\n            value = option.equals(\"yes\");\n        }\n        setProperty(TransactionManager.PROPERTY_RECOVERY_GROUP_COMMIT, new Boolean(value));\n        LOG.debug(TransactionManager.PROPERTY_RECOVERY_GROUP_COMMIT + \": \" + config.get(TransactionManager.PROPERTY_RECOVERY_GROUP_COMMIT));\n        \n        option = recovery.getAttribute(Journal.RECOVERY_JOURNAL_DIR_ATTRIBUTE);\n        if (option != null) {\n            setProperty(Journal.PROPERTY_RECOVERY_JOURNAL_DIR, option);\n            LOG.debug(Journal.PROPERTY_RECOVERY_JOURNAL_DIR + \": \" + config.get(Journal.PROPERTY_RECOVERY_JOURNAL_DIR));\n        }\n        \n        option = recovery.getAttribute(Journal.RECOVERY_SIZE_LIMIT_ATTRIBUTE);\n        if (option != null) {\n            if (option.endsWith(\"M\") || option.endsWith(\"m\"))\n                option = option.substring(0, option.length() - 1);\n            try {\n                Integer size = new Integer(option);\n                setProperty(Journal.PROPERTY_RECOVERY_SIZE_LIMIT, size);\n                LOG.debug(Journal.PROPERTY_RECOVERY_SIZE_LIMIT + \": \" + config.get(Journal.PROPERTY_RECOVERY_SIZE_LIMIT) + \"m\");\n            } catch (NumberFormatException e) {\n                throw new DatabaseConfigurationException(\"size attribute in recovery section needs to be a number\");\n            }\n        }\n\n        option = recovery.getAttribute(TransactionManager.RECOVERY_FORCE_RESTART_ATTRIBUTE);\n        value = false;\n        if (option != null) {\n            value = option.equals(\"yes\");\n        }\n        setProperty(TransactionManager.PROPERTY_RECOVERY_FORCE_RESTART, new Boolean(value));\n        LOG.debug(TransactionManager.PROPERTY_RECOVERY_FORCE_RESTART + \": \" + config.get(TransactionManager.PROPERTY_RECOVERY_FORCE_RESTART));\n    }","commit_id":"d7e930b71ad2e14aacf33983572317a8ae36a3f4","url":"https://github.com/eXist-db/exist"},{"original_method":"/**\n     * Called by {@link #recover()} to do the actual recovery.\n     * \n     * @param reader\n     * @param lastLsn\n     * @throws LogException\n     */\n    private void doRecovery(File last, JournalReader reader, long lastLsn) throws LogException {\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"Running recovery ...\");\n        logManager.setInRecovery(true);\n        \n        // map to track running transactions\n        Long2ObjectHashMap runningTxns = new Long2ObjectHashMap();\n        \n        // ------- REDO ---------\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"First pass: redoing operations\");\n\t\tProgressBar progress = new ProgressBar(\"Redo \", last.length());\n        Loggable next;\n        while ((next = reader.nextEntry()) != null) {\n            SanityCheck.ASSERT(next.getLogType() != LogEntryTypes.CHECKPOINT,\n                    \"Found a checkpoint during recovery run! This should not ever happen.\");\n            if (next.getLogType() == LogEntryTypes.TXN_START) {\n                // new transaction starts: add it to the transactions table\n                runningTxns.put(next.getTransactionId(), next);\n            } else if (next.getLogType() == LogEntryTypes.TXN_COMMIT) {\n                // transaction committed: remove it from the transactions table\n                runningTxns.remove(next.getTransactionId());\n            } else if (next.getLogType() == LogEntryTypes.TXN_ABORT) {\n            \t// transaction aborted: remove it from the transactions table\n            \trunningTxns.remove(next.getTransactionId());\n            }\n//            LOG.debug(\"Redo: \" + next.dump());\n            // redo the log entry\n            next.redo();\n\t\t\tprogress.set(Lsn.getOffset(next.getLsn()));\n            if (next.getLsn() == lastLsn)\n                break; // last readable entry reached. Stop here.\n        }\n        \n        // ------- UNDO ---------\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"Second pass: undoing dirty transactions. Uncommitted transactions: \" +\n                    runningTxns.size());\n        // see if there are uncommitted transactions pending\n        if (runningTxns.size() > 0) {\n            // do a reverse scan of the log, undoing all uncommitted transactions\n\t\t\twhile((next = reader.previousEntry()) != null) {\n\t\t\t\tif (next.getLogType() == LogEntryTypes.TXN_START) {\n\t\t\t\t\tif (runningTxns.get(next.getTransactionId()) != null) {\n\t\t\t\t\t\trunningTxns.remove(next.getTransactionId());\n\t\t\t\t\t\tif (runningTxns.size() == 0)\n\t\t\t\t\t\t\t// all dirty transactions undone\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (next.getLogType() == LogEntryTypes.TXN_COMMIT) {\n\t\t\t\t\t// ignore already committed transaction\n\t\t\t\t} else if (next.getLogType() == LogEntryTypes.CHECKPOINT) {\n\t\t\t\t\t// found last checkpoint: undo is completed\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// undo the log entry if it belongs to an uncommitted transaction\n\t\t\t\tif (runningTxns.get(next.getTransactionId()) != null) {\n//\t\t\t\t\tLOG.debug(\"Undo: \" + next.dump());\n\t\t\t\t\tnext.undo();\n\t\t\t\t}\n\t\t\t}\n        }\n        broker.sync(Sync.MAJOR_SYNC);\n        \n        logManager.setInRecovery(false);\n    }","id":2646,"modified_method":"/**\n     * Called by {@link #recover()} to do the actual recovery.\n     * \n     * @param reader\n     * @param lastLsn\n     * @throws LogException\n     */\n    private void doRecovery(int txnCount, File last, JournalReader reader, long lastLsn) throws LogException {\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Running recovery ...\");\n        logManager.setInRecovery(true);\n\n        try {\n            // map to track running transactions\n            Long2ObjectHashMap runningTxns = new Long2ObjectHashMap();\n\n            // ------- REDO ---------\n            if (LOG.isInfoEnabled())\n                LOG.info(\"First pass: redoing \" + txnCount + \" transactions...\");\n            ProgressBar progress = new ProgressBar(\"Redo \", last.length());\n            Loggable next = null;\n            int redoCnt = 0;\n            try {\n                while ((next = reader.nextEntry()) != null) {\n                    SanityCheck.ASSERT(next.getLogType() != LogEntryTypes.CHECKPOINT,\n                            \"Found a checkpoint during recovery run! This should not ever happen.\");\n                    if (next.getLogType() == LogEntryTypes.TXN_START) {\n                        // new transaction starts: add it to the transactions table\n                        runningTxns.put(next.getTransactionId(), next);\n                    } else if (next.getLogType() == LogEntryTypes.TXN_COMMIT) {\n                        // transaction committed: remove it from the transactions table\n                        runningTxns.remove(next.getTransactionId());\n                        redoCnt++;\n                    } else if (next.getLogType() == LogEntryTypes.TXN_ABORT) {\n                        // transaction aborted: remove it from the transactions table\n                        runningTxns.remove(next.getTransactionId());\n                    }\n        //            LOG.debug(\"Redo: \" + next.dump());\n                    // redo the log entry\n                    next.redo();\n                    progress.set(Lsn.getOffset(next.getLsn()));\n                    if (next.getLsn() == lastLsn)\n                        break; // last readable entry reached. Stop here.\n                }\n            } catch (Exception e) {\n                LOG.warn(\"Exception caught while redoing transactions. Aborting recovery.\", e);\n                if (next != null)\n                    LOG.warn(\"Log entry that caused the exception: \" + next.dump());\n                throw new LogException(\"Recovery aborted\");\n            } finally {\n                LOG.info(\"Redo processed \" + redoCnt + \" out of \" + txnCount + \" transactions.\");\n            }\n\n            // ------- UNDO ---------\n            if (LOG.isInfoEnabled())\n                LOG.info(\"Second pass: undoing dirty transactions. Uncommitted transactions: \" +\n                        runningTxns.size());\n            // see if there are uncommitted transactions pending\n            if (runningTxns.size() > 0) {\n                // do a reverse scan of the log, undoing all uncommitted transactions\n                try {\n                    while((next = reader.previousEntry()) != null) {\n                        if (next.getLogType() == LogEntryTypes.TXN_START) {\n                            if (runningTxns.get(next.getTransactionId()) != null) {\n                                runningTxns.remove(next.getTransactionId());\n                                if (runningTxns.size() == 0)\n                                    // all dirty transactions undone\n                                    break;\n                            }\n                        } else if (next.getLogType() == LogEntryTypes.TXN_COMMIT) {\n                            // ignore already committed transaction\n                        } else if (next.getLogType() == LogEntryTypes.CHECKPOINT) {\n                            // found last checkpoint: undo is completed\n                            break;\n                        }\n\n                        // undo the log entry if it belongs to an uncommitted transaction\n                        if (runningTxns.get(next.getTransactionId()) != null) {\n    //\t\t\t\t\tLOG.debug(\"Undo: \" + next.dump());\n                            next.undo();\n                        }\n                    }\n                } catch (Exception e) {\n                    LOG.warn(\"Exception caught while undoing dirty transactions. Remaining transactions \" +\n                            \"to be undone: \" + runningTxns.size(), e);\n                    if (next != null)\n                        LOG.warn(\"Log entry that caused the exception: \" + next.dump());\n                    throw new LogException(\"Recovery aborted\");\n                }\n            }\n        } finally {\n            broker.sync(Sync.MAJOR_SYNC);\n            logManager.setInRecovery(false);\n        }\n    }","commit_id":"d7e930b71ad2e14aacf33983572317a8ae36a3f4","url":"https://github.com/eXist-db/exist"},{"original_method":"/**\n\t * Checks if the database is in a consistent state. If not, start a recovery run.\n\t * \n\t * The method scans the last log file and tries to find the last checkpoint\n\t * record. If the checkpoint record is the last record in the file,\n\t * the database was closed cleanly and is in a consistent state. If not, a\n\t * recovery run is started beginning at the last checkpoint found.\n\t *  \n\t * @throws LogException\n\t */\n\tpublic boolean recover() throws LogException {\n        boolean recoveryRun = false;\n\t\tFile files[] = logManager.getFiles();\n        // find the last log file in the data directory\n\t\tint lastNum = Journal.findLastFile(files);\n\t\tif (-1 < lastNum) {\n            // load the last log file\n\t\t\tFile last = logManager.getFile(lastNum);\n\t\t\t// scan the last log file and record the last checkpoint found\n\t\t\tJournalReader reader = new JournalReader(broker, last, lastNum);\n            try {\n            \t// try to read the last log record to see if it is a checkpoint\n            \tboolean checkpointFound = false;\n    \t\t\ttry {\n                    Loggable lastLog = reader.lastEntry();\n                    if (lastLog != null && lastLog.getLogType() == LogEntryTypes.CHECKPOINT) {\n                    \tCheckpoint checkpoint = (Checkpoint) lastLog;\n                    \t// Found a checkpoint. To be sure it is indeed a valid checkpoint\n                    \t// record, we compare the LSN stored in it with the current LSN.\n                    \tif (checkpoint.getStoredLsn() == checkpoint.getLsn()) {\n                    \t\tcheckpointFound = true;\n                    \t\tLOG.debug(\"Database is in clean state. Last checkpoint: \" + \n                    \t\t\t\tcheckpoint.getDateString());\n                    \t}\n                    }\n                } catch (LogException e) {\n                    LOG.debug(\"Reading last journal log entry failed: \" + e.getMessage() + \". Will scan the log...\");\n                    // if an exception occurs at this point, the journal file is probably incomplete,\n                    // which indicates a db crash\n                    checkpointFound = false;\n                }\n    \t\t\tif (!checkpointFound) {\n    \t\t\t\treader.position(1);\n    \t\t\t\tLong2ObjectHashMap txnsStarted = new Long2ObjectHashMap();\n\t    \t\t\tCheckpoint lastCheckpoint = null;\n\t    \t\t\tlong lastLsn = Lsn.LSN_INVALID;\n\t                Loggable next;\n\t                try {\n\t\t\t\t\t\tProgressBar progress = new ProgressBar(\"Scanning journal \", last.length());\n\t        \t\t\twhile ((next = reader.nextEntry()) != null) {\n\t//                        LOG.debug(next.dump());\n\t\t\t\t\t\t\tprogress.set(Lsn.getOffset(next.getLsn()));\n\t\t\t\t\t\t\tif (next.getLogType() == LogEntryTypes.TXN_START) {\n\t\t\t\t                // new transaction starts: add it to the transactions table\n\t\t\t\t                txnsStarted.put(next.getTransactionId(), next);\n\t\t\t\t            } else if (next.getLogType() == LogEntryTypes.TXN_ABORT) {\n\t\t\t\t            \t// transaction aborted: remove it from the transactions table\n\t\t\t\t            \ttxnsStarted.remove(next.getTransactionId());\n\t\t\t\t            } else if (next.getLogType() == LogEntryTypes.CHECKPOINT) {\n\t\t\t\t            \ttxnsStarted.clear();\n\t        \t\t\t\t\tlastCheckpoint = (Checkpoint) next;\n\t\t\t\t            }\n\t        \t\t\t\tlastLsn = next.getLsn();\n\t        \t\t\t}\n\t                } catch (LogException e) {\n\t                    if (LOG.isDebugEnabled()) {\n                            LOG.debug(\"Caught exception while reading log\", e);\n                            LOG.debug(\"Last readable log entry lsn: \" + Lsn.dump(lastLsn));\n                        }\n                    }\n\t                \n\t    \t\t\t// if the last checkpoint record is not the last record in the file\n\t    \t\t\t// we need a recovery.\n\t    \t\t\tif ((lastCheckpoint == null || lastCheckpoint.getLsn() != lastLsn) &&\n\t    \t\t\t\t\ttxnsStarted.size() > 0) {\n\t    \t\t\t\tLOG.debug(\"Found dirty transactions: \" + txnsStarted.size());\n\t    \t\t\t\t// starting recovery: reposition the log reader to the last checkpoint\n\t\t\t\t\t\tif (lastCheckpoint == null)\n\t\t\t\t\t\t    reader.position(1);\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t    reader.position(lastCheckpoint.getLsn());\n\t\t\t\t\t\t    next = reader.nextEntry();\n\t\t\t\t\t\t}\n\t                    recoveryRun = true;\n\t                    doRecovery(last, reader, lastLsn);\n\t                } else if (LOG.isDebugEnabled())\n\t    \t\t\t\tLOG.debug(\"Database is in clean state.\");\n    \t\t\t}\n    \t\t\tcleanDirectory(files);\n            } finally {\n                reader.close();\n            }\n\t\t}\n        logManager.setCurrentFileNum(lastNum);\n\t\tlogManager.switchFiles();\n        return recoveryRun;\n\t}","id":2647,"modified_method":"/**\n\t * Checks if the database is in a consistent state. If not, start a recovery run.\n\t * \n\t * The method scans the last log file and tries to find the last checkpoint\n\t * record. If the checkpoint record is the last record in the file,\n\t * the database was closed cleanly and is in a consistent state. If not, a\n\t * recovery run is started beginning at the last checkpoint found.\n\t *  \n\t * @throws LogException\n\t */\n\tpublic boolean recover() throws LogException {\n        boolean recoveryRun = false;\n\t\tFile files[] = logManager.getFiles();\n        // find the last log file in the data directory\n\t\tint lastNum = Journal.findLastFile(files);\n\t\tif (-1 < lastNum) {\n            // load the last log file\n\t\t\tFile last = logManager.getFile(lastNum);\n\t\t\t// scan the last log file and record the last checkpoint found\n\t\t\tJournalReader reader = new JournalReader(broker, last, lastNum);\n            try {\n            \t// try to read the last log record to see if it is a checkpoint\n            \tboolean checkpointFound = false;\n    \t\t\ttry {\n                    Loggable lastLog = reader.lastEntry();\n                    if (lastLog != null && lastLog.getLogType() == LogEntryTypes.CHECKPOINT) {\n                    \tCheckpoint checkpoint = (Checkpoint) lastLog;\n                    \t// Found a checkpoint. To be sure it is indeed a valid checkpoint\n                    \t// record, we compare the LSN stored in it with the current LSN.\n                    \tif (checkpoint.getStoredLsn() == checkpoint.getLsn()) {\n                    \t\tcheckpointFound = true;\n                    \t\tLOG.debug(\"Database is in clean state. Last checkpoint: \" + \n                    \t\t\t\tcheckpoint.getDateString());\n                    \t}\n                    }\n                } catch (LogException e) {\n                    LOG.info(\"Reading last journal log entry failed: \" + e.getMessage() + \". Will scan the log...\");\n                    // if an exception occurs at this point, the journal file is probably incomplete,\n                    // which indicates a db crash\n                    checkpointFound = false;\n                }\n    \t\t\tif (!checkpointFound) {\n                    LOG.info(\"Scanning journal...\");\n    \t\t\t\treader.position(1);\n    \t\t\t\tLong2ObjectHashMap txnsStarted = new Long2ObjectHashMap();\n\t    \t\t\tCheckpoint lastCheckpoint = null;\n\t    \t\t\tlong lastLsn = Lsn.LSN_INVALID;\n\t                Loggable next;\n\t                try {\n\t\t\t\t\t\tProgressBar progress = new ProgressBar(\"Scanning journal \", last.length());\n\t        \t\t\twhile ((next = reader.nextEntry()) != null) {\n\t//                        LOG.debug(next.dump());\n\t\t\t\t\t\t\tprogress.set(Lsn.getOffset(next.getLsn()));\n\t\t\t\t\t\t\tif (next.getLogType() == LogEntryTypes.TXN_START) {\n\t\t\t\t                // new transaction starts: add it to the transactions table\n\t\t\t\t                txnsStarted.put(next.getTransactionId(), next);\n\t\t\t\t            } else if (next.getLogType() == LogEntryTypes.TXN_ABORT) {\n\t\t\t\t            \t// transaction aborted: remove it from the transactions table\n\t\t\t\t            \ttxnsStarted.remove(next.getTransactionId());\n\t\t\t\t            } else if (next.getLogType() == LogEntryTypes.CHECKPOINT) {\n\t\t\t\t            \ttxnsStarted.clear();\n\t        \t\t\t\t\tlastCheckpoint = (Checkpoint) next;\n\t\t\t\t            }\n\t        \t\t\t\tlastLsn = next.getLsn();\n\t        \t\t\t}\n\t                } catch (LogException e) {\n\t                    if (LOG.isDebugEnabled()) {\n                            LOG.debug(\"Caught exception while reading log\", e);\n                            LOG.debug(\"Last readable log entry lsn: \" + Lsn.dump(lastLsn));\n                        }\n                    }\n\t                \n\t    \t\t\t// if the last checkpoint record is not the last record in the file\n\t    \t\t\t// we need a recovery.\n\t    \t\t\tif ((lastCheckpoint == null || lastCheckpoint.getLsn() != lastLsn) &&\n\t    \t\t\t\t\ttxnsStarted.size() > 0) {\n\t    \t\t\t\tLOG.info(\"Dirty transactions: \" + txnsStarted.size());\n\t    \t\t\t\t// starting recovery: reposition the log reader to the last checkpoint\n\t\t\t\t\t\tif (lastCheckpoint == null)\n\t\t\t\t\t\t    reader.position(1);\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t    reader.position(lastCheckpoint.getLsn());\n\t\t\t\t\t\t    next = reader.nextEntry();\n\t\t\t\t\t\t}\n\t                    recoveryRun = true;\n                        try {\n                            doRecovery(txnsStarted.size(), last, reader, lastLsn);\n                        } catch (LogException e) {\n                            // if restartOnError == true, we try to bring up the database even if there\n                            // are errors. Otherwise, an exception is thrown, which will stop the db initialization\n                            if (restartOnError)\n                                LOG.error(\"Errors during recovery. Database will start up, but corruptions are likely.\");\n                            else\n                                throw e;\n                        }\n                    } else if (LOG.isDebugEnabled())\n\t    \t\t\t\tLOG.debug(\"Database is in clean state.\");\n    \t\t\t}\n    \t\t\tcleanDirectory(files);\n            } finally {\n                reader.close();\n            }\n\t\t}\n        logManager.setCurrentFileNum(lastNum);\n\t\tlogManager.switchFiles();\n        return recoveryRun;\n\t}","commit_id":"d7e930b71ad2e14aacf33983572317a8ae36a3f4","url":"https://github.com/eXist-db/exist"},{"original_method":"public RecoveryManager(DBBroker broker, Journal log) {\n        this.broker = broker;\n\t\tthis.logManager = log;\n\t}","id":2648,"modified_method":"public RecoveryManager(DBBroker broker, Journal log, boolean restartOnError) {\n        this.broker = broker;\n\t\tthis.logManager = log;\n        this.restartOnError = restartOnError;\n\t}","commit_id":"d7e930b71ad2e14aacf33983572317a8ae36a3f4","url":"https://github.com/eXist-db/exist"},{"original_method":"/**\n     * Initialize the transaction manager using the specified data directory.\n     * \n     * @param dataDir\n     * @throws EXistException\n     */\n    public TransactionManager(BrokerPool pool, File dataDir, boolean transactionsEnabled) throws EXistException {\n        enabled = transactionsEnabled;\n        if (enabled)\n            journal = new Journal(pool, dataDir);\n        Boolean groupOpt = (Boolean) pool.getConfiguration().getProperty(PROPERTY_RECOVERY_GROUP_COMMIT);\n        if (groupOpt != null) {\n            groupCommit = groupOpt.booleanValue();\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"GroupCommits = \" + groupCommit);\n        }\n    }","id":2649,"modified_method":"/**\n     * Initialize the transaction manager using the specified data directory.\n     * \n     * @param dataDir\n     * @throws EXistException\n     */\n    public TransactionManager(BrokerPool pool, File dataDir, boolean transactionsEnabled) throws EXistException {\n        enabled = transactionsEnabled;\n        if (enabled)\n            journal = new Journal(pool, dataDir);\n        Boolean groupOpt = (Boolean) pool.getConfiguration().getProperty(PROPERTY_RECOVERY_GROUP_COMMIT);\n        if (groupOpt != null) {\n            groupCommit = groupOpt.booleanValue();\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"GroupCommits = \" + groupCommit);\n        }\n        Boolean restartOpt = (Boolean) pool.getConfiguration().getProperty(PROPERTY_RECOVERY_FORCE_RESTART);\n        if (restartOpt != null) {\n            forceRestart = restartOpt.booleanValue();\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"ForceRestart = \" + forceRestart);\n        }\n    }","commit_id":"d7e930b71ad2e14aacf33983572317a8ae36a3f4","url":"https://github.com/eXist-db/exist"},{"original_method":"/**\n     * Run a database recovery if required. This method is called once during\n     * startup from {@link org.exist.storage.BrokerPool}.\n     * \n     * @param broker\n     * @throws EXistException\n     */\n\tpublic boolean runRecovery(DBBroker broker) throws EXistException {\n\t\tRecoveryManager recovery = new RecoveryManager(broker, journal);\n\t\treturn recovery.recover();\n\t}","id":2650,"modified_method":"/**\n     * Run a database recovery if required. This method is called once during\n     * startup from {@link org.exist.storage.BrokerPool}.\n     * \n     * @param broker\n     * @throws EXistException\n     */\n\tpublic boolean runRecovery(DBBroker broker) throws EXistException {\n\t\tRecoveryManager recovery = new RecoveryManager(broker, journal, forceRestart);\n\t\treturn recovery.recover();\n\t}","commit_id":"d7e930b71ad2e14aacf33983572317a8ae36a3f4","url":"https://github.com/eXist-db/exist"},{"original_method":"private void configureRecovery(String dbHome, Element recovery) throws DatabaseConfigurationException {\n        String option = recovery.getAttribute(BrokerPool.RECOVERY_ENABLED_ATTRIBUTE);\n        setProperty(BrokerPool.PROPERTY_RECOVERY_ENABLED, parseBoolean(option, true));\n        LOG.debug(BrokerPool.PROPERTY_RECOVERY_ENABLED + \": \" + config.get(BrokerPool.PROPERTY_RECOVERY_ENABLED));\n        \n        option = recovery.getAttribute(Journal.RECOVERY_SYNC_ON_COMMIT_ATTRIBUTE);\n        setProperty(Journal.PROPERTY_RECOVERY_SYNC_ON_COMMIT, parseBoolean(option, true));\n        LOG.debug(Journal.PROPERTY_RECOVERY_SYNC_ON_COMMIT + \": \" + config.get(Journal.PROPERTY_RECOVERY_SYNC_ON_COMMIT));\n        \n        option = recovery.getAttribute(TransactionManager.RECOVERY_GROUP_COMMIT_ATTRIBUTE);\n        setProperty(TransactionManager.PROPERTY_RECOVERY_GROUP_COMMIT, parseBoolean(option, false));\n        LOG.debug(TransactionManager.PROPERTY_RECOVERY_GROUP_COMMIT + \": \" + config.get(TransactionManager.PROPERTY_RECOVERY_GROUP_COMMIT));\n        \n        option = recovery.getAttribute(Journal.RECOVERY_JOURNAL_DIR_ATTRIBUTE);\n        if (option != null) {\n            //DWES\n            File rf = ConfigurationHelper.lookup(option, dbHome);\n            if (!rf.canRead())\n                throw new DatabaseConfigurationException(\n                    \"cannot read data directory: \"\n                    + rf.getAbsolutePath());\n            setProperty(Journal.PROPERTY_RECOVERY_JOURNAL_DIR, rf.getAbsolutePath());\n            LOG.debug(Journal.PROPERTY_RECOVERY_JOURNAL_DIR + \": \" + config.get(Journal.PROPERTY_RECOVERY_JOURNAL_DIR));\n        }\n        \n        option = recovery.getAttribute(Journal.RECOVERY_SIZE_LIMIT_ATTRIBUTE);\n        if (option != null) {\n            if (option.endsWith(\"M\") || option.endsWith(\"m\"))\n                option = option.substring(0, option.length() - 1);\n            try {\n                Integer size = new Integer(option);\n                setProperty(Journal.PROPERTY_RECOVERY_SIZE_LIMIT, size);\n                LOG.debug(Journal.PROPERTY_RECOVERY_SIZE_LIMIT + \": \" + config.get(Journal.PROPERTY_RECOVERY_SIZE_LIMIT) + \"m\");\n            } catch (NumberFormatException e) {\n                throw new DatabaseConfigurationException(\"size attribute in recovery section needs to be a number\");\n            }\n        }\n    }","id":2651,"modified_method":"private void configureRecovery(String dbHome, Element recovery) throws DatabaseConfigurationException {\n        String option = recovery.getAttribute(BrokerPool.RECOVERY_ENABLED_ATTRIBUTE);\n        setProperty(BrokerPool.PROPERTY_RECOVERY_ENABLED, parseBoolean(option, true));\n        LOG.debug(BrokerPool.PROPERTY_RECOVERY_ENABLED + \": \" + config.get(BrokerPool.PROPERTY_RECOVERY_ENABLED));\n        \n        option = recovery.getAttribute(Journal.RECOVERY_SYNC_ON_COMMIT_ATTRIBUTE);\n        setProperty(Journal.PROPERTY_RECOVERY_SYNC_ON_COMMIT, parseBoolean(option, true));\n        LOG.debug(Journal.PROPERTY_RECOVERY_SYNC_ON_COMMIT + \": \" + config.get(Journal.PROPERTY_RECOVERY_SYNC_ON_COMMIT));\n        \n        option = recovery.getAttribute(TransactionManager.RECOVERY_GROUP_COMMIT_ATTRIBUTE);\n        setProperty(TransactionManager.PROPERTY_RECOVERY_GROUP_COMMIT, parseBoolean(option, false));\n        LOG.debug(TransactionManager.PROPERTY_RECOVERY_GROUP_COMMIT + \": \" + config.get(TransactionManager.PROPERTY_RECOVERY_GROUP_COMMIT));\n        \n        option = recovery.getAttribute(Journal.RECOVERY_JOURNAL_DIR_ATTRIBUTE);\n        if (option != null) {\n            //DWES\n            File rf = ConfigurationHelper.lookup(option, dbHome);\n            if (!rf.canRead())\n                throw new DatabaseConfigurationException(\n                    \"cannot read data directory: \"\n                    + rf.getAbsolutePath());\n            setProperty(Journal.PROPERTY_RECOVERY_JOURNAL_DIR, rf.getAbsolutePath());\n            LOG.debug(Journal.PROPERTY_RECOVERY_JOURNAL_DIR + \": \" + config.get(Journal.PROPERTY_RECOVERY_JOURNAL_DIR));\n        }\n        \n        option = recovery.getAttribute(Journal.RECOVERY_SIZE_LIMIT_ATTRIBUTE);\n        if (option != null) {\n            if (option.endsWith(\"M\") || option.endsWith(\"m\"))\n                option = option.substring(0, option.length() - 1);\n            try {\n                Integer size = new Integer(option);\n                setProperty(Journal.PROPERTY_RECOVERY_SIZE_LIMIT, size);\n                LOG.debug(Journal.PROPERTY_RECOVERY_SIZE_LIMIT + \": \" + config.get(Journal.PROPERTY_RECOVERY_SIZE_LIMIT) + \"m\");\n            } catch (NumberFormatException e) {\n                throw new DatabaseConfigurationException(\"size attribute in recovery section needs to be a number\");\n            }\n        }\n\n        option = recovery.getAttribute(TransactionManager.RECOVERY_FORCE_RESTART_ATTRIBUTE);\n        boolean value = false;\n        if (option != null) {\n            value = option.equals(\"yes\");\n        }\n        setProperty(TransactionManager.PROPERTY_RECOVERY_FORCE_RESTART, new Boolean(value));\n        LOG.debug(TransactionManager.PROPERTY_RECOVERY_FORCE_RESTART + \": \" + config.get(TransactionManager.PROPERTY_RECOVERY_FORCE_RESTART));\n    }","commit_id":"164605508b9363dc48fc3d5d9415600f0761f783","url":"https://github.com/eXist-db/exist"},{"original_method":"/**\n\t * Checks if the database is in a consistent state. If not, start a recovery run.\n\t * \n\t * The method scans the last log file and tries to find the last checkpoint\n\t * record. If the checkpoint record is the last record in the file,\n\t * the database was closed cleanly and is in a consistent state. If not, a\n\t * recovery run is started beginning at the last checkpoint found.\n\t *  \n\t * @throws LogException\n\t */\n\tpublic boolean recover() throws LogException {\n        boolean recoveryRun = false;\n\t\tFile files[] = logManager.getFiles();\n        // find the last log file in the data directory\n\t\tint lastNum = Journal.findLastFile(files);\n\t\tif (-1 < lastNum) {\n            // load the last log file\n\t\t\tFile last = logManager.getFile(lastNum);\n\t\t\t// scan the last log file and record the last checkpoint found\n\t\t\tJournalReader reader = new JournalReader(broker, last, lastNum);\n            try {\n            \t// try to read the last log record to see if it is a checkpoint\n            \tboolean checkpointFound = false;\n    \t\t\ttry {\n                    Loggable lastLog = reader.lastEntry();\n                    if (lastLog != null && lastLog.getLogType() == LogEntryTypes.CHECKPOINT) {\n                    \tCheckpoint checkpoint = (Checkpoint) lastLog;\n                    \t// Found a checkpoint. To be sure it is indeed a valid checkpoint\n                    \t// record, we compare the LSN stored in it with the current LSN.\n                    \tif (checkpoint.getStoredLsn() == checkpoint.getLsn()) {\n                    \t\tcheckpointFound = true;\n                    \t\tLOG.debug(\"Database is in clean state. Last checkpoint: \" + \n                    \t\t\t\tcheckpoint.getDateString());\n                    \t}\n                    }\n                } catch (LogException e) {\n                    LOG.debug(\"Reading last journal log entry failed: \" + e.getMessage() + \". Will scan the log...\");\n                    // if an exception occurs at this point, the journal file is probably incomplete,\n                    // which indicates a db crash\n                    checkpointFound = false;\n                }\n    \t\t\tif (!checkpointFound) {\n    \t\t\t\treader.position(1);\n    \t\t\t\tLong2ObjectHashMap txnsStarted = new Long2ObjectHashMap();\n\t    \t\t\tCheckpoint lastCheckpoint = null;\n\t    \t\t\tlong lastLsn = Lsn.LSN_INVALID;\n\t                Loggable next;\n\t                try {\n\t\t\t\t\t\tProgressBar progress = new ProgressBar(\"Scanning journal \", last.length());\n\t        \t\t\twhile ((next = reader.nextEntry()) != null) {\n\t//                        LOG.debug(next.dump());\n\t\t\t\t\t\t\tprogress.set(Lsn.getOffset(next.getLsn()));\n\t\t\t\t\t\t\tif (next.getLogType() == LogEntryTypes.TXN_START) {\n\t\t\t\t                // new transaction starts: add it to the transactions table\n\t\t\t\t                txnsStarted.put(next.getTransactionId(), next);\n\t\t\t\t            } else if (next.getLogType() == LogEntryTypes.TXN_ABORT) {\n\t\t\t\t            \t// transaction aborted: remove it from the transactions table\n\t\t\t\t            \ttxnsStarted.remove(next.getTransactionId());\n\t\t\t\t            } else if (next.getLogType() == LogEntryTypes.CHECKPOINT) {\n\t\t\t\t            \ttxnsStarted.clear();\n\t        \t\t\t\t\tlastCheckpoint = (Checkpoint) next;\n\t\t\t\t            }\n\t        \t\t\t\tlastLsn = next.getLsn();\n\t        \t\t\t}\n\t                } catch (LogException e) {\n\t                    if (LOG.isDebugEnabled()) {\n                            LOG.debug(\"Caught exception while reading log\", e);\n                            LOG.debug(\"Last readable log entry lsn: \" + Lsn.dump(lastLsn));\n                        }\n                    }\n\t                \n\t    \t\t\t// if the last checkpoint record is not the last record in the file\n\t    \t\t\t// we need a recovery.\n\t    \t\t\tif ((lastCheckpoint == null || lastCheckpoint.getLsn() != lastLsn) &&\n\t    \t\t\t\t\ttxnsStarted.size() > 0) {\n\t    \t\t\t\tLOG.debug(\"Found dirty transactions: \" + txnsStarted.size());\n\t    \t\t\t\t// starting recovery: reposition the log reader to the last checkpoint\n\t\t\t\t\t\tif (lastCheckpoint == null)\n\t\t\t\t\t\t    reader.position(1);\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t    reader.position(lastCheckpoint.getLsn());\n\t\t\t\t\t\t    next = reader.nextEntry();\n\t\t\t\t\t\t}\n\t                    recoveryRun = true;\n\t                    doRecovery(last, reader, lastLsn);\n\t                } else if (LOG.isDebugEnabled())\n\t    \t\t\t\tLOG.debug(\"Database is in clean state.\");\n    \t\t\t}\n    \t\t\tcleanDirectory(files);\n            } finally {\n                reader.close();\n            }\n\t\t}\n        logManager.setCurrentFileNum(lastNum);\n\t\tlogManager.switchFiles();\n                logManager.clearBackupFiles();\n        return recoveryRun;\n\t}","id":2652,"modified_method":"/**\n\t * Checks if the database is in a consistent state. If not, start a recovery run.\n\t * \n\t * The method scans the last log file and tries to find the last checkpoint\n\t * record. If the checkpoint record is the last record in the file,\n\t * the database was closed cleanly and is in a consistent state. If not, a\n\t * recovery run is started beginning at the last checkpoint found.\n\t *  \n\t * @throws LogException\n\t */\n\tpublic boolean recover() throws LogException {\n        boolean recoveryRun = false;\n\t\tFile files[] = logManager.getFiles();\n        // find the last log file in the data directory\n\t\tint lastNum = Journal.findLastFile(files);\n\t\tif (-1 < lastNum) {\n            // load the last log file\n\t\t\tFile last = logManager.getFile(lastNum);\n\t\t\t// scan the last log file and record the last checkpoint found\n\t\t\tJournalReader reader = new JournalReader(broker, last, lastNum);\n            try {\n            \t// try to read the last log record to see if it is a checkpoint\n            \tboolean checkpointFound = false;\n    \t\t\ttry {\n                    Loggable lastLog = reader.lastEntry();\n                    if (lastLog != null && lastLog.getLogType() == LogEntryTypes.CHECKPOINT) {\n                    \tCheckpoint checkpoint = (Checkpoint) lastLog;\n                    \t// Found a checkpoint. To be sure it is indeed a valid checkpoint\n                    \t// record, we compare the LSN stored in it with the current LSN.\n                    \tif (checkpoint.getStoredLsn() == checkpoint.getLsn()) {\n                    \t\tcheckpointFound = true;\n                    \t\tLOG.debug(\"Database is in clean state. Last checkpoint: \" + \n                    \t\t\t\tcheckpoint.getDateString());\n                    \t}\n                    }\n                } catch (LogException e) {\n                    LOG.info(\"Reading last journal log entry failed: \" + e.getMessage() + \". Will scan the log...\");\n                    // if an exception occurs at this point, the journal file is probably incomplete,\n                    // which indicates a db crash\n                    checkpointFound = false;\n                }\n    \t\t\tif (!checkpointFound) {\n                    LOG.info(\"Scanning journal...\");\n    \t\t\t\treader.position(1);\n    \t\t\t\tLong2ObjectHashMap txnsStarted = new Long2ObjectHashMap();\n\t    \t\t\tCheckpoint lastCheckpoint = null;\n\t    \t\t\tlong lastLsn = Lsn.LSN_INVALID;\n\t                Loggable next;\n\t                try {\n\t\t\t\t\t\tProgressBar progress = new ProgressBar(\"Scanning journal \", last.length());\n\t        \t\t\twhile ((next = reader.nextEntry()) != null) {\n\t//                        LOG.debug(next.dump());\n\t\t\t\t\t\t\tprogress.set(Lsn.getOffset(next.getLsn()));\n\t\t\t\t\t\t\tif (next.getLogType() == LogEntryTypes.TXN_START) {\n\t\t\t\t                // new transaction starts: add it to the transactions table\n\t\t\t\t                txnsStarted.put(next.getTransactionId(), next);\n\t\t\t\t            } else if (next.getLogType() == LogEntryTypes.TXN_ABORT) {\n\t\t\t\t            \t// transaction aborted: remove it from the transactions table\n\t\t\t\t            \ttxnsStarted.remove(next.getTransactionId());\n\t\t\t\t            } else if (next.getLogType() == LogEntryTypes.CHECKPOINT) {\n\t\t\t\t            \ttxnsStarted.clear();\n\t        \t\t\t\t\tlastCheckpoint = (Checkpoint) next;\n\t\t\t\t            }\n\t        \t\t\t\tlastLsn = next.getLsn();\n\t        \t\t\t}\n\t                } catch (LogException e) {\n\t                    if (LOG.isDebugEnabled()) {\n                            LOG.debug(\"Caught exception while reading log\", e);\n                            LOG.debug(\"Last readable log entry lsn: \" + Lsn.dump(lastLsn));\n                        }\n                    }\n\t                \n\t    \t\t\t// if the last checkpoint record is not the last record in the file\n\t    \t\t\t// we need a recovery.\n\t    \t\t\tif ((lastCheckpoint == null || lastCheckpoint.getLsn() != lastLsn) &&\n\t    \t\t\t\t\ttxnsStarted.size() > 0) {\n\t    \t\t\t\tLOG.info(\"Dirty transactions: \" + txnsStarted.size());\n\t    \t\t\t\t// starting recovery: reposition the log reader to the last checkpoint\n\t\t\t\t\t\tif (lastCheckpoint == null)\n\t\t\t\t\t\t    reader.position(1);\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t    reader.position(lastCheckpoint.getLsn());\n\t\t\t\t\t\t    next = reader.nextEntry();\n\t\t\t\t\t\t}\n\t                    recoveryRun = true;\n                        try {\n                            doRecovery(txnsStarted.size(), last, reader, lastLsn);\n                        } catch (LogException e) {\n                            // if restartOnError == true, we try to bring up the database even if there\n                            // are errors. Otherwise, an exception is thrown, which will stop the db initialization\n                            if (restartOnError)\n                                LOG.error(\"Errors during recovery. Database will start up, but corruptions are likely.\");\n                            else\n                                throw e;\n                        }\n                    } else if (LOG.isDebugEnabled())\n\t    \t\t\t\tLOG.debug(\"Database is in clean state.\");\n    \t\t\t}\n    \t\t\tcleanDirectory(files);\n            } finally {\n                reader.close();\n            }\n\t\t}\n        logManager.setCurrentFileNum(lastNum);\n\t\tlogManager.switchFiles();\n                logManager.clearBackupFiles();\n        return recoveryRun;\n\t}","commit_id":"164605508b9363dc48fc3d5d9415600f0761f783","url":"https://github.com/eXist-db/exist"},{"original_method":"/**\n     * Called by {@link #recover()} to do the actual recovery.\n     * \n     * @param reader\n     * @param lastLsn\n     * @throws LogException\n     */\n    private void doRecovery(File last, JournalReader reader, long lastLsn) throws LogException {\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"Running recovery ...\");\n        logManager.setInRecovery(true);\n        \n        // map to track running transactions\n        Long2ObjectHashMap runningTxns = new Long2ObjectHashMap();\n        \n        // ------- REDO ---------\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"First pass: redoing operations\");\n\t\tProgressBar progress = new ProgressBar(\"Redo \", last.length());\n        Loggable next;\n        while ((next = reader.nextEntry()) != null) {\n            SanityCheck.ASSERT(next.getLogType() != LogEntryTypes.CHECKPOINT,\n                    \"Found a checkpoint during recovery run! This should not ever happen.\");\n            if (next.getLogType() == LogEntryTypes.TXN_START) {\n                // new transaction starts: add it to the transactions table\n                runningTxns.put(next.getTransactionId(), next);\n            } else if (next.getLogType() == LogEntryTypes.TXN_COMMIT) {\n                // transaction committed: remove it from the transactions table\n                runningTxns.remove(next.getTransactionId());\n            } else if (next.getLogType() == LogEntryTypes.TXN_ABORT) {\n            \t// transaction aborted: remove it from the transactions table\n            \trunningTxns.remove(next.getTransactionId());\n            }\n//            LOG.debug(\"Redo: \" + next.dump());\n            // redo the log entry\n            next.redo();\n\t\t\tprogress.set(Lsn.getOffset(next.getLsn()));\n            if (next.getLsn() == lastLsn)\n                break; // last readable entry reached. Stop here.\n        }\n        \n        // ------- UNDO ---------\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"Second pass: undoing dirty transactions. Uncommitted transactions: \" +\n                    runningTxns.size());\n        // see if there are uncommitted transactions pending\n        if (runningTxns.size() > 0) {\n            // do a reverse scan of the log, undoing all uncommitted transactions\n\t\t\twhile((next = reader.previousEntry()) != null) {\n\t\t\t\tif (next.getLogType() == LogEntryTypes.TXN_START) {\n\t\t\t\t\tif (runningTxns.get(next.getTransactionId()) != null) {\n\t\t\t\t\t\trunningTxns.remove(next.getTransactionId());\n\t\t\t\t\t\tif (runningTxns.size() == 0)\n\t\t\t\t\t\t\t// all dirty transactions undone\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (next.getLogType() == LogEntryTypes.TXN_COMMIT) {\n\t\t\t\t\t// ignore already committed transaction\n\t\t\t\t} else if (next.getLogType() == LogEntryTypes.CHECKPOINT) {\n\t\t\t\t\t// found last checkpoint: undo is completed\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// undo the log entry if it belongs to an uncommitted transaction\n\t\t\t\tif (runningTxns.get(next.getTransactionId()) != null) {\n//\t\t\t\t\tLOG.debug(\"Undo: \" + next.dump());\n\t\t\t\t\tnext.undo();\n\t\t\t\t}\n\t\t\t}\n        }\n        broker.sync(Sync.MAJOR_SYNC);\n        \n        logManager.setInRecovery(false);\n    }","id":2653,"modified_method":"/**\n     * Called by {@link #recover()} to do the actual recovery.\n     * \n     * @param reader\n     * @param lastLsn\n     * @throws LogException\n     */\n    private void doRecovery(int txnCount, File last, JournalReader reader, long lastLsn) throws LogException {\n        if (LOG.isInfoEnabled())\n            LOG.info(\"Running recovery ...\");\n        logManager.setInRecovery(true);\n\n        try {\n            // map to track running transactions\n            Long2ObjectHashMap runningTxns = new Long2ObjectHashMap();\n\n            // ------- REDO ---------\n            if (LOG.isInfoEnabled())\n                LOG.info(\"First pass: redoing \" + txnCount + \" transactions...\");\n            ProgressBar progress = new ProgressBar(\"Redo \", last.length());\n            Loggable next = null;\n            int redoCnt = 0;\n            try {\n                while ((next = reader.nextEntry()) != null) {\n                    SanityCheck.ASSERT(next.getLogType() != LogEntryTypes.CHECKPOINT,\n                            \"Found a checkpoint during recovery run! This should not ever happen.\");\n                    if (next.getLogType() == LogEntryTypes.TXN_START) {\n                        // new transaction starts: add it to the transactions table\n                        runningTxns.put(next.getTransactionId(), next);\n                    } else if (next.getLogType() == LogEntryTypes.TXN_COMMIT) {\n                        // transaction committed: remove it from the transactions table\n                        runningTxns.remove(next.getTransactionId());\n                        redoCnt++;\n                    } else if (next.getLogType() == LogEntryTypes.TXN_ABORT) {\n                        // transaction aborted: remove it from the transactions table\n                        runningTxns.remove(next.getTransactionId());\n                    }\n        //            LOG.debug(\"Redo: \" + next.dump());\n                    // redo the log entry\n                    next.redo();\n                    progress.set(Lsn.getOffset(next.getLsn()));\n                    if (next.getLsn() == lastLsn)\n                        break; // last readable entry reached. Stop here.\n                }\n            } catch (Exception e) {\n                LOG.warn(\"Exception caught while redoing transactions. Aborting recovery.\", e);\n                if (next != null)\n                    LOG.warn(\"Log entry that caused the exception: \" + next.dump());\n                throw new LogException(\"Recovery aborted\");\n            } finally {\n                LOG.info(\"Redo processed \" + redoCnt + \" out of \" + txnCount + \" transactions.\");\n            }\n\n            // ------- UNDO ---------\n            if (LOG.isInfoEnabled())\n                LOG.info(\"Second pass: undoing dirty transactions. Uncommitted transactions: \" +\n                        runningTxns.size());\n            // see if there are uncommitted transactions pending\n            if (runningTxns.size() > 0) {\n                // do a reverse scan of the log, undoing all uncommitted transactions\n                try {\n                    while((next = reader.previousEntry()) != null) {\n                        if (next.getLogType() == LogEntryTypes.TXN_START) {\n                            if (runningTxns.get(next.getTransactionId()) != null) {\n                                runningTxns.remove(next.getTransactionId());\n                                if (runningTxns.size() == 0)\n                                    // all dirty transactions undone\n                                    break;\n                            }\n                        } else if (next.getLogType() == LogEntryTypes.TXN_COMMIT) {\n                            // ignore already committed transaction\n                        } else if (next.getLogType() == LogEntryTypes.CHECKPOINT) {\n                            // found last checkpoint: undo is completed\n                            break;\n                        }\n\n                        // undo the log entry if it belongs to an uncommitted transaction\n                        if (runningTxns.get(next.getTransactionId()) != null) {\n    //\t\t\t\t\tLOG.debug(\"Undo: \" + next.dump());\n                            next.undo();\n                        }\n                    }\n                } catch (Exception e) {\n                    LOG.warn(\"Exception caught while undoing dirty transactions. Remaining transactions \" +\n                            \"to be undone: \" + runningTxns.size(), e);\n                    if (next != null)\n                        LOG.warn(\"Log entry that caused the exception: \" + next.dump());\n                    throw new LogException(\"Recovery aborted\");\n                }\n            }\n        } finally {\n            broker.sync(Sync.MAJOR_SYNC);\n            logManager.setInRecovery(false);\n        }\n    }","commit_id":"164605508b9363dc48fc3d5d9415600f0761f783","url":"https://github.com/eXist-db/exist"},{"original_method":"public RecoveryManager(DBBroker broker, Journal log) {\n        this.broker = broker;\n\t\tthis.logManager = log;\n\t}","id":2654,"modified_method":"public RecoveryManager(DBBroker broker, Journal log, boolean restartOnError) {\n        this.broker = broker;\n\t\tthis.logManager = log;\n        this.restartOnError = restartOnError;\n\t}","commit_id":"164605508b9363dc48fc3d5d9415600f0761f783","url":"https://github.com/eXist-db/exist"},{"original_method":"/**\n     * Run a database recovery if required. This method is called once during\n     * startup from {@link org.exist.storage.BrokerPool}.\n     * \n     * @param broker\n     * @throws EXistException\n     */\n\tpublic boolean runRecovery(DBBroker broker) throws EXistException {\n\t\tRecoveryManager recovery = new RecoveryManager(broker, journal);\n\t\treturn recovery.recover();\n\t}","id":2655,"modified_method":"/**\n     * Run a database recovery if required. This method is called once during\n     * startup from {@link org.exist.storage.BrokerPool}.\n     * \n     * @param broker\n     * @throws EXistException\n     */\n\tpublic boolean runRecovery(DBBroker broker) throws EXistException {\n\t\tRecoveryManager recovery = new RecoveryManager(broker, journal, forceRestart);\n\t\treturn recovery.recover();\n\t}","commit_id":"164605508b9363dc48fc3d5d9415600f0761f783","url":"https://github.com/eXist-db/exist"},{"original_method":"/**\n     * Initialize the transaction manager using the specified data directory.\n     * \n     * @param dataDir\n     * @throws EXistException\n     */\n    public TransactionManager(BrokerPool pool, File dataDir, boolean transactionsEnabled) throws EXistException {\n        enabled = transactionsEnabled;\n        if (enabled)\n            journal = new Journal(pool, dataDir);\n        Boolean groupOpt = (Boolean) pool.getConfiguration().getProperty(PROPERTY_RECOVERY_GROUP_COMMIT);\n        if (groupOpt != null) {\n            groupCommit = groupOpt.booleanValue();\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"GroupCommits = \" + groupCommit);\n        }\n    }","id":2656,"modified_method":"/**\n     * Initialize the transaction manager using the specified data directory.\n     * \n     * @param dataDir\n     * @throws EXistException\n     */\n    public TransactionManager(BrokerPool pool, File dataDir, boolean transactionsEnabled) throws EXistException {\n        enabled = transactionsEnabled;\n        if (enabled)\n            journal = new Journal(pool, dataDir);\n        Boolean groupOpt = (Boolean) pool.getConfiguration().getProperty(PROPERTY_RECOVERY_GROUP_COMMIT);\n        if (groupOpt != null) {\n            groupCommit = groupOpt.booleanValue();\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"GroupCommits = \" + groupCommit);\n        }\n        Boolean restartOpt = (Boolean) pool.getConfiguration().getProperty(PROPERTY_RECOVERY_FORCE_RESTART);\n        if (restartOpt != null) {\n            forceRestart = restartOpt.booleanValue();\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"ForceRestart = \" + forceRestart);\n        }\n    }","commit_id":"164605508b9363dc48fc3d5d9415600f0761f783","url":"https://github.com/eXist-db/exist"},{"original_method":"private List<String> getNextContext(String contextPrefix) throws OperationException {\n    List<String> nextLevelContexts = Lists.newArrayList();\n    for (TimeSeriesTable table : timeSeriesTables.get().values()) {\n      MetricsScanQuery query = new MetricsScanQueryBuilder().setContext(contextPrefix).\n        allowEmptyMetric().build(0, 0);\n      List<String> results = table.getNextLevelContexts(query);\n\n      for (String nextContext : results) {\n        if (contextPrefix == null) {\n          nextLevelContexts.add(nextContext.substring(0, nextContext.indexOf(\".\")));\n        } else {\n          String context = nextContext.substring(contextPrefix.length() + 1);\n          nextLevelContexts.add(context.substring(0, context.indexOf(\".\")));\n        }\n      }\n    }\n    Collections.sort(nextLevelContexts);\n    return nextLevelContexts;\n  }","id":2657,"modified_method":"private Set<String> getNextContext(String contextPrefix) throws OperationException {\n    SortedSet<String> nextLevelContexts = Sets.newTreeSet();\n    for (TimeSeriesTable table : timeSeriesTables.get().values()) {\n      MetricsScanQuery query = new MetricsScanQueryBuilder().setContext(contextPrefix).\n        allowEmptyMetric().build(-1, -1);\n      List<String> results = table.getNextLevelContexts(query);\n\n      for (String nextContext : results) {\n        if (contextPrefix == null) {\n          nextLevelContexts.add(nextContext.substring(0, nextContext.indexOf(\".\")));\n        } else {\n          String context = nextContext.substring(contextPrefix.length() + 1);\n          nextLevelContexts.add(context.substring(0, context.indexOf(\".\")));\n        }\n      }\n    }\n    return nextLevelContexts;\n  }","commit_id":"c7cfd070c6619d9537be16327373799b7e8196be","url":"https://github.com/caskdata/cdap"},{"original_method":"@Inject\n  public MetricsDiscoveryHandler(Authenticator authenticator, final MetricsTableFactory metricsTableFactory) {\n    super(authenticator);\n\n    this.aggregatesTables = Suppliers.memoize(new Supplier<Map<MetricsScope, AggregatesTable>>() {\n      @Override\n      public Map<MetricsScope, AggregatesTable> get() {\n        Map<MetricsScope, AggregatesTable> map = Maps.newHashMap();\n        for (final MetricsScope scope : MetricsScope.values()) {\n          map.put(scope, metricsTableFactory.createAggregates(scope.name()));\n        }\n        return map;\n      }\n    });\n\n    this.timeSeriesTables = Suppliers.memoize(new Supplier<Map<MetricsScope, TimeSeriesTable>>() {\n      @Override\n      public Map<MetricsScope, TimeSeriesTable> get() {\n        Map<MetricsScope, TimeSeriesTable> map = Maps.newHashMap();\n        for (final MetricsScope scope : MetricsScope.values()) {\n          map.put(scope, metricsTableFactory.createTimeSeries(scope.name(), SECONDS_RESOLUTION));\n        }\n        return map;\n      }\n    });\n  }","id":2658,"modified_method":"@Inject\n  public MetricsDiscoveryHandler(Authenticator authenticator, final MetricsTableFactory metricsTableFactory) {\n    super(authenticator);\n\n    this.aggregatesTables = Suppliers.memoize(new Supplier<Map<MetricsScope, AggregatesTable>>() {\n      @Override\n      public Map<MetricsScope, AggregatesTable> get() {\n        Map<MetricsScope, AggregatesTable> map = Maps.newHashMap();\n        for (final MetricsScope scope : MetricsScope.values()) {\n          map.put(scope, metricsTableFactory.createAggregates(scope.name()));\n        }\n        return map;\n      }\n    });\n\n    this.timeSeriesTables = Suppliers.memoize(new Supplier<Map<MetricsScope, TimeSeriesTable>>() {\n      @Override\n      public Map<MetricsScope, TimeSeriesTable> get() {\n        Map<MetricsScope, TimeSeriesTable> map = Maps.newHashMap();\n        for (final MetricsScope scope : MetricsScope.values()) {\n          map.put(scope, metricsTableFactory.createTimeSeries(scope.name(), HOUR_RESOLUTION));\n        }\n        return map;\n      }\n    });\n  }","commit_id":"c7cfd070c6619d9537be16327373799b7e8196be","url":"https://github.com/caskdata/cdap"},{"original_method":"private ScannerFields getScannerFields(MetricsScanQuery query, boolean shouldMatchAllTags) {\n    int startTimeBase = getTimeBase(query.getStartTime());\n    int endTimeBase = getTimeBase(query.getEndTime());\n\n    byte[][] columns = null;\n    if (startTimeBase == endTimeBase) {\n      // If on the same timebase, we only need subset of columns\n      int startCol = (int) (query.getStartTime() - startTimeBase) / resolution;\n      int endCol = (int) (query.getEndTime() - endTimeBase) / resolution;\n      columns = new byte[endCol - startCol + 1][];\n\n      for (int i = 0; i < columns.length; i++) {\n        columns[i] = Bytes.toBytes((short) (startCol + i));\n      }\n    }\n\n    String tagPrefix = query.getTagPrefix();\n    if (!shouldMatchAllTags && tagPrefix == null) {\n      tagPrefix = MetricsConstants.EMPTY_TAG;\n    }\n    byte[] startRow = entityCodec.paddedEncode(query.getContextPrefix(), query.getMetricPrefix(), tagPrefix,\n                                               startTimeBase, query.getRunId(), 0);\n    byte[] endRow = entityCodec.paddedEncode(query.getContextPrefix(), query.getMetricPrefix(), tagPrefix,\n                                             endTimeBase + 1, query.getRunId(), 0xff);\n    FuzzyRowFilter filter = getFilter(query, startTimeBase, endTimeBase, shouldMatchAllTags, FOUR_ZERO_BYTES);\n\n    return new ScannerFields(startRow, endRow, columns, filter);\n  }","id":2659,"modified_method":"private ScannerFields getScannerFields(MetricsScanQuery query, boolean shouldMatchAllTags) {\n    int startTimeBase = getTimeBase(query.getStartTime());\n    int endTimeBase = getTimeBase(query.getEndTime());\n\n    byte[][] columns = null;\n    if ((startTimeBase == endTimeBase) && (startTimeBase != -1)) {\n      // If on the same timebase, we only need subset of columns\n      int startCol = (int) (query.getStartTime() - startTimeBase) / resolution;\n      int endCol = (int) (query.getEndTime() - endTimeBase) / resolution;\n      columns = new byte[endCol - startCol + 1][];\n\n      for (int i = 0; i < columns.length; i++) {\n        columns[i] = Bytes.toBytes((short) (startCol + i));\n      }\n    }\n\n    String tagPrefix = query.getTagPrefix();\n    if (!shouldMatchAllTags && tagPrefix == null) {\n      tagPrefix = MetricsConstants.EMPTY_TAG;\n    }\n    byte[] startRow = entityCodec.paddedEncode(query.getContextPrefix(), query.getMetricPrefix(), tagPrefix,\n                                               startTimeBase, query.getRunId(), 0);\n    byte[] endRow = entityCodec.paddedEncode(query.getContextPrefix(), query.getMetricPrefix(), tagPrefix,\n                                             endTimeBase + 1, query.getRunId(), 0xff);\n    FuzzyRowFilter filter = getFilter(query, startTimeBase, endTimeBase, shouldMatchAllTags);\n\n    return new ScannerFields(startRow, endRow, columns, filter);\n  }","commit_id":"c7cfd070c6619d9537be16327373799b7e8196be","url":"https://github.com/caskdata/cdap"},{"original_method":"private FuzzyRowFilter getFilter(MetricsScanQuery query, long startTimeBase,\n                                   long endTimeBase, boolean shouldMatchAllTags, byte[] timeBaseMatch) {\n    String tag = query.getTagPrefix();\n\n    // Create fuzzy row filter\n    ImmutablePair<byte[], byte[]> contextPair = entityCodec.paddedFuzzyEncode(MetricsEntityType.CONTEXT,\n                                                                              query.getContextPrefix(), 0);\n    ImmutablePair<byte[], byte[]> metricPair = entityCodec.paddedFuzzyEncode(MetricsEntityType.METRIC,\n                                                                             query.getMetricPrefix(), 0);\n    ImmutablePair<byte[], byte[]> tagPair = (!shouldMatchAllTags && tag == null)\n                                                ? defaultTagFuzzyPair\n                                                : entityCodec.paddedFuzzyEncode(MetricsEntityType.TAG, tag, 0);\n    ImmutablePair<byte[], byte[]> runIdPair = entityCodec.paddedFuzzyEncode(MetricsEntityType.RUN, query.getRunId(), 0);\n\n    // For each timbase, construct a fuzzy filter pair\n    List<ImmutablePair<byte[], byte[]>> fuzzyPairs = Lists.newLinkedList();\n    for (long timeBase = startTimeBase; timeBase <= endTimeBase; timeBase += this.rollTimebaseInterval) {\n      fuzzyPairs.add(ImmutablePair.of(Bytes.concat(contextPair.getFirst(), metricPair.getFirst(), tagPair.getFirst(),\n                                                   Bytes.toBytes((int) timeBase), runIdPair.getFirst()),\n                                      Bytes.concat(contextPair.getSecond(), metricPair.getSecond(), tagPair.getSecond(),\n                                                   timeBaseMatch, runIdPair.getSecond())));\n    }\n\n    return new FuzzyRowFilter(fuzzyPairs);\n  }","id":2660,"modified_method":"private FuzzyRowFilter getFilter(MetricsScanQuery query, long startTimeBase,\n                                   long endTimeBase, boolean shouldMatchAllTags) {\n    String tag = query.getTagPrefix();\n\n    // Create fuzzy row filter\n    ImmutablePair<byte[], byte[]> contextPair = entityCodec.paddedFuzzyEncode(MetricsEntityType.CONTEXT,\n                                                                              query.getContextPrefix(), 0);\n    ImmutablePair<byte[], byte[]> metricPair = entityCodec.paddedFuzzyEncode(MetricsEntityType.METRIC,\n                                                                             query.getMetricPrefix(), 0);\n    ImmutablePair<byte[], byte[]> tagPair = (!shouldMatchAllTags && tag == null)\n                                                ? defaultTagFuzzyPair\n                                                : entityCodec.paddedFuzzyEncode(MetricsEntityType.TAG, tag, 0);\n    ImmutablePair<byte[], byte[]> runIdPair = entityCodec.paddedFuzzyEncode(MetricsEntityType.RUN, query.getRunId(), 0);\n\n    // For each timbase, construct a fuzzy filter pair\n    List<ImmutablePair<byte[], byte[]>> fuzzyPairs = Lists.newLinkedList();\n\n    if (startTimeBase == -1 && endTimeBase == -1) {\n      // if not time-range is provided, we match all time ranges by using FOUR_ONE_BYTES as filter.\n      fuzzyPairs.add(ImmutablePair.of(Bytes.concat(contextPair.getFirst(), metricPair.getFirst(), tagPair.getFirst(),\n                                                   FOUR_ZERO_BYTES, runIdPair.getFirst()),\n                                      Bytes.concat(contextPair.getSecond(), metricPair.getSecond(), tagPair.getSecond(),\n                                                   FOUR_ONE_BYTES, runIdPair.getSecond())));\n    } else {\n      for (long timeBase = startTimeBase; timeBase <= endTimeBase; timeBase += this.rollTimebaseInterval) {\n        fuzzyPairs.add(ImmutablePair.of(Bytes.concat(contextPair.getFirst(), metricPair.getFirst(), tagPair.getFirst(),\n                                                     Bytes.toBytes((int) timeBase), runIdPair.getFirst()),\n                                        Bytes.concat(contextPair.getSecond(), metricPair.getSecond(),\n                                                     tagPair.getSecond(), FOUR_ZERO_BYTES, runIdPair.getSecond())));\n      }\n    }\n\n    return new FuzzyRowFilter(fuzzyPairs);\n  }","commit_id":"c7cfd070c6619d9537be16327373799b7e8196be","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Deletes all the row keys which match the context prefix and metric prefix.  Context and Metric cannot both be\n   * null, as full table deletes should be done through the clear method.\n   *\n   * @param contextPrefix Prefix of the context to match, null means any context.\n   * @param metricPrefix Prefix of the metric to match, null means any metric.\n   * @throws OperationException if there is an error in deleting entries.\n   */\n  public void delete(String contextPrefix, String metricPrefix) throws OperationException {\n    Preconditions.checkArgument(contextPrefix != null || metricPrefix != null,\n                                \"context and metric cannot both be null\");\n    if (metricPrefix == null) {\n      delete(contextPrefix);\n    } else {\n      byte[] startRow = entityCodec.paddedEncode(contextPrefix, metricPrefix, null, 0, \"0\", 0);\n      byte[] endRow = entityCodec.paddedEncode(contextPrefix, metricPrefix, null, Integer.MAX_VALUE, \"0\", 0xff);\n      try {\n        // Create fuzzy row filter\n        ImmutablePair<byte[], byte[]> contextPair = entityCodec.paddedFuzzyEncode(MetricsEntityType.CONTEXT,\n                                                                                  contextPrefix, 0);\n        ImmutablePair<byte[], byte[]> metricPair = entityCodec.paddedFuzzyEncode(MetricsEntityType.METRIC,\n                                                                                 metricPrefix, 0);\n        ImmutablePair<byte[], byte[]> tagPair = entityCodec.paddedFuzzyEncode(MetricsEntityType.TAG, null, 0);\n        ImmutablePair<byte[], byte[]> runIdPair = entityCodec.paddedFuzzyEncode(MetricsEntityType.RUN, null, 0);\n        FuzzyRowFilter filter = new FuzzyRowFilter(ImmutableList.of(ImmutablePair.of(\n          Bytes.concat(contextPair.getFirst(), metricPair.getFirst(), tagPair.getFirst(),\n                       Bytes.toBytes(0), runIdPair.getFirst()),\n          Bytes.concat(contextPair.getSecond(), metricPair.getSecond(), tagPair.getSecond(),\n                       FOUR_ONE_BYTES, runIdPair.getSecond()))));\n\n        timeSeriesTable.deleteRange(startRow, endRow, null, filter);\n      } catch (Exception e) {\n        throw new OperationException(StatusCode.INTERNAL_ERROR, e.getMessage(), e);\n      }\n    }\n  }","id":2661,"modified_method":"/**\n   * Deletes all the row keys which match the context prefix and metric prefix.  Context and Metric cannot both be\n   * null, as full table deletes should be done through the clear method.\n   *\n   * @param contextPrefix Prefix of the context to match, null means any context.\n   * @param metricPrefix Prefix of the metric to match, null means any metric.\n   * @throws OperationException if there is an error in deleting entries.\n   */\n  public void delete(String contextPrefix, String metricPrefix) throws OperationException {\n    Preconditions.checkArgument(contextPrefix != null || metricPrefix != null,\n                                \"context and metric cannot both be null\");\n    if (metricPrefix == null) {\n      delete(contextPrefix);\n    } else {\n      byte[] startRow = entityCodec.paddedEncode(contextPrefix, metricPrefix, null, 0, null, 0);\n      byte[] endRow = entityCodec.paddedEncode(contextPrefix, metricPrefix, null, Integer.MAX_VALUE, null, 0xff);\n      try {\n        // Create fuzzy row filter\n        ImmutablePair<byte[], byte[]> contextPair = entityCodec.paddedFuzzyEncode(MetricsEntityType.CONTEXT,\n                                                                                  contextPrefix, 0);\n        ImmutablePair<byte[], byte[]> metricPair = entityCodec.paddedFuzzyEncode(MetricsEntityType.METRIC,\n                                                                                 metricPrefix, 0);\n        ImmutablePair<byte[], byte[]> tagPair = entityCodec.paddedFuzzyEncode(MetricsEntityType.TAG, null, 0);\n        ImmutablePair<byte[], byte[]> runIdPair = entityCodec.paddedFuzzyEncode(MetricsEntityType.RUN, null, 0);\n        FuzzyRowFilter filter = new FuzzyRowFilter(ImmutableList.of(ImmutablePair.of(\n          Bytes.concat(contextPair.getFirst(), metricPair.getFirst(), tagPair.getFirst(),\n                       Bytes.toBytes(0), runIdPair.getFirst()),\n          Bytes.concat(contextPair.getSecond(), metricPair.getSecond(), tagPair.getSecond(),\n                       FOUR_ONE_BYTES, runIdPair.getSecond()))));\n\n        timeSeriesTable.deleteRange(startRow, endRow, null, filter);\n      } catch (Exception e) {\n        throw new OperationException(StatusCode.INTERNAL_ERROR, e.getMessage(), e);\n      }\n    }\n  }","commit_id":"c7cfd070c6619d9537be16327373799b7e8196be","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * If @param isContextQuery, is true we return the list of unique available contexts at the next level,\n   * if its false, we would return the available unique metrics in a given context\n   * @param query\n   * @param isContextQuery\n   * @return\n   * @throws OperationException\n   */\n  private List<String> getAvailableContextAndMetrics(MetricsScanQuery query, boolean isContextQuery)\n    throws OperationException {\n    List<String> metricsScanResults = Lists.newArrayList();\n    int startTimeBase = getTimeBase(query.getStartTime());\n    int endTimeBase = getTimeBase(query.getEndTime());\n    byte[][] columns = null;\n    String tagPrefix = query.getTagPrefix();\n    if (tagPrefix == null) {\n      tagPrefix = MetricsConstants.EMPTY_TAG;\n    }\n\n    byte[] startRow = entityCodec.paddedEncode(query.getContextPrefix(), query.getMetricPrefix(), tagPrefix,\n                                        startTimeBase, query.getRunId(), 0);\n    byte[] endRow = entityCodec.paddedEncode(query.getContextPrefix(), query.getMetricPrefix(), tagPrefix,\n                                      endTimeBase + 1, query.getRunId(), 0xff);\n\n    Row rowResult;\n    // does multiple scan, but we skip duplicate row-keys by incrementing\n    // the sub-context or metrics part of rowkey before each scan.\n    do {\n      FuzzyRowFilter filter = getFilter(query, startTimeBase, endTimeBase + 1, false, FOUR_ONE_BYTES);\n\n      ScannerFields fields = new ScannerFields(startRow, endRow, columns, filter);\n      Scanner scanner = null;\n      try {\n        scanner = timeSeriesTable.scan(fields.startRow, fields.endRow, fields.columns, fields.filter);\n      } catch (Exception e) {\n        throw new OperationException(StatusCode.INTERNAL_ERROR, e.getMessage(), e);\n      }\n\n      rowResult = scanner.next();\n      if (rowResult != null) {\n        byte[] rowKey = rowResult.getRow();\n        // Decode context and metric from key\n        int offset = 0;\n        String contextStr = entityCodec.decode(MetricsEntityType.CONTEXT, rowKey, offset);\n\n        // Always have a \".\" suffix for unique matching\n        if (query.getContextPrefix() != null && !(contextStr + \".\").startsWith(query.getContextPrefix())) {\n          scanner.close();\n          break;\n        }\n\n        offset += entityCodec.getEncodedSize(MetricsEntityType.CONTEXT);\n        String metricName = entityCodec.decode(MetricsEntityType.METRIC, rowKey, offset);\n\n        if (isContextQuery) {\n          // update the rowkey, by incrementing the next-level context part\n          ByteBuffer contextPart = ByteBuffer.wrap(rowKey);\n          contextPart.limit(entityCodec.getEncodedSize(MetricsEntityType.CONTEXT));\n          contextPart = getNextContextTarget(contextPart, query.getContextPrefix());\n          if (contextPart == null) {\n            scanner.close();\n            break;\n          }\n          //update the start-row to be row-key for next scan\n          startRow = rowKey;\n          metricsScanResults.add(contextStr);\n        } else {\n          // update the rowkey, by incrementing the metrics part\n          ByteBuffer metricsPart = ByteBuffer.wrap(rowKey);\n          metricsPart.position(entityCodec.getEncodedSize(MetricsEntityType.CONTEXT));\n          metricsPart.limit(entityCodec.getEncodedSize(MetricsEntityType.CONTEXT) +\n                              entityCodec.getEncodedSize(MetricsEntityType.METRIC));\n          metricsPart = stopKeyForPrefix(metricsPart);\n          if (metricsPart == null) {\n            scanner.close();\n            break;\n          }\n          //update the start-row to be row-key for next scan\n          startRow = rowKey;\n          metricsScanResults.add(metricName);\n        }\n      }\n      // no more matching rows found\n      scanner.close();\n    } while (rowResult != null);\n\n    return metricsScanResults;\n  }","id":2662,"modified_method":"/**\n   * If @param isContextQuery, is true we return the list of unique available contexts at the next level,\n   * if its false, we would return the available unique metrics in a given context\n   * @param query\n   * @param isContextQuery\n   * @return\n   * @throws OperationException\n   */\n  private List<String> getAvailableContextAndMetrics(MetricsScanQuery query, boolean isContextQuery)\n    throws OperationException {\n    List<String> metricsScanResults = Lists.newArrayList();\n    int startTimeBase = getTimeBase(query.getStartTime());\n    int endTimeBase = getTimeBase(query.getEndTime());\n    byte[][] columns = null;\n    String tagPrefix = query.getTagPrefix();\n    int contextOffset = 0 , contextLength = 0;\n    int metricsOffset = 0, metricsLength = 0;\n    if (tagPrefix == null) {\n      tagPrefix = MetricsConstants.EMPTY_TAG;\n    }\n\n    if (isContextQuery) {\n      // initialize context-offset and length-of-context to obtain all available context's after\n      // the given context-prefix.\n      String contextPrefix = query.getContextPrefix();\n      int entityParts = contextPrefix == null ? 0 : entityCodec.getEntityPartsLength(contextPrefix);\n      int idSize = entityCodec.getIdSize();\n      contextOffset = idSize * entityParts;\n      contextLength = idSize;\n    } else {\n      // initialize metrics-offset and length of metrics entity type to obtain\n      // all available metrics in the given context\n      metricsOffset = entityCodec.getEncodedSize(MetricsEntityType.CONTEXT);\n      metricsLength = entityCodec.getEncodedSize(MetricsEntityType.METRIC);\n    }\n\n    byte[] startRow = entityCodec.paddedEncode(query.getContextPrefix(), query.getMetricPrefix(), tagPrefix,\n                                        startTimeBase, query.getRunId(), 0);\n    byte[] endRow = entityCodec.paddedEncode(query.getContextPrefix(), query.getMetricPrefix(), tagPrefix,\n                                      endTimeBase, query.getRunId(), 0xff);\n\n    Row rowResult;\n\n    // multiple scans with incrementing the scans startRow row-key to get the next unique part of a context or\n    // next unique metric based on the parameter isContextQuery.\n    // by this way, we can skip multiple rows of duplicate rows and scan for the next\n    // unique context/metric part we are interested in.\n    // we stop when we cannot find any rows which matches the given contextPrefix or if there are no rows\n    // returned from the scan.\n    do {\n      FuzzyRowFilter filter = getFilter(query, -1, -1, false);\n      ScannerFields fields = new ScannerFields(startRow, endRow, columns, filter);\n      Scanner scanner = null;\n      try {\n        scanner = timeSeriesTable.scan(fields.startRow, fields.endRow, fields.columns, fields.filter);\n      } catch (Exception e) {\n        throw new OperationException(StatusCode.INTERNAL_ERROR, e.getMessage(), e);\n      }\n\n      rowResult = scanner.next();\n      if (rowResult != null) {\n        byte[] rowKey = rowResult.getRow();\n        int offset = 0;\n        String contextStr = entityCodec.decode(MetricsEntityType.CONTEXT, rowKey, offset);\n\n        if (query.getContextPrefix() != null && !contextStr.startsWith(query.getContextPrefix())) {\n          // if retrieved rowkey's contextPrefix does not match with the contextPrefix in query,\n          // we stop scanning and return\n          scanner.close();\n          break;\n        }\n\n        offset += entityCodec.getEncodedSize(MetricsEntityType.CONTEXT);\n\n        if (isContextQuery) {\n          metricsScanResults.add(contextStr);\n          // With the next scan we fast-forward to the next row that has different context name\n          // that we are searching for.\n          startRow = getNextRow(rowKey, contextOffset, contextLength);\n          if (startRow == null) {\n            //reached max possible key for the context, we will stop scanning now and return.\n            scanner.close();\n            break;\n          }\n        } else {\n          String metricName = entityCodec.decode(MetricsEntityType.METRIC, rowKey, offset);\n          metricsScanResults.add(metricName);\n          // With the next scan we fast-forward to the next row that has different metric name part\n          // that we are searching for.\n          startRow = getNextRow(rowKey, metricsOffset, metricsLength);\n          if (startRow == null) {\n            //reached max possible metrics key for the given context, we will stop scanning now and return.\n            scanner.close();\n            break;\n          }\n        }\n      }\n      // no more matching rows found\n      scanner.close();\n    } while (rowResult != null);\n\n    return metricsScanResults;\n  }","commit_id":"c7cfd070c6619d9537be16327373799b7e8196be","url":"https://github.com/caskdata/cdap"},{"original_method":"private Set<String> getNextContext(String contextPrefix) throws OperationException {\n    HashSet<String> seenContext = Sets.newHashSet();\n    // if no context prefix is given, this will match the first part of the context-prefix\n    Pattern firstContext = Pattern.compile(\"([^.]+)\");\n    // match the next part of the context-prefix\n    Pattern resultContext = Pattern.compile(contextPrefix + \".\" + \"[^.]+\");\n\n    for (TimeSeriesTable table : timeSeriesTables.get().values()) {\n      MetricsScanQuery query = new MetricsScanQueryBuilder().setContext(contextPrefix).\n        allowEmptyMetric().build(0, 0);\n      List<String> results = table.getNextLevelContexts(query);\n\n      for (String nextContext : results) {\n        if (nextContext != null) {\n          Matcher match = (contextPrefix == null) ? firstContext.matcher(nextContext) :\n            resultContext.matcher(nextContext);\n          if (match.find()) {\n            seenContext.add(match.group());\n          }\n        }\n      }\n    }\n    return seenContext;\n  }","id":2663,"modified_method":"private List<String> getNextContext(String contextPrefix) throws OperationException {\n    List<String> nextLevelContexts = Lists.newArrayList();\n    for (TimeSeriesTable table : timeSeriesTables.get().values()) {\n      MetricsScanQuery query = new MetricsScanQueryBuilder().setContext(contextPrefix).\n        allowEmptyMetric().build(0, 0);\n      List<String> results = table.getNextLevelContexts(query);\n\n      for (String nextContext : results) {\n        if (contextPrefix == null) {\n          nextLevelContexts.add(nextContext.substring(0, nextContext.indexOf(\".\")));\n        } else {\n          String context = nextContext.substring(contextPrefix.length() + 1);\n          nextLevelContexts.add(context.substring(0, context.indexOf(\".\")));\n        }\n      }\n    }\n    Collections.sort(nextLevelContexts);\n    return nextLevelContexts;\n  }","commit_id":"b7a85cc6d212980a0739587aa27e486e5f08c4f1","url":"https://github.com/caskdata/cdap"},{"original_method":"@GET\n  @Path(\"/context/\")\n  public void handleContextZero(HttpRequest request, HttpResponder responder) throws IOException {\n    try {\n      responder.sendJson(HttpResponseStatus.OK, getNextContext(null));\n    } catch (OperationException e) {\n      responder.sendStatus(HttpResponseStatus.INTERNAL_SERVER_ERROR);\n    }\n  }","id":2664,"modified_method":"/**\n   * Returns all the unique elements available in the first context\n   */\n  @GET\n  @Path(\"/context/\")\n  public void listFirstContexts(HttpRequest request, HttpResponder responder) throws IOException {\n    try {\n      responder.sendJson(HttpResponseStatus.OK, getNextContext(null));\n    } catch (OperationException e) {\n      LOG.warn(\"Exception while retrieving contexts\", e);\n      responder.sendStatus(HttpResponseStatus.INTERNAL_SERVER_ERROR);\n    }\n  }","commit_id":"b7a85cc6d212980a0739587aa27e486e5f08c4f1","url":"https://github.com/caskdata/cdap"},{"original_method":"private Set<String> getNextMetrics(String contextPrefix) throws OperationException {\n    HashSet<String> seenMetrics = Sets.newHashSet();\n    for (TimeSeriesTable table : timeSeriesTables.get().values()) {\n      MetricsScanQuery query = new MetricsScanQueryBuilder().setContext(contextPrefix).\n        allowEmptyMetric().build(0, 0);\n      List<String> metricNames = table.getAllMetrics(query);\n\n      for (String metric : metricNames) {\n        if (metric != null) {\n          seenMetrics.add(metric);\n        }\n      }\n    }\n\n    return seenMetrics;\n  }","id":2665,"modified_method":"private List<String> getNextMetrics(String contextPrefix) throws OperationException {\n    List<String> metrics = Lists.newArrayList();\n    for (TimeSeriesTable table : timeSeriesTables.get().values()) {\n      MetricsScanQuery query = new MetricsScanQueryBuilder().setContext(contextPrefix).\n        allowEmptyMetric().build(0, 0);\n      metrics.addAll(table.getAllMetrics(query));\n    }\n    Collections.sort(metrics);\n    return metrics;\n  }","commit_id":"b7a85cc6d212980a0739587aa27e486e5f08c4f1","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testMetricsContexts() throws Exception {\n    metricsResponseCheck(\"/v2/metrics/available/context\", 2);\n    metricsResponseCheck(\"/v2/metrics/available/context/WordCount.f\", 1);\n    metricsResponseCheck(\"/v2/metrics/available/context/WCount\", 3);\n    metricsResponseCheck(\"/v2/metrics/available/context/WCount.f\", 2);\n  }","id":2666,"modified_method":"@Test\n  public void testMetricsContexts() throws Exception {\n    metricsResponseCheck(\"/v2/metrics/available/context\", 2);\n    metricsResponseCheck(\"/v2/metrics/available/context/WordCount.f\", 1);\n    metricsResponseCheck(\"/v2/metrics/available/context/WCount\", 3);\n\n    String base = \"/v2/metrics/available/context/WCount.f\";\n    HttpResponse response = doGet(base);\n    Assert.assertEquals(200, response.getStatusLine().getStatusCode());\n\n    String result = EntityUtils.toString(response.getEntity());\n    List<String> resultList = new Gson().fromJson(result, new TypeToken<List<String>>() { }.getType());\n    Assert.assertEquals(2, resultList.size());\n    Assert.assertEquals(\"WCounter\", resultList.get(0));\n    Assert.assertEquals(\"WordCounter\", resultList.get(1));\n\n  }","commit_id":"b7a85cc6d212980a0739587aa27e486e5f08c4f1","url":"https://github.com/caskdata/cdap"},{"original_method":"private static void setupMetrics() throws InterruptedException {\n    MetricsCollector collector =\n      collectionService.getCollector(MetricsScope.USER, \"WordCount.f.WordCounter.splitter\", \"0\");\n    collector.increment(\"reads\", 1);\n    collector.increment(\"writes\", 1);\n    collector = collectionService.getCollector(MetricsScope.USER, \"WCount.f.WordCounter.splitter\", \"0\");\n    collector.increment(\"reads\", 1);\n    collector = collectionService.getCollector(MetricsScope.USER, \"WCount.f.WCounter.splitter\", \"0\");\n    collector.increment(\"reads\", 1);\n    collector = collectionService.getCollector(MetricsScope.USER, \"WCount.f.WCounter.counter\", \"0\");\n    collector.increment(\"reads\", 1);\n    collector = collectionService.getCollector(MetricsScope.USER, \"WCount.p.RCounts\", \"0\");\n    collector.increment(\"reads\", 1);\n    collector = collectionService.getCollector(MetricsScope.USER, \"WCount.b.ClassicWordCount.m\", \"0\");\n    collector.increment(\"reads\", 1);\n    collector = collectionService.getCollector(MetricsScope.USER, \"WCount.b.ClassicWordCount.r\", \"0\");\n    collector.increment(\"reads\", 1);\n    collector = collectionService.getCollector(MetricsScope.USER, \"WordCount.f.WordCounter.splitter\", \"0\");\n    collector.increment(\"reads\", 1);\n    collector.increment(\"writes\", 1);\n\n    // need a better way to do this\n    TimeUnit.SECONDS.sleep(2);\n  }","id":2667,"modified_method":"private static void setupMetrics() throws InterruptedException {\n    MetricsCollector collector =\n      collectionService.getCollector(MetricsScope.USER, \"WordCount.f.WordCounter.splitter\", \"0\");\n    collector.increment(\"reads\", 1);\n    collector.increment(\"writes\", 1);\n    collector = collectionService.getCollector(MetricsScope.USER, \"WCount.f.WordCounter.splitter\", \"0\");\n    collector.increment(\"reads\", 1);\n    collector = collectionService.getCollector(MetricsScope.USER, \"WCount.f.WCounter.splitter\", \"0\");\n    collector.increment(\"reads\", 1);\n    collector = collectionService.getCollector(MetricsScope.USER, \"WCount.f.WCounter.counter\", \"0\");\n    collector.increment(\"reads\", 1);\n    collector = collectionService.getCollector(MetricsScope.USER, \"WCount.p.RCounts\", \"0\");\n    collector.increment(\"reads\", 1);\n    collector = collectionService.getCollector(MetricsScope.USER, \"WCount.b.ClassicWordCount.m\", \"0\");\n    collector.increment(\"reads\", 1);\n    collector = collectionService.getCollector(MetricsScope.USER, \"WCount.b.ClassicWordCount.r\", \"0\");\n    collector.increment(\"reads\", 1);\n    collector = collectionService.getCollector(MetricsScope.USER, \"WordCount.f.WordCounter.splitter\", \"0\");\n    collector.increment(\"reads\", 1);\n    collector.increment(\"writes\", 1);\n\n    collector = collectionService.getCollector(MetricsScope.USER, \"WordCount.f.WordCounter.collector\", \"0\");\n    collector.increment(\"aa\", 1);\n    collector.increment(\"zz\", 1);\n    collector.increment(\"ab\", 1);\n\n    // need a better way to do this\n    TimeUnit.SECONDS.sleep(2);\n  }","commit_id":"b7a85cc6d212980a0739587aa27e486e5f08c4f1","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testMetrics() throws Exception {\n    String base = \"/v2/metrics/available/context/WordCount.f.WordCounter.splitter/metrics\";\n    HttpResponse response = doGet(base);\n    Assert.assertEquals(200, response.getStatusLine().getStatusCode());\n\n    String result = EntityUtils.toString(response.getEntity());\n    List<String> reply = new Gson().fromJson(result, new TypeToken<List<String>>() { }.getType());\n    Assert.assertEquals(2, reply.size());\n  }","id":2668,"modified_method":"@Test\n  public void testMetrics() throws Exception {\n    String base = \"/v2/metrics/available/context/WordCount.f.WordCounter.splitter/metrics\";\n    HttpResponse response = doGet(base);\n    Assert.assertEquals(200, response.getStatusLine().getStatusCode());\n\n    String result = EntityUtils.toString(response.getEntity());\n    List<String> resultList = new Gson().fromJson(result, new TypeToken<List<String>>() { }.getType());\n    Assert.assertEquals(2, resultList.size());\n\n    base = \"/v2/metrics/available/context/WordCount.f.WordCounter.collector/metrics\";\n    response = doGet(base);\n    Assert.assertEquals(200, response.getStatusLine().getStatusCode());\n\n    result = EntityUtils.toString(response.getEntity());\n    resultList = new Gson().fromJson(result, new TypeToken<List<String>>() { }.getType());\n    Assert.assertEquals(3, resultList.size());\n    Assert.assertEquals(\"aa\", resultList.get(0));\n    Assert.assertEquals(\"ab\", resultList.get(1));\n    Assert.assertEquals(\"zz\", resultList.get(2));\n\n  }","commit_id":"b7a85cc6d212980a0739587aa27e486e5f08c4f1","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Encodes a '.' separated entity into bytes. If the entity has less than the given parts or {@code null},\n   * the remaining bytes would be padded by the given padding.\n   * @param type Type of the entity.\n   * @param entity Value of the entity.\n   * @param padding Padding byte to apply for padding.\n   * @return byte[] representing the given entity that may have padding at the end.\n   */\n  public byte[] paddedEncode(MetricsEntityType type, String entity, int padding) {\n    int idSize = entityTable.getIdSize();\n    int depth = getDepth(type);\n    String[] entityParts = entity == null ? EMPTY_STRINGS : ENTITY_SPLITTER.split(entity, depth);\n    byte[] result = new byte[depth * idSize];\n\n    for (int i = 0; i < entityParts.length; i++) {\n      if (entityParts[i].isEmpty()) {\n        throw new IllegalArgumentException(\"found empty part in metrics entity \" + entity);\n      }\n      idToBytes(entityTable.getId(type.getType() + i, entityParts[i]), idSize, result, i * idSize);\n    }\n\n    Arrays.fill(result, entityParts.length * idSize, depth * idSize, (byte) (padding & 0xff));\n    return result;\n  }","id":2669,"modified_method":"/**\n   * Encodes a '.' separated entity into bytes. If the entity has less than the given parts or {@code null},\n   * the remaining bytes would be padded by the given padding.\n   * @param type Type of the entity.\n   * @param entity Value of the entity.\n   * @param padding Padding byte to apply for padding.\n   * @return byte[] representing the given entity that may have padding at the end.\n   */\n  public byte[] paddedEncode(MetricsEntityType type, String entity, int padding) {\n    int idSize = entityTable.getIdSize();\n    int depth = getDepth(type);\n\n    byte[] result = new byte[depth * idSize];\n    paddedEncode(type, entity, padding, result, 0);\n    return  result;\n  }","commit_id":"b7a85cc6d212980a0739587aa27e486e5f08c4f1","url":"https://github.com/caskdata/cdap"},{"original_method":"private Iterator<MetricsScanResult> createIterator() {\n    return new AbstractIterator<MetricsScanResult>() {\n      @Override\n      protected MetricsScanResult computeNext() {\n        Row rowResult;\n        while ((rowResult = scanner.next()) != null) {\n          rowScanned++;\n          byte[] rowKey = rowResult.getRow();\n          Map<byte[], byte[]> columnValue = rowResult.getColumns();\n\n          // Decode context and metric from key\n          int offset = 0;\n          String context = entityCodec.decode(MetricsEntityType.CONTEXT, rowKey, offset);\n          // Always have a \".\" suffix for unique matching\n          if (query.getContextPrefix() != null && !(context + \".\").startsWith(query.getContextPrefix())) {\n            continue;\n          }\n\n          offset += entityCodec.getEncodedSize(MetricsEntityType.CONTEXT);\n          String metric = entityCodec.decode(MetricsEntityType.METRIC, rowKey, offset);\n          // Always have a \".\" suffix for unique matching\n          if (query.getMetricPrefix() != null && !(metric + \".\").startsWith(query.getMetricPrefix())) {\n            continue;\n          }\n\n          offset += entityCodec.getEncodedSize(MetricsEntityType.METRIC);\n\n          String tag = entityCodec.decode(MetricsEntityType.TAG, rowKey, offset);\n          // If there is no tag in the key, query shouldn't have tag\n          if (tag.equals(MetricsConstants.EMPTY_TAG) && query.getTagPrefix() != null) {\n            continue;\n          }\n          // If there is tag in the query, it must match with the row key.\n          if (query.getTagPrefix() != null && !(tag + \".\").startsWith(query.getTagPrefix())) {\n            continue;\n          }\n\n          // Next 4 bytes is timebase.\n          offset += entityCodec.getEncodedSize(MetricsEntityType.TAG);\n          int timeBase = Bytes.toInt(rowKey, offset, 4);\n\n          // Then it's the runId\n          offset += 4;\n          String runId = entityCodec.decode(MetricsEntityType.RUN, rowKey, offset);\n\n          // If there is runId in the query, it must match with the row key.\n          if (query.getRunId() != null && !query.getRunId().equals(runId)) {\n            continue;\n          }\n\n          return new MetricsScanResult(context, runId, metric, tag.equals(MetricsConstants.EMPTY_TAG) ? null : tag,\n                                      new TimeValueIterable(timeBase, resolution,\n                                                            query.getStartTime(), query.getEndTime(),\n                                                            columnValue.entrySet()));\n        }\n\n        scanner.close();\n        return endOfData();\n      }\n    };\n  }","id":2670,"modified_method":"private Iterator<MetricsScanResult> createIterator() {\n    return new AbstractIterator<MetricsScanResult>() {\n      @Override\n      protected MetricsScanResult computeNext() {\n        Row rowResult;\n        while ((rowResult = scanner.next()) != null) {\n          rowScanned++;\n          byte[] rowKey = rowResult.getRow();\n          Map<byte[], byte[]> columnValue = rowResult.getColumns();\n\n          // Decode context and metric from key\n          int offset = 0;\n          String context = entityCodec.decode(MetricsEntityType.CONTEXT, rowKey, offset);\n          // Always have a \".\" suffix for unique matching\n          if (query.getContextPrefix() != null && !(context + \".\").startsWith(query.getContextPrefix())) {\n            continue;\n          }\n\n          offset += entityCodec.getEncodedSize(MetricsEntityType.CONTEXT);\n          String metric = entityCodec.decode(MetricsEntityType.METRIC, rowKey, offset);\n          // Always have a \".\" suffix for unique matching\n          if (!(metric + \".\").startsWith(query.getMetricPrefix())) {\n            continue;\n          }\n\n          offset += entityCodec.getEncodedSize(MetricsEntityType.METRIC);\n\n          String tag = entityCodec.decode(MetricsEntityType.TAG, rowKey, offset);\n          // If there is no tag in the key, query shouldn't have tag\n          if (tag.equals(MetricsConstants.EMPTY_TAG) && query.getTagPrefix() != null) {\n            continue;\n          }\n          // If there is tag in the query, it must match with the row key.\n          if (query.getTagPrefix() != null && !(tag + \".\").startsWith(query.getTagPrefix())) {\n            continue;\n          }\n\n          // Next 4 bytes is timebase.\n          offset += entityCodec.getEncodedSize(MetricsEntityType.TAG);\n          int timeBase = Bytes.toInt(rowKey, offset, 4);\n\n          // Then it's the runId\n          offset += 4;\n          String runId = entityCodec.decode(MetricsEntityType.RUN, rowKey, offset);\n\n          // If there is runId in the query, it must match with the row key.\n          if (query.getRunId() != null && !query.getRunId().equals(runId)) {\n            continue;\n          }\n\n          return new MetricsScanResult(context, runId, metric, tag.equals(MetricsConstants.EMPTY_TAG) ? null : tag,\n                                      new TimeValueIterable(timeBase, resolution,\n                                                            query.getStartTime(), query.getEndTime(),\n                                                            columnValue.entrySet()));\n        }\n\n        scanner.close();\n        return endOfData();\n      }\n    };\n  }","commit_id":"b7a85cc6d212980a0739587aa27e486e5f08c4f1","url":"https://github.com/caskdata/cdap"},{"original_method":"public List<String> getNextLevelContexts(MetricsScanQuery query) throws OperationException {\n    return getAvailableContextAndMetrics(query, true);\n  }","id":2671,"modified_method":"/**\n   * Given the Context in the query, this method returns the list of available context at the next level.\n   * if the context is null , this returns the list of context at the first level.\n   * @param query\n   * @return List of contexts at a given level\n   * @throws OperationException\n   */\n  public List<String> getNextLevelContexts(MetricsScanQuery query) throws OperationException {\n    return getAvailableContextAndMetrics(query, true);\n  }","commit_id":"b7a85cc6d212980a0739587aa27e486e5f08c4f1","url":"https://github.com/caskdata/cdap"},{"original_method":"private List<String> getAvailableContextAndMetrics(MetricsScanQuery query, boolean isContextQuery)\n    throws OperationException {\n    List<String> metricsScanResults = Lists.newArrayList();\n    int startTimeBase = getTimeBase(query.getStartTime());\n    int endTimeBase = getTimeBase(query.getEndTime());\n\n    byte[] contextStart = null, contextEnd = null, metricsPrefix = null;\n    byte[] startRow = null, endRow = null;\n    byte[][] columns = null;\n    String tagPrefix = query.getTagPrefix();\n    if (tagPrefix == null) {\n      tagPrefix = MetricsConstants.EMPTY_TAG;\n    }\n    if (isContextQuery) {\n      contextStart = entityCodec.paddedEncode(MetricsEntityType.CONTEXT, query.getContextPrefix(), 0);\n      contextEnd = entityCodec.paddedEncode(MetricsEntityType.CONTEXT, query.getContextPrefix(), 0xff);\n    } else {\n      metricsPrefix = entityCodec.paddedEncode(MetricsEntityType.METRIC, query.getMetricPrefix(), 0);\n    }\n\n    Row rowResult;\n    do {\n      if (isContextQuery) {\n        startRow = getNextPaddedKey(contextStart, query.getRunId(),\n                                    query.getMetricPrefix(), tagPrefix, startTimeBase, 0);\n        endRow = getNextPaddedKey(contextEnd, query.getRunId(),\n                                  query.getMetricPrefix(), tagPrefix, endTimeBase + 1, 0xff);\n      } else {\n        startRow = getNextPaddedKey(query.getContextPrefix(), query.getRunId(),\n                                    metricsPrefix, tagPrefix, startTimeBase, 0);\n        endRow = getNextPaddedKey(query.getContextPrefix(), query.getRunId(),\n                                  metricsPrefix, tagPrefix, endTimeBase + 1, 0xff);\n      }\n\n      FuzzyRowFilter filter = getFilter(query, startTimeBase, endTimeBase + 1, false, FOUR_ONE_BYTES);\n\n      ScannerFields fields = new ScannerFields(startRow, endRow, columns, filter);\n      Scanner scanner = null;\n      try {\n        scanner = timeSeriesTable.scan(fields.startRow, fields.endRow, fields.columns, fields.filter);\n      } catch (Exception e) {\n        throw new OperationException(StatusCode.INTERNAL_ERROR, e.getMessage(), e);\n      }\n\n      rowResult = scanner.next();\n      if (rowResult != null) {\n        byte[] rowKey = rowResult.getRow();\n        // Decode context and metric from key\n        int offset = 0;\n        String contextStr = entityCodec.decode(MetricsEntityType.CONTEXT, rowKey, offset);\n\n        // Always have a \".\" suffix for unique matching\n        if (query.getContextPrefix() != null && !(contextStr + \".\").startsWith(query.getContextPrefix())) {\n          scanner.close();\n          break;\n        }\n\n        offset += entityCodec.getEncodedSize(MetricsEntityType.CONTEXT);\n        String metricName = entityCodec.decode(MetricsEntityType.METRIC, rowKey, offset);\n\n        if (isContextQuery) {\n          contextStart = getNextContextTarget(contextStart, query.getContextPrefix());\n          metricsScanResults.add(contextStr);\n        } else {\n          metricsPrefix = getNextMetricsTarget(\n            Arrays.copyOfRange(rowKey, entityCodec.getEncodedSize(MetricsEntityType.CONTEXT),\n                               entityCodec.getEncodedSize(MetricsEntityType.CONTEXT) +\n                                 entityCodec.getEncodedSize(MetricsEntityType.METRIC)));\n          metricsScanResults.add(metricName);\n        }\n      }\n      scanner.close();\n    } while (rowResult != null);\n\n    return metricsScanResults;\n  }","id":2672,"modified_method":"/**\n   * If @param isContextQuery, is true we return the list of unique available contexts at the next level,\n   * if its false, we would return the available unique metrics in a given context\n   * @param query\n   * @param isContextQuery\n   * @return\n   * @throws OperationException\n   */\n  private List<String> getAvailableContextAndMetrics(MetricsScanQuery query, boolean isContextQuery)\n    throws OperationException {\n    List<String> metricsScanResults = Lists.newArrayList();\n    int startTimeBase = getTimeBase(query.getStartTime());\n    int endTimeBase = getTimeBase(query.getEndTime());\n    byte[][] columns = null;\n    String tagPrefix = query.getTagPrefix();\n    if (tagPrefix == null) {\n      tagPrefix = MetricsConstants.EMPTY_TAG;\n    }\n\n    byte[] startRow = entityCodec.paddedEncode(query.getContextPrefix(), query.getMetricPrefix(), tagPrefix,\n                                        startTimeBase, query.getRunId(), 0);\n    byte[] endRow = entityCodec.paddedEncode(query.getContextPrefix(), query.getMetricPrefix(), tagPrefix,\n                                      endTimeBase + 1, query.getRunId(), 0xff);\n\n    Row rowResult;\n    // does multiple scan, but we skip duplicate row-keys by incrementing\n    // the sub-context or metrics part of rowkey before each scan.\n    do {\n      FuzzyRowFilter filter = getFilter(query, startTimeBase, endTimeBase + 1, false, FOUR_ONE_BYTES);\n\n      ScannerFields fields = new ScannerFields(startRow, endRow, columns, filter);\n      Scanner scanner = null;\n      try {\n        scanner = timeSeriesTable.scan(fields.startRow, fields.endRow, fields.columns, fields.filter);\n      } catch (Exception e) {\n        throw new OperationException(StatusCode.INTERNAL_ERROR, e.getMessage(), e);\n      }\n\n      rowResult = scanner.next();\n      if (rowResult != null) {\n        byte[] rowKey = rowResult.getRow();\n        // Decode context and metric from key\n        int offset = 0;\n        String contextStr = entityCodec.decode(MetricsEntityType.CONTEXT, rowKey, offset);\n\n        // Always have a \".\" suffix for unique matching\n        if (query.getContextPrefix() != null && !(contextStr + \".\").startsWith(query.getContextPrefix())) {\n          scanner.close();\n          break;\n        }\n\n        offset += entityCodec.getEncodedSize(MetricsEntityType.CONTEXT);\n        String metricName = entityCodec.decode(MetricsEntityType.METRIC, rowKey, offset);\n\n        if (isContextQuery) {\n          // update the rowkey, by incrementing the next-level context part\n          ByteBuffer contextPart = ByteBuffer.wrap(rowKey);\n          contextPart.limit(entityCodec.getEncodedSize(MetricsEntityType.CONTEXT));\n          contextPart = getNextContextTarget(contextPart, query.getContextPrefix());\n          if (contextPart == null) {\n            scanner.close();\n            break;\n          }\n          //update the start-row to be row-key for next scan\n          startRow = rowKey;\n          metricsScanResults.add(contextStr);\n        } else {\n          // update the rowkey, by incrementing the metrics part\n          ByteBuffer metricsPart = ByteBuffer.wrap(rowKey);\n          metricsPart.position(entityCodec.getEncodedSize(MetricsEntityType.CONTEXT));\n          metricsPart.limit(entityCodec.getEncodedSize(MetricsEntityType.CONTEXT) +\n                              entityCodec.getEncodedSize(MetricsEntityType.METRIC));\n          metricsPart = stopKeyForPrefix(metricsPart);\n          if (metricsPart == null) {\n            scanner.close();\n            break;\n          }\n          //update the start-row to be row-key for next scan\n          startRow = rowKey;\n          metricsScanResults.add(metricName);\n        }\n      }\n      // no more matching rows found\n      scanner.close();\n    } while (rowResult != null);\n\n    return metricsScanResults;\n  }","commit_id":"b7a85cc6d212980a0739587aa27e486e5f08c4f1","url":"https://github.com/caskdata/cdap"},{"original_method":"private ScannerFields getScannerFields(MetricsScanQuery query, boolean shouldMatchAllTags) {\n    int startTimeBase = getTimeBase(query.getStartTime());\n    int endTimeBase = getTimeBase(query.getEndTime());\n\n    byte[][] columns = null;\n    if (startTimeBase == endTimeBase) {\n      // If on the same timebase, we only need subset of columns\n      int startCol = (int) (query.getStartTime() - startTimeBase) / resolution;\n      int endCol = (int) (query.getEndTime() - endTimeBase) / resolution;\n      columns = new byte[endCol - startCol + 1][];\n\n      for (int i = 0; i < columns.length; i++) {\n        columns[i] = Bytes.toBytes((short) (startCol + i));\n      }\n    }\n\n    String tagPrefix = query.getTagPrefix();\n    if (!shouldMatchAllTags && tagPrefix == null) {\n      tagPrefix = MetricsConstants.EMPTY_TAG;\n    }\n    byte[] startRow = getPaddedKey(query.getContextPrefix(), query.getRunId(),\n                                   query.getMetricPrefix(), tagPrefix, startTimeBase, 0);\n    byte[] endRow = getPaddedKey(query.getContextPrefix(), query.getRunId(),\n                                 query.getMetricPrefix(), tagPrefix, endTimeBase + 1, 0xff);\n    FuzzyRowFilter filter = getFilter(query, startTimeBase, endTimeBase, shouldMatchAllTags, FOUR_ZERO_BYTES);\n\n    return new ScannerFields(startRow, endRow, columns, filter);\n  }","id":2673,"modified_method":"private ScannerFields getScannerFields(MetricsScanQuery query, boolean shouldMatchAllTags) {\n    int startTimeBase = getTimeBase(query.getStartTime());\n    int endTimeBase = getTimeBase(query.getEndTime());\n\n    byte[][] columns = null;\n    if (startTimeBase == endTimeBase) {\n      // If on the same timebase, we only need subset of columns\n      int startCol = (int) (query.getStartTime() - startTimeBase) / resolution;\n      int endCol = (int) (query.getEndTime() - endTimeBase) / resolution;\n      columns = new byte[endCol - startCol + 1][];\n\n      for (int i = 0; i < columns.length; i++) {\n        columns[i] = Bytes.toBytes((short) (startCol + i));\n      }\n    }\n\n    String tagPrefix = query.getTagPrefix();\n    if (!shouldMatchAllTags && tagPrefix == null) {\n      tagPrefix = MetricsConstants.EMPTY_TAG;\n    }\n    byte[] startRow = entityCodec.paddedEncode(query.getContextPrefix(), query.getMetricPrefix(), tagPrefix,\n                                               startTimeBase, query.getRunId(), 0);\n    byte[] endRow = entityCodec.paddedEncode(query.getContextPrefix(), query.getMetricPrefix(), tagPrefix,\n                                             endTimeBase + 1, query.getRunId(), 0xff);\n    FuzzyRowFilter filter = getFilter(query, startTimeBase, endTimeBase, shouldMatchAllTags, FOUR_ZERO_BYTES);\n\n    return new ScannerFields(startRow, endRow, columns, filter);\n  }","commit_id":"b7a85cc6d212980a0739587aa27e486e5f08c4f1","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Deletes all the row keys which match the context prefix and metric prefix.  Context and Metric cannot both be\n   * null, as full table deletes should be done through the clear method.\n   *\n   * @param contextPrefix Prefix of the context to match, null means any context.\n   * @param metricPrefix Prefix of the metric to match, null means any metric.\n   * @throws OperationException if there is an error in deleting entries.\n   */\n  public void delete(String contextPrefix, String metricPrefix) throws OperationException {\n    Preconditions.checkArgument(contextPrefix != null || metricPrefix != null,\n                                \"context and metric cannot both be null\");\n    if (metricPrefix == null) {\n      delete(contextPrefix);\n    } else {\n      byte[] startRow = getPaddedKey(contextPrefix, \"0\", metricPrefix, null, 0, 0);\n      byte[] endRow = getPaddedKey(contextPrefix, \"0\", metricPrefix, null, Integer.MAX_VALUE, 0xff);\n      try {\n        // Create fuzzy row filter\n        ImmutablePair<byte[], byte[]> contextPair = entityCodec.paddedFuzzyEncode(MetricsEntityType.CONTEXT,\n                                                                                  contextPrefix, 0);\n        ImmutablePair<byte[], byte[]> metricPair = entityCodec.paddedFuzzyEncode(MetricsEntityType.METRIC,\n                                                                                 metricPrefix, 0);\n        ImmutablePair<byte[], byte[]> tagPair = entityCodec.paddedFuzzyEncode(MetricsEntityType.TAG, null, 0);\n        ImmutablePair<byte[], byte[]> runIdPair = entityCodec.paddedFuzzyEncode(MetricsEntityType.RUN, null, 0);\n        FuzzyRowFilter filter = new FuzzyRowFilter(ImmutableList.of(ImmutablePair.of(\n          Bytes.concat(contextPair.getFirst(), metricPair.getFirst(), tagPair.getFirst(),\n                       Bytes.toBytes(0), runIdPair.getFirst()),\n          Bytes.concat(contextPair.getSecond(), metricPair.getSecond(), tagPair.getSecond(),\n                       FOUR_ONE_BYTES, runIdPair.getSecond()))));\n\n        timeSeriesTable.deleteRange(startRow, endRow, null, filter);\n      } catch (Exception e) {\n        throw new OperationException(StatusCode.INTERNAL_ERROR, e.getMessage(), e);\n      }\n    }\n  }","id":2674,"modified_method":"/**\n   * Deletes all the row keys which match the context prefix and metric prefix.  Context and Metric cannot both be\n   * null, as full table deletes should be done through the clear method.\n   *\n   * @param contextPrefix Prefix of the context to match, null means any context.\n   * @param metricPrefix Prefix of the metric to match, null means any metric.\n   * @throws OperationException if there is an error in deleting entries.\n   */\n  public void delete(String contextPrefix, String metricPrefix) throws OperationException {\n    Preconditions.checkArgument(contextPrefix != null || metricPrefix != null,\n                                \"context and metric cannot both be null\");\n    if (metricPrefix == null) {\n      delete(contextPrefix);\n    } else {\n      byte[] startRow = entityCodec.paddedEncode(contextPrefix, metricPrefix, null, 0, \"0\", 0);\n      byte[] endRow = entityCodec.paddedEncode(contextPrefix, metricPrefix, null, Integer.MAX_VALUE, \"0\", 0xff);\n      try {\n        // Create fuzzy row filter\n        ImmutablePair<byte[], byte[]> contextPair = entityCodec.paddedFuzzyEncode(MetricsEntityType.CONTEXT,\n                                                                                  contextPrefix, 0);\n        ImmutablePair<byte[], byte[]> metricPair = entityCodec.paddedFuzzyEncode(MetricsEntityType.METRIC,\n                                                                                 metricPrefix, 0);\n        ImmutablePair<byte[], byte[]> tagPair = entityCodec.paddedFuzzyEncode(MetricsEntityType.TAG, null, 0);\n        ImmutablePair<byte[], byte[]> runIdPair = entityCodec.paddedFuzzyEncode(MetricsEntityType.RUN, null, 0);\n        FuzzyRowFilter filter = new FuzzyRowFilter(ImmutableList.of(ImmutablePair.of(\n          Bytes.concat(contextPair.getFirst(), metricPair.getFirst(), tagPair.getFirst(),\n                       Bytes.toBytes(0), runIdPair.getFirst()),\n          Bytes.concat(contextPair.getSecond(), metricPair.getSecond(), tagPair.getSecond(),\n                       FOUR_ONE_BYTES, runIdPair.getSecond()))));\n\n        timeSeriesTable.deleteRange(startRow, endRow, null, filter);\n      } catch (Exception e) {\n        throw new OperationException(StatusCode.INTERNAL_ERROR, e.getMessage(), e);\n      }\n    }\n  }","commit_id":"b7a85cc6d212980a0739587aa27e486e5f08c4f1","url":"https://github.com/caskdata/cdap"},{"original_method":"private byte[] getNextContextTarget(byte[] context, String contextPrefix) {\n    int idSize = entityCodec.getIdSize();\n    int targetContextLocation = contextPrefix == null ? 0 : StringUtils.countMatches(contextPrefix, \".\") + 1;\n    byte[] targetContextIncrement = Bytes.stopKeyForPrefix(\n      Arrays.copyOfRange(context, idSize * targetContextLocation, (idSize * targetContextLocation + idSize)));\n    return Bytes.concat(Bytes.head(context, idSize * targetContextLocation), targetContextIncrement,\n                        Bytes.tail(context, entityCodec.getEncodedSize(\n                          MetricsEntityType.CONTEXT) - (idSize + 1) * targetContextLocation));\n  }","id":2675,"modified_method":"/**\n   * Given the context and contextPrefix, this increments the context part after the contextPrefix, or the first context\n   * if no contextPrefix is provided. returns null if we cannot increment and have reached max value for the\n   * context part.\n   * @param context\n   * @param contextPrefix\n   * @return\n   */\n  private ByteBuffer getNextContextTarget(ByteBuffer context, String contextPrefix) {\n    int idSize = entityCodec.getIdSize();\n    // if null , we only increment the first part of context, otherwise we increment the part after the contextPrefix.\n    int targetContextLocation = contextPrefix == null ? 0 : StringUtils.countMatches(contextPrefix, \".\") + 1;\n    ByteBuffer targetContextPart = context;\n    targetContextPart.position(idSize * targetContextLocation);\n    targetContextPart.limit(idSize * targetContextLocation + idSize);\n    return stopKeyForPrefix(targetContextPart);\n  }","commit_id":"b7a85cc6d212980a0739587aa27e486e5f08c4f1","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n     * End\n     * \n     * @param descr\n     */\n    private void visit(ReturnValueRestrictionDescr descr) {\n\n        ReturnValueRestriction restriction = new ReturnValueRestriction( pattern );\n\n        restriction.setPatternIsNot( pattern.isPatternNot() );\n        restriction.setConstraintPath( constraint.getPath() );\n        restriction.setFieldPath( constraint.getFieldPath() );\n        restriction.setOperator( Operator.determineOperator( descr.getEvaluator(),\n                                                             descr.isNegated() ) );\n        restriction.setClassMethodName( descr.getClassMethodName() );\n        restriction.setContent( descr.getContent() );\n        restriction.setDeclarations( descr.getDeclarations() );\n        restriction.setOrderNumber( orderNumber );\n        restriction.setParentPath( pattern.getPath() );\n        restriction.setParentType( pattern.getVerifierComponentType() );\n\n        data.add( restriction );\n        solvers.addPatternComponent( restriction );\n\n    }","id":2676,"modified_method":"/**\n     * End\n     *\n     * @param descr\n     */\n    private void visit(ReturnValueRestrictionDescr descr) {\n\n        ReturnValueRestriction restriction = new ReturnValueRestriction(pattern);\n\n        restriction.setPatternIsNot(pattern.isPatternNot());\n        restriction.setFieldPath(field.getPath());\n        restriction.setOperator(Operator.determineOperator(descr.getEvaluator(),\n                descr.isNegated()));\n        restriction.setClassMethodName(descr.getClassMethodName());\n        restriction.setContent(descr.getContent());\n        restriction.setDeclarations(descr.getDeclarations());\n        restriction.setOrderNumber(orderNumber);\n        restriction.setParentPath(pattern.getPath());\n        restriction.setParentType(pattern.getVerifierComponentType());\n\n        data.add(restriction);\n        solvers.addPatternComponent(restriction);\n\n    }","commit_id":"73c467491e6b66bbd5e7140b050375a2d913801a","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\n     * End\n     * \n     * @param descr\n     */\n    private void visit(LiteralRestrictionDescr descr) {\n\n        LiteralRestriction restriction = LiteralRestriction.createRestriction( pattern,\n                                                                               descr.getText() );\n\n        restriction.setPatternIsNot( pattern.isPatternNot() );\n        restriction.setConstraintPath( constraint.getPath() );\n        restriction.setFieldPath( constraint.getFieldPath() );\n        restriction.setOperator( Operator.determineOperator( descr.getEvaluator(),\n                                                             descr.isNegated() ) );\n        restriction.setOrderNumber( orderNumber );\n        restriction.setParentPath( pattern.getPath() );\n        restriction.setParentType( pattern.getVerifierComponentType() );\n\n        // Set field value, if it is unset.\n        field.setFieldType( restriction.getValueType() );\n\n        data.add( restriction );\n        solvers.addPatternComponent( restriction );\n    }","id":2677,"modified_method":"/**\n     * End\n     *\n     * @param descr\n     */\n    private void visit(LiteralRestrictionDescr descr) {\n\n        LiteralRestriction restriction = LiteralRestriction.createRestriction(pattern,\n                descr.getText());\n\n        restriction.setPatternIsNot(pattern.isPatternNot());\n        restriction.setFieldPath(field.getPath());\n        restriction.setOperator(Operator.determineOperator(descr.getEvaluator(),\n                descr.isNegated()));\n        restriction.setOrderNumber(orderNumber);\n        restriction.setParentPath(pattern.getPath());\n        restriction.setParentType(pattern.getVerifierComponentType());\n\n        // Set field value, if it is unset.\n        field.setFieldType(restriction.getValueType());\n\n        data.add(restriction);\n        solvers.addPatternComponent(restriction);\n    }","commit_id":"73c467491e6b66bbd5e7140b050375a2d913801a","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void visitFieldConstraintDescr(FieldConstraintDescr descr) throws UnknownDescriptionException {\n\n        field = data.getFieldByObjectTypeAndFieldName( objectType.getFullName(),\n                                                       descr.getFieldName() );\n        if ( field == null ) {\n            field = ObjectTypeFactory.createField( descr.getFieldName(),\n                                                   objectType );\n            data.add( field );\n        }\n\n        constraint = new Constraint( pattern );\n\n        constraint.setFieldPath( field.getPath() );\n        constraint.setFieldName( field.getName() );\n        constraint.setPatternIsNot( pattern.isPatternNot() );\n        constraint.setFieldPath( field.getPath() );\n        constraint.setOrderNumber( orderNumber );\n        constraint.setParentPath( pattern.getPath() );\n        constraint.setParentType( pattern.getVerifierComponentType() );\n\n        data.add( constraint );\n\n        visit( descr.getRestriction() );\n    }","id":2678,"modified_method":"public void visitFieldConstraintDescr(FieldConstraintDescr descr) throws UnknownDescriptionException {\n\n        field = data.getFieldByObjectTypeAndFieldName(objectType.getFullName(),\n                descr.getFieldName());\n        if (field == null) {\n            field = ObjectTypeFactory.createField(descr.getFieldName(),\n                    objectType);\n            data.add(field);\n        }\n\n        visit(descr.getRestriction());\n    }","commit_id":"73c467491e6b66bbd5e7140b050375a2d913801a","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\n     * End\n     * \n     * Foo( bar == $bar )<br>\n     * $bar is a VariableRestrictionDescr\n     * \n     * @param descr\n     */\n    private void visit(VariableRestrictionDescr descr) {\n\n        Variable variable = data.getVariableByRuleAndVariableName( pattern.getRuleName(),\n                                                                   descr.getIdentifier() );\n        VariableRestriction restriction = new VariableRestriction( pattern );\n\n        restriction.setPatternIsNot( pattern.isPatternNot() );\n        restriction.setConstraintPath( constraint.getPath() );\n        restriction.setFieldPath( constraint.getFieldPath() );\n        restriction.setOperator( Operator.determineOperator( descr.getEvaluator(),\n                                                             descr.isNegated() ) );\n        restriction.setVariable( variable );\n        restriction.setOrderNumber( orderNumber );\n        restriction.setParentPath( pattern.getPath() );\n        restriction.setParentType( pattern.getVerifierComponentType() );\n\n        // Set field value, if it is unset.\n        field.setFieldType( Field.VARIABLE );\n\n        data.add( restriction );\n        solvers.addPatternComponent( restriction );\n    }","id":2679,"modified_method":"/**\n     * End\n     * <p/>\n     * Foo( bar == $bar )<br>\n     * $bar is a VariableRestrictionDescr\n     *\n     * @param descr\n     */\n    private void visit(VariableRestrictionDescr descr) {\n\n        Variable variable = data.getVariableByRuleAndVariableName(pattern.getRuleName(),\n                descr.getIdentifier());\n        VariableRestriction restriction = new VariableRestriction(pattern);\n\n        restriction.setPatternIsNot(pattern.isPatternNot());\n        restriction.setFieldPath(field.getPath());\n        restriction.setOperator(Operator.determineOperator(descr.getEvaluator(),\n                descr.isNegated()));\n        restriction.setVariable(variable);\n        restriction.setOrderNumber(orderNumber);\n        restriction.setParentPath(pattern.getPath());\n        restriction.setParentType(pattern.getVerifierComponentType());\n\n        // Set field value, if it is unset.\n        field.setFieldType(Field.VARIABLE);\n\n        data.add(restriction);\n        solvers.addPatternComponent(restriction);\n    }","commit_id":"73c467491e6b66bbd5e7140b050375a2d913801a","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\n     * End\n     * \n     * @param descr\n     */\n    private void visit(QualifiedIdentifierRestrictionDescr descr) {\n\n        String text = descr.getText();\n\n        String base = text.substring( 0,\n                                      text.indexOf( \".\" ) );\n        String fieldName = text.substring( text.indexOf( \".\" ) );\n\n        Variable variable = data.getVariableByRuleAndVariableName( pattern.getRuleName(),\n                                                                   base );\n\n        if ( variable != null ) {\n\n            QualifiedIdentifierRestriction restriction = new QualifiedIdentifierRestriction( pattern );\n\n            restriction.setPatternIsNot( pattern.isPatternNot() );\n            restriction.setConstraintPath( constraint.getPath() );\n            restriction.setFieldPath( constraint.getFieldPath() );\n            restriction.setOperator( Operator.determineOperator( descr.getEvaluator(),\n                                                                 descr.isNegated() ) );\n            restriction.setVariablePath( variable.getPath() );\n            restriction.setVariableName( base );\n            restriction.setVariablePath( fieldName );\n            restriction.setOrderNumber( orderNumber );\n            restriction.setParentPath( pattern.getPath() );\n            restriction.setParentType( pattern.getVerifierComponentType() );\n\n            // Set field value, if it is not set.\n            field.setFieldType( Field.VARIABLE );\n\n            variable.setObjectTypeType( VerifierComponentType.FIELD.getType() );\n\n            data.add( restriction );\n            solvers.addPatternComponent( restriction );\n        } else {\n\n            EnumField enumField = (EnumField) data.getFieldByObjectTypeAndFieldName( base,\n                                                                                     fieldName );\n            if ( enumField == null ) {\n\n                ObjectType objectType = data.getObjectTypeByFullName( base );\n\n                if ( objectType == null ) {\n                    Import objectImport = data.getImportByName( base );\n\n                    if ( objectImport != null ) {\n                        objectType = ObjectTypeFactory.createObjectType( objectImport );\n                    } else {\n                        objectType = ObjectTypeFactory.createObjectType( base );\n                    }\n\n                    data.add( objectType );\n                }\n\n                enumField = new EnumField();\n\n                enumField.setObjectTypePath( objectType.getPath() );\n                enumField.setObjectTypeName( objectType.getName() );\n                enumField.setName( fieldName );\n\n                objectType.getFields().add( enumField );\n\n                data.add( enumField );\n            }\n\n            EnumRestriction restriction = new EnumRestriction( pattern );\n\n            restriction.setPatternIsNot( pattern.isPatternNot() );\n            restriction.setConstraintPath( constraint.getPath() );\n            restriction.setFieldPath( constraint.getFieldPath() );\n            restriction.setOperator( Operator.determineOperator( descr.getEvaluator(),\n                                                                 descr.isNegated() ) );\n            restriction.setEnumBasePath( enumField.getPath() );\n            restriction.setEnumBase( base );\n            restriction.setEnumName( fieldName );\n            restriction.setOrderNumber( orderNumber );\n            restriction.setParentPath( pattern.getPath() );\n            restriction.setParentType( pattern.getVerifierComponentType() );\n\n            // Set field value, if it is not set.\n            field.setFieldType( Field.ENUM );\n\n            data.add( restriction );\n            solvers.addPatternComponent( restriction );\n        }\n    }","id":2680,"modified_method":"/**\n     * End\n     *\n     * @param descr\n     */\n    private void visit(QualifiedIdentifierRestrictionDescr descr) {\n\n        String text = descr.getText();\n\n        String base = text.substring(0,\n                text.indexOf(\".\"));\n        String fieldName = text.substring(text.indexOf(\".\"));\n\n        Variable variable = data.getVariableByRuleAndVariableName(pattern.getRuleName(),\n                base);\n\n        if (variable != null) {\n\n            QualifiedIdentifierRestriction restriction = new QualifiedIdentifierRestriction(pattern);\n\n            restriction.setPatternIsNot(pattern.isPatternNot());\n            restriction.setFieldPath(field.getPath());\n            restriction.setOperator(Operator.determineOperator(descr.getEvaluator(),\n                    descr.isNegated()));\n            restriction.setVariablePath(variable.getPath());\n            restriction.setVariableName(base);\n            restriction.setVariablePath(fieldName);\n            restriction.setOrderNumber(orderNumber);\n            restriction.setParentPath(pattern.getPath());\n            restriction.setParentType(pattern.getVerifierComponentType());\n\n            // Set field value, if it is not set.\n            field.setFieldType(Field.VARIABLE);\n\n            variable.setObjectTypeType(VerifierComponentType.FIELD.getType());\n\n            data.add(restriction);\n            solvers.addPatternComponent(restriction);\n        } else {\n\n            EnumField enumField = (EnumField) data.getFieldByObjectTypeAndFieldName(base,\n                    fieldName);\n            if (enumField == null) {\n\n                ObjectType objectType = data.getObjectTypeByFullName(base);\n\n                if (objectType == null) {\n                    Import objectImport = data.getImportByName(base);\n\n                    if (objectImport != null) {\n                        objectType = ObjectTypeFactory.createObjectType(objectImport);\n                    } else {\n                        objectType = ObjectTypeFactory.createObjectType(base);\n                    }\n\n                    data.add(objectType);\n                }\n\n                enumField = new EnumField();\n\n                enumField.setObjectTypePath(objectType.getPath());\n                enumField.setObjectTypeName(objectType.getName());\n                enumField.setName(fieldName);\n\n                objectType.getFields().add(enumField);\n\n                data.add(enumField);\n            }\n\n            EnumRestriction restriction = new EnumRestriction(pattern);\n\n            restriction.setPatternIsNot(pattern.isPatternNot());\n            restriction.setFieldPath(field.getPath());\n            restriction.setOperator(Operator.determineOperator(descr.getEvaluator(),\n                    descr.isNegated()));\n            restriction.setEnumBasePath(enumField.getPath());\n            restriction.setEnumBase(base);\n            restriction.setEnumName(fieldName);\n            restriction.setOrderNumber(orderNumber);\n            restriction.setParentPath(pattern.getPath());\n            restriction.setParentType(pattern.getVerifierComponentType());\n\n            // Set field value, if it is not set.\n            field.setFieldType(Field.ENUM);\n\n            data.add(restriction);\n            solvers.addPatternComponent(restriction);\n        }\n    }","commit_id":"73c467491e6b66bbd5e7140b050375a2d913801a","url":"https://github.com/droolsjbpm/drools"},{"original_method":"@Override\n    protected void visit(Object descr) throws UnknownDescriptionException {\n        if ( descr instanceof AccumulateDescr ) {\n            visitAccumulateDescr( (AccumulateDescr) descr );\n        } else if ( descr instanceof CollectDescr ) {\n            visitCollectDescr( (CollectDescr) descr );\n        } else if ( descr instanceof EntryPointDescr ) {\n            visitEntryPointDescr( (EntryPointDescr) descr );\n        } else if ( descr instanceof FromDescr ) {\n            visitFromDescr( (FromDescr) descr );\n        } else if ( descr instanceof AndDescr ) {\n            visitAndDescr( (AndDescr) descr );\n        } else if ( descr instanceof OrDescr ) {\n            visitOrDescr( (OrDescr) descr );\n        } else if ( descr instanceof FieldConstraintDescr ) {\n            visitFieldConstraintDescr( (FieldConstraintDescr) descr );\n        } else if ( descr instanceof BindingDescr ) {\n            visitBindingDescr( (BindingDescr) descr );\n        } else if ( descr instanceof PredicateDescr ) {\n            visitPredicateDescr( (PredicateDescr) descr );\n        } else {\n            throw new UnknownDescriptionException( (BaseDescr) descr );\n        }\n    }","id":2681,"modified_method":"@Override\n    protected void visit(Object descr) throws UnknownDescriptionException {\n        if (descr instanceof AccumulateDescr) {\n            visitAccumulateDescr((AccumulateDescr) descr);\n        } else if (descr instanceof CollectDescr) {\n            visitCollectDescr((CollectDescr) descr);\n        } else if (descr instanceof EntryPointDescr) {\n            visitEntryPointDescr((EntryPointDescr) descr);\n        } else if (descr instanceof FromDescr) {\n            visitFromDescr((FromDescr) descr);\n        } else if (descr instanceof AndDescr) {\n            visitAndDescr((AndDescr) descr);\n        } else if (descr instanceof OrDescr) {\n            visitOrDescr((OrDescr) descr);\n        } else if (descr instanceof FieldConstraintDescr) {\n            visitFieldConstraintDescr((FieldConstraintDescr) descr);\n        } else if (descr instanceof BindingDescr) {\n            visitBindingDescr((BindingDescr) descr);\n        } else if (descr instanceof PredicateDescr) {\n            visitPredicateDescr((PredicateDescr) descr);\n        } else if (descr instanceof ExprConstraintDescr) {\n            visit((ExprConstraintDescr) descr);\n        } else {\n            throw new UnknownDescriptionException((BaseDescr) descr);\n        }\n    }","commit_id":"73c467491e6b66bbd5e7140b050375a2d913801a","url":"https://github.com/droolsjbpm/drools"},{"original_method":"@Test\n    public void testSaveVerifierComponentAndGetForAllComponentTypes() {\n\n        RulePackage rulePackage = VerifierComponentMockFactory.createPackage1();\n        saveVerifierComponentAndGet( rulePackage );\n\n        VerifierRule rule = VerifierComponentMockFactory.createRule1();\n        saveVerifierComponentAndGet( rule );\n\n        Pattern pattern = VerifierComponentMockFactory.createPattern1();\n        saveVerifierComponentAndGet( pattern );\n\n        saveVerifierComponentAndGet( new Constraint( pattern ) );\n        saveVerifierComponentAndGet( new InlineEvalDescr( pattern ) );\n        saveVerifierComponentAndGet( new ObjectType() );\n        saveVerifierComponentAndGet( new RuleOperatorDescr( rule,\n                                                            OperatorDescrType.AND ) );\n        saveVerifierComponentAndGet( new PatternOperatorDescr( pattern,\n                                                               OperatorDescrType.AND ) );\n        saveVerifierComponentAndGet( new SubPattern( pattern,\n                                                     0 ) );\n        saveVerifierComponentAndGet( new ReturnValueFieldDescr( pattern ) );\n        saveVerifierComponentAndGet( new SubRule( rule,\n                                                  0 ) );\n        saveVerifierComponentAndGet( new TextConsequence( rule ) );\n        saveVerifierComponentAndGet( new Variable( rule ) );\n        saveVerifierComponentAndGet( new VerifierAccessorDescr( rule ) );\n        saveVerifierComponentAndGet( new VerifierAccumulateDescr( pattern ) );\n        saveVerifierComponentAndGet( new VerifierCollectDescr( pattern ) );\n        saveVerifierComponentAndGet( new RuleEval( rule ) );\n        saveVerifierComponentAndGet( new VerifierFieldAccessDescr( rule ) );\n        saveVerifierComponentAndGet( new VerifierFromDescr( pattern ) );\n        saveVerifierComponentAndGet( new VerifierMethodAccessDescr( rule ) );\n        saveVerifierComponentAndGet( new PatternEval( pattern ) );\n    }","id":2682,"modified_method":"@Test\n    public void testSaveVerifierComponentAndGetForAllComponentTypes() {\n\n        RulePackage rulePackage = VerifierComponentMockFactory.createPackage1();\n        saveVerifierComponentAndGet( rulePackage );\n\n        VerifierRule rule = VerifierComponentMockFactory.createRule1();\n        saveVerifierComponentAndGet( rule );\n\n        Pattern pattern = VerifierComponentMockFactory.createPattern1();\n        saveVerifierComponentAndGet( pattern );\n\n        saveVerifierComponentAndGet( new InlineEvalDescr( pattern ) );\n        saveVerifierComponentAndGet( new ObjectType() );\n        saveVerifierComponentAndGet( new RuleOperatorDescr( rule,\n                                                            OperatorDescrType.AND ) );\n        saveVerifierComponentAndGet( new PatternOperatorDescr( pattern,\n                                                               OperatorDescrType.AND ) );\n        saveVerifierComponentAndGet( new SubPattern( pattern,\n                                                     0 ) );\n        saveVerifierComponentAndGet( new ReturnValueFieldDescr( pattern ) );\n        saveVerifierComponentAndGet( new SubRule( rule,\n                                                  0 ) );\n        saveVerifierComponentAndGet( new TextConsequence( rule ) );\n        saveVerifierComponentAndGet( new Variable( rule ) );\n        saveVerifierComponentAndGet( new VerifierAccessorDescr( rule ) );\n        saveVerifierComponentAndGet( new VerifierAccumulateDescr( pattern ) );\n        saveVerifierComponentAndGet( new VerifierCollectDescr( pattern ) );\n        saveVerifierComponentAndGet( new RuleEval( rule ) );\n        saveVerifierComponentAndGet( new VerifierFieldAccessDescr( rule ) );\n        saveVerifierComponentAndGet( new VerifierFromDescr( pattern ) );\n        saveVerifierComponentAndGet( new VerifierMethodAccessDescr( rule ) );\n        saveVerifierComponentAndGet( new PatternEval( pattern ) );\n    }","commit_id":"73c467491e6b66bbd5e7140b050375a2d913801a","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public boolean canClose(Class streamType)\n        {\n            return InputStream.class.isAssignableFrom(streamType)\n                   || InputSource.class.isAssignableFrom(streamType)\n                   || StreamSource.class.isAssignableFrom(streamType)\n                   || (SAXSource.class.isAssignableFrom(streamType) && !streamType.getName().endsWith(\n                       \"StaxSource\"));\n        }","id":2683,"modified_method":"public boolean canClose(Class streamType)\n        {\n            return InputStream.class.isAssignableFrom(streamType)\n                   || InputSource.class.isAssignableFrom(streamType)\n                   || StreamSource.class.isAssignableFrom(streamType)\n                   || Closeable.class.isAssignableFrom(streamType)\n                   || (SAXSource.class.isAssignableFrom(streamType) && !streamType.getName().endsWith(\n                       \"StaxSource\"));\n        }","commit_id":"4b50cbb0fd491a73c4baced363d05163638d047f","url":"https://github.com/mulesoft/mule"},{"original_method":"public void close(Object stream) throws IOException\n        {\n            if (stream instanceof InputStream)\n            {\n                try\n                {\n                    ((InputStream) stream).close();\n                }\n                catch (IOException e)\n                {\n                    // no-op\n                }\n            }\n            else if (stream instanceof InputSource)\n            {\n                closeInputSourceStream((InputSource) stream);\n            }\n            else if (stream instanceof SAXSource)\n            {\n                closeInputSourceStream(((SAXSource) stream).getInputSource());\n            }\n            else if (stream instanceof StreamSource)\n            {\n                try\n                {\n                    ((StreamSource) stream).getInputStream().close();\n                }\n                catch (IOException e)\n                {\n                }\n            }\n        }","id":2684,"modified_method":"public void close(Object stream) throws IOException\n        {\n            if (stream instanceof InputStream)\n            {\n                try\n                {\n                    ((InputStream) stream).close();\n                }\n                catch (IOException e)\n                {\n                    this.logCloseException(stream, e);\n                }\n            }\n            else if (stream instanceof InputSource)\n            {\n                closeInputSourceStream((InputSource) stream);\n            }\n            else if (stream instanceof SAXSource)\n            {\n                closeInputSourceStream(((SAXSource) stream).getInputSource());\n            }\n            else if (stream instanceof StreamSource)\n            {\n                try\n                {\n                    ((StreamSource) stream).getInputStream().close();\n                }\n                catch (IOException e)\n                {\n                    this.logCloseException(stream, e);\n                }\n            }\n            else if (stream instanceof Closeable)\n            {\n                try\n                {\n                    ((Closeable) stream).close();\n                }\n                catch (MuleException e)\n                {\n                    this.logCloseException(stream, e);\n                }\n            }\n        }","commit_id":"4b50cbb0fd491a73c4baced363d05163638d047f","url":"https://github.com/mulesoft/mule"},{"original_method":"public void closeStream(Object stream)\n    {\n        try\n        {\n            if (coreStreamTypesCloser.canClose(stream.getClass()))\n            {\n                coreStreamTypesCloser.close(stream);\n            }\n            else\n            {\n                Iterator closers = muleContext.getRegistry().lookupObjects(StreamCloser.class).iterator();\n                while (closers.hasNext())\n                {\n                    StreamCloser closer = (StreamCloser) closers.next();\n                    if (closer.canClose(stream.getClass()))\n                    {\n                        closer.close(stream);\n                    }\n                    else\n                    {\n                        log.debug(\"Unable to find an StreamCloser for the stream type: \" + stream.getClass()\n                                  + \", the stream: \" + stream + \" will not be closed.\");\n                    }\n                }\n            }\n        }\n        catch (Exception e)\n        {\n            log.debug(\"Exception closing stream: \" + stream, e);\n        }\n\n    }","id":2685,"modified_method":"public void closeStream(Object stream)\n    {\n        try\n        {\n            if (coreStreamTypesCloser.canClose(stream.getClass()))\n            {\n                coreStreamTypesCloser.close(stream);\n            }\n            else\n            {\n                for (StreamCloser closer : muleContext.getRegistry().lookupObjects(StreamCloser.class))\n                {\n                    if (closer.canClose(stream.getClass()))\n                    {\n                        closer.close(stream);\n                        return;\n                    }\n                }\n                log.debug(\"Unable to find an StreamCloser for the stream type: \" + stream.getClass()\n                          + \", the stream: \" + stream + \" will not be closed.\");\n            }\n        }\n        catch (Exception e)\n        {\n            log.debug(\"Exception closing stream: \" + stream, e);\n        }\n\n    }","commit_id":"4b50cbb0fd491a73c4baced363d05163638d047f","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * @param connectorServerUrl The connectorServerUrl to set.\n     */\n    public void setConnectorServerUrl(String connectorServerUrl)\n    {\n        this.connectorServerUrl = connectorServerUrl;\n    }","id":2686,"modified_method":"public void setConnectorServerUrl(String connectorServerUrl)\n    {\n        this.connectorServerUrl = connectorServerUrl;\n    }","commit_id":"ef799f7cc6abd2bc7f87925f77e96a175ee1960d","url":"https://github.com/mulesoft/mule"},{"original_method":"protected void registerConnectorServices() throws\n                                                MalformedObjectNameException,\n                                                NotCompliantMBeanException,\n                                                MBeanRegistrationException,\n                                                InstanceAlreadyExistsException\n    {\n        Iterator iter = muleContext.getRegistry().lookupObjects(Connector.class).iterator();\n        while (iter.hasNext())\n        {\n            Connector connector = (Connector) iter.next();\n            ConnectorServiceMBean mBean = new ConnectorService(connector);\n            final String rawName = mBean.getName();\n            final String name = jmxSupport.escape(rawName);\n            final String stringName = jmxSupport.getDomainName(muleContext) + \":type=org.mule.Connector,name=\" + name;\n            if (logger.isDebugEnabled())\n            {\n                logger.debug(\"Attempting to register service with name: \" + stringName);\n            }\n            ObjectName oName = jmxSupport.getObjectName(stringName);\n            mBeanServer.registerMBean(mBean, oName);\n            logger.info(\"Registered Connector Service with name \" + oName);\n        }\n    }","id":2687,"modified_method":"protected void registerConnectorServices() throws\n                                                MalformedObjectNameException,\n                                                NotCompliantMBeanException,\n                                                MBeanRegistrationException,\n                                                InstanceAlreadyExistsException\n    {\n        for (Connector connector : muleContext.getRegistry().lookupObjects(Connector.class))\n        {\n            ConnectorServiceMBean mBean = new ConnectorService(connector);\n            final String rawName = mBean.getName();\n            final String name = jmxSupport.escape(rawName);\n            final String stringName = jmxSupport.getDomainName(muleContext) + \":type=org.mule.Connector,name=\" + name;\n            if (logger.isDebugEnabled())\n            {\n                logger.debug(\"Attempting to register service with name: \" + stringName);\n            }\n            ObjectName oName = jmxSupport.getObjectName(stringName);\n            mBeanServer.registerMBean(mBean, oName);\n            logger.info(\"Registered Connector Service with name \" + oName);\n        }\n    }","commit_id":"ef799f7cc6abd2bc7f87925f77e96a175ee1960d","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * {@inheritDoc}\n     *\n     */\n    public void initialise() throws InitialisationException\n    {\n        if (initialized.get())\n        {\n            return;\n        }\n        if (mBeanServer == null && !locateServer && !createServer)\n        {\n            throw new InitialisationException(ManagementMessages.createOrLocateShouldBeSet(), this);\n        }\n        if (mBeanServer == null && locateServer)\n        {\n            List l = MBeanServerFactory.findMBeanServer(null);\n            if (l != null && l.size() > 0)\n            {\n                mBeanServer = (MBeanServer) l.get(0);\n            }\n        }\n        if (mBeanServer == null && createServer)\n        {\n            mBeanServer = MBeanServerFactory.createMBeanServer();\n            serverCreated.set(true);\n        }\n        if (mBeanServer == null)\n        {\n            throw new InitialisationException(ManagementMessages.cannotLocateOrCreateServer(), this);\n        }\n\n        if (StringUtils.isBlank(muleContext.getConfiguration().getId()))\n        {\n            // TODO i18n the message properly\n            throw new IllegalArgumentException(\n                    \"Manager ID is mandatory when running with JmxAgent. Give your Mule configuration a valid ID.\");\n        }\n\n        try\n        {\n            // We need to register all the services once the server has initialised\n            muleContext.registerListener(new MuleContextStartedListener());\n            // and unregister once context stopped\n            muleContext.registerListener(new MuleContextStoppedListener());\n        } \n        catch (NotificationException e) \n        {\n            throw new InitialisationException(e, this);\n        }\n        initialized.compareAndSet(false, true);\n    }","id":2688,"modified_method":"/**\n     * {@inheritDoc}\n     *\n     */\n    public void initialise() throws InitialisationException\n    {\n        if (initialized.get())\n        {\n            return;\n        }\n        if (mBeanServer == null && !locateServer && !createServer)\n        {\n            throw new InitialisationException(ManagementMessages.createOrLocateShouldBeSet(), this);\n        }\n        if (mBeanServer == null && locateServer)\n        {\n            List<?> l = MBeanServerFactory.findMBeanServer(null);\n            if (l != null && l.size() > 0)\n            {\n                mBeanServer = (MBeanServer) l.get(0);\n            }\n        }\n        if (mBeanServer == null && createServer)\n        {\n            mBeanServer = MBeanServerFactory.createMBeanServer();\n            serverCreated.set(true);\n        }\n        if (mBeanServer == null)\n        {\n            throw new InitialisationException(ManagementMessages.cannotLocateOrCreateServer(), this);\n        }\n\n        if (StringUtils.isBlank(muleContext.getConfiguration().getId()))\n        {\n            // TODO i18n the message properly\n            throw new IllegalArgumentException(\n                    \"Manager ID is mandatory when running with JmxAgent. Give your Mule configuration a valid ID.\");\n        }\n\n        try\n        {\n            // We need to register all the services once the server has initialised\n            muleContext.registerListener(new MuleContextStartedListener());\n            // and unregister once context stopped\n            muleContext.registerListener(new MuleContextStoppedListener());\n        } \n        catch (NotificationException e) \n        {\n            throw new InitialisationException(e, this);\n        }\n        initialized.compareAndSet(false, true);\n    }","commit_id":"ef799f7cc6abd2bc7f87925f77e96a175ee1960d","url":"https://github.com/mulesoft/mule"},{"original_method":"protected void unregisterMBeansIfNecessary()\n    {\n        if (mBeanServer == null)\n        {\n            return;\n        }\n\n        try\n        {\n            ObjectName query = jmxSupport.getObjectName(jmxSupport.getDomainName(muleContext) + \":*\");\n            Set mbeans = mBeanServer.queryNames(query, null);\n            while (!mbeans.isEmpty())\n            {\n                ObjectName name = (ObjectName) mbeans.iterator().next();\n                try\n                {\n                    mBeanServer.unregisterMBean(name);\n                }\n                catch (Exception e)\n                {\n                    logger.warn(String.format(\"Failed to unregister MBean: %s. Error is: %s\", name, e.getMessage()));\n                }\n\n                // query mbeans again, as some mbeans have cascaded unregister operations,\n                // this prevents duplicate unregister attempts\n                mbeans = mBeanServer.queryNames(query, null);\n            }\n        }\n        catch (MalformedObjectNameException e)\n        {\n            logger.warn(\"Failed to create ObjectName query\", e);\n        }\n    }","id":2689,"modified_method":"protected void unregisterMBeansIfNecessary()\n    {\n        if (mBeanServer == null)\n        {\n            return;\n        }\n\n        try\n        {\n            ObjectName query = jmxSupport.getObjectName(jmxSupport.getDomainName(muleContext) + \":*\");\n            Set<?> mbeans = mBeanServer.queryNames(query, null);\n            while (!mbeans.isEmpty())\n            {\n                ObjectName name = (ObjectName) mbeans.iterator().next();\n                try\n                {\n                    mBeanServer.unregisterMBean(name);\n                }\n                catch (Exception e)\n                {\n                    logger.warn(String.format(\"Failed to unregister MBean: %s. Error is: %s\", name, e.getMessage()));\n                }\n\n                // query mbeans again, as some mbeans have cascaded unregister operations,\n                // this prevents duplicate unregister attempts\n                mbeans = mBeanServer.queryNames(query, null);\n            }\n        }\n        catch (MalformedObjectNameException e)\n        {\n            logger.warn(\"Failed to create ObjectName query\", e);\n        }\n    }","commit_id":"ef799f7cc6abd2bc7f87925f77e96a175ee1960d","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * @return Returns the connectorServerUrl.\n     */\n    public String getConnectorServerUrl()\n    {\n        return connectorServerUrl;\n    }","id":2690,"modified_method":"public String getConnectorServerUrl()\n    {\n        return connectorServerUrl;\n    }","commit_id":"ef799f7cc6abd2bc7f87925f77e96a175ee1960d","url":"https://github.com/mulesoft/mule"},{"original_method":"protected void registerModelServices() throws NotCompliantMBeanException, MBeanRegistrationException,\n                                                  InstanceAlreadyExistsException, MalformedObjectNameException\n    {\n        for (Iterator iterator = muleContext.getRegistry().lookupObjects(Model.class).iterator(); iterator.hasNext();)\n        {\n            Model model = (Model) iterator.next();\n            ModelServiceMBean serviceMBean = new ModelService(model);\n            String rawName = serviceMBean.getName() + \"(\" + serviceMBean.getType() + \")\";\n            String name = jmxSupport.escape(rawName);\n            ObjectName on = jmxSupport.getObjectName(jmxSupport.getDomainName(muleContext) + \":type=org.mule.Model,name=\" + name);\n            logger.debug(\"Registering model with name: \" + on);\n            mBeanServer.registerMBean(serviceMBean, on);\n        }\n    }","id":2691,"modified_method":"protected void registerModelServices() throws NotCompliantMBeanException, MBeanRegistrationException,\n                                                  InstanceAlreadyExistsException, MalformedObjectNameException\n    {\n        for (Model model : muleContext.getRegistry().lookupObjects(Model.class))\n        {\n            ModelServiceMBean serviceMBean = new ModelService(model);\n            String rawName = serviceMBean.getName() + \"(\" + serviceMBean.getType() + \")\";\n            String name = jmxSupport.escape(rawName);\n            ObjectName on = jmxSupport.getObjectName(jmxSupport.getDomainName(muleContext) + \":type=org.mule.Model,name=\" + name);\n            logger.debug(\"Registering model with name: \" + on);\n            mBeanServer.registerMBean(serviceMBean, on);\n        }\n    }","commit_id":"ef799f7cc6abd2bc7f87925f77e96a175ee1960d","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * @return Returns the createServer.\n     */\n    public boolean isCreateServer()\n    {\n        return createServer;\n    }","id":2692,"modified_method":"public boolean isCreateServer()\n    {\n        return createServer;\n    }","commit_id":"ef799f7cc6abd2bc7f87925f77e96a175ee1960d","url":"https://github.com/mulesoft/mule"},{"original_method":"protected void registerEndpointServices() throws NotCompliantMBeanException, MBeanRegistrationException,\n            InstanceAlreadyExistsException, MalformedObjectNameException\n    {\n        Iterator iter = muleContext.getRegistry().lookupObjects(Connector.class).iterator();\n        Connector connector;\n        while (iter.hasNext())\n        {\n            connector = (Connector) iter.next();\n            if (connector instanceof AbstractConnector)\n            {\n                for (Iterator iterator = ((AbstractConnector) connector).getReceivers().values().iterator(); iterator.hasNext();)\n                {\n                    EndpointServiceMBean mBean = new EndpointService((MessageReceiver) iterator.next());\n                    final String rawName = mBean.getName();\n                    final String name = jmxSupport.escape(rawName);\n                    if (logger.isInfoEnabled()) {\n                        logger.info(\"Attempting to register service with name: \" + jmxSupport.getDomainName(muleContext) +\n                                                    \":type=org.mule.Endpoint,service=\" +\n                                                    jmxSupport.escape(mBean.getComponentName()) +\n                                                    \",name=\" + name);\n                    }\n                    ObjectName on = jmxSupport.getObjectName(\n                                                    jmxSupport.getDomainName(muleContext) +\n                                                    \":type=org.mule.Endpoint,service=\" +\n                                                    jmxSupport.escape(mBean.getComponentName()) +\n                                                    \",name=\" + name);\n                    mBeanServer.registerMBean(mBean, on);\n                    logger.info(\"Registered Endpoint Service with name: \" + on);\n                }\n            }\n            else\n            {\n                logger.warn(\"Connector: \" + connector\n                            + \" is not an istance of AbstractConnector, cannot obtain Endpoint MBeans from it\");\n            }\n        }\n    }","id":2693,"modified_method":"protected void registerEndpointServices() throws NotCompliantMBeanException, MBeanRegistrationException,\n            InstanceAlreadyExistsException, MalformedObjectNameException\n    {\n        for (Connector connector : muleContext.getRegistry().lookupObjects(Connector.class))\n        {\n            if (connector instanceof AbstractConnector)\n            {\n                for (Iterator<?> iterator = ((AbstractConnector) connector).getReceivers().values().iterator(); iterator.hasNext();)\n                {\n                    EndpointServiceMBean mBean = new EndpointService((MessageReceiver) iterator.next());\n                    \n                    String fullName = buildFullyQualifiedEndpointName(mBean, connector);\n                    if (logger.isInfoEnabled()) \n                    {\n                        logger.info(\"Attempting to register service with name: \" + fullName);\n                    }\n                    \n                    ObjectName on = jmxSupport.getObjectName(fullName);\n                    mBeanServer.registerMBean(mBean, on);\n                    if (logger.isInfoEnabled())\n                    {\n                        logger.info(\"Registered Endpoint Service with name: \" + on);\n                    }\n                }\n            }\n            else\n            {\n                logger.warn(\"Connector: \" + connector\n                            + \" is not an istance of AbstractConnector, cannot obtain Endpoint MBeans from it\");\n            }\n        }\n    }","commit_id":"ef799f7cc6abd2bc7f87925f77e96a175ee1960d","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * @param mBeanServer The mBeanServer to set.\n     */\n    public void setMBeanServer(MBeanServer mBeanServer)\n    {\n        this.mBeanServer = mBeanServer;\n    }","id":2694,"modified_method":"public void setMBeanServer(MBeanServer mBeanServer)\n    {\n        this.mBeanServer = mBeanServer;\n    }","commit_id":"ef799f7cc6abd2bc7f87925f77e96a175ee1960d","url":"https://github.com/mulesoft/mule"},{"original_method":"protected void registerServiceServices() throws NotCompliantMBeanException, MBeanRegistrationException,\n            InstanceAlreadyExistsException, MalformedObjectNameException\n    {\n        String rawName;\n        for (Iterator iterator = muleContext.getRegistry().lookupObjects(Service.class).iterator(); iterator.hasNext();)\n        {\n            rawName = ((Service) iterator.next()).getName();\n            final String name = jmxSupport.escape(rawName);\n            ObjectName on = jmxSupport.getObjectName(jmxSupport.getDomainName(muleContext) + \":type=org.mule.Service,name=\" + name);\n            ServiceServiceMBean serviceMBean = new ServiceService(rawName, muleContext);\n            logger.debug(\"Registering service with name: \" + on);\n            mBeanServer.registerMBean(serviceMBean, on);\n        }\n\n    }","id":2695,"modified_method":"protected void registerServiceServices() throws NotCompliantMBeanException, MBeanRegistrationException,\n            InstanceAlreadyExistsException, MalformedObjectNameException\n    {\n        for (Service service : muleContext.getRegistry().lookupObjects(Service.class))\n        {\n            String rawName = service.getName();\n            String name = jmxSupport.escape(rawName);\n            ObjectName on = jmxSupport.getObjectName(jmxSupport.getDomainName(muleContext) + \":type=org.mule.Service,name=\" + name);\n            ServiceServiceMBean serviceMBean = new ServiceService(rawName, muleContext);\n            logger.debug(\"Registering service with name: \" + on);\n            mBeanServer.registerMBean(serviceMBean, on);\n        }\n    }","commit_id":"ef799f7cc6abd2bc7f87925f77e96a175ee1960d","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * @return Returns the mBeanServer.\n     */\n    public MBeanServer getMBeanServer()\n    {\n        return mBeanServer;\n    }","id":2696,"modified_method":"public MBeanServer getMBeanServer()\n    {\n        return mBeanServer;\n    }","commit_id":"ef799f7cc6abd2bc7f87925f77e96a175ee1960d","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * @return Returns the enableStatistics.\n     */\n    public boolean isEnableStatistics()\n    {\n        return enableStatistics;\n    }","id":2697,"modified_method":"public boolean isEnableStatistics()\n    {\n        return enableStatistics;\n    }","commit_id":"ef799f7cc6abd2bc7f87925f77e96a175ee1960d","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * @param locateServer The locateServer to set.\n     */\n    public void setLocateServer(boolean locateServer)\n    {\n        this.locateServer = locateServer;\n    }","id":2698,"modified_method":"public void setLocateServer(boolean locateServer)\n    {\n        this.locateServer = locateServer;\n    }","commit_id":"ef799f7cc6abd2bc7f87925f77e96a175ee1960d","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * @return Returns the locateServer.\n     */\n    public boolean isLocateServer()\n    {\n        return locateServer;\n    }","id":2699,"modified_method":"public boolean isLocateServer()\n    {\n        return locateServer;\n    }","commit_id":"ef799f7cc6abd2bc7f87925f77e96a175ee1960d","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * @param enableStatistics The enableStatistics to set.\n     */\n    public void setEnableStatistics(boolean enableStatistics)\n    {\n        this.enableStatistics = enableStatistics;\n    }","id":2700,"modified_method":"public void setEnableStatistics(boolean enableStatistics)\n    {\n        this.enableStatistics = enableStatistics;\n    }","commit_id":"ef799f7cc6abd2bc7f87925f77e96a175ee1960d","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * @param createServer The createServer to set.\n     */\n    public void setCreateServer(boolean createServer)\n    {\n        this.createServer = createServer;\n    }","id":2701,"modified_method":"public void setCreateServer(boolean createServer)\n    {\n        this.createServer = createServer;\n    }","commit_id":"ef799f7cc6abd2bc7f87925f77e96a175ee1960d","url":"https://github.com/mulesoft/mule"},{"original_method":"public void testClashingDomains() throws Exception\n    {\n        // pre-register the same domain to simulate a clashing domain\n        ObjectName name = ObjectName.getInstance(TEST_DOMAIN + \":name=TestDuplicates\");\n        mBeanServer.registerMBean(new StatisticsService(), name);\n\n        JmxAgent agent = new JmxAgent();\n        agent.setMuleContext(muleContext);\n        agent.initialise();\n        muleContext.getRegistry().registerAgent(agent);\n        muleContext.start();\n\n        List domains = Arrays.asList(mBeanServer.getDomains());\n        assertTrue(\"Should have contained an original domain.\", domains.contains(TEST_DOMAIN));\n        assertTrue(\"Should have contained a new domain.\", domains.contains(TEST_DOMAIN + \".1\"));\n    }","id":2702,"modified_method":"public void testClashingDomains() throws Exception\n    {\n        // pre-register the same domain to simulate a clashing domain\n        ObjectName name = ObjectName.getInstance(TEST_DOMAIN + \":name=TestDuplicates\");\n        mBeanServer.registerMBean(new StatisticsService(), name);\n\n        JmxAgent agent = new JmxAgent();\n        agent.setMuleContext(muleContext);\n        agent.initialise();\n        muleContext.getRegistry().registerAgent(agent);\n        muleContext.start();\n\n        List<String> domains = Arrays.asList(mBeanServer.getDomains());\n        assertTrue(\"Should have contained an original domain.\", domains.contains(TEST_DOMAIN));\n        assertTrue(\"Should have contained a new domain.\", domains.contains(TEST_DOMAIN + \".1\"));\n    }","commit_id":"ef799f7cc6abd2bc7f87925f77e96a175ee1960d","url":"https://github.com/mulesoft/mule"},{"original_method":"public void testClashingSuffixedDomains() throws Exception\n    {\n\n        // get original, pre-test number of domains\n        int numOriginalDomains = mBeanServer.getDomains().length;\n\n        // pre-register the same domain to simulate a clashing domain\n        ObjectName name = ObjectName.getInstance(TEST_DOMAIN + \":name=TestDuplicates\");\n        mBeanServer.registerMBean(new StatisticsService(), name);\n\n        // add another domain with suffix already applied\n        name = ObjectName.getInstance(TEST_DOMAIN + \".1\" + \":name=TestDuplicates\");\n        mBeanServer.registerMBean(new StatisticsService(), name);\n\n        assertEquals(\"Wrong number of domains created.\",\n                     numOriginalDomains + 2, mBeanServer.getDomains().length);\n\n        JmxAgent agent = new JmxAgent();\n        agent.setMuleContext(muleContext);\n        agent.initialise();\n        muleContext.getRegistry().registerAgent(agent);\n        muleContext.start();\n\n        List domains = Arrays.asList(mBeanServer.getDomains());\n        // one extra domain created by Mule's clash resolution\n        assertEquals(\"Wrong number of domains created.\",\n                     numOriginalDomains + 3, domains.size());\n\n        assertTrue(\"Should have contained an original domain.\", domains.contains(TEST_DOMAIN));\n        assertTrue(\"Should have contained an original suffixed domain.\", domains.contains(TEST_DOMAIN + \".1\"));\n        assertTrue(\"Should have contained a new domain.\", domains.contains(TEST_DOMAIN + \".2\"));\n    }","id":2703,"modified_method":"public void testClashingSuffixedDomains() throws Exception\n    {\n\n        // get original, pre-test number of domains\n        int numOriginalDomains = mBeanServer.getDomains().length;\n\n        // pre-register the same domain to simulate a clashing domain\n        ObjectName name = ObjectName.getInstance(TEST_DOMAIN + \":name=TestDuplicates\");\n        mBeanServer.registerMBean(new StatisticsService(), name);\n\n        // add another domain with suffix already applied\n        name = ObjectName.getInstance(TEST_DOMAIN + \".1\" + \":name=TestDuplicates\");\n        mBeanServer.registerMBean(new StatisticsService(), name);\n\n        assertEquals(\"Wrong number of domains created.\",\n                     numOriginalDomains + 2, mBeanServer.getDomains().length);\n\n        JmxAgent agent = new JmxAgent();\n        agent.setMuleContext(muleContext);\n        agent.initialise();\n        muleContext.getRegistry().registerAgent(agent);\n        muleContext.start();\n\n        List<String> domains = Arrays.asList(mBeanServer.getDomains());\n        // one extra domain created by Mule's clash resolution\n        assertEquals(\"Wrong number of domains created.\",\n                     numOriginalDomains + 3, domains.size());\n\n        assertTrue(\"Should have contained an original domain.\", domains.contains(TEST_DOMAIN));\n        assertTrue(\"Should have contained an original suffixed domain.\", domains.contains(TEST_DOMAIN + \".1\"));\n        assertTrue(\"Should have contained a new domain.\", domains.contains(TEST_DOMAIN + \".2\"));\n    }","commit_id":"ef799f7cc6abd2bc7f87925f77e96a175ee1960d","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jScrollPane1 = new javax.swing.JScrollPane();\n        knownHashTable = new javax.swing.JTable();\n        knownBadHashDbsLabel = new javax.swing.JLabel();\n        knownHashDbsLabel = new javax.swing.JLabel();\n        alwaysCalcHashesCheckbox = new javax.swing.JCheckBox();\n        jScrollPane2 = new javax.swing.JScrollPane();\n        knownBadHashTable = new javax.swing.JTable();\n\n        setPreferredSize(new java.awt.Dimension(292, 150));\n\n        jScrollPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n\n        knownHashTable.setBackground(new java.awt.Color(240, 240, 240));\n        knownHashTable.setShowHorizontalLines(false);\n        knownHashTable.setShowVerticalLines(false);\n        jScrollPane1.setViewportView(knownHashTable);\n\n        knownBadHashDbsLabel.setText(org.openide.util.NbBundle.getMessage(HashLookupModuleSettingsPanel.class, \"HashLookupModuleSettingsPanel.knownBadHashDbsLabel.text\")); // NOI18N\n\n        knownHashDbsLabel.setText(org.openide.util.NbBundle.getMessage(HashLookupModuleSettingsPanel.class, \"HashLookupModuleSettingsPanel.knownHashDbsLabel.text\")); // NOI18N\n\n        alwaysCalcHashesCheckbox.setText(org.openide.util.NbBundle.getMessage(HashLookupModuleSettingsPanel.class, \"HashLookupModuleSettingsPanel.alwaysCalcHashesCheckbox.text\")); // NOI18N\n        alwaysCalcHashesCheckbox.setToolTipText(org.openide.util.NbBundle.getMessage(HashLookupModuleSettingsPanel.class, \"HashLookupModuleSettingsPanel.alwaysCalcHashesCheckbox.toolTipText\")); // NOI18N\n        alwaysCalcHashesCheckbox.setMaximumSize(new java.awt.Dimension(290, 35));\n        alwaysCalcHashesCheckbox.setMinimumSize(new java.awt.Dimension(290, 35));\n        alwaysCalcHashesCheckbox.setPreferredSize(new java.awt.Dimension(271, 35));\n        alwaysCalcHashesCheckbox.setVerticalAlignment(javax.swing.SwingConstants.TOP);\n        alwaysCalcHashesCheckbox.setVerticalTextPosition(javax.swing.SwingConstants.TOP);\n\n        jScrollPane2.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n\n        knownBadHashTable.setBackground(new java.awt.Color(240, 240, 240));\n        knownBadHashTable.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n\n            },\n            new String [] {\n\n            }\n        ));\n        knownBadHashTable.setShowHorizontalLines(false);\n        knownBadHashTable.setShowVerticalLines(false);\n        jScrollPane2.setViewportView(knownBadHashTable);\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(knownHashDbsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addGap(0, 0, Short.MAX_VALUE))\n                    .addComponent(knownBadHashDbsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGap(10, 10, 10)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)\n                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))\n                    .addComponent(alwaysCalcHashesCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(2, 2, 2)\n                .addComponent(knownHashDbsLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(knownBadHashDbsLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(alwaysCalcHashesCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap())\n        );\n    }","id":2704,"modified_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jScrollPane1 = new javax.swing.JScrollPane();\n        knownHashTable = new javax.swing.JTable();\n        knownBadHashDbsLabel = new javax.swing.JLabel();\n        knownHashDbsLabel = new javax.swing.JLabel();\n        alwaysCalcHashesCheckbox = new javax.swing.JCheckBox();\n        jScrollPane2 = new javax.swing.JScrollPane();\n        knownBadHashTable = new javax.swing.JTable();\n\n        setPreferredSize(new java.awt.Dimension(292, 150));\n\n        jScrollPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n\n        knownHashTable.setBackground(new java.awt.Color(240, 240, 240));\n        knownHashTable.setShowHorizontalLines(false);\n        knownHashTable.setShowVerticalLines(false);\n        jScrollPane1.setViewportView(knownHashTable);\n\n        knownBadHashDbsLabel.setText(org.openide.util.NbBundle.getMessage(HashLookupModuleSettingsPanel.class, \"HashLookupModuleSettingsPanel.knownBadHashDbsLabel.text\")); // NOI18N\n\n        knownHashDbsLabel.setText(org.openide.util.NbBundle.getMessage(HashLookupModuleSettingsPanel.class, \"HashLookupModuleSettingsPanel.knownHashDbsLabel.text\")); // NOI18N\n\n        alwaysCalcHashesCheckbox.setText(org.openide.util.NbBundle.getMessage(HashLookupModuleSettingsPanel.class, \"HashLookupModuleSettingsPanel.alwaysCalcHashesCheckbox.text\")); // NOI18N\n        alwaysCalcHashesCheckbox.setToolTipText(org.openide.util.NbBundle.getMessage(HashLookupModuleSettingsPanel.class, \"HashLookupModuleSettingsPanel.alwaysCalcHashesCheckbox.toolTipText\")); // NOI18N\n        alwaysCalcHashesCheckbox.setMaximumSize(new java.awt.Dimension(290, 35));\n        alwaysCalcHashesCheckbox.setMinimumSize(new java.awt.Dimension(290, 35));\n        alwaysCalcHashesCheckbox.setPreferredSize(new java.awt.Dimension(271, 35));\n        alwaysCalcHashesCheckbox.setVerticalAlignment(javax.swing.SwingConstants.TOP);\n        alwaysCalcHashesCheckbox.setVerticalTextPosition(javax.swing.SwingConstants.TOP);\n\n        jScrollPane2.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n\n        knownBadHashTable.setBackground(new java.awt.Color(240, 240, 240));\n        knownBadHashTable.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n\n            },\n            new String [] {\n\n            }\n        ));\n        knownBadHashTable.setShowHorizontalLines(false);\n        knownBadHashTable.setShowVerticalLines(false);\n        jScrollPane2.setViewportView(knownBadHashTable);\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(knownHashDbsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addGap(0, 18, Short.MAX_VALUE))\n                    .addComponent(knownBadHashDbsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGap(10, 10, 10)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)\n                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))\n                    .addComponent(alwaysCalcHashesCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(2, 2, 2)\n                .addComponent(knownHashDbsLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(knownBadHashDbsLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(alwaysCalcHashesCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(0, 0, 0))\n        );\n    }","commit_id":"6ef9c2b3c694852085551cabf72f4418ccbe45cb","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jScrollPane1 = new javax.swing.JScrollPane();\n        knownHashTable = new javax.swing.JTable();\n        knownBadHashDbsLabel = new javax.swing.JLabel();\n        knownHashDbsLabel = new javax.swing.JLabel();\n        calcHashesButton = new javax.swing.JCheckBox();\n        jScrollPane2 = new javax.swing.JScrollPane();\n        knownBadHashTable = new javax.swing.JTable();\n\n        jScrollPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n\n        knownHashTable.setBackground(new java.awt.Color(240, 240, 240));\n        knownHashTable.setShowHorizontalLines(false);\n        knownHashTable.setShowVerticalLines(false);\n        jScrollPane1.setViewportView(knownHashTable);\n\n        knownBadHashDbsLabel.setText(org.openide.util.NbBundle.getMessage(HashDbSimpleConfigPanel.class, \"HashDbSimpleConfigPanel.knownBadHashDbsLabel.text\")); // NOI18N\n\n        knownHashDbsLabel.setText(org.openide.util.NbBundle.getMessage(HashDbSimpleConfigPanel.class, \"HashDbSimpleConfigPanel.knownHashDbsLabel.text\")); // NOI18N\n\n        calcHashesButton.setText(org.openide.util.NbBundle.getMessage(HashDbSimpleConfigPanel.class, \"HashDbSimpleConfigPanel.calcHashesButton.text\")); // NOI18N\n\n        jScrollPane2.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n\n        knownBadHashTable.setBackground(new java.awt.Color(240, 240, 240));\n        knownBadHashTable.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n\n            },\n            new String [] {\n\n            }\n        ));\n        knownBadHashTable.setShowHorizontalLines(false);\n        knownBadHashTable.setShowVerticalLines(false);\n        jScrollPane2.setViewportView(knownBadHashTable);\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(knownHashDbsLabel)\n                            .addComponent(knownBadHashDbsLabel))\n                        .addGap(0, 0, Short.MAX_VALUE))\n                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)\n                    .addComponent(calcHashesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(knownHashDbsLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(18, 18, 18)\n                .addComponent(knownBadHashDbsLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(calcHashesButton)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n    }","id":2705,"modified_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jScrollPane1 = new javax.swing.JScrollPane();\n        knownHashTable = new javax.swing.JTable();\n        knownBadHashDbsLabel = new javax.swing.JLabel();\n        knownHashDbsLabel = new javax.swing.JLabel();\n        calcHashesButton = new javax.swing.JCheckBox();\n        jScrollPane2 = new javax.swing.JScrollPane();\n        knownBadHashTable = new javax.swing.JTable();\n\n        jScrollPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n\n        knownHashTable.setBackground(new java.awt.Color(240, 240, 240));\n        knownHashTable.setShowHorizontalLines(false);\n        knownHashTable.setShowVerticalLines(false);\n        jScrollPane1.setViewportView(knownHashTable);\n\n        knownBadHashDbsLabel.setText(org.openide.util.NbBundle.getMessage(HashDbSimpleConfigPanel.class, \"HashDbSimpleConfigPanel.knownBadHashDbsLabel.text\")); // NOI18N\n\n        knownHashDbsLabel.setText(org.openide.util.NbBundle.getMessage(HashDbSimpleConfigPanel.class, \"HashDbSimpleConfigPanel.knownHashDbsLabel.text\")); // NOI18N\n\n        calcHashesButton.setText(org.openide.util.NbBundle.getMessage(HashDbSimpleConfigPanel.class, \"HashDbSimpleConfigPanel.calcHashesButton.text\")); // NOI18N\n\n        jScrollPane2.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n\n        knownBadHashTable.setBackground(new java.awt.Color(240, 240, 240));\n        knownBadHashTable.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n\n            },\n            new String [] {\n\n            }\n        ));\n        knownBadHashTable.setShowHorizontalLines(false);\n        knownBadHashTable.setShowVerticalLines(false);\n        jScrollPane2.setViewportView(knownBadHashTable);\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(knownHashDbsLabel)\n                            .addComponent(knownBadHashDbsLabel))\n                        .addGap(0, 0, Short.MAX_VALUE))\n                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)\n                    .addComponent(calcHashesButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(knownHashDbsLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(knownBadHashDbsLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(calcHashesButton)\n                .addContainerGap())\n        );\n    }","commit_id":"a76c6111e3c4aab5e8b19cbf36b605852095797e","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        btnOK = new javax.swing.JButton();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        lblMessage = new javax.swing.JTextArea();\n        jLabel1 = new javax.swing.JLabel();\n\n        setResizable(true);\n        setTitle(\"Error\");\n\n        btnOK.setText(\"OK\");\n        btnOK.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                btnOKActionPerformed(evt);\n            }\n        });\n\n        lblMessage.setColumns(20);\n        lblMessage.setEditable(false);\n        lblMessage.setLineWrap(true);\n        lblMessage.setRows(5);\n        lblMessage.setWrapStyleWord(true);\n        jScrollPane1.setViewportView(lblMessage);\n\n        jLabel1.setText(\"<html>An error has occurred on the MAGE server.  Please post the following report here:<br> http://www.slightlymagic.net/forum/posting.php?mode=reply&f=70&t=3116 <\/html>\");\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addContainerGap(610, Short.MAX_VALUE)\n                .addComponent(btnOK)\n                .addContainerGap())\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 647, Short.MAX_VALUE)\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 647, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)\n                .addGap(11, 11, 11)\n                .addComponent(btnOK)\n                .addContainerGap())\n        );\n\n        pack();\n    }","id":2706,"modified_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        btnOK = new javax.swing.JButton();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        lblMessage = new javax.swing.JTextArea();\n        jScrollPane2 = new javax.swing.JScrollPane();\n        jTextArea1 = new javax.swing.JTextArea();\n\n        setResizable(true);\n        setTitle(\"Error\");\n\n        btnOK.setText(\"OK\");\n        btnOK.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                btnOKActionPerformed(evt);\n            }\n        });\n\n        lblMessage.setColumns(20);\n        lblMessage.setEditable(false);\n        lblMessage.setFont(new java.awt.Font(\"Arial\", 0, 10)); // NOI18N\n        lblMessage.setLineWrap(true);\n        lblMessage.setRows(5);\n        lblMessage.setWrapStyleWord(true);\n        jScrollPane1.setViewportView(lblMessage);\n\n        jTextArea1.setColumns(20);\n        jTextArea1.setEditable(false);\n        jTextArea1.setFont(new java.awt.Font(\"Arial\", 0, 10)); // NOI18N\n        jTextArea1.setRows(2);\n        jTextArea1.setText(\"An error has occurred on the MAGE server. Your last action will be rollbacked.\\nPlease post the following report here: http://www.slightlymagic.net/forum/posting.php?mode=reply&f=70&t=3116\");\n        jScrollPane2.setViewportView(jTextArea1);\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 647, Short.MAX_VALUE)\n                        .addContainerGap())\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 647, Short.MAX_VALUE)\n                        .addContainerGap())\n                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                        .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addContainerGap())))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(6, 6, 6)\n                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)\n                .addGap(18, 18, 18)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(btnOK)\n                .addGap(12, 12, 12))\n        );\n\n        pack();\n    }","commit_id":"61229202f698caed708456082c1738b9c3b2335c","url":"https://github.com/magefree/mage"},{"original_method":"public void decode(XMLEventReader reader) throws XMLStreamException {\r\n\t\tXMLHelper.readStartElement(reader, CONTENT_AUTHENTICATOR_ELEMENT);\r\n\t\t\r\n\t\tif (XMLHelper.peekStartElement(reader, TIMESTAMP_ELEMENT)) {\r\n\t\t\tXMLHelper.readStartElement(reader, TIMESTAMP_ELEMENT);\r\n\t\t\tString strTimestamp = reader.getElementText();\r\n\t\t\t_timestamp = Timestamp.valueOf(strTimestamp);\r\n\t\t\tif (null == _timestamp) {\r\n\t\t\t\tthrow new XMLStreamException(\"Cannot parse timestamp: \" + strTimestamp);\r\n\t\t\t}\r\n\t\t\tXMLHelper.readEndElement(reader);\r\n\t\t}\r\n\r\n\t\tXMLHelper.readStartElement(reader, CONTENT_TYPE_ELEMENT);\r\n\t\tString strType = reader.getElementText();\r\n\t\t_type = nameToType(strType);\r\n\t\tif (null == _type) {\r\n\t\t\tthrow new XMLStreamException(\"Cannot parse authenticator type: \" + strType);\r\n\t\t}\r\n\t\tXMLHelper.readEndElement(reader);\r\n\t\t\r\n\t\tif (XMLHelper.peekStartElement(reader, CONTENT_HASH_ELEMENT)) {\r\n\t\t\tXMLHelper.readStartElement(reader, CONTENT_HASH_ELEMENT);\r\n\t\t\tString strHash = reader.getElementText();\r\n\t\t\ttry {\r\n\t\t\t\t_contentHash = XMLHelper.decodeElement(strHash);\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tthrow new XMLStreamException(\"Cannot parse content hash: \" + strHash, e);\r\n\t\t\t}\r\n\t\t\tif (null == _contentHash) {\r\n\t\t\t\tthrow new XMLStreamException(\"Cannot parse content hash: \" + strHash);\r\n\t\t\t}\r\n\t\t\tXMLHelper.readEndElement(reader);\r\n\t\t}\r\n\t\t\r\n\t\tif (XMLHelper.peekStartElement(reader, KeyLocator.KEY_LOCATOR_ELEMENT)) {\r\n\t\t\t_keyLocator = new KeyLocator();\r\n\t\t\t_keyLocator.decode(reader);\r\n\t\t}\r\n\t\t\r\n\t\tif (XMLHelper.peekStartElement(reader, SIGNATURE_ELEMENT)) {\r\n\t\t\tXMLHelper.readStartElement(reader, SIGNATURE_ELEMENT);\r\n\t\t\tString strSig = reader.getElementText();\r\n\t\t\ttry {\r\n\t\t\t\t_signature = XMLHelper.decodeElement(strSig);\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tthrow new XMLStreamException(\"Cannot parse signature: \" + strSig, e);\r\n\t\t\t}\r\n\t\t\tif (null == _contentHash) {\r\n\t\t\t\tthrow new XMLStreamException(\"Cannot parse signature: \" + strSig);\r\n\t\t\t}\r\n\t\t\tXMLHelper.readEndElement(reader);\r\n\t\t}\r\n\t\t\r\n\t\tXMLHelper.readEndElement(reader);\r\n\t}","id":2707,"modified_method":"public void decode(XMLEventReader reader) throws XMLStreamException {\r\n\t\tXMLHelper.readStartElement(reader, CONTENT_AUTHENTICATOR_ELEMENT);\r\n\t\t\r\n\t\tif (XMLHelper.peekStartElement(reader, TIMESTAMP_ELEMENT)) {\r\n\t\t\tString strTimestamp = XMLHelper.readElementText(reader, TIMESTAMP_ELEMENT);\r\n\t\t\t_timestamp = Timestamp.valueOf(strTimestamp);\r\n\t\t\tif (null == _timestamp) {\r\n\t\t\t\tthrow new XMLStreamException(\"Cannot parse timestamp: \" + strTimestamp);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tString strType = XMLHelper.readElementText(reader, CONTENT_TYPE_ELEMENT);\r\n\t\t_type = nameToType(strType);\r\n\t\tif (null == _type) {\r\n\t\t\tthrow new XMLStreamException(\"Cannot parse authenticator type: \" + strType);\r\n\t\t}\r\n\t\t\r\n\t\tif (XMLHelper.peekStartElement(reader, CONTENT_HASH_ELEMENT)) {\r\n\t\t\tString strHash = XMLHelper.readElementText(reader, CONTENT_HASH_ELEMENT);\r\n\t\t\ttry {\r\n\t\t\t\t_contentHash = XMLHelper.decodeElement(strHash);\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tthrow new XMLStreamException(\"Cannot parse content hash: \" + strHash, e);\r\n\t\t\t}\r\n\t\t\tif (null == _contentHash) {\r\n\t\t\t\tthrow new XMLStreamException(\"Cannot parse content hash: \" + strHash);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (XMLHelper.peekStartElement(reader, KeyLocator.KEY_LOCATOR_ELEMENT)) {\r\n\t\t\t_keyLocator = new KeyLocator();\r\n\t\t\t_keyLocator.decode(reader);\r\n\t\t}\r\n\t\t\r\n\t\tif (XMLHelper.peekStartElement(reader, SIGNATURE_ELEMENT)) {\r\n\t\t\tString strSig = XMLHelper.readElementText(reader, SIGNATURE_ELEMENT);\r\n\t\t\ttry {\r\n\t\t\t\t_signature = XMLHelper.decodeElement(strSig);\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tthrow new XMLStreamException(\"Cannot parse signature: \" + strSig, e);\r\n\t\t\t}\r\n\t\t\tif (null == _contentHash) {\r\n\t\t\t\tthrow new XMLStreamException(\"Cannot parse signature: \" + strSig);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tXMLHelper.readEndElement(reader);\r\n\t}","commit_id":"901f71fbb50370784aedcf857e939100f0eb8584","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public void decode(XMLEventReader reader) throws XMLStreamException {\r\n\t\tXMLHelper.readStartDocument(reader);\r\n\t\tXMLHelper.readStartElement(reader, CONTENT_NAME_ELEMENT);\r\n\t\tXMLHelper.readStartElement(reader, COUNT_ELEMENT);\r\n\t\tString strCount = reader.getElementText();\r\n\t\tint count = Integer.valueOf(strCount);\r\n\t\tXMLHelper.readEndElement(reader);\r\n\t\t\r\n\t\t_components = new byte[count][];\r\n\t\t\r\n\t\tfor (int i=0; i < count; ++i) {\r\n\t\t\tXMLHelper.readStartElement(reader, COMPONENT_ELEMENT);\r\n\t\t\tString strComponent = reader.getElementText();\r\n\t\t\ttry {\r\n\t\t\t\t_components[i] = XMLHelper.decodeElement(strComponent);\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tthrow new XMLStreamException(\"Cannot decode component \" + i + \": \" + strComponent, e);\r\n\t\t\t}\r\n\t\t\tif (null == _components[i]) {\r\n\t\t\t\tthrow new XMLStreamException(\"Component \" + i + \" decodes to null: \" + strComponent);\r\n\t\t\t}\r\n\t\t\tXMLHelper.readEndElement(reader);\r\n\t\t}\r\n\t\t\r\n\t\tXMLHelper.readEndElement(reader);\r\n\t\tXMLHelper.readEndDocument(reader);\r\n\t}","id":2708,"modified_method":"public void decode(XMLEventReader reader) throws XMLStreamException {\r\n\t\tXMLHelper.readStartDocument(reader);\r\n\r\n\t\tXMLHelper.readStartElement(reader, CONTENT_NAME_ELEMENT);\r\n\r\n\t\tString strCount = XMLHelper.readElementText(reader, COUNT_ELEMENT); \r\n\t\tint count = Integer.valueOf(strCount);\r\n\t\t\r\n\t\t_components = new byte[count][];\r\n\t\t\r\n\t\tfor (int i=0; i < count; ++i) {\r\n\t\t\tString strComponent = XMLHelper.readElementText(reader, COMPONENT_ELEMENT); \r\n\t\t\ttry {\r\n\t\t\t\t_components[i] = XMLHelper.decodeElement(strComponent);\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tthrow new XMLStreamException(\"Cannot decode component \" + i + \": \" + strComponent, e);\r\n\t\t\t}\r\n\t\t\tif (null == _components[i]) {\r\n\t\t\t\tthrow new XMLStreamException(\"Component \" + i + \" decodes to null: \" + strComponent);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tXMLHelper.readEndElement(reader);\r\n\t\tXMLHelper.readEndDocument(reader);\r\n\t}","commit_id":"901f71fbb50370784aedcf857e939100f0eb8584","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public void decode(XMLEventReader reader) throws XMLStreamException {\r\n\t\tXMLHelper.readStartElement(reader, KEY_LOCATOR_ELEMENT);\r\n\t\tXMLHelper.readStartElement(reader, KEY_LOCATOR_TYPE_ELEMENT);\r\n\t\tString strType = reader.getElementText();\r\n\t\t_type = nameToType(strType);\r\n\t\tif (null == _type) {\r\n\t\t\tthrow new XMLStreamException(\"Cannot parse key type: \" + strType);\r\n\t\t}\r\n\t\tXMLHelper.readEndElement(reader);\r\n\t\t\r\n\t\tif (type() == KeyLocatorType.KEY) {\r\n\t\t\tXMLHelper.readStartElement(reader, PUBLISHER_KEY_ELEMENT);\r\n\t\t\tString strKey = reader.getElementText();\r\n\t\t\ttry {\r\n\t\t\t\tbyte [] encodedKey = XMLHelper.decodeElement(strKey);\r\n\t\t\t\t// This is a DER-encoded SubjectPublicKeyInfo.\r\n\t\t\t\t_key = decodeKey(encodedKey);\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tLibrary.logger().warning(\"Cannot parse stored key: \" + strKey + \" error: \" + e.getMessage());\r\n\t\t\t\tthrow new XMLStreamException(\"Cannot parse key: \" + strKey, e);\r\n\t\t\t} catch (InvalidKeySpecException e) {\r\n\t\t\t\tLibrary.logger().warning(\"Cannot turn stored key \" + strKey + \" into key of appropriate type.\");\r\n\t\t\t\tthrow new XMLStreamException(\"Cannot turn stored key \" + strKey + \" into key of appropriate type.\");\r\n\t\t\t}\r\n\t\t\tif (null == _key) {\r\n\t\t\t\tthrow new XMLStreamException(\"Cannot parse key: \" + strKey);\r\n\t\t\t}\r\n\t\t\tXMLHelper.readEndElement(reader);\r\n\t\t} else if (type() == KeyLocatorType.CERTIFICATE) {\r\n\t\t\tXMLHelper.readStartElement(reader, PUBLISHER_CERTIFICATE_ELEMENT);\r\n\t\t\tString strCert = reader.getElementText();\r\n\t\t\ttry {\r\n\t\t\t\tbyte [] encodedCert = XMLHelper.decodeElement(strCert);\r\n\t\t\t\tCertificateFactory factory = CertificateFactory.getInstance(\"X.509\");\r\n\t\t\t\t_certificate = (X509Certificate) factory.generateCertificate(new ByteArrayInputStream(encodedCert));\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tthrow new XMLStreamException(\"Cannot parse certificate: \" + strCert, e);\r\n\t\t\t} catch (CertificateException e) {\r\n\t\t\t\tthrow new XMLStreamException(\"Cannot decode certificate: \" + e.getMessage(), e);\r\n\t\t\t}\r\n\t\t\tif (null == _certificate) {\r\n\t\t\t\tthrow new XMLStreamException(\"Cannot parse certificate: \" + strCert);\r\n\t\t\t}\r\n\t\t\tXMLHelper.readEndElement(reader);\r\n\t\t} else if (type() == KeyLocatorType.NAME) {\r\n\t\t\t_name = new ContentName();\r\n\t\t\t_name.decode(reader);\r\n\t\t}\r\n\t\tXMLHelper.readEndElement(reader);\r\n\t}","id":2709,"modified_method":"public void decode(XMLEventReader reader) throws XMLStreamException {\r\n\t\tXMLHelper.readStartElement(reader, KEY_LOCATOR_ELEMENT);\r\n\r\n\t\tString strType = XMLHelper.readElementText(reader, KEY_LOCATOR_TYPE_ELEMENT);\r\n\t\t_type = nameToType(strType);\r\n\t\tif (null == _type) {\r\n\t\t\tthrow new XMLStreamException(\"Cannot parse key type: \" + strType);\r\n\t\t}\r\n\t\t\r\n\t\tif (type() == KeyLocatorType.KEY) {\r\n\t\t\tString strKey = XMLHelper.readElementText(reader, PUBLISHER_KEY_ELEMENT);\r\n\t\t\ttry {\r\n\t\t\t\tbyte [] encodedKey = XMLHelper.decodeElement(strKey);\r\n\t\t\t\t// This is a DER-encoded SubjectPublicKeyInfo.\r\n\t\t\t\t_key = decodeKey(encodedKey);\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tLibrary.logger().warning(\"Cannot parse stored key: \" + strKey + \" error: \" + e.getMessage());\r\n\t\t\t\tthrow new XMLStreamException(\"Cannot parse key: \" + strKey, e);\r\n\t\t\t} catch (InvalidKeySpecException e) {\r\n\t\t\t\tLibrary.logger().warning(\"Cannot turn stored key \" + strKey + \" into key of appropriate type.\");\r\n\t\t\t\tthrow new XMLStreamException(\"Cannot turn stored key \" + strKey + \" into key of appropriate type.\");\r\n\t\t\t}\r\n\t\t\tif (null == _key) {\r\n\t\t\t\tthrow new XMLStreamException(\"Cannot parse key: \" + strKey);\r\n\t\t\t}\r\n\t\t} else if (type() == KeyLocatorType.CERTIFICATE) {\r\n\t\t\tString strCert = XMLHelper.readElementText(reader, PUBLISHER_CERTIFICATE_ELEMENT);\r\n\t\t\ttry {\r\n\t\t\t\tbyte [] encodedCert = XMLHelper.decodeElement(strCert);\r\n\t\t\t\tCertificateFactory factory = CertificateFactory.getInstance(\"X.509\");\r\n\t\t\t\t_certificate = (X509Certificate) factory.generateCertificate(new ByteArrayInputStream(encodedCert));\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\tthrow new XMLStreamException(\"Cannot parse certificate: \" + strCert, e);\r\n\t\t\t} catch (CertificateException e) {\r\n\t\t\t\tthrow new XMLStreamException(\"Cannot decode certificate: \" + e.getMessage(), e);\r\n\t\t\t}\r\n\t\t\tif (null == _certificate) {\r\n\t\t\t\tthrow new XMLStreamException(\"Cannot parse certificate: \" + strCert);\r\n\t\t\t}\r\n\t\t} else if (type() == KeyLocatorType.NAME) {\r\n\t\t\t_name = new ContentName();\r\n\t\t\t_name.decode(reader);\r\n\t\t}\r\n\t\tXMLHelper.readEndElement(reader);\r\n\t}","commit_id":"901f71fbb50370784aedcf857e939100f0eb8584","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public void decode(XMLEventReader reader) throws XMLStreamException {\r\n\t\tXMLHelper.readStartElement(reader, PUBLISHER_ID_ELEMENT);\r\n\t\tXMLHelper.readStartElement(reader, PUBLISHER_TYPE_ELEMENT);\r\n\t\tString strType = reader.getElementText();\r\n\t\t_publisherType = nameToType(strType);\r\n\t\tif (null == _publisherType) {\r\n\t\t\tthrow new XMLStreamException(\"Cannot parse publisher type: \" + strType);\r\n\t\t}\r\n\t\tXMLHelper.readEndElement(reader);\r\n\t\t\r\n\t\tXMLHelper.readStartElement(reader, PUBLISHER_ID_ID_ELEMENT);\r\n\t\tString strID = reader.getElementText();\r\n\t\ttry {\r\n\t\t\t_publisherID = XMLHelper.decodeElement(strID);\r\n\t\t} catch (IOException e) {\r\n\t\t\tthrow new XMLStreamException(\"Cannot parse publisher ID: \" + strID, e);\r\n\t\t}\r\n\t\tif (null == _publisherID) {\r\n\t\t\tthrow new XMLStreamException(\"Cannot parse publisher ID: \" + strID);\r\n\t\t}\r\n\t\tXMLHelper.readEndElement(reader);\r\n\t\t\r\n\t\tXMLHelper.readEndElement(reader);\r\n\t}","id":2710,"modified_method":"public void decode(XMLEventReader reader) throws XMLStreamException {\r\n\t\tXMLHelper.readStartElement(reader, PUBLISHER_ID_ELEMENT);\r\n\r\n\t\tString strType = XMLHelper.readElementText(reader, PUBLISHER_TYPE_ELEMENT);\r\n\t\t_publisherType = nameToType(strType);\r\n\t\tif (null == _publisherType) {\r\n\t\t\tthrow new XMLStreamException(\"Cannot parse publisher type: \" + strType);\r\n\t\t}\r\n\t\t\r\n\t\tString strID = XMLHelper.readElementText(reader, PUBLISHER_ID_ID_ELEMENT);\r\n\t\ttry {\r\n\t\t\t_publisherID = XMLHelper.decodeElement(strID);\r\n\t\t} catch (IOException e) {\r\n\t\t\tthrow new XMLStreamException(\"Cannot parse publisher ID: \" + strID, e);\r\n\t\t}\r\n\t\tif (null == _publisherID) {\r\n\t\t\tthrow new XMLStreamException(\"Cannot parse publisher ID: \" + strID);\r\n\t\t}\r\n\t\t\r\n\t\tXMLHelper.readEndElement(reader);\r\n\t}","commit_id":"901f71fbb50370784aedcf857e939100f0eb8584","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public static void readStartElement(XMLEventReader reader, String startTag) throws XMLStreamException {\r\n\t\tXMLEvent event = reader.nextTag();\r\n\t\tif (!event.isStartElement() || (!startTag.equals(event.asStartElement().getName()))) {\r\n\t\t\t// Coming back with namespace decoration doesn't match\r\n\t\t\tthrow new XMLStreamException(\"Expected start element: \" + startTag + \" got: \" + event.toString());\r\n\t\t}\t\r\n\t}","id":2711,"modified_method":"public static void readStartElement(XMLEventReader reader, String startTag) throws XMLStreamException {\r\n\t\tXMLEvent event = reader.nextEvent();\r\n\t\tif (!event.isStartElement() || (!startTag.equals(event.asStartElement().getName().getLocalPart()))) {\r\n\t\t\t// Coming back with namespace decoration doesn't match\r\n\t\t\tthrow new XMLStreamException(\"Expected start element: \" + startTag + \" got: \" + event.toString());\r\n\t\t}\t\r\n\t}","commit_id":"901f71fbb50370784aedcf857e939100f0eb8584","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public static XMLStreamWriter beginEncoding(OutputStream oStream) throws XMLStreamException {\r\n\t\tXMLOutputFactory factory = XMLOutputFactory.newInstance();\r\n\t\ttry {\r\n\t\t\tfactory.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE , \r\n\t\t\t\t\tBoolean.TRUE);\r\n\t\t} catch (IllegalArgumentException e) {\r\n\t\t\tLibrary.logger().warning(\"XMLHelper: XMLOutputFactory is not namespace aware.\");\r\n\t\t}\r\n\t\tXMLStreamWriter writer = factory.createXMLStreamWriter(oStream);\r\n\t\twriter.setPrefix(XMLEncodable.CCN_PREFIX, XMLEncodable.CCN_NAMESPACE);\r\n\t\twriter.setDefaultNamespace(XMLEncodable.CCN_NAMESPACE);\r\n\t\t// DKS -- need to set encoding when creating factory, and set it here.\r\n\t\twriter.writeStartDocument();\r\n\t\t// Can't write default namespace till we write an element...\r\n\t\treturn writer;\r\n\t}","id":2712,"modified_method":"public static XMLStreamWriter beginEncoding(OutputStream oStream) throws XMLStreamException {\r\n\t\tXMLOutputFactory factory = XMLOutputFactory.newInstance();\r\n\t\tXMLStreamWriter writer = factory.createXMLStreamWriter(oStream);\r\n\t\twriter.setPrefix(XMLEncodable.CCN_PREFIX, XMLEncodable.CCN_NAMESPACE);\r\n\t\twriter.setDefaultNamespace(XMLEncodable.CCN_NAMESPACE);\r\n\t\t// DKS -- need to set encoding when creating factory, and set it here.\r\n\t\twriter.writeStartDocument();\r\n\t\t// Can't write default namespace till we write an element...\r\n\t\treturn writer;\r\n\t}","commit_id":"901f71fbb50370784aedcf857e939100f0eb8584","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public static void readEndElement(XMLEventReader reader) throws XMLStreamException {\r\n\t\tXMLEvent event = reader.nextTag();\r\n\t\tif (!event.isEndElement()) {\r\n\t\t\tthrow new XMLStreamException(\"Expected end element, got: \" + event.toString());\r\n\t\t}\r\n\t}","id":2713,"modified_method":"public static void readEndElement(XMLEventReader reader) throws XMLStreamException {\r\n\t\tXMLEvent event = reader.nextEvent();\r\n\t\tif (!event.isEndElement()) {\r\n\t\t\tthrow new XMLStreamException(\"Expected end element, got: \" + event.toString());\r\n\t\t}\r\n\t}","commit_id":"901f71fbb50370784aedcf857e939100f0eb8584","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public static XMLEventReader beginDecoding(InputStream iStream) throws XMLStreamException {\r\n\t\tXMLInputFactory factory = XMLInputFactory.newInstance();\r\n\t\ttry {\r\n\t\t\tfactory.setProperty(XMLInputFactory.IS_NAMESPACE_AWARE , \r\n\t\t\t\t\tBoolean.TRUE);\r\n\t\t} catch (IllegalArgumentException e) {\r\n\t\t\tLibrary.logger().warning(\"XMLHelper: XMLInputFactory is not namespace aware.\");\r\n\t\t}\r\n\t\tXMLEventReader reader = factory.createXMLEventReader(iStream);\r\n\t\treturn reader;\r\n\t}","id":2714,"modified_method":"public static XMLEventReader beginDecoding(InputStream iStream) throws XMLStreamException {\r\n\t\tXMLInputFactory factory = XMLInputFactory.newInstance();\r\n\t\tXMLEventReader reader = factory.createXMLEventReader(iStream);\r\n\t\treturn reader;\r\n\t}","commit_id":"901f71fbb50370784aedcf857e939100f0eb8584","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"@Override\n    public long read( ByteBuffer[] dsts ) throws IOException\n    {\n        adversary.injectFailure( IOException.class );\n        return super.read( dsts );\n    }","id":2715,"modified_method":"@Override\n    public long read( ByteBuffer[] dsts ) throws IOException\n    {\n        if ( adversary.injectFailureOrMischief( IOException.class ) )\n        {\n            ByteBuffer lastBuf = dsts[dsts.length - 1];\n            int oldLimit = mischiefLimit( lastBuf );\n            long read = super.read( dsts );\n            lastBuf.limit( oldLimit );\n            return read;\n        }\n        return super.read( dsts );\n    }","commit_id":"5c6798bca1eeea8a8c478b8bf66e4f4e66e19cdf","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public int read( ByteBuffer dst, long position ) throws IOException\n    {\n        adversary.injectFailure( IOException.class );\n        return super.read( dst, position );\n    }","id":2716,"modified_method":"@Override\n    public int read( ByteBuffer dst, long position ) throws IOException\n    {\n        if ( adversary.injectFailureOrMischief( IOException.class ) )\n        {\n            int oldLimit = mischiefLimit( dst );\n            int read = super.read( dst, position );\n            dst.limit( oldLimit );\n            return read;\n        }\n        return super.read( dst, position );\n    }","commit_id":"5c6798bca1eeea8a8c478b8bf66e4f4e66e19cdf","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public int read( ByteBuffer dst ) throws IOException\n    {\n        adversary.injectFailure( IOException.class );\n        return super.read( dst );\n    }","id":2717,"modified_method":"@Override\n    public int read( ByteBuffer dst ) throws IOException\n    {\n        if ( adversary.injectFailureOrMischief( IOException.class ) )\n        {\n            int oldLimit = mischiefLimit( dst );\n            int read = super.read( dst );\n            dst.limit( oldLimit );\n            return read;\n        }\n        return super.read( dst );\n    }","commit_id":"5c6798bca1eeea8a8c478b8bf66e4f4e66e19cdf","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public long read( ByteBuffer[] dsts, int offset, int length ) throws IOException\n    {\n        adversary.injectFailure( IOException.class );\n        return super.read( dsts, offset, length );\n    }","id":2718,"modified_method":"@Override\n    public long read( ByteBuffer[] dsts, int offset, int length ) throws IOException\n    {\n        if ( adversary.injectFailureOrMischief( IOException.class ) )\n        {\n            ByteBuffer lastBuf = dsts[dsts.length - 1];\n            int oldLimit = mischiefLimit( lastBuf );\n            long read = super.read( dsts, offset, length );\n            lastBuf.limit( oldLimit );\n            return read;\n        }\n        return super.read( dsts, offset, length );\n    }","commit_id":"5c6798bca1eeea8a8c478b8bf66e4f4e66e19cdf","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public int read( byte[] b, int off, int len ) throws IOException\n    {\n        adversary.injectFailure( IOException.class, NullPointerException.class, IndexOutOfBoundsException.class );\n        return inputStream.read( b, off, len );\n    }","id":2719,"modified_method":"@Override\n    public int read( byte[] b, int off, int len ) throws IOException\n    {\n        if ( adversary.injectFailureOrMischief(\n                IOException.class, NullPointerException.class, IndexOutOfBoundsException.class ) )\n        {\n            int halflen = Math.max( len / 2, 1 );\n            return inputStream.read( b, off, halflen );\n        }\n        return inputStream.read( b, off, len );\n    }","commit_id":"5c6798bca1eeea8a8c478b8bf66e4f4e66e19cdf","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public int read( byte[] b ) throws IOException\n    {\n        adversary.injectFailure( IOException.class, NullPointerException.class );\n        return inputStream.read( b );\n    }","id":2720,"modified_method":"@Override\n    public int read( byte[] b ) throws IOException\n    {\n        if ( adversary.injectFailureOrMischief( IOException.class, NullPointerException.class ) )\n        {\n            byte[] dup = new byte[Math.max( b.length / 2, 1 )];\n            int read = inputStream.read( dup );\n            System.arraycopy( dup, 0, b, 0, read );\n            return read;\n        }\n        return inputStream.read( b );\n    }","commit_id":"5c6798bca1eeea8a8c478b8bf66e4f4e66e19cdf","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public int read( CharBuffer target ) throws IOException\n    {\n        adversary.injectFailure( IOException.class, BufferOverflowException.class, IndexOutOfBoundsException.class );\n        return reader.read( target );\n    }","id":2721,"modified_method":"@Override\n    public int read( CharBuffer target ) throws IOException\n    {\n        if ( adversary.injectFailureOrMischief(\n                IOException.class, BufferOverflowException.class, IndexOutOfBoundsException.class ) )\n        {\n            CharBuffer dup = target.duplicate();\n            dup.limit( Math.max( target.limit() / 2, 1 ) );\n            return reader.read( dup );\n        }\n        return reader.read( target );\n    }","commit_id":"5c6798bca1eeea8a8c478b8bf66e4f4e66e19cdf","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public int read( char[] cbuf, int off, int len ) throws IOException\n    {\n        adversary.injectFailure( IOException.class );\n        return reader.read( cbuf, off, len );\n    }","id":2722,"modified_method":"@Override\n    public int read( char[] cbuf, int off, int len ) throws IOException\n    {\n        if ( adversary.injectFailureOrMischief( IOException.class ) )\n        {\n            return reader.read( cbuf, off, Math.max( len / 2, 1 ) );\n        }\n        return reader.read( cbuf, off, len );\n    }","commit_id":"5c6798bca1eeea8a8c478b8bf66e4f4e66e19cdf","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public int read( char[] cbuf ) throws IOException\n    {\n        adversary.injectFailure( IOException.class );\n        return reader.read( cbuf );\n    }","id":2723,"modified_method":"@Override\n    public int read( char[] cbuf ) throws IOException\n    {\n        if ( adversary.injectFailureOrMischief( IOException.class ) )\n        {\n            char[] dup = new char[ Math.max( cbuf.length / 2, 1 ) ];\n            int read = reader.read( dup );\n            System.arraycopy( dup, 0, cbuf, 0, read );\n            return read;\n        }\n        return reader.read( cbuf );\n    }","commit_id":"5c6798bca1eeea8a8c478b8bf66e4f4e66e19cdf","url":"https://github.com/neo4j/neo4j"},{"original_method":"public RandomAdversary( double failureRate, double errorRate )\n    {\n        assert 0 <= failureRate && failureRate < 1.0 :\n                \"Expected failure rate in [0.0; 1.0[ but was \" + failureRate;\n        assert 0 <= errorRate && errorRate < 1.0 :\n                \"Expected error rate in [0.0; 1.0[ but was \" + errorRate;\n        assert errorRate + failureRate < 1.0 :\n                \"Expected error rate + failure rate in [0.0; 1.0[ but was \" + (errorRate + failureRate);\n\n        this.failureRate = failureRate;\n        this.errorRate = errorRate;\n        probabilityFactor = STANDARD_PROPABILITY_FACTOR;\n    }","id":2724,"modified_method":"public RandomAdversary( double mischiefRate, double failureRate, double errorRate )\n    {\n        assert 0 <= mischiefRate && mischiefRate < 1.0 :\n                \"Expected mischief rate in [0.0; 1.0[ but was \" + mischiefRate;\n        assert 0 <= failureRate && failureRate < 1.0 :\n                \"Expected failure rate in [0.0; 1.0[ but was \" + failureRate;\n        assert 0 <= errorRate && errorRate < 1.0 :\n                \"Expected error rate in [0.0; 1.0[ but was \" + errorRate;\n        assert mischiefRate + errorRate + failureRate < 1.0 :\n                \"Expected error rate + failure rate in [0.0; 1.0[ but was \" +\n                        (mischiefRate + errorRate + failureRate);\n\n        this.mischiefRate = mischiefRate;\n        this.failureRate = failureRate;\n        this.errorRate = errorRate;\n        probabilityFactor = STANDARD_PROPABILITY_FACTOR;\n    }","commit_id":"5c6798bca1eeea8a8c478b8bf66e4f4e66e19cdf","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void injectFailure( Class<? extends Throwable>... failureTypes )\n    {\n        double luckyDraw = rng.nextDouble();\n        double factor = probabilityFactor;\n        boolean resetUponFailure = false;\n        if ( factor < 0 )\n        {\n            resetUponFailure = true;\n            factor = -factor;\n        }\n\n        if ( luckyDraw <= errorRate * factor )\n        {\n            if ( resetUponFailure )\n            {\n                probabilityFactor = STANDARD_PROPABILITY_FACTOR;\n            }\n            throwOneOf( OutOfMemoryError.class, NullPointerException.class );\n        }\n        if ( failureTypes.length > 0 && luckyDraw <= (failureRate + errorRate) * factor )\n        {\n            if ( resetUponFailure )\n            {\n                probabilityFactor = STANDARD_PROPABILITY_FACTOR;\n            }\n            throwOneOf( failureTypes );\n        }\n    }","id":2725,"modified_method":"@Override\n    public void injectFailure( Class<? extends Throwable>... failureTypes )\n    {\n        maybeDoBadStuff( failureTypes, false );\n    }","commit_id":"5c6798bca1eeea8a8c478b8bf66e4f4e66e19cdf","url":"https://github.com/neo4j/neo4j"},{"original_method":"/** Flush the buffers iteratively until no progress is made\n     * @param buffers The buffers to flush\n     * @return The unflushed buffers, or null if all flushed\n     * @throws IOException\n     */\n    protected ByteBuffer[] flush(ByteBuffer[] buffers) throws IOException\n    {\n        boolean progress=true;\n        while(progress && buffers!=null)\n        {\n            int before=buffers[0].remaining();\n            \n            if (_endPoint.flush(buffers))\n                return null;\n            int r=buffers[0].remaining();\n            progress=before!=r;\n            \n            int not_empty=0;\n            while(r==0)\n            {\n                if (++not_empty==buffers.length)\n                {\n                    buffers=null;\n                    not_empty=0;\n                    break;\n                }\n                r=buffers[not_empty].remaining();\n            }\n\n            if (not_empty>0)\n                buffers=Arrays.copyOfRange(buffers,not_empty,buffers.length);\n        }        \n        \n        // If buffers is null, then flush has returned false but has consumed all the data!\n        // This is probably SSL being unable to flush the encrypted buffer, so return EMPTY_BUFFERS\n        // and that will keep this WriteFlusher pending.\n        return buffers==null?EMPTY_BUFFERS:buffers;\n    }","id":2726,"modified_method":"/** Flush the buffers iteratively until no progress is made\n     * @param buffers The buffers to flush\n     * @return The unflushed buffers, or null if all flushed\n     * @throws IOException\n     */\n    protected ByteBuffer[] flush(ByteBuffer[] buffers) throws IOException\n    {\n        boolean progress=true;\n        while(progress && buffers!=null)\n        {\n            int before=buffers.length==0?0:buffers[0].remaining();\n            boolean flushed=_endPoint.flush(buffers);\n            int r=buffers.length==0?0:buffers[0].remaining();\n            \n            if (LOG.isDebugEnabled())\n                LOG.debug(\"Flushed={} {}/{}+{} {}\",flushed,before-r,before,buffers.length-1,this);\n            \n            if (flushed)\n                return null;\n            \n            progress=before!=r;\n            \n            int not_empty=0;\n            while(r==0)\n            {\n                if (++not_empty==buffers.length)\n                {\n                    buffers=null;\n                    not_empty=0;\n                    break;\n                }\n                progress=true;\n                r=buffers[not_empty].remaining();\n            }\n\n            if (not_empty>0)\n                buffers=Arrays.copyOfRange(buffers,not_empty,buffers.length);\n        }        \n\n        if (LOG.isDebugEnabled())\n            LOG.debug(\"!fully flushed {}\",this);\n        \n        // If buffers is null, then flush has returned false but has consumed all the data!\n        // This is probably SSL being unable to flush the encrypted buffer, so return EMPTY_BUFFERS\n        // and that will keep this WriteFlusher pending.\n        return buffers==null?EMPTY_BUFFERS:buffers;\n    }","commit_id":"30776f9662eb943f8c7aab26bfc54e28dd2c2213","url":"https://github.com/eclipse/jetty.project"},{"original_method":"/** Flush the buffers iteratively until no progress is made\n     * @param buffers The buffers to flush\n     * @return The unflushed buffers, or null if all flushed\n     * @throws IOException\n     */\n    protected ByteBuffer[] flush(ByteBuffer[] buffers) throws IOException\n    {\n        boolean progress=true;\n        while(progress && buffers!=null)\n        {\n            int before=buffers[0].remaining();\n            \n            if (_endPoint.flush(buffers))\n                return null;\n            int r=buffers[0].remaining();\n            progress=before!=r;\n            \n            int not_empty=0;\n            while(r==0)\n            {\n                if (++not_empty==buffers.length)\n                {\n                    buffers=null;\n                    not_empty=0;\n                    break;\n                }\n                r=buffers[not_empty].remaining();\n            }\n\n            if (not_empty>0)\n                buffers=Arrays.copyOfRange(buffers,not_empty,buffers.length);\n        }        \n        \n        // If buffers is null, then flush has returned false but has consumed all the data!\n        // This is probably SSL being unable to flush the encrypted buffer, so return EMPTY_BUFFERS\n        // and that will keep this WriteFlusher pending.\n        return buffers==null?EMPTY_BUFFERS:buffers;\n    }","id":2727,"modified_method":"/** Flush the buffers iteratively until no progress is made\n     * @param buffers The buffers to flush\n     * @return The unflushed buffers, or null if all flushed\n     * @throws IOException\n     */\n    protected ByteBuffer[] flush(ByteBuffer[] buffers) throws IOException\n    {\n        boolean progress=true;\n        while(progress && buffers!=null)\n        {\n            int before=buffers.length==0?0:buffers[0].remaining();\n            boolean flushed=_endPoint.flush(buffers);\n            int r=buffers.length==0?0:buffers[0].remaining();\n            \n            if (flushed)\n                return null;\n            \n            progress=before!=r;\n            \n            int not_empty=0;\n            while(r==0)\n            {\n                if (++not_empty==buffers.length)\n                {\n                    buffers=null;\n                    not_empty=0;\n                    break;\n                }\n                progress=true;\n                r=buffers[not_empty].remaining();\n            }\n\n            if (not_empty>0)\n                buffers=Arrays.copyOfRange(buffers,not_empty,buffers.length);\n        }        \n        \n        // If buffers is null, then flush has returned false but has consumed all the data!\n        // This is probably SSL being unable to flush the encrypted buffer, so return EMPTY_BUFFERS\n        // and that will keep this WriteFlusher pending.\n        return buffers==null?EMPTY_BUFFERS:buffers;\n    }","commit_id":"981e27b38361987c8af5673dfcb9dd6bf38c6cd1","url":"https://github.com/eclipse/jetty.project"},{"original_method":"private void doInvoke(final PsiClass aClass, final String superClassName) throws IncorrectOperationException {\n    PsiJavaCodeReferenceElement ref = getRefElement();\n    assert ref != null;\n    String refName = ref.getReferenceName();\n    LOG.assertTrue(refName != null);\n    PsiElementFactory elementFactory = JavaPsiFacade.getInstance(aClass.getProject()).getElementFactory();\n    PsiClass created = myKind == INTERFACE\n                      ? elementFactory.createInterface(refName)\n                      : myKind == CLASS ? elementFactory.createClass(refName) : elementFactory.createEnum(refName);\n    final PsiModifierList modifierList = created.getModifierList();\n    LOG.assertTrue(modifierList != null);\n    modifierList.setModifierProperty(PsiModifier.PRIVATE, true);\n    if (superClassName != null) {\n      PsiJavaCodeReferenceElement superClass =\n        elementFactory.createReferenceElementByFQClassName(superClassName, created.getResolveScope());\n      final PsiReferenceList extendsList = created.getExtendsList();\n      LOG.assertTrue(extendsList != null);\n      extendsList.add(superClass);\n    }\n    CreateClassFromNewFix.setupGenericParameters(created, ref);\n\n    created = (PsiClass)aClass.add(created);\n    ref.bindToElement(created);\n  }","id":2728,"modified_method":"private void doInvoke(final PsiClass aClass, final String superClassName) throws IncorrectOperationException {\n    PsiJavaCodeReferenceElement ref = getRefElement();\n    assert ref != null;\n    String refName = ref.getReferenceName();\n    LOG.assertTrue(refName != null);\n    PsiElementFactory elementFactory = JavaPsiFacade.getInstance(aClass.getProject()).getElementFactory();\n    PsiClass created = myKind == INTERFACE\n                      ? elementFactory.createInterface(refName)\n                      : myKind == CLASS ? elementFactory.createClass(refName) : elementFactory.createEnum(refName);\n    final PsiModifierList modifierList = created.getModifierList();\n    LOG.assertTrue(modifierList != null);\n    if (aClass.isInterface()) {\n      modifierList.setModifierProperty(PsiModifier.PACKAGE_LOCAL, true);\n    } else {\n      modifierList.setModifierProperty(PsiModifier.PRIVATE, true);\n    }\n    if (superClassName != null) {\n      PsiJavaCodeReferenceElement superClass =\n        elementFactory.createReferenceElementByFQClassName(superClassName, created.getResolveScope());\n      final PsiReferenceList extendsList = created.getExtendsList();\n      LOG.assertTrue(extendsList != null);\n      extendsList.add(superClass);\n    }\n    CreateClassFromNewFix.setupGenericParameters(created, ref);\n\n    created = (PsiClass)aClass.add(created);\n    ref.bindToElement(created);\n  }","commit_id":"ea622c99f36004e19d45e07ce40aecf3e1c330c6","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void performRefactoring(UsageInfo[] usages) {\n    if (!prepareWritable(usages)) return;\n    final List<PsiElement> importStatements = new ArrayList<PsiElement>();\n    if (!CodeStyleSettingsManager.getSettings(myProject).INSERT_INNER_CLASS_IMPORTS) {\n      usages = filterUsagesInImportStatements(usages, importStatements);\n    } else {\n      //rebind imports first\n      Arrays.sort(usages, new Comparator<UsageInfo>() {\n        public int compare(UsageInfo o1, UsageInfo o2) {\n          return PsiUtil.BY_POSITION.compare(o1.getElement(), o2.getElement());\n        }\n      });\n    }\n    saveNonCodeUsages(usages);\n    final Map<PsiElement, PsiElement> oldToNewElementsMapping = new HashMap<PsiElement, PsiElement>();\n    try {\n      for (PsiClass classToMove : myClassesToMove) {\n        ChangeContextUtil.encodeContextInfo(classToMove, true);\n        PsiClass newClass = (PsiClass)myTargetClass.addBefore(classToMove, myTargetClass.getRBrace());\n        PsiUtil.setModifierProperty(newClass, PsiModifier.STATIC, true);\n        newClass = (PsiClass)ChangeContextUtil.decodeContextInfo(newClass, null, null);\n        oldToNewElementsMapping.put(classToMove, newClass);\n      }\n\n      myNonCodeUsages = MoveClassesOrPackagesProcessor.retargetUsages(usages, oldToNewElementsMapping);\n      retargetNonCodeUsages(oldToNewElementsMapping);\n\n      retargetClassRefsInMoved(oldToNewElementsMapping);\n\n      JavaCodeStyleManager.getInstance(myProject).removeRedundantImports((PsiJavaFile)myTargetClass.getContainingFile());\n      for (PsiClass classToMove : myClassesToMove) {\n        classToMove.delete();\n      }\n\n      for (PsiElement element: importStatements) {\n        if (element.isValid()) {\n          element.delete();\n        }\n      }\n    }\n    catch (IncorrectOperationException e) {\n      LOG.error(e);\n    }\n  }","id":2729,"modified_method":"protected void performRefactoring(UsageInfo[] usages) {\n    if (!prepareWritable(usages)) return;\n    final List<PsiElement> importStatements = new ArrayList<PsiElement>();\n    if (!CodeStyleSettingsManager.getSettings(myProject).INSERT_INNER_CLASS_IMPORTS) {\n      usages = filterUsagesInImportStatements(usages, importStatements);\n    } else {\n      //rebind imports first\n      Arrays.sort(usages, new Comparator<UsageInfo>() {\n        public int compare(UsageInfo o1, UsageInfo o2) {\n          return PsiUtil.BY_POSITION.compare(o1.getElement(), o2.getElement());\n        }\n      });\n    }\n    saveNonCodeUsages(usages);\n    final Map<PsiElement, PsiElement> oldToNewElementsMapping = new HashMap<PsiElement, PsiElement>();\n    try {\n      for (PsiClass classToMove : myClassesToMove) {\n        ChangeContextUtil.encodeContextInfo(classToMove, true);\n        PsiClass newClass = (PsiClass)myTargetClass.addBefore(classToMove, myTargetClass.getRBrace());\n        if (myTargetClass.isInterface()) {\n          PsiUtil.setModifierProperty(newClass, PsiModifier.PACKAGE_LOCAL, true);\n        }\n        else {\n          PsiUtil.setModifierProperty(newClass, PsiModifier.STATIC, true);\n        }\n        newClass = (PsiClass)ChangeContextUtil.decodeContextInfo(newClass, null, null);\n        oldToNewElementsMapping.put(classToMove, newClass);\n      }\n\n      myNonCodeUsages = MoveClassesOrPackagesProcessor.retargetUsages(usages, oldToNewElementsMapping);\n      retargetNonCodeUsages(oldToNewElementsMapping);\n\n      retargetClassRefsInMoved(oldToNewElementsMapping);\n\n      JavaCodeStyleManager.getInstance(myProject).removeRedundantImports((PsiJavaFile)myTargetClass.getContainingFile());\n      for (PsiClass classToMove : myClassesToMove) {\n        classToMove.delete();\n      }\n\n      for (PsiElement element: importStatements) {\n        if (element.isValid()) {\n          element.delete();\n        }\n      }\n    }\n    catch (IncorrectOperationException e) {\n      LOG.error(e);\n    }\n  }","commit_id":"b0a382dbfa4bf282dca24797eaeb62eeb7afbcc9","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  protected void invokeImpl(final PsiClass targetClass) {\n    PsiNewExpression newExpression = getNewExpression();\n    PsiJavaCodeReferenceElement ref = newExpression.getClassOrAnonymousClassReference();\n    assert ref != null;\n    String refName = ref.getReferenceName();\n    LOG.assertTrue(refName != null);\n    PsiElementFactory elementFactory = JavaPsiFacade.getInstance(newExpression.getProject()).getElementFactory();\n    PsiClass created = elementFactory.createClass(refName);\n    final PsiModifierList modifierList = created.getModifierList();\n    LOG.assertTrue(modifierList != null);\n    modifierList.setModifierProperty(PsiModifier.PRIVATE, true);\n    if (PsiUtil.getEnclosingStaticElement(newExpression, targetClass) != null || isInThisOrSuperCall(newExpression)) {\n      modifierList.setModifierProperty(PsiModifier.STATIC, true);\n    }\n    created = (PsiClass)targetClass.add(created);\n\n    setupClassFromNewExpression(created, newExpression);\n\n    setupGenericParameters(created, ref);\n  }","id":2730,"modified_method":"@Override\n  protected void invokeImpl(final PsiClass targetClass) {\n    PsiNewExpression newExpression = getNewExpression();\n    PsiJavaCodeReferenceElement ref = newExpression.getClassOrAnonymousClassReference();\n    assert ref != null;\n    String refName = ref.getReferenceName();\n    LOG.assertTrue(refName != null);\n    PsiElementFactory elementFactory = JavaPsiFacade.getInstance(newExpression.getProject()).getElementFactory();\n    PsiClass created = elementFactory.createClass(refName);\n    final PsiModifierList modifierList = created.getModifierList();\n    LOG.assertTrue(modifierList != null);\n    if (targetClass.isInterface()) {\n      modifierList.setModifierProperty(PsiModifier.PACKAGE_LOCAL, true);\n    } else {\n      modifierList.setModifierProperty(PsiModifier.PRIVATE, true);\n    }\n    if (PsiUtil.getEnclosingStaticElement(newExpression, targetClass) != null || isInThisOrSuperCall(newExpression)) {\n      modifierList.setModifierProperty(PsiModifier.STATIC, true);\n    }\n    created = (PsiClass)targetClass.add(created);\n\n    setupClassFromNewExpression(created, newExpression);\n\n    setupGenericParameters(created, ref);\n  }","commit_id":"3d7a8fb300d5bdc15359fb3f8c19701de34a8de0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    Pair<Collection<Long>, TxData> get( String key, Object value )\n    {\n        value = value instanceof ValueContext ? ((ValueContext) value).getCorrectValue() : value.toString();\n        Set<Object> ids = idCollection( key, value, false );\n        if ( ids == null || ids.isEmpty() )\n        {\n            return new Pair<Collection<Long>, TxData>( Collections.<Long>emptySet(), this );\n        }\n        return new Pair<Collection<Long>, TxData>( toLongs( ids ), this );\n    }","id":2731,"modified_method":"@Override\n    Pair<Collection<Long>, TxData> get( String key, Object value )\n    {\n        value = value instanceof ValueContext ? ((ValueContext) value).getCorrectValue() : value.toString();\n        Set<Object> ids = idCollection( key, value, false );\n        if ( ids == null || ids.isEmpty() )\n        {\n            return Pair.<Collection<Long>, TxData>of( Collections.<Long>emptySet(), this );\n        }\n        return Pair.<Collection<Long>, TxData>of( toLongs( ids ), this );\n    }","commit_id":"6e1cdde83cc0480e700100e122ce92f89483f336","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    Pair<Collection<Long>, TxData> query( Query query, QueryContext contextOrNull )\n    {\n        if ( contextOrNull != null && contextOrNull.tradeCorrectnessForSpeed )\n        {\n            return new Pair<Collection<Long>, TxData>( Collections.<Long>emptyList(), this );\n        }\n        \n        return toFullTxData().query( query, contextOrNull );\n    }","id":2732,"modified_method":"@Override\n    Pair<Collection<Long>, TxData> query( Query query, QueryContext contextOrNull )\n    {\n        if ( contextOrNull != null && contextOrNull.tradeCorrectnessForSpeed )\n        {\n            return Pair.<Collection<Long>, TxData>of( Collections.<Long>emptyList(), this );\n        }\n\n        return toFullTxData().query( query, contextOrNull );\n    }","commit_id":"6e1cdde83cc0480e700100e122ce92f89483f336","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Pair<Collection<Long>, TxData> internalQuery( Query query, QueryContext contextOrNull )\n    {\n        if ( this.directory == null )\n        {\n            return new Pair<Collection<Long>, TxData>( Collections.<Long>emptySet(), this );\n        }\n        \n        try\n        {\n            Sort sorting = contextOrNull != null ? contextOrNull.sorting : null;\n            boolean prioritizeCorrectness = contextOrNull == null || !contextOrNull.tradeCorrectnessForSpeed; \n            Hits hits = new Hits( searcher( prioritizeCorrectness ), query, null, sorting, prioritizeCorrectness );\n            Collection<Long> result = new ArrayList<Long>();\n            for ( int i = 0; i < hits.length(); i++ )\n            {\n                result.add( Long.parseLong( hits.doc( i ).getField(\n                    LuceneIndex.KEY_DOC_ID ).stringValue() ) );\n            }\n            return new Pair<Collection<Long>, TxData>( result, this );\n        }\n        catch ( IOException e )\n        {\n            throw new RuntimeException( e );\n        }\n    }","id":2733,"modified_method":"private Pair<Collection<Long>, TxData> internalQuery( Query query, QueryContext contextOrNull )\n    {\n        if ( this.directory == null )\n        {\n            return Pair.<Collection<Long>, TxData>of( Collections.<Long>emptySet(), this );\n        }\n\n        try\n        {\n            Sort sorting = contextOrNull != null ? contextOrNull.sorting : null;\n            boolean prioritizeCorrectness = contextOrNull == null || !contextOrNull.tradeCorrectnessForSpeed;\n            Hits hits = new Hits( searcher( prioritizeCorrectness ), query, null, sorting, prioritizeCorrectness );\n            Collection<Long> result = new ArrayList<Long>();\n            for ( int i = 0; i < hits.length(); i++ )\n            {\n                result.add( Long.parseLong( hits.doc( i ).getField(\n                    LuceneIndex.KEY_DOC_ID ).stringValue() ) );\n            }\n            return Pair.<Collection<Long>, TxData>of( result, this );\n        }\n        catch ( IOException e )\n        {\n            throw new RuntimeException( e );\n        }\n    }","commit_id":"6e1cdde83cc0480e700100e122ce92f89483f336","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    Pair<Collection<Long>, TxData> get( String key, Object value )\n    {\n        value = value instanceof ValueContext ? ((ValueContext) value).getCorrectValue() : value.toString();\n        Set<Object> ids = idCollection( key, value, false );\n        if ( ids == null || ids.isEmpty() )\n        {\n            return new Pair<Collection<Long>, TxData>( Collections.<Long>emptySet(), this );\n        }\n        return new Pair<Collection<Long>, TxData>( toLongs( ids ), this );\n    }","id":2734,"modified_method":"@Override\n    Pair<Collection<Long>, TxData> get( String key, Object value )\n    {\n        value = value instanceof ValueContext ? ((ValueContext) value).getCorrectValue() : value.toString();\n        Set<Object> ids = idCollection( key, value, false );\n        if ( ids == null || ids.isEmpty() )\n        {\n            return Pair.<Collection<Long>, TxData>of( Collections.<Long>emptySet(), this );\n        }\n        return Pair.<Collection<Long>, TxData>of( toLongs( ids ), this );\n    }","commit_id":"a31314726131328b5bb3c05d386c7f44c7e78c58","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    Pair<Collection<Long>, TxData> query( Query query, QueryContext contextOrNull )\n    {\n        if ( contextOrNull != null && contextOrNull.tradeCorrectnessForSpeed )\n        {\n            return new Pair<Collection<Long>, TxData>( Collections.<Long>emptyList(), this );\n        }\n        \n        return toFullTxData().query( query, contextOrNull );\n    }","id":2735,"modified_method":"@Override\n    Pair<Collection<Long>, TxData> query( Query query, QueryContext contextOrNull )\n    {\n        if ( contextOrNull != null && contextOrNull.tradeCorrectnessForSpeed )\n        {\n            return Pair.<Collection<Long>, TxData>of( Collections.<Long>emptyList(), this );\n        }\n\n        return toFullTxData().query( query, contextOrNull );\n    }","commit_id":"a31314726131328b5bb3c05d386c7f44c7e78c58","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Pair<Collection<Long>, TxData> internalQuery( Query query, QueryContext contextOrNull )\n    {\n        if ( this.directory == null )\n        {\n            return new Pair<Collection<Long>, TxData>( Collections.<Long>emptySet(), this );\n        }\n        \n        try\n        {\n            Sort sorting = contextOrNull != null ? contextOrNull.sorting : null;\n            boolean prioritizeCorrectness = contextOrNull == null || !contextOrNull.tradeCorrectnessForSpeed; \n            Hits hits = new Hits( searcher( prioritizeCorrectness ), query, null, sorting, prioritizeCorrectness );\n            Collection<Long> result = new ArrayList<Long>();\n            for ( int i = 0; i < hits.length(); i++ )\n            {\n                result.add( Long.parseLong( hits.doc( i ).getField(\n                    LuceneIndex.KEY_DOC_ID ).stringValue() ) );\n            }\n            return new Pair<Collection<Long>, TxData>( result, this );\n        }\n        catch ( IOException e )\n        {\n            throw new RuntimeException( e );\n        }\n    }","id":2736,"modified_method":"private Pair<Collection<Long>, TxData> internalQuery( Query query, QueryContext contextOrNull )\n    {\n        if ( this.directory == null )\n        {\n            return Pair.<Collection<Long>, TxData>of( Collections.<Long>emptySet(), this );\n        }\n\n        try\n        {\n            Sort sorting = contextOrNull != null ? contextOrNull.sorting : null;\n            boolean prioritizeCorrectness = contextOrNull == null || !contextOrNull.tradeCorrectnessForSpeed;\n            Hits hits = new Hits( searcher( prioritizeCorrectness ), query, null, sorting, prioritizeCorrectness );\n            Collection<Long> result = new ArrayList<Long>();\n            for ( int i = 0; i < hits.length(); i++ )\n            {\n                result.add( Long.parseLong( hits.doc( i ).getField(\n                    LuceneIndex.KEY_DOC_ID ).stringValue() ) );\n            }\n            return Pair.<Collection<Long>, TxData>of( result, this );\n        }\n        catch ( IOException e )\n        {\n            throw new RuntimeException( e );\n        }\n    }","commit_id":"a31314726131328b5bb3c05d386c7f44c7e78c58","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    Pair<Collection<Long>, TxData> query( Query query, QueryContext contextOrNull )\n    {\n        if ( contextOrNull != null && contextOrNull.tradeCorrectnessForSpeed )\n        {\n            return new Pair<Collection<Long>, TxData>( Collections.<Long>emptyList(), this );\n        }\n        \n        return toFullTxData().query( query, contextOrNull );\n    }","id":2737,"modified_method":"@Override\n    Pair<Collection<Long>, TxData> query( Query query, QueryContext contextOrNull )\n    {\n        if ( contextOrNull != null && contextOrNull.tradeCorrectnessForSpeed )\n        {\n            return Pair.<Collection<Long>, TxData>of( Collections.<Long>emptyList(), this );\n        }\n\n        return toFullTxData().query( query, contextOrNull );\n    }","commit_id":"0ad73fc7fa59cd92d72ee97a0c291951118bef63","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    Pair<Collection<Long>, TxData> get( String key, Object value )\n    {\n        value = value instanceof ValueContext ? ((ValueContext) value).getCorrectValue() : value.toString();\n        Set<Object> ids = idCollection( key, value, false );\n        if ( ids == null || ids.isEmpty() )\n        {\n            return new Pair<Collection<Long>, TxData>( Collections.<Long>emptySet(), this );\n        }\n        return new Pair<Collection<Long>, TxData>( toLongs( ids ), this );\n    }","id":2738,"modified_method":"@Override\n    Pair<Collection<Long>, TxData> get( String key, Object value )\n    {\n        value = value instanceof ValueContext ? ((ValueContext) value).getCorrectValue() : value.toString();\n        Set<Object> ids = idCollection( key, value, false );\n        if ( ids == null || ids.isEmpty() )\n        {\n            return Pair.<Collection<Long>, TxData>of( Collections.<Long>emptySet(), this );\n        }\n        return Pair.<Collection<Long>, TxData>of( toLongs( ids ), this );\n    }","commit_id":"0ad73fc7fa59cd92d72ee97a0c291951118bef63","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Pair<Collection<Long>, TxData> internalQuery( Query query, QueryContext contextOrNull )\n    {\n        if ( this.directory == null )\n        {\n            return new Pair<Collection<Long>, TxData>( Collections.<Long>emptySet(), this );\n        }\n        \n        try\n        {\n            Sort sorting = contextOrNull != null ? contextOrNull.sorting : null;\n            boolean prioritizeCorrectness = contextOrNull == null || !contextOrNull.tradeCorrectnessForSpeed; \n            Hits hits = new Hits( searcher( prioritizeCorrectness ), query, null, sorting, prioritizeCorrectness );\n            Collection<Long> result = new ArrayList<Long>();\n            for ( int i = 0; i < hits.length(); i++ )\n            {\n                result.add( Long.parseLong( hits.doc( i ).getField(\n                    LuceneIndex.KEY_DOC_ID ).stringValue() ) );\n            }\n            return new Pair<Collection<Long>, TxData>( result, this );\n        }\n        catch ( IOException e )\n        {\n            throw new RuntimeException( e );\n        }\n    }","id":2739,"modified_method":"private Pair<Collection<Long>, TxData> internalQuery( Query query, QueryContext contextOrNull )\n    {\n        if ( this.directory == null )\n        {\n            return Pair.<Collection<Long>, TxData>of( Collections.<Long>emptySet(), this );\n        }\n\n        try\n        {\n            Sort sorting = contextOrNull != null ? contextOrNull.sorting : null;\n            boolean prioritizeCorrectness = contextOrNull == null || !contextOrNull.tradeCorrectnessForSpeed;\n            Hits hits = new Hits( searcher( prioritizeCorrectness ), query, null, sorting, prioritizeCorrectness );\n            Collection<Long> result = new ArrayList<Long>();\n            for ( int i = 0; i < hits.length(); i++ )\n            {\n                result.add( Long.parseLong( hits.doc( i ).getField(\n                    LuceneIndex.KEY_DOC_ID ).stringValue() ) );\n            }\n            return Pair.<Collection<Long>, TxData>of( result, this );\n        }\n        catch ( IOException e )\n        {\n            throw new RuntimeException( e );\n        }\n    }","commit_id":"0ad73fc7fa59cd92d72ee97a0c291951118bef63","url":"https://github.com/neo4j/neo4j"},{"original_method":"public LogMatcher warn( String format, Object... arguments )\n        {\n            return new LogMatcher( contextMatcher, WARN_LEVEL_MATCHER, equalTo( format ), arrayContaining( ensureMatchers( arguments ) ), NULL_THROWABLE_MATCHER );\n        }","id":2740,"modified_method":"public LogMatcher warn( String format, Object... arguments )\n        {\n            return warn( equalTo( format ), arguments );\n        }","commit_id":"db2e4f8282734c66f30c91e7a16fe52e5c134a88","url":"https://github.com/neo4j/neo4j"},{"original_method":"public LogMatcher debug( String format, Object... arguments )\n        {\n            return new LogMatcher( contextMatcher, DEBUG_LEVEL_MATCHER, equalTo( format ), arrayContaining( ensureMatchers( arguments ) ), NULL_THROWABLE_MATCHER );\n        }","id":2741,"modified_method":"public LogMatcher debug( String format, Object... arguments )\n        {\n            return debug( equalTo( format ), arguments );\n        }","commit_id":"db2e4f8282734c66f30c91e7a16fe52e5c134a88","url":"https://github.com/neo4j/neo4j"},{"original_method":"public LogMatcher info( String format, Object... arguments )\n        {\n            return new LogMatcher( contextMatcher, INFO_LEVEL_MATCHER, equalTo( format ), arrayContaining( ensureMatchers( arguments ) ), NULL_THROWABLE_MATCHER );\n        }","id":2742,"modified_method":"public LogMatcher info( String format, Object... arguments )\n        {\n            return info( equalTo( format ), arguments );\n        }","commit_id":"db2e4f8282734c66f30c91e7a16fe52e5c134a88","url":"https://github.com/neo4j/neo4j"},{"original_method":"public LogMatcher error( String format, Object... arguments )\n        {\n            return new LogMatcher( contextMatcher, ERROR_LEVEL_MATCHER, equalTo( format ), arrayContaining( ensureMatchers( arguments ) ), NULL_THROWABLE_MATCHER );\n        }","id":2743,"modified_method":"public LogMatcher error( String format, Object... arguments )\n        {\n            return error( equalTo( format ), arguments );\n        }","commit_id":"db2e4f8282734c66f30c91e7a16fe52e5c134a88","url":"https://github.com/neo4j/neo4j"},{"original_method":"public static void indexKeywords(GenericValue product, boolean doAll) throws GenericEntityException {\n        if (product == null) return;\n        Timestamp nowTimestamp = UtilDateTime.nowTimestamp();\n        \n        if (!doAll) {\n            if (\"N\".equals(product.getString(\"autoCreateKeywords\"))) {\n                return;\n            }\n            if (\"Y\".equals(product.getString(\"isVariant\")) && \"true\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.ignore.variants\"))) {\n                return;\n            }\n            Timestamp salesDiscontinuationDate = product.getTimestamp(\"salesDiscontinuationDate\");\n            if (salesDiscontinuationDate != null && salesDiscontinuationDate.before(nowTimestamp) && \n                    \"true\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.ignore.discontinued.sales\"))) {\n                return;\n            }\n        }\n        \n        GenericDelegator delegator = product.getDelegator();\n        if (delegator == null) return;\n        String productId = product.getString(\"productId\");\n\n        // get these in advance just once since they will be used many times for the multiple strings to index\n        String separators = KeywordSearchUtil.getSeparators();\n        String stopWordBagOr = KeywordSearchUtil.getStopWordBagOr();\n        String stopWordBagAnd = KeywordSearchUtil.getStopWordBagAnd();\n        boolean removeStems = KeywordSearchUtil.getRemoveStems();\n        Set stemSet = KeywordSearchUtil.getStemSet();\n        \n        Map keywords = new TreeMap();\n        List strings = new ArrayList(50);\n\n        int pidWeight = 1;\n        try {\n            pidWeight = Integer.parseInt(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.Product.productId\", \"1\"));\n        } catch (Exception e) {\n            Debug.logWarning(\"Could not parse weight number: \" + e.toString(), module);\n        }\n        keywords.put(product.getString(\"productId\").toLowerCase(), new Long(pidWeight));\n\n        addWeightedKeywordSourceString(product, \"productName\", strings);\n        addWeightedKeywordSourceString(product, \"internalName\", strings);\n        addWeightedKeywordSourceString(product, \"brandName\", strings);\n        addWeightedKeywordSourceString(product, \"description\", strings);\n        addWeightedKeywordSourceString(product, \"longDescription\", strings);\n\n        if (!\"0\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.ProductFeatureAndAppl.description\", \"1\")) ||\n            !\"0\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.ProductFeatureAndAppl.abbrev\", \"1\")) ||\n            !\"0\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.ProductFeatureAndAppl.idCode\", \"1\"))) {\n            // get strings from attributes and features\n            Iterator productFeatureAndAppls = UtilMisc.toIterator(delegator.findByAnd(\"ProductFeatureAndAppl\", UtilMisc.toMap(\"productId\", productId)));\n            while (productFeatureAndAppls != null && productFeatureAndAppls.hasNext()) {\n                GenericValue productFeatureAndAppl = (GenericValue) productFeatureAndAppls.next();\n                addWeightedKeywordSourceString(productFeatureAndAppl, \"description\", strings);\n                addWeightedKeywordSourceString(productFeatureAndAppl, \"abbrev\", strings);\n                addWeightedKeywordSourceString(productFeatureAndAppl, \"idCode\", strings);\n            }\n        }\n\n        // ProductAttribute\n        if (!\"0\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.ProductAttribute.attrName\", \"1\")) ||\n                !\"0\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.ProductAttribute.attrValue\", \"1\"))) {\n            Iterator productAttributes = UtilMisc.toIterator(delegator.findByAnd(\"ProductAttribute\", UtilMisc.toMap(\"productId\", productId)));\n            while (productAttributes != null && productAttributes.hasNext()) {\n                GenericValue productAttribute = (GenericValue) productAttributes.next();\n                addWeightedKeywordSourceString(productAttribute, \"attrName\", strings);\n                addWeightedKeywordSourceString(productAttribute, \"attrValue\", strings);\n            }\n        }\n\n        // GoodIdentification\n        if (!\"0\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.GoodIdentification.idValue\", \"1\"))) {\n            Iterator goodIdentifications = UtilMisc.toIterator(delegator.findByAnd(\"GoodIdentification\", UtilMisc.toMap(\"productId\", productId)));\n            while (goodIdentifications != null && goodIdentifications.hasNext()) {\n                GenericValue goodIdentification = (GenericValue) goodIdentifications.next();\n                addWeightedKeywordSourceString(goodIdentification, \"idValue\", strings);\n            }\n        }\n        \n        // Variant Product IDs\n        if (\"Y\".equals(product.getString(\"isVirtual\"))) {\n            if (!\"0\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.Variant.Product.productId\", \"1\"))) {\n                Iterator variantProductAssocs = UtilMisc.toIterator(delegator.findByAnd(\"ProductAssoc\", UtilMisc.toMap(\"productId\", productId, \"productAssocTypeId\", \"PRODUCT_VARIANT\")));\n                while (variantProductAssocs != null && variantProductAssocs.hasNext()) {\n                    GenericValue variantProductAssoc = (GenericValue) variantProductAssocs.next();\n                    int weight = 1;\n                    try {\n                        weight = Integer.parseInt(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.Variant.Product.productId\", \"1\"));\n                    } catch (Exception e) {\n                        Debug.logWarning(\"Could not parse weight number: \" + e.toString(), module);\n                    }\n                    for (int i = 0; i < weight; i++) {\n                        strings.add(variantProductAssoc.getString(\"productIdTo\"));\n                    }\n                }\n            }\n        }\n        \n        String productContentTypes = UtilProperties.getPropertyValue(\"prodsearch\", \"index.include.ProductContentTypes\");\n        List productContentTypeList = Arrays.asList(productContentTypes.split(\",\"));\n        Iterator productContentTypeIter = productContentTypeList.iterator();\n        while (productContentTypeIter.hasNext()) {\n            String productContentTypeId = (String) productContentTypeIter.next();\n\n            int weight = 1;\n            try {\n                weight = Integer.parseInt(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.ProductContent.\" + productContentTypeId, \"1\"));\n            } catch (Exception e) {\n                Debug.logWarning(\"Could not parse weight number: \" + e.toString(), module);\n            }\n            \n            List productContentAndInfos = delegator.findByAnd(\"ProductContentAndInfo\", UtilMisc.toMap(\"productId\", productId, \"productContentTypeId\", productContentTypeId), null);\n            Iterator productContentAndInfoIter = productContentAndInfos.iterator();\n            while (productContentAndInfoIter.hasNext()) {\n                GenericValue productContentAndInfo = (GenericValue) productContentAndInfoIter.next();\n                addWeightedDataResourceString(productContentAndInfo, weight, strings, delegator, product);\n                \n                List alternateViews = productContentAndInfo.getRelated(\"ContentAssocDataResourceViewTo\", UtilMisc.toMap(\"caContentAssocTypeId\", \"ALTERNATE_LOCALE\"), UtilMisc.toList(\"-caFromDate\"));\n                alternateViews = EntityUtil.filterByDate(alternateViews, UtilDateTime.nowTimestamp(), \"caFromDate\", \"caThruDate\", true);\n                Iterator alternateViewIter = alternateViews.iterator();\n                while (alternateViewIter.hasNext()) {\n                    GenericValue thisView = (GenericValue) alternateViewIter.next();\n                    addWeightedDataResourceString(thisView, weight, strings, delegator, product);\n                }\n            }\n        }\n        \n        Iterator strIter = strings.iterator();\n        while (strIter.hasNext()) {\n            String str = (String) strIter.next();\n            // call process keywords method here\n            KeywordSearchUtil.processKeywordsForIndex(str, keywords, separators, stopWordBagAnd, stopWordBagOr, removeStems, stemSet);\n        }\n\n        List toBeStored = new LinkedList();\n        Iterator kiter = keywords.entrySet().iterator();\n        while (kiter.hasNext()) {\n            Map.Entry entry = (Map.Entry) kiter.next();\n            GenericValue productKeyword = delegator.makeValue(\"ProductKeyword\", UtilMisc.toMap(\"productId\", product.getString(\"productId\"), \"keyword\", entry.getKey(), \"relevancyWeight\", entry.getValue()));\n            toBeStored.add(productKeyword);\n        }\n        if (toBeStored.size() > 0) {\n            if (Debug.verboseOn()) Debug.logVerbose(\"[KeywordSearch.induceKeywords] Storing \" + toBeStored.size() + \" keywords for productId \" + product.getString(\"productId\"), module);\n\n            if (\"true\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.delete.on_index\", \"false\"))) {\n                // delete all keywords if the properties file says to\n                delegator.removeByAnd(\"ProductKeyword\", UtilMisc.toMap(\"productId\", product.getString(\"productId\")));\n            }\n\n            delegator.storeAll(toBeStored);\n        }\n    }","id":2744,"modified_method":"public static void indexKeywords(GenericValue product, boolean doAll) throws GenericEntityException {\n        if (product == null) return;\n        Timestamp nowTimestamp = UtilDateTime.nowTimestamp();\n        \n        if (!doAll) {\n            if (\"N\".equals(product.getString(\"autoCreateKeywords\"))) {\n                return;\n            }\n            if (\"Y\".equals(product.getString(\"isVariant\")) && \"true\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.ignore.variants\"))) {\n                return;\n            }\n            Timestamp salesDiscontinuationDate = product.getTimestamp(\"salesDiscontinuationDate\");\n            if (salesDiscontinuationDate != null && salesDiscontinuationDate.before(nowTimestamp) && \n                    \"true\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.ignore.discontinued.sales\"))) {\n                return;\n            }\n        }\n        \n        GenericDelegator delegator = product.getDelegator();\n        if (delegator == null) return;\n        String productId = product.getString(\"productId\");\n\n        // get these in advance just once since they will be used many times for the multiple strings to index\n        String separators = KeywordSearchUtil.getSeparators();\n        String stopWordBagOr = KeywordSearchUtil.getStopWordBagOr();\n        String stopWordBagAnd = KeywordSearchUtil.getStopWordBagAnd();\n        boolean removeStems = KeywordSearchUtil.getRemoveStems();\n        Set stemSet = KeywordSearchUtil.getStemSet();\n        \n        Map keywords = new TreeMap();\n        List strings = new ArrayList(50);\n\n        int pidWeight = 1;\n        try {\n            pidWeight = Integer.parseInt(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.Product.productId\", \"0\"));\n        } catch (Exception e) {\n            Debug.logWarning(\"Could not parse weight number: \" + e.toString(), module);\n        }\n        keywords.put(product.getString(\"productId\").toLowerCase(), new Long(pidWeight));\n\n        // Product fields - default is 0 if not found in the properties file\n        if (!\"0\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.Product.productName\", \"0\"))) {\n            addWeightedKeywordSourceString(product, \"productName\", strings);\n        }\n        if (!\"0\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.Product.internalName\", \"0\"))) {\n            addWeightedKeywordSourceString(product, \"internalName\", strings);\n        }\n        if (!\"0\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.Product.brandName\", \"0\"))) {\n            addWeightedKeywordSourceString(product, \"brandName\", strings);\n        }\n        if (!\"0\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.Product.description\", \"0\"))) {\n            addWeightedKeywordSourceString(product, \"description\", strings);\n        }\n        if (!\"0\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.Product.longDescription\", \"0\"))) {\n            addWeightedKeywordSourceString(product, \"longDescription\", strings);\n        }\n\n        // ProductFeatureAppl\n        if (!\"0\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.ProductFeatureAndAppl.description\", \"0\")) ||\n            !\"0\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.ProductFeatureAndAppl.abbrev\", \"0\")) ||\n            !\"0\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.ProductFeatureAndAppl.idCode\", \"0\"))) {\n            // get strings from attributes and features\n            Iterator productFeatureAndAppls = UtilMisc.toIterator(delegator.findByAnd(\"ProductFeatureAndAppl\", UtilMisc.toMap(\"productId\", productId)));\n            while (productFeatureAndAppls != null && productFeatureAndAppls.hasNext()) {\n                GenericValue productFeatureAndAppl = (GenericValue) productFeatureAndAppls.next();\n                addWeightedKeywordSourceString(productFeatureAndAppl, \"description\", strings);\n                addWeightedKeywordSourceString(productFeatureAndAppl, \"abbrev\", strings);\n                addWeightedKeywordSourceString(productFeatureAndAppl, \"idCode\", strings);\n            }\n        }\n\n        // ProductAttribute\n        if (!\"0\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.ProductAttribute.attrName\", \"0\")) ||\n                !\"0\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.ProductAttribute.attrValue\", \"0\"))) {\n            Iterator productAttributes = UtilMisc.toIterator(delegator.findByAnd(\"ProductAttribute\", UtilMisc.toMap(\"productId\", productId)));\n            while (productAttributes != null && productAttributes.hasNext()) {\n                GenericValue productAttribute = (GenericValue) productAttributes.next();\n                addWeightedKeywordSourceString(productAttribute, \"attrName\", strings);\n                addWeightedKeywordSourceString(productAttribute, \"attrValue\", strings);\n            }\n        }\n\n        // GoodIdentification\n        if (!\"0\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.GoodIdentification.idValue\", \"0\"))) {\n            Iterator goodIdentifications = UtilMisc.toIterator(delegator.findByAnd(\"GoodIdentification\", UtilMisc.toMap(\"productId\", productId)));\n            while (goodIdentifications != null && goodIdentifications.hasNext()) {\n                GenericValue goodIdentification = (GenericValue) goodIdentifications.next();\n                addWeightedKeywordSourceString(goodIdentification, \"idValue\", strings);\n            }\n        }\n        \n        // Variant Product IDs\n        if (\"Y\".equals(product.getString(\"isVirtual\"))) {\n            if (!\"0\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.Variant.Product.productId\", \"0\"))) {\n                Iterator variantProductAssocs = UtilMisc.toIterator(delegator.findByAnd(\"ProductAssoc\", UtilMisc.toMap(\"productId\", productId, \"productAssocTypeId\", \"PRODUCT_VARIANT\")));\n                while (variantProductAssocs != null && variantProductAssocs.hasNext()) {\n                    GenericValue variantProductAssoc = (GenericValue) variantProductAssocs.next();\n                    int weight = 1;\n                    try {\n                        weight = Integer.parseInt(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.Variant.Product.productId\", \"0\"));\n                    } catch (Exception e) {\n                        Debug.logWarning(\"Could not parse weight number: \" + e.toString(), module);\n                    }\n                    for (int i = 0; i < weight; i++) {\n                        strings.add(variantProductAssoc.getString(\"productIdTo\"));\n                    }\n                }\n            }\n        }\n        \n        String productContentTypes = UtilProperties.getPropertyValue(\"prodsearch\", \"index.include.ProductContentTypes\");\n        List productContentTypeList = Arrays.asList(productContentTypes.split(\",\"));\n        Iterator productContentTypeIter = productContentTypeList.iterator();\n        while (productContentTypeIter.hasNext()) {\n            String productContentTypeId = (String) productContentTypeIter.next();\n\n            int weight = 1;\n            try {\n                // this is defaulting to a weight of 1 because you specified you wanted to index this type\n                weight = Integer.parseInt(UtilProperties.getPropertyValue(\"prodsearch\", \"index.weight.ProductContent.\" + productContentTypeId, \"1\"));\n            } catch (Exception e) {\n                Debug.logWarning(\"Could not parse weight number: \" + e.toString(), module);\n            }\n            \n            List productContentAndInfos = delegator.findByAnd(\"ProductContentAndInfo\", UtilMisc.toMap(\"productId\", productId, \"productContentTypeId\", productContentTypeId), null);\n            Iterator productContentAndInfoIter = productContentAndInfos.iterator();\n            while (productContentAndInfoIter.hasNext()) {\n                GenericValue productContentAndInfo = (GenericValue) productContentAndInfoIter.next();\n                addWeightedDataResourceString(productContentAndInfo, weight, strings, delegator, product);\n                \n                List alternateViews = productContentAndInfo.getRelated(\"ContentAssocDataResourceViewTo\", UtilMisc.toMap(\"caContentAssocTypeId\", \"ALTERNATE_LOCALE\"), UtilMisc.toList(\"-caFromDate\"));\n                alternateViews = EntityUtil.filterByDate(alternateViews, UtilDateTime.nowTimestamp(), \"caFromDate\", \"caThruDate\", true);\n                Iterator alternateViewIter = alternateViews.iterator();\n                while (alternateViewIter.hasNext()) {\n                    GenericValue thisView = (GenericValue) alternateViewIter.next();\n                    addWeightedDataResourceString(thisView, weight, strings, delegator, product);\n                }\n            }\n        }\n        \n        Iterator strIter = strings.iterator();\n        while (strIter.hasNext()) {\n            String str = (String) strIter.next();\n            // call process keywords method here\n            KeywordSearchUtil.processKeywordsForIndex(str, keywords, separators, stopWordBagAnd, stopWordBagOr, removeStems, stemSet);\n        }\n\n        List toBeStored = new LinkedList();\n        Iterator kiter = keywords.entrySet().iterator();\n        while (kiter.hasNext()) {\n            Map.Entry entry = (Map.Entry) kiter.next();\n            GenericValue productKeyword = delegator.makeValue(\"ProductKeyword\", UtilMisc.toMap(\"productId\", product.getString(\"productId\"), \"keyword\", entry.getKey(), \"relevancyWeight\", entry.getValue()));\n            toBeStored.add(productKeyword);\n        }\n        if (toBeStored.size() > 0) {\n            if (Debug.verboseOn()) Debug.logVerbose(\"[KeywordSearch.induceKeywords] Storing \" + toBeStored.size() + \" keywords for productId \" + product.getString(\"productId\"), module);\n\n            if (\"true\".equals(UtilProperties.getPropertyValue(\"prodsearch\", \"index.delete.on_index\", \"false\"))) {\n                // delete all keywords if the properties file says to\n                delegator.removeByAnd(\"ProductKeyword\", UtilMisc.toMap(\"productId\", product.getString(\"productId\")));\n            }\n\n            delegator.storeAll(toBeStored);\n        }\n    }","commit_id":"42645a4e513eb3d8ff00fec1be1843c92eafd364","url":"https://github.com/apache/ofbiz"},{"original_method":"@Override\n    protected void setUp() throws Exception\n    {\n        super.setUp();\n\n        this.context = new XWikiContext();\n\n        this.context.setDatabase(\"xwiki\");\n        this.context.setMainXWiki(\"xwiki\");\n\n        // We need to initialize the Component Manager so that the components can be looked up\n        getContext().put(ComponentManager.class.getName(), getComponentManager());\n\n        // Statically store the component manager in {@link Utils} to be able to access it without\n        // the context.\n        Utils.setComponentManager(getComponentManager());\n\n        // Bridge with old XWiki Context, required for old code.\n        Execution execution = getComponentManager().lookup(Execution.class);\n        execution.getContext().setProperty(\"xwikicontext\", this.context);\n\n        // Set a simple application context, as some components fail to start without one.\n        Container c = getComponentManager().lookup(Container.class);\n        c.setApplicationContext(new TestApplicationContext());\n\n        Mock mockCoreConfiguration = mock(CoreConfiguration.class);\n        mockCoreConfiguration.stubs().method(\"getDefaultDocumentSyntax\").will(returnValue(\"xwiki/1.0\"));\n        getComponentManager().registerComponent(CoreConfiguration.class, mockCoreConfiguration.proxy());\n    }","id":2745,"modified_method":"@Override\n    protected void setUp() throws Exception\n    {\n        super.setUp();\n\n        this.context = new XWikiContext();\n\n        this.context.setDatabase(\"xwiki\");\n        this.context.setMainXWiki(\"xwiki\");\n\n        // We need to initialize the Component Manager so that the components can be looked up\n        getContext().put(ComponentManager.class.getName(), getComponentManager());\n\n        // Statically store the component manager in {@link Utils} to be able to access it without\n        // the context.\n        Utils.setComponentManager(getComponentManager());\n\n        // Bridge with old XWiki Context, required for old code.\n        Execution execution = getComponentManager().lookup(Execution.class);\n        execution.getContext().setProperty(\"xwikicontext\", this.context);\n\n        // Set a simple application context, as some components fail to start without one.\n        Container c = getComponentManager().lookup(Container.class);\n        c.setApplicationContext(new TestApplicationContext());\n\n        Mock mockCoreConfiguration = mock(CoreConfiguration.class);\n        mockCoreConfiguration.stubs().method(\"getDefaultDocumentSyntax\").will(returnValue(\"xwiki/1.0\"));\n        DefaultComponentDescriptor<CoreConfiguration> descriptor = new DefaultComponentDescriptor<CoreConfiguration>();\n        descriptor.setRole(CoreConfiguration.class);\n        getComponentManager().registerComponent(descriptor, (CoreConfiguration) mockCoreConfiguration.proxy());\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.test.AbstractXWikiComponentTestCase#setUp()\n     */\n    @Override\n    protected void setUp() throws Exception\n    {\n        super.setUp();\n\n        Mock mockConfigurationSource = mock(ConfigurationSource.class);\n        mockConfigurationSource.stubs().method(\"getProperty\").with(eq(\"cache.defaultCache\"), ANYTHING).will(\n            returnValue(this.roleHint));\n        getComponentManager().registerComponent(ConfigurationSource.class, \"xwikiproperties\", \n            mockConfigurationSource.proxy());\n    }","id":2746,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.test.AbstractXWikiComponentTestCase#setUp()\n     */\n    @Override\n    protected void setUp() throws Exception\n    {\n        super.setUp();\n\n        Mock mockConfigurationSource = mock(ConfigurationSource.class);\n        mockConfigurationSource.stubs().method(\"getProperty\").with(eq(\"cache.defaultCache\"), ANYTHING).will(\n            returnValue(this.roleHint));\n\n        DefaultComponentDescriptor<ConfigurationSource> descriptor =\n            new DefaultComponentDescriptor<ConfigurationSource>();\n        descriptor.setRole(ConfigurationSource.class);\n        descriptor.setRoleHint(\"xwikiproperties\");\n        getComponentManager().registerComponent(descriptor, (ConfigurationSource) mockConfigurationSource.proxy());\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * @return a instance of the cache factory.\n     * @throws Exception error when searching for cache factory component.\n     */\n    public CacheFactory getCacheFactory() throws Exception\n    {\n        CacheManager cacheManager = (CacheManager) getComponentManager().lookup(CacheManager.class);\n\n        CacheFactory factory = cacheManager.getCacheFactory();\n\n        assertNotNull(factory);\n\n        return factory;\n    }","id":2747,"modified_method":"/**\n     * @return a instance of the cache factory.\n     * @throws Exception error when searching for cache factory component.\n     */\n    public CacheFactory getCacheFactory() throws Exception\n    {\n        CacheManager cacheManager = getComponentManager().lookup(CacheManager.class);\n\n        CacheFactory factory = cacheManager.getCacheFactory();\n\n        assertNotNull(factory);\n\n        return factory;\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * @param role the component role to watch (all components matching this role will trigger this event)\n     */\n    public ComponentDescriptorAddedEvent(Class< ? > role)\n    {\n        this.role = role;\n    }","id":2748,"modified_method":"/**\n     * @param role the component role to watch (all components matching this role will trigger this event)\n     */\n    public ComponentDescriptorAddedEvent(Class< ? > role)\n    {\n        super(role);\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Watches all roles (whenever a component is added it'll trigger this event).\n     */\n    public ComponentDescriptorAddedEvent()\n    {\n        this.role = null;\n    }","id":2749,"modified_method":"/**\n     * Watches all roles (whenever a component is added it'll trigger this event).\n     */\n    public ComponentDescriptorAddedEvent()\n    {\n\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * @see Event#matches(Object)\n     */\n    public boolean matches(Object otherEvent)\n    {\n        boolean result = false;\n        \n        if (ComponentDescriptorAddedEvent.class.isAssignableFrom(otherEvent.getClass())) {\n            // If we're watching all roles return a match\n            if (getRole() == null) {\n                result = true;\n            } else {\n                ComponentDescriptorAddedEvent event = (ComponentDescriptorAddedEvent) otherEvent;\n                if (getRole().getName().equals(event.getRole().getName())) {\n                    result = true;\n                }\n            }\n        }\n        \n        return result; \n    }","id":2750,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see Event#matches(Object)\n     */\n    public boolean matches(Object otherEvent)\n    {\n        boolean result = false;\n\n        if (ComponentDescriptorAddedEvent.class.isAssignableFrom(otherEvent.getClass())) {\n            result = super.matches(otherEvent);\n        }\n\n        return result;\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void testMatchesWhenSpecificRoleSpecified()\n    {\n        // Note: We use any class for the test but it's supposed to be a component role class.\n        ComponentDescriptorAddedEvent event = new ComponentDescriptorAddedEvent(Dummy.class);\n        Assert.assertTrue(event.matches(new ComponentDescriptorAddedEvent(Dummy.class)));\n        // Use a different class so that it doesn't match\n        Assert.assertFalse(event.matches(new ComponentDescriptorAddedEvent(ComponentDescriptorAddedEvent.class)));\n    }","id":2751,"modified_method":"@Test\n    public void testMatchesWhenSpecificRoleSpecified()\n    {\n        // Note: We use any class for the test but it's supposed to be a component role class.\n        ComponentDescriptorAddedEvent event = new ComponentDescriptorAddedEvent(Dummy.class);\n        Assert.assertTrue(event.matches(new ComponentDescriptorAddedEvent(Dummy.class, \"rolehint\")));\n        // Use a different class so that it doesn't match\n        Assert.assertFalse(event.matches(new ComponentDescriptorAddedEvent(ComponentDescriptorAddedEvent.class,\n            \"rolehint\")));\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void testMatchesAllComponentRoles()\n    {\n        ComponentDescriptorAddedEvent event = new ComponentDescriptorAddedEvent();\n        // Note: We use any class for the test but it's supposed to be a component role class.\n        Assert.assertTrue(event.matches(new ComponentDescriptorAddedEvent(Dummy.class)));\n    }","id":2752,"modified_method":"@Test\n    public void testMatchesAllComponentRoles()\n    {\n        ComponentDescriptorAddedEvent event = new ComponentDescriptorAddedEvent();\n        // Note: We use any class for the test but it's supposed to be a component role class.\n        Assert.assertTrue(event.matches(new ComponentDescriptorAddedEvent(Dummy.class, \"rolehint\")));\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * @see ComponentManager#registerComponent(ComponentDescriptor)\n     */\n    public <T> void registerComponent(ComponentDescriptor<T> componentDescriptor) throws ComponentRepositoryException\n    {\n        synchronized(this) {\n            RoleHint< ? > roleHint = new RoleHint<T>(componentDescriptor.getRole(), componentDescriptor.getRoleHint());\n            this.descriptors.put(roleHint, componentDescriptor);\n            // Remove any existing instance since we're replacing it\n            this.components.remove(roleHint);\n        }\n    }","id":2753,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see ComponentManager#registerComponent(ComponentDescriptor)\n     */\n    public <T> void registerComponent(ComponentDescriptor<T> componentDescriptor) throws ComponentRepositoryException\n    {\n        registerComponent(componentDescriptor, null);\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * @see ComponentManager#getComponentDescriptorList(Class)\n     */\n    @SuppressWarnings(\"unchecked\")\n    public <T> List<ComponentDescriptor<T>> getComponentDescriptorList(Class<T> role)\n    {\n        synchronized(this) {\n            List<ComponentDescriptor<T>> results = new ArrayList<ComponentDescriptor<T>>();\n            for (Map.Entry<RoleHint< ? >, ComponentDescriptor< ? >> entry : this.descriptors.entrySet()) {\n                if (entry.getKey().getRole().getName().equals(role.getName())) {\n                    results.add((ComponentDescriptor<T>) entry.getValue());\n                }\n            }\n            return results;\n        }\n    }","id":2754,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see ComponentManager#getComponentDescriptorList(Class)\n     */\n    @SuppressWarnings(\"unchecked\")\n    public <T> List<ComponentDescriptor<T>> getComponentDescriptorList(Class<T> role)\n    {\n        synchronized (this) {\n            List<ComponentDescriptor<T>> results = new ArrayList<ComponentDescriptor<T>>();\n            for (Map.Entry<RoleHint< ? >, ComponentDescriptor< ? >> entry : this.descriptors.entrySet()) {\n                if (entry.getKey().getRole() == role) {\n                    results.add((ComponentDescriptor<T>) entry.getValue());\n                }\n            }\n            return results;\n        }\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    private <T> List<T> initializeList(Class< T > role) throws ComponentLookupException\n    {\n        List<T> objects = new ArrayList<T>();\n        synchronized(this) {\n            for (RoleHint<?> roleHint : this.descriptors.keySet()) {\n                if (roleHint.getRole().getName().equals(role.getName())) {\n                    objects.add(initialize((RoleHint<T>)roleHint));\n                }\n            }\n        }\n        return objects;\n    }","id":2755,"modified_method":"@SuppressWarnings(\"unchecked\")\n    private <T> List<T> initializeList(Class<T> role) throws ComponentLookupException\n    {\n        List<T> objects = new ArrayList<T>();\n        synchronized (this) {\n            for (RoleHint< ? > roleHint : this.descriptors.keySet()) {\n                if (roleHint.getRole() == role) {\n                    objects.add(initialize((RoleHint<T>) roleHint));\n                }\n            }\n        }\n        return objects;\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Add ability to register a component instance. Useful for unit testing.\n     */\n    public <T> void registerComponent(Class< T > role, Object component)\n    {\n        synchronized(this) {\n            this.components.put(new RoleHint<T>(role), component);\n        }\n    }","id":2756,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.component.manager.ComponentManager#registerComponent(org.xwiki.component.descriptor.ComponentDescriptor,\n     *      java.lang.Object)\n     */\n    public <T> void registerComponent(ComponentDescriptor<T> componentDescriptor, T componentInstance)\n    {\n        synchronized (this) {\n            RoleHint<T> roleHint = new RoleHint<T>(componentDescriptor.getRole(), componentDescriptor.getRoleHint());\n\n            this.descriptors.put(roleHint, componentDescriptor);\n\n            if (componentInstance != null) {\n                // Set initial instance of the component\n                this.components.put(roleHint, componentInstance);\n            } else {\n                // Remove any existing instance since we're replacing it\n                this.components.remove(roleHint);\n            }\n        }\n\n        // Send event about component registration\n        if (this.eventManager != null) {\n            this.eventManager.notifyComponentRegistered(componentDescriptor);\n        }\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    private <T> T createInstance(RoleHint<T> roleHint) throws Exception\n    {\n        T instance = null;\n\n        // Instantiate component\n        ComponentDescriptor<T> descriptor = (ComponentDescriptor<T>) this.descriptors.get(roleHint);\n        if (descriptor != null) {\n            instance = (T) descriptor.getImplementation().newInstance();\n            \n            // Set each dependency\n            for (ComponentDependency<?> dependency : descriptor.getComponentDependencies()) {\n            \n                // TODO: Handle dependency cycles\n\n                // Handle different field types\n                Object fieldValue;\n                if ((dependency.getMappingType() != null)\n                    && List.class.isAssignableFrom(dependency.getMappingType()))\n                {\n                    fieldValue = lookupList(dependency.getRole());\n                } else if ((dependency.getMappingType() != null)\n                    && Map.class.isAssignableFrom(dependency.getMappingType()))\n                {\n                    fieldValue = lookupMap(dependency.getRole());\n                } else {\n                    fieldValue = lookup(dependency.getRole(), dependency.getRoleHint());\n                }\n                \n                // Set the field by introspection\n                if (fieldValue != null) {\n                    ReflectionUtils.setFieldValue(instance, dependency.getName(), fieldValue);\n                }\n            }\n\n            // Call Lifecycle\n\n            // LogEnabled\n            if (LogEnabled.class.isAssignableFrom(descriptor.getImplementation())) {\n                ((LogEnabled) instance).enableLogging(new CommonsLoggingLogger(instance.getClass()));\n            }\n            \n            // Composable\n            // Only support Composable for classes implementing ComponentManager since for all other components\n            // they should have ComponentManager injected.\n            if (ComponentManager.class.isAssignableFrom(descriptor.getImplementation()) \n                && Composable.class.isAssignableFrom(descriptor.getImplementation()))\n            {\n                ((Composable) instance).compose(this);\n            }\n            \n            // Initializable\n            if (Initializable.class.isAssignableFrom(descriptor.getImplementation())) {\n                ((Initializable) instance).initialize();\n            }\n        }\n        return instance;\n    }","id":2757,"modified_method":"@SuppressWarnings(\"unchecked\")\n    private <T> T createInstance(RoleHint<T> roleHint) throws Exception\n    {\n        T instance = null;\n\n        // Instantiate component\n        ComponentDescriptor<T> descriptor = (ComponentDescriptor<T>) this.descriptors.get(roleHint);\n        if (descriptor != null) {\n            instance = descriptor.getImplementation().newInstance();\n\n            // Set each dependency\n            for (ComponentDependency< ? > dependency : descriptor.getComponentDependencies()) {\n\n                // TODO: Handle dependency cycles\n\n                // Handle different field types\n                Object fieldValue;\n                if ((dependency.getMappingType() != null) && List.class.isAssignableFrom(dependency.getMappingType())) {\n                    fieldValue = lookupList(dependency.getRole());\n                } else if ((dependency.getMappingType() != null)\n                    && Map.class.isAssignableFrom(dependency.getMappingType())) {\n                    fieldValue = lookupMap(dependency.getRole());\n                } else {\n                    fieldValue = lookup(dependency.getRole(), dependency.getRoleHint());\n                }\n\n                // Set the field by introspection\n                if (fieldValue != null) {\n                    ReflectionUtils.setFieldValue(instance, dependency.getName(), fieldValue);\n                }\n            }\n\n            // Call Lifecycle\n\n            // LogEnabled\n            if (LogEnabled.class.isAssignableFrom(descriptor.getImplementation())) {\n                ((LogEnabled) instance).enableLogging(new CommonsLoggingLogger(instance.getClass()));\n            }\n\n            // Composable\n            // Only support Composable for classes implementing ComponentManager since for all other components\n            // they should have ComponentManager injected.\n            if (ComponentManager.class.isAssignableFrom(descriptor.getImplementation())\n                && Composable.class.isAssignableFrom(descriptor.getImplementation())) {\n                ((Composable) instance).compose(this);\n            }\n\n            // Initializable\n            if (Initializable.class.isAssignableFrom(descriptor.getImplementation())) {\n                ((Initializable) instance).initialize();\n            }\n        }\n        return instance;\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    private <T> Map<String, T> initializeMap(Class< ? > role) throws ComponentLookupException\n    {\n        Map<String, T> objects = new HashMap<String, T>();\n        synchronized(this) {\n            for (RoleHint<?> roleHint : this.descriptors.keySet()) {\n                if (roleHint.getRole().getName().equals(role.getName())) {\n                    objects.put(roleHint.getHint(), initialize((RoleHint<T>)roleHint));\n                }\n            }\n        }\n        return objects;\n    }","id":2758,"modified_method":"@SuppressWarnings(\"unchecked\")\n    private <T> Map<String, T> initializeMap(Class< ? > role) throws ComponentLookupException\n    {\n        Map<String, T> objects = new HashMap<String, T>();\n        synchronized (this) {\n            for (RoleHint< ? > roleHint : this.descriptors.keySet()) {\n                if (roleHint.getRole() == role) {\n                    objects.put(roleHint.getHint(), initialize((RoleHint<T>) roleHint));\n                }\n            }\n        }\n        return objects;\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Add ability to register a component instance. Useful for unit testing.\n     */\n    public <T> void registerComponent(Class< T > role, String hint, Object component)\n    {\n        synchronized(this) {\n            this.components.put(new RoleHint<T>(role, hint), component);\n        }\n    }","id":2759,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.component.manager.ComponentManager#unregisterComponent(java.lang.Class, java.lang.String)\n     */\n    @SuppressWarnings(\"unchecked\")\n    public void unregisterComponent(Class< ? > role, String roleHint)\n    {\n        ComponentDescriptor< ? > descriptor;\n\n        synchronized (this) {\n            RoleHint< ? > roleHintKey = new RoleHint(role, roleHint);\n\n            descriptor = this.descriptors.get(roleHintKey);\n\n            if (descriptor != null) {\n                this.descriptors.remove(roleHintKey);\n                this.components.remove(roleHintKey);\n            }\n        }\n\n        // Send event about component unregistration\n        if (descriptor != null && this.eventManager != null) {\n            this.eventManager.notifyComponentUnregistered(descriptor);\n        }\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    private <T> T initialize(RoleHint<T> roleHint) throws ComponentLookupException\n    {\n        T instance;\n        synchronized(this) {\n            instance = (T) this.components.get(roleHint);\n            if (instance == null) {\n                try {\n                    instance = createInstance(roleHint);\n                    if (instance == null) {\n                        throw new ComponentLookupException(\"Failed to lookup component [\" + roleHint + \"]\");\n                    } else if (this.descriptors.get(roleHint).getInstantiationStrategy() \n                        == ComponentInstantiationStrategy.SINGLETON)\n                    {\n                        this.components.put(roleHint, instance);\n                    }\n                } catch (Exception e) {\n                    throw new ComponentLookupException(\"Failed to lookup component [\" + roleHint + \"]\", e);\n                }\n                \n                // Send event about component instance creation\n                if (this.eventManager != null) {\n                    this.eventManager.notify(this.descriptors.get(roleHint));\n                }\n            }\n        }\n        return instance;\n    }","id":2760,"modified_method":"@SuppressWarnings(\"unchecked\")\n    private <T> T initialize(RoleHint<T> roleHint) throws ComponentLookupException\n    {\n        T instance;\n        synchronized (this) {\n            instance = (T) this.components.get(roleHint);\n            if (instance == null) {\n                try {\n                    instance = createInstance(roleHint);\n                    if (instance == null) {\n                        throw new ComponentLookupException(\"Failed to lookup component [\" + roleHint + \"]\");\n                    } else if (this.descriptors.get(roleHint).getInstantiationStrategy() == ComponentInstantiationStrategy.SINGLETON) {\n                        this.components.put(roleHint, instance);\n                    }\n                } catch (Exception e) {\n                    throw new ComponentLookupException(\"Failed to lookup component [\" + roleHint + \"]\", e);\n                }\n            }\n        }\n        return instance;\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void testRegisterComponentOverExistingOne() throws Exception\n    {\n        EmbeddableComponentManager ecm = new EmbeddableComponentManager();\n\n        DefaultComponentDescriptor<Role> d1 = new DefaultComponentDescriptor<Role>();\n        d1.setRole(Role.class);\n        d1.setImplementation(RoleImpl.class);\n        ecm.registerComponent(d1);\n\n        Object instance = ecm.lookup(Role.class);\n        Assert.assertEquals(RoleImpl.class.getName(), instance.getClass().getName());\n        \n        DefaultComponentDescriptor<Role> d2 = new DefaultComponentDescriptor<Role>();\n        d2.setRole(Role.class);\n        d2.setImplementation(OtherRoleImpl.class);\n        ecm.registerComponent(d2);\n\n        instance = ecm.lookup(Role.class);\n        Assert.assertEquals(OtherRoleImpl.class.getName(), instance.getClass().getName());\n    }","id":2761,"modified_method":"@Test\n    public void testRegisterComponentOverExistingOne() throws Exception\n    {\n        EmbeddableComponentManager ecm = new EmbeddableComponentManager();\n\n        DefaultComponentDescriptor<Role> d1 = new DefaultComponentDescriptor<Role>();\n        d1.setRole(Role.class);\n        d1.setImplementation(RoleImpl.class);\n        ecm.registerComponent(d1);\n\n        Object instance = ecm.lookup(Role.class);\n        Assert.assertSame(RoleImpl.class, instance.getClass());\n\n        DefaultComponentDescriptor<Role> d2 = new DefaultComponentDescriptor<Role>();\n        d2.setRole(Role.class);\n        d2.setImplementation(OtherRoleImpl.class);\n        ecm.registerComponent(d2);\n\n        instance = ecm.lookup(Role.class);\n        Assert.assertSame(OtherRoleImpl.class, instance.getClass());\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see com.xpn.xwiki.test.AbstractXWikiComponentTestCase#setUp()\n     */\n    @Before\n    public void setUp() throws Exception\n    {\n        super.setUp();\n\n        DocumentAccessBridge dab = this.context.mock(DocumentAccessBridge.class);\n        ((EmbeddableComponentManager) getComponentManager()).registerComponent(DocumentAccessBridge.class, dab);\n            \n        DocumentNameSerializer dns = this.context.mock(DocumentNameSerializer.class);\n        ((EmbeddableComponentManager) getComponentManager()).registerComponent(DocumentNameSerializer.class, dns);\n    }","id":2762,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see com.xpn.xwiki.test.AbstractXWikiComponentTestCase#setUp()\n     */\n    @Before\n    public void setUp() throws Exception\n    {\n        super.setUp();\n\n        DocumentAccessBridge mockDocumentAccessBridge = this.context.mock(DocumentAccessBridge.class);\n        DefaultComponentDescriptor<DocumentAccessBridge> descriptorDAB =\n            new DefaultComponentDescriptor<DocumentAccessBridge>();\n        descriptorDAB.setRole(DocumentAccessBridge.class);\n        getComponentManager().registerComponent(descriptorDAB, mockDocumentAccessBridge);\n\n        DocumentNameSerializer mockDocumentNameSerializer = this.context.mock(DocumentNameSerializer.class);\n        DefaultComponentDescriptor<DocumentNameSerializer> descriptorDNS =\n            new DefaultComponentDescriptor<DocumentNameSerializer>();\n        descriptorDNS.setRole(DocumentNameSerializer.class);\n        getComponentManager().registerComponent(descriptorDNS, mockDocumentNameSerializer);\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    protected void registerComponents() throws Exception\n    {\n        this.mockDocumentAccessBridge = mock(DocumentAccessBridge.class);\n        getComponentManager().registerComponent(DocumentAccessBridge.class, this.mockDocumentAccessBridge.proxy()); \n    }","id":2763,"modified_method":"@Override\n    protected void registerComponents() throws Exception\n    {\n        this.mockDocumentAccessBridge = mock(DocumentAccessBridge.class);\n\n        DefaultComponentDescriptor<DocumentAccessBridge> descriptor =\n            new DefaultComponentDescriptor<DocumentAccessBridge>();\n        descriptor.setRole(DocumentAccessBridge.class);\n        getComponentManager().registerComponent(descriptor,\n            (DocumentAccessBridge) this.mockDocumentAccessBridge.proxy());\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.component.manager.ComponentManager#lookupMap(Class)\n     */\n    public <T> Map<String, T> lookupMap(Class< T > role) throws ComponentLookupException\n    {\n        Map<String, T> result;\n        try {\n            result = this.plexusContainer.lookupMap(role.getName());\n        } catch (org.codehaus.plexus.component.repository.exception.ComponentLookupException e) {\n            throw new ComponentLookupException(\"Failed to lookup components for role [\" + role + \"]\", e);\n        }\n\n        return result;\n    }","id":2764,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.component.manager.ComponentManager#lookupMap(Class)\n     */\n    @SuppressWarnings(\"unchecked\")\n    public <T> Map<String, T> lookupMap(Class<T> role) throws ComponentLookupException\n    {\n        Map<String, T> result;\n        try {\n            result = this.plexusContainer.lookupMap(role.getName());\n        } catch (org.codehaus.plexus.component.repository.exception.ComponentLookupException e) {\n            throw new ComponentLookupException(\"Failed to lookup components for role [\" + role + \"]\", e);\n        }\n\n        return result;\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.component.manager.ComponentManager#lookupList(Class)\n     */\n    public <T> List< T > lookupList(Class< T > role) throws ComponentLookupException\n    {\n        List<T> result;\n        try {\n            result = this.plexusContainer.lookupList(role.getName());\n        } catch (org.codehaus.plexus.component.repository.exception.ComponentLookupException e) {\n            throw new ComponentLookupException(\"Failed to lookup components for role [\" + role + \"]\", e);\n        }\n\n        return result;\n    }","id":2765,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.component.manager.ComponentManager#lookupList(Class)\n     */\n    @SuppressWarnings(\"unchecked\")\n    public <T> List<T> lookupList(Class<T> role) throws ComponentLookupException\n    {\n        List<T> result;\n        try {\n            result = this.plexusContainer.lookupList(role.getName());\n        } catch (org.codehaus.plexus.component.repository.exception.ComponentLookupException e) {\n            throw new ComponentLookupException(\"Failed to lookup components for role [\" + role + \"]\", e);\n        }\n\n        return result;\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.component.manager.ComponentManager#lookup(Class, String)\n     */\n    public <T> T lookup(Class< T > role, String roleHint) throws ComponentLookupException\n    {\n        T result;\n        try {\n            result = (T) this.plexusContainer.lookup(role.getName(), roleHint);\n        } catch (org.codehaus.plexus.component.repository.exception.ComponentLookupException e) {\n            throw new ComponentLookupException(\"Failed to lookup component role [\" + role + \"] for hint [\" + roleHint\n                + \"]\", e);\n        }\n\n        return result;\n    }","id":2766,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.component.manager.ComponentManager#lookup(Class, String)\n     */\n    @SuppressWarnings(\"unchecked\")\n    public <T> T lookup(Class<T> role, String roleHint) throws ComponentLookupException\n    {\n        T result;\n        try {\n            result = (T) this.plexusContainer.lookup(role.getName(), roleHint);\n        } catch (org.codehaus.plexus.component.repository.exception.ComponentLookupException e) {\n            throw new ComponentLookupException(\"Failed to lookup component role [\" + role + \"] for hint [\" + roleHint\n                + \"]\", e);\n        }\n\n        return result;\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.component.manager.ComponentManager#lookup(Class)\n     */\n    public <T> T lookup(Class< T > role) throws ComponentLookupException\n    {\n        T result;\n        try {\n            result = (T) this.plexusContainer.lookup(role.getName());\n        } catch (org.codehaus.plexus.component.repository.exception.ComponentLookupException e) {\n            throw new ComponentLookupException(\"Failed to lookup component role [\" + role + \"]\", e);\n        }\n\n        return result;\n    }","id":2767,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.component.manager.ComponentManager#lookup(Class)\n     */\n    @SuppressWarnings(\"unchecked\")\n    public <T> T lookup(Class<T> role) throws ComponentLookupException\n    {\n        T result;\n        try {\n            result = (T) this.plexusContainer.lookup(role.getName());\n        } catch (org.codehaus.plexus.component.repository.exception.ComponentLookupException e) {\n            throw new ComponentLookupException(\"Failed to lookup component role [\" + role + \"]\", e);\n        }\n\n        return result;\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public static void setUpMocks(EmbeddableComponentManager componentManager) throws Exception\n    {\n        Mockery context = new Mockery();\n\n        // Document Access Bridge Mock\n        final DocumentAccessBridge mockDocumentAccessBridge = context.mock(DocumentAccessBridge.class);\n        componentManager.registerComponent(DocumentAccessBridge.class, mockDocumentAccessBridge);\n    }","id":2768,"modified_method":"public static void setUpMocks(EmbeddableComponentManager componentManager) throws Exception\n    {\n        Mockery context = new Mockery();\n\n        // Document Access Bridge Mock\n        final DocumentAccessBridge mockDocumentAccessBridge = context.mock(DocumentAccessBridge.class);\n        DefaultComponentDescriptor<DocumentAccessBridge> descriptorDAB =\n            new DefaultComponentDescriptor<DocumentAccessBridge>();\n        descriptorDAB.setRole(DocumentAccessBridge.class);\n        componentManager.registerComponent(descriptorDAB, mockDocumentAccessBridge);\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public static void setUpMocks(EmbeddableComponentManager componentManager)\n    {\n        Mockery context = new Mockery();\n\n        // Document Access Bridge Mock\n        final DocumentAccessBridge mockDocumentAccessBridge = context.mock(DocumentAccessBridge.class);\n        context.checking(new Expectations() {{\n            allowing(mockDocumentAccessBridge).hasProgrammingRights(); will(returnValue(true));\n        }});\n        componentManager.registerComponent(DocumentAccessBridge.class, mockDocumentAccessBridge);\n        \n        // Script Context Mock\n        final ScriptContextManager mockScriptContextManager = context.mock(ScriptContextManager.class);\n        final SimpleScriptContext scriptContext = new SimpleScriptContext();\n        scriptContext.setAttribute(\"var\", \"value\", ScriptContext.ENGINE_SCOPE);\n        context.checking(new Expectations() {{\n            allowing(mockScriptContextManager).getScriptContext(); will(returnValue(scriptContext));\n        }});\n        componentManager.registerComponent(ScriptContextManager.class, mockScriptContextManager);\n    }","id":2769,"modified_method":"public static void setUpMocks(EmbeddableComponentManager componentManager)\n    {\n        Mockery context = new Mockery();\n\n        // Document Access Bridge Mock\n        final DocumentAccessBridge mockDocumentAccessBridge = context.mock(DocumentAccessBridge.class);\n        context.checking(new Expectations()\n        {\n            {\n                allowing(mockDocumentAccessBridge).hasProgrammingRights();\n                will(returnValue(true));\n            }\n        });\n        DefaultComponentDescriptor<DocumentAccessBridge> descriptorDAB =\n            new DefaultComponentDescriptor<DocumentAccessBridge>();\n        descriptorDAB.setRole(DocumentAccessBridge.class);\n        componentManager.registerComponent(descriptorDAB, mockDocumentAccessBridge);\n\n        // Script Context Mock\n        final ScriptContextManager mockScriptContextManager = context.mock(ScriptContextManager.class);\n        final SimpleScriptContext scriptContext = new SimpleScriptContext();\n        scriptContext.setAttribute(\"var\", \"value\", ScriptContext.ENGINE_SCOPE);\n        context.checking(new Expectations()\n        {\n            {\n                allowing(mockScriptContextManager).getScriptContext();\n                will(returnValue(scriptContext));\n            }\n        });\n        DefaultComponentDescriptor<ScriptContextManager> descriptorSCM =\n            new DefaultComponentDescriptor<ScriptContextManager>();\n        descriptorSCM.setRole(ScriptContextManager.class);\n        componentManager.registerComponent(descriptorSCM, mockScriptContextManager);\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public static void setUpMocks(EmbeddableComponentManager componentManager)\n    {\n        Mockery context = new Mockery();\n\n        // Document Access Bridge Mock setup\n        final DocumentAccessBridge mockDocumentAccessBridge = context.mock(DocumentAccessBridge.class);\n        context.checking(new Expectations() {{\n            allowing(mockDocumentAccessBridge).hasProgrammingRights(); will(returnValue(true));\n        }});\n        componentManager.registerComponent(DocumentAccessBridge.class, mockDocumentAccessBridge);\n    }","id":2770,"modified_method":"public static void setUpMocks(EmbeddableComponentManager componentManager)\n    {\n        Mockery context = new Mockery();\n\n        // Document Access Bridge Mock setup\n        final DocumentAccessBridge mockDocumentAccessBridge = context.mock(DocumentAccessBridge.class);\n        context.checking(new Expectations()\n        {\n            {\n                allowing(mockDocumentAccessBridge).hasProgrammingRights();\n                will(returnValue(true));\n            }\n        });\n\n        DefaultComponentDescriptor<DocumentAccessBridge> descriptorDAB =\n            new DefaultComponentDescriptor<DocumentAccessBridge>();\n        descriptorDAB.setRole(DocumentAccessBridge.class);\n        componentManager.registerComponent(descriptorDAB, mockDocumentAccessBridge);\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public static Test suite() throws Exception\n    {\n        RenderingTestSuite suite = new RenderingTestSuite(\"Test RSS Macro\");\n        \n        suite.addTestsFromResource(\"macrorss1\", true);\n        suite.addTestsFromResource(\"macrorss2\", true);\n\n        ComponentManagerTestSetup setup = new ComponentManagerTestSetup(suite);\n\n        Mockery context = new Mockery();\n        final SkinAccessBridge mockSkinBridge = context.mock(SkinAccessBridge.class);\n        setup.getComponentManager().registerComponent(SkinAccessBridge.class, mockSkinBridge);\n\n        context.checking(new Expectations() {{\n            allowing(mockSkinBridge).getSkinFile(with(any(String.class)));\n            will(returnValue(\"/xwiki/skins/albatross/icons/black-rss.png\"));\n        }});\n        \n        return setup;\n    }","id":2771,"modified_method":"public static Test suite() throws Exception\n    {\n        RenderingTestSuite suite = new RenderingTestSuite(\"Test RSS Macro\");\n\n        suite.addTestsFromResource(\"macrorss1\", true);\n        suite.addTestsFromResource(\"macrorss2\", true);\n\n        ComponentManagerTestSetup setup = new ComponentManagerTestSetup(suite);\n\n        Mockery context = new Mockery();\n\n        final SkinAccessBridge mockSkinAccessBridge = context.mock(SkinAccessBridge.class);\n        DefaultComponentDescriptor<SkinAccessBridge> descriptorSAB = new DefaultComponentDescriptor<SkinAccessBridge>();\n        descriptorSAB.setRole(SkinAccessBridge.class);\n        setup.getComponentManager().registerComponent(descriptorSAB, mockSkinAccessBridge);\n\n        context.checking(new Expectations()\n        {\n            {\n                allowing(mockSkinAccessBridge).getSkinFile(with(any(String.class)));\n                will(returnValue(\"/xwiki/skins/albatross/icons/black-rss.png\"));\n            }\n        });\n\n        return setup;\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * @see ComponentEventManager#notify(ComponentDescriptor)\n     */\n    public <T> void notify(ComponentDescriptor< T > descriptor)\n    {\n        if (this.shouldStack) {\n            synchronized (this) {\n                this.events.push(descriptor);\n            }\n        } else {\n            notifyInternal(descriptor);\n        }\n    }","id":2772,"modified_method":"private void notifyComponentEvent(Event event, ComponentDescriptor< ? > descriptor)\n    {\n        if (this.shouldStack) {\n            synchronized (this) {\n                this.events.push(new ComponentEventEntry(event, descriptor));\n            }\n        } else {\n            sendEvent(event, descriptor);\n        }\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public synchronized void flushEvents()\n    {\n        while(!this.events.isEmpty()) {\n            notifyInternal(events.remove(0));\n        }\n    }","id":2773,"modified_method":"public synchronized void flushEvents()\n    {\n        for (ComponentEventEntry entry : this.events) {\n            sendEvent(entry.event, entry.descriptor);\n        }\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private void notifyInternal(ComponentDescriptor< ? > descriptor)\n    {\n        if (this.observationManager != null) {\n            ComponentDescriptorAddedEvent event = new ComponentDescriptorAddedEvent(descriptor.getRole());\n            this.observationManager.notify(event, this, descriptor);\n        }\n    }","id":2774,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.xwiki.component.manager.ComponentEventManager#notifyComponentRegistered(org.xwiki.component.descriptor.ComponentDescriptor)\n     */\n    public void notifyComponentRegistered(ComponentDescriptor< ? > descriptor)\n    {\n        notifyComponentEvent(new ComponentDescriptorAddedEvent(descriptor.getRole(), descriptor.getRoleHint()),\n            descriptor);\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void initializeConfigurationSource() throws Exception\n    {\n        // Register the mock configuration source for different roles so that tests always use the mock\n        ConfigurationSource mockSource = new MockConfigurationSource();\n        getComponentManager().registerComponent(ConfigurationSource.class, mockSource); \n        getComponentManager().registerComponent(ConfigurationSource.class, \"xwikiproperties\", mockSource); \n    }","id":2775,"modified_method":"public void initializeConfigurationSource() throws Exception\n    {\n        // Register the mock configuration source for different roles so that tests always use the mock\n        ConfigurationSource mockSource = new MockConfigurationSource();\n\n        DefaultComponentDescriptor<ConfigurationSource> descriptor;\n\n        descriptor = new DefaultComponentDescriptor<ConfigurationSource>();\n        descriptor.setRole(ConfigurationSource.class);\n        getComponentManager().registerComponent(descriptor, mockSource);\n\n        descriptor = new DefaultComponentDescriptor<ConfigurationSource>();\n        descriptor.setRole(ConfigurationSource.class);\n        descriptor.setRoleHint(\"xwikiproperties\");\n        getComponentManager().registerComponent(descriptor, mockSource);\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void testParseLinksWhenInWikiMode() throws Exception\n    {\n        // Create a Mock WikiModel implementation so that the link parser works in wiki mode\n        Mock mockWikiModel = mock(WikiModel.class);\n        getComponentManager().registerComponent(WikiModel.class, mockWikiModel.proxy());\n        LinkParser parser = getComponentManager().lookup(LinkParser.class, \"xwiki/2.0\"); \n\n        Link link = parser.parse(\"\");\n        assertEquals(\"\", link.getReference());\n        assertEquals(\"Reference = []\", link.toString());\n\n        link = parser.parse(\"Hello World\");\n        assertEquals(\"Hello World\", link.getReference());\n        assertEquals(LinkType.DOCUMENT, link.getType());\n        assertEquals(\"Reference = [Hello World]\", link.toString());\n\n        link = parser.parse(\"HelloWorld#anchor?param1=1&param2=2@wikipedia\");\n        assertEquals(\"HelloWorld\", link.getReference());\n        assertEquals(\"anchor\", link.getAnchor());\n        assertEquals(\"param1=1&param2=2\", link.getQueryString());\n        assertEquals(\"wikipedia\", link.getInterWikiAlias());\n        assertEquals(\"Reference = [HelloWorld] QueryString = [param1=1&param2=2] \"\n            + \"Anchor = [anchor] InterWikiAlias = [wikipedia]\", link.toString());\n\n        link = parser.parse(\"Hello World?xredirect=../whatever\");\n        assertEquals(\"Hello World\", link.getReference());\n        assertEquals(\"xredirect=../whatever\", link.getQueryString());\n        assertEquals(\"Reference = [Hello World] QueryString = [xredirect=../whatever]\", link.toString());\n\n        link = parser.parse(\"HelloWorld?xredirect=http://xwiki.org\");\n        assertEquals(\"HelloWorld\", link.getReference());\n        assertEquals(\"xredirect=http://xwiki.org\", link.getQueryString());\n        assertEquals(\"Reference = [HelloWorld] QueryString = [xredirect=http://xwiki.org]\", link.toString());\n\n        link = parser.parse(\"http://xwiki.org\");\n        assertEquals(\"http://xwiki.org\", link.getReference());\n        assertEquals(LinkType.URI, link.getType());\n        assertEquals(\"Reference = [http://xwiki.org]\", link.toString());\n\n        link = parser.parse(\"#anchor\");\n        assertEquals(\"anchor\", link.getAnchor());\n        assertEquals(\"Reference = [] Anchor = [anchor]\", link.toString());\n\n        link = parser.parse(\"Hello#anchor\");\n        assertEquals(\"Hello\", link.getReference());\n        assertEquals(\"anchor\", link.getAnchor());\n        assertEquals(\"Reference = [Hello] Anchor = [anchor]\", link.toString());\n\n        // Verify mailto: URI is recognized\n        link = parser.parse(\"mailto:john@smith.com\");\n        assertEquals(\"mailto:john@smith.com\", link.getReference());\n        assertEquals(LinkType.URI, link.getType());\n        assertEquals(\"Reference = [mailto:john@smith.com]\", link.toString());\n        \n        // Verify image: URI is recognized\n        link = parser.parse(\"image:some:content\");\n        assertEquals(\"image:some:content\", link.getReference());\n        assertEquals(LinkType.URI, link.getType());\n        assertEquals(\"Reference = [image:some:content]\", link.toString());\n\n        // Verify attach: URI is recognized\n        link = parser.parse(\"attach:some:content\");\n        assertEquals(\"attach:some:content\", link.getReference());\n        assertEquals(LinkType.URI, link.getType());\n        assertEquals(\"Reference = [attach:some:content]\", link.toString());\n        \n        // Verify that unknown URIs are ignored\n        // Note: We consider that myxwiki is the wiki name and http://xwiki.org is the page name\n        link = parser.parse(\"mywiki:http://xwiki.org\");\n        assertEquals(\"mywiki:http://xwiki.org\", link.getReference());\n        assertEquals(LinkType.DOCUMENT, link.getType());\n        assertEquals(\"Reference = [mywiki:http://xwiki.org]\", link.toString());\n        \n}","id":2776,"modified_method":"public void testParseLinksWhenInWikiMode() throws Exception\n    {\n        // Create a Mock WikiModel implementation so that the link parser works in wiki mode\n        Mock mockWikiModel = mock(WikiModel.class);\n\n        DefaultComponentDescriptor<WikiModel> componentDescriptor = new DefaultComponentDescriptor<WikiModel>();\n        componentDescriptor.setRole(WikiModel.class);\n        componentDescriptor.setInstantiationStrategy(ComponentInstantiationStrategy.SINGLETON);\n        componentDescriptor.setImplementation(null);\n\n        getComponentManager().registerComponent(componentDescriptor, (WikiModel) mockWikiModel.proxy());\n        LinkParser parser = getComponentManager().lookup(LinkParser.class, \"xwiki/2.0\");\n\n        Link link = parser.parse(\"\");\n        assertEquals(\"\", link.getReference());\n        assertEquals(\"Reference = []\", link.toString());\n\n        link = parser.parse(\"Hello World\");\n        assertEquals(\"Hello World\", link.getReference());\n        assertEquals(LinkType.DOCUMENT, link.getType());\n        assertEquals(\"Reference = [Hello World]\", link.toString());\n\n        link = parser.parse(\"HelloWorld#anchor?param1=1&param2=2@wikipedia\");\n        assertEquals(\"HelloWorld\", link.getReference());\n        assertEquals(\"anchor\", link.getAnchor());\n        assertEquals(\"param1=1&param2=2\", link.getQueryString());\n        assertEquals(\"wikipedia\", link.getInterWikiAlias());\n        assertEquals(\"Reference = [HelloWorld] QueryString = [param1=1&param2=2] \"\n            + \"Anchor = [anchor] InterWikiAlias = [wikipedia]\", link.toString());\n\n        link = parser.parse(\"Hello World?xredirect=../whatever\");\n        assertEquals(\"Hello World\", link.getReference());\n        assertEquals(\"xredirect=../whatever\", link.getQueryString());\n        assertEquals(\"Reference = [Hello World] QueryString = [xredirect=../whatever]\", link.toString());\n\n        link = parser.parse(\"HelloWorld?xredirect=http://xwiki.org\");\n        assertEquals(\"HelloWorld\", link.getReference());\n        assertEquals(\"xredirect=http://xwiki.org\", link.getQueryString());\n        assertEquals(\"Reference = [HelloWorld] QueryString = [xredirect=http://xwiki.org]\", link.toString());\n\n        link = parser.parse(\"http://xwiki.org\");\n        assertEquals(\"http://xwiki.org\", link.getReference());\n        assertEquals(LinkType.URI, link.getType());\n        assertEquals(\"Reference = [http://xwiki.org]\", link.toString());\n\n        link = parser.parse(\"#anchor\");\n        assertEquals(\"anchor\", link.getAnchor());\n        assertEquals(\"Reference = [] Anchor = [anchor]\", link.toString());\n\n        link = parser.parse(\"Hello#anchor\");\n        assertEquals(\"Hello\", link.getReference());\n        assertEquals(\"anchor\", link.getAnchor());\n        assertEquals(\"Reference = [Hello] Anchor = [anchor]\", link.toString());\n\n        // Verify mailto: URI is recognized\n        link = parser.parse(\"mailto:john@smith.com\");\n        assertEquals(\"mailto:john@smith.com\", link.getReference());\n        assertEquals(LinkType.URI, link.getType());\n        assertEquals(\"Reference = [mailto:john@smith.com]\", link.toString());\n\n        // Verify image: URI is recognized\n        link = parser.parse(\"image:some:content\");\n        assertEquals(\"image:some:content\", link.getReference());\n        assertEquals(LinkType.URI, link.getType());\n        assertEquals(\"Reference = [image:some:content]\", link.toString());\n\n        // Verify attach: URI is recognized\n        link = parser.parse(\"attach:some:content\");\n        assertEquals(\"attach:some:content\", link.getReference());\n        assertEquals(LinkType.URI, link.getType());\n        assertEquals(\"Reference = [attach:some:content]\", link.toString());\n\n        // Verify that unknown URIs are ignored\n        // Note: We consider that myxwiki is the wiki name and http://xwiki.org is the page name\n        link = parser.parse(\"mywiki:http://xwiki.org\");\n        assertEquals(\"mywiki:http://xwiki.org\", link.getReference());\n        assertEquals(LinkType.DOCUMENT, link.getType());\n        assertEquals(\"Reference = [mywiki:http://xwiki.org]\", link.toString());\n\n    }","commit_id":"b161e4ed0529d9ce59c977ad606964a6299cc51d","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void simpleMultiGetTests() throws Exception {\n        try {\n            client.admin().indices().prepareDelete(\"test\").execute().actionGet();\n        } catch (Exception e) {\n            // fine\n        }\n        client.admin().indices().prepareCreate(\"test\").setSettings(ImmutableSettings.settingsBuilder().put(\"index.refresh_interval\", -1)).execute().actionGet();\n\n        ClusterHealthResponse clusterHealth = client.admin().cluster().health(clusterHealthRequest().waitForGreenStatus()).actionGet();\n        assertThat(clusterHealth.isTimedOut(), equalTo(false));\n        assertThat(clusterHealth.getStatus(), equalTo(ClusterHealthStatus.GREEN));\n\n        MultiGetResponse response = client.prepareMultiGet().add(\"test\", \"type1\", \"1\").execute().actionGet();\n        assertThat(response.getResponses().length, equalTo(1));\n        assertThat(response.getResponses()[0].getResponse().isExists(), equalTo(false));\n\n        for (int i = 0; i < 10; i++) {\n            client.prepareIndex(\"test\", \"type1\", Integer.toString(i)).setSource(\"field\", \"value\" + i).execute().actionGet();\n        }\n\n        response = client.prepareMultiGet()\n                .add(\"test\", \"type1\", \"1\")\n                .add(\"test\", \"type1\", \"15\")\n                .add(\"test\", \"type1\", \"3\")\n                .add(\"test\", \"type1\", \"9\")\n                .add(\"test\", \"type1\", \"11\")\n                .execute().actionGet();\n        assertThat(response.getResponses().length, equalTo(5));\n        assertThat(response.getResponses()[0].getId(), equalTo(\"1\"));\n        assertThat(response.getResponses()[0].getResponse().isExists(), equalTo(true));\n        assertThat(response.getResponses()[0].getResponse().getSourceAsMap().get(\"field\").toString(), equalTo(\"value1\"));\n        assertThat(response.getResponses()[1].getId(), equalTo(\"15\"));\n        assertThat(response.getResponses()[1].getResponse().isExists(), equalTo(false));\n        assertThat(response.getResponses()[2].getId(), equalTo(\"3\"));\n        assertThat(response.getResponses()[2].getResponse().isExists(), equalTo(true));\n        assertThat(response.getResponses()[3].getId(), equalTo(\"9\"));\n        assertThat(response.getResponses()[3].getResponse().isExists(), equalTo(true));\n        assertThat(response.getResponses()[4].getId(), equalTo(\"11\"));\n        assertThat(response.getResponses()[4].getResponse().isExists(), equalTo(false));\n\n        // multi get with specific field\n        response = client.prepareMultiGet()\n                .add(new MultiGetRequest.Item(\"test\", \"type1\", \"1\").fields(\"field\"))\n                .add(new MultiGetRequest.Item(\"test\", \"type1\", \"3\").fields(\"field\"))\n                .execute().actionGet();\n\n        assertThat(response.getResponses().length, equalTo(2));\n        assertThat(response.getResponses()[0].getResponse().getSourceAsBytes(), nullValue());\n        assertThat(response.getResponses()[0].getResponse().getField(\"field\").getValues().get(0).toString(), equalTo(\"value1\"));\n    }","id":2777,"modified_method":"@Test\n    public void simpleMultiGetTests() throws Exception {\n        try {\n            client.admin().indices().prepareDelete(\"test\").execute().actionGet();\n        } catch (Exception e) {\n            // fine\n        }\n        client.admin().indices().prepareCreate(\"test\").setSettings(ImmutableSettings.settingsBuilder().put(\"index.refresh_interval\", -1)).execute().actionGet();\n\n        ClusterHealthResponse clusterHealth = client.admin().cluster().health(clusterHealthRequest().waitForGreenStatus()).actionGet();\n        assertThat(clusterHealth.isTimedOut(), equalTo(false));\n        assertThat(clusterHealth.getStatus(), equalTo(ClusterHealthStatus.GREEN));\n\n        MultiGetResponse response = client.prepareMultiGet().add(\"test\", \"type1\", \"1\").execute().actionGet();\n        assertThat(response.getResponses().length, equalTo(1));\n        assertThat(response.getResponses()[0].getResponse().isExists(), equalTo(false));\n\n        for (int i = 0; i < 10; i++) {\n            client.prepareIndex(\"test\", \"type1\", Integer.toString(i)).setSource(\"field\", \"value\" + i).execute().actionGet();\n        }\n\n        response = client.prepareMultiGet()\n                .add(\"test\", \"type1\", \"1\")\n                .add(\"test\", \"type1\", \"15\")\n                .add(\"test\", \"type1\", \"3\")\n                .add(\"test\", \"type1\", \"9\")\n                .add(\"test\", \"type1\", \"11\")\n                .execute().actionGet();\n        assertThat(response.getResponses().length, equalTo(5));\n        assertThat(response.getResponses()[0].getId(), equalTo(\"1\"));\n        assertThat(response.getResponses()[0].getResponse().isExists(), equalTo(true));\n        assertThat(response.getResponses()[0].getResponse().getSourceAsMap().get(\"field\").toString(), equalTo(\"value1\"));\n        assertThat(response.getResponses()[1].getId(), equalTo(\"15\"));\n        assertThat(response.getResponses()[1].getResponse().isExists(), equalTo(false));\n        assertThat(response.getResponses()[2].getId(), equalTo(\"3\"));\n        assertThat(response.getResponses()[2].getResponse().isExists(), equalTo(true));\n        assertThat(response.getResponses()[3].getId(), equalTo(\"9\"));\n        assertThat(response.getResponses()[3].getResponse().isExists(), equalTo(true));\n        assertThat(response.getResponses()[4].getId(), equalTo(\"11\"));\n        assertThat(response.getResponses()[4].getResponse().isExists(), equalTo(false));\n\n        // multi get with specific field\n        response = client.prepareMultiGet()\n                .add(new MultiGetRequest.Item(\"test\", \"type1\", \"1\").fields(\"field\"))\n                .add(new MultiGetRequest.Item(\"test\", \"type1\", \"3\").fields(\"field\"))\n                .execute().actionGet();\n\n        assertThat(response.getResponses().length, equalTo(2));\n        assertThat(response.getResponses()[0].getResponse().getSourceAsBytes(), nullValue());\n        assertThat(response.getResponses()[0].getResponse().getField(\"field\").getValues().get(0).toString(), equalTo(\"value1\"));\n\n        // multi get with \"no\" fields, nothing should return, exists indication should still be around\n        response = client.prepareMultiGet()\n                .add(new MultiGetRequest.Item(\"test\", \"type1\", \"1\").fields(Strings.EMPTY_ARRAY))\n                .add(new MultiGetRequest.Item(\"test\", \"type1\", \"3\").fields(Strings.EMPTY_ARRAY))\n                .execute().actionGet();\n\n        assertThat(response.getResponses().length, equalTo(2));\n        assertThat(response.getResponses()[0].getResponse().isExists(), equalTo(true));\n        assertThat(response.getResponses()[0].getResponse().getSourceAsBytes(), nullValue());\n        assertThat(response.getResponses()[0].getResponse().getFields().size(), equalTo(0));\n    }","commit_id":"d983389090a481a95d705e7dd6fa2110f5f8c74b","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n        public void writeTo(StreamOutput out) throws IOException {\n            out.writeString(index);\n            if (type == null) {\n                out.writeBoolean(false);\n            } else {\n                out.writeBoolean(true);\n                out.writeString(type);\n            }\n            out.writeString(id);\n            if (routing == null) {\n                out.writeBoolean(false);\n            } else {\n                out.writeBoolean(true);\n                out.writeString(routing);\n            }\n            if (fields == null) {\n                out.writeVInt(0);\n            } else {\n                out.writeVInt(fields.length);\n                for (String field : fields) {\n                    out.writeString(field);\n                }\n            }\n        }","id":2778,"modified_method":"@Override\n        public void writeTo(StreamOutput out) throws IOException {\n            out.writeString(index);\n            out.writeOptionalString(type);\n            out.writeString(id);\n            out.writeOptionalString(routing);\n            if (out.getVersion().before(Version.V_0_90_1)) {\n                if (fields == null) {\n                    out.writeVInt(0);\n                } else {\n                    out.writeVInt(fields.length);\n                    for (String field : fields) {\n                        out.writeString(field);\n                    }\n                }\n            } else {\n                if (fields == null) {\n                    out.writeInt(-1);\n                } else {\n                    out.writeInt(fields.length);\n                    for (String field : fields) {\n                        out.writeString(field);\n                    }\n                }\n            }\n        }","commit_id":"d983389090a481a95d705e7dd6fa2110f5f8c74b","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n        public void readFrom(StreamInput in) throws IOException {\n            index = in.readString();\n            if (in.readBoolean()) {\n                type = in.readString();\n            }\n            id = in.readString();\n            if (in.readBoolean()) {\n                routing = in.readString();\n            }\n            int size = in.readVInt();\n            if (size > 0) {\n                fields = new String[size];\n                for (int i = 0; i < size; i++) {\n                    fields[i] = in.readString();\n                }\n            }\n        }","id":2779,"modified_method":"@Override\n        public void readFrom(StreamInput in) throws IOException {\n            index = in.readString();\n            type = in.readOptionalString();\n            id = in.readString();\n            routing = in.readOptionalString();\n            if (in.getVersion().before(Version.V_0_90_1)) {\n                int size = in.readVInt();\n                if (size > 0) {\n                    fields = new String[size];\n                    for (int i = 0; i < size; i++) {\n                        fields[i] = in.readString();\n                    }\n                }\n            } else {\n                // post 0.90.1, we maintain the semantic difference between not setting fields (default to _source)\n                // and setting fields to empty array (no data to return)\n                int size = in.readInt();\n                if (size >= 0) {\n                    fields = new String[size];\n                    for (int i = 0; i < size; i++) {\n                        fields[i] = in.readString();\n                    }\n                }\n            }\n        }","commit_id":"d983389090a481a95d705e7dd6fa2110f5f8c74b","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * Tries to find a ceylon runner either user-specified or detected\n     */\n    private String getCeylon() {\n        return Util.findCeylonScript(this.executable, \"ceylon\", getProject());\n    }","id":2780,"modified_method":"/**\n     * Tries to find a ceylon runner either user-specified or detected\n     */\n    private String getCeylon() {\n        return Util.findCeylonScript(this.executable, getProject());\n    }","commit_id":"146494d35af700929561539cebed853641fde8cb","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"/**\n     * Perform the compilation.\n     */\n    private void run() {\n        Commandline cmd = new Commandline();\n        cmd.setExecutable(getCeylon());\n        if(run != null){\n            cmd.createArgument().setValue(\"-run\");\n            cmd.createArgument().setValue(run);\n        }\n        if(src != null){\n            cmd.createArgument().setValue(\"-src\");\n            cmd.createArgument().setValue(src.toString());\n        }\n        if(repositories != null){\n            for(Rep rep : repositories){\n                // skip empty entries\n                if(rep.url == null || rep.url.isEmpty())\n                    continue;\n                cmd.createArgument().setValue(\"-rep\");\n                cmd.createArgument().setValue(Util.quoteParameter(rep.url));\n            }\n        }\n        cmd.createArgument().setValue(module);\n\n        try {\n            Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN));\n            exe.setAntRun(getProject());\n            exe.setWorkingDirectory(getProject().getBaseDir());\n            log(\"Command line \" + Arrays.toString(cmd.getCommandline()), Project.MSG_VERBOSE);\n            exe.setCommandline(cmd.getCommandline());\n            exe.execute();\n            if (exe.getExitValue() != 0) {\n                exitHandler.handleExit(this, exe.getExitValue(), FAIL_MSG);\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Error running Ceylon compiler\", e, getLocation());\n        }\n    }","id":2781,"modified_method":"/**\n     * Perform the compilation.\n     */\n    private void run() {\n        Commandline cmd = new Commandline();\n        cmd.setExecutable(getCeylon());\n        cmd.createArgument().setValue(\"run\");\n        if(run != null){\n            cmd.createArgument().setValue(\"--run=\" + run);\n        }\n        if(src != null){\n            cmd.createArgument().setValue(\"--src=\"+src.toString());\n        }\n        if(repositories != null){\n            for(Rep rep : repositories){\n                // skip empty entries\n                if(rep.url == null || rep.url.isEmpty())\n                    continue;\n                cmd.createArgument().setValue(\"--rep=\"+Util.quoteParameter(rep.url));\n            }\n        }\n        cmd.createArgument().setValue(module);\n\n        try {\n            Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN));\n            exe.setAntRun(getProject());\n            exe.setWorkingDirectory(getProject().getBaseDir());\n            log(\"Command line \" + Arrays.toString(cmd.getCommandline()), Project.MSG_VERBOSE);\n            exe.setCommandline(cmd.getCommandline());\n            exe.execute();\n            if (exe.getExitValue() != 0) {\n                exitHandler.handleExit(this, exe.getExitValue(), FAIL_MSG);\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Error running Ceylon compiler\", e, getLocation());\n        }\n    }","commit_id":"146494d35af700929561539cebed853641fde8cb","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"/**\n     * Tries to find a ceylonc compiler either user-specified or detected\n     */\n    private String getCompiler() {\n        return Util.findCeylonScript(this.executable, \"ceylonc\", getProject());\n    }","id":2782,"modified_method":"/**\n     * Tries to find a ceylonc compiler either user-specified or detected\n     */\n    private String getCompiler() {\n        return Util.findCeylonScript(this.executable, getProject());\n    }","commit_id":"146494d35af700929561539cebed853641fde8cb","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"/**\n     * Perform the compilation.\n     */\n    private void compile() {\n        if (compileList.size() == 0 && modules.size() == 0){\n            log(\"Nothing to compile\");\n            return;\n        }\n     \n        LazyHelper lazyTask = new LazyHelper(this) {\n            @Override\n            protected File getArtifactDir(String version, Module module) {\n                File outModuleDir = new File(getOut(), module.toDir().getPath()+\"/\"+version);\n                return outModuleDir;\n            }\n            \n            @Override\n            protected FileFilter getArtifactFilter() {\n                return ARTIFACT_FILTER;\n            }\n        };\n        \n        if (lazyTask.filterFiles(compileList) \n                && lazyTask.filterModules(modules)) {\n            log(\"Everything's up to date\");\n            return;\n        }\n        \n        Commandline cmd = new Commandline();\n        cmd.setExecutable(getCompiler());\n        if(verbose != null && verbose.booleanValue()){\n            cmd.createArgument().setValue(\"-verbose\");\n        }\n        if(user != null){\n            cmd.createArgument().setValue(\"-user\");\n            cmd.createArgument().setValue(user);\n        }\n        if(pass != null){\n            cmd.createArgument().setValue(\"-pass\");\n            cmd.createArgument().setValue(pass);\n        }\n        \n        cmd.createArgument().setValue(\"-out\");\n        cmd.createArgument().setValue(getOut());\n        \n        \n        for (File src : getSrc()) {\n            cmd.createArgument().setValue(\"-src\");\n            cmd.createArgument().setValue(src.getAbsolutePath());\n        }\n        \n        for(Rep rep : getRepositories()){\n            // skip empty entries\n            if(rep.url == null || rep.url.isEmpty())\n                continue;\n            log(\"Adding repository: \"+rep, Project.MSG_VERBOSE);\n            cmd.createArgument().setValue(\"-rep\");\n            cmd.createArgument().setValue(Util.quoteParameter(rep.url));\n        }\n        if(classpath != null){\n        \tString path = classpath.toString();\n            cmd.createArgument().setValue(\"-classpath\");\n            cmd.createArgument().setValue(Util.quoteParameter(path));\n        }\n        // files to compile\n        for (File file : compileList) {\n            log(\"Adding source file: \"+file.getAbsolutePath(), Project.MSG_VERBOSE);\n            cmd.createArgument().setValue(file.getAbsolutePath());\n        }\n        // modules to compile\n        for (Module module : modules) {\n            log(\"Adding module: \"+module, Project.MSG_VERBOSE);\n            cmd.createArgument().setValue(module.toSpec());\n        }\n\n        try {\n            Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN));\n            exe.setAntRun(getProject());\n            exe.setWorkingDirectory(getProject().getBaseDir());\n            log(\"Command line \" + Arrays.toString(cmd.getCommandline()), Project.MSG_VERBOSE);\n            exe.setCommandline(cmd.getCommandline());\n            exe.execute();\n            if (exe.getExitValue() != 0) {\n                exitHandler.handleExit(this, exe.getExitValue(), FAIL_MSG);\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Error running Ceylon compiler\", e, getLocation());\n        }\n        \n        \n    }","id":2783,"modified_method":"/**\n     * Perform the compilation.\n     */\n    private void compile() {\n        if (compileList.size() == 0 && modules.size() == 0){\n            log(\"Nothing to compile\");\n            return;\n        }\n     \n        LazyHelper lazyTask = new LazyHelper(this) {\n            @Override\n            protected File getArtifactDir(String version, Module module) {\n                File outModuleDir = new File(getOut(), module.toDir().getPath()+\"/\"+version);\n                return outModuleDir;\n            }\n            \n            @Override\n            protected FileFilter getArtifactFilter() {\n                return ARTIFACT_FILTER;\n            }\n        };\n        \n        if (lazyTask.filterFiles(compileList) \n                && lazyTask.filterModules(modules)) {\n            log(\"Everything's up to date\");\n            return;\n        }\n        \n        Commandline cmd = new Commandline();\n        cmd.setExecutable(getCompiler());\n        cmd.createArgument().setValue(\"compile\");\n        if(verbose != null && verbose.booleanValue()){\n            cmd.createArgument().setValue(\"--verbose\");\n        }\n        if(user != null){\n            cmd.createArgument().setValue(\"--user=\" + user);\n        }\n        if(pass != null){\n            cmd.createArgument().setValue(\"--pass=\" + pass);\n        }\n        \n        cmd.createArgument().setValue(\"--out=\" + getOut());\n        \n        \n        for (File src : getSrc()) {\n            cmd.createArgument().setValue(\"--src=\" + src.getAbsolutePath());\n        }\n        \n        for(Rep rep : getRepositories()){\n            // skip empty entries\n            if(rep.url == null || rep.url.isEmpty())\n                continue;\n            log(\"Adding repository: \"+rep, Project.MSG_VERBOSE);\n            cmd.createArgument().setValue(\"--rep=\" + Util.quoteParameter(rep.url));\n        }\n        if(classpath != null){\n            throw new RuntimeException(\"-classpath not longer supported\");\n        \t/*String path = classpath.toString();\n            cmd.createArgument().setValue(\"-classpath\");\n            cmd.createArgument().setValue(Util.quoteParameter(path));*/\n        }\n        // files to compile\n        for (File file : compileList) {\n            log(\"Adding source file: \"+file.getAbsolutePath(), Project.MSG_VERBOSE);\n            cmd.createArgument().setValue(file.getAbsolutePath());\n        }\n        // modules to compile\n        for (Module module : modules) {\n            log(\"Adding module: \"+module, Project.MSG_VERBOSE);\n            cmd.createArgument().setValue(module.toSpec());\n        }\n\n        try {\n            Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN));\n            exe.setAntRun(getProject());\n            exe.setWorkingDirectory(getProject().getBaseDir());\n            log(\"Command line \" + Arrays.toString(cmd.getCommandline()), Project.MSG_VERBOSE);\n            exe.setCommandline(cmd.getCommandline());\n            exe.execute();\n            if (exe.getExitValue() != 0) {\n                exitHandler.handleExit(this, exe.getExitValue(), FAIL_MSG);\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Error running Ceylon compiler\", e, getLocation());\n        }\n        \n        \n    }","commit_id":"146494d35af700929561539cebed853641fde8cb","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"/**\n     * Perform the compilation.\n     */\n    private void document() {\n        LazyHelper lazyTask = new LazyHelper(this) {\n            @Override\n            protected File getArtifactDir(String version, Module module) {\n                File outModuleDir = new File(getOut(), module.toDir().getPath()+\"/\"+version +\"/module-doc\");\n                return outModuleDir;\n            }\n            \n            @Override\n            protected FileFilter getArtifactFilter() {\n                return ARTIFACT_FILTER;\n            }\n        };\n        if (lazyTask.filterModules(modules)) {\n            log(\"Everything's up to date\");\n            return;\n        }\n        \n        Commandline cmd = new Commandline();\n        cmd.setExecutable(getCeylond());\n        if(user != null){\n            cmd.createArgument().setValue(\"-user\");\n            cmd.createArgument().setValue(user);\n        }\n        if(pass != null){\n            cmd.createArgument().setValue(\"-pass\");\n            cmd.createArgument().setValue(pass);\n        }\n        \n        cmd.createArgument().setValue(\"-out\");\n        cmd.createArgument().setValue(getOut());\n        \n        for (File src : getSrc()) {\n            cmd.createArgument().setValue(\"-src\");\n            cmd.createArgument().setValue(src.getAbsolutePath());\n        }\n        \n        for(Rep rep : getRepositories()){\n            // skip empty entries\n            if(rep.url == null || rep.url.isEmpty())\n                continue;\n            cmd.createArgument().setValue(\"-rep\");\n            cmd.createArgument().setValue(Util.quoteParameter(rep.url));\n        }\n        \n        if(includeSourceCode)\n            cmd.createArgument().setValue(\"-source-code\");\n        if(includeNonShared)\n            cmd.createArgument().setValue(\"-non-shared\");\n        // modules to document\n        for (Module module : modules) {\n            log(\"Adding module: \"+module, Project.MSG_VERBOSE);\n            cmd.createArgument().setValue(module.toSpec());\n        }\n\n        try {\n            Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN));\n            exe.setAntRun(getProject());\n            exe.setWorkingDirectory(getProject().getBaseDir());\n            log(\"Command line \" + Arrays.toString(cmd.getCommandline()), Project.MSG_VERBOSE);\n            exe.setCommandline(cmd.getCommandline());\n            exe.execute();\n            if (exe.getExitValue() != 0) {\n                if (exe.getExitValue() != 0) {\n                    exitHandler.handleExit(this, exe.getExitValue(), FAIL_MSG);\n                }\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Error running Ceylon compiler\", e, getLocation());\n        }\n    }","id":2784,"modified_method":"/**\n     * Perform the compilation.\n     */\n    private void document() {\n        LazyHelper lazyTask = new LazyHelper(this) {\n            @Override\n            protected File getArtifactDir(String version, Module module) {\n                File outModuleDir = new File(getOut(), module.toDir().getPath()+\"/\"+version +\"/module-doc\");\n                return outModuleDir;\n            }\n            \n            @Override\n            protected FileFilter getArtifactFilter() {\n                return ARTIFACT_FILTER;\n            }\n        };\n        if (lazyTask.filterModules(modules)) {\n            log(\"Everything's up to date\");\n            return;\n        }\n        \n        Commandline cmd = new Commandline();\n        cmd.setExecutable(getCeylond());\n        cmd.createArgument().setValue(\"doc\");\n        if(user != null){\n            cmd.createArgument().setValue(\"--user=\" + user);\n        }\n        if(pass != null){\n            cmd.createArgument().setValue(\"--pass=\" + pass);\n        }\n        \n        cmd.createArgument().setValue(\"--out=\" + getOut());\n        \n        for (File src : getSrc()) {\n            cmd.createArgument().setValue(\"--src=\" + src.getAbsolutePath());\n        }\n        \n        for(Rep rep : getRepositories()){\n            // skip empty entries\n            if(rep.url == null || rep.url.isEmpty())\n                continue;\n            cmd.createArgument().setValue(\"--rep=\" + Util.quoteParameter(rep.url));\n        }\n        \n        if(includeSourceCode)\n            cmd.createArgument().setValue(\"--source-code\");\n        if(includeNonShared)\n            cmd.createArgument().setValue(\"--non-shared\");\n        // modules to document\n        for (Module module : modules) {\n            log(\"Adding module: \"+module, Project.MSG_VERBOSE);\n            cmd.createArgument().setValue(module.toSpec());\n        }\n\n        try {\n            Execute exe = new Execute(new LogStreamHandler(this, Project.MSG_INFO, Project.MSG_WARN));\n            exe.setAntRun(getProject());\n            exe.setWorkingDirectory(getProject().getBaseDir());\n            log(\"Command line \" + Arrays.toString(cmd.getCommandline()), Project.MSG_VERBOSE);\n            exe.setCommandline(cmd.getCommandline());\n            exe.execute();\n            if (exe.getExitValue() != 0) {\n                if (exe.getExitValue() != 0) {\n                    exitHandler.handleExit(this, exe.getExitValue(), FAIL_MSG);\n                }\n            }\n        } catch (IOException e) {\n            throw new BuildException(\"Error running Ceylon compiler\", e, getLocation());\n        }\n    }","commit_id":"146494d35af700929561539cebed853641fde8cb","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"/**\n     * Tries to find a ceylonc compiler either user-specified or detected\n     */\n    private String getCeylond() {\n        return Util.findCeylonScript(this.executable, \"ceylond\", getProject());\n    }","id":2785,"modified_method":"/**\n     * Tries to find a ceylonc compiler either user-specified or detected\n     */\n    private String getCeylond() {\n        return Util.findCeylonScript(this.executable, getProject());\n    }","commit_id":"146494d35af700929561539cebed853641fde8cb","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"/**\n     * Tries to find the given script either user-specified or detected\n     */\n    public static String findCeylonScript(File defaultValue, String scriptName, Project project) {\n        if(defaultValue != null){\n            if(!defaultValue.exists())\n                throw new BuildException(\"Failed to find '\"+scriptName+\"' executable in \"+defaultValue.getPath());\n            if(!defaultValue.canExecute())\n                throw new BuildException(\"Cannot execute '\"+scriptName+\"' executable in \"+defaultValue.getPath()+\" (not executable)\");\n            return defaultValue.getAbsolutePath();\n        }\n        // try to guess from the \"ceylon.home\" project property\n        String ceylonHome = project.getProperty(\"ceylon.home\");\n        if(ceylonHome == null || ceylonHome.isEmpty()){\n            // try again from the CEYLON_HOME env var\n            ceylonHome = System.getenv(\"CEYLON_HOME\");\n        }\n        if(ceylonHome == null || ceylonHome.isEmpty())\n            throw new BuildException(\"Failed to find Ceylon home, specify the ceylon.home property or set the CEYLON_HOME environment variable\");\n        // now try to find the executable\n        String scriptPath = ceylonHome + File.separatorChar + \"bin\" + File.separatorChar + getScriptName(scriptName);\n        File script = new File(scriptPath);\n        if(!script.exists())\n            throw new BuildException(\"Failed to find '\"+scriptName+\"' executable in \"+ceylonHome);\n        if(!script.canExecute())\n            throw new BuildException(\"Cannot execute '\"+scriptName+\"' executable in \"+ceylonHome+\" (not executable)\");\n        return script.getAbsolutePath();\n    }","id":2786,"modified_method":"/**\n     * Tries to find the given script either user-specified or detected\n     */\n    public static String findCeylonScript(File defaultValue, Project project) {\n        String scriptName = \"cey\";\n        if(defaultValue != null){\n            if(!defaultValue.exists())\n                throw new BuildException(\"Failed to find '\"+scriptName+\"' executable in \"+defaultValue.getPath());\n            if(!defaultValue.canExecute())\n                throw new BuildException(\"Cannot execute '\"+scriptName+\"' executable in \"+defaultValue.getPath()+\" (not executable)\");\n            return defaultValue.getAbsolutePath();\n        }\n        // try to guess from the \"ceylon.home\" project property\n        String ceylonHome = project.getProperty(\"ceylon.home\");\n        if(ceylonHome == null || ceylonHome.isEmpty()){\n            // try again from the CEYLON_HOME env var\n            ceylonHome = System.getenv(\"CEYLON_HOME\");\n        }\n        if(ceylonHome == null || ceylonHome.isEmpty())\n            throw new BuildException(\"Failed to find Ceylon home, specify the ceylon.home property or set the CEYLON_HOME environment variable\");\n        // now try to find the executable\n        String scriptPath = ceylonHome + File.separatorChar + \"bin\" + File.separatorChar + getScriptName(scriptName);\n        File script = new File(scriptPath);\n        if(!script.exists())\n            throw new BuildException(\"Failed to find '\"+scriptName+\"' executable in \"+ceylonHome);\n        if(!script.canExecute())\n            throw new BuildException(\"Cannot execute '\"+scriptName+\"' executable in \"+ceylonHome+\" (not executable)\");\n        return script.getAbsolutePath();\n    }","commit_id":"146494d35af700929561539cebed853641fde8cb","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"/**\n     * Scans the projects directory for projects to build. Both (POM) files and mere directories will be matched by the\n     * scanner patterns. If the patterns match a directory which contains a file named \"pom.xml\", the results will\n     * include the path to this file rather than the directory path in order to avoid duplicate invocations of the same\n     * project.\n     *\n     * @param includes The include patterns for the scanner, may be <code>null<\/code>.\n     * @param excludes The exclude patterns for the scanner, may be <code>null<\/code> to exclude nothing.\n     * @param type     The type to assign to the resulting build jobs, must not be <code>null<\/code>.\n     * @return The build jobs matching the patterns, never <code>null<\/code>.\n     * @throws java.io.IOException If the project directory could not be scanned.\n     */\n    private BuildJob[] scanProjectsDirectory( List<String> includes, List<String> excludes, String type )\n        throws IOException\n    {\n        if ( !projectsDirectory.isDirectory() )\n        {\n            return new BuildJob[0];\n        }\n\n        DirectoryScanner scanner = new DirectoryScanner();\n        scanner.setBasedir( projectsDirectory.getCanonicalFile() );\n        scanner.setFollowSymlinks( false );\n        if ( includes != null )\n        {\n            scanner.setIncludes( includes.toArray( new String[includes.size()] ) );\n        }\n        if ( excludes != null )\n        {\n            scanner.setExcludes( excludes.toArray( new String[excludes.size()] ) );\n        }\n        scanner.addDefaultExcludes();\n        scanner.scan();\n\n        Map<String, BuildJob> matches = new LinkedHashMap<String, BuildJob>();\n\n        String[] includedFiles = scanner.getIncludedFiles();\n        for ( int i = 0; i < includedFiles.length; i++ )\n        {\n            matches.put( includedFiles[i], new BuildJob( includedFiles[i], type ) );\n        }\n\n        String[] includedDirs = scanner.getIncludedDirectories();\n        for ( int i = 0; i < includedDirs.length; i++ )\n        {\n            String includedFile = includedDirs[i] + File.separatorChar + \"pom.xml\";\n            if ( new File( scanner.getBasedir(), includedFile ).isFile() )\n            {\n                matches.put( includedFile, new BuildJob( includedFile, type ) );\n            }\n            else\n            {\n                matches.put( includedDirs[i], new BuildJob( includedDirs[i], type ) );\n            }\n        }\n\n        return matches.values().toArray( new BuildJob[matches.size()] );\n    }","id":2787,"modified_method":"/**\n     * Scans the projects directory for projects to build. Both (POM) files and mere directories will be matched by the\n     * scanner patterns. If the patterns match a directory which contains a file named \"pom.xml\", the results will\n     * include the path to this file rather than the directory path in order to avoid duplicate invocations of the same\n     * project.\n     *\n     * @param includes The include patterns for the scanner, may be <code>null<\/code>.\n     * @param excludes The exclude patterns for the scanner, may be <code>null<\/code> to exclude nothing.\n     * @param type     The type to assign to the resulting build jobs, must not be <code>null<\/code>.\n     * @return The build jobs matching the patterns, never <code>null<\/code>.\n     * @throws java.io.IOException If the project directory could not be scanned.\n     */\n    private BuildJob[] scanProjectsDirectory( List<String> includes, List<String> excludes, String type )\n        throws IOException\n    {\n        if ( !projectsDirectory.isDirectory() )\n        {\n            return new BuildJob[0];\n        }\n\n        DirectoryScanner scanner = new DirectoryScanner();\n        scanner.setBasedir( projectsDirectory.getCanonicalFile() );\n        scanner.setFollowSymlinks( false );\n        if ( includes != null )\n        {\n            scanner.setIncludes( includes.toArray( new String[includes.size()] ) );\n        }\n        if ( excludes != null )\n        {\n            scanner.setExcludes( excludes.toArray( new String[excludes.size()] ) );\n        }\n        scanner.addDefaultExcludes();\n        scanner.scan();\n\n        Map<String, BuildJob> matches = new LinkedHashMap<String, BuildJob>();\n\n        for ( String includedFile : scanner.getIncludedFiles() )\n        {\n            matches.put( includedFile, new BuildJob( includedFile, type ) );\n        }\n\n        for ( String includedDir : scanner.getIncludedDirectories() )\n        {\n            String includedFile = includedDir + File.separatorChar + \"pom.xml\";\n            if ( new File( scanner.getBasedir(), includedFile ).isFile() )\n            {\n                matches.put( includedFile, new BuildJob( includedFile, type ) );\n            }\n            else\n            {\n                matches.put( includedDir, new BuildJob( includedDir, type ) );\n            }\n        }\n\n        return matches.values().toArray( new BuildJob[matches.size()] );\n    }","commit_id":"2ca27928623f3c19e80e6f9fffe7db2c2b94f185","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Runs the specified build jobs.\n     *\n     * @param projectsDir The base directory of all projects, must not be <code>null<\/code>.\n     * @param buildJobs   The build jobs to run must not be <code>null<\/code> nor contain <code>null<\/code> elements.\n     * @throws org.apache.maven.plugin.MojoExecutionException\n     *          If any build could not be launched.\n     */\n    private void runBuilds( final File projectsDir, BuildJob[] buildJobs )\n        throws MojoExecutionException\n    {\n        if ( !localRepositoryPath.exists() )\n        {\n            localRepositoryPath.mkdirs();\n        }\n\n        //-----------------------------------------------\n        // interpolate settings file\n        //-----------------------------------------------\n\n        File interpolatedSettingsFile = null;\n        if ( settingsFile != null )\n        {\n            if ( cloneProjectsTo != null )\n            {\n                interpolatedSettingsFile = new File( cloneProjectsTo, \"interpolated-\" + settingsFile.getName() );\n            }\n            else\n            {\n                interpolatedSettingsFile =\n                    new File( settingsFile.getParentFile(), \"interpolated-\" + settingsFile.getName() );\n            }\n            buildInterpolatedFile( settingsFile, interpolatedSettingsFile );\n        }\n\n        //-----------------------------------------------\n        // merge settings file\n        //-----------------------------------------------\n\n        SettingsXpp3Writer settingsWriter = new SettingsXpp3Writer();\n\n        File mergedSettingsFile;\n        Settings mergedSettings = this.settings;\n        if ( mergeUserSettings )\n        {\n            if ( interpolatedSettingsFile != null )\n            {\n                // Have to merge the specified settings file (dominant) and the one of the invoking Maven process\n                Reader reader = null;\n                try\n                {\n                    reader = new XmlStreamReader( interpolatedSettingsFile );\n                    SettingsXpp3Reader settingsReader = new SettingsXpp3Reader();\n                    Settings dominantSettings = settingsReader.read( reader );\n\n                    // MINVOKER-137: NPE on dominantSettings.getRuntimeInfo()\n                    // DefaultMavenSettingsBuilder does the same trick\n                    if( dominantSettings.getRuntimeInfo() == null )\n                    {\n                        RuntimeInfo rtInfo = new RuntimeInfo( dominantSettings );\n                        rtInfo.setFile( interpolatedSettingsFile );\n                        dominantSettings.setRuntimeInfo( rtInfo );\n                    }\n                    \n                    Settings recessiveSettings = this.settings;\n\n                    SettingsUtils.merge( dominantSettings, recessiveSettings, TrackableBase.USER_LEVEL );\n\n                    mergedSettings = dominantSettings;\n                    getLog().debug( \"Merged specified settings file with settings of invoking process\" );\n                }\n                catch ( XmlPullParserException e )\n                {\n                    throw new MojoExecutionException( \"Could not read specified settings file\", e );\n                }\n                catch ( IOException e )\n                {\n                    throw new MojoExecutionException( \"Could not read specified settings file\", e );\n                }\n                finally\n                {\n                    IOUtil.close( reader );\n                }\n            }\n        }\n        if ( this.settingsFile != null && !mergeUserSettings )\n        {\n            mergedSettingsFile = interpolatedSettingsFile;\n        }\n        else\n        {\n            try\n            {\n                mergedSettingsFile = File.createTempFile( \"invoker-settings\", \".xml\" );\n\n                FileWriter fileWriter = null;\n                try\n                {\n                    fileWriter = new FileWriter( mergedSettingsFile );\n                    settingsWriter.write( fileWriter, mergedSettings );\n                }\n                finally\n                {\n                    IOUtil.close( fileWriter );\n                }\n\n                if ( getLog().isDebugEnabled() )\n                {\n                    getLog().debug(\n                        \"Created temporary file for invoker settings.xml: \" + mergedSettingsFile.getAbsolutePath() );\n                }\n\n            }\n            catch ( IOException e )\n            {\n                throw new MojoExecutionException( \"Could not create temporary file for invoker settings.xml\", e );\n            }\n        }\n        final File finalSettingsFile = mergedSettingsFile;\n        \n        // @todo calculate MavenVersion, JavaVersion and OS here only once...\n        // isSelected() retrieves these values for every BuildJob, but they are read over and over again inside SelectorUtils \n\n        try\n        {\n            if ( isParallelRun() )\n            {\n                getLog().info( \"use parallelThreads \" + parallelThreads );\n\n                ExecutorService executorService = Executors.newFixedThreadPool( parallelThreads );\n                for ( int i = 0; i < buildJobs.length; i++ )\n                {\n                    final BuildJob project = buildJobs[i];\n                    executorService.execute( new Runnable()\n                    {\n\n                        public void run()\n                        {\n                            try\n                            {\n                                runBuild( projectsDir, project, finalSettingsFile );\n                            }\n                            catch ( MojoExecutionException e )\n                            {\n                                throw new RuntimeException( e.getMessage(), e );\n                            }\n                        }\n                    } );\n                }\n\n                try\n                {\n                    executorService.shutdown();\n                    // TODO add a configurable time out\n                    executorService.awaitTermination( Long.MAX_VALUE, TimeUnit.MILLISECONDS );\n                }\n                catch ( InterruptedException e )\n                {\n                    throw new MojoExecutionException( e.getMessage(), e );\n                }\n\n            }\n            else\n            {\n                for ( int i = 0; i < buildJobs.length; i++ )\n                {\n                    BuildJob project = buildJobs[i];\n                    runBuild( projectsDir, project, finalSettingsFile );\n                }\n            }\n        }\n        finally\n        {\n            if ( interpolatedSettingsFile != null && cloneProjectsTo == null )\n            {\n                interpolatedSettingsFile.delete();\n            }\n            if ( mergedSettingsFile != null && mergedSettingsFile.exists() )\n            {\n                mergedSettingsFile.delete();\n            }\n\n        }\n    }","id":2788,"modified_method":"/**\n     * Runs the specified build jobs.\n     *\n     * @param projectsDir The base directory of all projects, must not be <code>null<\/code>.\n     * @param buildJobs   The build jobs to run must not be <code>null<\/code> nor contain <code>null<\/code> elements.\n     * @throws org.apache.maven.plugin.MojoExecutionException\n     *          If any build could not be launched.\n     */\n    private void runBuilds( final File projectsDir, BuildJob[] buildJobs )\n        throws MojoExecutionException\n    {\n        if ( !localRepositoryPath.exists() )\n        {\n            localRepositoryPath.mkdirs();\n        }\n\n        //-----------------------------------------------\n        // interpolate settings file\n        //-----------------------------------------------\n\n        File interpolatedSettingsFile = null;\n        if ( settingsFile != null )\n        {\n            if ( cloneProjectsTo != null )\n            {\n                interpolatedSettingsFile = new File( cloneProjectsTo, \"interpolated-\" + settingsFile.getName() );\n            }\n            else\n            {\n                interpolatedSettingsFile =\n                    new File( settingsFile.getParentFile(), \"interpolated-\" + settingsFile.getName() );\n            }\n            buildInterpolatedFile( settingsFile, interpolatedSettingsFile );\n        }\n\n        //-----------------------------------------------\n        // merge settings file\n        //-----------------------------------------------\n\n        SettingsXpp3Writer settingsWriter = new SettingsXpp3Writer();\n\n        File mergedSettingsFile;\n        Settings mergedSettings = this.settings;\n        if ( mergeUserSettings )\n        {\n            if ( interpolatedSettingsFile != null )\n            {\n                // Have to merge the specified settings file (dominant) and the one of the invoking Maven process\n                Reader reader = null;\n                try\n                {\n                    reader = new XmlStreamReader( interpolatedSettingsFile );\n                    SettingsXpp3Reader settingsReader = new SettingsXpp3Reader();\n                    Settings dominantSettings = settingsReader.read( reader );\n\n                    // MINVOKER-137: NPE on dominantSettings.getRuntimeInfo()\n                    // DefaultMavenSettingsBuilder does the same trick\n                    if ( dominantSettings.getRuntimeInfo() == null )\n                    {\n                        RuntimeInfo rtInfo = new RuntimeInfo( dominantSettings );\n                        rtInfo.setFile( interpolatedSettingsFile );\n                        dominantSettings.setRuntimeInfo( rtInfo );\n                    }\n                    \n                    Settings recessiveSettings = this.settings;\n\n                    SettingsUtils.merge( dominantSettings, recessiveSettings, TrackableBase.USER_LEVEL );\n\n                    mergedSettings = dominantSettings;\n                    getLog().debug( \"Merged specified settings file with settings of invoking process\" );\n                }\n                catch ( XmlPullParserException e )\n                {\n                    throw new MojoExecutionException( \"Could not read specified settings file\", e );\n                }\n                catch ( IOException e )\n                {\n                    throw new MojoExecutionException( \"Could not read specified settings file\", e );\n                }\n                finally\n                {\n                    IOUtil.close( reader );\n                }\n            }\n        }\n        if ( this.settingsFile != null && !mergeUserSettings )\n        {\n            mergedSettingsFile = interpolatedSettingsFile;\n        }\n        else\n        {\n            try\n            {\n                mergedSettingsFile = File.createTempFile( \"invoker-settings\", \".xml\" );\n\n                FileWriter fileWriter = null;\n                try\n                {\n                    fileWriter = new FileWriter( mergedSettingsFile );\n                    settingsWriter.write( fileWriter, mergedSettings );\n                }\n                finally\n                {\n                    IOUtil.close( fileWriter );\n                }\n\n                if ( getLog().isDebugEnabled() )\n                {\n                    getLog().debug(\n                        \"Created temporary file for invoker settings.xml: \" + mergedSettingsFile.getAbsolutePath() );\n                }\n\n            }\n            catch ( IOException e )\n            {\n                throw new MojoExecutionException( \"Could not create temporary file for invoker settings.xml\", e );\n            }\n        }\n        final File finalSettingsFile = mergedSettingsFile;\n        \n        // @todo calculate MavenVersion, JavaVersion and OS here only once...\n        // isSelected() retrieves these values for every BuildJob, but they are read over and over again inside SelectorUtils \n\n        try\n        {\n            if ( isParallelRun() )\n            {\n                getLog().info( \"use parallelThreads \" + parallelThreads );\n\n                ExecutorService executorService = Executors.newFixedThreadPool( parallelThreads );\n                for ( final BuildJob project : buildJobs )\n                {\n                    executorService.execute( new Runnable()\n                    {\n\n                        public void run()\n                        {\n                            try\n                            {\n                                runBuild( projectsDir, project, finalSettingsFile );\n                            }\n                            catch ( MojoExecutionException e )\n                            {\n                                throw new RuntimeException( e.getMessage(), e );\n                            }\n                        }\n                    } );\n                }\n\n                try\n                {\n                    executorService.shutdown();\n                    // TODO add a configurable time out\n                    executorService.awaitTermination( Long.MAX_VALUE, TimeUnit.MILLISECONDS );\n                }\n                catch ( InterruptedException e )\n                {\n                    throw new MojoExecutionException( e.getMessage(), e );\n                }\n\n            }\n            else\n            {\n                for ( BuildJob project : buildJobs )\n                {\n                    runBuild( projectsDir, project, finalSettingsFile );\n                }\n            }\n        }\n        finally\n        {\n            if ( interpolatedSettingsFile != null && cloneProjectsTo == null )\n            {\n                interpolatedSettingsFile.delete();\n            }\n            if ( mergedSettingsFile != null && mergedSettingsFile.exists() )\n            {\n                mergedSettingsFile.delete();\n            }\n\n        }\n    }","commit_id":"2ca27928623f3c19e80e6f9fffe7db2c2b94f185","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Gets the build jobs that should be processed. Note that the order of the returned build jobs is significant.\n     *\n     * @return The build jobs to process, may be empty but never <code>null<\/code>.\n     * @throws java.io.IOException If the projects directory could not be scanned.\n     */\n    BuildJob[] getBuildJobs()\n        throws IOException\n    {\n        BuildJob[] buildJobs;\n\n        if ( ( pom != null ) && pom.exists() )\n        {\n            buildJobs = new BuildJob[]{ new BuildJob( pom.getAbsolutePath(), BuildJob.Type.NORMAL ) };\n        }\n        else if ( invokerTest != null )\n        {\n            String[] testRegexes = StringUtils.split( invokerTest, \",\" );\n            List<String> includes = new ArrayList<String>( testRegexes.length );\n            List<String> excludes = new ArrayList<String>();\n\n            for ( String regex : testRegexes )\n            {\n                // user just use -Dinvoker.test=MWAR191,MNG111 to use a directory thats the end is not pom.xml\n                if ( regex.startsWith( \"!\" ) )\n                {\n                    excludes.add( regex.substring( 1 ) );\n                }\n                else\n                {\n                    includes.add( regex );\n                }\n            }\n\n            // it would be nice if we could figure out what types these are... but perhaps\n            // not necessary for the -Dinvoker.test=xxx t\n            buildJobs = scanProjectsDirectory( includes, excludes, BuildJob.Type.DIRECT );\n        }\n        else\n        {\n            List<String> excludes =\n                ( pomExcludes != null ) ? new ArrayList<String>( pomExcludes ) : new ArrayList<String>();\n            if ( this.settingsFile != null )\n            {\n                String exclude = relativizePath( this.settingsFile, projectsDirectory.getCanonicalPath() );\n                if ( exclude != null )\n                {\n                    excludes.add( exclude.replace( '\\\\', '/' ) );\n                    getLog().debug( \"Automatically excluded \" + exclude + \" from project scanning\" );\n                }\n            }\n\n            BuildJob[] setupPoms = scanProjectsDirectory( setupIncludes, excludes, BuildJob.Type.SETUP );\n            getLog().debug( \"Setup projects: \" + Arrays.asList( setupPoms ) );\n\n            BuildJob[] normalPoms = scanProjectsDirectory( pomIncludes, excludes, BuildJob.Type.NORMAL );\n\n            Map<String, BuildJob> uniquePoms = new LinkedHashMap<String, BuildJob>();\n            for ( int i = 0; i < setupPoms.length; i++ )\n            {\n                uniquePoms.put( setupPoms[i].getProject(), setupPoms[i] );\n            }\n            for ( int i = 0; i < normalPoms.length; i++ )\n            {\n                if ( !uniquePoms.containsKey( normalPoms[i].getProject() ) )\n                {\n                    uniquePoms.put( normalPoms[i].getProject(), normalPoms[i] );\n                }\n            }\n\n            buildJobs = uniquePoms.values().toArray( new BuildJob[uniquePoms.size()] );\n        }\n\n        relativizeProjectPaths( buildJobs );\n\n        return buildJobs;\n    }","id":2789,"modified_method":"/**\n     * Gets the build jobs that should be processed. Note that the order of the returned build jobs is significant.\n     *\n     * @return The build jobs to process, may be empty but never <code>null<\/code>.\n     * @throws java.io.IOException If the projects directory could not be scanned.\n     */\n    BuildJob[] getBuildJobs()\n        throws IOException\n    {\n        BuildJob[] buildJobs;\n\n        if ( ( pom != null ) && pom.exists() )\n        {\n            buildJobs = new BuildJob[]{ new BuildJob( pom.getAbsolutePath(), BuildJob.Type.NORMAL ) };\n        }\n        else if ( invokerTest != null )\n        {\n            String[] testRegexes = StringUtils.split( invokerTest, \",\" );\n            List<String> includes = new ArrayList<String>( testRegexes.length );\n            List<String> excludes = new ArrayList<String>();\n\n            for ( String regex : testRegexes )\n            {\n                // user just use -Dinvoker.test=MWAR191,MNG111 to use a directory thats the end is not pom.xml\n                if ( regex.startsWith( \"!\" ) )\n                {\n                    excludes.add( regex.substring( 1 ) );\n                }\n                else\n                {\n                    includes.add( regex );\n                }\n            }\n\n            // it would be nice if we could figure out what types these are... but perhaps\n            // not necessary for the -Dinvoker.test=xxx t\n            buildJobs = scanProjectsDirectory( includes, excludes, BuildJob.Type.DIRECT );\n        }\n        else\n        {\n            List<String> excludes =\n                ( pomExcludes != null ) ? new ArrayList<String>( pomExcludes ) : new ArrayList<String>();\n            if ( this.settingsFile != null )\n            {\n                String exclude = relativizePath( this.settingsFile, projectsDirectory.getCanonicalPath() );\n                if ( exclude != null )\n                {\n                    excludes.add( exclude.replace( '\\\\', '/' ) );\n                    getLog().debug( \"Automatically excluded \" + exclude + \" from project scanning\" );\n                }\n            }\n\n            BuildJob[] setupPoms = scanProjectsDirectory( setupIncludes, excludes, BuildJob.Type.SETUP );\n            getLog().debug( \"Setup projects: \" + Arrays.asList( setupPoms ) );\n\n            BuildJob[] normalPoms = scanProjectsDirectory( pomIncludes, excludes, BuildJob.Type.NORMAL );\n\n            Map<String, BuildJob> uniquePoms = new LinkedHashMap<String, BuildJob>();\n            for ( BuildJob setupPom : setupPoms )\n            {\n                uniquePoms.put( setupPom.getProject(), setupPom );\n            }\n            for ( BuildJob normalPom : normalPoms )\n            {\n                if ( !uniquePoms.containsKey( normalPom.getProject() ) )\n                {\n                    uniquePoms.put( normalPom.getProject(), normalPom );\n                }\n            }\n\n            buildJobs = uniquePoms.values().toArray( new BuildJob[uniquePoms.size()] );\n        }\n\n        relativizeProjectPaths( buildJobs );\n\n        return buildJobs;\n    }","commit_id":"2ca27928623f3c19e80e6f9fffe7db2c2b94f185","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Relativizes the project paths of the specified build jobs against the directory specified by\n     * {@link #projectsDirectory} (if possible). If a project path does not denote a sub path of the projects directory,\n     * it is returned as is.\n     *\n     * @param buildJobs The build jobs whose project paths should be relativized, must not be <code>null<\/code> nor\n     *                  contain <code>null<\/code> elements.\n     * @throws java.io.IOException If any path could not be relativized.\n     */\n    private void relativizeProjectPaths( BuildJob[] buildJobs )\n        throws IOException\n    {\n        String projectsDirPath = projectsDirectory.getCanonicalPath();\n\n        for ( int i = 0; i < buildJobs.length; i++ )\n        {\n            String projectPath = buildJobs[i].getProject();\n\n            File file = new File( projectPath );\n\n            if ( !file.isAbsolute() )\n            {\n                file = new File( projectsDirectory, projectPath );\n            }\n\n            String relativizedPath = relativizePath( file, projectsDirPath );\n\n            if ( relativizedPath == null )\n            {\n                relativizedPath = projectPath;\n            }\n\n            buildJobs[i].setProject( relativizedPath );\n        }\n    }","id":2790,"modified_method":"/**\n     * Relativizes the project paths of the specified build jobs against the directory specified by\n     * {@link #projectsDirectory} (if possible). If a project path does not denote a sub path of the projects directory,\n     * it is returned as is.\n     *\n     * @param buildJobs The build jobs whose project paths should be relativized, must not be <code>null<\/code> nor\n     *                  contain <code>null<\/code> elements.\n     * @throws java.io.IOException If any path could not be relativized.\n     */\n    private void relativizeProjectPaths( BuildJob[] buildJobs )\n        throws IOException\n    {\n        String projectsDirPath = projectsDirectory.getCanonicalPath();\n\n        for ( BuildJob buildJob : buildJobs )\n        {\n            String projectPath = buildJob.getProject();\n\n            File file = new File( projectPath );\n\n            if ( !file.isAbsolute() )\n            {\n                file = new File( projectsDirectory, projectPath );\n            }\n\n            String relativizedPath = relativizePath( file, projectsDirPath );\n\n            if ( relativizedPath == null )\n            {\n                relativizedPath = projectPath;\n            }\n\n            buildJob.setProject( relativizedPath );\n        }\n    }","commit_id":"2ca27928623f3c19e80e6f9fffe7db2c2b94f185","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Copied a directory structure with deafault exclusions (.svn, CVS, etc)\n     *\n     * @param sourceDir The source directory to copy, must not be <code>null<\/code>.\n     * @param destDir   The target directory to copy to, must not be <code>null<\/code>.\n     * @throws java.io.IOException If the directory structure could not be copied.\n     */\n    private void copyDirectoryStructure( File sourceDir, File destDir )\n        throws IOException\n    {\n        DirectoryScanner scanner = new DirectoryScanner();\n        scanner.setBasedir( sourceDir );\n        if ( !cloneAllFiles )\n        {\n            scanner.addDefaultExcludes();\n        }\n        scanner.scan();\n\n        /*\n         * NOTE: Make sure the destination directory is always there (even if empty) to support POM-less ITs.\n         */\n        destDir.mkdirs();\n        String[] includedDirs = scanner.getIncludedDirectories();\n        for ( int i = 0; i < includedDirs.length; ++i )\n        {\n            File clonedDir = new File( destDir, includedDirs[i] );\n            clonedDir.mkdirs();\n        }\n\n        String[] includedFiles = scanner.getIncludedFiles();\n        for ( int i = 0; i < includedFiles.length; ++i )\n        {\n            File sourceFile = new File( sourceDir, includedFiles[i] );\n            File destFile = new File( destDir, includedFiles[i] );\n            FileUtils.copyFile( sourceFile, destFile );\n        }\n    }","id":2791,"modified_method":"/**\n     * Copied a directory structure with deafault exclusions (.svn, CVS, etc)\n     *\n     * @param sourceDir The source directory to copy, must not be <code>null<\/code>.\n     * @param destDir   The target directory to copy to, must not be <code>null<\/code>.\n     * @throws java.io.IOException If the directory structure could not be copied.\n     */\n    private void copyDirectoryStructure( File sourceDir, File destDir )\n        throws IOException\n    {\n        DirectoryScanner scanner = new DirectoryScanner();\n        scanner.setBasedir( sourceDir );\n        if ( !cloneAllFiles )\n        {\n            scanner.addDefaultExcludes();\n        }\n        scanner.scan();\n\n        /*\n         * NOTE: Make sure the destination directory is always there (even if empty) to support POM-less ITs.\n         */\n        destDir.mkdirs();\n        for ( String includedDir : scanner.getIncludedDirectories() )\n        {\n            File clonedDir = new File( destDir, includedDir );\n            clonedDir.mkdirs();\n        }\n\n        for ( String includedFile : scanner.getIncludedFiles() )\n        {\n            File sourceFile = new File( sourceDir, includedFile );\n            File destFile = new File( destDir, includedFile );\n            FileUtils.copyFile( sourceFile, destFile );\n        }\n    }","commit_id":"2ca27928623f3c19e80e6f9fffe7db2c2b94f185","url":"https://github.com/apache/maven-plugins"},{"original_method":"/**\n     * Invokes Maven on the configured test projects.\n     *\n     * @throws org.apache.maven.plugin.MojoExecutionException\n     *          If the goal encountered severe errors.\n     * @throws org.apache.maven.plugin.MojoFailureException\n     *          If any of the Maven builds failed.\n     */\n    public void execute()\n        throws MojoExecutionException, MojoFailureException\n    {\n        if ( skipInvocation )\n        {\n            getLog().info( \"Skipping invocation per configuration.\"\n                               + \" If this is incorrect, ensure the skipInvocation parameter is not set to true.\" );\n            return;\n        }\n\n        // done it here to prevent issues with concurrent access in case of parallel run\n        if ( !disableReports && !reportsDirectory.exists() )\n        {\n            reportsDirectory.mkdirs();\n        }\n\n        BuildJob[] buildJobs;\n        if ( pom != null )\n        {\n            try\n            {\n                projectsDirectory = pom.getCanonicalFile().getParentFile();\n            }\n            catch ( IOException e )\n            {\n                throw new MojoExecutionException(\n                    \"Failed to discover projectsDirectory from pom File parameter.\" + \" Reason: \" + e.getMessage(), e );\n            }\n\n            buildJobs = new BuildJob[]{ new BuildJob( pom.getName(), BuildJob.Type.NORMAL ) };\n        }\n        else\n        {\n            try\n            {\n                buildJobs = getBuildJobs();\n            }\n            catch ( final IOException e )\n            {\n                throw new MojoExecutionException(\n                    \"Error retrieving POM list from includes, excludes, \" + \"and projects directory. Reason: \"\n                        + e.getMessage(), e );\n            }\n        }\n\n        if ( ( buildJobs == null ) || ( buildJobs.length < 1 ) )\n        {\n            getLog().info( \"No projects were selected for execution.\" );\n            return;\n        }\n\n        if ( StringUtils.isEmpty( encoding ) )\n        {\n            getLog().warn( \"File encoding has not been set, using platform encoding \" + ReaderFactory.FILE_ENCODING\n                               + \", i.e. build is platform dependent!\" );\n        }\n\n        final List<String> scriptClassPath;\n        if ( addTestClassPath )\n        {\n            scriptClassPath = new ArrayList<String>( testClassPath );\n            for ( Artifact pluginArtifact : pluginArtifacts )\n            {\n                scriptClassPath.remove( pluginArtifact.getFile().getAbsolutePath() );\n            }\n        }\n        else\n        {\n            scriptClassPath = null;\n        }\n        scriptRunner = new ScriptRunner( getLog() );\n        scriptRunner.setScriptEncoding( encoding );\n        scriptRunner.setGlobalVariable( \"localRepositoryPath\", localRepositoryPath );\n        scriptRunner.setClassPath( scriptClassPath );\n\n        Collection<String> collectedProjects = new LinkedHashSet<String>();\n        for ( int i = 0; i < buildJobs.length; i++ )\n        {\n            collectProjects( projectsDirectory, buildJobs[i].getProject(), collectedProjects, true );\n        }\n\n        File projectsDir = projectsDirectory;\n\n        if ( cloneProjectsTo != null )\n        {\n            cloneProjects( collectedProjects );\n            projectsDir = cloneProjectsTo;\n        }\n        else\n        {\n            getLog().warn( \"Filtering of parent/child POMs is not supported without cloning the projects\" );\n        }\n\n        runBuilds( projectsDir, buildJobs );\n\n        processResults( new InvokerSession( buildJobs ) );\n    }","id":2792,"modified_method":"/**\n     * Invokes Maven on the configured test projects.\n     *\n     * @throws org.apache.maven.plugin.MojoExecutionException\n     *          If the goal encountered severe errors.\n     * @throws org.apache.maven.plugin.MojoFailureException\n     *          If any of the Maven builds failed.\n     */\n    public void execute()\n        throws MojoExecutionException, MojoFailureException\n    {\n        if ( skipInvocation )\n        {\n            getLog().info( \"Skipping invocation per configuration.\"\n                               + \" If this is incorrect, ensure the skipInvocation parameter is not set to true.\" );\n            return;\n        }\n\n        // done it here to prevent issues with concurrent access in case of parallel run\n        if ( !disableReports && !reportsDirectory.exists() )\n        {\n            reportsDirectory.mkdirs();\n        }\n\n        BuildJob[] buildJobs;\n        if ( pom != null )\n        {\n            try\n            {\n                projectsDirectory = pom.getCanonicalFile().getParentFile();\n            }\n            catch ( IOException e )\n            {\n                throw new MojoExecutionException(\n                    \"Failed to discover projectsDirectory from pom File parameter.\" + \" Reason: \" + e.getMessage(), e );\n            }\n\n            buildJobs = new BuildJob[]{ new BuildJob( pom.getName(), BuildJob.Type.NORMAL ) };\n        }\n        else\n        {\n            try\n            {\n                buildJobs = getBuildJobs();\n            }\n            catch ( final IOException e )\n            {\n                throw new MojoExecutionException(\n                    \"Error retrieving POM list from includes, excludes, \" + \"and projects directory. Reason: \"\n                        + e.getMessage(), e );\n            }\n        }\n\n        if ( ( buildJobs == null ) || ( buildJobs.length < 1 ) )\n        {\n            getLog().info( \"No projects were selected for execution.\" );\n            return;\n        }\n\n        if ( StringUtils.isEmpty( encoding ) )\n        {\n            getLog().warn( \"File encoding has not been set, using platform encoding \" + ReaderFactory.FILE_ENCODING\n                               + \", i.e. build is platform dependent!\" );\n        }\n\n        final List<String> scriptClassPath;\n        if ( addTestClassPath )\n        {\n            scriptClassPath = new ArrayList<String>( testClassPath );\n            for ( Artifact pluginArtifact : pluginArtifacts )\n            {\n                scriptClassPath.remove( pluginArtifact.getFile().getAbsolutePath() );\n            }\n        }\n        else\n        {\n            scriptClassPath = null;\n        }\n        scriptRunner = new ScriptRunner( getLog() );\n        scriptRunner.setScriptEncoding( encoding );\n        scriptRunner.setGlobalVariable( \"localRepositoryPath\", localRepositoryPath );\n        scriptRunner.setClassPath( scriptClassPath );\n\n        Collection<String> collectedProjects = new LinkedHashSet<String>();\n        for ( BuildJob buildJob : buildJobs )\n        {\n            collectProjects( projectsDirectory, buildJob.getProject(), collectedProjects, true );\n        }\n\n        File projectsDir = projectsDirectory;\n\n        if ( cloneProjectsTo != null )\n        {\n            cloneProjects( collectedProjects );\n            projectsDir = cloneProjectsTo;\n        }\n        else\n        {\n            getLog().warn( \"Filtering of parent/child POMs is not supported without cloning the projects\" );\n        }\n\n        runBuilds( projectsDir, buildJobs );\n\n        processResults( new InvokerSession( buildJobs ) );\n    }","commit_id":"2ca27928623f3c19e80e6f9fffe7db2c2b94f185","url":"https://github.com/apache/maven-plugins"},{"original_method":"protected void translate(String basedir, String file) throws Exception {\n\t\tfile = StringUtil.replace(\n\t\t\tfile, StringPool.BACK_SLASH, StringPool.SLASH);\n\n\t\tint x = file.lastIndexOf(StringPool.SLASH);\n\t\tint y = file.indexOf(StringPool.PERIOD);\n\n\t\tString testPackagePath = StringUtil.replace(\n\t\t\tfile.substring(0, x), StringPool.SLASH, StringPool.PERIOD);\n\t\tString testName = file.substring(x + 1, y);\n\t\tString testMethodName =\n\t\t\t\"test\" + testName.substring(0, testName.length() - 4);\n\t\tString testFileName = basedir + \"/\" + file.substring(0, y) + \".java\";\n\n\t\tStringBundler sb = new StringBundler();\n\n\t\tsb.append(\"package \");\n\t\tsb.append(testPackagePath);\n\t\tsb.append(\";\\n\\n\");\n\n\t\tsb.append(\"import com.liferay.portal.kernel.util.FileUtil;\\n\");\n\t\tsb.append(\"import com.liferay.portal.kernel.util.StringPool;\\n\");\n\t\tsb.append(\"import com.liferay.portalweb.portal.BaseTestCase;\\n\\n\");\n\t\tsb.append(\n\t\t\t\"import com.liferay.portalweb.portal.util.RuntimeVariables;\\n\\n\");\n\n\t\tsb.append(\"public class \");\n\t\tsb.append(testName);\n\t\tsb.append(\" extends BaseTestCase {\");\n\n\t\tsb.append(\"public void \");\n\t\tsb.append(testMethodName);\n\t\tsb.append(\"() throws Exception {\");\n\n\t\tString xml = FileUtil.read(basedir + \"/\" + file);\n\n\t\tif ((xml.indexOf(\"<title>\" + testName + \"<\/title>\") == -1) ||\n\t\t\t(xml.indexOf(\"colspan=\\\"3\\\">\" + testName + \"<\/td>\") == -1)) {\n\n\t\t\tSystem.out.println(testName + \" has an invalid test name\");\n\t\t}\n\n\t\tif (xml.indexOf(\"&gt;\") != -1) {\n\t\t\txml = StringUtil.replace(xml, \"&gt;\", \">\");\n\n\t\t\tFileUtil.write(basedir + \"/\" + file, xml);\n\t\t}\n\n\t\tif (xml.indexOf(\"&lt;\") != -1) {\n\t\t\txml = StringUtil.replace(xml, \"&lt;\", \"<\");\n\n\t\t\tFileUtil.write(basedir + \"/\" + file, xml);\n\t\t}\n\n\t\tif (xml.indexOf(\"&quot;\") != -1) {\n\t\t\txml = StringUtil.replace(xml, \"&quot;\", \"\\\"\");\n\n\t\t\tFileUtil.write(basedir + \"/\" + file, xml);\n\t\t}\n\n\t\tx = xml.indexOf(\"<tbody>\");\n\t\ty = xml.indexOf(\"<\/tbody>\");\n\n\t\txml = xml.substring(x, y + 8);\n\n\t\tMap<String, String> labels = new HashMap<String, String>();\n\n\t\tint labelCount = 1;\n\n\t\tx = 0;\n\t\ty = 0;\n\n\t\twhile (true) {\n\t\t\tx = xml.indexOf(\"<tr>\", x);\n\t\t\ty = xml.indexOf(\"\\n<\/tr>\", x);\n\n\t\t\tif ((x == -1) || (y == -1)) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tx += 6;\n\t\t\ty++;\n\n\t\t\tString step = xml.substring(x, y);\n\n\t\t\tString[] params = getParams(step);\n\n\t\t\tString param1 = params[0];\n\t\t\tString param2 = fixParam(params[1]);\n\n\t\t\tif (param1.equals(\"label\")) {\n\t\t\t\tString label = labels.get(param2);\n\n\t\t\t\tif (label == null) {\n\t\t\t\t\tlabelCount++;\n\n\t\t\t\t\tlabel = labels.put(param2, String.valueOf(labelCount));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (labels.size() > 0) {\n\t\t\tsb.append(\"int label = 1;\");\n\n\t\t\tsb.append(\"while (label >= 1) {\");\n\t\t\tsb.append(\"switch (label) {\");\n\t\t\tsb.append(\"case 1:\");\n\t\t}\n\n\t\tx = 0;\n\t\ty = 0;\n\n\t\twhile (true) {\n\t\t\tx = xml.indexOf(\"<tr>\", x);\n\t\t\ty = xml.indexOf(\"\\n<\/tr>\", x);\n\n\t\t\tif ((x == -1) || (y == -1)) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tx += 6;\n\t\t\ty++;\n\n\t\t\tString step = xml.substring(x, y);\n\n\t\t\tString[] params = getParams(step);\n\n\t\t\tString param1 = params[0];\n\t\t\tString param2 = fixParam(params[1]);\n\t\t\tString param3 = fixParam(params[2]);\n\n\t\t\tif (param1.equals(\"addSelection\") || param1.equals(\"clickAt\") ||\n\t\t\t\tparam1.equals(\"keyPress\") || param1.equals(\"openWindow\") ||\n\t\t\t\tparam1.equals(\"select\") || param1.equals(\"type\") ||\n\t\t\t\tparam1.equals(\"typeKeys\") || param1.equals(\"waitForPopUp\")) {\n\n\t\t\t\tsb.append(\"selenium.\");\n\t\t\t\tsb.append(param1);\n\t\t\t\tsb.append(\"(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\", RuntimeVariables.replace(\\\"\");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertAlert\") ||\n\t\t\t\t\t param1.equals(\"assertNotAlert\")) {\n\n\t\t\t\tif (param1.equals(\"assertAlert\")) {\n\t\t\t\t\tsb.append(\"assertEquals\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"assertNotAlert\")) {\n\t\t\t\t\tsb.append(\"assertNotEquals\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\", selenium.getAlert());\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertChecked\") ||\n\t\t\t\t\t param1.equals(\"assertNotChecked\")) {\n\n\t\t\t\tif (param1.equals(\"assertChecked\")) {\n\t\t\t\t\tsb.append(\"assertTrue\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"assertNotChecked\")) {\n\t\t\t\t\tsb.append(\"assertFalse\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(selenium.isChecked(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertConfirmation\")) {\n\t\t\t\tparam2 = StringUtil.replace(param2, \"?\", \"[\\\\\\\\s\\\\\\\\S]\");\n\n\t\t\t\tsb.append(\"assertTrue(selenium.getConfirmation().matches(\\\"^\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"$\\\"));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertLocation\") ||\n\t\t\t\t\t param1.equals(\"assertNotLocation\")) {\n\n\t\t\t\tif (param1.equals(\"assertLocation\")) {\n\t\t\t\t\tsb.append(\"assertEquals\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"assertNotLocation\")) {\n\t\t\t\t\tsb.append(\"assertNotEquals\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\", selenium.getLocation());\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertElementNotPresent\") ||\n\t\t\t\t\t param1.equals(\"assertElementPresent\")) {\n\n\t\t\t\tif (param1.equals(\"assertElementNotPresent\")) {\n\t\t\t\t\tsb.append(\"assertFalse\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"assertElementPresent\")) {\n\t\t\t\t\tsb.append(\"assertTrue\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(selenium.isElementPresent(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertNotPartialText\") ||\n\t\t\t\t\t param1.equals(\"assertPartialText\")) {\n\n\t\t\t\tif (param1.equals(\"assertNotPartialText\")) {\n\t\t\t\t\tsb.append(\"assertFalse\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"assertPartialText\")) {\n\t\t\t\t\tsb.append(\"assertTrue\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(selenium.isPartialText(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\", \");\n\n\t\t\t\tif (param3.startsWith(\"${\")) {\n\t\t\t\t\tsb.append(\"RuntimeVariables.getValue(\\\"\");\n\n\t\t\t\t\tString text = param3.substring(2, param3.length() - 1);\n\n\t\t\t\t\tsb.append(text);\n\t\t\t\t\tsb.append(\"\\\")\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsb.append(\"\\\"\");\n\t\t\t\t\tsb.append(param3);\n\t\t\t\t\tsb.append(\"\\\"\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertNotSelectedLabel\") ||\n\t\t\t\t\t param1.equals(\"assertSelectedLabel\")) {\n\n\t\t\t\tif (param1.equals(\"assertNotSelectedLabel\")) {\n\t\t\t\t\tsb.append(\"assertNotEquals\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"assertSelectedLabel\")) {\n\t\t\t\t\tsb.append(\"assertEquals\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(\\\"\");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\"\\\", selenium.getSelectedLabel(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertNotSelectedLabels\") ||\n\t\t\t\t\t param1.equals(\"assertSelectedLabels\")) {\n\n\t\t\t\tif (param1.equals(\"assertNotSelectedLabels\")) {\n\t\t\t\t\tsb.append(\"assertNotEquals\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"assertSelectedLabels\")) {\n\t\t\t\t\tsb.append(\"assertEquals\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(\\\"\");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\"\\\", join(selenium.getSelectedLabels(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\"), \\',\\'));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertNotText\") ||\n\t\t\t\t\t param1.equals(\"assertText\")) {\n\n\t\t\t\tif (param1.equals(\"assertNotText\")) {\n\t\t\t\t\tsb.append(\"assertNotEquals\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"assertText\")) {\n\t\t\t\t\tsb.append(\"assertEquals\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(RuntimeVariables.replace(\\\"\");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\"\\\"), selenium.getText(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertNotValue\") ||\n\t\t\t\t\t param1.equals(\"assertValue\")) {\n\n\t\t\t\tif (param1.equals(\"assertNotValue\")) {\n\t\t\t\t\tsb.append(\"assertNotEquals\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"assertValue\")) {\n\t\t\t\t\tsb.append(\"assertEquals\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(\\\"\");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\"\\\", selenium.getValue(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertNotVisible\") ||\n\t\t\t\t\t param1.equals(\"assertVisible\")) {\n\n\t\t\t\tif (param1.equals(\"assertNotVisible\")) {\n\t\t\t\t\tsb.append(\"assertFalse\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"assertVisible\")) {\n\t\t\t\t\tsb.append(\"assertTrue\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(\");\n\t\t\t\tsb.append(\"selenium.isVisible(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertSelectOptions\")) {\n\t\t\t\tString[] expectedArray = StringUtil.split(param3);\n\n\t\t\t\tsb.append(\"String[] actualArray = \");\n\t\t\t\tsb.append(\"selenium.getSelectOptions(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\");\");\n\n\t\t\t\tsb.append(\"assertEquals(\");\n\t\t\t\tsb.append(expectedArray.length);\n\t\t\t\tsb.append(\", actualArray.length);\");\n\n\t\t\t\tfor (int i = 0; i < expectedArray.length; i++) {\n\t\t\t\t\tsb.append(\"assertEquals(\\\"\");\n\t\t\t\t\tsb.append(expectedArray[i]);\n\t\t\t\t\tsb.append(\"\\\", actualArray[\");\n\t\t\t\t\tsb.append(i);\n\t\t\t\t\tsb.append(\"]);\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertTextNotPresent\") ||\n\t\t\t\t\t param1.equals(\"assertTextPresent\")) {\n\n\t\t\t\tif (param1.equals(\"assertTextNotPresent\")) {\n\t\t\t\t\tsb.append(\"assertFalse\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"assertTextPresent\")) {\n\t\t\t\t\tsb.append(\"assertTrue\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(selenium.isTextPresent(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"captureEntirePageScreenshot\")) {\n\t\t\t\tint pos = param2.lastIndexOf(\"\\\\\");\n\n\t\t\t\tString dirName = param2.substring(0, pos + 1);\n\n\t\t\t\tsb.append(\"FileUtil.mkdirs(RuntimeVariables.replace(\\\"\");\n\t\t\t\tsb.append(dirName);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t\tsb.append(\"selenium.captureEntirePageScreenshot(\");\n\t\t\t\tsb.append(\"RuntimeVariables.replace(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\"), \\\"\\\");\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"check\") || param1.equals(\"click\") ||\n\t\t\t\t\t param1.equals(\"doubleClick\") ||\n\t\t\t\t\t param1.equals(\"mouseDown\") || param1.equals(\"mouseOver\") ||\n\t\t\t\t\t param1.equals(\"mouseUp\") || param1.equals(\"open\") ||\n\t\t\t\t\t param1.equals(\"uncheck\") || param1.equals(\"selectFrame\") ||\n\t\t\t\t\t param1.equals(\"selectWindow\")) {\n\n\t\t\t\tsb.append(\"selenium.\");\n\t\t\t\tsb.append(param1);\n\t\t\t\tsb.append(\"(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\");\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"clickAndWait\")) {\n\t\t\t\tsb.append(\"selenium.click(RuntimeVariables.replace(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t\tsb.append(\"selenium.waitForPageToLoad(\\\"30000\\\");\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"clickAtAndWait\") ||\n\t\t\t\t\t param1.equals(\"keyPressAndWait\") ||\n\t\t\t\t\t param1.equals(\"selectAndWait\")) {\n\n\t\t\t\tsb.append(\"selenium.\");\n\n\t\t\t\tString text = param1.substring(0, param1.length() - 7);\n\n\t\t\t\tsb.append(text);\n\t\t\t\tsb.append(\"(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\", RuntimeVariables.replace(\\\"\");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t\tsb.append(\"selenium.waitForPageToLoad(\\\"30000\\\");\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"close\") || param1.equals(\"refresh\")) {\n\t\t\t\tsb.append(\"selenium.\");\n\t\t\t\tsb.append(param1);\n\t\t\t\tsb.append(\"();\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"dragAndDropToObject\")) {\n\t\t\t\tsb.append(\"selenium.\");\n\t\t\t\tsb.append(\"dragAndDropToObject(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\", \\\"\");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\"\\\");\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"echo\")) {\n\t\t\t\tsb.append(\"System.out.println(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\");\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"gotoIf\")) {\n\t\t\t\tString conditional = StringUtil.replace(\n\t\t\t\t\tparam2, new String[] {\"${\", \"}\"}, new String[] {\"\", \"\"});\n\n\t\t\t\tsb.append(\"if (\");\n\t\t\t\tsb.append(conditional);\n\t\t\t\tsb.append(\") {\");\n\t\t\t\tsb.append(\"label =\");\n\t\t\t\tsb.append(labels.get(param3));\n\t\t\t\tsb.append(\";\");\n\t\t\t\tsb.append(\"continue;\");\n\t\t\t\tsb.append(\"}\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"label\")) {\n\t\t\t\tString label = labels.get(param2);\n\n\t\t\t\tsb.append(\"case \");\n\t\t\t\tsb.append(label);\n\t\t\t\tsb.append(\":\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"pause\")) {\n\t\t\t\tsb.append(\"Thread.sleep(\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\");\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"refreshAndWait\")) {\n\t\t\t\tsb.append(\"selenium.refresh();\");\n\t\t\t\tsb.append(\"selenium.waitForPageToLoad(\\\"30000\\\");\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"store\")) {\n\t\t\t\tsb.append(\"boolean \");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\" = \");\n\n\t\t\t\tif (param2.startsWith(\"eval(\")) {\n\t\t\t\t\tString eval = param2.substring(5, param2.length() - 1);\n\n\t\t\t\t\teval = StringUtil.replace(eval, \"'\", \"\\\"\");\n\n\t\t\t\t\tsb.append(eval);\n\t\t\t\t}\n\n\t\t\t\tsb.append(\";\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"storeIncrementedText\")) {\n\t\t\t\tsb.append(\"String \");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\" = selenium.getIncrementedText(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\");\");\n\n\t\t\t\tsb.append(\"RuntimeVariables.setValue(\\\"\");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\"\\\", \");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\");\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"storeText\")) {\n\t\t\t\tsb.append(\"String \");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\" = selenium.getText(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\");\");\n\n\t\t\t\tsb.append(\"RuntimeVariables.setValue(\\\"\");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\"\\\", \");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\");\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"verifyElementNotPresent\") ||\n\t\t\t\t\t param1.equals(\"verifyElementPresent\")) {\n\n\t\t\t\tif (param1.equals(\"verifyElementNotPresent\")) {\n\t\t\t\t\tsb.append(\"verifyFalse\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"verifyElementPresent\")) {\n\t\t\t\t\tsb.append(\"verifyTrue\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(selenium.isElementPresent(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"verifyTextNotPresent\") ||\n\t\t\t\t\t param1.equals(\"verifyTextPresent\")) {\n\n\t\t\t\tif (param1.equals(\"verifyTextNotPresent\")) {\n\t\t\t\t\tsb.append(\"verifyFalse\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"verifyTextPresent\")) {\n\t\t\t\t\tsb.append(\"verifyTrue\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(selenium.isTextPresent(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"verifyTitle\")) {\n\t\t\t\tsb.append(\"verifyEquals(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\", selenium.getTitle());\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"waitForElementNotPresent\") ||\n\t\t\t\t\t param1.equals(\"waitForElementPresent\") ||\n\t\t\t\t\t param1.equals(\"waitForNotPartialText\") ||\n\t\t\t\t\t param1.equals(\"waitForNotTable\") ||\n\t\t\t\t\t param1.equals(\"waitForNotText\") ||\n\t\t\t\t\t param1.equals(\"waitForNotValue\") ||\n\t\t\t\t\t param1.equals(\"waitForNotVisible\") ||\n\t\t\t\t\t param1.equals(\"waitForPartialText\") ||\n\t\t\t\t\t param1.equals(\"waitForTable\") ||\n\t\t\t\t\t param1.equals(\"waitForText\") ||\n\t\t\t\t\t param1.equals(\"waitForTextNotPresent\") ||\n\t\t\t\t\t param1.equals(\"waitForTextPresent\") ||\n\t\t\t\t\t param1.equals(\"waitForValue\") ||\n\t\t\t\t\t param1.equals(\"waitForVisible\")) {\n\n\t\t\t\tsb.append(\"for (int second = 0;; second++) {\");\n\t\t\t\tsb.append(\"if (second >= 60) {\");\n\t\t\t\tsb.append(\"fail(\\\"timeout\\\");\");\n\t\t\t\tsb.append(\"}\");\n\n\t\t\t\tsb.append(\"try {\");\n\t\t\t\tsb.append(\"if (\");\n\n\t\t\t\tif (param1.equals(\"waitForElementNotPresent\") ||\n\t\t\t\t\tparam1.equals(\"waitForNotPartialText\") ||\n\t\t\t\t\tparam1.equals(\"waitForNotTable\") ||\n\t\t\t\t\tparam1.equals(\"waitForNotText\") ||\n\t\t\t\t\tparam1.equals(\"waitForNotValue\") ||\n\t\t\t\t\tparam1.equals(\"waitForNotVisible\") ||\n\t\t\t\t\tparam1.equals(\"waitForTextNotPresent\")) {\n\n\t\t\t\t\tsb.append(\"!\");\n\t\t\t\t}\n\n\t\t\t\tif (param1.equals(\"waitForElementNotPresent\") ||\n\t\t\t\t\tparam1.equals(\"waitForElementPresent\")) {\n\n\t\t\t\t\tsb.append(\"selenium.isElementPresent\");\n\t\t\t\t\tsb.append(\"(\\\"\");\n\t\t\t\t\tsb.append(param2);\n\t\t\t\t\tsb.append(\"\\\")\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"waitForNotPartialText\") ||\n\t\t\t\t\t\t param1.equals(\"waitForPartialText\")) {\n\n\t\t\t\t\tsb.append(\"selenium.isPartialText(\\\"\");\n\t\t\t\t\tsb.append(param2);\n\t\t\t\t\tsb.append(\"\\\", \");\n\n\t\t\t\t\tif (param3.startsWith(\"${\")) {\n\t\t\t\t\t\tsb.append(\"RuntimeVariables.getValue(\\\"\");\n\n\t\t\t\t\t\tString text = param3.substring(2, param3.length() - 1);\n\n\t\t\t\t\t\tsb.append(text);\n\t\t\t\t\t\tsb.append(\"\\\")\");\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tsb.append(\"\\\"\");\n\t\t\t\t\t\tsb.append(param3);\n\t\t\t\t\t\tsb.append(\"\\\"\");\n\t\t\t\t\t}\n\n\t\t\t\t\tsb.append(\")\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"waitForNotTable\") ||\n\t\t\t\t\t\t param1.equals(\"waitForTable\")) {\n\n\t\t\t\t\tsb.append(\"StringPool.BLANK.equals(selenium.getTable(\\\"\");\n\t\t\t\t\tsb.append(param2);\n\t\t\t\t\tsb.append(\"\\\"))\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"waitForNotText\") ||\n\t\t\t\t\t\t param1.equals(\"waitForText\")) {\n\n\t\t\t\t\tsb.append(\"RuntimeVariables.replace(\\\"\");\n\t\t\t\t\tsb.append(param3);\n\t\t\t\t\tsb.append(\"\\\").equals(selenium.getText(\\\"\");\n\t\t\t\t\tsb.append(param2);\n\t\t\t\t\tsb.append(\"\\\"))\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"waitForNotValue\") ||\n\t\t\t\t\t\t param1.equals(\"waitForValue\")) {\n\n\t\t\t\t\tsb.append(\"RuntimeVariables.replace(\\\"\");\n\t\t\t\t\tsb.append(param3);\n\t\t\t\t\tsb.append(\"\\\").equals(selenium.getValue(\\\"\");\n\t\t\t\t\tsb.append(param2);\n\t\t\t\t\tsb.append(\"\\\"))\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"waitForNotVisible\") ||\n\t\t\t\t\t\t param1.equals(\"waitForVisible\")) {\n\n\t\t\t\t\tsb.append(\"selenium.isVisible\");\n\t\t\t\t\tsb.append(\"(\\\"\");\n\t\t\t\t\tsb.append(param2);\n\t\t\t\t\tsb.append(\"\\\")\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"waitForTextNotPresent\") ||\n\t\t\t\t\t\t param1.equals(\"waitForTextPresent\")) {\n\n\t\t\t\t\tsb.append(\"selenium.isTextPresent\");\n\t\t\t\t\tsb.append(\"(\\\"\");\n\t\t\t\t\tsb.append(param2);\n\t\t\t\t\tsb.append(\"\\\")\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\") {\");\n\t\t\t\tsb.append(\"break;\");\n\t\t\t\tsb.append(\"}\");\n\t\t\t\tsb.append(\"}\");\n\t\t\t\tsb.append(\"catch (Exception e) {\");\n\t\t\t\tsb.append(\"}\");\n\n\t\t\t\tsb.append(\"Thread.sleep(1000);\");\n\t\t\t\tsb.append(\"}\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSystem.out.println(param1 + \" was not translated\");\n\t\t\t}\n\t\t}\n\n\t\tif (labels.size() > 0) {\n\t\t\tsb.append(\"case 100:\");\n\t\t\tsb.append(\"label = -1;\");\n\t\t\tsb.append(\"}\");\n\t\t\tsb.append(\"}\");\n\t\t}\n\n\t\tsb.append(\"}\");\n\t\tsb.append(\"}\");\n\n\t\tString content = sb.toString();\n\n\t\tServiceBuilder.writeFile(new File(testFileName), content);\n\t}","id":2793,"modified_method":"protected void translate(String basedir, String fileName) throws Exception {\n\t\tfileName = StringUtil.replace(\n\t\t\tfileName, StringPool.BACK_SLASH, StringPool.SLASH);\n\n\t\tint x = fileName.lastIndexOf(StringPool.SLASH);\n\t\tint y = fileName.indexOf(StringPool.PERIOD);\n\n\t\tString testPackagePath = StringUtil.replace(\n\t\t\tfileName.substring(0, x), StringPool.SLASH, StringPool.PERIOD);\n\t\tString testName = fileName.substring(x + 1, y);\n\t\tString testMethodName =\n\t\t\t\"test\" + testName.substring(0, testName.length() - 4);\n\t\tString testFileName =\n\t\t\tbasedir + \"/\" + fileName.substring(0, y) + \".java\";\n\n\t\tStringBundler sb = new StringBundler();\n\n\t\tsb.append(\"package \");\n\t\tsb.append(testPackagePath);\n\t\tsb.append(\";\\n\\n\");\n\n\t\tsb.append(\"import com.liferay.portal.kernel.util.FileUtil;\\n\");\n\t\tsb.append(\"import com.liferay.portal.kernel.util.StringPool;\\n\");\n\t\tsb.append(\"import com.liferay.portalweb.portal.BaseTestCase;\\n\\n\");\n\t\tsb.append(\n\t\t\t\"import com.liferay.portalweb.portal.util.RuntimeVariables;\\n\\n\");\n\n\t\tsb.append(\"public class \");\n\t\tsb.append(testName);\n\t\tsb.append(\" extends BaseTestCase {\");\n\n\t\tsb.append(\"public void \");\n\t\tsb.append(testMethodName);\n\t\tsb.append(\"() throws Exception {\");\n\n\t\tString xml = FileUtil.read(basedir + \"/\" + fileName);\n\n\t\tif ((xml.indexOf(\"<title>\" + testName + \"<\/title>\") == -1) ||\n\t\t\t(xml.indexOf(\"colspan=\\\"3\\\">\" + testName + \"<\/td>\") == -1)) {\n\n\t\t\tSystem.out.println(testName + \" has an invalid test name\");\n\t\t}\n\n\t\tif (xml.indexOf(\"&gt;\") != -1) {\n\t\t\txml = StringUtil.replace(xml, \"&gt;\", \">\");\n\n\t\t\tFileUtil.write(basedir + \"/\" + fileName, xml);\n\t\t}\n\n\t\tif (xml.indexOf(\"&lt;\") != -1) {\n\t\t\txml = StringUtil.replace(xml, \"&lt;\", \"<\");\n\n\t\t\tFileUtil.write(basedir + \"/\" + fileName, xml);\n\t\t}\n\n\t\tif (xml.indexOf(\"&quot;\") != -1) {\n\t\t\txml = StringUtil.replace(xml, \"&quot;\", \"\\\"\");\n\n\t\t\tFileUtil.write(basedir + \"/\" + fileName, xml);\n\t\t}\n\n\t\tx = xml.indexOf(\"<tbody>\");\n\t\ty = xml.indexOf(\"<\/tbody>\");\n\n\t\txml = xml.substring(x, y + 8);\n\n\t\tMap<String, String> labels = new HashMap<String, String>();\n\n\t\tint labelCount = 1;\n\n\t\tx = 0;\n\t\ty = 0;\n\n\t\twhile (true) {\n\t\t\tx = xml.indexOf(\"<tr>\", x);\n\t\t\ty = xml.indexOf(\"\\n<\/tr>\", x);\n\n\t\t\tif ((x == -1) || (y == -1)) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tx += 6;\n\t\t\ty++;\n\n\t\t\tString step = xml.substring(x, y);\n\n\t\t\tString[] params = getParams(step);\n\n\t\t\tString param1 = params[0];\n\t\t\tString param2 = fixParam(params[1]);\n\n\t\t\tif (param1.equals(\"label\")) {\n\t\t\t\tString label = labels.get(param2);\n\n\t\t\t\tif (label == null) {\n\t\t\t\t\tlabelCount++;\n\n\t\t\t\t\tlabel = labels.put(param2, String.valueOf(labelCount));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (labels.size() > 0) {\n\t\t\tsb.append(\"int label = 1;\");\n\n\t\t\tsb.append(\"while (label >= 1) {\");\n\t\t\tsb.append(\"switch (label) {\");\n\t\t\tsb.append(\"case 1:\");\n\t\t}\n\n\t\tx = 0;\n\t\ty = 0;\n\n\t\twhile (true) {\n\t\t\tx = xml.indexOf(\"<tr>\", x);\n\t\t\ty = xml.indexOf(\"\\n<\/tr>\", x);\n\n\t\t\tif ((x == -1) || (y == -1)) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tx += 6;\n\t\t\ty++;\n\n\t\t\tString step = xml.substring(x, y);\n\n\t\t\tString[] params = getParams(step);\n\n\t\t\tString param1 = params[0];\n\t\t\tString param2 = fixParam(params[1]);\n\t\t\tString param3 = fixParam(params[2]);\n\n\t\t\tif (param1.equals(\"addSelection\") || param1.equals(\"clickAt\") ||\n\t\t\t\tparam1.equals(\"keyPress\") || param1.equals(\"openWindow\") ||\n\t\t\t\tparam1.equals(\"select\") || param1.equals(\"type\") ||\n\t\t\t\tparam1.equals(\"typeKeys\") || param1.equals(\"waitForPopUp\")) {\n\n\t\t\t\tsb.append(\"selenium.\");\n\t\t\t\tsb.append(param1);\n\t\t\t\tsb.append(\"(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\", RuntimeVariables.replace(\\\"\");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertAlert\") ||\n\t\t\t\t\t param1.equals(\"assertNotAlert\")) {\n\n\t\t\t\tif (param1.equals(\"assertAlert\")) {\n\t\t\t\t\tsb.append(\"assertEquals\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"assertNotAlert\")) {\n\t\t\t\t\tsb.append(\"assertNotEquals\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\", selenium.getAlert());\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertChecked\") ||\n\t\t\t\t\t param1.equals(\"assertNotChecked\")) {\n\n\t\t\t\tif (param1.equals(\"assertChecked\")) {\n\t\t\t\t\tsb.append(\"assertTrue\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"assertNotChecked\")) {\n\t\t\t\t\tsb.append(\"assertFalse\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(selenium.isChecked(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertConfirmation\")) {\n\t\t\t\tparam2 = StringUtil.replace(param2, \"?\", \"[\\\\\\\\s\\\\\\\\S]\");\n\n\t\t\t\tsb.append(\"assertTrue(selenium.getConfirmation().matches(\\\"^\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"$\\\"));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertLocation\") ||\n\t\t\t\t\t param1.equals(\"assertNotLocation\")) {\n\n\t\t\t\tif (param1.equals(\"assertLocation\")) {\n\t\t\t\t\tsb.append(\"assertEquals\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"assertNotLocation\")) {\n\t\t\t\t\tsb.append(\"assertNotEquals\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\", selenium.getLocation());\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertElementNotPresent\") ||\n\t\t\t\t\t param1.equals(\"assertElementPresent\")) {\n\n\t\t\t\tif (param1.equals(\"assertElementNotPresent\")) {\n\t\t\t\t\tsb.append(\"assertFalse\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"assertElementPresent\")) {\n\t\t\t\t\tsb.append(\"assertTrue\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(selenium.isElementPresent(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertNotPartialText\") ||\n\t\t\t\t\t param1.equals(\"assertPartialText\")) {\n\n\t\t\t\tif (param1.equals(\"assertNotPartialText\")) {\n\t\t\t\t\tsb.append(\"assertFalse\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"assertPartialText\")) {\n\t\t\t\t\tsb.append(\"assertTrue\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(selenium.isPartialText(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\", \");\n\n\t\t\t\tif (param3.startsWith(\"${\")) {\n\t\t\t\t\tsb.append(\"RuntimeVariables.getValue(\\\"\");\n\n\t\t\t\t\tString text = param3.substring(2, param3.length() - 1);\n\n\t\t\t\t\tsb.append(text);\n\t\t\t\t\tsb.append(\"\\\")\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsb.append(\"\\\"\");\n\t\t\t\t\tsb.append(param3);\n\t\t\t\t\tsb.append(\"\\\"\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertNotSelectedLabel\") ||\n\t\t\t\t\t param1.equals(\"assertSelectedLabel\")) {\n\n\t\t\t\tif (param1.equals(\"assertNotSelectedLabel\")) {\n\t\t\t\t\tsb.append(\"assertNotEquals\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"assertSelectedLabel\")) {\n\t\t\t\t\tsb.append(\"assertEquals\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(\\\"\");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\"\\\", selenium.getSelectedLabel(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertNotSelectedLabels\") ||\n\t\t\t\t\t param1.equals(\"assertSelectedLabels\")) {\n\n\t\t\t\tif (param1.equals(\"assertNotSelectedLabels\")) {\n\t\t\t\t\tsb.append(\"assertNotEquals\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"assertSelectedLabels\")) {\n\t\t\t\t\tsb.append(\"assertEquals\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(\\\"\");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\"\\\", join(selenium.getSelectedLabels(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\"), \\',\\'));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertNotText\") ||\n\t\t\t\t\t param1.equals(\"assertText\")) {\n\n\t\t\t\tif (param1.equals(\"assertNotText\")) {\n\t\t\t\t\tsb.append(\"assertNotEquals\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"assertText\")) {\n\t\t\t\t\tsb.append(\"assertEquals\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(RuntimeVariables.replace(\\\"\");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\"\\\"), selenium.getText(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertNotValue\") ||\n\t\t\t\t\t param1.equals(\"assertValue\")) {\n\n\t\t\t\tif (param1.equals(\"assertNotValue\")) {\n\t\t\t\t\tsb.append(\"assertNotEquals\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"assertValue\")) {\n\t\t\t\t\tsb.append(\"assertEquals\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(\\\"\");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\"\\\", selenium.getValue(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertNotVisible\") ||\n\t\t\t\t\t param1.equals(\"assertVisible\")) {\n\n\t\t\t\tif (param1.equals(\"assertNotVisible\")) {\n\t\t\t\t\tsb.append(\"assertFalse\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"assertVisible\")) {\n\t\t\t\t\tsb.append(\"assertTrue\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(\");\n\t\t\t\tsb.append(\"selenium.isVisible(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertSelectOptions\")) {\n\t\t\t\tString[] expectedArray = StringUtil.split(param3);\n\n\t\t\t\tsb.append(\"String[] actualArray = \");\n\t\t\t\tsb.append(\"selenium.getSelectOptions(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\");\");\n\n\t\t\t\tsb.append(\"assertEquals(\");\n\t\t\t\tsb.append(expectedArray.length);\n\t\t\t\tsb.append(\", actualArray.length);\");\n\n\t\t\t\tfor (int i = 0; i < expectedArray.length; i++) {\n\t\t\t\t\tsb.append(\"assertEquals(\\\"\");\n\t\t\t\t\tsb.append(expectedArray[i]);\n\t\t\t\t\tsb.append(\"\\\", actualArray[\");\n\t\t\t\t\tsb.append(i);\n\t\t\t\t\tsb.append(\"]);\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (param1.equals(\"assertTextNotPresent\") ||\n\t\t\t\t\t param1.equals(\"assertTextPresent\")) {\n\n\t\t\t\tif (param1.equals(\"assertTextNotPresent\")) {\n\t\t\t\t\tsb.append(\"assertFalse\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"assertTextPresent\")) {\n\t\t\t\t\tsb.append(\"assertTrue\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(selenium.isTextPresent(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"captureEntirePageScreenshot\")) {\n\t\t\t\tint pos = param2.lastIndexOf(\"\\\\\");\n\n\t\t\t\tString dirName = param2.substring(0, pos + 1);\n\n\t\t\t\tsb.append(\"FileUtil.mkdirs(RuntimeVariables.replace(\\\"\");\n\t\t\t\tsb.append(dirName);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t\tsb.append(\"selenium.captureEntirePageScreenshot(\");\n\t\t\t\tsb.append(\"RuntimeVariables.replace(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\"), \\\"\\\");\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"check\") || param1.equals(\"click\") ||\n\t\t\t\t\t param1.equals(\"doubleClick\") ||\n\t\t\t\t\t param1.equals(\"mouseDown\") || param1.equals(\"mouseOver\") ||\n\t\t\t\t\t param1.equals(\"mouseUp\") || param1.equals(\"open\") ||\n\t\t\t\t\t param1.equals(\"uncheck\") || param1.equals(\"selectFrame\") ||\n\t\t\t\t\t param1.equals(\"selectWindow\")) {\n\n\t\t\t\tsb.append(\"selenium.\");\n\t\t\t\tsb.append(param1);\n\t\t\t\tsb.append(\"(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\");\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"clickAndWait\")) {\n\t\t\t\tsb.append(\"selenium.click(RuntimeVariables.replace(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t\tsb.append(\"selenium.waitForPageToLoad(\\\"30000\\\");\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"clickAtAndWait\") ||\n\t\t\t\t\t param1.equals(\"keyPressAndWait\") ||\n\t\t\t\t\t param1.equals(\"selectAndWait\")) {\n\n\t\t\t\tsb.append(\"selenium.\");\n\n\t\t\t\tString text = param1.substring(0, param1.length() - 7);\n\n\t\t\t\tsb.append(text);\n\t\t\t\tsb.append(\"(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\", RuntimeVariables.replace(\\\"\");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t\tsb.append(\"selenium.waitForPageToLoad(\\\"30000\\\");\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"close\") || param1.equals(\"refresh\")) {\n\t\t\t\tsb.append(\"selenium.\");\n\t\t\t\tsb.append(param1);\n\t\t\t\tsb.append(\"();\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"dragAndDropToObject\")) {\n\t\t\t\tsb.append(\"selenium.\");\n\t\t\t\tsb.append(\"dragAndDropToObject(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\", \\\"\");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\"\\\");\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"echo\")) {\n\t\t\t\tsb.append(\"System.out.println(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\");\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"gotoIf\")) {\n\t\t\t\tString conditional = StringUtil.replace(\n\t\t\t\t\tparam2, new String[] {\"${\", \"}\"}, new String[] {\"\", \"\"});\n\n\t\t\t\tsb.append(\"if (\");\n\t\t\t\tsb.append(conditional);\n\t\t\t\tsb.append(\") {\");\n\t\t\t\tsb.append(\"label =\");\n\t\t\t\tsb.append(labels.get(param3));\n\t\t\t\tsb.append(\";\");\n\t\t\t\tsb.append(\"continue;\");\n\t\t\t\tsb.append(\"}\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"label\")) {\n\t\t\t\tString label = labels.get(param2);\n\n\t\t\t\tsb.append(\"case \");\n\t\t\t\tsb.append(label);\n\t\t\t\tsb.append(\":\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"pause\")) {\n\t\t\t\tsb.append(\"Thread.sleep(\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\");\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"refreshAndWait\")) {\n\t\t\t\tsb.append(\"selenium.refresh();\");\n\t\t\t\tsb.append(\"selenium.waitForPageToLoad(\\\"30000\\\");\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"store\")) {\n\t\t\t\tsb.append(\"boolean \");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\" = \");\n\n\t\t\t\tif (param2.startsWith(\"eval(\")) {\n\t\t\t\t\tString eval = param2.substring(5, param2.length() - 1);\n\n\t\t\t\t\teval = StringUtil.replace(eval, \"'\", \"\\\"\");\n\n\t\t\t\t\tsb.append(eval);\n\t\t\t\t}\n\n\t\t\t\tsb.append(\";\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"storeIncrementedText\")) {\n\t\t\t\tsb.append(\"String \");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\" = selenium.getIncrementedText(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\");\");\n\n\t\t\t\tsb.append(\"RuntimeVariables.setValue(\\\"\");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\"\\\", \");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\");\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"storeText\")) {\n\t\t\t\tsb.append(\"String \");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\" = selenium.getText(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\");\");\n\n\t\t\t\tsb.append(\"RuntimeVariables.setValue(\\\"\");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\"\\\", \");\n\t\t\t\tsb.append(param3);\n\t\t\t\tsb.append(\");\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"verifyElementNotPresent\") ||\n\t\t\t\t\t param1.equals(\"verifyElementPresent\")) {\n\n\t\t\t\tif (param1.equals(\"verifyElementNotPresent\")) {\n\t\t\t\t\tsb.append(\"verifyFalse\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"verifyElementPresent\")) {\n\t\t\t\t\tsb.append(\"verifyTrue\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(selenium.isElementPresent(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"verifyTextNotPresent\") ||\n\t\t\t\t\t param1.equals(\"verifyTextPresent\")) {\n\n\t\t\t\tif (param1.equals(\"verifyTextNotPresent\")) {\n\t\t\t\t\tsb.append(\"verifyFalse\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"verifyTextPresent\")) {\n\t\t\t\t\tsb.append(\"verifyTrue\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\"(selenium.isTextPresent(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\"));\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"verifyTitle\")) {\n\t\t\t\tsb.append(\"verifyEquals(\\\"\");\n\t\t\t\tsb.append(param2);\n\t\t\t\tsb.append(\"\\\", selenium.getTitle());\");\n\t\t\t}\n\t\t\telse if (param1.equals(\"waitForElementNotPresent\") ||\n\t\t\t\t\t param1.equals(\"waitForElementPresent\") ||\n\t\t\t\t\t param1.equals(\"waitForNotPartialText\") ||\n\t\t\t\t\t param1.equals(\"waitForNotTable\") ||\n\t\t\t\t\t param1.equals(\"waitForNotText\") ||\n\t\t\t\t\t param1.equals(\"waitForNotValue\") ||\n\t\t\t\t\t param1.equals(\"waitForNotVisible\") ||\n\t\t\t\t\t param1.equals(\"waitForPartialText\") ||\n\t\t\t\t\t param1.equals(\"waitForTable\") ||\n\t\t\t\t\t param1.equals(\"waitForText\") ||\n\t\t\t\t\t param1.equals(\"waitForTextNotPresent\") ||\n\t\t\t\t\t param1.equals(\"waitForTextPresent\") ||\n\t\t\t\t\t param1.equals(\"waitForValue\") ||\n\t\t\t\t\t param1.equals(\"waitForVisible\")) {\n\n\t\t\t\tsb.append(\"for (int second = 0;; second++) {\");\n\t\t\t\tsb.append(\"if (second >= 60) {\");\n\t\t\t\tsb.append(\"fail(\\\"timeout\\\");\");\n\t\t\t\tsb.append(\"}\");\n\n\t\t\t\tsb.append(\"try {\");\n\t\t\t\tsb.append(\"if (\");\n\n\t\t\t\tif (param1.equals(\"waitForElementNotPresent\") ||\n\t\t\t\t\tparam1.equals(\"waitForNotPartialText\") ||\n\t\t\t\t\tparam1.equals(\"waitForNotTable\") ||\n\t\t\t\t\tparam1.equals(\"waitForNotText\") ||\n\t\t\t\t\tparam1.equals(\"waitForNotValue\") ||\n\t\t\t\t\tparam1.equals(\"waitForNotVisible\") ||\n\t\t\t\t\tparam1.equals(\"waitForTextNotPresent\")) {\n\n\t\t\t\t\tsb.append(\"!\");\n\t\t\t\t}\n\n\t\t\t\tif (param1.equals(\"waitForElementNotPresent\") ||\n\t\t\t\t\tparam1.equals(\"waitForElementPresent\")) {\n\n\t\t\t\t\tsb.append(\"selenium.isElementPresent\");\n\t\t\t\t\tsb.append(\"(\\\"\");\n\t\t\t\t\tsb.append(param2);\n\t\t\t\t\tsb.append(\"\\\")\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"waitForNotPartialText\") ||\n\t\t\t\t\t\t param1.equals(\"waitForPartialText\")) {\n\n\t\t\t\t\tsb.append(\"selenium.isPartialText(\\\"\");\n\t\t\t\t\tsb.append(param2);\n\t\t\t\t\tsb.append(\"\\\", \");\n\n\t\t\t\t\tif (param3.startsWith(\"${\")) {\n\t\t\t\t\t\tsb.append(\"RuntimeVariables.getValue(\\\"\");\n\n\t\t\t\t\t\tString text = param3.substring(2, param3.length() - 1);\n\n\t\t\t\t\t\tsb.append(text);\n\t\t\t\t\t\tsb.append(\"\\\")\");\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tsb.append(\"\\\"\");\n\t\t\t\t\t\tsb.append(param3);\n\t\t\t\t\t\tsb.append(\"\\\"\");\n\t\t\t\t\t}\n\n\t\t\t\t\tsb.append(\")\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"waitForNotTable\") ||\n\t\t\t\t\t\t param1.equals(\"waitForTable\")) {\n\n\t\t\t\t\tsb.append(\"StringPool.BLANK.equals(selenium.getTable(\\\"\");\n\t\t\t\t\tsb.append(param2);\n\t\t\t\t\tsb.append(\"\\\"))\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"waitForNotText\") ||\n\t\t\t\t\t\t param1.equals(\"waitForText\")) {\n\n\t\t\t\t\tsb.append(\"RuntimeVariables.replace(\\\"\");\n\t\t\t\t\tsb.append(param3);\n\t\t\t\t\tsb.append(\"\\\").equals(selenium.getText(\\\"\");\n\t\t\t\t\tsb.append(param2);\n\t\t\t\t\tsb.append(\"\\\"))\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"waitForNotValue\") ||\n\t\t\t\t\t\t param1.equals(\"waitForValue\")) {\n\n\t\t\t\t\tsb.append(\"RuntimeVariables.replace(\\\"\");\n\t\t\t\t\tsb.append(param3);\n\t\t\t\t\tsb.append(\"\\\").equals(selenium.getValue(\\\"\");\n\t\t\t\t\tsb.append(param2);\n\t\t\t\t\tsb.append(\"\\\"))\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"waitForNotVisible\") ||\n\t\t\t\t\t\t param1.equals(\"waitForVisible\")) {\n\n\t\t\t\t\tsb.append(\"selenium.isVisible\");\n\t\t\t\t\tsb.append(\"(\\\"\");\n\t\t\t\t\tsb.append(param2);\n\t\t\t\t\tsb.append(\"\\\")\");\n\t\t\t\t}\n\t\t\t\telse if (param1.equals(\"waitForTextNotPresent\") ||\n\t\t\t\t\t\t param1.equals(\"waitForTextPresent\")) {\n\n\t\t\t\t\tsb.append(\"selenium.isTextPresent\");\n\t\t\t\t\tsb.append(\"(\\\"\");\n\t\t\t\t\tsb.append(param2);\n\t\t\t\t\tsb.append(\"\\\")\");\n\t\t\t\t}\n\n\t\t\t\tsb.append(\") {\");\n\t\t\t\tsb.append(\"break;\");\n\t\t\t\tsb.append(\"}\");\n\t\t\t\tsb.append(\"}\");\n\t\t\t\tsb.append(\"catch (Exception e) {\");\n\t\t\t\tsb.append(\"}\");\n\n\t\t\t\tsb.append(\"Thread.sleep(1000);\");\n\t\t\t\tsb.append(\"}\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSystem.out.println(param1 + \" was not translated\");\n\t\t\t}\n\t\t}\n\n\t\tif (labels.size() > 0) {\n\t\t\tsb.append(\"case 100:\");\n\t\t\tsb.append(\"label = -1;\");\n\t\t\tsb.append(\"}\");\n\t\t\tsb.append(\"}\");\n\t\t}\n\n\t\tsb.append(\"}\");\n\t\tsb.append(\"}\");\n\n\t\tString content = sb.toString();\n\n\t\tServiceBuilder.writeFile(new File(testFileName), content);\n\t}","commit_id":"2f02d3c0395c5fc81e94049f56413307d73395b7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public SeleneseToJavaBuilder(String basedir) throws Exception {\n\t\tDirectoryScanner ds = new DirectoryScanner();\n\n\t\tds.setBasedir(basedir);\n\t\tds.setIncludes(new String[] {\"**\\\\*.html\"});\n\n\t\tds.scan();\n\n\t\tString[] files = ds.getIncludedFiles();\n\n\t\tfor (int i = 0; i < files.length; i++) {\n\n\t\t\t// I would have preferred to use XlateHtmlSeleneseToJava, but it\n\t\t\t// is horribly out of sync with Selenium IDE and generates incorrect\n\t\t\t// code.\n\n\t\t\t/*File file = new File(basedir + \"/\" + files[i]);\n\n\t\t\tString input = StringUtil.replace(file.toString(), \"\\\\\", \"/\");\n\n\t\t\tXlateHtmlSeleneseToJava.main(\n\t\t\t\tnew String[] {\n\t\t\t\t\t\"test\", \"-silent\", input\n\t\t\t\t}\n\t\t\t);*/\n\n\t\t\ttranslate(basedir, files[i]);\n\t\t}\n\n\t\tSet<String> filesSet = SetUtil.fromArray(files);\n\n\t\tds = new DirectoryScanner();\n\n\t\tds.setBasedir(basedir);\n\t\tds.setExcludes(\n\t\t\tnew String[] {\n\t\t\t\t\"**\\\\IterateThemeTest.java\", \"**\\\\StopSeleniumTest.java\"\n\t\t\t});\n\t\tds.setIncludes(new String[] {\"**\\\\*Test.java\"});\n\n\t\tds.scan();\n\n\t\tfiles = ds.getIncludedFiles();\n\n\t\tfor (int i = 0; i < files.length; i++) {\n\t\t\tif (!filesSet.contains(\n\t\t\t\t\tfiles[i].substring(0, files[i].length() - 5) + \".html\")) {\n\n\t\t\t\tSystem.out.println(\"unused: \" + files[i]);\n\t\t\t}\n\t\t}\n\t}","id":2794,"modified_method":"public SeleneseToJavaBuilder(String basedir) throws Exception {\n\t\tDirectoryScanner ds = new DirectoryScanner();\n\n\t\tds.setBasedir(basedir);\n\t\tds.setExcludes(\n\t\t\tnew String[] {\n\t\t\t\t\"**\\\\IterateThemeTest.java\", \"**\\\\StopSeleniumTest.java\"\n\t\t\t});\n\t\tds.setIncludes(new String[] {\"**\\\\*Test.html\", \"**\\\\*Test.java\"});\n\n\t\tds.scan();\n\n\t\tSet<String> fileNames = SetUtil.fromArray(ds.getIncludedFiles());\n\n\t\tfor (String fileName : fileNames) {\n\n\t\t\t// I would have preferred to use XlateHtmlSeleneseToJava, but it\n\t\t\t// is horribly out of sync with Selenium IDE and generates incorrect\n\t\t\t// code.\n\n\t\t\t/*String input = StringUtil.replace(\n\t\t\t\tbasedir + \"/\" + fileName, \"\\\\\", \"/\");\n\n\t\t\tXlateHtmlSeleneseToJava.main(\n\t\t\t\tnew String[] {\n\t\t\t\t\t\"test\", \"-silent\", input\n\t\t\t\t}\n\t\t\t);*/\n\n\t\t\tif (fileName.endsWith(\"Test.html\")) {\n\t\t\t\ttranslate(basedir, fileName);\n\t\t\t}\n\t\t\telse if (fileName.endsWith(\"Test.java\")) {\n\t\t\t\tif (!fileNames.contains(\n\t\t\t\t\t\tfileName.substring(0, fileName.length() - 5) +\n\t\t\t\t\t\t\t\".html\")) {\n\n\t\t\t\t\tSystem.out.println(\"unused: \" + fileName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"2f02d3c0395c5fc81e94049f56413307d73395b7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void processAction(\n\t\t\tPortletConfig portletConfig, ActionRequest actionRequest,\n\t\t\tActionResponse actionResponse)\n\t\tthrows Exception {\n\n\t\tString cmd = ParamUtil.getString(actionRequest, Constants.CMD);\n\n\t\tif (!cmd.equals(Constants.UPDATE)) {\n\t\t\treturn;\n\t\t}\n\n\t\tString title = ParamUtil.getString(actionRequest, \"title\");\n\t\tString description = ParamUtil.getString(actionRequest, \"description\");\n\t\tboolean requireCaptcha = ParamUtil.getBoolean(\n\t\t\tactionRequest, \"requireCaptcha\");\n\t\tString successURL = ParamUtil.getString(actionRequest, \"successURL\");\n\n\t\tboolean sendAsEmail = ParamUtil.getBoolean(\n\t\t\tactionRequest, \"sendAsEmail\");\n\t\tString subject = ParamUtil.getString(actionRequest, \"subject\");\n\t\tString emailAddress = ParamUtil.getString(\n\t\t\tactionRequest, \"emailAddress\");\n\n\t\tboolean saveToDatabase = ParamUtil.getBoolean(\n\t\t\tactionRequest, \"saveToDatabase\");\n\n\t\tboolean saveToFile = ParamUtil.getBoolean(actionRequest, \"saveToFile\");\n\t\tString fileName = ParamUtil.getString(actionRequest, \"fileName\");\n\n\t\tboolean updateFields = ParamUtil.getBoolean(\n\t\t\tactionRequest, \"updateFields\");\n\n\t\tString portletResource = ParamUtil.getString(\n\t\t\tactionRequest, \"portletResource\");\n\n\t\tPortletPreferences preferences =\n\t\t\tPortletPreferencesFactoryUtil.getPortletSetup(\n\t\t\t\tactionRequest, portletResource);\n\n\t\tif (Validator.isNull(title)) {\n\t\t\tSessionErrors.add(actionRequest, \"titleRequired\");\n\t\t}\n\n\t\tif (Validator.isNull(subject)) {\n\t\t\tSessionErrors.add(actionRequest, \"subjectRequired\");\n\t\t}\n\n\t\tif (!sendAsEmail && !saveToDatabase && !saveToFile) {\n\t\t\tSessionErrors.add(actionRequest, \"handlingRequired\");\n\t\t}\n\n\t\tif (sendAsEmail) {\n\t\t\tif (Validator.isNull(emailAddress)) {\n\t\t\t\tSessionErrors.add(actionRequest, \"emailAddressRequired\");\n\t\t\t}\n\t\t\telse if (!Validator.isEmailAddress(emailAddress)) {\n\t\t\t\tSessionErrors.add(actionRequest, \"emailAddressInvalid\");\n\t\t\t}\n\t\t}\n\n\t\tif (saveToFile) {\n\n\t\t\t// Check if server can create a file as specified\n\n\t\t\ttry {\n\t\t\t\tFileOutputStream fos = new FileOutputStream(fileName, true);\n\n\t\t\t\tfos.close();\n\t\t\t}\n\t\t\tcatch (SecurityException es) {\n\t\t\t\tSessionErrors.add(actionRequest, \"fileNameInvalid\");\n\t\t\t}\n\t\t\tcatch (FileNotFoundException fnfe) {\n\t\t\t\tSessionErrors.add(actionRequest, \"fileNameInvalid\");\n\t\t\t}\n\t\t}\n\n\t\tif (!SessionErrors.isEmpty(actionRequest)) {\n\t\t\treturn;\n\t\t}\n\n\t\tpreferences.setValue(\"title\", title);\n\t\tpreferences.setValue(\"description\", description);\n\t\tpreferences.setValue(\"requireCaptcha\", String.valueOf(requireCaptcha));\n\t\tpreferences.setValue(\"successURL\", successURL);\n\t\tpreferences.setValue(\"sendAsEmail\", String.valueOf(sendAsEmail));\n\t\tpreferences.setValue(\"subject\", subject);\n\t\tpreferences.setValue(\"emailAddress\", emailAddress);\n\t\tpreferences.setValue(\"saveToDatabase\", String.valueOf(saveToDatabase));\n\t\tpreferences.setValue(\"saveToFile\", String.valueOf(saveToFile));\n\t\tpreferences.setValue(\"fileName\", fileName);\n\n\t\tif (updateFields) {\n\t\t\tint i = 1;\n\n\t\t\tString databaseTableName = WebFormUtil.getNewDatabaseTableName(\n\t\t\t\tportletResource);\n\n\t\t\tpreferences.setValue(\"databaseTableName\", databaseTableName);\n\n\t\t\tint[] formFieldsIndexes = StringUtil.split(\n\t\t\t\tParamUtil.getString(actionRequest, \"formFieldsIndexes\"), 0);\n\n\t\t\tfor (int formFieldsIndex : formFieldsIndexes) {\n\t\t\t\tString fieldLabel = ParamUtil.getString(\n\t\t\t\t\tactionRequest, \"fieldLabel\" + formFieldsIndex);\n\n\t\t\t\tif (Validator.isNull(fieldLabel)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tString fieldType = ParamUtil.getString(\n\t\t\t\t\tactionRequest, \"fieldType\" + formFieldsIndex);\n\t\t\t\tboolean fieldOptional = ParamUtil.getBoolean(\n\t\t\t\t\tactionRequest, \"fieldOptional\" + formFieldsIndex);\n\t\t\t\tString fieldOptions = ParamUtil.getString(\n\t\t\t\t\tactionRequest, \"fieldOptions\" + formFieldsIndex);\n\t\t\t\tString fieldValidationScript = ParamUtil.getString(\n\t\t\t\t\tactionRequest, \"fieldValidationScript\" + formFieldsIndex);\n\t\t\t\tString fieldValidationErrorMessage = ParamUtil.getString(\n\t\t\t\t\tactionRequest,\n\t\t\t\t\t\"fieldValidationErrorMessage\" + formFieldsIndex);\n\n\t\t\t\tif ((Validator.isNotNull(fieldValidationScript) ^\n\t\t\t\t\t(Validator.isNotNull(fieldValidationErrorMessage)))) {\n\n\t\t\t\t\tSessionErrors.add(\n\t\t\t\t\t\tactionRequest, \"invalidValidationDefinition\" + i);\n\t\t\t\t}\n\n\t\t\t\tpreferences.setValue(\"fieldLabel\" + i, fieldLabel);\n\t\t\t\tpreferences.setValue(\"fieldType\" + i, fieldType);\n\t\t\t\tpreferences.setValue(\n\t\t\t\t\t\"fieldOptional\" + i, String.valueOf(fieldOptional));\n\t\t\t\tpreferences.setValue(\"fieldOptions\" + i, fieldOptions);\n\t\t\t\tpreferences.setValue(\n\t\t\t\t\t\"fieldValidationScript\" + i, fieldValidationScript);\n\t\t\t\tpreferences.setValue(\n\t\t\t\t\t\"fieldValidationErrorMessage\" + i,\n\t\t\t\t\tfieldValidationErrorMessage);\n\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\tif (!SessionErrors.isEmpty(actionRequest)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Clear previous preferences that are now blank\n\n\t\t\tString fieldLabel = preferences.getValue(\n\t\t\t\t\"fieldLabel\" + i, StringPool.BLANK);\n\n\t\t\twhile (Validator.isNotNull(fieldLabel)) {\n\t\t\t\tpreferences.setValue(\"fieldLabel\" + i, StringPool.BLANK);\n\t\t\t\tpreferences.setValue(\"fieldType\" + i, StringPool.BLANK);\n\t\t\t\tpreferences.setValue(\"fieldOptional\" + i, StringPool.BLANK);\n\t\t\t\tpreferences.setValue(\"fieldOptions\" + i, StringPool.BLANK);\n\t\t\t\tpreferences.setValue(\n\t\t\t\t\t\"fieldValidationScript\" + i, StringPool.BLANK);\n\t\t\t\tpreferences.setValue(\n\t\t\t\t\t\"fieldValidationErrorMessage\" + i, StringPool.BLANK);\n\n\t\t\t\ti++;\n\n\t\t\t\tfieldLabel = preferences.getValue(\n\t\t\t\t\t\"fieldLabel\" + i, StringPool.BLANK);\n\t\t\t}\n\t\t}\n\n\t\tif (SessionErrors.isEmpty(actionRequest)) {\n\t\t\tpreferences.store();\n\n\t\t\tSessionMessages.add(\n\t\t\t\tactionRequest, portletConfig.getPortletName() + \".doConfigure\");\n\t\t}\n\t}","id":2795,"modified_method":"public void processAction(\n\t\t\tPortletConfig portletConfig, ActionRequest actionRequest,\n\t\t\tActionResponse actionResponse)\n\t\tthrows Exception {\n\n\t\tString cmd = ParamUtil.getString(actionRequest, Constants.CMD);\n\n\t\tString title = ParamUtil.getString(actionRequest, \"title\");\n\t\tString description = ParamUtil.getString(actionRequest, \"description\");\n\t\tboolean requireCaptcha = ParamUtil.getBoolean(\n\t\t\tactionRequest, \"requireCaptcha\");\n\t\tString successURL = ParamUtil.getString(actionRequest, \"successURL\");\n\n\t\tboolean sendAsEmail = ParamUtil.getBoolean(\n\t\t\tactionRequest, \"sendAsEmail\");\n\t\tString subject = ParamUtil.getString(actionRequest, \"subject\");\n\t\tString emailAddress = ParamUtil.getString(\n\t\t\tactionRequest, \"emailAddress\");\n\n\t\tboolean saveToDatabase = ParamUtil.getBoolean(\n\t\t\tactionRequest, \"saveToDatabase\");\n\n\t\tboolean saveToFile = ParamUtil.getBoolean(actionRequest, \"saveToFile\");\n\t\tString fileName = ParamUtil.getString(actionRequest, \"fileName\");\n\n\t\tboolean updateFields = ParamUtil.getBoolean(\n\t\t\tactionRequest, \"updateFields\");\n\n\t\tString portletResource = ParamUtil.getString(\n\t\t\tactionRequest, \"portletResource\");\n\n\t\tPortletPreferences preferences =\n\t\t\tPortletPreferencesFactoryUtil.getPortletSetup(\n\t\t\t\tactionRequest, portletResource);\n\n\t\tif (Validator.isNull(title)) {\n\t\t\tSessionErrors.add(actionRequest, \"titleRequired\");\n\t\t}\n\n\t\tif (Validator.isNull(subject)) {\n\t\t\tSessionErrors.add(actionRequest, \"subjectRequired\");\n\t\t}\n\n\t\tif (!sendAsEmail && !saveToDatabase && !saveToFile) {\n\t\t\tSessionErrors.add(actionRequest, \"handlingRequired\");\n\t\t}\n\n\t\tif (sendAsEmail) {\n\t\t\tif (Validator.isNull(emailAddress)) {\n\t\t\t\tSessionErrors.add(actionRequest, \"emailAddressRequired\");\n\t\t\t}\n\t\t\telse if (!Validator.isEmailAddress(emailAddress)) {\n\t\t\t\tSessionErrors.add(actionRequest, \"emailAddressInvalid\");\n\t\t\t}\n\t\t}\n\n\t\tif (saveToFile) {\n\n\t\t\t// Check if server can create a file as specified\n\n\t\t\ttry {\n\t\t\t\tFileOutputStream fos = new FileOutputStream(fileName, true);\n\n\t\t\t\tfos.close();\n\t\t\t}\n\t\t\tcatch (SecurityException es) {\n\t\t\t\tSessionErrors.add(actionRequest, \"fileNameInvalid\");\n\t\t\t}\n\t\t\tcatch (FileNotFoundException fnfe) {\n\t\t\t\tSessionErrors.add(actionRequest, \"fileNameInvalid\");\n\t\t\t}\n\t\t}\n\n\t\tif (!SessionErrors.isEmpty(actionRequest)) {\n\t\t\treturn;\n\t\t}\n\n\t\tpreferences.setValue(\"title\", title);\n\t\tpreferences.setValue(\"description\", description);\n\t\tpreferences.setValue(\"requireCaptcha\", String.valueOf(requireCaptcha));\n\t\tpreferences.setValue(\"successURL\", successURL);\n\t\tpreferences.setValue(\"sendAsEmail\", String.valueOf(sendAsEmail));\n\t\tpreferences.setValue(\"subject\", subject);\n\t\tpreferences.setValue(\"emailAddress\", emailAddress);\n\t\tpreferences.setValue(\"saveToDatabase\", String.valueOf(saveToDatabase));\n\t\tpreferences.setValue(\"saveToFile\", String.valueOf(saveToFile));\n\t\tpreferences.setValue(\"fileName\", fileName);\n\n\t\tif (updateFields) {\n\t\t\tint i = 1;\n\t\t\tLocale defaultLocale = LocaleUtil.getDefault();\n\t\t\tString defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);\n\n\t\t\tString databaseTableName = WebFormUtil.getNewDatabaseTableName(\n\t\t\t\tportletResource);\n\n\t\t\tpreferences.setValue(\"databaseTableName\", databaseTableName);\n\n\t\t\tint[] formFieldsIndexes = StringUtil.split(\n\t\t\t\tParamUtil.getString(actionRequest, \"formFieldsIndexes\"), 0);\n\n\t\t\tfor (int formFieldsIndex : formFieldsIndexes) {\n\t\t\t\tMap<Locale, String> fieldLabelMap =\n\t\t\t\t\tLocalizationUtil.getLocalizationMap(\n\t\t\t\t\t\tactionRequest, \"fieldLabel\" + formFieldsIndex);\n\n\t\t\t\tif (Validator.isNull(fieldLabelMap.get(defaultLocale))) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tString fieldType = ParamUtil.getString(\n\t\t\t\t\tactionRequest, \"fieldType\" + formFieldsIndex);\n\t\t\t\tboolean fieldOptional = ParamUtil.getBoolean(\n\t\t\t\t\tactionRequest, \"fieldOptional\" + formFieldsIndex);\n\t\t\t\tMap<Locale, String> fieldOptionsMap =\n\t\t\t\t\tLocalizationUtil.getLocalizationMap(\n\t\t\t\t\t\tactionRequest, \"fieldOptions\" + formFieldsIndex);\n\t\t\t\tString fieldValidationScript = ParamUtil.getString(\n\t\t\t\t\tactionRequest, \"fieldValidationScript\" + formFieldsIndex);\n\t\t\t\tString fieldValidationErrorMessage = ParamUtil.getString(\n\t\t\t\t\tactionRequest,\n\t\t\t\t\t\"fieldValidationErrorMessage\" + formFieldsIndex);\n\n\t\t\t\tif ((Validator.isNotNull(fieldValidationScript) ^\n\t\t\t\t\t(Validator.isNotNull(fieldValidationErrorMessage)))) {\n\n\t\t\t\t\tSessionErrors.add(\n\t\t\t\t\t\tactionRequest, \"invalidValidationDefinition\" + i);\n\t\t\t\t}\n\n\t\t\t\tfor (Locale locale : fieldLabelMap.keySet()) {\n\t\t\t\t\tString languageId = LocaleUtil.toLanguageId(locale);\n\t\t\t\t\tString fieldLabelValue = fieldLabelMap.get(locale);\n\t\t\t\t\tString fieldOptionsValue = fieldOptionsMap.get(locale);\n\n\t\t\t\t\tif (Validator.isNotNull(fieldLabelValue)) {\n\t\t\t\t\t\tLocalizationUtil.setPreferencesValue(\n\t\t\t\t\t\t\tpreferences, \"fieldLabel\" + i, languageId,\n\t\t\t\t\t\t\tfieldLabelValue);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (Validator.isNotNull(fieldOptionsValue)) {\n\t\t\t\t\t\tLocalizationUtil.setPreferencesValue(\n\t\t\t\t\t\t\tpreferences, \"fieldOptions\" + i, languageId,\n\t\t\t\t\t\t\tfieldOptionsValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpreferences.setValue(\"fieldType\" + i, fieldType);\n\t\t\t\tpreferences.setValue(\n\t\t\t\t\t\"fieldOptional\" + i, String.valueOf(fieldOptional));\n\t\t\t\tpreferences.setValue(\n\t\t\t\t\t\"fieldValidationScript\" + i, fieldValidationScript);\n\t\t\t\tpreferences.setValue(\n\t\t\t\t\t\"fieldValidationErrorMessage\" + i,\n\t\t\t\t\tfieldValidationErrorMessage);\n\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\tif (!SessionErrors.isEmpty(actionRequest)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Clear previous preferences that are now blank\n\n\t\t\tString fieldLabel = LocalizationUtil.getPreferencesValue(\n\t\t\t\tpreferences, \"fieldLabel\" + i, defaultLanguageId);\n\n\t\t\twhile (Validator.isNotNull(fieldLabel)) {\n\t\t\t\tMap<Locale, String> fieldLabelMap =\n\t\t\t\t\tLocalizationUtil.getLocalizationMap(\n\t\t\t\t\t\tactionRequest, \"fieldLabel\" + i);\n\n\t\t\t\tfor (Locale locale : fieldLabelMap.keySet()) {\n\t\t\t\t\tString languageId = LocaleUtil.toLanguageId(locale);\n\n\t\t\t\t\tLocalizationUtil.setPreferencesValue(\n\t\t\t\t\t\tpreferences, \"fieldLabel\" + i, languageId,\n\t\t\t\t\t\tStringPool.BLANK);\n\n\t\t\t\t\tLocalizationUtil.setPreferencesValue(\n\t\t\t\t\t\tpreferences, \"fieldOptions\" + i, languageId,\n\t\t\t\t\t\tStringPool.BLANK);\n\t\t\t\t}\n\n\t\t\t\tpreferences.setValue(\"fieldType\" + i, StringPool.BLANK);\n\t\t\t\tpreferences.setValue(\"fieldOptional\" + i, StringPool.BLANK);\n\t\t\t\tpreferences.setValue(\n\t\t\t\t\t\"fieldValidationScript\" + i, StringPool.BLANK);\n\t\t\t\tpreferences.setValue(\n\t\t\t\t\t\"fieldValidationErrorMessage\" + i, StringPool.BLANK);\n\n\t\t\t\ti++;\n\n\t\t\t\tfieldLabel = LocalizationUtil.getPreferencesValue(\n\t\t\t\t\tpreferences, \"fieldLabel\" + i, defaultLanguageId);\n\t\t\t}\n\t\t}\n\n\t\tif (SessionErrors.isEmpty(actionRequest)) {\n\t\t\tpreferences.store();\n\n\t\t\tSessionMessages.add(\n\t\t\t\tactionRequest, portletConfig.getPortletName() + \".doConfigure\");\n\t\t}\n\t}","commit_id":"213fcbf32433a4ad39eb45535fd096ad05093e90","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public void serveResource(\n\t\tResourceRequest resourceRequest, ResourceResponse resourceResponse) {\n\n\t\tString cmd = ParamUtil.getString(resourceRequest, Constants.CMD);\n\n\t\ttry {\n\t\t\tif (cmd.equals(\"captcha\")) {\n\t\t\t\tserveCaptcha(resourceRequest, resourceResponse);\n\t\t\t}\n\t\t\telse if (cmd.equals(\"edit-field\")) {\n\t\t\t\teditField(resourceRequest, resourceResponse);\n\t\t\t}\n\t\t\telse if (cmd.equals(\"export\")) {\n\t\t\t\texportData(resourceRequest, resourceResponse);\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e, e);\n\t\t}\n\t}","id":2796,"modified_method":"public void serveResource(\n\t\tResourceRequest resourceRequest, ResourceResponse resourceResponse) {\n\n\t\tString cmd = ParamUtil.getString(resourceRequest, Constants.CMD);\n\n\t\ttry {\n\t\t\tif (cmd.equals(\"captcha\")) {\n\t\t\t\tserveCaptcha(resourceRequest, resourceResponse);\n\t\t\t}\n\t\t\telse if (cmd.equals(\"export\")) {\n\t\t\t\texportData(resourceRequest, resourceResponse);\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e, e);\n\t\t}\n\t}","commit_id":"213fcbf32433a4ad39eb45535fd096ad05093e90","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"protected void exportData(\n\t\t\tResourceRequest resourceRequest, ResourceResponse resourceResponse)\n\t\tthrows Exception {\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)resourceRequest.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tPortletPreferences preferences =\n\t\t\tPortletPreferencesFactoryUtil.getPortletSetup(resourceRequest);\n\n\t\tString databaseTableName = preferences.getValue(\n\t\t\t\"databaseTableName\", StringPool.BLANK);\n\t\tString title = preferences.getValue(\"title\", \"no-title\");\n\n\t\tStringBuilder sb = new StringBuilder();\n\n\t\tList<String> fieldLabels = new ArrayList<String>();\n\n\t\tfor (int i = 1; true; i++) {\n\t\t\tString fieldLabel = preferences.getValue(\n\t\t\t\t\"fieldLabel\" + i, StringPool.BLANK);\n\n\t\t\tif (Validator.isNull(fieldLabel)) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tfieldLabels.add(fieldLabel);\n\n\t\t\tsb.append(\"\\\"\");\n\t\t\tsb.append(fieldLabel.replaceAll(\"\\\"\", \"\\\\\\\"\"));\n\t\t\tsb.append(\"\\\";\");\n\t\t}\n\n\t\tsb.deleteCharAt(sb.length() - 1);\n\t\tsb.append(\"\\n\");\n\n\t\tif (Validator.isNotNull(databaseTableName)) {\n\t\t\tList<ExpandoRow> rows = ExpandoRowLocalServiceUtil.getRows(\n\t\t\t\tthemeDisplay.getCompanyId(), WebFormUtil.class.getName(),\n\t\t\t\tdatabaseTableName, QueryUtil.ALL_POS, QueryUtil.ALL_POS);\n\n\t\t\tfor (ExpandoRow row : rows) {\n\t\t\t\tfor (String fieldName : fieldLabels) {\n\t\t\t\t\tString data = ExpandoValueLocalServiceUtil.getData(\n\t\t\t\t\t\tthemeDisplay.getCompanyId(),\n\t\t\t\t\t\tWebFormUtil.class.getName(), databaseTableName,\n\t\t\t\t\t\tfieldName, row.getClassPK(), StringPool.BLANK);\n\n\t\t\t\t\tdata = data.replaceAll(\"\\\"\", \"\\\\\\\"\");\n\n\t\t\t\t\tsb.append(\"\\\"\");\n\t\t\t\t\tsb.append(data);\n\t\t\t\t\tsb.append(\"\\\";\");\n\t\t\t\t}\n\n\t\t\t\tsb.deleteCharAt(sb.length() - 1);\n\t\t\t\tsb.append(\"\\n\");\n\t\t\t}\n\t\t}\n\n\t\tString fileName = title + \".csv\";\n\t\tbyte[] bytes = sb.toString().getBytes();\n\t\tString contentType = ContentTypes.APPLICATION_TEXT;\n\n\t\tPortletResponseUtil.sendFile(\n\t\t\tresourceResponse, fileName, bytes, contentType);\n\t}","id":2797,"modified_method":"protected void exportData(\n\t\t\tResourceRequest resourceRequest, ResourceResponse resourceResponse)\n\t\tthrows Exception {\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)resourceRequest.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tString languageId = themeDisplay.getLanguageId();\n\n\t\tPortletPreferences preferences =\n\t\t\tPortletPreferencesFactoryUtil.getPortletSetup(resourceRequest);\n\n\t\tString databaseTableName = preferences.getValue(\n\t\t\t\"databaseTableName\", StringPool.BLANK);\n\t\tString title = preferences.getValue(\"title\", \"no-title\");\n\n\t\tStringBuilder sb = new StringBuilder();\n\n\t\tList<String> fieldLabels = new ArrayList<String>();\n\n\t\tfor (int i = 1; true; i++) {\n\t\t\tString fieldLabel = preferences.getValue(\n\t\t\t\t\"fieldLabel\" + i, StringPool.BLANK);\n\n\t\t\tString localizedfieldLabel = LocalizationUtil.getPreferencesValue(\n\t\t\t\tpreferences, \"fieldLabel\" + i, languageId);\n\n\t\t\tif (Validator.isNull(fieldLabel)) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tfieldLabels.add(fieldLabel);\n\n\t\t\tsb.append(\"\\\"\");\n\t\t\tsb.append(localizedfieldLabel.replaceAll(\"\\\"\", \"\\\\\\\"\"));\n\t\t\tsb.append(\"\\\";\");\n\t\t}\n\n\t\tsb.deleteCharAt(sb.length() - 1);\n\t\tsb.append(\"\\n\");\n\n\t\tif (Validator.isNotNull(databaseTableName)) {\n\t\t\tList<ExpandoRow> rows = ExpandoRowLocalServiceUtil.getRows(\n\t\t\t\tthemeDisplay.getCompanyId(), WebFormUtil.class.getName(),\n\t\t\t\tdatabaseTableName, QueryUtil.ALL_POS, QueryUtil.ALL_POS);\n\n\t\t\tfor (ExpandoRow row : rows) {\n\t\t\t\tfor (String fieldName : fieldLabels) {\n\t\t\t\t\tString data = ExpandoValueLocalServiceUtil.getData(\n\t\t\t\t\t\tthemeDisplay.getCompanyId(),\n\t\t\t\t\t\tWebFormUtil.class.getName(), databaseTableName,\n\t\t\t\t\t\tfieldName, row.getClassPK(), StringPool.BLANK);\n\n\t\t\t\t\tdata = data.replaceAll(\"\\\"\", \"\\\\\\\"\");\n\n\t\t\t\t\tsb.append(\"\\\"\");\n\t\t\t\t\tsb.append(data);\n\t\t\t\t\tsb.append(\"\\\";\");\n\t\t\t\t}\n\n\t\t\t\tsb.deleteCharAt(sb.length() - 1);\n\t\t\t\tsb.append(\"\\n\");\n\t\t\t}\n\t\t}\n\n\t\tString fileName = title + \".csv\";\n\t\tbyte[] bytes = sb.toString().getBytes();\n\t\tString contentType = ContentTypes.APPLICATION_TEXT;\n\n\t\tPortletResponseUtil.sendFile(\n\t\t\tresourceResponse, fileName, bytes, contentType);\n\t}","commit_id":"213fcbf32433a4ad39eb45535fd096ad05093e90","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"/**\n     * Private to ensure a singleton.\n     */\n    private SecurityDomainAdd() {\n        super(Capabilities.SECURITY_REALM_RUNTIME_CAPABILITY);\n    }","id":2798,"modified_method":"/**\n     * Private to ensure a singleton.\n     */\n    private SecurityDomainAdd() {\n    }","commit_id":"893bac43ed5ffb83c36cd2b02bcbff2213484ea9","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void launchServices(OperationContext context, String securityDomain, ModelNode model) throws OperationFailedException {\n        final ApplicationPolicy applicationPolicy = createApplicationPolicy(context, securityDomain, model);\n        final JSSESecurityDomain jsseSecurityDomain = createJSSESecurityDomain(context, securityDomain, model);\n        final String cacheType = getAuthenticationCacheType(model);\n        final boolean exportElytronRealm = SecurityDomainResourceDefinition.EXPORT_ELYTRON_REALM.resolveModelAttribute(context, model).asBoolean();\n\n        final SecurityDomainService securityDomainService = new SecurityDomainService(securityDomain,\n                applicationPolicy, jsseSecurityDomain, cacheType);\n        final ServiceTarget target = context.getServiceTarget();\n        // some login modules may require the TransactionManager\n        final Injector<TransactionManager> transactionManagerInjector = new Injector<TransactionManager>() {\n            public void inject(final TransactionManager value) throws InjectionException {\n                TransactionManagerLocator.setTransactionManager(value);\n            }\n\n            public void uninject() {\n            }\n        };\n        ServiceBuilder<SecurityDomainContext> builder = target\n                .addService(SecurityDomainService.SERVICE_NAME.append(securityDomain), securityDomainService)\n                .addDependency(SecurityManagementService.SERVICE_NAME, ISecurityManagement.class,\n                        securityDomainService.getSecurityManagementInjector())\n                .addDependency(JaasConfigurationService.SERVICE_NAME, Configuration.class,\n                        securityDomainService.getConfigurationInjector())\n                .addDependency(ServiceBuilder.DependencyType.OPTIONAL, ServiceName.JBOSS.append(\"txn\", \"TransactionManager\"), TransactionManager.class,\n                        transactionManagerInjector);\n\n        if (\"infinispan\".equals(cacheType)) {\n            builder.addDependency(CacheContainerServiceName.CACHE_CONTAINER.getServiceName(CACHE_CONTAINER_NAME),\n                    Object.class, securityDomainService.getCacheManagerInjector());\n        }\n        builder.setInitialMode(ServiceController.Mode.ACTIVE).install();\n\n        if (exportElytronRealm) {\n            final ServiceName realmServiceName = context.getCapabilityServiceName(Capabilities.SECURITY_REALM_CAPABILITY, securityDomain, SecurityRealm.class);\n            final DomainContextRealmService domainContextRealmService = new DomainContextRealmService();\n            target.addService(realmServiceName, domainContextRealmService)\n                    .addDependency(SecurityDomainService.SERVICE_NAME.append(securityDomain), SecurityDomainContext.class, domainContextRealmService.getSecurityDomainContextInjector())\n                    .setInitialMode(ServiceController.Mode.ACTIVE).install();\n        }\n    }","id":2799,"modified_method":"public void launchServices(OperationContext context, String securityDomain, ModelNode model) throws OperationFailedException {\n        final ApplicationPolicy applicationPolicy = createApplicationPolicy(context, securityDomain, model);\n        final JSSESecurityDomain jsseSecurityDomain = createJSSESecurityDomain(context, securityDomain, model);\n        final String cacheType = getAuthenticationCacheType(model);\n\n        final SecurityDomainService securityDomainService = new SecurityDomainService(securityDomain,\n                applicationPolicy, jsseSecurityDomain, cacheType);\n        final ServiceTarget target = context.getServiceTarget();\n        // some login modules may require the TransactionManager\n        final Injector<TransactionManager> transactionManagerInjector = new Injector<TransactionManager>() {\n            public void inject(final TransactionManager value) throws InjectionException {\n                TransactionManagerLocator.setTransactionManager(value);\n            }\n\n            public void uninject() {\n            }\n        };\n        ServiceBuilder<SecurityDomainContext> builder = target\n                .addService(SecurityDomainService.SERVICE_NAME.append(securityDomain), securityDomainService)\n                .addDependency(SecurityManagementService.SERVICE_NAME, ISecurityManagement.class,\n                        securityDomainService.getSecurityManagementInjector())\n                .addDependency(JaasConfigurationService.SERVICE_NAME, Configuration.class,\n                        securityDomainService.getConfigurationInjector())\n                .addDependency(ServiceBuilder.DependencyType.OPTIONAL, ServiceName.JBOSS.append(\"txn\", \"TransactionManager\"), TransactionManager.class,\n                        transactionManagerInjector);\n\n        if (\"infinispan\".equals(cacheType)) {\n            builder.addDependency(CacheContainerServiceName.CACHE_CONTAINER.getServiceName(CACHE_CONTAINER_NAME),\n                    Object.class, securityDomainService.getCacheManagerInjector());\n        }\n        builder.setInitialMode(ServiceController.Mode.ACTIVE).install();\n\n        final ModelNode elytronRealm = SecurityDomainResourceDefinition.EXPORT_ELYTRON_REALM.resolveModelAttribute(context, model);\n        if (elytronRealm.isDefined()) {\n            final ServiceName realmServiceName = context.getCapabilityServiceName(Capabilities.SECURITY_REALM_CAPABILITY, elytronRealm.asString(), SecurityRealm.class);\n            final DomainContextRealmService domainContextRealmService = new DomainContextRealmService();\n            target.addService(realmServiceName, domainContextRealmService)\n                    .addDependency(SecurityDomainService.SERVICE_NAME.append(securityDomain), SecurityDomainContext.class, domainContextRealmService.getSecurityDomainContextInjector())\n                    .setInitialMode(ServiceController.Mode.ACTIVE).install();\n        }\n    }","commit_id":"893bac43ed5ffb83c36cd2b02bcbff2213484ea9","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void testTransformers(ModelTestControllerVersion controllerVersion) throws Exception {\n\n        KernelServicesBuilder builder = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT);\n        ModelVersion version = ModelVersion.create(1, 3, 0);\n        builder.createLegacyKernelServicesBuilder(AdditionalInitialization.MANAGEMENT, controllerVersion, version)\n                .addMavenResourceURL(\"org.jboss.as:jboss-as-security:\" + controllerVersion.getMavenGavVersion());\n\n        KernelServices mainServices = builder.build();\n        assertTrue(mainServices.isSuccessfulBoot());\n        KernelServices legacyServices = mainServices.getLegacyServices(version);\n        assertNotNull(legacyServices);\n        assertTrue(legacyServices.isSuccessfulBoot());\n\n        // the elytron domain should be rejected because it has defined the export-elytron-realm attribute as true.\n        PathAddress domainAddress = PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, getMainSubsystemName()), PathElement.pathElement(Constants.SECURITY_DOMAIN, \"elytron\"));\n        ModelTestUtils.checkFailedTransformedBootOperations(mainServices, version,\n                builder.parseXmlResource(\"securitysubsystemv20.xml\"),\n                new FailedOperationTransformationConfig()\n                        .addFailedAttribute(PathAddress.pathAddress(domainAddress),\n                                FailedOperationTransformationConfig.REJECTED_RESOURCE));\n\n        // we should not get any errors for the other2 domain - the export-elytron-realm attribute has been set to false,\n        // making it compatible with older versions of the model.\n    }","id":2800,"modified_method":"private void testTransformers(ModelTestControllerVersion controllerVersion) throws Exception {\n\n        KernelServicesBuilder builder = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT);\n        ModelVersion version = ModelVersion.create(1, 3, 0);\n        builder.createLegacyKernelServicesBuilder(AdditionalInitialization.MANAGEMENT, controllerVersion, version)\n                .addMavenResourceURL(\"org.jboss.as:jboss-as-security:\" + controllerVersion.getMavenGavVersion());\n\n        KernelServices mainServices = builder.build();\n        assertTrue(mainServices.isSuccessfulBoot());\n        KernelServices legacyServices = mainServices.getLegacyServices(version);\n        assertNotNull(legacyServices);\n        assertTrue(legacyServices.isSuccessfulBoot());\n\n        // the elytron domain should be rejected because it has defined the export-elytron-realm attribute as true.\n        PathAddress domainAddress = PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, getMainSubsystemName()), PathElement.pathElement(Constants.SECURITY_DOMAIN, \"legacy-domain\"));\n        ModelTestUtils.checkFailedTransformedBootOperations(mainServices, version,\n                builder.parseXmlResource(\"securitysubsystemv20.xml\"),\n                new FailedOperationTransformationConfig()\n                        .addFailedAttribute(PathAddress.pathAddress(domainAddress),\n                                FailedOperationTransformationConfig.REJECTED_RESOURCE));\n    }","commit_id":"893bac43ed5ffb83c36cd2b02bcbff2213484ea9","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void removeServices(final OperationContext context, final ServiceName parentService, final ModelNode parentModel) throws OperationFailedException {\n        super.removeServices(context, parentService, parentModel);\n        // make sure the security realm service is also removed.\n        ServiceName serviceName = Capabilities.SECURITY_REALM_RUNTIME_CAPABILITY.getCapabilityServiceName(parentService.getSimpleName());\n        context.removeService(serviceName);\n    }","id":2801,"modified_method":"@Override\n    protected void removeServices(final OperationContext context, final ServiceName parentService, final ModelNode parentModel) throws OperationFailedException {\n        super.removeServices(context, parentService, parentModel);\n        // make sure the security realm service is also removed.\n        ModelNode elytronRealm = SecurityDomainResourceDefinition.EXPORT_ELYTRON_REALM.resolveModelAttribute(context, parentModel);\n        if (elytronRealm.isDefined()) {\n            ServiceName serviceName = Capabilities.SECURITY_REALM_RUNTIME_CAPABILITY.getCapabilityServiceName(elytronRealm.asString());\n            context.removeService(serviceName);\n        }\n    }","commit_id":"893bac43ed5ffb83c36cd2b02bcbff2213484ea9","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void removeServices(final OperationContext context, final ServiceName parentService, final ModelNode parentModel) throws OperationFailedException {\n        super.removeServices(context, parentService, parentModel);\n        // make sure the security realm service is also removed.\n        ServiceName serviceName = Capabilities.SECURITY_REALM_RUNTIME_CAPABILITY.getCapabilityServiceName(parentService.getSimpleName());\n        context.removeService(serviceName);\n    }","id":2802,"modified_method":"@Override\n    protected void removeServices(final OperationContext context, final ServiceName parentService, final ModelNode parentModel) throws OperationFailedException {\n        super.removeServices(context, parentService, parentModel);\n        // make sure the security realm service is also removed.\n        ModelNode elytronRealm = SecurityDomainResourceDefinition.EXPORT_ELYTRON_REALM.resolveModelAttribute(context, parentModel);\n        if (elytronRealm.isDefined()) {\n            ServiceName serviceName = Capabilities.SECURITY_REALM_RUNTIME_CAPABILITY.getCapabilityServiceName(elytronRealm.asString());\n            context.removeService(serviceName);\n        }\n    }","commit_id":"893bac43ed5ffb83c36cd2b02bcbff2213484ea9","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void removeServices(final OperationContext context, final ServiceName parentService, final ModelNode parentModel) throws OperationFailedException {\n        super.removeServices(context, parentService, parentModel);\n        // make sure the security realm service is also removed.\n        ServiceName serviceName = Capabilities.SECURITY_REALM_RUNTIME_CAPABILITY.getCapabilityServiceName(parentService.getSimpleName());\n        context.removeService(serviceName);\n    }","id":2803,"modified_method":"@Override\n    protected void removeServices(final OperationContext context, final ServiceName parentService, final ModelNode parentModel) throws OperationFailedException {\n        super.removeServices(context, parentService, parentModel);\n        // make sure the security realm service is also removed.\n        ModelNode elytronRealm = SecurityDomainResourceDefinition.EXPORT_ELYTRON_REALM.resolveModelAttribute(context, parentModel);\n        if (elytronRealm.isDefined()) {\n            ServiceName serviceName = Capabilities.SECURITY_REALM_RUNTIME_CAPABILITY.getCapabilityServiceName(elytronRealm.asString());\n            context.removeService(serviceName);\n        }\n    }","commit_id":"893bac43ed5ffb83c36cd2b02bcbff2213484ea9","url":"https://github.com/wildfly/wildfly"},{"original_method":"SecurityDomainResourceDefinition(boolean registerRuntimeOnly) {\n        super(SecurityExtension.SECURITY_DOMAIN_PATH,\n                SecurityExtension.getResourceDescriptionResolver(Constants.SECURITY_DOMAIN), SecurityDomainAdd.INSTANCE,\n                new ServiceRemoveStepHandler(SecurityDomainService.SERVICE_NAME, SecurityDomainAdd.INSTANCE, Capabilities.SECURITY_REALM_RUNTIME_CAPABILITY));\n        this.registerRuntimeOnly = registerRuntimeOnly;\n        ApplicationTypeConfig atc = new ApplicationTypeConfig(SecurityExtension.SUBSYSTEM_NAME, Constants.SECURITY_DOMAIN);\n        AccessConstraintDefinition acd = new ApplicationTypeAccessConstraintDefinition(atc);\n        this.accessConstraints = Arrays.asList(SensitiveTargetAccessConstraintDefinition.SECURITY_DOMAIN, acd);\n        setDeprecated(SecurityExtension.DEPRECATED_SINCE);\n    }","id":2804,"modified_method":"SecurityDomainResourceDefinition(boolean registerRuntimeOnly) {\n        super(SecurityExtension.SECURITY_DOMAIN_PATH,\n                SecurityExtension.getResourceDescriptionResolver(Constants.SECURITY_DOMAIN), SecurityDomainAdd.INSTANCE,\n                new SecurityDomainRemove(SecurityDomainService.SERVICE_NAME, SecurityDomainAdd.INSTANCE));\n        this.registerRuntimeOnly = registerRuntimeOnly;\n        ApplicationTypeConfig atc = new ApplicationTypeConfig(SecurityExtension.SUBSYSTEM_NAME, Constants.SECURITY_DOMAIN);\n        AccessConstraintDefinition acd = new ApplicationTypeAccessConstraintDefinition(atc);\n        this.accessConstraints = Arrays.asList(SensitiveTargetAccessConstraintDefinition.SECURITY_DOMAIN, acd);\n        setDeprecated(SecurityExtension.DEPRECATED_SINCE);\n    }","commit_id":"893bac43ed5ffb83c36cd2b02bcbff2213484ea9","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void registerAttributes(final ManagementResourceRegistration resourceRegistration) {\n        SecurityDomainReloadWriteHandler handler = new SecurityDomainReloadWriteHandler(ATTRIBUTES);\n        for (AttributeDefinition attribute : ATTRIBUTES)\n            resourceRegistration.registerReadWriteAttribute(attribute, null, handler);\n    }","id":2805,"modified_method":"@Override\n    public void registerAttributes(final ManagementResourceRegistration resourceRegistration) {\n        resourceRegistration.registerReadWriteAttribute(CACHE_TYPE, null, new SecurityDomainReloadWriteHandler());\n        resourceRegistration.registerReadWriteAttribute(EXPORT_ELYTRON_REALM, null, new ReloadRequiredWriteAttributeHandler());\n    }","commit_id":"893bac43ed5ffb83c36cd2b02bcbff2213484ea9","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void registerTransformers_1_3_0(SubsystemRegistration subsystemRegistration) {\n        // earlier versions of the model didn't have the export-elytron-realm attribute, but the subsystem behavior is\n        // fully compatible if this attribute is left undefined or if its set to false.\n        ResourceTransformationDescriptionBuilder builder = TransformationDescriptionBuilder.Factory.createSubsystemInstance();\n        ResourceTransformationDescriptionBuilder securityDomain = builder.addChildResource(SECURITY_DOMAIN_PATH);\n        securityDomain.getAttributeBuilder().setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(false, true, new ModelNode(false)),\n                SecurityDomainResourceDefinition.EXPORT_ELYTRON_REALM)\n                .addRejectCheck(RejectAttributeChecker.DEFINED, SecurityDomainResourceDefinition.EXPORT_ELYTRON_REALM)\n                .end();\n\n        TransformationDescription.Tools.register(builder.build(), subsystemRegistration, ModelVersion.create(1, 3, 0));\n\n    }","id":2806,"modified_method":"private void registerTransformers_1_3_0(SubsystemRegistration subsystemRegistration) {\n        // earlier versions of the model didn't have the export-elytron-realm attribute, but the subsystem behavior is\n        // fully compatible if this attribute is left undefined or if its set to false.\n        ResourceTransformationDescriptionBuilder builder = TransformationDescriptionBuilder.Factory.createSubsystemInstance();\n        ResourceTransformationDescriptionBuilder securityDomain = builder.addChildResource(SECURITY_DOMAIN_PATH);\n        securityDomain.getAttributeBuilder()\n                .addRejectCheck(RejectAttributeChecker.DEFINED, SecurityDomainResourceDefinition.EXPORT_ELYTRON_REALM)\n                .end();\n\n        TransformationDescription.Tools.register(builder.build(), subsystemRegistration, ModelVersion.create(1, 3, 0));\n\n    }","commit_id":"893bac43ed5ffb83c36cd2b02bcbff2213484ea9","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void registerTransformers_1_1_0(SubsystemRegistration subsystemRegistration) {\n        final ResourceTransformationDescriptionBuilder builder = TransformationDescriptionBuilder.Factory.createSubsystemInstance();\n        builder.getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS, SecuritySubsystemRootResourceDefinition.DEEP_COPY_SUBJECT_MODE);\n        final ResourceTransformationDescriptionBuilder securityDomain = builder.addChildResource(SECURITY_DOMAIN_PATH);\n        securityDomain.getAttributeBuilder().setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(false, true, new ModelNode(false)),\n                            SecurityDomainResourceDefinition.EXPORT_ELYTRON_REALM)\n                .addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS, SecurityDomainResourceDefinition.CACHE_TYPE)\n                .addRejectCheck(RejectAttributeChecker.DEFINED, SecurityDomainResourceDefinition.EXPORT_ELYTRON_REALM)\n                .end();\n\n        final ModulesToAttributeTransformer authClassicLoginModule = new ModulesToAttributeTransformer(Constants.LOGIN_MODULE, Constants.LOGIN_MODULES);\n        registerModuleTransformer(securityDomain, PATH_CLASSIC_AUTHENTICATION, authClassicLoginModule,\n                ChildResourceTransformersRegistrar.createBuilder()\n                .addRejectExpressions(Constants.FLAG, Constants.MODULE_OPTIONS)\n                .build());\n\n        final ModulesToAttributeTransformer policyModule = new ModulesToAttributeTransformer(Constants.POLICY_MODULE, Constants.POLICY_MODULES);\n        registerModuleTransformer(securityDomain, PATH_AUTHORIZATION_CLASSIC, policyModule,\n                ChildResourceTransformersRegistrar.createBuilder()\n                .addRejectExpressions(Constants.FLAG, Constants.MODULE_OPTIONS)\n                .build());\n\n        final ModulesToAttributeTransformer mappingModule = new ModulesToAttributeTransformer(Constants.MAPPING_MODULE, Constants.MAPPING_MODULES);\n        registerModuleTransformer(securityDomain, PATH_MAPPING_CLASSIC, mappingModule,\n                ChildResourceTransformersRegistrar.createBuilder()\n                .addRejectExpressions(Constants.TYPE, Constants.MODULE_OPTIONS)\n                .build());\n\n        final ModulesToAttributeTransformer providerModule = new ModulesToAttributeTransformer(Constants.PROVIDER_MODULE, Constants.PROVIDER_MODULES);\n        registerModuleTransformer(securityDomain, PATH_AUDIT_CLASSIC, providerModule,\n                ChildResourceTransformersRegistrar.createBuilder()\n                .addRejectExpressions(Constants.MODULE_OPTIONS)\n                .build());\n\n        final ModulesToAttributeTransformer identityTrustModule = new ModulesToAttributeTransformer(Constants.TRUST_MODULE, Constants.TRUST_MODULES);\n        registerModuleTransformer(securityDomain, PATH_IDENTITY_TRUST_CLASSIC, identityTrustModule,\n                ChildResourceTransformersRegistrar.createBuilder()\n                .addRejectExpressions(Constants.FLAG, Constants.MODULE_OPTIONS)\n                .build());\n\n        final ModulesToAttributeTransformer aclModule = new ModulesToAttributeTransformer(Constants.ACL_MODULE, Constants.ACL_MODULES);\n        registerModuleTransformer(securityDomain, ACL_PATH, aclModule,\n                ChildResourceTransformersRegistrar.createBuilder()\n                .addRejectExpressions(Constants.FLAG, Constants.MODULE_OPTIONS)\n                .build());\n\n        final ModulesToAttributeTransformer authModule = new JaspiModulesToAttributeTransformer(Constants.AUTH_MODULE, Constants.AUTH_MODULES);\n        ResourceTransformationDescriptionBuilder jaspiReg = registerModuleTransformer(securityDomain, PATH_JASPI_AUTH, authModule,\n                ChildResourceTransformersRegistrar.createBuilder()\n                .addRejectExpressions(Constants.FLAG, Constants.MODULE_OPTIONS)\n                .addRejectIfDefined(Constants.MODULE)\n                .build());\n\n        final ModulesToAttributeTransformer authLoginModule = new JaspiModulesToAttributeTransformer(Constants.LOGIN_MODULE, Constants.LOGIN_MODULES);\n        registerModuleTransformer(jaspiReg, PATH_LOGIN_MODULE_STACK, authLoginModule, null);\n\n        //reject expressions\n        builder.addChildResource(VAULT_PATH).getAttributeBuilder()\n                .addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS, VaultResourceDefinition.OPTIONS)\n                .end();\n        securityDomain.addChildResource(JSSE_PATH).getAttributeBuilder()\n                .addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS, JSSEResourceDefinition.ADDITIONAL_PROPERTIES)\n                .end();\n\n        TransformationDescription.Tools.register(builder.build(), subsystemRegistration, ModelVersion.create(1, 1, 0));\n    }","id":2807,"modified_method":"private void registerTransformers_1_1_0(SubsystemRegistration subsystemRegistration) {\n        final ResourceTransformationDescriptionBuilder builder = TransformationDescriptionBuilder.Factory.createSubsystemInstance();\n        builder.getAttributeBuilder().addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS, SecuritySubsystemRootResourceDefinition.DEEP_COPY_SUBJECT_MODE);\n        final ResourceTransformationDescriptionBuilder securityDomain = builder.addChildResource(SECURITY_DOMAIN_PATH);\n        securityDomain.getAttributeBuilder()\n                .addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS, SecurityDomainResourceDefinition.CACHE_TYPE)\n                .addRejectCheck(RejectAttributeChecker.DEFINED, SecurityDomainResourceDefinition.EXPORT_ELYTRON_REALM)\n                .end();\n\n        final ModulesToAttributeTransformer authClassicLoginModule = new ModulesToAttributeTransformer(Constants.LOGIN_MODULE, Constants.LOGIN_MODULES);\n        registerModuleTransformer(securityDomain, PATH_CLASSIC_AUTHENTICATION, authClassicLoginModule,\n                ChildResourceTransformersRegistrar.createBuilder()\n                .addRejectExpressions(Constants.FLAG, Constants.MODULE_OPTIONS)\n                .build());\n\n        final ModulesToAttributeTransformer policyModule = new ModulesToAttributeTransformer(Constants.POLICY_MODULE, Constants.POLICY_MODULES);\n        registerModuleTransformer(securityDomain, PATH_AUTHORIZATION_CLASSIC, policyModule,\n                ChildResourceTransformersRegistrar.createBuilder()\n                .addRejectExpressions(Constants.FLAG, Constants.MODULE_OPTIONS)\n                .build());\n\n        final ModulesToAttributeTransformer mappingModule = new ModulesToAttributeTransformer(Constants.MAPPING_MODULE, Constants.MAPPING_MODULES);\n        registerModuleTransformer(securityDomain, PATH_MAPPING_CLASSIC, mappingModule,\n                ChildResourceTransformersRegistrar.createBuilder()\n                .addRejectExpressions(Constants.TYPE, Constants.MODULE_OPTIONS)\n                .build());\n\n        final ModulesToAttributeTransformer providerModule = new ModulesToAttributeTransformer(Constants.PROVIDER_MODULE, Constants.PROVIDER_MODULES);\n        registerModuleTransformer(securityDomain, PATH_AUDIT_CLASSIC, providerModule,\n                ChildResourceTransformersRegistrar.createBuilder()\n                .addRejectExpressions(Constants.MODULE_OPTIONS)\n                .build());\n\n        final ModulesToAttributeTransformer identityTrustModule = new ModulesToAttributeTransformer(Constants.TRUST_MODULE, Constants.TRUST_MODULES);\n        registerModuleTransformer(securityDomain, PATH_IDENTITY_TRUST_CLASSIC, identityTrustModule,\n                ChildResourceTransformersRegistrar.createBuilder()\n                .addRejectExpressions(Constants.FLAG, Constants.MODULE_OPTIONS)\n                .build());\n\n        final ModulesToAttributeTransformer aclModule = new ModulesToAttributeTransformer(Constants.ACL_MODULE, Constants.ACL_MODULES);\n        registerModuleTransformer(securityDomain, ACL_PATH, aclModule,\n                ChildResourceTransformersRegistrar.createBuilder()\n                .addRejectExpressions(Constants.FLAG, Constants.MODULE_OPTIONS)\n                .build());\n\n        final ModulesToAttributeTransformer authModule = new JaspiModulesToAttributeTransformer(Constants.AUTH_MODULE, Constants.AUTH_MODULES);\n        ResourceTransformationDescriptionBuilder jaspiReg = registerModuleTransformer(securityDomain, PATH_JASPI_AUTH, authModule,\n                ChildResourceTransformersRegistrar.createBuilder()\n                .addRejectExpressions(Constants.FLAG, Constants.MODULE_OPTIONS)\n                .addRejectIfDefined(Constants.MODULE)\n                .build());\n\n        final ModulesToAttributeTransformer authLoginModule = new JaspiModulesToAttributeTransformer(Constants.LOGIN_MODULE, Constants.LOGIN_MODULES);\n        registerModuleTransformer(jaspiReg, PATH_LOGIN_MODULE_STACK, authLoginModule, null);\n\n        //reject expressions\n        builder.addChildResource(VAULT_PATH).getAttributeBuilder()\n                .addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS, VaultResourceDefinition.OPTIONS)\n                .end();\n        securityDomain.addChildResource(JSSE_PATH).getAttributeBuilder()\n                .addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS, JSSEResourceDefinition.ADDITIONAL_PROPERTIES)\n                .end();\n\n        TransformationDescription.Tools.register(builder.build(), subsystemRegistration, ModelVersion.create(1, 1, 0));\n    }","commit_id":"893bac43ed5ffb83c36cd2b02bcbff2213484ea9","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void registerTransformers_1_2_0(SubsystemRegistration subsystemRegistration) {\n        ResourceTransformationDescriptionBuilder builder = TransformationDescriptionBuilder.Factory.createSubsystemInstance();\n\n        ResourceTransformationDescriptionBuilder securityDomain = builder.addChildResource(SECURITY_DOMAIN_PATH);\n        securityDomain.getAttributeBuilder().setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(false, true, new ModelNode(false)),\n                SecurityDomainResourceDefinition.EXPORT_ELYTRON_REALM)\n                .addRejectCheck(RejectAttributeChecker.DEFINED, SecurityDomainResourceDefinition.EXPORT_ELYTRON_REALM)\n                .end();\n\n        // Transform any add op that includes the module list attribute into a compsosite of an add w/o that + write-attribute\n        AttributeToModulesTransformer loginModule = new AttributeToModulesTransformer(Constants.LOGIN_MODULES);\n        registerModuleTransformer(securityDomain, PATH_CLASSIC_AUTHENTICATION, loginModule);\n        AttributeToModulesTransformer policyModule = new AttributeToModulesTransformer(Constants.POLICY_MODULES);\n        registerModuleTransformer(securityDomain, PATH_AUTHORIZATION_CLASSIC, policyModule);\n        AttributeToModulesTransformer mappingModule = new AttributeToModulesTransformer(Constants.MAPPING_MODULES);\n        registerModuleTransformer(securityDomain, PATH_MAPPING_CLASSIC, mappingModule);\n        AttributeToModulesTransformer providerModule = new AttributeToModulesTransformer(Constants.PROVIDER_MODULES);\n        registerModuleTransformer(securityDomain, PATH_AUDIT_CLASSIC, providerModule);\n        final AttributeToModulesTransformer identityTrustModule = new AttributeToModulesTransformer(Constants.TRUST_MODULES);\n        registerModuleTransformer(securityDomain, PATH_IDENTITY_TRUST_CLASSIC, identityTrustModule);\n        final AttributeToModulesTransformer aclModule = new AttributeToModulesTransformer(Constants.ACL_MODULES);\n        ResourceTransformationDescriptionBuilder aclBuilder = registerModuleTransformer(securityDomain, ACL_PATH, aclModule);\n        //https://issues.jboss.org/browse/WFLY-2474 acl-module was wrongly called login-module in 7.2.0\n        aclBuilder.addChildRedirection(PathElement.pathElement(Constants.ACL_MODULE), PathElement.pathElement(Constants.LOGIN_MODULE));\n\n        AttributeToModulesTransformer authModule = new AttributeToModulesTransformer(Constants.AUTH_MODULES);\n        ResourceTransformationDescriptionBuilder jaspiReg = registerModuleTransformer(securityDomain, PATH_JASPI_AUTH, authModule);\n\n        // the module attribute is not recognized in the 1.2.0 version of the subsystem.\n        jaspiReg.addChildResource(PathElement.pathElement(Constants.AUTH_MODULE)).getAttributeBuilder()\n                .addRejectCheck(RejectAttributeChecker.DEFINED, Constants.MODULE)\n                .end();\n\n        registerModuleTransformer(jaspiReg, PATH_LOGIN_MODULE_STACK, loginModule);\n\n        TransformationDescription.Tools.register(builder.build(), subsystemRegistration, ModelVersion.create(1, 2, 0));\n    }","id":2808,"modified_method":"private void registerTransformers_1_2_0(SubsystemRegistration subsystemRegistration) {\n        ResourceTransformationDescriptionBuilder builder = TransformationDescriptionBuilder.Factory.createSubsystemInstance();\n\n        ResourceTransformationDescriptionBuilder securityDomain = builder.addChildResource(SECURITY_DOMAIN_PATH);\n        securityDomain.getAttributeBuilder()\n                .addRejectCheck(RejectAttributeChecker.DEFINED, SecurityDomainResourceDefinition.EXPORT_ELYTRON_REALM)\n                .end();\n\n        // Transform any add op that includes the module list attribute into a compsosite of an add w/o that + write-attribute\n        AttributeToModulesTransformer loginModule = new AttributeToModulesTransformer(Constants.LOGIN_MODULES);\n        registerModuleTransformer(securityDomain, PATH_CLASSIC_AUTHENTICATION, loginModule);\n        AttributeToModulesTransformer policyModule = new AttributeToModulesTransformer(Constants.POLICY_MODULES);\n        registerModuleTransformer(securityDomain, PATH_AUTHORIZATION_CLASSIC, policyModule);\n        AttributeToModulesTransformer mappingModule = new AttributeToModulesTransformer(Constants.MAPPING_MODULES);\n        registerModuleTransformer(securityDomain, PATH_MAPPING_CLASSIC, mappingModule);\n        AttributeToModulesTransformer providerModule = new AttributeToModulesTransformer(Constants.PROVIDER_MODULES);\n        registerModuleTransformer(securityDomain, PATH_AUDIT_CLASSIC, providerModule);\n        final AttributeToModulesTransformer identityTrustModule = new AttributeToModulesTransformer(Constants.TRUST_MODULES);\n        registerModuleTransformer(securityDomain, PATH_IDENTITY_TRUST_CLASSIC, identityTrustModule);\n        final AttributeToModulesTransformer aclModule = new AttributeToModulesTransformer(Constants.ACL_MODULES);\n        ResourceTransformationDescriptionBuilder aclBuilder = registerModuleTransformer(securityDomain, ACL_PATH, aclModule);\n        //https://issues.jboss.org/browse/WFLY-2474 acl-module was wrongly called login-module in 7.2.0\n        aclBuilder.addChildRedirection(PathElement.pathElement(Constants.ACL_MODULE), PathElement.pathElement(Constants.LOGIN_MODULE));\n\n        AttributeToModulesTransformer authModule = new AttributeToModulesTransformer(Constants.AUTH_MODULES);\n        ResourceTransformationDescriptionBuilder jaspiReg = registerModuleTransformer(securityDomain, PATH_JASPI_AUTH, authModule);\n\n        // the module attribute is not recognized in the 1.2.0 version of the subsystem.\n        jaspiReg.addChildResource(PathElement.pathElement(Constants.AUTH_MODULE)).getAttributeBuilder()\n                .addRejectCheck(RejectAttributeChecker.DEFINED, Constants.MODULE)\n                .end();\n\n        registerModuleTransformer(jaspiReg, PATH_LOGIN_MODULE_STACK, loginModule);\n\n        TransformationDescription.Tools.register(builder.build(), subsystemRegistration, ModelVersion.create(1, 2, 0));\n    }","commit_id":"893bac43ed5ffb83c36cd2b02bcbff2213484ea9","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void addJAXRSPackages(List<String> packageNames, String mountPoint) {\n        // We don't want absolute URIs at this point\n        mountPoint = ensureRelativeUri(mountPoint);\n\n        // Trim any trailing slash to keep Jetty happy\n        mountPoint = trimTrailingSlash(mountPoint);\n\n        ServletContainer container = new NeoServletContainer(server);\n        ServletHolder servletHolder = new ServletHolder(container);\n        servletHolder.setInitParameter(\"com.sun.jersey.config.property.packages\", toCommaSeparatedList(packageNames));\n        servletHolder.setInitParameter(ResourceConfig.PROPERTY_CONTAINER_RESPONSE_FILTERS, AllowAjaxFilter.class.getName());\n        log.info(\"Adding JAXRS package %s at [%s]\", packageNames, mountPoint);\n        jaxRSPackages.put(mountPoint, servletHolder);\n    }","id":2809,"modified_method":"public void addJAXRSPackages(List<String> packageNames, String mountPoint) {\n        // We don't want absolute URIs at this point\n        mountPoint = ensureRelativeUri(mountPoint);\n\n        // Trim any trailing slash to keep Jetty happy\n        mountPoint = trimTrailingSlash(mountPoint);\n\n        ServletContainer container = new NeoServletContainer(server, server.getInjectables( packageNames ) );\n        ServletHolder servletHolder = new ServletHolder(container);\n        servletHolder.setInitParameter(\"com.sun.jersey.config.property.packages\", toCommaSeparatedList(packageNames));\n        servletHolder.setInitParameter(ResourceConfig.PROPERTY_CONTAINER_RESPONSE_FILTERS, AllowAjaxFilter.class.getName());\n        log.info(\"Adding JAXRS package %s at [%s]\", packageNames, mountPoint);\n        jaxRSPackages.put(mountPoint, servletHolder);\n    }","commit_id":"50615302ebceba6f0a094604f3d410c1e1b1affd","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void start() {\n        // Start at the bottom of the stack and work upwards to the Web container\n        startupHealthCheck();\n        validateConfiguration();\n        \n        startDatabase();\n\n        registerServerModules();\n        startModules();\n        \n        startWebServer();\n    }","id":2810,"modified_method":"@Override\n    public void start() {\n        // Start at the bottom of the stack and work upwards to the Web container\n        startupHealthCheck();\n        validateConfiguration();\n        \n        startDatabase();\n\n        startExtensionInitialization();\n\n        registerServerModules();\n        startModules();\n        \n        startWebServer();\n    }","commit_id":"50615302ebceba6f0a094604f3d410c1e1b1affd","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void stopModules() {\n        for(ServerModule module : serverModules) {\n            module.stop();\n        }\n    }","id":2811,"modified_method":"private void stopModules() {\n        for(ServerModule module : serverModules) {\n\n            try{\n                module.stop();\n            }\n            catch(Exception e)\n            {\n               log.error( e );\n            }\n        }\n    }","commit_id":"50615302ebceba6f0a094604f3d410c1e1b1affd","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void stop() {\n        try {\n            stopModules();\n            stopDatabase();\n            stopWebServer();\n            log.info(\"Successfully shutdown Neo Server on port [%d], database [%s]\", getWebServerPort(), getDatabase().getLocation());\n        } catch (Exception e) {\n            log.warn(\"Failed to cleanly shutdown Neo Server on port [%d], database [%s]. Reason: %s\", getWebServerPort(), getDatabase().getLocation(),\n                    e.getMessage());\n        }\n    }","id":2812,"modified_method":"@Override\n    public void stop() {\n        try {\n            stopModules();\n            stopExtensionInitializers();\n            stopDatabase();\n            stopWebServer();\n            log.info(\"Successfully shutdown Neo Server on port [%d], database [%s]\", getWebServerPort(), getDatabase().getLocation());\n        } catch (Exception e) {\n            log.warn(\"Failed to cleanly shutdown Neo Server on port [%d], database [%s]. Reason: %s\", getWebServerPort(), getDatabase().getLocation(),\n                    e.getMessage());\n        }\n    }","commit_id":"50615302ebceba6f0a094604f3d410c1e1b1affd","url":"https://github.com/neo4j/neo4j"},{"original_method":"public NeoServletContainer(NeoServer server) {\n        this.server = server;\n    }","id":2813,"modified_method":"public NeoServletContainer( NeoServer server, Collection<Injectable<?>> injectables ) {\n        this.server = server;\n        this.injectables = injectables;\n    }","commit_id":"50615302ebceba6f0a094604f3d410c1e1b1affd","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    protected void configure(WebConfig wc, ResourceConfig rc, WebApplication wa) {\n        super.configure(wc, rc, wa);\n\n        rc.getSingletons().add(new DatabaseProvider(server.getDatabase()));\n        rc.getSingletons().add(new GraphDatabaseServiceProvider(server.getDatabase().graph));\n        rc.getSingletons().add(new NeoServerProvider(server));\n        rc.getSingletons().add(new ConfigurationProvider(server.getConfiguration()));\n        if(server.getDatabase().rrdDb() != null) {\n            rc.getSingletons().add(new RrdDbProvider(server.getDatabase().rrdDb()));\n        }\n        RepresentationFormatRepository repository = new RepresentationFormatRepository(server.getExtensionManager());\n        rc.getSingletons().add(new InputFormatProvider(repository));\n        rc.getSingletons().add(new OutputFormatProvider(repository));\n        rc.getSingletons().add(new PluginInvocatorProvider(server.getExtensionManager()));\n    }","id":2814,"modified_method":"@Override\n    protected void configure(WebConfig wc, ResourceConfig rc, WebApplication wa) {\n        super.configure(wc, rc, wa);\n\n        Set<Object> singletons = rc.getSingletons();\n        singletons.add( new DatabaseProvider( server.getDatabase() ) );\n        singletons.add( new GraphDatabaseServiceProvider( server.getDatabase().graph ) );\n        singletons.add( new NeoServerProvider( server ) );\n        singletons.add( new ConfigurationProvider( server.getConfiguration() ) );\n        if(server.getDatabase().rrdDb() != null) {\n            singletons.add( new RrdDbProvider( server.getDatabase().rrdDb() ) );\n        }\n        RepresentationFormatRepository repository = new RepresentationFormatRepository(server.getExtensionManager());\n        singletons.add( new InputFormatProvider( repository ) );\n        singletons.add( new OutputFormatProvider( repository ) );\n        singletons.add( new PluginInvocatorProvider( server.getExtensionManager() ) );\n\n        for ( final Injectable injectable : injectables )\n        {\n            singletons.add( new InjectableWrapper( injectable ) );\n        }\n    }","commit_id":"50615302ebceba6f0a094604f3d410c1e1b1affd","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void addJAXRSPackages(List<String> packageNames, String mountPoint) {\n        // We don't want absolute URIs at this point\n        mountPoint = ensureRelativeUri(mountPoint);\n\n        // Trim any trailing slash to keep Jetty happy\n        mountPoint = trimTrailingSlash(mountPoint);\n\n        ServletContainer container = new NeoServletContainer(server);\n        ServletHolder servletHolder = new ServletHolder(container);\n        servletHolder.setInitParameter(\"com.sun.jersey.config.property.packages\", toCommaSeparatedList(packageNames));\n        servletHolder.setInitParameter(ResourceConfig.PROPERTY_CONTAINER_RESPONSE_FILTERS, AllowAjaxFilter.class.getName());\n        log.info(\"Adding JAXRS package %s at [%s]\", packageNames, mountPoint);\n        jaxRSPackages.put(mountPoint, servletHolder);\n    }","id":2815,"modified_method":"public void addJAXRSPackages(List<String> packageNames, String mountPoint) {\n        // We don't want absolute URIs at this point\n        mountPoint = ensureRelativeUri(mountPoint);\n\n        // Trim any trailing slash to keep Jetty happy\n        mountPoint = trimTrailingSlash(mountPoint);\n\n        ServletContainer container = new NeoServletContainer(server, server.getInjectables( packageNames ) );\n        ServletHolder servletHolder = new ServletHolder(container);\n        servletHolder.setInitParameter(\"com.sun.jersey.config.property.packages\", toCommaSeparatedList(packageNames));\n        servletHolder.setInitParameter(ResourceConfig.PROPERTY_CONTAINER_RESPONSE_FILTERS, AllowAjaxFilter.class.getName());\n        log.info(\"Adding JAXRS package %s at [%s]\", packageNames, mountPoint);\n        jaxRSPackages.put(mountPoint, servletHolder);\n    }","commit_id":"3dc67fc928203b08b50907b8114cb9dbfc761c93","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void start() {\n        // Start at the bottom of the stack and work upwards to the Web container\n        startupHealthCheck();\n        validateConfiguration();\n        \n        startDatabase();\n\n        registerServerModules();\n        startModules();\n        \n        startWebServer();\n    }","id":2816,"modified_method":"@Override\n    public void start() {\n        // Start at the bottom of the stack and work upwards to the Web container\n        startupHealthCheck();\n        validateConfiguration();\n        \n        startDatabase();\n\n        startExtensionInitialization();\n\n        registerServerModules();\n        startModules();\n        \n        startWebServer();\n    }","commit_id":"3dc67fc928203b08b50907b8114cb9dbfc761c93","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void stopModules() {\n        for(ServerModule module : serverModules) {\n            module.stop();\n        }\n    }","id":2817,"modified_method":"private void stopModules() {\n        for(ServerModule module : serverModules) {\n\n            try{\n                module.stop();\n            }\n            catch(Exception e)\n            {\n               log.error( e );\n            }\n        }\n    }","commit_id":"3dc67fc928203b08b50907b8114cb9dbfc761c93","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void stop() {\n        try {\n            stopModules();\n            stopDatabase();\n            stopWebServer();\n            log.info(\"Successfully shutdown Neo Server on port [%d], database [%s]\", getWebServerPort(), getDatabase().getLocation());\n        } catch (Exception e) {\n            log.warn(\"Failed to cleanly shutdown Neo Server on port [%d], database [%s]. Reason: %s\", getWebServerPort(), getDatabase().getLocation(),\n                    e.getMessage());\n        }\n    }","id":2818,"modified_method":"@Override\n    public void stop() {\n        try {\n            stopModules();\n            stopExtensionInitializers();\n            stopDatabase();\n            stopWebServer();\n            log.info(\"Successfully shutdown Neo Server on port [%d], database [%s]\", getWebServerPort(), getDatabase().getLocation());\n        } catch (Exception e) {\n            log.warn(\"Failed to cleanly shutdown Neo Server on port [%d], database [%s]. Reason: %s\", getWebServerPort(), getDatabase().getLocation(),\n                    e.getMessage());\n        }\n    }","commit_id":"3dc67fc928203b08b50907b8114cb9dbfc761c93","url":"https://github.com/neo4j/neo4j"},{"original_method":"public NeoServletContainer(NeoServer server) {\n        this.server = server;\n    }","id":2819,"modified_method":"public NeoServletContainer( NeoServer server, Collection<Injectable<?>> injectables ) {\n        this.server = server;\n        this.injectables = injectables;\n    }","commit_id":"3dc67fc928203b08b50907b8114cb9dbfc761c93","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    protected void configure(WebConfig wc, ResourceConfig rc, WebApplication wa) {\n        super.configure(wc, rc, wa);\n\n        rc.getSingletons().add(new DatabaseProvider(server.getDatabase()));\n        rc.getSingletons().add(new GraphDatabaseServiceProvider(server.getDatabase().graph));\n        rc.getSingletons().add(new NeoServerProvider(server));\n        rc.getSingletons().add(new ConfigurationProvider(server.getConfiguration()));\n        if(server.getDatabase().rrdDb() != null) {\n            rc.getSingletons().add(new RrdDbProvider(server.getDatabase().rrdDb()));\n        }\n        RepresentationFormatRepository repository = new RepresentationFormatRepository(server.getExtensionManager());\n        rc.getSingletons().add(new InputFormatProvider(repository));\n        rc.getSingletons().add(new OutputFormatProvider(repository));\n        rc.getSingletons().add(new PluginInvocatorProvider(server.getExtensionManager()));\n    }","id":2820,"modified_method":"@Override\n    protected void configure(WebConfig wc, ResourceConfig rc, WebApplication wa) {\n        super.configure(wc, rc, wa);\n\n        Set<Object> singletons = rc.getSingletons();\n        singletons.add( new DatabaseProvider( server.getDatabase() ) );\n        singletons.add( new GraphDatabaseServiceProvider( server.getDatabase().graph ) );\n        singletons.add( new NeoServerProvider( server ) );\n        singletons.add( new ConfigurationProvider( server.getConfiguration() ) );\n        if(server.getDatabase().rrdDb() != null) {\n            singletons.add( new RrdDbProvider( server.getDatabase().rrdDb() ) );\n        }\n        RepresentationFormatRepository repository = new RepresentationFormatRepository(server.getExtensionManager());\n        singletons.add( new InputFormatProvider( repository ) );\n        singletons.add( new OutputFormatProvider( repository ) );\n        singletons.add( new PluginInvocatorProvider( server.getExtensionManager() ) );\n\n        for ( final Injectable injectable : injectables )\n        {\n            singletons.add( new InjectableWrapper( injectable ) );\n        }\n    }","commit_id":"3dc67fc928203b08b50907b8114cb9dbfc761c93","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void addJAXRSPackages(List<String> packageNames, String mountPoint) {\n        // We don't want absolute URIs at this point\n        mountPoint = ensureRelativeUri(mountPoint);\n\n        // Trim any trailing slash to keep Jetty happy\n        mountPoint = trimTrailingSlash(mountPoint);\n\n        ServletContainer container = new NeoServletContainer(server);\n        ServletHolder servletHolder = new ServletHolder(container);\n        servletHolder.setInitParameter(\"com.sun.jersey.config.property.packages\", toCommaSeparatedList(packageNames));\n        servletHolder.setInitParameter(ResourceConfig.PROPERTY_CONTAINER_RESPONSE_FILTERS, AllowAjaxFilter.class.getName());\n        log.info(\"Adding JAXRS package %s at [%s]\", packageNames, mountPoint);\n        jaxRSPackages.put(mountPoint, servletHolder);\n    }","id":2821,"modified_method":"public void addJAXRSPackages(List<String> packageNames, String mountPoint) {\n        // We don't want absolute URIs at this point\n        mountPoint = ensureRelativeUri(mountPoint);\n\n        // Trim any trailing slash to keep Jetty happy\n        mountPoint = trimTrailingSlash(mountPoint);\n\n        ServletContainer container = new NeoServletContainer(server, server.getInjectables( packageNames ) );\n        ServletHolder servletHolder = new ServletHolder(container);\n        servletHolder.setInitParameter(\"com.sun.jersey.config.property.packages\", toCommaSeparatedList(packageNames));\n        servletHolder.setInitParameter(ResourceConfig.PROPERTY_CONTAINER_RESPONSE_FILTERS, AllowAjaxFilter.class.getName());\n        log.info(\"Adding JAXRS package %s at [%s]\", packageNames, mountPoint);\n        jaxRSPackages.put(mountPoint, servletHolder);\n    }","commit_id":"ea52ffbf7b1ad3417b927cdfd130511a5c4b62e3","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void start() {\n        // Start at the bottom of the stack and work upwards to the Web container\n        startupHealthCheck();\n        validateConfiguration();\n        \n        startDatabase();\n\n        registerServerModules();\n        startModules();\n        \n        startWebServer();\n    }","id":2822,"modified_method":"@Override\n    public void start() {\n        // Start at the bottom of the stack and work upwards to the Web container\n        startupHealthCheck();\n        validateConfiguration();\n        \n        startDatabase();\n\n        startExtensionInitialization();\n\n        registerServerModules();\n        startModules();\n        \n        startWebServer();\n    }","commit_id":"ea52ffbf7b1ad3417b927cdfd130511a5c4b62e3","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void stop() {\n        try {\n            stopModules();\n            stopDatabase();\n            stopWebServer();\n            log.info(\"Successfully shutdown Neo Server on port [%d], database [%s]\", getWebServerPort(), getDatabase().getLocation());\n        } catch (Exception e) {\n            log.warn(\"Failed to cleanly shutdown Neo Server on port [%d], database [%s]. Reason: %s\", getWebServerPort(), getDatabase().getLocation(),\n                    e.getMessage());\n        }\n    }","id":2823,"modified_method":"@Override\n    public void stop() {\n        try {\n            stopModules();\n            stopExtensionInitializers();\n            stopDatabase();\n            stopWebServer();\n            log.info(\"Successfully shutdown Neo Server on port [%d], database [%s]\", getWebServerPort(), getDatabase().getLocation());\n        } catch (Exception e) {\n            log.warn(\"Failed to cleanly shutdown Neo Server on port [%d], database [%s]. Reason: %s\", getWebServerPort(), getDatabase().getLocation(),\n                    e.getMessage());\n        }\n    }","commit_id":"ea52ffbf7b1ad3417b927cdfd130511a5c4b62e3","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void stopModules() {\n        for(ServerModule module : serverModules) {\n            module.stop();\n        }\n    }","id":2824,"modified_method":"private void stopModules() {\n        for(ServerModule module : serverModules) {\n\n            try{\n                module.stop();\n            }\n            catch(Exception e)\n            {\n               log.error( e );\n            }\n        }\n    }","commit_id":"ea52ffbf7b1ad3417b927cdfd130511a5c4b62e3","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    protected void configure(WebConfig wc, ResourceConfig rc, WebApplication wa) {\n        super.configure(wc, rc, wa);\n\n        rc.getSingletons().add(new DatabaseProvider(server.getDatabase()));\n        rc.getSingletons().add(new GraphDatabaseServiceProvider(server.getDatabase().graph));\n        rc.getSingletons().add(new NeoServerProvider(server));\n        rc.getSingletons().add(new ConfigurationProvider(server.getConfiguration()));\n        if(server.getDatabase().rrdDb() != null) {\n            rc.getSingletons().add(new RrdDbProvider(server.getDatabase().rrdDb()));\n        }\n        RepresentationFormatRepository repository = new RepresentationFormatRepository(server.getExtensionManager());\n        rc.getSingletons().add(new InputFormatProvider(repository));\n        rc.getSingletons().add(new OutputFormatProvider(repository));\n        rc.getSingletons().add(new PluginInvocatorProvider(server.getExtensionManager()));\n    }","id":2825,"modified_method":"@Override\n    protected void configure(WebConfig wc, ResourceConfig rc, WebApplication wa) {\n        super.configure(wc, rc, wa);\n\n        Set<Object> singletons = rc.getSingletons();\n        singletons.add( new DatabaseProvider( server.getDatabase() ) );\n        singletons.add( new GraphDatabaseServiceProvider( server.getDatabase().graph ) );\n        singletons.add( new NeoServerProvider( server ) );\n        singletons.add( new ConfigurationProvider( server.getConfiguration() ) );\n        if(server.getDatabase().rrdDb() != null) {\n            singletons.add( new RrdDbProvider( server.getDatabase().rrdDb() ) );\n        }\n        RepresentationFormatRepository repository = new RepresentationFormatRepository(server.getExtensionManager());\n        singletons.add( new InputFormatProvider( repository ) );\n        singletons.add( new OutputFormatProvider( repository ) );\n        singletons.add( new PluginInvocatorProvider( server.getExtensionManager() ) );\n\n        for ( final Injectable injectable : injectables )\n        {\n            singletons.add( new InjectableWrapper( injectable ) );\n        }\n    }","commit_id":"ea52ffbf7b1ad3417b927cdfd130511a5c4b62e3","url":"https://github.com/neo4j/neo4j"},{"original_method":"public NeoServletContainer(NeoServer server) {\n        this.server = server;\n    }","id":2826,"modified_method":"public NeoServletContainer( NeoServer server, Collection<Injectable<?>> injectables ) {\n        this.server = server;\n        this.injectables = injectables;\n    }","commit_id":"ea52ffbf7b1ad3417b927cdfd130511a5c4b62e3","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void addJAXRSPackages(List<String> packageNames, String mountPoint) {\n        // We don't want absolute URIs at this point\n        mountPoint = ensureRelativeUri(mountPoint);\n\n        // Trim any trailing slash to keep Jetty happy\n        mountPoint = trimTrailingSlash(mountPoint);\n\n        ServletContainer container = new NeoServletContainer(server);\n        ServletHolder servletHolder = new ServletHolder(container);\n        servletHolder.setInitParameter(\"com.sun.jersey.config.property.packages\", toCommaSeparatedList(packageNames));\n        servletHolder.setInitParameter(ResourceConfig.PROPERTY_CONTAINER_RESPONSE_FILTERS, AllowAjaxFilter.class.getName());\n        log.info(\"Adding JAXRS package %s at [%s]\", packageNames, mountPoint);\n        jaxRSPackages.put(mountPoint, servletHolder);\n    }","id":2827,"modified_method":"public void addJAXRSPackages(List<String> packageNames, String mountPoint) {\n        // We don't want absolute URIs at this point\n        mountPoint = ensureRelativeUri(mountPoint);\n\n        // Trim any trailing slash to keep Jetty happy\n        mountPoint = trimTrailingSlash(mountPoint);\n\n        ServletContainer container = new NeoServletContainer(server, server.getInjectables( packageNames ) );\n        ServletHolder servletHolder = new ServletHolder(container);\n        servletHolder.setInitParameter(\"com.sun.jersey.config.property.packages\", toCommaSeparatedList(packageNames));\n        servletHolder.setInitParameter(ResourceConfig.PROPERTY_CONTAINER_RESPONSE_FILTERS, AllowAjaxFilter.class.getName());\n        log.info(\"Adding JAXRS package %s at [%s]\", packageNames, mountPoint);\n        jaxRSPackages.put(mountPoint, servletHolder);\n    }","commit_id":"26a622acb5a9b8a11f4c3dc1039d741e8d1bcfb1","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void stop() {\n        try {\n            stopModules();\n            stopDatabase();\n            stopWebServer();\n            log.info(\"Successfully shutdown Neo Server on port [%d], database [%s]\", getWebServerPort(), getDatabase().getLocation());\n        } catch (Exception e) {\n            log.warn(\"Failed to cleanly shutdown Neo Server on port [%d], database [%s]. Reason: %s\", getWebServerPort(), getDatabase().getLocation(),\n                    e.getMessage());\n        }\n    }","id":2828,"modified_method":"@Override\n    public void stop() {\n        try {\n            stopModules();\n            stopExtensionInitializers();\n            stopDatabase();\n            stopWebServer();\n            log.info(\"Successfully shutdown Neo Server on port [%d], database [%s]\", getWebServerPort(), getDatabase().getLocation());\n        } catch (Exception e) {\n            log.warn(\"Failed to cleanly shutdown Neo Server on port [%d], database [%s]. Reason: %s\", getWebServerPort(), getDatabase().getLocation(),\n                    e.getMessage());\n        }\n    }","commit_id":"26a622acb5a9b8a11f4c3dc1039d741e8d1bcfb1","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public void start() {\n        // Start at the bottom of the stack and work upwards to the Web container\n        startupHealthCheck();\n        validateConfiguration();\n        \n        startDatabase();\n\n        registerServerModules();\n        startModules();\n        \n        startWebServer();\n    }","id":2829,"modified_method":"@Override\n    public void start() {\n        // Start at the bottom of the stack and work upwards to the Web container\n        startupHealthCheck();\n        validateConfiguration();\n        \n        startDatabase();\n\n        startExtensionInitialization();\n\n        registerServerModules();\n        startModules();\n        \n        startWebServer();\n    }","commit_id":"26a622acb5a9b8a11f4c3dc1039d741e8d1bcfb1","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void stopModules() {\n        for(ServerModule module : serverModules) {\n            module.stop();\n        }\n    }","id":2830,"modified_method":"private void stopModules() {\n        for(ServerModule module : serverModules) {\n\n            try{\n                module.stop();\n            }\n            catch(Exception e)\n            {\n               log.error( e );\n            }\n        }\n    }","commit_id":"26a622acb5a9b8a11f4c3dc1039d741e8d1bcfb1","url":"https://github.com/neo4j/neo4j"},{"original_method":"public NeoServletContainer(NeoServer server) {\n        this.server = server;\n    }","id":2831,"modified_method":"public NeoServletContainer( NeoServer server, Collection<Injectable<?>> injectables ) {\n        this.server = server;\n        this.injectables = injectables;\n    }","commit_id":"26a622acb5a9b8a11f4c3dc1039d741e8d1bcfb1","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    protected void configure(WebConfig wc, ResourceConfig rc, WebApplication wa) {\n        super.configure(wc, rc, wa);\n\n        rc.getSingletons().add(new DatabaseProvider(server.getDatabase()));\n        rc.getSingletons().add(new GraphDatabaseServiceProvider(server.getDatabase().graph));\n        rc.getSingletons().add(new NeoServerProvider(server));\n        rc.getSingletons().add(new ConfigurationProvider(server.getConfiguration()));\n        if(server.getDatabase().rrdDb() != null) {\n            rc.getSingletons().add(new RrdDbProvider(server.getDatabase().rrdDb()));\n        }\n        RepresentationFormatRepository repository = new RepresentationFormatRepository(server.getExtensionManager());\n        rc.getSingletons().add(new InputFormatProvider(repository));\n        rc.getSingletons().add(new OutputFormatProvider(repository));\n        rc.getSingletons().add(new PluginInvocatorProvider(server.getExtensionManager()));\n    }","id":2832,"modified_method":"@Override\n    protected void configure(WebConfig wc, ResourceConfig rc, WebApplication wa) {\n        super.configure(wc, rc, wa);\n\n        Set<Object> singletons = rc.getSingletons();\n        singletons.add( new DatabaseProvider( server.getDatabase() ) );\n        singletons.add( new GraphDatabaseServiceProvider( server.getDatabase().graph ) );\n        singletons.add( new NeoServerProvider( server ) );\n        singletons.add( new ConfigurationProvider( server.getConfiguration() ) );\n        if(server.getDatabase().rrdDb() != null) {\n            singletons.add( new RrdDbProvider( server.getDatabase().rrdDb() ) );\n        }\n        RepresentationFormatRepository repository = new RepresentationFormatRepository(server.getExtensionManager());\n        singletons.add( new InputFormatProvider( repository ) );\n        singletons.add( new OutputFormatProvider( repository ) );\n        singletons.add( new PluginInvocatorProvider( server.getExtensionManager() ) );\n\n        for ( final Injectable injectable : injectables )\n        {\n            singletons.add( new InjectableWrapper( injectable ) );\n        }\n    }","commit_id":"26a622acb5a9b8a11f4c3dc1039d741e8d1bcfb1","url":"https://github.com/neo4j/neo4j"},{"original_method":"@NotNull\n    public static KotlinSignatureAnnotation get(PsiMethod psiMethod) {\n        return new KotlinSignatureAnnotation(JavaDescriptorResolver.findAnnotation(psiMethod, JvmStdlibNames.KOTLIN_SIGNATURE.getFqName().getFqName()));\n    }","id":2833,"modified_method":"@NotNull\n    public static KotlinSignatureAnnotation get(PsiMethod psiMethod) {\n        final PsiAnnotation annotation =\n                JavaDescriptorResolver.findAnnotation(psiMethod, JvmStdlibNames.KOTLIN_SIGNATURE.getFqName().getFqName());\n        return annotation != null ? new KotlinSignatureAnnotation(annotation) : NULL_ANNOTATION;\n    }","commit_id":"852b7e19cc39ea39e00a0250075b6a13b6e90036","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@NotNull\n    public static JetClassAnnotation get(PsiClass psiClass) {\n        return new JetClassAnnotation(JavaDescriptorResolver.findAnnotation(psiClass, JvmStdlibNames.JET_CLASS.getFqName().getFqName()));\n    }","id":2834,"modified_method":"@NotNull\n    public static JetClassAnnotation get(PsiClass psiClass) {\n        final PsiAnnotation annotation = JavaDescriptorResolver.findAnnotation(psiClass, JvmStdlibNames.JET_CLASS.getFqName().getFqName());\n        return annotation != null ? new JetClassAnnotation(annotation) : NULL_ANNOTATION;\n    }","commit_id":"b70cc84764f1c7db3bb95bd8957222659c2ea702","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public static JetConstructorAnnotation get(PsiMethod constructor) {\n        return new JetConstructorAnnotation(JavaDescriptorResolver.findAnnotation(constructor, JvmStdlibNames.JET_CONSTRUCTOR.getFqName().getFqName()));\n    }","id":2835,"modified_method":"public static JetConstructorAnnotation get(PsiMethod constructor) {\n        final PsiAnnotation annotation =\n                JavaDescriptorResolver.findAnnotation(constructor, JvmStdlibNames.JET_CONSTRUCTOR.getFqName().getFqName());\n        return annotation != null ? new JetConstructorAnnotation(annotation) : NULL_ANNOTATION;\n    }","commit_id":"b70cc84764f1c7db3bb95bd8957222659c2ea702","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public static JetMethodAnnotation get(PsiMethod psiMethod) {\n        return new JetMethodAnnotation(JavaDescriptorResolver.findAnnotation(psiMethod, JvmStdlibNames.JET_METHOD.getFqName().getFqName()));\n    }","id":2836,"modified_method":"public static JetMethodAnnotation get(PsiMethod psiMethod) {\n        final PsiAnnotation annotation =\n                JavaDescriptorResolver.findAnnotation(psiMethod, JvmStdlibNames.JET_METHOD.getFqName().getFqName());\n        return annotation != null ? new JetMethodAnnotation(annotation) : NULL_ANNOTATION;\n    }","commit_id":"b70cc84764f1c7db3bb95bd8957222659c2ea702","url":"https://github.com/JetBrains/kotlin"},{"original_method":"@NotNull\n    public static JetTypeParameterAnnotation get(@NotNull PsiParameter psiParameter) {\n        return new JetTypeParameterAnnotation(\n                JavaDescriptorResolver.findAnnotation(psiParameter, JvmStdlibNames.JET_TYPE_PARAMETER.getFqName().getFqName()));\n    }","id":2837,"modified_method":"@NotNull\n    public static JetTypeParameterAnnotation get(@NotNull PsiParameter psiParameter) {\n        final PsiAnnotation annotation =\n                JavaDescriptorResolver.findAnnotation(psiParameter, JvmStdlibNames.JET_TYPE_PARAMETER.getFqName().getFqName());\n        return annotation != null ? new JetTypeParameterAnnotation(annotation) : NULL_ANNOTATION;\n    }","commit_id":"b70cc84764f1c7db3bb95bd8957222659c2ea702","url":"https://github.com/JetBrains/kotlin"},{"original_method":"public static JetValueParameterAnnotation get(PsiParameter psiParameter) {\n        return new JetValueParameterAnnotation(\n                JavaDescriptorResolver.findAnnotation(psiParameter, JvmStdlibNames.JET_VALUE_PARAMETER.getFqName().getFqName()));\n    }","id":2838,"modified_method":"public static JetValueParameterAnnotation get(PsiParameter psiParameter) {\n        final PsiAnnotation annotation =\n                JavaDescriptorResolver.findAnnotation(psiParameter, JvmStdlibNames.JET_VALUE_PARAMETER.getFqName().getFqName());\n        return annotation != null ? new JetValueParameterAnnotation(annotation) : NULL_ANNOTATION;\n    }","commit_id":"b70cc84764f1c7db3bb95bd8957222659c2ea702","url":"https://github.com/JetBrains/kotlin"},{"original_method":"/**\n\t * @see IActionDelegate#run(IAction)\n\t */\n\tpublic void run(IAction action) {\n\t\ttry {\n\t\t\tfinal IJavaElement firstPackage = getFirstPackage();\n\t\t\tfinal IJavaProject javaProject = packageFragmentRoot.getJavaProject();\n\t\t\tStringBuffer buffer = new StringBuffer();\n\t\t\tbuffer.append(\"package \" + firstPackage.getElementName() + \";\\n\");\n\t\t\tbuffer.append(\"\\n\");\n\t\t\tbuffer.append(\"import junit.framework.Test;\\n\");\n\t\t\tbuffer.append(\"import junit.framework.TestSuite;\\n\");\n\t\t\tbuffer.append(\"\\n\");\n\t\t\tbuffer.append(\"public class \" + TEST_SUITE_NAME + \" {\" + \"\\n\");\n\t\t\tbuffer.append(\"\\n\");\n\t\t\tbuffer.append(\"\\tpublic static Test suite() {\" + \"\\n\");\n\t\t\tbuffer.append(\"\\t\\tTestSuite suite = new TestSuite(\\\"\" + javaProject.getElementName() + \"\\\");\\n\");\n\n\t\t\tfor (IJavaElement child : packageFragmentRoot.getChildren()) {\n\t\t\t\tif (child instanceof IPackageFragment) {\n\t\t\t\t\tIPackageFragment packageFragment = (IPackageFragment) child;\n\t\t\t\t\tICompilationUnit[] compilationUnits = packageFragment.getCompilationUnits();\n\t\t\t\t\tfor (ICompilationUnit compilationUnit : compilationUnits) {\n\t\t\t\t\t\tfor (IType type : compilationUnit.getAllTypes()) {\n\t\t\t\t\t\t\tif (!Flags.isAbstract(type.getFlags())) {\n\t\t\t\t\t\t\t\tif (type.getElementName().endsWith(\"Test\") || type.getSuperclassName() != null\n\t\t\t\t\t\t\t\t\t\t&& type.getSuperclassName().contains(\"TestCase\")) {\n\t\t\t\t\t\t\t\t\tbuffer.append(\"\\t\\tsuite.addTestSuite(\" + type.getFullyQualifiedName()\n\t\t\t\t\t\t\t\t\t\t\t+ \".class);\\n\");\n\t\t\t\t\t\t\t\t\tSystem.out.println(packageFragment.getElementName() + \".\" + type.getElementName());\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbuffer.append(\"\\t\\treturn suite;\\n\");\n\t\t\tbuffer.append(\"\\t}\\n\");\n\t\t\tbuffer.append(\"}\\n\");\n\t\t\tfinal String classBody = buffer.toString();\n\t\t\tJavaCore.run(new IWorkspaceRunnable() {\n\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {\n\t\t\t\t\tIFolder firstPackageFolder = (IFolder) firstPackage.getResource();\n\t\t\t\t\tIFile file = firstPackageFolder.getFile(TEST_SUITE_NAME + \".java\");\n\t\t\t\t\tfile.create(new ByteArrayInputStream(classBody.getBytes()), true, monitor);\n\t\t\t\t}\n\t\t\t}, new NullProgressMonitor());\n\t\t}\n\t\tcatch (Exception exc) {\n\t\t\tMessageDialog.openError(shell, \"Error creating test suite\", exc.getMessage());\n\t\t\tTestCollectorPlugin.getDefault().getLog().log(\n\t\t\t\t\tnew Status(IStatus.ERROR, TestCollectorPlugin.PLUGIN_ID, exc.getMessage(), exc));\n\t\t}\n\t}","id":2839,"modified_method":"/**\n\t * @see IActionDelegate#run(IAction)\n\t */\n\tpublic void run(IAction action) {\n\t\ttry {\n\t\t\t\n\t\t\tList<String> testClassNames = new ArrayList<String>();\n\t\t\t\n\t\t\tfor (IJavaElement child : packageFragmentRoot.getChildren()) {\n\t\t\t\tif (child instanceof IPackageFragment) {\n\t\t\t\t\tIPackageFragment packageFragment = (IPackageFragment) child;\n\t\t\t\t\tICompilationUnit[] compilationUnits = packageFragment.getCompilationUnits();\n\t\t\t\t\tfor (ICompilationUnit compilationUnit : compilationUnits) {\n\t\t\t\t\t\tfor (IType type : compilationUnit.getAllTypes()) {\n\t\t\t\t\t\t\tif (!Flags.isAbstract(type.getFlags())) {\n\t\t\t\t\t\t\t\tif (type.getElementName().endsWith(\"Test\") || type.getSuperclassName() != null\n\t\t\t\t\t\t\t\t\t\t&& type.getSuperclassName().contains(\"TestCase\")) {\n\t\t\t\t\t\t\t\t\ttestClassNames.add(type.getFullyQualifiedName());\n\t\t\t\t\t\t\t\t\tSystem.out.println(packageFragment.getElementName() + \".\" + type.getElementName());\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tCollections.sort(testClassNames);\n\t\t\tfinal IPackageFragment suitePackage = getSuitePackageFragment();\n\t\t\tfinal String classBody = getTestSuiteCode(testClassNames, suitePackage);\n\t\t\tJavaCore.run(new IWorkspaceRunnable() {\n\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {\n\t\t\t\t\tIFolder firstPackageFolder = (IFolder) suitePackage.getResource();\n\t\t\t\t\tif(!firstPackageFolder.exists()) {\n\t\t\t\t\t\tfirstPackageFolder.create(true, false, monitor);\n\t\t\t\t\t}\n\t\t\t\t\tIFile file = firstPackageFolder.getFile(TEST_SUITE_NAME + \".java\");\n\t\t\t\t\tif(file.exists()) {\n\t\t\t\t\t\tfile.delete(true, monitor);\n\t\t\t\t\t}\n\t\t\t\t\tfile.create(new ByteArrayInputStream(classBody.getBytes()), true, monitor);\n\t\t\t\t}\n\t\t\t}, new NullProgressMonitor());\n\t\t}\n\t\tcatch (Exception exc) {\n\t\t\tMessageDialog.openError(shell, \"Error creating test suite\", exc.getMessage());\n\t\t\tTestCollectorPlugin.getDefault().getLog().log(\n\t\t\t\t\tnew Status(IStatus.ERROR, TestCollectorPlugin.PLUGIN_ID, exc.getMessage(), exc));\n\t\t}\n\t}","commit_id":"def6419b32a6683a4480e5d7f7e11c02e4dc218f","url":"https://github.com/eclipse/xtext"},{"original_method":"/**\n\t * @see IActionDelegate#run(IAction)\n\t */\n\tpublic void run(IAction action) {\n\t\ttry {\n\t\t\tfinal IJavaElement firstPackage = getFirstPackage();\n\t\t\tfinal IJavaProject javaProject = packageFragmentRoot.getJavaProject();\n\t\t\tStringBuffer buffer = new StringBuffer();\n\t\t\tbuffer.append(\"package \" + firstPackage.getElementName() + \";\\n\");\n\t\t\tbuffer.append(\"\\n\");\n\t\t\tbuffer.append(\"import junit.framework.Test;\\n\");\n\t\t\tbuffer.append(\"import junit.framework.TestSuite;\\n\");\n\t\t\tbuffer.append(\"\\n\");\n\t\t\tbuffer.append(\"public class \" + TEST_SUITE_NAME + \" {\" + \"\\n\");\n\t\t\tbuffer.append(\"\\n\");\n\t\t\tbuffer.append(\"\\tpublic static Test suite() {\" + \"\\n\");\n\t\t\tbuffer.append(\"\\t\\tTestSuite suite = new TestSuite(\\\"\" + javaProject.getElementName() + \"\\\");\\n\");\n\n\t\t\tfor (IJavaElement child : packageFragmentRoot.getChildren()) {\n\t\t\t\tif (child instanceof IPackageFragment) {\n\t\t\t\t\tIPackageFragment packageFragment = (IPackageFragment) child;\n\t\t\t\t\tICompilationUnit[] compilationUnits = packageFragment.getCompilationUnits();\n\t\t\t\t\tfor (ICompilationUnit compilationUnit : compilationUnits) {\n\t\t\t\t\t\tfor (IType type : compilationUnit.getAllTypes()) {\n\t\t\t\t\t\t\tif (!Flags.isAbstract(type.getFlags())) {\n\t\t\t\t\t\t\t\tif (type.getElementName().endsWith(\"Test\") || type.getSuperclassName() != null\n\t\t\t\t\t\t\t\t\t\t&& type.getSuperclassName().contains(\"TestCase\")) {\n\t\t\t\t\t\t\t\t\tbuffer.append(\"\\t\\tsuite.addTestSuite(\" + type.getFullyQualifiedName()\n\t\t\t\t\t\t\t\t\t\t\t+ \".class);\\n\");\n\t\t\t\t\t\t\t\t\tSystem.out.println(packageFragment.getElementName() + \".\" + type.getElementName());\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbuffer.append(\"\\t\\treturn suite;\\n\");\n\t\t\tbuffer.append(\"\\t}\\n\");\n\t\t\tbuffer.append(\"}\\n\");\n\t\t\tfinal String classBody = buffer.toString();\n\t\t\tJavaCore.run(new IWorkspaceRunnable() {\n\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {\n\t\t\t\t\tIFolder firstPackageFolder = (IFolder) firstPackage.getResource();\n\t\t\t\t\tIFile file = firstPackageFolder.getFile(TEST_SUITE_NAME + \".java\");\n\t\t\t\t\tfile.create(new ByteArrayInputStream(classBody.getBytes()), true, monitor);\n\t\t\t\t}\n\t\t\t}, new NullProgressMonitor());\n\t\t}\n\t\tcatch (Exception exc) {\n\t\t\tMessageDialog.openError(shell, \"Error creating test suite\", exc.getMessage());\n\t\t\tTestCollectorPlugin.getDefault().getLog().log(\n\t\t\t\t\tnew Status(IStatus.ERROR, TestCollectorPlugin.PLUGIN_ID, exc.getMessage(), exc));\n\t\t}\n\t}","id":2840,"modified_method":"/**\n\t * @see IActionDelegate#run(IAction)\n\t */\n\tpublic void run(IAction action) {\n\t\ttry {\n\t\t\t\n\t\t\tList<String> testClassNames = new ArrayList<String>();\n\t\t\t\n\t\t\tfor (IJavaElement child : packageFragmentRoot.getChildren()) {\n\t\t\t\tif (child instanceof IPackageFragment) {\n\t\t\t\t\tIPackageFragment packageFragment = (IPackageFragment) child;\n\t\t\t\t\tICompilationUnit[] compilationUnits = packageFragment.getCompilationUnits();\n\t\t\t\t\tfor (ICompilationUnit compilationUnit : compilationUnits) {\n\t\t\t\t\t\tfor (IType type : compilationUnit.getAllTypes()) {\n\t\t\t\t\t\t\tif (!Flags.isAbstract(type.getFlags())) {\n\t\t\t\t\t\t\t\tif (type.getElementName().endsWith(\"Test\") || type.getSuperclassName() != null\n\t\t\t\t\t\t\t\t\t\t&& type.getSuperclassName().contains(\"TestCase\")) {\n\t\t\t\t\t\t\t\t\ttestClassNames.add(type.getFullyQualifiedName());\n\t\t\t\t\t\t\t\t\tSystem.out.println(packageFragment.getElementName() + \".\" + type.getElementName());\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tCollections.sort(testClassNames);\n\t\t\tfinal IPackageFragment suitePackage = getSuitePackageFragment();\n\t\t\tfinal String classBody = getTestSuiteCode(testClassNames, suitePackage);\n\t\t\tJavaCore.run(new IWorkspaceRunnable() {\n\t\t\t\tpublic void run(IProgressMonitor monitor) throws CoreException {\n\t\t\t\t\tIFolder firstPackageFolder = (IFolder) suitePackage.getResource();\n\t\t\t\t\tif(!firstPackageFolder.exists()) {\n\t\t\t\t\t\tfirstPackageFolder.create(true, false, monitor);\n\t\t\t\t\t}\n\t\t\t\t\tIFile file = firstPackageFolder.getFile(TEST_SUITE_NAME + \".java\");\n\t\t\t\t\tif(file.exists()) {\n\t\t\t\t\t\tfile.delete(true, monitor);\n\t\t\t\t\t}\n\t\t\t\t\tfile.create(new ByteArrayInputStream(classBody.getBytes()), true, monitor);\n\t\t\t\t}\n\t\t\t}, new NullProgressMonitor());\n\t\t}\n\t\tcatch (Exception exc) {\n\t\t\tMessageDialog.openError(shell, \"Error creating test suite\", exc.getMessage());\n\t\t\tTestCollectorPlugin.getDefault().getLog().log(\n\t\t\t\t\tnew Status(IStatus.ERROR, TestCollectorPlugin.PLUGIN_ID, exc.getMessage(), exc));\n\t\t}\n\t}","commit_id":"363d4f3b55a2e1fc9a2630ec3368451c74cbe221","url":"https://github.com/eclipse/xtext"},{"original_method":"private String runValidation(String compareFrom, String compareTo)\n   {\n      String tmp = compareTo;\n      StringBuilder sb = new StringBuilder();\n      MatchResult result = regExp.exec(compareFrom);\n\n      while (result != null)\n      {\n         String node = result.getGroup(0);\n         Log.debug(\"Found Node:\" + node);\n         if (!tmp.contains(node))\n         {\n            sb.append(\" \");\n            sb.append(node);\n            sb.append(\" \");\n         }\n         else\n         {\n            tmp = tmp.replaceFirst(node, \"\"); // remove matched node from\n         }\n         result = regExp.exec(compareFrom);\n      }\n      return sb.toString();\n   }","id":2841,"modified_method":"private List<String> runValidation(String compareFrom, String compareTo)\n   {\n      String tmp = compareTo;\n      List<String> unmatched = new ArrayList<String>();\n      MatchResult result = regExp.exec(compareFrom);\n\n      while (result != null)\n      {\n         String node = result.getGroup(0);\n         Log.debug(\"Found Node:\" + node);\n         if (!tmp.contains(node))\n         {\n            unmatched.add(node);\n         }\n         else\n         {\n            tmp = tmp.replaceFirst(node, \"\"); // remove matched node from\n         }\n         result = regExp.exec(compareFrom);\n      }\n      return unmatched;\n   }","commit_id":"f8eaaa0666357c6fe284d6cf4618650ec3513fc0","url":"https://github.com/zanata/zanata-server"},{"original_method":"private void orderValidation(String source, String target)\n   {\n      List<String> from = getTagList(source);\n      List<String> to = getTagList(target);\n      StringBuilder sb = new StringBuilder();\n\n      for (int i = 0; i < from.size(); i++)\n      {\n         if (!to.get(i).equals(from.get(i)))\n         {\n            sb.append(\" \");\n            sb.append(from.get(i));\n            sb.append(\" \");\n         }\n      }\n\n      if (sb.length() > 0)\n      {\n         addError(\"Tag [\" + sb.toString() + \"] are wrong in order\");\n      }\n\n   }","id":2842,"modified_method":"private void orderValidation(String source, String target)\n   {\n      // TODO improve for cases such as first node moved to end and last node\n      // moved to start. Currently reports every node in these cases, should\n      // only report the one moved node.\n      List<String> from = getTagList(source);\n      List<String> to = getTagList(target);\n      List<String> outOfOrder = new ArrayList<String>();\n\n      for (int i = 0; i < from.size(); i++)\n      {\n         if (!to.get(i).equals(from.get(i)))\n         {\n            outOfOrder.add(from.get(i));\n         }\n      }\n\n      if (!outOfOrder.isEmpty())\n      {\n         addError(getMessages().tagsWrongOrder(outOfOrder));\n      }\n   }","commit_id":"f8eaaa0666357c6fe284d6cf4618650ec3513fc0","url":"https://github.com/zanata/zanata-server"},{"original_method":"public HtmlXmlTagValidation(String id, String description)\n   {\n      super(id, description);\n   }","id":2843,"modified_method":"public HtmlXmlTagValidation(final ValidationMessages messages)\n   {\n      super(messages.xmlHtmlValidatorName(), messages.xmlHtmlValidatorDescription(), messages);\n   }","commit_id":"f8eaaa0666357c6fe284d6cf4618650ec3513fc0","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Override\n   public void validate(String source, String target)\n   {\n      if (!ValidationUtils.isEmpty(target))\n      {\n         String error = runValidation(source, target);\n         if (error.length() > 0)\n         {\n            addError(\"Tag [\" + error + \"] missing in target\");\n         }\n\n         error = runValidation(target, source);\n         if (error.length() > 0)\n         {\n            addError(\"Tag [\" + error + \"] missing in source\");\n         }\n\n         if (getError().isEmpty())\n         {\n            orderValidation(source, target);\n         }\n      }\n   }","id":2844,"modified_method":"@Override\n   public void validate(String source, String target)\n   {\n      if (!ValidationUtils.isEmpty(target))\n      {\n         List<String> error = runValidation(source, target);\n         if (!error.isEmpty())\n         {\n\n            addError(getMessages().tagsMissing(error));\n         }\n\n         error = runValidation(target, source);\n         if (!error.isEmpty())\n         {\n            addError(getMessages().tagsAdded(error));\n         }\n\n         if (getError().isEmpty())\n         {\n            orderValidation(source, target);\n         }\n      }\n   }","commit_id":"f8eaaa0666357c6fe284d6cf4618650ec3513fc0","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Before\n   public void init()\n   {\n      htmlXmlTagValidation = null;\n   }","id":2845,"modified_method":"@BeforeMethod\n   public void init()\n   {\n      htmlXmlTagValidation = null;\n\n      capturedTagsAdded.reset();\n      capturedTagsMissing.reset();\n      capturedTagsOutOfOrder.reset();\n   }","commit_id":"f8eaaa0666357c6fe284d6cf4618650ec3513fc0","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test\n   public void XMLTagTestTagWrongOrder()\n   {\n      htmlXmlTagValidation = new HtmlXmlTagValidation(\"HTML/XML tag\", \"Matching HTML/XML tag validation\");\n\n      String source = \"<group><users><user><\/user><\/users><users><\/users><\/group>\";\n      String target = \"<group><users><\/users><users><\/user><user><\/users><\/group>\";\n      htmlXmlTagValidation.validate(source, target);\n      Assert.assertTrue(htmlXmlTagValidation.hasError());\n      Assert.assertEquals(htmlXmlTagValidation.getError().size(), 1);\n   }","id":2846,"modified_method":"@SuppressWarnings(\"unchecked\")\n   @Test\n   public void wrongOrderTagError()\n   {\n      htmlXmlTagValidation = new HtmlXmlTagValidation(mockMessages);\n      String source = \"<one><two><three><\/three><\/two><four><\/four><\/one>\";\n      String target = \"<one><two><\/two><four><\/three><three><\/four><\/one>\";\n      htmlXmlTagValidation.validate(source, target);\n\n      assertThat(htmlXmlTagValidation.hasError(), is(true));\n      assertThat(htmlXmlTagValidation.getError(), hasItem(MOCK_TAGS_OUT_OF_ORDER_MESSAGE));\n      assertThat(htmlXmlTagValidation.getError().size(), is(1));\n\n      // Note: only <three> and <\/three> have been moved in this string, but the\n      // algorithm just looks for changed index at the moment.\n      assertThat(capturedTagsOutOfOrder.getValue(), hasItems(\"<three>\", \"<\/three>\", \"<\/two>\", \"<four>\"));\n      assertThat(capturedTagsOutOfOrder.getValue(), not(anyOf(hasItem(\"<one>\"), hasItem(\"<two>\"), hasItem(\"<\/four>\"), hasItem(\"<\/one>\"))));\n      assertThat(capturedTagsOutOfOrder.getValue().size(), is(4));\n   }","commit_id":"f8eaaa0666357c6fe284d6cf4618650ec3513fc0","url":"https://github.com/zanata/zanata-server"},{"original_method":"public NewlineLeadTrailValidation(String id, String description)\n   {\n      super(id, description);\n   }","id":2847,"modified_method":"public NewlineLeadTrailValidation(final ValidationMessages messages)\n   {\n      super(messages.newlineValidatorName(), messages.newlineValidatorDescription(), messages);\n   }","commit_id":"f8eaaa0666357c6fe284d6cf4618650ec3513fc0","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Override\n   public void validate(String source, String target)\n   {\n      if (!ValidationUtils.isEmpty(target))\n      {\n         String error = runValidation(source, target);\n         if (error.length() > 0)\n         {\n            addError(error + \" newline missing in target\");\n         }\n         error = runValidation(target, source);\n         if (error.length() > 0)\n         {\n            addError(error + \" newline missing in source\");\n         }\n      }\n   }","id":2848,"modified_method":"@Override\n   public void validate(String source, String target)\n   {\n      if (!ValidationUtils.isEmpty(target))\n      {\n         if (!shareLeading(source, target))\n            addError(getMessages().leadingNewlineMissing());\n\n         if (!shareLeading(target, source))\n            addError(getMessages().leadingNewlineAdded());\n\n         if (!shareTrailing(source, target))\n            addError(getMessages().trailingNewlineMissing());\n\n         if (!shareTrailing(target, source))\n            addError(getMessages().trailingNewlineAdded());\n      }\n   }","commit_id":"f8eaaa0666357c6fe284d6cf4618650ec3513fc0","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test\n   public void NewlineLeadTrailTestWithMissingBoth()\n   {\n      newlineLeadTrailValidation = new NewlineLeadTrailValidation(\"Newline lead/trail\", \"Newline lead/trail validation\");\n\n      String source = \"\\nTesting string with leading new line\\n\";\n      String target = \"Testing string with leading new line\";\n      newlineLeadTrailValidation.validate(source, target);\n      Assert.assertTrue(newlineLeadTrailValidation.hasError());\n      Assert.assertEquals(newlineLeadTrailValidation.getError().size(), 1);\n   }","id":2849,"modified_method":"@Test\n   public void missingBothNewlines()\n   {\n      newlineLeadTrailValidation = new NewlineLeadTrailValidation(mockMessages);\n      String source = \"\\nString with both newlines\\n\";\n      String target = \"Other string with no newlines\";\n      newlineLeadTrailValidation.validate(source, target);\n\n      assertThat(newlineLeadTrailValidation.hasError(), is(true));\n      assertThat(newlineLeadTrailValidation.getError(), hasItems(MOCK_TRAILING_NEWLINE_MISSING_MESSAGE, MOCK_TRAILING_NEWLINE_MISSING_MESSAGE));\n      assertThat(newlineLeadTrailValidation.getError().size(), is(2));\n   }","commit_id":"f8eaaa0666357c6fe284d6cf4618650ec3513fc0","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test\n   public void NewlineLeadTrailTestWithMissingTrail()\n   {\n      newlineLeadTrailValidation = new NewlineLeadTrailValidation(\"Newline lead/trail\", \"Newline lead/trail validation\");\n\n      String source = \"Testing string with leading new line\\n\";\n      String target = \"\\nTesting string with leading new line\";\n      newlineLeadTrailValidation.validate(source, target);\n      Assert.assertTrue(newlineLeadTrailValidation.hasError());\n      Assert.assertEquals(newlineLeadTrailValidation.getError().size(), 2);\n   }","id":2850,"modified_method":"@Test\n   public void missingTrailingNewline()\n   {\n      newlineLeadTrailValidation = new NewlineLeadTrailValidation(mockMessages);\n      String source = \"Testing string with trailing new line\\n\";\n      String target = \"Different string with the newline removed\";\n      newlineLeadTrailValidation.validate(source, target);\n\n      assertThat(newlineLeadTrailValidation.hasError(), is(true));\n      assertThat(newlineLeadTrailValidation.getError(), hasItem(MOCK_TRAILING_NEWLINE_MISSING_MESSAGE));\n      assertThat(newlineLeadTrailValidation.getError().size(), is(1));\n   }","commit_id":"f8eaaa0666357c6fe284d6cf4618650ec3513fc0","url":"https://github.com/zanata/zanata-server"},{"original_method":"public ValidationAction(String id, String description)\n   {\n      this.id = id;\n      this.description = description;\n   }","id":2851,"modified_method":"public ValidationAction(String id, String description, final ValidationMessages messages)\n   {\n      this.id = id;\n      this.description = description;\n      this.messages = messages;\n   }","commit_id":"f8eaaa0666357c6fe284d6cf4618650ec3513fc0","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Inject\n   public ValidationService(final EventBus eventBus, final TableEditorMessages messages)\n   {\n      this.eventBus = eventBus;\n      this.messages = messages;\n\n\n      HtmlXmlTagValidation htmlxmlValidation = new HtmlXmlTagValidation(\"HTML/XML tag\", \"Matching HTML/XML tag validation\");\n      NewlineLeadTrailValidation newlineLeadTrailValidation = new NewlineLeadTrailValidation(\"Newline lead/trail\", \"Newline lead/trail validation\");\n      VariablesValidation variablesValidation = new VariablesValidation(\"Variables check\", \"Variables check validation\");\n\n      validationMap.put(htmlxmlValidation.getId(), htmlxmlValidation);\n      validationMap.put(newlineLeadTrailValidation.getId(), newlineLeadTrailValidation);\n      validationMap.put(variablesValidation.getId(), variablesValidation);\n   }","id":2852,"modified_method":"@Inject\n   public ValidationService(final EventBus eventBus, final TableEditorMessages messages, final ValidationMessages valMessages)\n   {\n      this.eventBus = eventBus;\n      this.messages = messages;\n\n      HtmlXmlTagValidation htmlxmlValidation = new HtmlXmlTagValidation(valMessages);\n      NewlineLeadTrailValidation newlineLeadTrailValidation = new NewlineLeadTrailValidation(valMessages);\n      VariablesValidation variablesValidation = new VariablesValidation(valMessages);\n\n      validationMap.put(htmlxmlValidation.getId(), htmlxmlValidation);\n      validationMap.put(newlineLeadTrailValidation.getId(), newlineLeadTrailValidation);\n      validationMap.put(variablesValidation.getId(), variablesValidation);\n   }","commit_id":"f8eaaa0666357c6fe284d6cf4618650ec3513fc0","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Override\n   public void validate(String source, String target)\n   {\n      if (!ValidationUtils.isEmpty(target))\n      {\n         String error = runValidation(source, target);\n         if (error.length() > 0)\n         {\n            addError(\"Variable [\" + error + \"] not found in target\");\n         }\n\n         error = runValidation(target, source);\n         if (error.length() > 0)\n         {\n            addError(\"Variable [\" + error + \"] not found in source\");\n         }\n      }\n   }","id":2853,"modified_method":"@Override\n   public void validate(String source, String target)\n   {\n      if (!ValidationUtils.isEmpty(target))\n      {\n         ArrayList<String> sourceVars = findVars(source);\n         ArrayList<String> targetVars = findVars(target);\n\n         List<String> missing = listMissing(sourceVars, targetVars);\n         if (!missing.isEmpty())\n         {\n            addError(getMessages().varsMissing(missing));\n         }\n\n         // missing from source = added\n         missing = listMissing(targetVars, sourceVars);\n         if (!missing.isEmpty())\n         {\n            addError(getMessages().varsAdded(missing));\n         }\n      }\n   }","commit_id":"f8eaaa0666357c6fe284d6cf4618650ec3513fc0","url":"https://github.com/zanata/zanata-server"},{"original_method":"public VariablesValidation(String id, String description)\n   {\n      super(id, description);\n   }","id":2854,"modified_method":"public VariablesValidation(final ValidationMessages messages)\n   {\n      super(messages.variablesValidatorName(), messages.variablesValidatorDescription(), messages);\n   }","commit_id":"f8eaaa0666357c6fe284d6cf4618650ec3513fc0","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Before\n   public void init()\n   {\n      variablesValidation = null;\n   }","id":2855,"modified_method":"@BeforeMethod\n   public void init()\n   {\n      variablesValidation = null;\n\n      capturedVarsAdded.reset();\n      capturedVarsMissing.reset();\n   }","commit_id":"f8eaaa0666357c6fe284d6cf4618650ec3513fc0","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Test\n   public void VariablesTestWithMatch()\n   {\n      variablesValidation = new VariablesValidation(\"Variables check\", \"Variables check validation\");\n\n      String source = \"Testing string with variable %var1 and %var2\";\n      String target = \"Testing string with variable %var1 and %var2\";\n      variablesValidation.validate(source, target);\n      Assert.assertFalse(variablesValidation.hasError());\n      Assert.assertEquals(variablesValidation.getError().size(), 0);\n   }","id":2856,"modified_method":"@SuppressWarnings(\"unchecked\")\n   @Test\n   public void substringVariablesDontMatch()\n   {\n      variablesValidation = new VariablesValidation(mockMessages);\n      String source = \"%testing\";\n      String target = \"%test %testing\";\n      variablesValidation.validate(source, target);\n\n      assertThat(variablesValidation.hasError(), is(true));\n      assertThat(variablesValidation.getError(), hasItem(MOCK_VARIABLES_ADDED_MESSAGE));\n      assertThat(variablesValidation.getError().size(), is(1));\n\n      assertThat(capturedVarsAdded.getValue(), allOf(hasItem(\"%test\"), not(hasItem(\"%testing\"))));\n      assertThat(capturedVarsAdded.getValue().size(), is(1));\n      assertThat(capturedVarsMissing.hasCaptured(), is(false));\n   }","commit_id":"f8eaaa0666357c6fe284d6cf4618650ec3513fc0","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Override\n  public void drawChars(char[] data, int offset, int length, int x, int y) {\n    if (ALLOW_ENGRAVEMENT) {\n      final Color color = getColor();\n      setColor(myShadowColor);\n      super.drawChars(data, offset, length, x + myXOffset, y + myYOffset);\n\n      setColor(color);\n    }\n\n    super.drawChars(data, offset, length, x, y);\n  }","id":2857,"modified_method":"@Override\n  public void drawChars(char[] data, int offset, int length, int x, int y) {\n    if (ALLOW_ENGRAVEMENT) {\n      final Color color = getColor();\n      \n      if (color != myShadowColor) {\n        setColor(myShadowColor);\n        super.drawChars(data, offset, length, x + myXOffset, y + myYOffset);\n\n        setColor(color);\n      }\n    }\n\n    super.drawChars(data, offset, length, x, y);\n  }","commit_id":"9e4ba252e1baebc261b614970708ad4c9159e37d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void drawString(String str, int x, int y) {\n    if (ALLOW_ENGRAVEMENT) {\n      final Color color = getColor();\n\n      setColor(myShadowColor);\n      super.drawString(str, x + myXOffset, y + myYOffset);\n\n      setColor(color);\n    }\n    super.drawString(str, x, y);\n  }","id":2858,"modified_method":"@Override\n  public void drawString(String str, int x, int y) {\n    if (ALLOW_ENGRAVEMENT) {\n      final Color color = getColor();\n      if (color != myShadowColor) {\n        setColor(myShadowColor);\n        super.drawString(str, x + myXOffset, y + myYOffset);\n\n        setColor(color);\n      }\n    }\n    super.drawString(str, x, y);\n  }","commit_id":"9e4ba252e1baebc261b614970708ad4c9159e37d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void drawString(String s, float x, float y) {\n    if (ALLOW_ENGRAVEMENT) {\n      final Color color = getColor();\n\n      setColor(myShadowColor);\n      super.drawString(s, x + myXOffset, y + myYOffset);\n\n      setColor(color);\n    }\n    super.drawString(s, x, y);\n  }","id":2859,"modified_method":"@Override\n  public void drawString(String s, float x, float y) {\n    if (ALLOW_ENGRAVEMENT) {\n      final Color color = getColor();\n\n      if (color != myShadowColor) {\n        setColor(myShadowColor);\n        super.drawString(s, x + myXOffset, y + myYOffset);\n\n        setColor(color);\n      }\n    }\n    super.drawString(s, x, y);\n  }","commit_id":"9e4ba252e1baebc261b614970708ad4c9159e37d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void drawString(AttributedCharacterIterator iterator, float x, float y) {\n    if (ALLOW_ENGRAVEMENT) {\n      final Color color = getColor();\n\n      setColor(myShadowColor);\n      super.drawString(iterator, x + myXOffset, y + myYOffset);\n\n      setColor(color);\n    }\n    super.drawString(iterator, x, y);\n  }","id":2860,"modified_method":"@Override\n  public void drawString(AttributedCharacterIterator iterator, float x, float y) {\n    if (ALLOW_ENGRAVEMENT) {\n      final Color color = getColor();\n\n      if (color != myShadowColor) {\n        setColor(myShadowColor);\n        super.drawString(iterator, x + myXOffset, y + myYOffset);\n\n        setColor(color);\n      }\n    }\n    super.drawString(iterator, x, y);\n  }","commit_id":"9e4ba252e1baebc261b614970708ad4c9159e37d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void drawString(AttributedCharacterIterator iterator, int x, int y) {\n    if (ALLOW_ENGRAVEMENT) {\n      final Color color = getColor();\n\n      setColor(myShadowColor);\n      super.drawString(iterator, x + myXOffset, y + myYOffset);\n\n      setColor(color);\n    }\n    super.drawString(iterator, x, y);\n  }","id":2861,"modified_method":"@Override\n  public void drawString(AttributedCharacterIterator iterator, int x, int y) {\n    if (ALLOW_ENGRAVEMENT) {\n      final Color color = getColor();\n\n      if (color != myShadowColor) {\n        setColor(myShadowColor);\n        super.drawString(iterator, x + myXOffset, y + myYOffset);\n\n        setColor(color);\n      }\n    }\n    super.drawString(iterator, x, y);\n  }","commit_id":"9e4ba252e1baebc261b614970708ad4c9159e37d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public BlocksOrBecomesBlockedTriggeredAbility(Effect effect, boolean optional) {\n        super(Zone.BATTLEFIELD, effect, optional);\n        this.addTarget(new TargetCreaturePermanent());\n    }","id":2862,"modified_method":"public BlocksOrBecomesBlockedTriggeredAbility(Effect effect, boolean optional) {\n        super(Zone.BATTLEFIELD, effect, optional);\n    }","commit_id":"f16a880680c04f39b5f2a2a2498dec0dfc463392","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean checkTrigger(GameEvent event, Game game) {\n        if (event.getType() == EventType.BLOCKER_DECLARED) {\n            if (event.getSourceId().equals(this.getSourceId())) {\n                this.getTargets().get(0).add(event.getTargetId(), game);\n                return true;\n            }\n            if (event.getTargetId().equals(this.getSourceId())) {\n                this.getTargets().get(0).add(event.getSourceId(), game);\n                return true;\n            }\n        }\n        return false;\n    }","id":2863,"modified_method":"@Override\n    public boolean checkTrigger(GameEvent event, Game game) {\n        if (event.getType() == EventType.BLOCKER_DECLARED) {\n            if (event.getSourceId().equals(this.getSourceId())) {\n                for (Effect effect : this.getEffects()) {\n                        effect.setTargetPointer(new FixedTarget(event.getTargetId()));\n                }\n                return true;\n            }\n            if (event.getTargetId().equals(this.getSourceId())) {\n                for (Effect effect : this.getEffects()) {\n                        effect.setTargetPointer(new FixedTarget(event.getSourceId()));\n                }\n                return true;\n            }\n        }\n        return false;\n    }","commit_id":"f16a880680c04f39b5f2a2a2498dec0dfc463392","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n\tpublic boolean apply(Game game, Ability source) {\n        int affectedTargets = 0;\n\t\tif (source.getTargets().size() > 0) {\n\t\t\tfor (UUID permanentId : source.getTargets().get(0).getTargets()) {\n\t\t\t\tPermanent permanent = game.getPermanent(permanentId);\n\t\t\t\tif (permanent != null) {\n\t\t\t\t\tpermanent.destroy(source.getId(), game, noRegen);\n\t\t\t\t\taffectedTargets++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn affectedTargets > 0;\n\t}","id":2864,"modified_method":"@Override\n\tpublic boolean apply(Game game, Ability source) {\n        int affectedTargets = 0;\n\t\tif (targetPointer.getTargets(source).size() > 0) {\n\t\t\tfor (UUID permanentId : targetPointer.getTargets(source)) {\n\t\t\t\tPermanent permanent = game.getPermanent(permanentId);\n\t\t\t\tif (permanent != null) {\n\t\t\t\t\tpermanent.destroy(source.getId(), game, noRegen);\n\t\t\t\t\taffectedTargets++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn affectedTargets > 0;\n\t}","commit_id":"f16a880680c04f39b5f2a2a2498dec0dfc463392","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n\tpublic String getText(Ability source) {\n        if (source.getTargets().get(0).getNumberOfTargets() == 1)\n\t\t    return \"Destroy target \" + source.getTargets().get(0).getTargetName();\n        else\n            return \"Destroy \" + source.getTargets().get(0).getNumberOfTargets() + \" target \" + source.getTargets().get(0).getTargetName();\n\t}","id":2865,"modified_method":"@Override\n\tpublic String getText(Ability source) {\n        if (source.getTargets().size() == 0) {\n            return \"destroy that creature\"; //TODO add possibility to specify text with targetPointer usage\n        } else if (source.getTargets().get(0).getNumberOfTargets() == 1)\n\t\t    return \"Destroy target \" + source.getTargets().get(0).getTargetName();\n        else\n            return \"Destroy \" + source.getTargets().get(0).getNumberOfTargets() + \" target \" + source.getTargets().get(0).getTargetName();\n\t}","commit_id":"f16a880680c04f39b5f2a2a2498dec0dfc463392","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public String getRule() {\n        return \"Whenever {this} blocks, \" + super.getRule();\n    }","id":2866,"modified_method":"@Override\n    public String getRule() {\n        return \"Whenever {this} blocks\" + (fixedTargetPointer ? \" a creature\" : \"\") + \", \" + super.getRule();\n    }","commit_id":"11b692fa4783006c3af19b12324e220e04a65f8d","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean checkTrigger(GameEvent event, Game game) {\n        if (event.getType() == EventType.BLOCKER_DECLARED && event.getSourceId().equals(this.getSourceId())) {\n            this.getTargets().get(0).add(event.getTargetId(), game);\n            return true;\n        }\n        return false;\n    }","id":2867,"modified_method":"@Override\n    public boolean checkTrigger(GameEvent event, Game game) {\n        if (event.getType() == EventType.BLOCKER_DECLARED && event.getSourceId().equals(this.getSourceId())) {\n            if (fixedTargetPointer) {\n                for (Effect effect : this.getEffects()) {\n                    effect.setTargetPointer(new FixedTarget(event.getTargetId()));\n                }\n            }\n            return true;\n        }\n        return false;\n    }","commit_id":"11b692fa4783006c3af19b12324e220e04a65f8d","url":"https://github.com/magefree/mage"},{"original_method":"public BlocksTriggeredAbility(Effect effect, boolean optional) {\n        super(Zone.BATTLEFIELD, effect, optional);\n        this.addTarget(new TargetCreaturePermanent());\n    }","id":2868,"modified_method":"public BlocksTriggeredAbility(Effect effect, boolean optional) {\n        this(effect, optional, false);\n    }","commit_id":"11b692fa4783006c3af19b12324e220e04a65f8d","url":"https://github.com/magefree/mage"},{"original_method":"public LoyalSentry (UUID ownerId) {\r\n        super(ownerId, 27, \"Loyal Sentry\", Rarity.RARE, new CardType[]{CardType.CREATURE}, \"{W}\");\r\n        this.expansionSetCode = \"10E\";\r\n        this.subtype.add(\"Human\");\r\n        this.subtype.add(\"Soldier\");\r\n        \r\n\t\tthis.color.setWhite(true);\r\n        this.power = new MageInt(1);\r\n        this.toughness = new MageInt(1);\r\n        \r\n        this.addAbility(new BlocksTriggeredAbility(new LoyalSentryEffect(), false));\r\n    }","id":2869,"modified_method":"public LoyalSentry (UUID ownerId) {\r\n        super(ownerId, 27, \"Loyal Sentry\", Rarity.RARE, new CardType[]{CardType.CREATURE}, \"{W}\");\r\n        this.expansionSetCode = \"10E\";\r\n        this.subtype.add(\"Human\");\r\n        this.subtype.add(\"Soldier\");\r\n        \r\n\t\tthis.color.setWhite(true);\r\n        this.power = new MageInt(1);\r\n        this.toughness = new MageInt(1);\r\n        \r\n        this.addAbility(new BlocksTriggeredAbility(new LoyalSentryEffect(), false, true));\r\n    }","commit_id":"11b692fa4783006c3af19b12324e220e04a65f8d","url":"https://github.com/magefree/mage"},{"original_method":"public WallOfFrost(UUID ownerId) {\n\t\tsuper(ownerId, 80, \"Wall of Frost\", Rarity.UNCOMMON, new CardType[]{CardType.CREATURE}, \"{1}{U}{U}\");\n\t\tthis.expansionSetCode = \"M10\";\n\t\tthis.subtype.add(\"Wall\");\n\t\tthis.color.setBlue(true);\n\t\tthis.power = new MageInt(0);\n\t\tthis.toughness = new MageInt(7);\n\n\t\tthis.addAbility(DefenderAbility.getInstance());\n\t\tthis.addAbility(new WallOfFrostAbility());\n\t}","id":2870,"modified_method":"public WallOfFrost(UUID ownerId) {\n\t\tsuper(ownerId, 80, \"Wall of Frost\", Rarity.UNCOMMON, new CardType[]{CardType.CREATURE}, \"{1}{U}{U}\");\n\t\tthis.expansionSetCode = \"M10\";\n\t\tthis.subtype.add(\"Wall\");\n\t\tthis.color.setBlue(true);\n\t\tthis.power = new MageInt(0);\n\t\tthis.toughness = new MageInt(7);\n\n\t\tthis.addAbility(DefenderAbility.getInstance());\n\t\t// Whenever Wall of Frost blocks a creature, that creature doesn't untap during its controller's next untap step.\n\t\tthis.addAbility(new BlocksTriggeredAbility(new SkipNextUntapTargetEffect(), false, true));\n\t}","commit_id":"11b692fa4783006c3af19b12324e220e04a65f8d","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean checkTrigger(GameEvent event, Game game) {\r\n        if (event.getType() == GameEvent.EventType.DECLARED_ATTACKERS && game.getActivePlayerId().equals(this.controllerId) ) {\r\n            if (game.getCombat().attacksAlone()) {\r\n                TargetCreaturePermanent target = new TargetCreaturePermanent();\r\n                this.addTarget(target);\r\n                this.getTargets().get(0).add(game.getCombat().getAttackers().get(0),game);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }","id":2871,"modified_method":"@Override\r\n    public boolean checkTrigger(GameEvent event, Game game) {\r\n        if (event.getType() == EventType.DECLARED_ATTACKERS && game.getActivePlayerId().equals(this.controllerId) ) {\r\n            if (game.getCombat().attacksAlone()) {\r\n                for (Effect effect: this.getEffects()) {\r\n                    effect.setTargetPointer(new FixedTarget(game.getCombat().getAttackers().get(0)));\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }","commit_id":"1e947cb588436548804fbbae86c4326705dadcb7","url":"https://github.com/magefree/mage"},{"original_method":"public BattlegraceAngelAbility() {\r\n        super(Zone.BATTLEFIELD, new GainAbilityTargetEffect(LifelinkAbility.getInstance(), Duration.EndOfTurn));\r\n    }","id":2872,"modified_method":"public BattlegraceAngelAbility() {\r\n        super(Zone.BATTLEFIELD, new GainAbilityTargetEffect(LifelinkAbility.getInstance(), Duration.EndOfTurn), false);\r\n    }","commit_id":"1e947cb588436548804fbbae86c4326705dadcb7","url":"https://github.com/magefree/mage"},{"original_method":"public void buildBox()\n    {\n  \t  //-------------------------------------------------------\n        // Fill Color menu\n        //-------------------------------------------------------\n        //TODO: need to come back here and move these tooltips into properties. -mikek         \n        Color [] fillColors = VueResources.getColorArray(\"fillColorValues\");\n        String [] fillColorNames = VueResources.getStringArray(\"fillColorNames\");\n        mFillColorButton = new ColorMenuButton(fillColors, fillColorNames, true);\n        mFillColorButton.setPropertyKey(LWKey.FillColor);\n        mFillColorButton.setColor(VueResources.getColor(\"defaultFillColor\"));\n        mFillColorButton.setToolTipText(\"Fill Color\");\n        mFillColorButton.addPropertyChangeListener(this); // always last or we get prop change events for setup\n         \n        //-------------------------------------------------------\n        // Stroke Color menu\n        //-------------------------------------------------------\n        \n        Color[] strokeColors = VueResources.getColorArray(\"strokeColorValues\");\n        String[] strokeColorNames = VueResources.getStringArray(\"strokeColorNames\");\n        mStrokeColorButton = new ColorMenuButton(strokeColors, strokeColorNames, true);\n        mStrokeColorButton.setPropertyKey(LWKey.StrokeColor);\n        mStrokeColorButton.setColor(VueResources.getColor(\"defaultStrokeColor\"));\n        //mStrokeColorButton.setButtonIcon(new LineIcon(16,16, 4, false));\n        mStrokeColorButton.setToolTipText(\"Stroke Color\");\n        mStrokeColorButton.addPropertyChangeListener(this);\n       GridBagConstraints gbc = new GridBagConstraints();\n     \tgbc.insets = new Insets(3,3,5,3);    \n        gbc.gridx = 0;\n \t\tgbc.gridy = 0;    \t\t\n \t\tgbc.gridwidth = 1;\n \t\tgbc.gridheight=1;\n \t\tgbc.fill = GridBagConstraints.VERTICAL; // the label never grows\n \t\tgbc.anchor = GridBagConstraints.NORTHEAST;\n \t\t\n \t\tJLabel fillLabel = new JLabel(\"Fill: \");\n \t\tfillLabel.setForeground(new Color(51,51,51));\n \t\tfillLabel.setFont(tufts.vue.VueConstants.SmallFont);\n \t\tgetBox().add(fillLabel,gbc);\n         \n        gbc.gridx = 0;\n \t\tgbc.gridy = 1;    \t\t\n \t\tgbc.gridwidth = 1; // next-to-last in row\n \t\tgbc.gridheight=1;\n \t\tgbc.insets = new Insets(8,3,1,3);\n \t\tgbc.fill = GridBagConstraints.VERTICAL; // the label never grows\n \t\tgbc.anchor = GridBagConstraints.NORTHEAST;\n \t\tJLabel lineLabel = new JLabel(\"Line: \");\n \t\tlineLabel.setForeground(new Color(51,51,51));\n \t\tlineLabel.setFont(tufts.vue.VueConstants.SmallFont);\n \t\tgetBox().add(lineLabel,gbc);\n         \n \t\t  if (addComponent(mFillColorButton))\n \t        {\n \t\t\t  \tgbc.gridx = 1;\n \t\t\t \tgbc.gridy = 0;    \t\t\t\t\n \t \t\t\tgbc.fill = GridBagConstraints.NONE; // the label never grows\n \t \t\t\tgbc.insets = new Insets(1,2,4,3);\n \t \t\t\tgbc.anchor = GridBagConstraints.SOUTHWEST;\n \t    \t\tgetBox().add(mFillColorButton, gbc);\n \t        }\n \t        if (addComponent(mStrokeColorButton))\n \t        {\n \t        \tgbc.gridx = 1;\n \t      \t\tgbc.gridy = 1;    \t\t\t\t\n \t      \t\tgbc.fill = GridBagConstraints.NONE; // the label never grows\n \t      \t\tgbc.insets = new Insets(4,2,1,3);\n\t      \t\tgbc.anchor = GridBagConstraints.SOUTHWEST;\t\t\n \t    \t\tgetBox().add(mStrokeColorButton, gbc); \t        \t\n \t        }\n     \t\n        \n         \n        \n                  \n    }","id":2873,"modified_method":"public void buildBox()\n    {\n  \t  //-------------------------------------------------------\n        // Fill Color menu\n        //-------------------------------------------------------\n        //TODO: need to come back here and move these tooltips into properties. -mikek         \n        Color [] fillColors = VueResources.getColorArray(\"fillColorValues\");\n        String [] fillColorNames = VueResources.getStringArray(\"fillColorNames\");\n        mFillColorButton = new ColorMenuButton(fillColors, fillColorNames, true);\n        mFillColorButton.setPropertyKey(LWKey.FillColor);\n        mFillColorButton.setColor(VueResources.getColor(\"defaultFillColor\"));\n        mFillColorButton.setToolTipText(\"Fill Color\");\n        //mFillColorButton.addPropertyChangeListener(this); // always last or we get prop change events for setup\n         \n        //-------------------------------------------------------\n        // Stroke Color menu\n        //-------------------------------------------------------\n        \n        Color[] strokeColors = VueResources.getColorArray(\"strokeColorValues\");\n        String[] strokeColorNames = VueResources.getStringArray(\"strokeColorNames\");\n        mStrokeColorButton = new ColorMenuButton(strokeColors, strokeColorNames, true);\n        mStrokeColorButton.setPropertyKey(LWKey.StrokeColor);\n        mStrokeColorButton.setColor(VueResources.getColor(\"defaultStrokeColor\"));\n        //mStrokeColorButton.setButtonIcon(new LineIcon(16,16, 4, false));\n        mStrokeColorButton.setToolTipText(\"Stroke Color\");\n        //mStrokeColorButton.addPropertyChangeListener(this);\n       GridBagConstraints gbc = new GridBagConstraints();\n     \tgbc.insets = new Insets(3,3,5,3);    \n        gbc.gridx = 0;\n \t\tgbc.gridy = 0;    \t\t\n \t\tgbc.gridwidth = 1;\n \t\tgbc.gridheight=1;\n \t\tgbc.fill = GridBagConstraints.VERTICAL; // the label never grows\n \t\tgbc.anchor = GridBagConstraints.NORTHEAST;\n \t\t\n \t\tJLabel fillLabel = new JLabel(\"Fill: \");\n                fillLabel.setLabelFor(mFillColorButton);\n \t\tfillLabel.setForeground(new Color(51,51,51));\n \t\tfillLabel.setFont(tufts.vue.VueConstants.SmallFont);\n \t\tgetBox().add(fillLabel,gbc);\n         \n        gbc.gridx = 0;\n \t\tgbc.gridy = 1;    \t\t\n \t\tgbc.gridwidth = 1; // next-to-last in row\n \t\tgbc.gridheight=1;\n \t\tgbc.insets = new Insets(8,3,1,3);\n \t\tgbc.fill = GridBagConstraints.VERTICAL; // the label never grows\n \t\tgbc.anchor = GridBagConstraints.NORTHEAST;\n \t\tJLabel lineLabel = new JLabel(\"Line: \");\n                lineLabel.setLabelFor(mStrokeColorButton);\n \t\tlineLabel.setForeground(new Color(51,51,51));\n \t\tlineLabel.setFont(tufts.vue.VueConstants.SmallFont);\n \t\tgetBox().add(lineLabel,gbc);\n         \n \t\t  if (addComponent(mFillColorButton))\n \t        {\n \t\t\t  \tgbc.gridx = 1;\n \t\t\t \tgbc.gridy = 0;    \t\t\t\t\n \t \t\t\tgbc.fill = GridBagConstraints.NONE; // the label never grows\n \t \t\t\tgbc.insets = new Insets(1,2,4,3);\n \t \t\t\tgbc.anchor = GridBagConstraints.SOUTHWEST;\n \t    \t\tgetBox().add(mFillColorButton, gbc);\n \t        }\n \t        if (addComponent(mStrokeColorButton))\n \t        {\n \t        \tgbc.gridx = 1;\n \t      \t\tgbc.gridy = 1;    \t\t\t\t\n \t      \t\tgbc.fill = GridBagConstraints.NONE; // the label never grows\n \t      \t\tgbc.insets = new Insets(4,2,1,3);\n\t      \t\tgbc.anchor = GridBagConstraints.SOUTHWEST;\t\t\n \t    \t\tgetBox().add(mStrokeColorButton, gbc); \t        \t\n \t        }\n     \t\n        \n         \n        \n                  \n    }","commit_id":"5f8edbf6063ec326b2e4b2e25d77603f2ac4f5ca","url":"https://github.com/VUE/VUE"},{"original_method":"public FontEditorPanel(Object propertyKey)\n    {\n    \t//super(BoxLayout.X_AXIS);\n    \tsetLayout(new GridBagLayout());\n\n        mPropertyKey = propertyKey;\n\n        //setFocusable(false);\n        \n        //Box box = Box.createHorizontalBox();\n        // we set this border only to create a gap around these components\n        // so they don't expand to 100% of the height of the region they're\n        // in -- okay, that's not good enough -- will have to find another\n        // way to constrain the combo-box.\n        /*\n        if (true)\n            setBorder(new LineBorder(Color.pink, VertSqueeze));\n        else\n            setBorder(new EmptyBorder(VertSqueeze,1,VertSqueeze,1));//t,l,b,r\n        */\n\n        mFontCombo = new JComboBox(getFontNames());\n        Font f = mFontCombo.getFont();\n        Font menuFont = f.deriveFont((float) 9);        \n        mFontCombo.setFont(menuFont);\n        mFontCombo.setPrototypeDisplayValue(\"Ludica Sans Typewriter\"); // biggest font name to bother sizing to\n        if (false) {\n            Dimension comboSize = mFontCombo.getPreferredSize();\n            comboSize.height -= 2; // if too small (eg, -3), will trigger major swing layout bug\n            mFontCombo.setMaximumSize(comboSize);\n        }\n        if (GUI.isMacAqua())\n            mFontCombo.setBorder(new EmptyBorder(1,0,0,0));\n\n        mFontCombo.setOpaque(false);\n        mFontCombo.addActionListener(new LWPropertyHandler<String>(LWKey.FontName, mFontCombo) {\n                public String produceValue() { return (String) mFontCombo.getSelectedItem(); }\n                public void displayValue(String value) { mFontCombo.setSelectedItem(value); }\n            });\n        \n        //mFontCombo.setBorder(new javax.swing.border.LineBorder(Color.green, 2));\n        //mFontCombo.setBackground(Color.white); // handled by L&F tweaks in VUE.java\n        //mFontCombo.setMaximumSize(new Dimension(50,50)); // no effect\n        //mFontCombo.setSize(new Dimension(50,50)); // no effect\n        //mFontCombo.setBorder(null); // already has no border\n\n        //mSizeField = new NumericField( NumericField.POSITIVE_INTEGER, 2 );\n        \n        if (sFontSizes == null)\n            sFontSizes = VueResources.getStringArray(\"fontSizes\");\n        mSizeField = new JComboBox(sFontSizes);\n  //      mSizeField.setPrototypeDisplayValue(\"10000\");\n        mSizeField.setEditable(true);\n        mSizeField.setOpaque(false);\n        \n        /*\n        if (GUI.isMacAqua()) {\n            mFontCombo.setBackground(VueTheme.getToolbarColor());\n            mSizeField.setBackground(VueTheme.getToolbarColor());\n        } else {\n            mFontCombo.setBackground(VueTheme.getVueColor());\n            mSizeField.setBackground(VueTheme.getVueColor());\n        }\n        */\n        \n        //mSizeField.setPrototypeDisplayValue(\"100\"); // no help in making it smaller\n        //System.out.println(\"EDITOR \" + mSizeField.getEditor());\n        //System.out.println(\"EDITOR-COMP \" + mSizeField.getEditor().getEditorComponent());\n\n        if (mSizeField.getEditor().getEditorComponent() instanceof JTextField) {\n           JTextField sizeEditor = (JTextField) mSizeField.getEditor().getEditorComponent();\n            sizeEditor.setColumns(3); // not exactly character columns\n        }\n            /*\n            if (!GUI.isMacAqua()) {\n                try {\n                    sizeEditor.setBackground(VueTheme.getTheme().getMenuBackground());\n                } catch (Exception e) {\n                    System.err.println(\"FontEditorPanel: \" + e);\n                }\n            }\n            */\n            //sizeEditor.setPreferredSize(new Dimension(20,10)); // does squat\n            \n            // the default size for a combo-box editor field is 9 chars\n            // wide, and it's NOT configurable thru system L&F properties\n            // -- it's hardcoded into Basic and Metal look and feels!  God\n            // knows what will happen on windows L&F.  BTW: windows look\n            // and feel has better combo-boxes -- they display menu\n            // contents in sizes bigger than the top display box\n            // (actually, both do that when they can resize), and they're\n            // picking up more of our color override settings (and the\n            // at-right button appears closer to Melanie's comps).\n//        }\n\n        //mSizeField.getEditor().getEditorComponent().setSize(30,10);\n        \n        //mSizeField.addActionListener( this);\n        mSizeField.addActionListener(new LWPropertyHandler<Integer>(LWKey.FontSize, mSizeField) {\n                public Integer produceValue() { return new Integer((String) mSizeField.getSelectedItem()); }\n                public void displayValue(Integer value) { mSizeField.setSelectedItem(\"\"+value); }\n            });\n\n\n        f = mSizeField.getFont();\n        //Font sizeFont = f.deriveFont((float) f.getSize()-2);\n        Font sizeFont= f.deriveFont((float) 9);        \n        mSizeField.setFont( sizeFont);\n        //mSizeField.setMaximumSize(mSizeField.getPreferredSize());\n        //mSizeField.setBackground(VueTheme.getVueColor());\n\n        final ActionListener styleChangeHandler =\n            new LWPropertyHandler<Integer>(LWKey.FontStyle) {\n                public Integer produceValue() {\n                    int style = Font.PLAIN;\n                    if (mItalicButton.isSelected())\n                        style |= Font.ITALIC;\n                    if (mBoldButton.isSelected())\n                        style |= Font.BOLD;\n                    \n                    return style;\n                }\n                public void displayValue(Integer value) {\n                    final int style = value;\n                    mBoldButton.setSelected((style & Font.BOLD) != 0);\n                    mItalicButton.setSelected((style & Font.ITALIC) != 0);\n                }\n                public void setEnabled(boolean enabled) {\n                    mBoldButton.setEnabled(enabled);\n                    mItalicButton.setEnabled(enabled);\n                }\n        };\n \t\t\n        mBoldButton = new VueButton.Toggle(\"font.button.bold\", styleChangeHandler);\n        mItalicButton = new VueButton.Toggle(\"font.button.italic\", styleChangeHandler);\n        mUnderlineButton = new VueButton.Toggle(\"font.button.underline\", styleChangeHandler);\n        alignmentButton = new AlignmentDropDown();\n        \n         Color[] textColors = VueResources.getColorArray(\"textColorValues\");\n        String[] textColorNames = VueResources.getStringArray(\"textColorNames\");\n        mTextColorButton = new ColorMenuButton(textColors, textColorNames, true);\n        mTextColorButton.setColor(Color.black);\n        mTextColorButton.setPropertyKey(LWKey.TextColor);\n        mTextColorButton.setToolTipText(\"Text Color\");\n        mTextColorButton.addPropertyChangeListener(this);\n        \n        //Set up Labels...\n        JLabel styleLabel = new JLabel(\"Style :\");\n\t\tstyleLabel.setForeground(new Color(51,51,51));\n\t\tstyleLabel.setFont(tufts.vue.VueConstants.SmallFont);\n\t\t\n\t\tJLabel textLabel = new JLabel(\"Text :\");\n\t\ttextLabel.setForeground(new Color(51,51,51));\n\t\ttextLabel.setFont(tufts.vue.VueConstants.SmallFont);\t\t\n\t\t//Done With Labels..\n         \n        GridBagConstraints gbc = new GridBagConstraints();\n        \n        //Layout Panel\n        gbc.gridx=0;\n        gbc.gridy=0;\n        gbc.gridwidth=1;\n        gbc.insets = new Insets(1,3,1,1);\n        gbc.anchor=GridBagConstraints.EAST;\n        gbc.fill=GridBagConstraints.BOTH;               \n    \t\n\t\tadd(textLabel,gbc);\n\t\t\n\t\t\n\t\tgbc.gridy=0;\n        gbc.gridx=1;        \n        gbc.gridwidth=5;\n        gbc.insets = new Insets(1,3,1,1);\n        gbc.anchor=GridBagConstraints.EAST;\n        gbc.fill=GridBagConstraints.BOTH;                                    \n        add(mFontCombo,gbc);\n        \n        gbc.gridy=0;\n        gbc.gridx=6;        \n        gbc.fill=GridBagConstraints.NONE;\n        gbc.anchor=GridBagConstraints.WEST;\n        gbc.gridwidth=1;\n        gbc.weightx=0.3;\n        //   gbc.gridheight=1;\n        gbc.ipady=5;\n        //gbc.ipadx=5;        \n        gbc.insets=new Insets(1,5,1,1);\n        add(mSizeField,gbc);\n        \n        gbc.gridy=0;\n        gbc.gridx=7;\n        gbc.fill=GridBagConstraints.REMAINDER;\n        gbc.anchor=GridBagConstraints.WEST;\n        gbc.gridheight=1;\n        gbc.gridwidth=1;\n        gbc.ipadx=0;\n        gbc.ipady=0;\n        gbc.insets=new Insets(0,1,1,1);\n        add(mTextColorButton,gbc);\n        \n        gbc.fill=GridBagConstraints.NONE;\n        gbc.anchor=GridBagConstraints.WEST;\n        gbc.gridwidth=1;\n        gbc.gridheight=0;\n        gbc.gridy=1;\n        gbc.gridx=0;        \n        add(styleLabel,gbc);\n        \n        \n        gbc.gridy=1;\n        gbc.gridx=1;\n        add(mBoldButton,gbc);\n        \n        gbc.gridy=1;\n        gbc.gridx=2;\n        add(mItalicButton,gbc);\n     \n        gbc.gridy=1;\n        gbc.gridx=3;        \n        gbc.fill=GridBagConstraints.NONE;\n        mUnderlineButton.setEnabled(false);\n        add(mUnderlineButton,gbc);\n        \n        \n                \n        \n        \n        //alignmentButton.setBorder(BorderFactory.createEmptyBorder());\n        //alignmentButton.getComboBox().setBorder(BorderFactory.createEmptyBorder());\n        //alignmentButton.getComboBox().setEnabled(false);\n        //add(alignmentButton,gbc);\n \t\n        //displayValue(VueConstants.FONT_DEFAULT);\n\n        //initColors(VueTheme.getToolbarColor());\n    }","id":2874,"modified_method":"public FontEditorPanel(Object propertyKey)\n    {\n    \t//super(BoxLayout.X_AXIS);\n    \tsetLayout(new GridBagLayout());\n\n        mPropertyKey = propertyKey;\n\n        //setFocusable(false);\n        \n        //Box box = Box.createHorizontalBox();\n        // we set this border only to create a gap around these components\n        // so they don't expand to 100% of the height of the region they're\n        // in -- okay, that's not good enough -- will have to find another\n        // way to constrain the combo-box.\n        /*\n        if (true)\n            setBorder(new LineBorder(Color.pink, VertSqueeze));\n        else\n            setBorder(new EmptyBorder(VertSqueeze,1,VertSqueeze,1));//t,l,b,r\n        */\n\n        mFontCombo = new JComboBox(getFontNames());\n        Font f = mFontCombo.getFont();\n        Font menuFont = f.deriveFont((float) 9);        \n        mFontCombo.setFont(menuFont);\n        mFontCombo.setPrototypeDisplayValue(\"Ludica Sans Typewriter\"); // biggest font name to bother sizing to\n        if (false) {\n            Dimension comboSize = mFontCombo.getPreferredSize();\n            comboSize.height -= 2; // if too small (eg, -3), will trigger major swing layout bug\n            mFontCombo.setMaximumSize(comboSize);\n        }\n        if (GUI.isMacAqua())\n            mFontCombo.setBorder(new EmptyBorder(1,0,0,0));\n\n        mFontCombo.setOpaque(false);\n        mFontCombo.addActionListener(new LWPropertyHandler<String>(LWKey.FontName, mFontCombo) {\n                public String produceValue() { return (String) mFontCombo.getSelectedItem(); }\n                public void displayValue(String value) { mFontCombo.setSelectedItem(value); }\n            });\n        \n        //mFontCombo.setBorder(new javax.swing.border.LineBorder(Color.green, 2));\n        //mFontCombo.setBackground(Color.white); // handled by L&F tweaks in VUE.java\n        //mFontCombo.setMaximumSize(new Dimension(50,50)); // no effect\n        //mFontCombo.setSize(new Dimension(50,50)); // no effect\n        //mFontCombo.setBorder(null); // already has no border\n\n        //mSizeField = new NumericField( NumericField.POSITIVE_INTEGER, 2 );\n        \n        if (sFontSizes == null)\n            sFontSizes = VueResources.getStringArray(\"fontSizes\");\n        mSizeField = new JComboBox(sFontSizes);\n  //      mSizeField.setPrototypeDisplayValue(\"10000\");\n        mSizeField.setEditable(true);\n        mSizeField.setOpaque(false);\n        \n        /*\n        if (GUI.isMacAqua()) {\n            mFontCombo.setBackground(VueTheme.getToolbarColor());\n            mSizeField.setBackground(VueTheme.getToolbarColor());\n        } else {\n            mFontCombo.setBackground(VueTheme.getVueColor());\n            mSizeField.setBackground(VueTheme.getVueColor());\n        }\n        */\n        \n        //mSizeField.setPrototypeDisplayValue(\"100\"); // no help in making it smaller\n        //System.out.println(\"EDITOR \" + mSizeField.getEditor());\n        //System.out.println(\"EDITOR-COMP \" + mSizeField.getEditor().getEditorComponent());\n\n        if (mSizeField.getEditor().getEditorComponent() instanceof JTextField) {\n           JTextField sizeEditor = (JTextField) mSizeField.getEditor().getEditorComponent();\n            sizeEditor.setColumns(3); // not exactly character columns\n        }\n            /*\n            if (!GUI.isMacAqua()) {\n                try {\n                    sizeEditor.setBackground(VueTheme.getTheme().getMenuBackground());\n                } catch (Exception e) {\n                    System.err.println(\"FontEditorPanel: \" + e);\n                }\n            }\n            */\n            //sizeEditor.setPreferredSize(new Dimension(20,10)); // does squat\n            \n            // the default size for a combo-box editor field is 9 chars\n            // wide, and it's NOT configurable thru system L&F properties\n            // -- it's hardcoded into Basic and Metal look and feels!  God\n            // knows what will happen on windows L&F.  BTW: windows look\n            // and feel has better combo-boxes -- they display menu\n            // contents in sizes bigger than the top display box\n            // (actually, both do that when they can resize), and they're\n            // picking up more of our color override settings (and the\n            // at-right button appears closer to Melanie's comps).\n//        }\n\n        //mSizeField.getEditor().getEditorComponent().setSize(30,10);\n        \n        //mSizeField.addActionListener( this);\n        mSizeField.addActionListener(new LWPropertyHandler<Integer>(LWKey.FontSize, mSizeField) {\n                public Integer produceValue() { return new Integer((String) mSizeField.getSelectedItem()); }\n                public void displayValue(Integer value) { mSizeField.setSelectedItem(\"\"+value); }\n            });\n\n\n        f = mSizeField.getFont();\n        //Font sizeFont = f.deriveFont((float) f.getSize()-2);\n        Font sizeFont= f.deriveFont((float) 9);        \n        mSizeField.setFont( sizeFont);\n        //mSizeField.setMaximumSize(mSizeField.getPreferredSize());\n        //mSizeField.setBackground(VueTheme.getVueColor());\n\n        final ActionListener styleChangeHandler =\n            new LWPropertyHandler<Integer>(LWKey.FontStyle) {\n                public Integer produceValue() {\n                    int style = Font.PLAIN;\n                    if (mItalicButton.isSelected())\n                        style |= Font.ITALIC;\n                    if (mBoldButton.isSelected())\n                        style |= Font.BOLD;\n                    \n                    return style;\n                }\n                public void displayValue(Integer value) {\n                    final int style = value;\n                    mBoldButton.setSelected((style & Font.BOLD) != 0);\n                    mItalicButton.setSelected((style & Font.ITALIC) != 0);\n                }\n\n                public void setEnabled(boolean enabled) {\n                    mBoldButton.setEnabled(enabled);\n                    mItalicButton.setEnabled(enabled);\n                    //mUnderlineButton.setEnabled(enabled);\n                }\n        };\n \t\t\n        mBoldButton = new VueButton.Toggle(\"font.button.bold\", styleChangeHandler);\n        mItalicButton = new VueButton.Toggle(\"font.button.italic\", styleChangeHandler);\n        mUnderlineButton = new VueButton.Toggle(\"font.button.underline\", styleChangeHandler);\n        alignmentButton = new AlignmentDropDown();\n        \n         Color[] textColors = VueResources.getColorArray(\"textColorValues\");\n        String[] textColorNames = VueResources.getStringArray(\"textColorNames\");\n        mTextColorButton = new ColorMenuButton(textColors, textColorNames, true);\n        mTextColorButton.setColor(Color.black);\n        mTextColorButton.setPropertyKey(LWKey.TextColor);\n        mTextColorButton.setToolTipText(\"Text Color\");\n        //mTextColorButton.addPropertyChangeListener(this);\n        \n        //Set up Labels...\n        JLabel styleLabel = new JLabel(\"Style :\");\n\t\tstyleLabel.setForeground(new Color(51,51,51));\n\t\tstyleLabel.setFont(tufts.vue.VueConstants.SmallFont);\n\t\t\n\t\tJLabel textLabel = new JLabel(\"Text :\");\n                textLabel.setLabelFor(mFontCombo);\n\t\ttextLabel.setForeground(new Color(51,51,51));\n\t\ttextLabel.setFont(tufts.vue.VueConstants.SmallFont);\t\t\n\t\t//Done With Labels..\n         \n        GridBagConstraints gbc = new GridBagConstraints();\n        \n        //Layout Panel\n        gbc.gridx=0;\n        gbc.gridy=0;\n        gbc.gridwidth=1;\n        gbc.insets = new Insets(1,3,1,1);\n        gbc.anchor=GridBagConstraints.EAST;\n        gbc.fill=GridBagConstraints.BOTH;               \n    \t\n\t\tadd(textLabel,gbc);\n\t\t\n\t\t\n\t\tgbc.gridy=0;\n        gbc.gridx=1;        \n        gbc.gridwidth=5;\n        gbc.insets = new Insets(1,3,1,1);\n        gbc.anchor=GridBagConstraints.EAST;\n        gbc.fill=GridBagConstraints.BOTH;                                    \n        add(mFontCombo,gbc);\n        \n        gbc.gridy=0;\n        gbc.gridx=6;        \n        gbc.fill=GridBagConstraints.NONE;\n        gbc.anchor=GridBagConstraints.WEST;\n        gbc.gridwidth=1;\n        gbc.weightx=0.3;\n        //   gbc.gridheight=1;\n        gbc.ipady=5;\n        //gbc.ipadx=5;        \n        gbc.insets=new Insets(1,5,1,1);\n        add(mSizeField,gbc);\n        \n        gbc.gridy=0;\n        gbc.gridx=7;\n        gbc.fill=GridBagConstraints.REMAINDER;\n        gbc.anchor=GridBagConstraints.WEST;\n        gbc.gridheight=1;\n        gbc.gridwidth=1;\n        gbc.ipadx=0;\n        gbc.ipady=0;\n        gbc.insets=new Insets(0,1,1,1);\n        add(mTextColorButton,gbc);\n        \n        gbc.fill=GridBagConstraints.NONE;\n        gbc.anchor=GridBagConstraints.WEST;\n        gbc.gridwidth=1;\n        gbc.gridheight=0;\n        gbc.gridy=1;\n        gbc.gridx=0;        \n        add(styleLabel,gbc);\n        \n        \n        gbc.gridy=1;\n        gbc.gridx=1;\n        add(mBoldButton,gbc);\n        \n        gbc.gridy=1;\n        gbc.gridx=2;\n        add(mItalicButton,gbc);\n     \n        gbc.gridy=1;\n        gbc.gridx=3;        \n        gbc.fill=GridBagConstraints.NONE;\n        mUnderlineButton.setEnabled(false);\n        add(mUnderlineButton,gbc);\n        \n        \n                \n        \n        \n        //alignmentButton.setBorder(BorderFactory.createEmptyBorder());\n        //alignmentButton.getComboBox().setBorder(BorderFactory.createEmptyBorder());\n        //alignmentButton.getComboBox().setEnabled(false);\n        //add(alignmentButton,gbc);\n \t\n        //displayValue(VueConstants.FONT_DEFAULT);\n\n        //initColors(VueTheme.getToolbarColor());\n    }","commit_id":"5f8edbf6063ec326b2e4b2e25d77603f2ac4f5ca","url":"https://github.com/VUE/VUE"},{"original_method":"/** @param c component to add to the box-row.  If an instance of LWPropertyProducer,\n     * also add to our tracking list of these for property updates */\n    public boolean addComponent(Component c) {\n        if (c == null)\n            return false;\n        //mBox.add(c);\n        if (c instanceof LWEditor) {\n            if (DEBUG.TOOL) System.out.println(\"*** FOUND AS EDITOR \" + c);\n            addEditor((LWEditor) c);\n        }\n        if (c instanceof java.awt.Container) {\n            // check for any editors in the children\n            new EventRaiser(this, JComponent.class) {\n                public void dispatch(Component c) {\n                    ActionListener[] al = c.getListeners(ActionListener.class);\n                    if (al == null || al.length == 0)\n                        return;\n                    //System.out.println(\"*** FOUND ACTIONLISTENERS \" + al.length + \" \" + c);\n                    //System.out.println(\"*** FOUND ACTIONLISTENERS \" + al.length + \" \" + c);\n                    for (ActionListener l : al) {\n                        if (l instanceof LWEditor) {\n                            if (DEBUG.TOOL) System.out.println(\"*** FOUND EDITOR \" + l + \" on \" + c);\n                            mEditors.add((LWEditor)l);\n                            //if (!mEditors.add((LWEditor)l)) out(\"would have duplicated edtior: \" + l);\n                        }\n                    }\n                }\n            }.raiseStartingAt((Container)c);\n        }\n        return true;\n    }","id":2875,"modified_method":"/** @param c component to add to the box-row.  If an instance of LWPropertyProducer,\n     * also add to our tracking list of these for property updates */\n    public boolean addComponent(Component c) {\n        out(\"addComponent IGNORED \" + c);\n\n        /*\n        if (c == null)\n            return false;\n        //mBox.add(c);\n        if (c instanceof LWEditor) {\n            if (DEBUG.TOOL) System.out.println(\"*** FOUND AS EDITOR \" + c);\n            addEditor((LWEditor) c);\n        }\n        if (c instanceof java.awt.Container) {\n            // check for any editors in the children\n            new EventRaiser<JComponent>(this, JComponent.class) {\n                public void dispatch(JComponent c) {\n                    ActionListener[] al = c.getListeners(ActionListener.class);\n                    if (al == null || al.length == 0)\n                        return;\n                    //System.out.println(\"*** FOUND ACTIONLISTENERS \" + al.length + \" \" + c);\n                    //System.out.println(\"*** FOUND ACTIONLISTENERS \" + al.length + \" \" + c);\n                    for (ActionListener l : al) {\n                        if (l instanceof LWEditor) {\n                            if (DEBUG.TOOL) System.out.println(\"*** FOUND EDITOR \" + l + \" on \" + c);\n                            mEditors.add((LWEditor)l);\n                            //if (!mEditors.add((LWEditor)l)) out(\"would have duplicated edtior: \" + l);\n                        }\n                    }\n                }\n            }.raiseStartingAt((Container)c);\n        }\n        */\n        return true;\n    }","commit_id":"5f8edbf6063ec326b2e4b2e25d77603f2ac4f5ca","url":"https://github.com/VUE/VUE"},{"original_method":"/** Will either modifiy the active selection, or if it's empty, modify the default state (creation state) for this tool panel */\n    public static void ApplyPropertyChangeToSelection(final LWSelection selection, final Object key, final Object newValue, Object source)\n    {\n        if (IgnoreEditorChangeEvents) {\n            if (DEBUG.TOOL) System.out.println(\"APCTS: \" + key + \" \" + newValue + \" (skipping)\");\n            return;\n        }\n        \n        if (DEBUG.TOOL) System.out.println(\"APCTS: \" + key + \" \" + newValue);\n        \n        if (selection.isEmpty()) {\n            /*\n            if (mDefaultState != null)\n                mDefaultState.setProperty(key, newValue);\n            else\n                System.out.println(\"mDefaultState is null\");\n            */\n            //if (DEBUG.TOOL && DEBUG.META) out(\"new state \" + mDefaultState); // need a style dumper\n        } else {\n            \n            // As setting these properties in the model will trigger notify events from the selected objects\n            // back up to the tools, we want to ignore those events while this is underway -- the tools\n            // already have their state set to this.\n            //mIgnoreLWCEvents = true;\n            try {\n                for (tufts.vue.LWComponent c : selection) {\n                    if (c.supportsProperty(key))\n                        c.setProperty(key, newValue);\n                }\n            } finally {\n                // mIgnoreLWCEvents = false;\n            }\n            \n            if (VUE.getUndoManager() != null)\n                VUE.getUndoManager().markChangesAsUndo(key.toString());\n        }\n    }","id":2876,"modified_method":"/** Will either modifiy the active selection, or if it's empty, modify the default state (creation state) for this tool panel */\n    private static void ApplyPropertyChangeToSelection(final LWSelection selection, final Object key, final Object newValue, Object source)\n    {\n        if (IgnoreEditorChangeEvents) {\n            if (DEBUG.TOOL) System.out.println(\"APCTS: \" + key + \" \" + newValue + \" (skipping)\");\n            return;\n        }\n        \n        if (DEBUG.TOOL) System.out.println(\"APCTS: \" + key + \" \" + newValue);\n        \n        if (selection.isEmpty()) {\n            /*\n            if (mDefaultState != null)\n                mDefaultState.setProperty(key, newValue);\n            else\n                System.out.println(\"mDefaultState is null\");\n            */\n            //if (DEBUG.TOOL && DEBUG.META) out(\"new state \" + mDefaultState); // need a style dumper\n        } else {\n            \n            // As setting these properties in the model will trigger notify events from the selected objects\n            // back up to the tools, we want to ignore those events while this is underway -- the tools\n            // already have their state set to this.\n            //mIgnoreLWCEvents = true;\n            try {\n                for (tufts.vue.LWComponent c : selection) {\n                    if (c.supportsProperty(key))\n                        c.setProperty(key, newValue);\n                }\n            } finally {\n                // mIgnoreLWCEvents = false;\n            }\n            \n            if (VUE.getUndoManager() != null)\n                VUE.getUndoManager().markChangesAsUndo(key.toString());\n        }\n    }","commit_id":"5f8edbf6063ec326b2e4b2e25d77603f2ac4f5ca","url":"https://github.com/VUE/VUE"},{"original_method":"protected void buildBox()\n    {\n        //-------------------------------------------------------\n        // Stroke Width menu\n        //-------------------------------------------------------\n        \n        float[] strokeValues = VueResources.getFloatArray(\"strokeWeightValues\");\n        String[] strokeMenuLabels = VueResources.getStringArray(\"strokeWeightNames\");\n        mStrokeButton = new StrokeMenuButton(strokeValues, strokeMenuLabels, true, false);\n        mStrokeButton.setPropertyKey(LWKey.StrokeWidth);\n        //mStrokeButton.setButtonIcon(new LineIcon(16,16));\n        mStrokeButton.setStroke(1f);\n        mStrokeButton.setToolTipText(\"Stroke Width\");\n        mStrokeButton.addPropertyChangeListener(this);\n        \n    \t//-------------------------------------------------------\n        // Stroke Style menu\n        //-------------------------------------------------------\n        \n        mStrokeStyleButton = new StrokeStyleButton();\n        mStrokeStyleButton.setPropertyKey(LWKey.StrokeStyle);\n        mStrokeStyleButton.addPropertyChangeListener(this);\n        \n        \n        final Action[] LinkTypeActions = new Action[] { \n            Actions.LinkMakeStraight,\n            Actions.LinkMakeQuadCurved,\n            Actions.LinkMakeCubicCurved\n        };\n        \n        Integer[] i = new Integer[4];\n\t\ti[0]= new Integer(0);\n\t\ti[1]= new Integer(1);\n\t\ti[2]= new Integer(2);\n\t\ti[3]= new Integer(3);\n\t\t\n        AbstractButton linkTypeMenu = new VuePopupMenu(LWKey.LinkCurves, LinkTypeActions);\n        linkTypeMenu.setToolTipText(\"Link Style\");\n        linkTypeMenu.addPropertyChangeListener(this);\n        \n        //LWCToolPanel.InstallHandler(mArrowStartButton, arrowPropertyHandler);\n        //LWCToolPanel.InstallHandler(mArrowEndButton, arrowPropertyHandler);\n\n        // We can't just rely on the each handler hanging free without knowing about it.\n        // It works when the editor activates -- we can find which tool panel it's in\n        // (up the AWT chain), and could find the right default state to work with\n        // (node/link/text, etc).  But when a selection happens and the tool panel needs\n        // to LOAD UP all these property editors, this is the only way we can know about\n        // it...  Otherwise, we'd have to make every LWPropertyHandler a selection\n        // listener in it's own right (tho this wouldn't be instance, given that every\n        // single action in the system is also a selection listener!)\n        \n        //super.addEditor(arrowPropertyHandler);\n\n        //mArrowStartButton.addActionListener(arrowPropertyHandler);\n        //mArrowEndButton.addActionListener(arrowPropertyHandler);\n        //mArrowStartButton.addItemListener(arrowPropertyHandler);\n        //mArrowEndButton.addItemListener(arrowPropertyHandler);\n\n        //mArrowStartButton.addItemListener(arrowPropertyHandler);\n        //mArrowEndButton.addItemListener(arrowPropertyHandler);\n        GridBagConstraints gbc = new GridBagConstraints();\n        \n        //addComponent(linkTypeMenu);\n        \t\n        mBox.setLayout(new GridBagLayout());\n    \t\n        gbc.insets = new Insets(1,3,1,1);\n\t\tgbc.gridx = 0;\n\t\tgbc.gridy = 0;    \t\t\t\t\n\t\tgbc.gridwidth=1;\n\t\tgbc.fill = GridBagConstraints.VERTICAL; // the label never grows\n\t\tgbc.anchor = GridBagConstraints.EAST;\n\t\tJLabel strokeLabel = new JLabel(\"Stroke :\");\n\t\tstrokeLabel.setForeground(new Color(51,51,51));\n\t\tstrokeLabel.setFont(tufts.vue.VueConstants.SmallFont);\n\t\tmBox.add(strokeLabel,gbc);\n\t\t\n\t\tgbc.gridx = 0;\n\t\tgbc.gridy = 1;    \t\t\t\t\n\t\tgbc.gridwidth=1;\n\t\tgbc.fill = GridBagConstraints.VERTICAL; // the label never grows\n\t\tgbc.anchor = GridBagConstraints.EAST;\n\t\tJLabel weightLabel = new JLabel(\"Weight :\");\n\t\tweightLabel.setForeground(new Color(51,51,51));\n\t\tweightLabel.setFont(tufts.vue.VueConstants.SmallFont);\n\t\tmBox.add(weightLabel,gbc);\n\t\t\n\t\tgbc.gridx = 1;\n\t\tgbc.gridy = 0;    \t\t\n\t\tgbc.insets = new Insets(1,1,1,3);\n\t//\tgbc.gridwidth=1;\n\t//\tgbc.gridheight=1;\t\t\n\t\t//gbc.ipady=8;\n\t\t//gbc.ipadx=5;\n\t\tgbc.fill = GridBagConstraints.BOTH; // the label never grows\n\t\tgbc.anchor = GridBagConstraints.WEST;\n\t\tmBox.add(mStrokeStyleButton,gbc);\n\t\t\n\t\t       \n        if (addComponent(mStrokeButton))\n        {        \t\n        \t//gbc.ipady=2;\n        \t//gbc.ipadx=4;\n        \tgbc.gridx = 1;\n    \t\tgbc.gridy = 1;    \t\t\n    \t//\tgbc.gridwidth=1;\n    \t//\tgbc.gridheight=1;\n    \t\tgbc.fill = GridBagConstraints.BOTH; // the label never grows\n    \t\tgbc.anchor = GridBagConstraints.WEST;\n    \t\tmStrokeButton.setSelectedIndex(1);\n    \t\tmBox.add(mStrokeButton,gbc);\n        }                \n    }","id":2877,"modified_method":"protected void buildBox()\n    {\n        //-------------------------------------------------------\n        // Stroke Width menu\n        //-------------------------------------------------------\n        \n        float[] strokeValues = VueResources.getFloatArray(\"strokeWeightValues\");\n        String[] strokeMenuLabels = VueResources.getStringArray(\"strokeWeightNames\");\n        mStrokeButton = new StrokeMenuButton(strokeValues, strokeMenuLabels, true, false);\n        mStrokeButton.setPropertyKey(LWKey.StrokeWidth);\n        //mStrokeButton.setButtonIcon(new LineIcon(16,16));\n        mStrokeButton.setToolTipText(\"Stroke Width\");\n        //mStrokeButton.addPropertyChangeListener(this);\n        \n    \t//-------------------------------------------------------\n        // Stroke Style menu\n        //-------------------------------------------------------\n        \n        mStrokeStyleButton = new StrokeStyleButton();\n        mStrokeStyleButton.setPropertyKey(LWKey.StrokeStyle);\n        //mStrokeStyleButton.addPropertyChangeListener(this);\n        \n        \n        final Action[] LinkTypeActions = new Action[] { \n            Actions.LinkMakeStraight,\n            Actions.LinkMakeQuadCurved,\n            Actions.LinkMakeCubicCurved\n        };\n        \n        Integer[] i = new Integer[4];\n\t\ti[0]= new Integer(0);\n\t\ti[1]= new Integer(1);\n\t\ti[2]= new Integer(2);\n\t\ti[3]= new Integer(3);\n\t\t\n        AbstractButton linkTypeMenu = new VuePopupMenu(LWKey.LinkCurves, LinkTypeActions);\n        linkTypeMenu.setToolTipText(\"Link Style\");\n        //linkTypeMenu.addPropertyChangeListener(this);\n        \n        //LWCToolPanel.InstallHandler(mArrowStartButton, arrowPropertyHandler);\n        //LWCToolPanel.InstallHandler(mArrowEndButton, arrowPropertyHandler);\n\n        // We can't just rely on the each handler hanging free without knowing about it.\n        // It works when the editor activates -- we can find which tool panel it's in\n        // (up the AWT chain), and could find the right default state to work with\n        // (node/link/text, etc).  But when a selection happens and the tool panel needs\n        // to LOAD UP all these property editors, this is the only way we can know about\n        // it...  Otherwise, we'd have to make every LWPropertyHandler a selection\n        // listener in it's own right (tho this wouldn't be instance, given that every\n        // single action in the system is also a selection listener!)\n        \n        //super.addEditor(arrowPropertyHandler);\n\n        //mArrowStartButton.addActionListener(arrowPropertyHandler);\n        //mArrowEndButton.addActionListener(arrowPropertyHandler);\n        //mArrowStartButton.addItemListener(arrowPropertyHandler);\n        //mArrowEndButton.addItemListener(arrowPropertyHandler);\n\n        //mArrowStartButton.addItemListener(arrowPropertyHandler);\n        //mArrowEndButton.addItemListener(arrowPropertyHandler);\n        GridBagConstraints gbc = new GridBagConstraints();\n        \n        //addComponent(linkTypeMenu);\n        \t\n        mBox.setLayout(new GridBagLayout());\n    \t\n        gbc.insets = new Insets(1,3,1,1);\n\t\tgbc.gridx = 0;\n\t\tgbc.gridy = 0;    \t\t\t\t\n\t\tgbc.gridwidth=1;\n\t\tgbc.fill = GridBagConstraints.VERTICAL; // the label never grows\n\t\tgbc.anchor = GridBagConstraints.EAST;\n\t\tJLabel strokeLabel = new JLabel(\"Stroke :\");\n\t\tstrokeLabel.setLabelFor(mStrokeStyleButton);\n\t\tstrokeLabel.setForeground(new Color(51,51,51));\n\t\tstrokeLabel.setFont(tufts.vue.VueConstants.SmallFont);\n\t\tmBox.add(strokeLabel,gbc);\n\t\t\n\t\tgbc.gridx = 0;\n\t\tgbc.gridy = 1;    \t\t\t\t\n\t\tgbc.gridwidth=1;\n\t\tgbc.fill = GridBagConstraints.VERTICAL; // the label never grows\n\t\tgbc.anchor = GridBagConstraints.EAST;\n\t\tJLabel weightLabel = new JLabel(\"Weight :\");\n                weightLabel.setLabelFor(mStrokeButton);\n\t\tweightLabel.setForeground(new Color(51,51,51));\n\t\tweightLabel.setFont(tufts.vue.VueConstants.SmallFont);\n\t\tmBox.add(weightLabel,gbc);\n\t\t\n\t\tgbc.gridx = 1;\n\t\tgbc.gridy = 0;    \t\t\n\t\tgbc.insets = new Insets(1,1,1,3);\n\t//\tgbc.gridwidth=1;\n\t//\tgbc.gridheight=1;\t\t\n\t\t//gbc.ipady=8;\n\t\t//gbc.ipadx=5;\n\t\tgbc.fill = GridBagConstraints.BOTH; // the label never grows\n\t\tgbc.anchor = GridBagConstraints.WEST;\n\t\tmBox.add(mStrokeStyleButton,gbc);\n\t\t\n\t\t       \n        if (addComponent(mStrokeButton))\n        {        \t\n        \t//gbc.ipady=2;\n        \t//gbc.ipadx=4;\n        \tgbc.gridx = 1;\n    \t\tgbc.gridy = 1;    \t\t\n    \t//\tgbc.gridwidth=1;\n    \t//\tgbc.gridheight=1;\n    \t\tgbc.fill = GridBagConstraints.BOTH; // the label never grows\n    \t\tgbc.anchor = GridBagConstraints.WEST;\n    \t\tmStrokeButton.setSelectedIndex(1);\n    \t\tmBox.add(mStrokeButton,gbc);\n        }                \n    }","commit_id":"5f8edbf6063ec326b2e4b2e25d77603f2ac4f5ca","url":"https://github.com/VUE/VUE"},{"original_method":"public void displayValue(LWComponent.StrokeStyle style) {\n\t            setToolTipText(\"Stroke Style: \" + style);\n\t            //if (getButtonIcon() instanceof LineIcon) {\n\t            //    LineIcon icon = (LineIcon) getButtonIcon();\n\t            //    icon.setStroke(style.makeStroke(1));\n\t            //    repaint();\n\t           // }\n\t            mCurrentValue = style;\n\t        }","id":2878,"modified_method":"public void displayValue(LWComponent.StrokeStyle style) {\n\t            setToolTipText(\"Stroke Style: \" + style);\n\t            mCurrentValue = style;\n                    setSelectedIndex(style.ordinal());\n\t        }","commit_id":"5f8edbf6063ec326b2e4b2e25d77603f2ac4f5ca","url":"https://github.com/VUE/VUE"},{"original_method":"public void buildBox()\n    {\n    \t ShapeMenuButton mShapeButton = new ShapeMenuButton();\n    \t LinkMenuButton mLinkButton = new LinkMenuButton();\n         //JLabel label = new JLabel(\"   Node: \");\n         //label.setFont(VueConstants.FONT_SMALL);\n         GridBagConstraints gbc = new GridBagConstraints();\n     \t    \n        gbc.gridx = 0;\n \t\tgbc.gridy = 0;    \t\t\n \t\tgbc.gridwidth = 1;\n \t\tgbc.gridheight=1;\n \t\tgbc.insets= new Insets(0,3,0,0);\n \t\tgbc.fill = GridBagConstraints.VERTICAL; // the label never grows\n \t\tgbc.anchor = GridBagConstraints.EAST;\n \t\t\n \t\tJLabel shapeLabel = new JLabel(\"Shape: \");\n \t\tshapeLabel.setForeground(new Color(51,51,51));\n \t\tshapeLabel.setFont(tufts.vue.VueConstants.SmallFont);\n \t\tgetBox().add(shapeLabel,gbc);\n         \n        gbc.gridx = 0;\n \t\tgbc.gridy = 1;    \t\t\n \t\tgbc.gridwidth = 1; // next-to-last in row\n \t\tgbc.gridheight=1;\n \t\tgbc.fill = GridBagConstraints.VERTICAL; // the label never grows\n \t\tgbc.anchor = GridBagConstraints.EAST;\n \t\tJLabel strokeLabel = new JLabel(\"Line: \");\n \t\tstrokeLabel.setForeground(new Color(51,51,51));\n \t\tstrokeLabel.setFont(tufts.vue.VueConstants.SmallFont);\n \t\tgetBox().add(strokeLabel,gbc);\n         \n     \tgbc.gridx = 1;\n \t\tgbc.gridy = 0;    \t\t\t\t\n \t\tgbc.fill = GridBagConstraints.NONE; // the label never grows\n \t\tgbc.insets = new Insets(1,1,1,5);\n \t\tgbc.anchor = GridBagConstraints.WEST;\n         getBox().add(mShapeButton, gbc);\n         \n         gbc.gridx = 1;\n  \t\tgbc.gridy = 1;    \t\t\t\t\n  \t\tgbc.fill = GridBagConstraints.BOTH; // the label never grows\n  \t\tgbc.insets = new Insets(1,1,1,5);\n  \t\tgbc.anchor = GridBagConstraints.WEST;\n         getBox().add(mLinkButton,gbc);\n         \n         mShapeButton.addPropertyChangeListener(this);\n         mLinkButton.addPropertyChangeListener(this);\n         //addEditor(mLinkButton);\n         \n         //add(mShapeButton);\n         //getBox().add(label, 0);\n         //getBox().add(label, 0);\n    }","id":2879,"modified_method":"public void buildBox()\n    {\n    \t ShapeMenuButton mShapeButton = new ShapeMenuButton();\n    \t LinkMenuButton mLinkButton = new LinkMenuButton();\n         //JLabel label = new JLabel(\"   Node: \");\n         //label.setFont(VueConstants.FONT_SMALL);\n         GridBagConstraints gbc = new GridBagConstraints();\n     \t    \n        gbc.gridx = 0;\n \t\tgbc.gridy = 0;    \t\t\n \t\tgbc.gridwidth = 1;\n \t\tgbc.gridheight=1;\n \t\tgbc.insets= new Insets(0,3,0,0);\n \t\tgbc.fill = GridBagConstraints.VERTICAL; // the label never grows\n \t\tgbc.anchor = GridBagConstraints.EAST;\n \t\t\n \t\tJLabel shapeLabel = new JLabel(\"Shape: \");\n \t\tshapeLabel.setForeground(new Color(51,51,51));\n \t\tshapeLabel.setFont(tufts.vue.VueConstants.SmallFont);\n \t\tgetBox().add(shapeLabel,gbc);\n         \n        gbc.gridx = 0;\n \t\tgbc.gridy = 1;    \t\t\n \t\tgbc.gridwidth = 1; // next-to-last in row\n \t\tgbc.gridheight=1;\n \t\tgbc.fill = GridBagConstraints.VERTICAL; // the label never grows\n \t\tgbc.anchor = GridBagConstraints.EAST;\n \t\tJLabel strokeLabel = new JLabel(\"Line: \");\n \t\tstrokeLabel.setForeground(new Color(51,51,51));\n \t\tstrokeLabel.setFont(tufts.vue.VueConstants.SmallFont);\n \t\tgetBox().add(strokeLabel,gbc);\n         \n     \tgbc.gridx = 1;\n \t\tgbc.gridy = 0;    \t\t\t\t\n \t\tgbc.fill = GridBagConstraints.NONE; // the label never grows\n \t\tgbc.insets = new Insets(1,1,1,5);\n \t\tgbc.anchor = GridBagConstraints.WEST;\n         getBox().add(mShapeButton, gbc);\n         \n         gbc.gridx = 1;\n  \t\tgbc.gridy = 1;    \t\t\t\t\n  \t\tgbc.fill = GridBagConstraints.BOTH; // the label never grows\n  \t\tgbc.insets = new Insets(1,1,1,5);\n  \t\tgbc.anchor = GridBagConstraints.WEST;\n         getBox().add(mLinkButton,gbc);\n         \n         //mShapeButton.addPropertyChangeListener(this);\n         //mLinkButton.addPropertyChangeListener(this);\n         //addEditor(mLinkButton);\n         \n         //add(mShapeButton);\n         //getBox().add(label, 0);\n         //getBox().add(label, 0);\n    }","commit_id":"5f8edbf6063ec326b2e4b2e25d77603f2ac4f5ca","url":"https://github.com/VUE/VUE"},{"original_method":"private synchronized void syncVerificationKey(File keyDir) {\n            File keyFile = new File(keyDir, KeyManager.KEYFILE_PUBLIC_SIGNING);\n            boolean exists = (_signingPublicKey != null);\n            if (!exists)\n                _signingPublicKey  = new SigningPublicKey();\n            _signingPublicKey  = (SigningPublicKey)syncKey(keyFile, _signingPublicKey, exists);\n        }","id":2880,"modified_method":"private synchronized void syncVerificationKey(File keyDir) {\n            DataStructure ds;\n            File keyFile = new File(keyDir, KEYFILE_PUBLIC_SIGNING);\n            boolean exists = (_signingPublicKey != null);\n            if (exists)\n                ds = _signingPublicKey;\n            else\n                ds = new SigningPublicKey();\n            DataStructure readin = syncKey(keyFile, ds, exists);\n            if (readin != null && !exists)\n                _signingPublicKey  = (SigningPublicKey) readin;\n        }","commit_id":"570d8d15af3d26155eff217af01ddd4522e9eab2","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"private void queueWrite() {\n        Clock cl = _context.clock();\n        JobQueue q = _context.jobQueue();\n        if ( (cl == null) || (q == null) ) return;\n        _synchronizeJob.getTiming().setStartAfter(cl.now());\n        q.addJob(_synchronizeJob);\n    }","id":2881,"modified_method":"/**\n     *  Wait one second, as this will get called 4 times in quick succession\n     *  There is still a race here though, if a key is set while the sync job is running\n     */\n    private void queueWrite() {\n        Clock cl = _context.clock();\n        JobQueue q = _context.jobQueue();\n        if ( (cl == null) || (q == null) ) return;\n        _synchronizeJob.getTiming().setStartAfter(cl.now() + 1000);\n        q.addJob(_synchronizeJob);\n    }","commit_id":"570d8d15af3d26155eff217af01ddd4522e9eab2","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"private synchronized void syncSigningKey(File keyDir) {\n            File keyFile = new File(keyDir, KeyManager.KEYFILE_PRIVATE_SIGNING);\n            boolean exists = (_signingPrivateKey != null);\n            if (!exists)\n                _signingPrivateKey = new SigningPrivateKey();\n            _signingPrivateKey = (SigningPrivateKey)syncKey(keyFile, _signingPrivateKey, exists);\n        }","id":2882,"modified_method":"private synchronized void syncSigningKey(File keyDir) {\n            DataStructure ds;\n            File keyFile = new File(keyDir, KEYFILE_PRIVATE_SIGNING);\n            boolean exists = (_signingPrivateKey != null);\n            if (exists)\n                ds = _signingPrivateKey;\n            else\n                ds = new SigningPrivateKey();\n            DataStructure readin = syncKey(keyFile, ds, exists);\n            if (readin != null && !exists)\n                _signingPrivateKey = (SigningPrivateKey) readin;\n        }","commit_id":"570d8d15af3d26155eff217af01ddd4522e9eab2","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"private synchronized void syncPrivateKey(File keyDir) {\n            File keyFile = new File(keyDir, KeyManager.KEYFILE_PRIVATE_ENC);\n            boolean exists = (_privateKey != null);\n            if (!exists)\n                _privateKey = new PrivateKey();\n            _privateKey = (PrivateKey)syncKey(keyFile, _privateKey, exists);\n        }","id":2883,"modified_method":"private synchronized void syncPrivateKey(File keyDir) {\n            DataStructure ds;\n            File keyFile = new File(keyDir, KEYFILE_PRIVATE_ENC);\n            boolean exists = (_privateKey != null);\n            if (exists)\n                ds = _privateKey;\n            else\n                ds = new PrivateKey();\n            DataStructure readin = syncKey(keyFile, ds, exists);\n            if (readin != null && !exists)\n                _privateKey = (PrivateKey) readin;\n        }","commit_id":"570d8d15af3d26155eff217af01ddd4522e9eab2","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"private synchronized void syncPublicKey(File keyDir) {\n            File keyFile = new File(keyDir, KeyManager.KEYFILE_PUBLIC_ENC);\n            boolean exists = (_publicKey != null);\n            if (!exists)\n                _publicKey = new PublicKey();\n            _publicKey = (PublicKey)syncKey(keyFile, _publicKey, exists);\n        }","id":2884,"modified_method":"private synchronized void syncPublicKey(File keyDir) {\n            DataStructure ds;\n            File keyFile = new File(keyDir, KEYFILE_PUBLIC_ENC);\n            boolean exists = (_publicKey != null);\n            if (exists)\n                ds = _publicKey;\n            else\n                ds = new PublicKey();\n            DataStructure readin = syncKey(keyFile, ds, exists);\n            if (readin != null && !exists)\n                _publicKey = (PublicKey) readin;\n        }","commit_id":"570d8d15af3d26155eff217af01ddd4522e9eab2","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"@Override\n    public QueueStateImpl constructQueueState(QueueConsumer consumer, QueueConfig config, ReadPointer readPointer)\n                                                       throws OperationException {\n      // ACTIVE_ENTRY contains the entry if any that is dequeued, but not acked\n      // CONSUMER_READ_POINTER + 1 points to the next entry that can be read by this queue consuemr\n      readQueueStateStore.setRowKey(makeRowKey(CONSUMER_META_PREFIX, consumer.getGroupId(), consumer.getInstanceId()));\n      readQueueStateStore.addColumnName(ACTIVE_ENTRY);\n      readQueueStateStore.addColumnName(ACTIVE_ENTRY_CRASH_TRIES);\n      readQueueStateStore.addColumnName(CONSUMER_READ_POINTER);\n      readQueueStateStore.addColumnName(LAST_EVICT_TIME_IN_SECS);\n      readQueueStateStore.read(readPointer);\n\n      OperationResult<Map<byte[], byte[]>> stateBytes = readQueueStateStore.getReadResult();\n      QueueStateImpl queueState = new QueueStateImpl();\n      if(!stateBytes.isEmpty()) {\n        // Read active entry\n        queueState.setActiveEntryId(Bytes.toLong(stateBytes.getValue().get(ACTIVE_ENTRY)));\n        queueState.setActiveEntryTries(Bytes.toInt(stateBytes.getValue().get(ACTIVE_ENTRY_CRASH_TRIES)));\n\n        // Read consumer read pointer\n        byte[] consumerReadPointerBytes = stateBytes.getValue().get(CONSUMER_READ_POINTER);\n        if(consumerReadPointerBytes != null) {\n          queueState.setConsumerReadPointer(Bytes.toLong(consumerReadPointerBytes));\n        }\n\n        // Note: last evict time is read while constructing state, but it is only saved after finalize\n        byte[] lastEvictTimeInSecsBytes = stateBytes.getValue().get(LAST_EVICT_TIME_IN_SECS);\n        if(lastEvictTimeInSecsBytes != null) {\n          queueState.setLastEvictTimeInSecs(Bytes.toLong(lastEvictTimeInSecsBytes));\n        }\n      }\n\n      // Read queue write pointer\n      // TODO: use raw Get instead of the workaround of incrementing zero\n      long queueWritePointer = table.incrementAtomicDirtily(makeRowName(GLOBAL_ENTRY_ID_PREFIX), GLOBAL_ENTRYID_COUNTER, 0);\n      queueState.setQueueWritePointer(queueWritePointer);\n\n      // If active entry is present, read that from storage\n      // This is the crash recovery case, the consumer has stopped processing before acking the previous dequeue\n      if(queueState.getActiveEntryId() != INVALID_ENTRY_ID) {\n        if(queueState.getActiveEntryTries() < MAX_CRASH_DEQUEUE_TRIES) {\n          queueState.setActiveEntryTries(queueState.getActiveEntryTries() + 1);\n          readEntries(consumer, config, queueState, readPointer, Collections.singletonList(queueState.getActiveEntryId()));\n          // Set the active entry as the current entry\n          if(queueState.getCachedEntries().hasNext()) {\n            queueState.getCachedEntries().getNext();\n          }\n        } else {\n          // TODO: what do we do with the active entry?\n          if(LOG.isTraceEnabled()) {\n            logTrace(String.format(\"Ignoring dequeue of entry %d after %d tries\", queueState.getActiveEntryId(), MAX_CRASH_DEQUEUE_TRIES));\n          }\n          queueState.setActiveEntryId(INVALID_ENTRY_ID);\n          queueState.setActiveEntryTries(0);\n        }\n      }\n      if(LOG.isTraceEnabled()) {\n        logTrace(String.format(\"Constructed new QueueState - %s\", queueState));\n      }\n      return queueState;\n    }","id":2885,"modified_method":"@Override\n    public QueueStateImpl constructQueueState(QueueConsumer consumer, QueueConfig config, ReadPointer readPointer)\n                                                       throws OperationException {\n      // ACTIVE_ENTRY contains the entry if any that is dequeued, but not acked\n      // CONSUMER_READ_POINTER + 1 points to the next entry that can be read by this queue consuemr\n      readQueueStateStore.setRowKey(makeRowKey(CONSUMER_META_PREFIX, consumer.getGroupId(), consumer.getInstanceId()));\n      readQueueStateStore.addColumnName(ACTIVE_ENTRY);\n      readQueueStateStore.addColumnName(ACTIVE_ENTRY_CRASH_TRIES);\n      readQueueStateStore.addColumnName(CONSUMER_READ_POINTER);\n      readQueueStateStore.addColumnName(LAST_EVICT_TIME_IN_SECS);\n      readQueueStateStore.read(readPointer);\n\n      OperationResult<Map<byte[], byte[]>> stateBytes = readQueueStateStore.getReadResult();\n      QueueStateImpl queueState = new QueueStateImpl();\n      if(!stateBytes.isEmpty()) {\n        // Read active entry\n        queueState.setActiveEntryId(Bytes.toLong(stateBytes.getValue().get(ACTIVE_ENTRY)));\n        queueState.setActiveEntryTries(Bytes.toInt(stateBytes.getValue().get(ACTIVE_ENTRY_CRASH_TRIES)));\n\n        // Read consumer read pointer\n        byte[] consumerReadPointerBytes = stateBytes.getValue().get(CONSUMER_READ_POINTER);\n        if(consumerReadPointerBytes != null) {\n          queueState.setConsumerReadPointer(Bytes.toLong(consumerReadPointerBytes));\n        }\n\n        // Note: last evict time is read while constructing state, but it is only saved after finalize\n        byte[] lastEvictTimeInSecsBytes = stateBytes.getValue().get(LAST_EVICT_TIME_IN_SECS);\n        if(lastEvictTimeInSecsBytes != null) {\n          queueState.setLastEvictTimeInSecs(Bytes.toLong(lastEvictTimeInSecsBytes));\n        }\n      }\n\n      // Read queue write pointer\n      // TODO: use raw Get instead of the workaround of incrementing zero\n      long queueWritePointer = table.incrementAtomicDirtily(makeRowName(GLOBAL_ENTRY_ID_PREFIX), GLOBAL_ENTRYID_COUNTER, 0);\n      queueState.setQueueWritePointer(queueWritePointer);\n\n      // If active entry is present, read that from storage\n      // This is the crash recovery case, the consumer has stopped processing before acking the previous dequeue\n      if(queueState.getActiveEntryId() != INVALID_ENTRY_ID) {\n        if(queueState.getActiveEntryTries() < MAX_CRASH_DEQUEUE_TRIES) {\n          queueState.setActiveEntryTries(queueState.getActiveEntryTries() + 1);\n          readEntries(consumer, config, queueState, readPointer, Collections.singletonList(queueState.getActiveEntryId()));\n          // Set the active entry as the current entry\n          if(queueState.getCachedEntries().hasNext()) {\n            queueState.getCachedEntries().getNext();\n          }\n        } else {\n          // TODO: what do we do with the active entry?\n          if(LOG.isTraceEnabled()) {\n            LOG.trace(getLogMessage(String.format(\"Ignoring dequeue of entry %d after %d tries\", queueState.getActiveEntryId(), MAX_CRASH_DEQUEUE_TRIES)));\n          }\n          queueState.setActiveEntryId(INVALID_ENTRY_ID);\n          queueState.setActiveEntryTries(0);\n        }\n      }\n      if(LOG.isTraceEnabled()) {\n        LOG.trace(getLogMessage(String.format(\"Constructed new QueueState - %s\", queueState)));\n      }\n      return queueState;\n    }","commit_id":"acbdf1241d61253ab1b208f784a403a604afe908","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void ack(QueueEntryPointer entryPointer, QueueConsumer consumer, ReadPointer readPointer)\n    throws OperationException {\n    // TODO: 1. Later when active entry can saved in memory, there is no need to write it into HBase\n    // TODO: 2. Need to treat Ack as a simple write operation so that it can use a simple write rollback for unack\n    // TODO: 3. Use Transaction.getWriteVersion instead ReadPointer\n\n    QueuePartitioner partitioner = consumer.getQueueConfig().getPartitionerType().getPartitioner();\n    final DequeueStrategy dequeueStrategy = getDequeueStrategy(partitioner);\n\n    // Get queue state\n    QueueStateImpl queueState = getQueueState(consumer, readPointer);\n\n    // Only the entry that has been dequeued (active entry) can be acked\n    if(queueState.getActiveEntryId() != entryPointer.getEntryId()) {\n      throw new OperationException(StatusCode.ILLEGAL_ACK, String.format(\n        \"Queue-%s: Entry %d is not the active entry. Current active entry is %d\", Bytes.toString(queueName),\n        entryPointer.getEntryId(), queueState.getActiveEntryId()));\n    }\n\n    // Set ack state\n    queueState.setActiveEntryId(INVALID_ENTRY_ID);\n    queueState.setActiveEntryTries(0);\n\n    // Write ack state\n    dequeueStrategy.saveDequeueState(consumer, consumer.getQueueConfig(), queueState, readPointer);\n  }","id":2886,"modified_method":"@Override\n  public void ack(QueueEntryPointer entryPointer, QueueConsumer consumer, ReadPointer readPointer)\n    throws OperationException {\n    // TODO: 1. Later when active entry can saved in memory, there is no need to write it into HBase\n    // TODO: 2. Need to treat Ack as a simple write operation so that it can use a simple write rollback for unack\n    // TODO: 3. Use Transaction.getWriteVersion instead ReadPointer\n\n    QueuePartitioner partitioner = consumer.getQueueConfig().getPartitionerType().getPartitioner();\n    final DequeueStrategy dequeueStrategy = getDequeueStrategy(partitioner);\n\n    // Get queue state\n    QueueStateImpl queueState = getQueueState(consumer, readPointer);\n\n    // Only the entry that has been dequeued (active entry) can be acked\n    if(queueState.getActiveEntryId() != entryPointer.getEntryId()) {\n      throw new OperationException(StatusCode.ILLEGAL_ACK,\n        getLogMessage(String.format(\"Entry %d is not the active entry. Current active entry is %d\",\n                            entryPointer.getEntryId(), queueState.getActiveEntryId())));\n    }\n\n    // Set ack state\n    queueState.setActiveEntryId(INVALID_ENTRY_ID);\n    queueState.setActiveEntryTries(0);\n\n    // Write ack state\n    dequeueStrategy.saveDequeueState(consumer, consumer.getQueueConfig(), queueState, readPointer);\n  }","commit_id":"acbdf1241d61253ab1b208f784a403a604afe908","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public List<Long> fetchNextEntries(\n      QueueConsumer consumer, QueueConfig config, QueueStateImpl queueState, ReadPointer readPointer) throws OperationException {\n      long entryId = queueState.getConsumerReadPointer();\n      QueuePartitioner partitioner=config.getPartitionerType().getPartitioner();\n      List<Long> newEntryIds = new ArrayList<Long>();\n\n      outerLoop:\n      while (newEntryIds.isEmpty()) {\n        if(entryId >= queueState.getQueueWritePointer()) {\n          // Reached the end of queue as per cached QueueWritePointer,\n          // read it again to see if there is any progress made by producers\n          // TODO: use raw Get instead of the workaround of incrementing zero\n          long queueWritePointer = table.incrementAtomicDirtily(makeRowName(GLOBAL_ENTRY_ID_PREFIX), GLOBAL_ENTRYID_COUNTER, 0);\n          queueState.setQueueWritePointer(queueWritePointer);\n          if(LOG.isTraceEnabled()) {\n            logTrace(String.format(\"New queueWritePointer = %d\", queueWritePointer));\n          }\n          // If still no progress, return empty queue\n          if(entryId >= queueState.getQueueWritePointer()) {\n            return Collections.EMPTY_LIST;\n          }\n        }\n\n        final long batchSize = getBatchSize(config);\n        long startEntryId = entryId + 1;\n        long endEntryId =\n                startEntryId + (batchSize * consumer.getGroupSize()) < queueState.getQueueWritePointer() ?\n                    startEntryId + (batchSize * consumer.getGroupSize()) : queueState.getQueueWritePointer();\n\n        // Read  header data from underlying storage, if any\n        final int cacheSize = (int)(endEntryId - startEntryId + 1);\n        final String partitioningKey = consumer.getPartitioningKey();\n        if(partitioningKey == null || partitioningKey.isEmpty()) {\n          throw new OperationException(StatusCode.INTERNAL_ERROR,\n            String.format(\"Queue-%s: Using Hash Partitioning with null/empty partitioningKey.\", Bytes.toString(queueName)));\n        }\n        final byte [][] rowKeys = new byte[cacheSize][];\n        for(int id = 0; id < cacheSize; ++id) {\n          rowKeys[id] = makeRowKey(GLOBAL_DATA_PREFIX, startEntryId + id);\n        }\n        final byte[][] columnKeys = new byte[1][];\n        columnKeys[0] = makeColumnName(ENTRY_HEADER, partitioningKey);\n        OperationResult<Map<byte[], Map<byte[], byte[]>>> headerResult = table.get(rowKeys, columnKeys, readPointer);\n\n        // Determine which entries  need to be read from storage\n        for(int id = 0; id < cacheSize; ++id) {\n          final long currentEntryId = startEntryId + id;\n          if (!headerResult.isEmpty()) {\n            Map<byte[], Map<byte[], byte[]>> headerValue = headerResult.getValue();\n            Map<byte[], byte[]> headerMap = headerValue.get(rowKeys[id]);\n            if(headerMap == null) {\n              break outerLoop;\n            }\n            byte[] hashBytes = headerMap.get(columnKeys[0]);\n            if(hashBytes == null) {\n              break outerLoop;\n            }\n            int hashValue = Bytes.toInt(hashBytes);\n            if(partitioner.shouldEmit(consumer, currentEntryId, hashValue)) {\n              newEntryIds.add(currentEntryId);\n            }\n          } else {\n            // Not able to read header\n            break outerLoop;\n          }\n        }\n        entryId = endEntryId;\n      }\n      return newEntryIds;\n    }","id":2887,"modified_method":"@Override\n    public List<Long> fetchNextEntries(\n      QueueConsumer consumer, QueueConfig config, QueueStateImpl queueState, ReadPointer readPointer) throws OperationException {\n      long entryId = queueState.getConsumerReadPointer();\n      QueuePartitioner partitioner=config.getPartitionerType().getPartitioner();\n      List<Long> newEntryIds = new ArrayList<Long>();\n\n      outerLoop:\n      while (newEntryIds.isEmpty()) {\n        if(entryId >= queueState.getQueueWritePointer()) {\n          // Reached the end of queue as per cached QueueWritePointer,\n          // read it again to see if there is any progress made by producers\n          // TODO: use raw Get instead of the workaround of incrementing zero\n          long queueWritePointer = table.incrementAtomicDirtily(makeRowName(GLOBAL_ENTRY_ID_PREFIX), GLOBAL_ENTRYID_COUNTER, 0);\n          queueState.setQueueWritePointer(queueWritePointer);\n          if(LOG.isTraceEnabled()) {\n            LOG.trace(getLogMessage(String.format(\"New queueWritePointer = %d\", queueWritePointer)));\n          }\n          // If still no progress, return empty queue\n          if(entryId >= queueState.getQueueWritePointer()) {\n            return Collections.EMPTY_LIST;\n          }\n        }\n\n        final long batchSize = getBatchSize(config);\n        long startEntryId = entryId + 1;\n        long endEntryId =\n                startEntryId + (batchSize * consumer.getGroupSize()) < queueState.getQueueWritePointer() ?\n                    startEntryId + (batchSize * consumer.getGroupSize()) : queueState.getQueueWritePointer();\n\n        // Read  header data from underlying storage, if any\n        final int cacheSize = (int)(endEntryId - startEntryId + 1);\n        final String partitioningKey = consumer.getPartitioningKey();\n        if(partitioningKey == null || partitioningKey.isEmpty()) {\n          throw new OperationException(StatusCode.INTERNAL_ERROR,\n            getLogMessage(\"Using Hash Partitioning with null/empty partitioningKey.\"));\n        }\n        final byte [][] rowKeys = new byte[cacheSize][];\n        for(int id = 0; id < cacheSize; ++id) {\n          rowKeys[id] = makeRowKey(GLOBAL_DATA_PREFIX, startEntryId + id);\n        }\n        final byte[][] columnKeys = new byte[1][];\n        columnKeys[0] = makeColumnName(ENTRY_HEADER, partitioningKey);\n        OperationResult<Map<byte[], Map<byte[], byte[]>>> headerResult = table.get(rowKeys, columnKeys, readPointer);\n\n        // Determine which entries  need to be read from storage\n        for(int id = 0; id < cacheSize; ++id) {\n          final long currentEntryId = startEntryId + id;\n          if (!headerResult.isEmpty()) {\n            Map<byte[], Map<byte[], byte[]>> headerValue = headerResult.getValue();\n            Map<byte[], byte[]> headerMap = headerValue.get(rowKeys[id]);\n            if(headerMap == null) {\n              break outerLoop;\n            }\n            byte[] hashBytes = headerMap.get(columnKeys[0]);\n            if(hashBytes == null) {\n              break outerLoop;\n            }\n            int hashValue = Bytes.toInt(hashBytes);\n            if(partitioner.shouldEmit(consumer, currentEntryId, hashValue)) {\n              newEntryIds.add(currentEntryId);\n            }\n          } else {\n            // Not able to read header\n            break outerLoop;\n          }\n        }\n        entryId = endEntryId;\n      }\n      return newEntryIds;\n    }","commit_id":"acbdf1241d61253ab1b208f784a403a604afe908","url":"https://github.com/caskdata/cdap"},{"original_method":"private DequeueStrategy getDequeueStrategy(QueuePartitioner queuePartitioner) throws OperationException {\n    DequeueStrategy dequeueStrategy;\n    if(queuePartitioner instanceof QueuePartitioner.HashPartitioner) {\n      dequeueStrategy = new HashDequeueStrategy();\n    } else if(queuePartitioner instanceof QueuePartitioner.RoundRobinPartitioner) {\n      dequeueStrategy = new RoundRobinDequeueStrategy();\n    } else if(queuePartitioner instanceof QueuePartitioner.FifoPartitioner) {\n      dequeueStrategy = new FifoDequeueStrategy();\n    } else {\n      throw new OperationException(StatusCode.INTERNAL_ERROR,\n         String.format(\"Queue-%s: Cannot figure out the dequeue strategy to use for partitioner %s\",\n                       Bytes.toString(queueName), queuePartitioner.getClass()));\n    }\n    return dequeueStrategy;\n  }","id":2888,"modified_method":"private DequeueStrategy getDequeueStrategy(QueuePartitioner queuePartitioner) throws OperationException {\n    DequeueStrategy dequeueStrategy;\n    if(queuePartitioner instanceof QueuePartitioner.HashPartitioner) {\n      dequeueStrategy = new HashDequeueStrategy();\n    } else if(queuePartitioner instanceof QueuePartitioner.RoundRobinPartitioner) {\n      dequeueStrategy = new RoundRobinDequeueStrategy();\n    } else if(queuePartitioner instanceof QueuePartitioner.FifoPartitioner) {\n      dequeueStrategy = new FifoDequeueStrategy();\n    } else {\n      throw new OperationException(StatusCode.INTERNAL_ERROR,\n         getLogMessage(String.format(\"Cannot figure out the dequeue strategy to use for partitioner %s\", queuePartitioner.getClass())));\n    }\n    return dequeueStrategy;\n  }","commit_id":"acbdf1241d61253ab1b208f784a403a604afe908","url":"https://github.com/caskdata/cdap"},{"original_method":"private QueueStateImpl getQueueState(QueueConsumer consumer, ReadPointer readPointer) throws OperationException {\n    // Determine what dequeue strategy to use based on the partitioner\n    final DequeueStrategy dequeueStrategy = getDequeueStrategy(consumer.getQueueConfig().getPartitionerType().getPartitioner());\n\n    QueueStateImpl queueState;\n    // If QueueState is null, read the queue state from underlying storage.\n    if(consumer.getQueueState() == null) {\n      queueState = dequeueStrategy.constructQueueState(consumer, consumer.getQueueConfig(), readPointer);\n    } else {\n      if(! (consumer.getQueueState() instanceof QueueStateImpl)) {\n        throw new OperationException(StatusCode.INTERNAL_ERROR,\n                     String.format(\"Queue-%s: Don't know how to use QueueState class %s\",\n                                   Bytes.toString(queueName), consumer.getQueueState().getClass()));\n      }\n      queueState = (QueueStateImpl) consumer.getQueueState();\n    }\n    consumer.setQueueState(queueState);\n    return queueState;\n  }","id":2889,"modified_method":"private QueueStateImpl getQueueState(QueueConsumer consumer, ReadPointer readPointer) throws OperationException {\n    // Determine what dequeue strategy to use based on the partitioner\n    final DequeueStrategy dequeueStrategy = getDequeueStrategy(consumer.getQueueConfig().getPartitionerType().getPartitioner());\n\n    QueueStateImpl queueState;\n    // If QueueState is null, read the queue state from underlying storage.\n    if(consumer.getQueueState() == null) {\n      queueState = dequeueStrategy.constructQueueState(consumer, consumer.getQueueConfig(), readPointer);\n    } else {\n      if(! (consumer.getQueueState() instanceof QueueStateImpl)) {\n        throw new OperationException(StatusCode.INTERNAL_ERROR,\n              getLogMessage(String.format(\"Don't know how to use QueueState class %s\", consumer.getQueueState().getClass())));\n      }\n      queueState = (QueueStateImpl) consumer.getQueueState();\n    }\n    consumer.setQueueState(queueState);\n    return queueState;\n  }","commit_id":"acbdf1241d61253ab1b208f784a403a604afe908","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public EnqueueResult enqueue(QueueEntry entry, long cleanWriteVersion) throws OperationException {\n    byte[] data = entry.getData();\n    if (LOG.isTraceEnabled()) {\n      logTrace(\"Enqueueing (data.len=\" + data.length + \", writeVersion=\" + cleanWriteVersion + \")\");\n    }\n\n    // Get our unique entry id\n    long entryId;\n    try {\n      // Make sure the increment below uses increment operation of the underlying implementation directly\n      // so that it is atomic (Eg. HBase increment operation)\n      entryId = this.table.incrementAtomicDirtily(makeRowName(GLOBAL_ENTRY_ID_PREFIX), GLOBAL_ENTRYID_COUNTER, 1);\n    } catch (OperationException e) {\n      throw new OperationException(StatusCode.INTERNAL_ERROR,\n         String.format(\"Queue-%s: Increment of global entry id failed with status code %d : %s\",\n                       Bytes.toString(queueName), e.getStatus(), e.getMessage()), e);\n    }\n    if (LOG.isTraceEnabled()) {\n      logTrace(\"New enqueue got entry id \" + entryId);\n    }\n\n    /*\n    Insert entry with version=<cleanWriteVersion> and\n    row-key = <queueName>20D<entryId> , column/value 20D/<data>, 10M/EntryState.VALID, 30H<partitionKey>/<hashValue>\n    */\n\n    final int size = entry.getPartitioningMap().size() + 2;\n    byte[][] colKeys = new byte[size][];\n    byte[][] colValues = new byte[size][];\n\n    int colKeyIndex = 0;\n    int colValueIndex = 0;\n    colKeys[colKeyIndex++] = ENTRY_DATA;\n    colKeys[colKeyIndex++] = ENTRY_META;\n    colValues[colValueIndex++] = data;\n    colValues[colValueIndex++] = new EntryMeta(EntryMeta.EntryState.VALID).getBytes();\n    for(Map.Entry<String, Integer> e : entry.getPartitioningMap().entrySet()) {\n      colKeys[colKeyIndex++] = makeColumnName(ENTRY_HEADER, e.getKey());\n      colValues[colValueIndex++] = Bytes.toBytes(e.getValue());\n    }\n\n    this.table.put(makeRowKey(GLOBAL_DATA_PREFIX, entryId),\n                   colKeys,\n                   cleanWriteVersion,\n                   colValues);\n\n    // Return success with pointer to entry\n    return new EnqueueResult(EnqueueResult.EnqueueStatus.SUCCESS, new QueueEntryPointer(this.queueName, entryId));\n  }","id":2890,"modified_method":"@Override\n  public EnqueueResult enqueue(QueueEntry entry, long cleanWriteVersion) throws OperationException {\n    byte[] data = entry.getData();\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(getLogMessage(\"Enqueueing (data.len=\" + data.length + \", writeVersion=\" + cleanWriteVersion + \")\"));\n    }\n\n    // Get our unique entry id\n    long entryId;\n    try {\n      // Make sure the increment below uses increment operation of the underlying implementation directly\n      // so that it is atomic (Eg. HBase increment operation)\n      entryId = this.table.incrementAtomicDirtily(makeRowName(GLOBAL_ENTRY_ID_PREFIX), GLOBAL_ENTRYID_COUNTER, 1);\n    } catch (OperationException e) {\n      throw new OperationException(StatusCode.INTERNAL_ERROR,\n         getLogMessage(String.format(\"Increment of global entry id failed with status code %d : %s\", e.getStatus(), e.getMessage())), e);\n    }\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(getLogMessage(\"New enqueue got entry id \" + entryId));\n    }\n\n    /*\n    Insert entry with version=<cleanWriteVersion> and\n    row-key = <queueName>20D<entryId> , column/value 20D/<data>, 10M/EntryState.VALID, 30H<partitionKey>/<hashValue>\n    */\n\n    final int size = entry.getPartitioningMap().size() + 2;\n    byte[][] colKeys = new byte[size][];\n    byte[][] colValues = new byte[size][];\n\n    int colKeyIndex = 0;\n    int colValueIndex = 0;\n    colKeys[colKeyIndex++] = ENTRY_DATA;\n    colKeys[colKeyIndex++] = ENTRY_META;\n    colValues[colValueIndex++] = data;\n    colValues[colValueIndex++] = new EntryMeta(EntryMeta.EntryState.VALID).getBytes();\n    for(Map.Entry<String, Integer> e : entry.getPartitioningMap().entrySet()) {\n      colKeys[colKeyIndex++] = makeColumnName(ENTRY_HEADER, e.getKey());\n      colValues[colValueIndex++] = Bytes.toBytes(e.getValue());\n    }\n\n    this.table.put(makeRowKey(GLOBAL_DATA_PREFIX, entryId),\n                   colKeys,\n                   cleanWriteVersion,\n                   colValues);\n\n    // Return success with pointer to entry\n    return new EnqueueResult(EnqueueResult.EnqueueStatus.SUCCESS, new QueueEntryPointer(this.queueName, entryId));\n  }","commit_id":"acbdf1241d61253ab1b208f784a403a604afe908","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public DequeueResult dequeue(QueueConsumer consumer, ReadPointer readPointer) throws OperationException {\n    final QueueConfig config = consumer.getQueueConfig();\n    if (LOG.isTraceEnabled()) {\n      logTrace(\"Attempting dequeue [curNumDequeues=\" + this.dequeueReturns.get() +\n                  \"] (\" + consumer + \", \" + config + \", \" + readPointer + \")\");\n    }\n\n    // Determine what dequeue strategy to use based on the partitioner\n    final DequeueStrategy dequeueStrategy = getDequeueStrategy(config.getPartitionerType().getPartitioner());\n\n    QueueStateImpl queueState = getQueueState(consumer, readPointer);\n\n    // If the previous entry was not acked, return the same one (Note: will need to change for async mode)\n    if(queueState.getActiveEntryId() != INVALID_ENTRY_ID) {\n      if(!queueState.getCachedEntries().hasCurrent()) {\n        throw new OperationException(StatusCode.INTERNAL_ERROR,\n                String.format(\"Queue-%s: Cannot fetch active entry id from cached entries\", Bytes.toString(queueName)));\n      }\n      QueueStateEntry cachedEntry = queueState.getCachedEntries().getCurrent();\n      QueueEntry entry = new QueueEntry(cachedEntry.getData());\n      dequeueStrategy.saveDequeueState(consumer, config, queueState, readPointer);\n      DequeueResult dequeueResult = new DequeueResult(DequeueResult.DequeueStatus.SUCCESS,\n                                                      new QueueEntryPointer(this.queueName, cachedEntry.getEntryId()), entry);\n      return dequeueResult;\n    }\n\n    // If no more cached entries, read entries from storage\n    if(!queueState.getCachedEntries().hasNext()) {\n      List<Long> entryIds = dequeueStrategy.fetchNextEntries(consumer, config, queueState, readPointer);\n      readEntries(consumer, config, queueState, readPointer, entryIds);\n    }\n\n    if(queueState.getCachedEntries().hasNext()) {\n      QueueStateEntry cachedEntry = queueState.getCachedEntries().getNext();\n      this.dequeueReturns.incrementAndGet();\n      queueState.setActiveEntryId(cachedEntry.getEntryId());\n      queueState.setConsumerReadPointer(cachedEntry.getEntryId());\n      QueueEntry entry = new QueueEntry(cachedEntry.getData());\n      dequeueStrategy.saveDequeueState(consumer, config, queueState, readPointer);\n      DequeueResult dequeueResult = new DequeueResult(DequeueResult.DequeueStatus.SUCCESS,\n                               new QueueEntryPointer(this.queueName, cachedEntry.getEntryId()), entry);\n      return dequeueResult;\n    } else {\n      // No queue entries available to dequue, return queue empty\n      if (LOG.isTraceEnabled()) {\n        logTrace(\"End of queue reached using \" + \"read pointer \" + readPointer);\n      }\n      dequeueStrategy.saveDequeueState(consumer, config, queueState, readPointer);\n      DequeueResult dequeueResult = new DequeueResult(DequeueResult.DequeueStatus.EMPTY);\n      return dequeueResult;\n    }\n  }","id":2891,"modified_method":"@Override\n  public DequeueResult dequeue(QueueConsumer consumer, ReadPointer readPointer) throws OperationException {\n    final QueueConfig config = consumer.getQueueConfig();\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(getLogMessage(\"Attempting dequeue [curNumDequeues=\" + this.dequeueReturns.get() +\n                  \"] (\" + consumer + \", \" + config + \", \" + readPointer + \")\"));\n    }\n\n    // Determine what dequeue strategy to use based on the partitioner\n    final DequeueStrategy dequeueStrategy = getDequeueStrategy(config.getPartitionerType().getPartitioner());\n\n    QueueStateImpl queueState = getQueueState(consumer, readPointer);\n\n    // If the previous entry was not acked, return the same one (Note: will need to change for async mode)\n    if(queueState.getActiveEntryId() != INVALID_ENTRY_ID) {\n      if(!queueState.getCachedEntries().hasCurrent()) {\n        throw new OperationException(StatusCode.INTERNAL_ERROR,\n          getLogMessage(\"Cannot fetch active entry id from cached entries\"));\n      }\n      QueueStateEntry cachedEntry = queueState.getCachedEntries().getCurrent();\n      QueueEntry entry = new QueueEntry(cachedEntry.getData());\n      dequeueStrategy.saveDequeueState(consumer, config, queueState, readPointer);\n      DequeueResult dequeueResult = new DequeueResult(DequeueResult.DequeueStatus.SUCCESS,\n                                                      new QueueEntryPointer(this.queueName, cachedEntry.getEntryId()), entry);\n      return dequeueResult;\n    }\n\n    // If no more cached entries, read entries from storage\n    if(!queueState.getCachedEntries().hasNext()) {\n      List<Long> entryIds = dequeueStrategy.fetchNextEntries(consumer, config, queueState, readPointer);\n      readEntries(consumer, config, queueState, readPointer, entryIds);\n    }\n\n    if(queueState.getCachedEntries().hasNext()) {\n      QueueStateEntry cachedEntry = queueState.getCachedEntries().getNext();\n      this.dequeueReturns.incrementAndGet();\n      queueState.setActiveEntryId(cachedEntry.getEntryId());\n      queueState.setConsumerReadPointer(cachedEntry.getEntryId());\n      QueueEntry entry = new QueueEntry(cachedEntry.getData());\n      dequeueStrategy.saveDequeueState(consumer, config, queueState, readPointer);\n      DequeueResult dequeueResult = new DequeueResult(DequeueResult.DequeueStatus.SUCCESS,\n                               new QueueEntryPointer(this.queueName, cachedEntry.getEntryId()), entry);\n      return dequeueResult;\n    } else {\n      // No queue entries available to dequue, return queue empty\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(getLogMessage(\"End of queue reached using \" + \"read pointer \" + readPointer));\n      }\n      dequeueStrategy.saveDequeueState(consumer, config, queueState, readPointer);\n      DequeueResult dequeueResult = new DequeueResult(DequeueResult.DequeueStatus.EMPTY);\n      return dequeueResult;\n    }\n  }","commit_id":"acbdf1241d61253ab1b208f784a403a604afe908","url":"https://github.com/caskdata/cdap"},{"original_method":"private long getEvictEntryForConsumer(OperationResult<Map<byte[], Map<byte[], byte[]>>> operationResult, int consumerId, long groupId) {\n    // evictEntry determination logic: evictEntry = (activeEntry != INVALID_ENTRY ? activeEntry - 1 : consumerReadPointer - 1)\n\n    // Read the ACTIVE_ENTRY and CONSUMER_READ_POINTER for the consumer consumerId\n    Map<byte[], byte[]> readPointerMap = operationResult.getValue().get(makeRowKey(CONSUMER_META_PREFIX, groupId, consumerId));\n    if(readPointerMap == null) {\n      if(LOG.isTraceEnabled()) {\n        logTrace(String.format(\"Not able to fetch readPointer/activeEntry for consumerId %d, groupId %d\", consumerId, groupId));\n      }\n      return INVALID_ENTRY_ID;\n    }\n    final byte[] activeEntryBytes = readPointerMap.get(ACTIVE_ENTRY);\n    if(activeEntryBytes == null) {\n      if(LOG.isTraceEnabled()) {\n        logTrace(String.format(\"Not able to decode activeEntry for consumerId %d, groupId %d\", consumerId, groupId));\n      }\n      return INVALID_ENTRY_ID;\n    }\n    long evictEntry;\n    final long activeEntry = Bytes.toLong(activeEntryBytes);\n    if(activeEntry != INVALID_ENTRY_ID) {\n      evictEntry = activeEntry - 1;\n    } else {\n      byte[] consumerReadPointerBytes = readPointerMap.get(CONSUMER_READ_POINTER);\n      if(consumerReadPointerBytes == null) {\n        if(LOG.isTraceEnabled()) {\n          logTrace(String.format(\"Not able to decode readPointer for consumerId %d, groupId %d\", consumerId, groupId));\n        }\n        return INVALID_ENTRY_ID;\n      }\n      evictEntry = Bytes.toLong(consumerReadPointerBytes) - 1;\n    }\n    return evictEntry;\n  }","id":2892,"modified_method":"private long getEvictEntryForConsumer(OperationResult<Map<byte[], Map<byte[], byte[]>>> operationResult, int consumerId, long groupId) {\n    // evictEntry determination logic: evictEntry = (activeEntry != INVALID_ENTRY ? activeEntry - 1 : consumerReadPointer - 1)\n\n    // Read the ACTIVE_ENTRY and CONSUMER_READ_POINTER for the consumer consumerId\n    Map<byte[], byte[]> readPointerMap = operationResult.getValue().get(makeRowKey(CONSUMER_META_PREFIX, groupId, consumerId));\n    if(readPointerMap == null) {\n      if(LOG.isTraceEnabled()) {\n        LOG.trace(getLogMessage(String.format(\"Not able to fetch readPointer/activeEntry for consumerId %d, groupId %d\", consumerId, groupId)));\n      }\n      return INVALID_ENTRY_ID;\n    }\n    final byte[] activeEntryBytes = readPointerMap.get(ACTIVE_ENTRY);\n    if(activeEntryBytes == null) {\n      if(LOG.isTraceEnabled()) {\n        LOG.trace(getLogMessage(String.format(\"Not able to decode activeEntry for consumerId %d, groupId %d\", consumerId, groupId)));\n      }\n      return INVALID_ENTRY_ID;\n    }\n    long evictEntry;\n    final long activeEntry = Bytes.toLong(activeEntryBytes);\n    if(activeEntry != INVALID_ENTRY_ID) {\n      evictEntry = activeEntry - 1;\n    } else {\n      byte[] consumerReadPointerBytes = readPointerMap.get(CONSUMER_READ_POINTER);\n      if(consumerReadPointerBytes == null) {\n        if(LOG.isTraceEnabled()) {\n          LOG.trace(getLogMessage(String.format(\"Not able to decode readPointer for consumerId %d, groupId %d\", consumerId, groupId)));\n        }\n        return INVALID_ENTRY_ID;\n      }\n      evictEntry = Bytes.toLong(consumerReadPointerBytes) - 1;\n    }\n    return evictEntry;\n  }","commit_id":"acbdf1241d61253ab1b208f784a403a604afe908","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void finalize(QueueEntryPointer entryPointer, QueueConsumer consumer, int totalNumGroups, long writePoint)\n    throws OperationException {\n    // Figure out queue entries that can be evicted, and evict them.\n    // We are assuming here that for a given consumer all entries up to min(ACTIVE_ENTRY-1, CONSUMER_READ_POINTER-1) can be evicted.\n    // The min of such evict entry is determined across all consumers across all groups, and entries till the min evict entry are removed.\n\n    // One consumer per consumer group will do the determination of min group evict entry for each group.\n    // Finally, one consumer across all groups will get the least of min group evict entries for all groups and does eviction.\n\n    // NOTE: Using min(ACTIVE_ENTRY-1, CONSUMER_READ_POINTER-1) to determine evict entry removes the need of\n    // storing/reading the finalized entry for each consumer.\n    // However in this approach the last entry of each consumer may not get evicted.\n    // This limitation should be okay since the number of such entries will be small (less than or equal to the number of consumers).\n\n    // A simple leader election for selecting consumer to run eviction for group - only consumers with id 0 (one per group)\n    if(consumer.getInstanceId() != 0) {\n      return;\n    }\n\n    // TODO: get transaction read pointer\n    ReadPointer readPointer = oracle.dirtyReadPointer();\n\n    // Run eviction only if EVICT_INTERVAL_IN_SECS secs have passed since the last eviction run\n    final long evictStartTimeInSecs = System.currentTimeMillis() / 1000;\n    QueueStateImpl queueState = getQueueState(consumer, readPointer);\n    if(evictStartTimeInSecs - queueState.getLastEvictTimeInSecs() < EVICT_INTERVAL_IN_SECS) {\n      return;\n    }\n\n    // Record things that need to be written to storage\n    List<byte[]> writeKeys = new ArrayList<byte[]>();\n    List<byte[]> writeCols = new ArrayList<byte[]>();\n    List<byte[]> writeValues = new ArrayList<byte[]>();\n\n    // Save evictStartTimeInSecs as LAST_EVICT_TIME_IN_SECS\n    writeKeys.add(makeRowKey(CONSUMER_META_PREFIX, consumer.getGroupId(), consumer.getInstanceId()));\n    writeCols.add(LAST_EVICT_TIME_IN_SECS);\n    writeValues.add(Bytes.toBytes(evictStartTimeInSecs));\n    queueState.setLastEvictTimeInSecs(evictStartTimeInSecs);\n\n    if(LOG.isTraceEnabled()) {\n      logTrace(String.format(\"Running eviction for group %d\", consumer.getGroupId()));\n    }\n\n    // Find the min entry that can be evicted for the consumer's group\n    final long minGroupEvictEntry = getMinGroupEvictEntry(consumer, entryPointer.getEntryId(), readPointer);\n    // Save the minGroupEvictEntry for the consumer's group\n    if(minGroupEvictEntry != INVALID_ENTRY_ID) {\n      writeKeys.add(GLOBAL_EVICT_META_PREFIX);\n      writeCols.add(makeColumnName(GROUP_EVICT_ENTRY, consumer.getGroupId()));\n      writeValues.add(Bytes.toBytes(minGroupEvictEntry));\n    }\n\n    if(LOG.isTraceEnabled()) {\n      logTrace(String.format(\"minGroupEvictEntry=%d, groupId=%d\", minGroupEvictEntry, consumer.getGroupId()));\n    }\n\n    // Only one consumer per queue will run the below eviction algorithm for the queue, all others will save minGroupEvictEntry and return\n    // Again simple leader election\n    if(consumer.getGroupId() == 0) {\n      if(LOG.isTraceEnabled()) {\n        logTrace(\"Running global eviction...\");\n      }\n\n      final long currentMaxEvictedEntry = runEviction(consumer, minGroupEvictEntry, totalNumGroups, readPointer);\n      // Save the max of the entries that were evicted now\n      if(currentMaxEvictedEntry != INVALID_ENTRY_ID) {\n        writeKeys.add(GLOBAL_EVICT_META_PREFIX);\n        writeCols.add(GLOBAL_LAST_EVICT_ENTRY);\n        writeValues.add(Bytes.toBytes(currentMaxEvictedEntry));\n      }\n    }\n\n    // Save the state\n    byte[][] keyArray = new byte[writeKeys.size()][];\n    byte[][] colArray = new byte[writeCols.size()][];\n    byte[][] valArray = new byte[writeValues.size()][];\n    table.put(writeKeys.toArray(keyArray), writeCols.toArray(colArray), writePoint, writeValues.toArray(valArray));\n  }","id":2893,"modified_method":"@Override\n  public void finalize(QueueEntryPointer entryPointer, QueueConsumer consumer, int totalNumGroups, long writePoint)\n    throws OperationException {\n    // Figure out queue entries that can be evicted, and evict them.\n    // We are assuming here that for a given consumer all entries up to min(ACTIVE_ENTRY-1, CONSUMER_READ_POINTER-1) can be evicted.\n    // The min of such evict entry is determined across all consumers across all groups, and entries till the min evict entry are removed.\n\n    // One consumer per consumer group will do the determination of min group evict entry for each group.\n    // Finally, one consumer across all groups will get the least of min group evict entries for all groups and does eviction.\n\n    // NOTE: Using min(ACTIVE_ENTRY-1, CONSUMER_READ_POINTER-1) to determine evict entry removes the need of\n    // storing/reading the finalized entry for each consumer.\n    // However in this approach the last entry of each consumer may not get evicted.\n    // This limitation should be okay since the number of such entries will be small (less than or equal to the number of consumers).\n\n    // A simple leader election for selecting consumer to run eviction for group - only consumers with id 0 (one per group)\n    if(consumer.getInstanceId() != 0) {\n      return;\n    }\n\n    // TODO: get transaction read pointer\n    ReadPointer readPointer = oracle.dirtyReadPointer();\n\n    // Run eviction only if EVICT_INTERVAL_IN_SECS secs have passed since the last eviction run\n    final long evictStartTimeInSecs = System.currentTimeMillis() / 1000;\n    QueueStateImpl queueState = getQueueState(consumer, readPointer);\n    if(evictStartTimeInSecs - queueState.getLastEvictTimeInSecs() < EVICT_INTERVAL_IN_SECS) {\n      return;\n    }\n\n    // Record things that need to be written to storage\n    List<byte[]> writeKeys = new ArrayList<byte[]>();\n    List<byte[]> writeCols = new ArrayList<byte[]>();\n    List<byte[]> writeValues = new ArrayList<byte[]>();\n\n    // Save evictStartTimeInSecs as LAST_EVICT_TIME_IN_SECS\n    writeKeys.add(makeRowKey(CONSUMER_META_PREFIX, consumer.getGroupId(), consumer.getInstanceId()));\n    writeCols.add(LAST_EVICT_TIME_IN_SECS);\n    writeValues.add(Bytes.toBytes(evictStartTimeInSecs));\n    queueState.setLastEvictTimeInSecs(evictStartTimeInSecs);\n\n    if(LOG.isTraceEnabled()) {\n      LOG.trace(getLogMessage(String.format(\"Running eviction for group %d\", consumer.getGroupId())));\n    }\n\n    // Find the min entry that can be evicted for the consumer's group\n    final long minGroupEvictEntry = getMinGroupEvictEntry(consumer, entryPointer.getEntryId(), readPointer);\n    // Save the minGroupEvictEntry for the consumer's group\n    if(minGroupEvictEntry != INVALID_ENTRY_ID) {\n      writeKeys.add(GLOBAL_EVICT_META_PREFIX);\n      writeCols.add(makeColumnName(GROUP_EVICT_ENTRY, consumer.getGroupId()));\n      writeValues.add(Bytes.toBytes(minGroupEvictEntry));\n    }\n\n    if(LOG.isTraceEnabled()) {\n      LOG.trace(getLogMessage(String.format(\"minGroupEvictEntry=%d, groupId=%d\", minGroupEvictEntry, consumer.getGroupId())));\n    }\n\n    // Only one consumer per queue will run the below eviction algorithm for the queue, all others will save minGroupEvictEntry and return\n    // Again simple leader election\n    if(consumer.getGroupId() == 0) {\n      if(LOG.isTraceEnabled()) {\n        LOG.trace(getLogMessage(\"Running global eviction...\"));\n      }\n\n      final long currentMaxEvictedEntry = runEviction(consumer, minGroupEvictEntry, totalNumGroups, readPointer);\n      // Save the max of the entries that were evicted now\n      if(currentMaxEvictedEntry != INVALID_ENTRY_ID) {\n        writeKeys.add(GLOBAL_EVICT_META_PREFIX);\n        writeCols.add(GLOBAL_LAST_EVICT_ENTRY);\n        writeValues.add(Bytes.toBytes(currentMaxEvictedEntry));\n      }\n    }\n\n    // Save the state\n    byte[][] keyArray = new byte[writeKeys.size()][];\n    byte[][] colArray = new byte[writeCols.size()][];\n    byte[][] valArray = new byte[writeValues.size()][];\n    table.put(writeKeys.toArray(keyArray), writeCols.toArray(colArray), writePoint, writeValues.toArray(valArray));\n  }","commit_id":"acbdf1241d61253ab1b208f784a403a604afe908","url":"https://github.com/caskdata/cdap"},{"original_method":"private long runEviction(QueueConsumer consumer, long currentGroupMinEvictEntry,\n                           int totalNumGroups, ReadPointer readPointer) throws OperationException {\n    // Get all the columns for row GLOBAL_EVICT_META_PREFIX, which contains the entry that can be evicted for each group\n    // and the last evicted entry.\n    OperationResult<Map<byte [], byte []>> evictBytes = table.get(GLOBAL_EVICT_META_PREFIX, readPointer);\n    if(evictBytes.isEmpty() || evictBytes.getValue() == null) {\n      if(LOG.isTraceEnabled()) {\n        logTrace(\"Not able to fetch eviction information\");\n      }\n      return INVALID_ENTRY_ID;\n    }\n\n    // Get the last evicted entry\n    Map<byte[], byte[]> evictInfoMap = evictBytes.getValue();\n    byte[] lastEvictedEntryBytes = evictInfoMap.get(GLOBAL_LAST_EVICT_ENTRY);\n    final long lastEvictedEntry = lastEvictedEntryBytes == null ? FIRST_QUEUE_ENTRY_ID - 1 : Bytes.toLong(lastEvictedEntryBytes);\n\n    // Determine the max entry that can be evicted across all groups\n    long maxEntryToEvict = Long.MAX_VALUE;\n    for(int groupId = 0; groupId < totalNumGroups; ++groupId) {\n      long entry;\n      if(groupId == consumer.getGroupId()) {\n        // Min evict entry for the consumer's group was just evaluated earlier but not written to storage, use that\n        entry = currentGroupMinEvictEntry;\n      } else {\n        // Get the evict info for group with groupId\n        byte[] entryBytes = evictInfoMap.get(makeColumnName(GROUP_EVICT_ENTRY, groupId));\n        if(entryBytes == null) {\n          if(LOG.isTraceEnabled()) {\n            logTrace(String.format(\"Not able to fetch maxEvictEntry for group %d\", groupId));\n          }\n          return INVALID_ENTRY_ID;\n        }\n        entry = Bytes.toLong(entryBytes);\n      }\n      // Save the least entry\n      if(maxEntryToEvict > entry) {\n        maxEntryToEvict = entry;\n      }\n    }\n\n    if(maxEntryToEvict < FIRST_QUEUE_ENTRY_ID || maxEntryToEvict <= lastEvictedEntry || maxEntryToEvict == Long.MAX_VALUE) {\n      if(LOG.isTraceEnabled()) {\n        logTrace(String.format(\"Nothing to evict. Entry to be evicted = %d, lastEvictedEntry = %d\", maxEntryToEvict, lastEvictedEntry));\n      }\n      return INVALID_ENTRY_ID;\n    }\n\n      final long startEvictEntry = lastEvictedEntry + 1;\n\n      if(LOG.isTraceEnabled()) {\n        logTrace(String.format(\"Evicting entries from %d to %d\", startEvictEntry, maxEntryToEvict));\n      }\n\n      // Evict entries\n      int i = 0;\n      byte[][] deleteKeys = new byte[(int) (maxEntryToEvict - startEvictEntry) + 1][];\n      for(long id = startEvictEntry; id <= maxEntryToEvict; ++id) {\n        deleteKeys[i++] = makeRowKey(GLOBAL_DATA_PREFIX, id);\n      }\n      this.table.deleteDirty(deleteKeys);\n\n    return maxEntryToEvict;\n  }","id":2894,"modified_method":"private long runEviction(QueueConsumer consumer, long currentGroupMinEvictEntry,\n                           int totalNumGroups, ReadPointer readPointer) throws OperationException {\n    // Get all the columns for row GLOBAL_EVICT_META_PREFIX, which contains the entry that can be evicted for each group\n    // and the last evicted entry.\n    OperationResult<Map<byte [], byte []>> evictBytes = table.get(GLOBAL_EVICT_META_PREFIX, readPointer);\n    if(evictBytes.isEmpty() || evictBytes.getValue() == null) {\n      if(LOG.isTraceEnabled()) {\n        LOG.trace(getLogMessage(\"Not able to fetch eviction information\"));\n      }\n      return INVALID_ENTRY_ID;\n    }\n\n    // Get the last evicted entry\n    Map<byte[], byte[]> evictInfoMap = evictBytes.getValue();\n    byte[] lastEvictedEntryBytes = evictInfoMap.get(GLOBAL_LAST_EVICT_ENTRY);\n    final long lastEvictedEntry = lastEvictedEntryBytes == null ? FIRST_QUEUE_ENTRY_ID - 1 : Bytes.toLong(lastEvictedEntryBytes);\n\n    // Determine the max entry that can be evicted across all groups\n    long maxEntryToEvict = Long.MAX_VALUE;\n    for(int groupId = 0; groupId < totalNumGroups; ++groupId) {\n      long entry;\n      if(groupId == consumer.getGroupId()) {\n        // Min evict entry for the consumer's group was just evaluated earlier but not written to storage, use that\n        entry = currentGroupMinEvictEntry;\n      } else {\n        // Get the evict info for group with groupId\n        byte[] entryBytes = evictInfoMap.get(makeColumnName(GROUP_EVICT_ENTRY, groupId));\n        if(entryBytes == null) {\n          if(LOG.isTraceEnabled()) {\n            LOG.trace(getLogMessage(String.format(\"Not able to fetch maxEvictEntry for group %d\", groupId)));\n          }\n          return INVALID_ENTRY_ID;\n        }\n        entry = Bytes.toLong(entryBytes);\n      }\n      // Save the least entry\n      if(maxEntryToEvict > entry) {\n        maxEntryToEvict = entry;\n      }\n    }\n\n    if(maxEntryToEvict < FIRST_QUEUE_ENTRY_ID || maxEntryToEvict <= lastEvictedEntry || maxEntryToEvict == Long.MAX_VALUE) {\n      if(LOG.isTraceEnabled()) {\n        LOG.trace(getLogMessage(String.format(\"Nothing to evict. Entry to be evicted = %d, lastEvictedEntry = %d\", maxEntryToEvict, lastEvictedEntry)));\n      }\n      return INVALID_ENTRY_ID;\n    }\n\n      final long startEvictEntry = lastEvictedEntry + 1;\n\n      if(LOG.isTraceEnabled()) {\n        LOG.trace(getLogMessage(String.format(\"Evicting entries from %d to %d\", startEvictEntry, maxEntryToEvict)));\n      }\n\n      // Evict entries\n      int i = 0;\n      byte[][] deleteKeys = new byte[(int) (maxEntryToEvict - startEvictEntry) + 1][];\n      for(long id = startEvictEntry; id <= maxEntryToEvict; ++id) {\n        deleteKeys[i++] = makeRowKey(GLOBAL_DATA_PREFIX, id);\n      }\n      this.table.deleteDirty(deleteKeys);\n\n    return maxEntryToEvict;\n  }","commit_id":"acbdf1241d61253ab1b208f784a403a604afe908","url":"https://github.com/caskdata/cdap"},{"original_method":"private long getMinGroupEvictEntry(QueueConsumer consumer, long currentConsumerFinalizeEntry, ReadPointer readPointer) throws OperationException {\n    // Find out the min entry that can be evicted across all consumers in the consumer's group\n\n    // Read CONSUMER_READ_POINTER and ACTIVE_ENTRY for all consumers in the group to determine evict entry\n    final byte[][] rowKeys = new byte[consumer.getGroupSize()][];\n    for(int consumerId = 0; consumerId < consumer.getGroupSize(); ++consumerId) {\n      rowKeys[consumerId] = makeRowKey(CONSUMER_META_PREFIX, consumer.getGroupId(), consumerId);\n    }\n    OperationResult<Map<byte[], Map<byte[], byte[]>>> operationResult =\n      table.get(rowKeys, new byte[][]{CONSUMER_READ_POINTER, ACTIVE_ENTRY}, readPointer);\n    if(operationResult.isEmpty()) {\n      if(LOG.isTraceEnabled()) {\n        logTrace(String.format(\"Not able to fetch state of group %d for eviction\", consumer.getGroupId()));\n      }\n      return INVALID_ENTRY_ID;\n    }\n\n    long minGroupEvictEntry = Long.MAX_VALUE;\n    for(int consumerId = 0; consumerId < consumer.getGroupSize(); ++consumerId) {\n      // As far as consumer consumerId is concerned, all queue entries before min(ACTIVE_ENTRY, CONSUMER_READ_POINTER) can be evicted\n      // The least of such entry is the minGroupEvictEntry to which all queue entries can be evicted for the group\n      long evictEntry;\n      if(consumerId == consumer.getInstanceId()) {\n        // currentConsumerFinalizeEntry is a better entry to be evicted than the one determined by getEvictEntryForConsumer for current consumer\n        // since currentConsumerFinalizeEntry > min(CONSUMER_READ_POINTER - 1, ACTIVE_ENTRY - 1)\n        evictEntry = currentConsumerFinalizeEntry;\n      } else {\n        // For other consumers, determine evict entry based on CONSUMER_READ_POINTER or ACTIVE_ENTRY\n        evictEntry = getEvictEntryForConsumer(operationResult, consumerId, consumer.getGroupId());\n      }\n      if(evictEntry == INVALID_ENTRY_ID) {\n        minGroupEvictEntry = INVALID_ENTRY_ID;\n        break;\n      }\n      // Save the min entry\n      if(minGroupEvictEntry > evictEntry) {\n        minGroupEvictEntry = evictEntry;\n      }\n    }\n    return minGroupEvictEntry == Long.MAX_VALUE ? INVALID_ENTRY_ID : minGroupEvictEntry;\n  }","id":2895,"modified_method":"private long getMinGroupEvictEntry(QueueConsumer consumer, long currentConsumerFinalizeEntry, ReadPointer readPointer)\n                                                                                        throws OperationException {\n    // Find out the min entry that can be evicted across all consumers in the consumer's group\n\n    // Read CONSUMER_READ_POINTER and ACTIVE_ENTRY for all consumers in the group to determine evict entry\n    final byte[][] rowKeys = new byte[consumer.getGroupSize()][];\n    for(int consumerId = 0; consumerId < consumer.getGroupSize(); ++consumerId) {\n      rowKeys[consumerId] = makeRowKey(CONSUMER_META_PREFIX, consumer.getGroupId(), consumerId);\n    }\n    OperationResult<Map<byte[], Map<byte[], byte[]>>> operationResult =\n      table.get(rowKeys, new byte[][]{CONSUMER_READ_POINTER, ACTIVE_ENTRY}, readPointer);\n    if(operationResult.isEmpty()) {\n      if(LOG.isTraceEnabled()) {\n        LOG.trace(getLogMessage(String.format(\"Not able to fetch state of group %d for eviction\", consumer.getGroupId())));\n      }\n      return INVALID_ENTRY_ID;\n    }\n\n    long minGroupEvictEntry = Long.MAX_VALUE;\n    for(int consumerId = 0; consumerId < consumer.getGroupSize(); ++consumerId) {\n      // As far as consumer consumerId is concerned, all queue entries before min(ACTIVE_ENTRY, CONSUMER_READ_POINTER) can be evicted\n      // The least of such entry is the minGroupEvictEntry to which all queue entries can be evicted for the group\n      long evictEntry;\n      if(consumerId == consumer.getInstanceId()) {\n        // currentConsumerFinalizeEntry is a better entry to be evicted than the one determined by getEvictEntryForConsumer for current consumer\n        // since currentConsumerFinalizeEntry > min(CONSUMER_READ_POINTER - 1, ACTIVE_ENTRY - 1)\n        evictEntry = currentConsumerFinalizeEntry;\n      } else {\n        // For other consumers, determine evict entry based on CONSUMER_READ_POINTER or ACTIVE_ENTRY\n        evictEntry = getEvictEntryForConsumer(operationResult, consumerId, consumer.getGroupId());\n      }\n      if(evictEntry == INVALID_ENTRY_ID) {\n        minGroupEvictEntry = INVALID_ENTRY_ID;\n        break;\n      }\n      // Save the min entry\n      if(minGroupEvictEntry > evictEntry) {\n        minGroupEvictEntry = evictEntry;\n      }\n    }\n    return minGroupEvictEntry == Long.MAX_VALUE ? INVALID_ENTRY_ID : minGroupEvictEntry;\n  }","commit_id":"acbdf1241d61253ab1b208f784a403a604afe908","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void invalidate(QueueEntryPointer entryPointer, long cleanWriteVersion) throws OperationException {\n    if(LOG.isTraceEnabled()) {\n      logTrace(String.format(\"Invalidating entry \", entryPointer.getEntryId()));\n    }\n    final byte [] rowName = makeRowKey(GLOBAL_DATA_PREFIX, entryPointer.getEntryId());\n    // Change meta data to INVALID\n    this.table.put(rowName, ENTRY_META,\n                   cleanWriteVersion, new EntryMeta(EntryMeta.EntryState.INVALID).getBytes());\n    // No need to delete data/headers since they will be cleaned up during eviction later\n    if (LOG.isTraceEnabled()) {\n      logTrace(\"Invalidated \" + entryPointer);\n    }\n  }","id":2896,"modified_method":"@Override\n  public void invalidate(QueueEntryPointer entryPointer, long cleanWriteVersion) throws OperationException {\n    if(LOG.isTraceEnabled()) {\n      LOG.trace(getLogMessage(String.format(\"Invalidating entry \", entryPointer.getEntryId())));\n    }\n    final byte [] rowName = makeRowKey(GLOBAL_DATA_PREFIX, entryPointer.getEntryId());\n    // Change meta data to INVALID\n    this.table.put(rowName, ENTRY_META,\n                   cleanWriteVersion, new EntryMeta(EntryMeta.EntryState.INVALID).getBytes());\n    // No need to delete data/headers since they will be cleaned up during eviction later\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(getLogMessage(\"Invalidated \" + entryPointer));\n    }\n  }","commit_id":"acbdf1241d61253ab1b208f784a403a604afe908","url":"https://github.com/caskdata/cdap"},{"original_method":"private void readEntries(QueueConsumer consumer, QueueConfig config, QueueStateImpl queueState, ReadPointer readPointer,\n                            List<Long> entryIds) throws OperationException{\n    if(LOG.isTraceEnabled()) {\n      logTrace(String.format(\"Reading entries from storage - \", Arrays.toString(entryIds.toArray())));\n    }\n    if(entryIds.isEmpty()) {\n      queueState.setCachedEntries(CachedList.EMPTY_LIST);\n      return;\n    }\n\n    final byte[][] entryRowKeys = new byte[entryIds.size()][];\n    for(int i = 0; i < entryIds.size(); ++i) {\n      entryRowKeys[i] = makeRowKey(GLOBAL_DATA_PREFIX, entryIds.get(i));\n    }\n\n    final byte[][] entryColKeys = new byte[][]{ ENTRY_META, ENTRY_DATA };\n    OperationResult<Map<byte[], Map<byte[], byte[]>>> entriesResult =\n                                                          this.table.get(entryRowKeys, entryColKeys, readPointer);\n    if(entriesResult.isEmpty()) {\n      queueState.setCachedEntries(CachedList.EMPTY_LIST);\n    } else {\n      List<QueueStateEntry> entries = new ArrayList<QueueStateEntry>(entryIds.size());\n      for(int i = 0; i < entryIds.size(); ++i) {\n        Map<byte[], byte[]> entryMap = entriesResult.getValue().get(entryRowKeys[i]);\n        if(entryMap == null) {\n          queueState.setCachedEntries(CachedList.EMPTY_LIST);\n          return;\n        }\n        byte[] entryMetaBytes = entryMap.get(ENTRY_META);\n        if(entryMetaBytes == null) {\n          queueState.setCachedEntries(CachedList.EMPTY_LIST);\n          return;\n        }\n        EntryMeta entryMeta = EntryMeta.fromBytes(entryMetaBytes);\n        if (LOG.isTraceEnabled()) {\n          logTrace(\"entryId:\" + entryIds.get(i) + \". entryMeta : \" + entryMeta.toString());\n        }\n\n        // Check if entry has been invalidated or evicted\n        if (entryMeta.isInvalid() || entryMeta.isEvicted()) {\n          if (LOG.isTraceEnabled()) {\n            logTrace(\"Found invalidated or evicted entry at \" + entryIds.get(i) +\n                        \" (\" + entryMeta.toString() + \")\");\n          }\n        } else {\n          // Entry is visible and valid!\n          assert(entryMeta.isValid());\n          byte [] entryData = entryMap.get(ENTRY_DATA);\n          entries.add(new QueueStateEntry(entryData, entryIds.get(i)));\n        }\n      }\n      queueState.setCachedEntries(new CachedList<QueueStateEntry>(entries));\n    }\n  }","id":2897,"modified_method":"private void readEntries(QueueConsumer consumer, QueueConfig config, QueueStateImpl queueState, ReadPointer readPointer,\n                            List<Long> entryIds) throws OperationException{\n    if(LOG.isTraceEnabled()) {\n      LOG.trace(getLogMessage(String.format(\"Reading entries from storage - \", Arrays.toString(entryIds.toArray()))));\n    }\n    if(entryIds.isEmpty()) {\n      queueState.setCachedEntries(CachedList.EMPTY_LIST);\n      return;\n    }\n\n    final byte[][] entryRowKeys = new byte[entryIds.size()][];\n    for(int i = 0; i < entryIds.size(); ++i) {\n      entryRowKeys[i] = makeRowKey(GLOBAL_DATA_PREFIX, entryIds.get(i));\n    }\n\n    final byte[][] entryColKeys = new byte[][]{ ENTRY_META, ENTRY_DATA };\n    OperationResult<Map<byte[], Map<byte[], byte[]>>> entriesResult =\n                                                          this.table.get(entryRowKeys, entryColKeys, readPointer);\n    if(entriesResult.isEmpty()) {\n      queueState.setCachedEntries(CachedList.EMPTY_LIST);\n    } else {\n      List<QueueStateEntry> entries = new ArrayList<QueueStateEntry>(entryIds.size());\n      for(int i = 0; i < entryIds.size(); ++i) {\n        Map<byte[], byte[]> entryMap = entriesResult.getValue().get(entryRowKeys[i]);\n        if(entryMap == null) {\n          queueState.setCachedEntries(CachedList.EMPTY_LIST);\n          return;\n        }\n        byte[] entryMetaBytes = entryMap.get(ENTRY_META);\n        if(entryMetaBytes == null) {\n          queueState.setCachedEntries(CachedList.EMPTY_LIST);\n          return;\n        }\n        EntryMeta entryMeta = EntryMeta.fromBytes(entryMetaBytes);\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(getLogMessage(\"entryId:\" + entryIds.get(i) + \". entryMeta : \" + entryMeta.toString()));\n        }\n\n        // Check if entry has been invalidated or evicted\n        if (entryMeta.isInvalid() || entryMeta.isEvicted()) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(getLogMessage(\"Found invalidated or evicted entry at \" + entryIds.get(i) +\n                        \" (\" + entryMeta.toString() + \")\"));\n          }\n        } else {\n          // Entry is visible and valid!\n          assert(entryMeta.isValid());\n          byte [] entryData = entryMap.get(ENTRY_DATA);\n          entries.add(new QueueStateEntry(entryData, entryIds.get(i)));\n        }\n      }\n      queueState.setCachedEntries(new CachedList<QueueStateEntry>(entries));\n    }\n  }","commit_id":"acbdf1241d61253ab1b208f784a403a604afe908","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n     * copied from JDK 1.6 {@link ThreadInfo} toString()\n     */\n    protected void appendThreadInfo(ThreadInfo info, StringBuilder sb) {\n        sb.append(\"\\\"\" + info.getThreadName() + \"\\\"\" +\n                \" Id=\" + info.getThreadId() + \" \" +\n                info.getThreadState());\n        if (info.getLockName() != null) {\n            sb.append(\" on \").append(info.getLockName());\n        }\n        if (info.getLockOwnerName() != null) {\n            sb.append(\" owned by \\\"\")\n                .append(info.getLockOwnerName())\n                .append(\"\\\" Id=\").append(info.getLockOwnerId());\n        }\n        if (info.isSuspended()) {\n            sb.append(\" (suspended)\");\n        }\n        if (info.isInNative()) {\n            sb.append(\" (in native)\");\n        }\n        sb.append('\\n');\n        StackTraceElement[] stackTrace = info.getStackTrace();\n        for (int i = 0; i < stackTrace.length; i++) {\n            StackTraceElement ste = stackTrace[i];\n            sb.append(\"\\tat \").append(ste.toString());\n            sb.append('\\n');\n        }\n        sb.append('\\n');\n    }","id":2898,"modified_method":"/**\n     * copied from JDK 1.6 {@link ThreadInfo} toString()\n     */\n    protected void appendThreadInfo(ThreadInfo info, StringBuilder sb) {\n        sb.append(\"\\\"\").append(info.getThreadName()).append(\"\\\"\")\n                .append(\" Id=\").append(info.getThreadId()).append(\" \").append(info.getThreadState());\n        if (info.getLockName() != null) {\n            sb.append(\" on \").append(info.getLockName());\n        }\n        if (info.getLockOwnerName() != null) {\n            sb.append(\" owned by \\\"\")\n                .append(info.getLockOwnerName())\n                .append(\"\\\" Id=\").append(info.getLockOwnerId());\n        }\n        if (info.isSuspended()) {\n            sb.append(\" (suspended)\");\n        }\n        if (info.isInNative()) {\n            sb.append(\" (in native)\");\n        }\n        sb.append('\\n');\n        StackTraceElement[] stackTrace = info.getStackTrace();\n        for (int i = 0; i < stackTrace.length; i++) {\n            StackTraceElement ste = stackTrace[i];\n            sb.append(\"\\tat \").append(ste.toString());\n            sb.append('\\n');\n        }\n        sb.append('\\n');\n    }","commit_id":"b4812ca3a5b5fd3dadad9b34b558375c69aab38c","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"/**\n     * copied from JDK 1.6 {@link ThreadInfo} toString()\n     */\n    protected void appendThreadInfo(ThreadInfo info, StringBuilder sb) {\n        sb.append(\"\\\"\" + info.getThreadName() + \"\\\"\" +\n                \" Id=\" + info.getThreadId() + \" \" +\n                info.getThreadState());\n        if (info.getLockName() != null) {\n            sb.append(\" on \" + info.getLockName());\n        }\n        if (info.getLockOwnerName() != null) {\n            sb.append(\" owned by \\\"\" + info.getLockOwnerName() +\n                    \"\\\" Id=\" + info.getLockOwnerId());\n        }\n        if (info.isSuspended()) {\n            sb.append(\" (suspended)\");\n        }\n        if (info.isInNative()) {\n            sb.append(\" (in native)\");\n        }\n        sb.append('\\n');\n        \n        final StackTraceElement[] stackTrace = info.getStackTrace();\n        final Object lockInfo = objectCall(info, ThreadInfo_getLockInfo);\n        final Object[] monitorInfo = objectCall(info, ThreadInfo_getLockedMonitors);\n        \n        for (int i = 0; i < stackTrace.length; i++) {\n            StackTraceElement ste = stackTrace[i];\n            sb.append(\"\\tat \" + ste.toString());\n            sb.append('\\n');\n            \n            if (i == 0 && lockInfo != null) {\n                Thread.State ts = info.getThreadState();\n                switch (ts) {\n                    case BLOCKED:\n                        sb.append(\"\\t-  blocked on \" + lockInfo);\n                        sb.append('\\n');\n                        break;\n                    case WAITING:\n                        sb.append(\"\\t-  waiting on \" + lockInfo);\n                        sb.append('\\n');\n                        break;\n                    case TIMED_WAITING:\n                        sb.append(\"\\t-  waiting on \" + lockInfo);\n                        sb.append('\\n');\n                        break;\n                    default:\n                }\n            }\n            \n            for (Object mi : monitorInfo) {\n                Integer depth = objectCall(mi, MonitorInfo_getLockedStackDepth);\n                if (depth == i) {\n                    sb.append(\"\\t-  locked \" + mi);\n                    sb.append('\\n');\n                }\n            }\n        }\n        \n        final Object[] locks = objectCall(info, ThreadInfo_getLockedSynchronizers);\n        if (locks.length > 0) {\n            sb.append(\"\\n\\tNumber of locked synchronizers = \" + locks.length);\n            sb.append('\\n');\n            for (Object li : locks) {\n                sb.append(\"\\t- \" + li);\n                sb.append('\\n');\n            }\n        }\n        sb.append('\\n');\n    }","id":2899,"modified_method":"/**\n     * copied from JDK 1.6 {@link ThreadInfo} toString()\n     */\n    protected void appendThreadInfo(ThreadInfo info, StringBuilder sb) {\n        sb.append(\"\\\"\").append(info.getThreadName()).append( \"\\\"\").append(\n                \" Id=\").append(info.getThreadId()).append(\" \").append(\n                info.getThreadState());\n        \n        if (info.getLockName() != null) {\n            sb.append(\" on \").append(info.getLockName());\n        }\n        if (info.getLockOwnerName() != null) {\n            sb.append(\" owned by \\\"\").append(info.getLockOwnerName()).\n                    append(\"\\\" Id=\").append( + info.getLockOwnerId());\n        }\n        if (info.isSuspended()) {\n            sb.append(\" (suspended)\");\n        }\n        if (info.isInNative()) {\n            sb.append(\" (in native)\");\n        }\n        sb.append('\\n');\n        \n        final StackTraceElement[] stackTrace = info.getStackTrace();\n        final Object lockInfo = objectCall(info, ThreadInfo_getLockInfo);\n        final Object[] monitorInfo = objectCall(info, ThreadInfo_getLockedMonitors);\n        \n        for (int i = 0; i < stackTrace.length; i++) {\n            StackTraceElement ste = stackTrace[i];\n            sb.append(\"\\tat \").append(ste.toString());\n            sb.append('\\n');\n            \n            if (i == 0 && lockInfo != null) {\n                Thread.State ts = info.getThreadState();\n                switch (ts) {\n                    case BLOCKED:\n                        sb.append(\"\\t-  blocked on \").append(lockInfo);\n                        sb.append('\\n');\n                        break;\n                    case WAITING:\n                        sb.append(\"\\t-  waiting on \").append(lockInfo);\n                        sb.append('\\n');\n                        break;\n                    case TIMED_WAITING:\n                        sb.append(\"\\t-  waiting on \").append(lockInfo);\n                        sb.append('\\n');\n                        break;\n                    default:\n                }\n            }\n            \n            for (Object mi : monitorInfo) {\n                Integer depth = objectCall(mi, MonitorInfo_getLockedStackDepth);\n                if (depth == i) {\n                    sb.append(\"\\t-  locked \").append(mi);\n                    sb.append('\\n');\n                }\n            }\n        }\n        \n        final Object[] locks = objectCall(info, ThreadInfo_getLockedSynchronizers);\n        if (locks.length > 0) {\n            sb.append(\"\\n\\tNumber of locked synchronizers = \").append(locks.length);\n            sb.append('\\n');\n            for (Object li : locks) {\n                sb.append(\"\\t- \").append(li);\n                sb.append('\\n');\n            }\n        }\n        sb.append('\\n');\n    }","commit_id":"b4812ca3a5b5fd3dadad9b34b558375c69aab38c","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"private static void dumpCallStack(final ThreadInfo info, final Writer f, final StackTraceElement[] stackTraceElements) {\n    try {\n      StringBuilder sb = new StringBuilder(\"\\\"\" + info.getThreadName() + \"\\\"\" +\n                                           \" Id=\" + info.getThreadId() + \" \" +\n                                           info.getThreadState());\n      if (info.getLockName() != null) {\n          sb.append(\" on \" + info.getLockName());\n      }\n      if (info.getLockOwnerName() != null) {\n          sb.append(\" owned by \\\"\" + info.getLockOwnerName() +\n                    \"\\\" Id=\" + info.getLockOwnerId());\n      }\n      if (info.isSuspended()) {\n          sb.append(\" (suspended)\");\n      }\n      if (info.isInNative()) {\n          sb.append(\" (in native)\");\n      }\n\n      f.write(sb + \"\\n\");\n      for (StackTraceElement element : stackTraceElements) {\n        f.write(\"\\tat \" + element.toString() + \"\\n\");\n      }\n      f.write(\"\\n\");\n    }\n    catch (IOException e) {\n      e.printStackTrace();\n    }\n  }","id":2900,"modified_method":"private static void dumpCallStack(final ThreadInfo info, final Writer f, final StackTraceElement[] stackTraceElements) {\n    try {\n      StringBuilder sb = new StringBuilder(\"\\\"\").append(info.getThreadName()).append(\"\\\"\");\n      sb.append(\" prio=0 tid=0x0 nid=0x0 Id=\").append(info.getThreadId());\n      sb.append(\"\\n\").append(\" java.lang.Thread.State: \").append(info.getThreadState()).append(\"\\n\");\n      if (info.getLockName() != null) {\n          sb.append(\" on \" + info.getLockName());\n      }\n      if (info.getLockOwnerName() != null) {\n          sb.append(\" owned by \\\"\" + info.getLockOwnerName() +\n                    \"\\\" Id=\" + info.getLockOwnerId());\n      }\n      if (info.isSuspended()) {\n          sb.append(\" (suspended)\");\n      }\n      if (info.isInNative()) {\n          sb.append(\" (in native)\");\n      }\n\n      f.write(sb + \"\\n\");\n      for (StackTraceElement element : stackTraceElements) {\n        f.write(\"\\tat \" + element.toString() + \"\\n\");\n      }\n      f.write(\"\\n\");\n    }\n    catch (IOException e) {\n      e.printStackTrace();\n    }\n  }","commit_id":"5f72ba4471c11819d18bbfb46aee8be63bfa6ee0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public final static Indexable deserialize(byte[] data, int start, int len) throws EXistException {\n\t\t\n\t\tint type = data[start];\n\t\t\n\t\t//TODO : improve deserialization (use static methods in the org.exist.xquery.Value package\n\t\t\n\t\t/* xs:string */\n\t\tif (Type.subTypeOf(type, Type.STRING))\n\t\t{\n\t\t\tString s;\n\t\t\ttry {\n\t\t\t\ts = new String(data, start + (ValueIndexFactory.LENGTH_VALUE_TYPE),\n\t\t\t\tlen - (ValueIndexFactory.LENGTH_VALUE_TYPE), \"UTF-8\");\n\t\t\t} catch (UnsupportedEncodingException e) {\n\t\t\t\tLOG.error(e);\n\t\t\t\tthrow new EXistException(e);\n\t\t\t}\n\t\t\treturn new StringValue(s);\n\t\t}\n\t\t\n\t\t/* xs:dateTime */\n\t\telse if(Type.subTypeOf(type, Type.DATE_TIME))\t\t{\n\t\t\t//get the dateTime back as a long\n\t\t\tlong value = ByteConversion.byteToLong(data, start + (ValueIndexFactory.LENGTH_VALUE_TYPE));\n\t\t\t//Create a GregorianCalendar from the long (normalized datetime as milliseconds since the Epoch)\n\t\t\tGregorianCalendar utccal = new GregorianCalendar();\n\t\t\tutccal.setTimeInMillis(value);\n\t\t\t//Create a XMLGregorianCalendar from the GregorianCalendar\n\t\t\ttry\n\t\t\t{\n\t\t\t\tXMLGregorianCalendar xmlutccal = DatatypeFactory.newInstance().newXMLGregorianCalendar(utccal);\n\t\t\t\treturn new DateTimeValue(xmlutccal);\n\t\t\t}\n\t\t\tcatch(DatatypeConfigurationException dtce)\n\t\t\t{\n\t\t\t\tthrow new EXistException(\"Could not deserialize xs:dateTime data type for range index key: \" + Type.getTypeName(type) + \" - \" + dtce.getMessage());\n\t\t\t}\n\t\t}\n\t\t\n\t\t/* xs:integer */\n\t\telse if(Type.subTypeOf(type, Type.INTEGER))\n\t\t{\n\t\t\treturn new IntegerValue(ByteConversion.byteToLong(data, start + (ValueIndexFactory.LENGTH_VALUE_TYPE)) ^ 0x8000000000000000L);\n\t\t}\n\n\t\t\n\t\t/* xs:double */\n\t\telse if (type == Type.DOUBLE)\n\t\t{\n\t\t\tlong bits = ByteConversion.byteToLong(data, start + (ValueIndexFactory.LENGTH_VALUE_TYPE)) ^ 0x8000000000000000L;\n\t\t\tdouble d = Double.longBitsToDouble(bits);\n\t\t\treturn new DoubleValue(d);\n\t\t}\n\t\t\n\t\t/* xs:float */\n\t\telse if (type == Type.FLOAT)\n\t\t{\n\t\t\tint bits = ByteConversion.byteToInt(data, start + (ValueIndexFactory.LENGTH_VALUE_TYPE)) ^ 0x80000000;\n\t\t\tfloat f = Float.intBitsToFloat(bits);\n\t\t\treturn new FloatValue(f);\n\t\t}\t\t\n\t\t\n\t\t/* xs:boolean */\n\t\telse if(type == Type.BOOLEAN)\n\t\t{\n\t\t\treturn new BooleanValue(data[start + (ValueIndexFactory.LENGTH_VALUE_TYPE)] == 1);\n\t\t}\t\t\n\t\t\n\t\t/* unknown! */\n\t\telse\n\t\t{\n\t\t\tthrow new EXistException(\"Unknown data type for deserialization: \" + Type.getTypeName(type));\n\t\t}\n\t}","id":2901,"modified_method":"public final static Indexable deserialize(byte[] data, int start, int len) throws EXistException {\n\t\t\n\t\tint type = data[start];\n\t\t\n\t\t//TODO : improve deserialization (use static methods in the org.exist.xquery.Value package\n\t\t\n\t\t/* xs:string */\n\t\tif (Type.subTypeOf(type, Type.STRING))\n\t\t{\n\t\t\tString s;\n\t\t\ttry {\n\t\t\t\ts = new String(data, start + (ValueIndexFactory.LENGTH_VALUE_TYPE),\n\t\t\t\tlen - (ValueIndexFactory.LENGTH_VALUE_TYPE), \"UTF-8\");\n\t\t\t} catch (UnsupportedEncodingException e) {\n\t\t\t\tLOG.error(e);\n\t\t\t\tthrow new EXistException(e);\n\t\t\t}\n\t\t\treturn new StringValue(s);\n\t\t}\n\t\t\n\t\t/* xs:dateTime */\n\t\telse if(Type.subTypeOf(type, Type.DATE_TIME))\t\t{\n\t\t\t//get the dateTime back as a long\n\t\t\tlong value = ByteConversion.byteToLong(data, start + (ValueIndexFactory.LENGTH_VALUE_TYPE));\n\t\t\t//Create a GregorianCalendar from the long (normalized datetime as milliseconds since the Epoch)\n\t\t\tGregorianCalendar utccal = new GregorianCalendar();\n\t\t\tutccal.setTimeInMillis(value);\n\t\t\t//Create a XMLGregorianCalendar from the GregorianCalendar\n\t\t\ttry\n\t\t\t{\n\t\t\t\tXMLGregorianCalendar xmlutccal = DatatypeFactory.newInstance().newXMLGregorianCalendar(utccal);\n\t\t\t\treturn new DateTimeValue(xmlutccal);\n\t\t\t}\n\t\t\tcatch(DatatypeConfigurationException dtce)\n\t\t\t{\n\t\t\t\tthrow new EXistException(\"Could not deserialize xs:dateTime data type for range index key: \" + Type.getTypeName(type) + \" - \" + dtce.getMessage());\n\t\t\t}\n\t\t}\n\t\t\n    /* xs:date */\n    else if(Type.subTypeOf(type, Type.DATE))   {\n      //get the date back as a long\n      long value = ByteConversion.byteToLong(data, start + (ValueIndexFactory.LENGTH_VALUE_TYPE));\n      //Create a GregorianCalendar from the long (normalized datetime as milliseconds since the Epoch)\n      GregorianCalendar utccal = new GregorianCalendar();\n      utccal.setTimeInMillis(value);\n      //Create a XMLGregorianCalendar from the GregorianCalendar\n      try\n      {\n        XMLGregorianCalendar xmlutccal = DatatypeFactory.newInstance().newXMLGregorianCalendar(utccal);\n        return new DateValue(xmlutccal);\n      }\n      catch(DatatypeConfigurationException dtce)\n      {\n        throw new EXistException(\"Could not deserialize xs:date data type for range index key: \" + Type.getTypeName(type) + \" - \" + dtce.getMessage());\n      }\n      catch(XPathException xpe)\n      {\n        throw new EXistException(\"Could not deserialize xs:date data type for range index key: \" + Type.getTypeName(type) + \" - \" + xpe.getMessage());\n      }\n    }\n    \n\t\t/* xs:integer */\n\t\telse if(Type.subTypeOf(type, Type.INTEGER))\n\t\t{\n\t\t\treturn new IntegerValue(ByteConversion.byteToLong(data, start + (ValueIndexFactory.LENGTH_VALUE_TYPE)) ^ 0x8000000000000000L);\n\t\t}\n\n\t\t\n\t\t/* xs:double */\n\t\telse if (type == Type.DOUBLE)\n\t\t{\n\t\t\tlong bits = ByteConversion.byteToLong(data, start + (ValueIndexFactory.LENGTH_VALUE_TYPE)) ^ 0x8000000000000000L;\n\t\t\tdouble d = Double.longBitsToDouble(bits);\n\t\t\treturn new DoubleValue(d);\n\t\t}\n\t\t\n\t\t/* xs:float */\n\t\telse if (type == Type.FLOAT)\n\t\t{\n\t\t\tint bits = ByteConversion.byteToInt(data, start + (ValueIndexFactory.LENGTH_VALUE_TYPE)) ^ 0x80000000;\n\t\t\tfloat f = Float.intBitsToFloat(bits);\n\t\t\treturn new FloatValue(f);\n\t\t}\t\t\n\t\t\n\t\t/* xs:boolean */\n\t\telse if(type == Type.BOOLEAN)\n\t\t{\n\t\t\treturn new BooleanValue(data[start + (ValueIndexFactory.LENGTH_VALUE_TYPE)] == 1);\n\t\t}\t\t\n\t\t\n\t\t/* unknown! */\n\t\telse\n\t\t{\n\t\t\tthrow new EXistException(\"Unknown data type for deserialization: \" + Type.getTypeName(type));\n\t\t}\n\t}","commit_id":"9afb8bedb45d5501966de9c77d37b4427e044496","url":"https://github.com/eXist-db/exist"},{"original_method":"/**\n\t * @deprecated\n\t * @param value\n\t * @param offset\n\t * @param caseSensitive\n\t * @throws EXistException\n\t */\n\tpublic final static byte[] serialize(Indexable value, int offset, boolean caseSensitive) \n\tthrows EXistException {\n\n\t\t/* xs:string */\n\t\tif (Type.subTypeOf(value.getType(), Type.STRING))\n\t\t{\t\t\t\n\t\t\tfinal String val = caseSensitive ? \n\t\t\t\t((StringValue)value).getStringValue() : \n\t\t\t\t((StringValue)value).getStringValue().toLowerCase();\n\t\t\tfinal byte[] data = new byte[ offset + ValueIndexFactory.LENGTH_VALUE_TYPE + UTF8.encoded(val) ];\n\t\t\tdata[offset] = (byte) value.getType();\t// TODO: cast to byte is not safe\n\t\t\tUTF8.encode(val, data, offset + ValueIndexFactory.LENGTH_VALUE_TYPE);  \n\t\t\treturn data;\n\t\t}\n\t\t\n\t\t/* xs:dateTime */\n\t\telse if(Type.subTypeOf(value.getType(), Type.DATE_TIME))\t\t{\n\t    \tGregorianCalendar utccal = ((AbstractDateTimeValue)value).calendar.normalize().toGregorianCalendar();\t//Get the dateTime (XMLGregorianCalendar) normalized to UTC (as a GregorianCalendar)\n\t\t\tlong millis = utccal.getTimeInMillis();\t\t\t\t\t\t\t\t\t//Get the normalized dateTime as a long (milliseconds since the Epoch)\n\t\t\tfinal byte[] data = new byte[offset + ValueIndexFactory.LENGTH_VALUE_TYPE + 8];\t\t//allocate an appropriately sized byte array for holding Type,long\n\t\t\tdata[offset] = (byte) Type.DATE_TIME;\t\t\t\t//put the Type in the byte array\n\t\t\tByteConversion.longToByte(millis, data, offset+1);\t//put the long into the byte array\n\t\t\treturn(data);\t\t\t\t\t\t\t\t\t\t//return the byte array\n\t\t}\n\t\t\n\t\t/* xs:integer */\n\t\telse if(Type.subTypeOf(value.getType(), Type.INTEGER))\n\t\t{\n\t\t\tfinal byte[] data = new byte[ offset + ValueIndexFactory.LENGTH_VALUE_TYPE + 8];\n\t\t\tdata[offset] = (byte) Type.INTEGER;\n\t        long l = ((IntegerValue)value).getValue() - Long.MIN_VALUE;\n\t\t\tByteConversion.longToByte(l, data, offset + ValueIndexFactory.LENGTH_VALUE_TYPE);\n\t\t\treturn data;\n\t\t}\n\t\t\n\t\t/* xs:double */\n\t\telse if (value.getType() == Type.DOUBLE)\n\t\t{\n\t\t\tfinal byte[] data = new byte[offset + ValueIndexFactory.LENGTH_VALUE_TYPE + 8];\n\t        data[offset] = (byte) Type.DOUBLE;\n\t        final long bits = Double.doubleToLongBits(((DoubleValue)value).getValue()) ^ 0x8000000000000000L;\n\t        ByteConversion.longToByte(bits, data, offset + ValueIndexFactory.LENGTH_VALUE_TYPE);\n\t        return data;\n\t\t}\n\t\t\n\t\t/* xs:float */\n\t\telse if (value.getType() == Type.FLOAT)\n\t\t{\n\t\t\tfinal byte[] data = new byte[offset + ValueIndexFactory.LENGTH_VALUE_TYPE + 4];\n\t\t\tdata[offset] = (byte) Type.FLOAT;\n\t        final int bits = (int)(Float.floatToIntBits(((FloatValue)value).getValue()) ^ 0x80000000);\n\t        ByteConversion.intToByte(bits, data, offset + ValueIndexFactory.LENGTH_VALUE_TYPE);\n\t        return data;\n\t\t}\t\t\n\t\n\t\t/* xs:boolean */\n\t\telse if(value.getType() == Type.BOOLEAN)\n\t\t{\n\t\t\tfinal byte[] data = new byte[ offset + ValueIndexFactory.LENGTH_VALUE_TYPE + 1];\n\t    \tdata[offset] = Type.BOOLEAN;\n\t        data[offset + ValueIndexFactory.LENGTH_VALUE_TYPE] = (byte)(((BooleanValue)value).getValue() ? 1 : 0);\n\t        return data;\n\t\t}\t\t\n\t\t\n\t\t/* unknown! */\n\t\telse\n\t\t{\n\t\t\tthrow new EXistException(\"Unknown data type for serialization: \" + Type.getTypeName(value.getType()));\n\t\t}\t\n\t}","id":2902,"modified_method":"/**\n\t * @deprecated\n\t * @param value\n\t * @param offset\n\t * @param caseSensitive\n\t * @throws EXistException\n\t */\n\tpublic final static byte[] serialize(Indexable value, int offset, boolean caseSensitive) \n\tthrows EXistException {\n\n\t\t/* xs:string */\n\t\tif (Type.subTypeOf(value.getType(), Type.STRING))\n\t\t{\t\t\t\n\t\t\tfinal String val = caseSensitive ? \n\t\t\t\t((StringValue)value).getStringValue() : \n\t\t\t\t((StringValue)value).getStringValue().toLowerCase();\n\t\t\tfinal byte[] data = new byte[ offset + ValueIndexFactory.LENGTH_VALUE_TYPE + UTF8.encoded(val) ];\n\t\t\tdata[offset] = (byte) value.getType();\t// TODO: cast to byte is not safe\n\t\t\tUTF8.encode(val, data, offset + ValueIndexFactory.LENGTH_VALUE_TYPE);  \n\t\t\treturn data;\n\t\t}\n\t\t\n\t\t/* xs:dateTime */\n\t\telse if(Type.subTypeOf(value.getType(), Type.DATE_TIME))\t\t{\n\t    \tGregorianCalendar utccal = ((AbstractDateTimeValue)value).calendar.normalize().toGregorianCalendar();\t//Get the dateTime (XMLGregorianCalendar) normalized to UTC (as a GregorianCalendar)\n\t\t\tlong millis = utccal.getTimeInMillis();\t\t\t\t\t\t\t\t\t//Get the normalized dateTime as a long (milliseconds since the Epoch)\n\t\t\tfinal byte[] data = new byte[offset + ValueIndexFactory.LENGTH_VALUE_TYPE + 8];\t\t//allocate an appropriately sized byte array for holding Type,long\n\t\t\tdata[offset] = (byte) Type.DATE_TIME;\t\t\t\t//put the Type in the byte array\n\t\t\tByteConversion.longToByte(millis, data, offset+1);\t//put the long into the byte array\n\t\t\treturn(data);\t\t\t\t\t\t\t\t\t\t//return the byte array\n\t\t}\n\t\t\n    /* xs:date */\n    else if(Type.subTypeOf(value.getType(), Type.DATE))    {\n        GregorianCalendar utccal = ((AbstractDateTimeValue)value).calendar.normalize().toGregorianCalendar(); //Get the dateTime (XMLGregorianCalendar) normalized to UTC (as a GregorianCalendar)\n      long millis = utccal.getTimeInMillis();                 //Get the normalized dateTime as a long (milliseconds since the Epoch)\n      final byte[] data = new byte[offset + ValueIndexFactory.LENGTH_VALUE_TYPE + 8];   //allocate an appropriately sized byte array for holding Type,long\n      data[offset] = (byte) Type.DATE;       //put the Type in the byte array\n      ByteConversion.longToByte(millis, data, offset+1);  //put the long into the byte array\n      return(data);                   //return the byte array\n    }\n    \n\t\t/* xs:integer */\n\t\telse if(Type.subTypeOf(value.getType(), Type.INTEGER))\n\t\t{\n\t\t\tfinal byte[] data = new byte[ offset + ValueIndexFactory.LENGTH_VALUE_TYPE + 8];\n\t\t\tdata[offset] = (byte) Type.INTEGER;\n\t        long l = ((IntegerValue)value).getValue() - Long.MIN_VALUE;\n\t\t\tByteConversion.longToByte(l, data, offset + ValueIndexFactory.LENGTH_VALUE_TYPE);\n\t\t\treturn data;\n\t\t}\n\t\t\n\t\t/* xs:double */\n\t\telse if (value.getType() == Type.DOUBLE)\n\t\t{\n\t\t\tfinal byte[] data = new byte[offset + ValueIndexFactory.LENGTH_VALUE_TYPE + 8];\n\t        data[offset] = (byte) Type.DOUBLE;\n\t        final long bits = Double.doubleToLongBits(((DoubleValue)value).getValue()) ^ 0x8000000000000000L;\n\t        ByteConversion.longToByte(bits, data, offset + ValueIndexFactory.LENGTH_VALUE_TYPE);\n\t        return data;\n\t\t}\n\t\t\n\t\t/* xs:float */\n\t\telse if (value.getType() == Type.FLOAT)\n\t\t{\n\t\t\tfinal byte[] data = new byte[offset + ValueIndexFactory.LENGTH_VALUE_TYPE + 4];\n\t\t\tdata[offset] = (byte) Type.FLOAT;\n\t        final int bits = (int)(Float.floatToIntBits(((FloatValue)value).getValue()) ^ 0x80000000);\n\t        ByteConversion.intToByte(bits, data, offset + ValueIndexFactory.LENGTH_VALUE_TYPE);\n\t        return data;\n\t\t}\t\t\n\t\n\t\t/* xs:boolean */\n\t\telse if(value.getType() == Type.BOOLEAN)\n\t\t{\n\t\t\tfinal byte[] data = new byte[ offset + ValueIndexFactory.LENGTH_VALUE_TYPE + 1];\n\t    \tdata[offset] = Type.BOOLEAN;\n\t        data[offset + ValueIndexFactory.LENGTH_VALUE_TYPE] = (byte)(((BooleanValue)value).getValue() ? 1 : 0);\n\t        return data;\n\t\t}\t\t\n\t\t\n\t\t/* unknown! */\n\t\telse\n\t\t{\n\t\t\tthrow new EXistException(\"Unknown data type for serialization: \" + Type.getTypeName(value.getType()));\n\t\t}\t\n\t}","commit_id":"9afb8bedb45d5501966de9c77d37b4427e044496","url":"https://github.com/eXist-db/exist"},{"original_method":"/**\n\t * @deprecated\n\t * @param value\n\t * @param offset\n\t * @param caseSensitive\n\t * @throws EXistException\n\t */\n\tpublic final static byte[] serialize(Indexable value, int offset, boolean caseSensitive) \n\tthrows EXistException {\n\n\t\t/* xs:string */\n\t\tif (Type.subTypeOf(value.getType(), Type.STRING))\n\t\t{\t\t\t\n\t\t\tfinal String val = caseSensitive ? \n\t\t\t\t((StringValue)value).getStringValue() : \n\t\t\t\t((StringValue)value).getStringValue().toLowerCase();\n\t\t\tfinal byte[] data = new byte[ offset + ValueIndexFactory.LENGTH_VALUE_TYPE + UTF8.encoded(val) ];\n\t\t\tdata[offset] = (byte) value.getType();\t// TODO: cast to byte is not safe\n\t\t\tUTF8.encode(val, data, offset + ValueIndexFactory.LENGTH_VALUE_TYPE);  \n\t\t\treturn data;\n\t\t}\n\t\t\n\t\t/* xs:dateTime */\n\t\telse if(Type.subTypeOf(value.getType(), Type.DATE_TIME))\t\t{\n\t    \tGregorianCalendar utccal = ((AbstractDateTimeValue)value).calendar.normalize().toGregorianCalendar();\t//Get the dateTime (XMLGregorianCalendar) normalized to UTC (as a GregorianCalendar)\n\t\t\tlong millis = utccal.getTimeInMillis();\t\t\t\t\t\t\t\t\t//Get the normalized dateTime as a long (milliseconds since the Epoch)\n\t\t\tfinal byte[] data = new byte[offset + ValueIndexFactory.LENGTH_VALUE_TYPE + 8];\t\t//allocate an appropriately sized byte array for holding Type,long\n\t\t\tdata[offset] = (byte) Type.DATE_TIME;\t\t\t\t//put the Type in the byte array\n\t\t\tByteConversion.longToByte(millis, data, offset+1);\t//put the long into the byte array\n\t\t\treturn(data);\t\t\t\t\t\t\t\t\t\t//return the byte array\n\t\t}\n\t\t\n\t\t/* xs:integer */\n\t\telse if(Type.subTypeOf(value.getType(), Type.INTEGER))\n\t\t{\n\t\t\tfinal byte[] data = new byte[ offset + ValueIndexFactory.LENGTH_VALUE_TYPE + 8];\n\t\t\tdata[offset] = (byte) Type.INTEGER;\n\t        long l = ((IntegerValue)value).getValue() - Long.MIN_VALUE;\n\t\t\tByteConversion.longToByte(l, data, offset + ValueIndexFactory.LENGTH_VALUE_TYPE);\n\t\t\treturn data;\n\t\t}\n\t\t\n\t\t/* xs:double */\n\t\telse if (value.getType() == Type.DOUBLE)\n\t\t{\n\t\t\tfinal byte[] data = new byte[offset + ValueIndexFactory.LENGTH_VALUE_TYPE + 8];\n\t        data[offset] = (byte) Type.DOUBLE;\n\t        final long bits = Double.doubleToLongBits(((DoubleValue)value).getValue()) ^ 0x8000000000000000L;\n\t        ByteConversion.longToByte(bits, data, offset + ValueIndexFactory.LENGTH_VALUE_TYPE);\n\t        return data;\n\t\t}\n\t\t\n\t\t/* xs:float */\n\t\telse if (value.getType() == Type.FLOAT)\n\t\t{\n\t\t\tfinal byte[] data = new byte[offset + ValueIndexFactory.LENGTH_VALUE_TYPE + 4];\n\t\t\tdata[offset] = (byte) Type.FLOAT;\n\t        final int bits = (int)(Float.floatToIntBits(((FloatValue)value).getValue()) ^ 0x80000000);\n\t        ByteConversion.intToByte(bits, data, offset + ValueIndexFactory.LENGTH_VALUE_TYPE);\n\t        return data;\n\t\t}\t\t\n\t\n\t\t/* xs:boolean */\n\t\telse if(value.getType() == Type.BOOLEAN)\n\t\t{\n\t\t\tfinal byte[] data = new byte[ offset + ValueIndexFactory.LENGTH_VALUE_TYPE + 1];\n\t    \tdata[offset] = Type.BOOLEAN;\n\t        data[offset + ValueIndexFactory.LENGTH_VALUE_TYPE] = (byte)(((BooleanValue)value).getValue() ? 1 : 0);\n\t        return data;\n\t\t}\t\t\n\t\t\n\t\t/* unknown! */\n\t\telse\n\t\t{\n\t\t\tthrow new EXistException(\"Unknown data type for serialization: \" + Type.getTypeName(value.getType()));\n\t\t}\t\n\t}","id":2903,"modified_method":"/**\n\t * @deprecated\n\t * @param value\n\t * @param offset\n\t * @param caseSensitive\n\t * @throws EXistException\n\t */\n\tpublic final static byte[] serialize(Indexable value, int offset, boolean caseSensitive) \n\tthrows EXistException {\n\n\t\t/* xs:string */\n\t\tif (Type.subTypeOf(value.getType(), Type.STRING))\n\t\t{\t\t\t\n\t\t\tfinal String val = caseSensitive ? \n\t\t\t\t((StringValue)value).getStringValue() : \n\t\t\t\t((StringValue)value).getStringValue().toLowerCase();\n\t\t\tfinal byte[] data = new byte[ offset + ValueIndexFactory.LENGTH_VALUE_TYPE + UTF8.encoded(val) ];\n\t\t\tdata[offset] = (byte) value.getType();\t// TODO: cast to byte is not safe\n\t\t\tUTF8.encode(val, data, offset + ValueIndexFactory.LENGTH_VALUE_TYPE);  \n\t\t\treturn data;\n\t\t}\n\t\t\n\t\t/* xs:dateTime */\n\t\telse if(Type.subTypeOf(value.getType(), Type.DATE_TIME))\t\t{\n\t    \tGregorianCalendar utccal = ((AbstractDateTimeValue)value).calendar.normalize().toGregorianCalendar();\t//Get the dateTime (XMLGregorianCalendar) normalized to UTC (as a GregorianCalendar)\n\t\t\tlong millis = utccal.getTimeInMillis();\t\t\t\t\t\t\t\t\t//Get the normalized dateTime as a long (milliseconds since the Epoch)\n\t\t\tfinal byte[] data = new byte[offset + ValueIndexFactory.LENGTH_VALUE_TYPE + 8];\t\t//allocate an appropriately sized byte array for holding Type,long\n\t\t\tdata[offset] = (byte) Type.DATE_TIME;\t\t\t\t//put the Type in the byte array\n\t\t\tByteConversion.longToByte(millis, data, offset+1);\t//put the long into the byte array\n\t\t\treturn(data);\t\t\t\t\t\t\t\t\t\t//return the byte array\n\t\t}\n\t\t\n    /* xs:date */\n    else if(Type.subTypeOf(value.getType(), Type.DATE))    {\n        GregorianCalendar utccal = ((AbstractDateTimeValue)value).calendar.normalize().toGregorianCalendar(); //Get the dateTime (XMLGregorianCalendar) normalized to UTC (as a GregorianCalendar)\n      long millis = utccal.getTimeInMillis();                 //Get the normalized dateTime as a long (milliseconds since the Epoch)\n      final byte[] data = new byte[offset + ValueIndexFactory.LENGTH_VALUE_TYPE + 8];   //allocate an appropriately sized byte array for holding Type,long\n      data[offset] = (byte) Type.DATE;       //put the Type in the byte array\n      ByteConversion.longToByte(millis, data, offset+1);  //put the long into the byte array\n      return(data);                   //return the byte array\n    }\n    \n\t\t/* xs:integer */\n\t\telse if(Type.subTypeOf(value.getType(), Type.INTEGER))\n\t\t{\n\t\t\tfinal byte[] data = new byte[ offset + ValueIndexFactory.LENGTH_VALUE_TYPE + 8];\n\t\t\tdata[offset] = (byte) Type.INTEGER;\n\t        long l = ((IntegerValue)value).getValue() - Long.MIN_VALUE;\n\t\t\tByteConversion.longToByte(l, data, offset + ValueIndexFactory.LENGTH_VALUE_TYPE);\n\t\t\treturn data;\n\t\t}\n\t\t\n\t\t/* xs:double */\n\t\telse if (value.getType() == Type.DOUBLE)\n\t\t{\n\t\t\tfinal byte[] data = new byte[offset + ValueIndexFactory.LENGTH_VALUE_TYPE + 8];\n\t        data[offset] = (byte) Type.DOUBLE;\n\t        final long bits = Double.doubleToLongBits(((DoubleValue)value).getValue()) ^ 0x8000000000000000L;\n\t        ByteConversion.longToByte(bits, data, offset + ValueIndexFactory.LENGTH_VALUE_TYPE);\n\t        return data;\n\t\t}\n\t\t\n\t\t/* xs:float */\n\t\telse if (value.getType() == Type.FLOAT)\n\t\t{\n\t\t\tfinal byte[] data = new byte[offset + ValueIndexFactory.LENGTH_VALUE_TYPE + 4];\n\t\t\tdata[offset] = (byte) Type.FLOAT;\n\t        final int bits = (int)(Float.floatToIntBits(((FloatValue)value).getValue()) ^ 0x80000000);\n\t        ByteConversion.intToByte(bits, data, offset + ValueIndexFactory.LENGTH_VALUE_TYPE);\n\t        return data;\n\t\t}\t\t\n\t\n\t\t/* xs:boolean */\n\t\telse if(value.getType() == Type.BOOLEAN)\n\t\t{\n\t\t\tfinal byte[] data = new byte[ offset + ValueIndexFactory.LENGTH_VALUE_TYPE + 1];\n\t    \tdata[offset] = Type.BOOLEAN;\n\t        data[offset + ValueIndexFactory.LENGTH_VALUE_TYPE] = (byte)(((BooleanValue)value).getValue() ? 1 : 0);\n\t        return data;\n\t\t}\t\t\n\t\t\n\t\t/* unknown! */\n\t\telse\n\t\t{\n\t\t\tthrow new EXistException(\"Unknown data type for serialization: \" + Type.getTypeName(value.getType()));\n\t\t}\t\n\t}","commit_id":"e4d1c7acae6dbe09dfdba66e5ad2486d6b13bc0f","url":"https://github.com/eXist-db/exist"},{"original_method":"public final static Indexable deserialize(byte[] data, int start, int len) throws EXistException {\n\t\t\n\t\tint type = data[start];\n\t\t\n\t\t//TODO : improve deserialization (use static methods in the org.exist.xquery.Value package\n\t\t\n\t\t/* xs:string */\n\t\tif (Type.subTypeOf(type, Type.STRING))\n\t\t{\n\t\t\tString s;\n\t\t\ttry {\n\t\t\t\ts = new String(data, start + (ValueIndexFactory.LENGTH_VALUE_TYPE),\n\t\t\t\tlen - (ValueIndexFactory.LENGTH_VALUE_TYPE), \"UTF-8\");\n\t\t\t} catch (UnsupportedEncodingException e) {\n\t\t\t\tLOG.error(e);\n\t\t\t\tthrow new EXistException(e);\n\t\t\t}\n\t\t\treturn new StringValue(s);\n\t\t}\n\t\t\n\t\t/* xs:dateTime */\n\t\telse if(Type.subTypeOf(type, Type.DATE_TIME))\t\t{\n\t\t\t//get the dateTime back as a long\n\t\t\tlong value = ByteConversion.byteToLong(data, start + (ValueIndexFactory.LENGTH_VALUE_TYPE));\n\t\t\t//Create a GregorianCalendar from the long (normalized datetime as milliseconds since the Epoch)\n\t\t\tGregorianCalendar utccal = new GregorianCalendar();\n\t\t\tutccal.setTimeInMillis(value);\n\t\t\t//Create a XMLGregorianCalendar from the GregorianCalendar\n\t\t\ttry\n\t\t\t{\n\t\t\t\tXMLGregorianCalendar xmlutccal = DatatypeFactory.newInstance().newXMLGregorianCalendar(utccal);\n\t\t\t\treturn new DateTimeValue(xmlutccal);\n\t\t\t}\n\t\t\tcatch(DatatypeConfigurationException dtce)\n\t\t\t{\n\t\t\t\tthrow new EXistException(\"Could not deserialize xs:dateTime data type for range index key: \" + Type.getTypeName(type) + \" - \" + dtce.getMessage());\n\t\t\t}\n\t\t}\n\t\t\n\t\t/* xs:integer */\n\t\telse if(Type.subTypeOf(type, Type.INTEGER))\n\t\t{\n\t\t\treturn new IntegerValue(ByteConversion.byteToLong(data, start + (ValueIndexFactory.LENGTH_VALUE_TYPE)) ^ 0x8000000000000000L);\n\t\t}\n\n\t\t\n\t\t/* xs:double */\n\t\telse if (type == Type.DOUBLE)\n\t\t{\n\t\t\tlong bits = ByteConversion.byteToLong(data, start + (ValueIndexFactory.LENGTH_VALUE_TYPE)) ^ 0x8000000000000000L;\n\t\t\tdouble d = Double.longBitsToDouble(bits);\n\t\t\treturn new DoubleValue(d);\n\t\t}\n\t\t\n\t\t/* xs:float */\n\t\telse if (type == Type.FLOAT)\n\t\t{\n\t\t\tint bits = ByteConversion.byteToInt(data, start + (ValueIndexFactory.LENGTH_VALUE_TYPE)) ^ 0x80000000;\n\t\t\tfloat f = Float.intBitsToFloat(bits);\n\t\t\treturn new FloatValue(f);\n\t\t}\t\t\n\t\t\n\t\t/* xs:boolean */\n\t\telse if(type == Type.BOOLEAN)\n\t\t{\n\t\t\treturn new BooleanValue(data[start + (ValueIndexFactory.LENGTH_VALUE_TYPE)] == 1);\n\t\t}\t\t\n\t\t\n\t\t/* unknown! */\n\t\telse\n\t\t{\n\t\t\tthrow new EXistException(\"Unknown data type for deserialization: \" + Type.getTypeName(type));\n\t\t}\n\t}","id":2904,"modified_method":"public final static Indexable deserialize(byte[] data, int start, int len) throws EXistException {\n\t\t\n\t\tint type = data[start];\n\t\t\n\t\t//TODO : improve deserialization (use static methods in the org.exist.xquery.Value package\n\t\t\n\t\t/* xs:string */\n\t\tif (Type.subTypeOf(type, Type.STRING))\n\t\t{\n\t\t\tString s;\n\t\t\ttry {\n\t\t\t\ts = new String(data, start + (ValueIndexFactory.LENGTH_VALUE_TYPE),\n\t\t\t\tlen - (ValueIndexFactory.LENGTH_VALUE_TYPE), \"UTF-8\");\n\t\t\t} catch (UnsupportedEncodingException e) {\n\t\t\t\tLOG.error(e);\n\t\t\t\tthrow new EXistException(e);\n\t\t\t}\n\t\t\treturn new StringValue(s);\n\t\t}\n\t\t\n\t\t/* xs:dateTime */\n\t\telse if(Type.subTypeOf(type, Type.DATE_TIME))\t\t{\n\t\t\t//get the dateTime back as a long\n\t\t\tlong value = ByteConversion.byteToLong(data, start + (ValueIndexFactory.LENGTH_VALUE_TYPE));\n\t\t\t//Create a GregorianCalendar from the long (normalized datetime as milliseconds since the Epoch)\n\t\t\tGregorianCalendar utccal = new GregorianCalendar();\n\t\t\tutccal.setTimeInMillis(value);\n\t\t\t//Create a XMLGregorianCalendar from the GregorianCalendar\n\t\t\ttry\n\t\t\t{\n\t\t\t\tXMLGregorianCalendar xmlutccal = DatatypeFactory.newInstance().newXMLGregorianCalendar(utccal);\n\t\t\t\treturn new DateTimeValue(xmlutccal);\n\t\t\t}\n\t\t\tcatch(DatatypeConfigurationException dtce)\n\t\t\t{\n\t\t\t\tthrow new EXistException(\"Could not deserialize xs:dateTime data type for range index key: \" + Type.getTypeName(type) + \" - \" + dtce.getMessage());\n\t\t\t}\n\t\t}\n\t\t\n    /* xs:date */\n    else if(Type.subTypeOf(type, Type.DATE))   {\n      //get the date back as a long\n      long value = ByteConversion.byteToLong(data, start + (ValueIndexFactory.LENGTH_VALUE_TYPE));\n      //Create a GregorianCalendar from the long (normalized datetime as milliseconds since the Epoch)\n      GregorianCalendar utccal = new GregorianCalendar();\n      utccal.setTimeInMillis(value);\n      //Create a XMLGregorianCalendar from the GregorianCalendar\n      try\n      {\n        XMLGregorianCalendar xmlutccal = DatatypeFactory.newInstance().newXMLGregorianCalendar(utccal);\n        return new DateValue(xmlutccal);\n      }\n      catch(DatatypeConfigurationException dtce)\n      {\n        throw new EXistException(\"Could not deserialize xs:date data type for range index key: \" + Type.getTypeName(type) + \" - \" + dtce.getMessage());\n      }\n      catch(XPathException xpe)\n      {\n        throw new EXistException(\"Could not deserialize xs:date data type for range index key: \" + Type.getTypeName(type) + \" - \" + xpe.getMessage());\n      }\n    }\n    \n\t\t/* xs:integer */\n\t\telse if(Type.subTypeOf(type, Type.INTEGER))\n\t\t{\n\t\t\treturn new IntegerValue(ByteConversion.byteToLong(data, start + (ValueIndexFactory.LENGTH_VALUE_TYPE)) ^ 0x8000000000000000L);\n\t\t}\n\n\t\t\n\t\t/* xs:double */\n\t\telse if (type == Type.DOUBLE)\n\t\t{\n\t\t\tlong bits = ByteConversion.byteToLong(data, start + (ValueIndexFactory.LENGTH_VALUE_TYPE)) ^ 0x8000000000000000L;\n\t\t\tdouble d = Double.longBitsToDouble(bits);\n\t\t\treturn new DoubleValue(d);\n\t\t}\n\t\t\n\t\t/* xs:float */\n\t\telse if (type == Type.FLOAT)\n\t\t{\n\t\t\tint bits = ByteConversion.byteToInt(data, start + (ValueIndexFactory.LENGTH_VALUE_TYPE)) ^ 0x80000000;\n\t\t\tfloat f = Float.intBitsToFloat(bits);\n\t\t\treturn new FloatValue(f);\n\t\t}\t\t\n\t\t\n\t\t/* xs:boolean */\n\t\telse if(type == Type.BOOLEAN)\n\t\t{\n\t\t\treturn new BooleanValue(data[start + (ValueIndexFactory.LENGTH_VALUE_TYPE)] == 1);\n\t\t}\t\t\n\t\t\n\t\t/* unknown! */\n\t\telse\n\t\t{\n\t\t\tthrow new EXistException(\"Unknown data type for deserialization: \" + Type.getTypeName(type));\n\t\t}\n\t}","commit_id":"e4d1c7acae6dbe09dfdba66e5ad2486d6b13bc0f","url":"https://github.com/eXist-db/exist"},{"original_method":"@Override\n  public void initClazz(ODatabaseDocumentTx db) {\n\n    OSchemaProxy schema = db.getMetadata().getSchema();\n    OClass polygon = schema.createClass(getName());\n    polygon.setAbstract(true);\n    OClass shape = superClass(db);\n    polygon.addSuperClass(shape);\n    polygon.createProperty(\"geometries\", OType.EMBEDDEDLIST, shape);\n  }","id":2905,"modified_method":"@Override\n  public void initClazz(ODatabaseDocumentTx db) {\n\n    OSchemaProxy schema = db.getMetadata().getSchema();\n    OClass shape = superClass(db);\n    OClass polygon = schema.createAbstractClass(getName(),shape);\n    polygon.createProperty(\"geometries\", OType.EMBEDDEDLIST, shape);\n  }","commit_id":"3900f204c13fb3bd4b61c1ac2970d6f81fdca62f","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Override\n  public void initClazz(ODatabaseDocumentTx db) {\n\n    OSchemaProxy schema = db.getMetadata().getSchema();\n    OClass lineString = schema.createClass(getName());\n    lineString.setAbstract(true);\n    lineString.addSuperClass(superClass(db));\n    lineString.createProperty(COORDINATES, OType.EMBEDDEDLIST, OType.EMBEDDEDLIST);\n  }","id":2906,"modified_method":"@Override\n  public void initClazz(ODatabaseDocumentTx db) {\n\n    OSchemaProxy schema = db.getMetadata().getSchema();\n    OClass lineString = schema.createAbstractClass(getName(),superClass(db));\n    lineString.createProperty(COORDINATES, OType.EMBEDDEDLIST, OType.EMBEDDEDLIST);\n  }","commit_id":"3900f204c13fb3bd4b61c1ac2970d6f81fdca62f","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Override\n  public void initClazz(ODatabaseDocumentTx db) {\n    OSchemaProxy schema = db.getMetadata().getSchema();\n    OClass lineString = schema.createClass(getName());\n    lineString.setAbstract(true);\n    lineString.addSuperClass(superClass(db));\n    lineString.createProperty(COORDINATES, OType.EMBEDDEDLIST, OType.EMBEDDEDLIST);\n  }","id":2907,"modified_method":"@Override\n  public void initClazz(ODatabaseDocumentTx db) {\n    OSchemaProxy schema = db.getMetadata().getSchema();\n    OClass lineString = schema.createAbstractClass(getName(),superClass(db));\n    lineString.createProperty(COORDINATES, OType.EMBEDDEDLIST, OType.EMBEDDEDLIST);\n  }","commit_id":"3900f204c13fb3bd4b61c1ac2970d6f81fdca62f","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Override\n  public void initClazz(ODatabaseDocumentTx db) {\n\n    OSchemaProxy schema = db.getMetadata().getSchema();\n    OClass multiPoint = schema.createClass(getName());\n    multiPoint.setAbstract(true);\n    multiPoint.addSuperClass(superClass(db));\n    multiPoint.createProperty(COORDINATES, OType.EMBEDDEDLIST, OType.EMBEDDEDLIST);\n  }","id":2908,"modified_method":"@Override\n  public void initClazz(ODatabaseDocumentTx db) {\n\n    OSchemaProxy schema = db.getMetadata().getSchema();\n    OClass multiPoint = schema.createAbstractClass(getName(),superClass(db));\n    multiPoint.createProperty(COORDINATES, OType.EMBEDDEDLIST, OType.EMBEDDEDLIST);\n  }","commit_id":"3900f204c13fb3bd4b61c1ac2970d6f81fdca62f","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Override\n  public void initClazz(ODatabaseDocumentTx db) {\n\n    OSchemaProxy schema = db.getMetadata().getSchema();\n    OClass polygon = schema.createClass(getName());\n    polygon.setAbstract(true);\n    polygon.addSuperClass(superClass(db));\n    polygon.createProperty(\"coordinates\", OType.EMBEDDEDLIST, OType.EMBEDDEDLIST);\n  }","id":2909,"modified_method":"@Override\n  public void initClazz(ODatabaseDocumentTx db) {\n\n    OSchemaProxy schema = db.getMetadata().getSchema();\n    OClass polygon = schema.createAbstractClass(getName(),superClass(db));\n    polygon.createProperty(\"coordinates\", OType.EMBEDDEDLIST, OType.EMBEDDEDLIST);\n  }","commit_id":"3900f204c13fb3bd4b61c1ac2970d6f81fdca62f","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Override\n  public void initClazz(ODatabaseDocumentTx db) {\n\n    OSchemaProxy schema = db.getMetadata().getSchema();\n    OClass point = schema.createClass(getName());\n    point.setAbstract(true);\n    point.addSuperClass(superClass(db));\n    OProperty coordinates = point.createProperty(COORDINATES, OType.EMBEDDEDLIST, OType.DOUBLE);\n    coordinates.setMin(\"2\");\n    coordinates.setMin(\"2\");\n  }","id":2910,"modified_method":"@Override\n  public void initClazz(ODatabaseDocumentTx db) {\n\n    OSchemaProxy schema = db.getMetadata().getSchema();\n    OClass point = schema.createAbstractClass(getName(),superClass(db));\n    OProperty coordinates = point.createProperty(COORDINATES, OType.EMBEDDEDLIST, OType.DOUBLE);\n    coordinates.setMin(\"2\");\n    coordinates.setMin(\"2\");\n  }","commit_id":"3900f204c13fb3bd4b61c1ac2970d6f81fdca62f","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Override\n  public void initClazz(ODatabaseDocumentTx db) {\n\n    OSchemaProxy schema = db.getMetadata().getSchema();\n    OClass polygon = schema.createClass(getName());\n    polygon.setAbstract(true);\n    polygon.addSuperClass(superClass(db));\n    polygon.createProperty(\"coordinates\", OType.EMBEDDEDLIST, OType.EMBEDDEDLIST);\n\n  }","id":2911,"modified_method":"@Override\n  public void initClazz(ODatabaseDocumentTx db) {\n\n    OSchemaProxy schema = db.getMetadata().getSchema();\n    OClass polygon = schema.createAbstractClass(getName(),superClass(db));\n    polygon.createProperty(\"coordinates\", OType.EMBEDDEDLIST, OType.EMBEDDEDLIST);\n\n  }","commit_id":"3900f204c13fb3bd4b61c1ac2970d6f81fdca62f","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"@Override\n  public void initClazz(ODatabaseDocumentTx db) {\n\n    OSchemaProxy schema = db.getMetadata().getSchema();\n    OClass rectangle = schema.createClass(getName());\n    rectangle.setAbstract(true);\n    rectangle.addSuperClass(superClass(db));\n    OProperty coordinates = rectangle.createProperty(COORDINATES, OType.EMBEDDEDLIST, OType.DOUBLE);\n    coordinates.setMin(\"4\");\n    coordinates.setMin(\"4\");\n  }","id":2912,"modified_method":"@Override\n  public void initClazz(ODatabaseDocumentTx db) {\n\n    OSchemaProxy schema = db.getMetadata().getSchema();\n    OClass rectangle = schema.createAbstractClass(getName(),superClass(db));\n    OProperty coordinates = rectangle.createProperty(COORDINATES, OType.EMBEDDEDLIST, OType.DOUBLE);\n    coordinates.setMin(\"4\");\n    coordinates.setMin(\"4\");\n  }","commit_id":"3900f204c13fb3bd4b61c1ac2970d6f81fdca62f","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"private void extendsStarted(Attributes attributes) throws ParseException {\n            String parentOrganisation = attributes.getValue(\"organisation\");\n            String parentModule = attributes.getValue(\"module\");\n            String parentRevision = attributes.getValue(\"revision\");\n            String location = elvis(attributes.getValue(\"location\"), getDefaultParentLocation());\n\n            String extendType = elvis(attributes.getValue(\"extendType\"), \"all\").toLowerCase();\n            List<String> extendTypes = Arrays.asList(extendType.split(\",\"));\n\n            ModuleDescriptor parent = null;\n            try {\n                LOGGER.debug(\"Trying to parse included ivy file :\" + location);\n                parent = parseOtherIvyFileOnFileSystem(location);\n\n                //verify that the parsed descriptor is the correct parent module.\n                ModuleId expected = new ModuleId(parentOrganisation, parentModule);\n                ModuleId pid = parent.getModuleRevisionId().getModuleId();\n                if (!expected.equals(pid)) {\n                    LOGGER.warn(\"Ignoring parent Ivy file \" + location + \"; expected \" + expected + \" but found \" + pid);\n                    parent = null;\n                }\n\n            } catch (ParseException e) {\n                LOGGER.warn(\"Unable to parse included ivy file \" + location + \": \" + e.getMessage());\n            } catch (IOException e) {\n                LOGGER.warn(\"Unable to parse included ivy file \" + location + \": \" + e.getMessage());\n            }\n\n            // if the included ivy file is not found on file system, tries to resolve using\n            // repositories\n            if (parent == null) {\n                try {\n                    LOGGER.debug(\"Trying to parse included ivy file by asking repository for module :\"\n                                            + parentOrganisation\n                                            + \"#\"\n                                            + parentModule\n                                            + \";\"\n                                            + parentRevision);\n                    parent = parseOtherIvyFile(parentOrganisation, parentModule, parentRevision);\n                } catch (ParseException e) {\n                    LOGGER.warn(\"Unable to parse included ivy file for \" + parentOrganisation + \"#\" + parentModule + \";\" + parentRevision);\n                }\n            }\n\n            if (parent == null) {\n                throw new ParseException(\"Unable to parse included ivy file for \" + parentOrganisation + \"#\" + parentModule + \";\" + parentRevision, 0);\n            }\n\n            DefaultExtendsDescriptor ed = new DefaultExtendsDescriptor(\n                    parent.getModuleRevisionId(),\n                    parent.getResolvedModuleRevisionId(),\n                    attributes.getValue(\"location\"),\n                    extendTypes.toArray(new String[extendTypes.size()]));\n            getMd().addInheritedDescriptor(ed);\n\n            mergeWithOtherModuleDescriptor(extendTypes, parent);\n        }","id":2913,"modified_method":"private void extendsStarted(Attributes attributes) throws ParseException {\n            String parentOrganisation = attributes.getValue(\"organisation\");\n            String parentModule = attributes.getValue(\"module\");\n            String parentRevision = attributes.getValue(\"revision\");\n            String location = elvis(attributes.getValue(\"location\"), \"../ivy.xml\");\n\n            String extendType = elvis(attributes.getValue(\"extendType\"), \"all\").toLowerCase();\n            List<String> extendTypes = Arrays.asList(extendType.split(\",\"));\n\n            ModuleDescriptor parent = null;\n            try {\n                LOGGER.debug(\"Trying to parse included ivy file :\" + location);\n                parent = parseOtherIvyFileOnFileSystem(location);\n\n                //verify that the parsed descriptor is the correct parent module.\n                ModuleId expected = new ModuleId(parentOrganisation, parentModule);\n                ModuleId pid = parent.getModuleRevisionId().getModuleId();\n                if (!expected.equals(pid)) {\n                    LOGGER.warn(\"Ignoring parent Ivy file \" + location + \"; expected \" + expected + \" but found \" + pid);\n                    parent = null;\n                }\n\n            } catch (ParseException e) {\n                LOGGER.debug(\"Unable to parse included ivy file \" + location + \": \" + e.getMessage());\n            } catch (IOException e) {\n                LOGGER.debug(\"Unable to parse included ivy file \" + location + \": \" + e.getMessage());\n            }\n\n            // if the included ivy file is not found on file system, tries to resolve using\n            // repositories\n            if (parent == null) {\n                try {\n                    LOGGER.debug(\"Trying to parse included ivy file by asking repository for module :\"\n                                            + parentOrganisation\n                                            + \"#\"\n                                            + parentModule\n                                            + \";\"\n                                            + parentRevision);\n                    parent = parseOtherIvyFile(parentOrganisation, parentModule, parentRevision);\n                } catch (ParseException e) {\n                    LOGGER.warn(\"Unable to parse included ivy file for \" + parentOrganisation + \"#\" + parentModule + \";\" + parentRevision);\n                }\n            }\n\n            if (parent == null) {\n                throw new ParseException(\"Unable to parse included ivy file for \" + parentOrganisation + \"#\" + parentModule + \";\" + parentRevision, 0);\n            }\n\n            DefaultExtendsDescriptor ed = new DefaultExtendsDescriptor(\n                    parent.getModuleRevisionId(),\n                    parent.getResolvedModuleRevisionId(),\n                    attributes.getValue(\"location\"),\n                    extendTypes.toArray(new String[extendTypes.size()]));\n            getMd().addInheritedDescriptor(ed);\n\n            mergeWithOtherModuleDescriptor(extendTypes, parent);\n        }","commit_id":"5b2c4077f596994a1eb1d7b0309b4b16d06fa07a","url":"https://github.com/gradle/gradle"},{"original_method":"private void validateIdentity(IvyNormalizedPublication publication) {\n        IvyPublicationIdentity identity = publication.getProjectIdentity();\n        Node infoNode = getIvyFileInfoNode(publication.getDescriptorFile());\n\n        field(publication, \"organisation\", identity.getOrganisation())\n                .notEmpty()\n                .validInFileName()\n                .matches((String) infoNode.attribute(\"organisation\"));\n        field(publication, \"module name\", identity.getModule())\n                .notEmpty()\n                .validInFileName()\n                .matches((String) infoNode.attribute(\"module\"));\n        field(publication, \"revision\", identity.getRevision())\n                .notEmpty()\n                .validInFileName()\n                .matches((String) infoNode.attribute(\"revision\"));\n    }","id":2914,"modified_method":"private void validateIdentity(IvyNormalizedPublication publication) {\n        IvyPublicationIdentity identity = publication.getProjectIdentity();\n\n        IvyFieldValidator organisation = field(publication, \"organisation\", identity.getOrganisation())\n                .notEmpty()\n                .validInFileName();\n        IvyFieldValidator moduleName = field(publication, \"module name\", identity.getModule())\n                .notEmpty()\n                .validInFileName();\n        IvyFieldValidator revision = field(publication, \"revision\", identity.getRevision())\n                .notEmpty()\n                .validInFileName();\n\n        ModuleRevisionId moduleId = parseIvyFile(publication);\n        organisation.matches(moduleId.getOrganisation());\n        moduleName.matches(moduleId.getName());\n        revision.matches(moduleId.getRevision());\n    }","commit_id":"5b2c4077f596994a1eb1d7b0309b4b16d06fa07a","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n  protected boolean isApplicableElement(@NotNull PsiElement element) {\n    IElementType type = element.getNode().getElementType();\n    return DartHierarchyUtil.isTypeExecutable(type);\n  }","id":2915,"modified_method":"@Override\n  protected boolean isApplicableElement(@NotNull PsiElement element) {\n    return DartHierarchyUtil.isExecutable(element);\n  }","commit_id":"2ecd57a139f1269df62b0d2cd0e2e31dcaef2fe4","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"@Nullable\n  @Override\n  public PsiElement getTarget(@NotNull DataContext dataContext) {\n    final Project project = CommonDataKeys.PROJECT.getData(dataContext);\n    final Editor editor = CommonDataKeys.EDITOR.getData(dataContext);\n    if (project == null || editor == null) return null;\n\n    final PsiFile file = PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());\n    final PsiElement psiElement = file == null ? null : file.findElementAt(editor.getCaretModel().getOffset());\n    DartReference dartReference = PsiTreeUtil.getParentOfType(psiElement, DartReference.class);\n    if (dartReference != null) {\n      if (dartReference.getTokenType() == NEW_EXPRESSION) {\n        DartComponent cons = DartResolveUtil.findConstructorDeclaration((DartNewExpression)dartReference);\n        if (cons != null && cons.getTokenType() == METHOD_DECLARATION) {\n          return cons;\n        }\n        else {\n          return null; // Class with no constructor.\n        }\n      }\n      if (dartReference.getTokenType() == CALL_EXPRESSION) {\n        dartReference = getRightmostReference(dartReference.getFirstChild());\n      }\n      DartComponent comp = DartResolveUtil.findReferenceAndComponentTarget(dartReference);\n      if (comp != null) {\n        return comp;\n      }\n    }\n    else {\n      DartComponent comp = PsiTreeUtil.getParentOfType(psiElement, DartComponent.class);\n      if (comp != null) {\n        return comp;\n      }\n    }\n    return null;\n  }","id":2916,"modified_method":"@Nullable\n  @Override\n  public PsiElement getTarget(@NotNull DataContext dataContext) {\n    final Project project = CommonDataKeys.PROJECT.getData(dataContext);\n    final Editor editor = CommonDataKeys.EDITOR.getData(dataContext);\n    if (project == null || editor == null) return null;\n\n    final PsiFile file = PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());\n    final PsiElement psiElement = file == null ? null : file.findElementAt(editor.getCaretModel().getOffset());\n    DartReference dartReference = PsiTreeUtil.getParentOfType(psiElement, DartReference.class);\n    if (dartReference != null) {\n      if (dartReference.getTokenType() == NEW_EXPRESSION) {\n        DartComponent cons = DartResolveUtil.findConstructorDeclaration((DartNewExpression)dartReference);\n        if (cons != null && cons.getTokenType() == METHOD_DECLARATION) {\n          return cons;\n        }\n        else {\n          return null; // Class with no constructor.\n        }\n      }\n      if (dartReference.getTokenType() == CALL_EXPRESSION) {\n        dartReference = getRightmostReference(dartReference.getFirstChild());\n      }\n      DartComponent comp = DartResolveUtil.findReferenceAndComponentTarget(dartReference);\n      return comp != null && DartHierarchyUtil.isExecutable(comp) ? comp : null;\n    }\n    else {\n      if (psiElement == null) return null;\n      if (DartHierarchyUtil.isExecutable(psiElement)) return psiElement;\n      DartComponentName name = PsiTreeUtil.getParentOfType(psiElement, DartComponentName.class);\n      if (name == null) {\n        // Cursor may be between identifier and left paren of function definition.\n        if (psiElement instanceof PsiWhiteSpace) {\n          name = PsiTreeUtil.getPrevSiblingOfType(psiElement, DartComponentName.class);\n        }\n        else if (\"(\".equals(psiElement.getText())) {\n          name = PsiTreeUtil.getPrevSiblingOfType(psiElement.getParent(), DartComponentName.class);\n        }\n      }\n      if (name != null) {\n        PsiElement def = name.getParent();\n        return def != null && DartHierarchyUtil.isExecutable(def) ? def : null;\n      }\n      return null;\n    }\n  }","commit_id":"2ecd57a139f1269df62b0d2cd0e2e31dcaef2fe4","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"@NotNull\n  @Override\n  protected Object[] buildChildren(@NotNull HierarchyNodeDescriptor descriptor) {\n    final List<DartHierarchyNodeDescriptor> descriptors = new ArrayList<>();\n    if (descriptor instanceof DartHierarchyNodeDescriptor) {\n      final DartHierarchyNodeDescriptor dartDescriptor = (DartHierarchyNodeDescriptor)descriptor;\n      PsiElement element = dartDescriptor.getPsiElement();\n      ASTNode node;\n      if (element == null || (node = element.getNode()) == null) {\n        return ArrayUtil.EMPTY_OBJECT_ARRAY;\n      }\n      IElementType type = node.getElementType();\n      boolean isCallable = DartHierarchyUtil.isTypeExecutable(type);\n      HierarchyNodeDescriptor nodeDescriptor = getBaseDescriptor();\n      if (!(element instanceof DartComponent) || !isCallable || nodeDescriptor == null) {\n        return ArrayUtil.EMPTY_OBJECT_ARRAY;\n      }\n      DartComponentName name = ((DartComponent)element).getComponentName();\n      if (name == null) {\n        return ArrayUtil.EMPTY_OBJECT_ARRAY;\n      }\n\n      final List<PsiElement> children = getChildren(name);\n      final HashMap<PsiElement, DartHierarchyNodeDescriptor> callerToDescriptorMap = new HashMap<>();\n      PsiElement baseClass = element instanceof DartMethodDeclaration ? PsiTreeUtil.getParentOfType(name, DartClass.class) : null;\n\n      for (PsiElement caller : children) {\n        if (isInScope(baseClass, caller, myScopeType)) {\n          DartHierarchyNodeDescriptor callerDescriptor = callerToDescriptorMap.get(caller);\n          if (callerDescriptor == null) {\n            callerDescriptor = new DartHierarchyNodeDescriptor(descriptor, caller, false);\n            callerToDescriptorMap.put(caller, callerDescriptor);\n            descriptors.add(callerDescriptor);\n          }\n        }\n      }\n    }\n    return ArrayUtil.toObjectArray(descriptors);\n  }","id":2917,"modified_method":"@NotNull\n  @Override\n  protected Object[] buildChildren(@NotNull HierarchyNodeDescriptor descriptor) {\n    final List<DartHierarchyNodeDescriptor> descriptors = new ArrayList<>();\n    if (descriptor instanceof DartHierarchyNodeDescriptor) {\n      final DartHierarchyNodeDescriptor dartDescriptor = (DartHierarchyNodeDescriptor)descriptor;\n      PsiElement element = dartDescriptor.getPsiElement();\n      if (element == null) {\n        return ArrayUtil.EMPTY_OBJECT_ARRAY;\n      }\n      boolean isCallable = DartHierarchyUtil.isExecutable(element);\n      HierarchyNodeDescriptor nodeDescriptor = getBaseDescriptor();\n      if (!(element instanceof DartComponent) || !isCallable || nodeDescriptor == null) {\n        return ArrayUtil.EMPTY_OBJECT_ARRAY;\n      }\n      DartComponentName name = ((DartComponent)element).getComponentName();\n      if (name == null) {\n        return ArrayUtil.EMPTY_OBJECT_ARRAY;\n      }\n\n      final List<PsiElement> children = getChildren(name);\n      final HashMap<PsiElement, DartHierarchyNodeDescriptor> callerToDescriptorMap = new HashMap<>();\n      PsiElement baseClass = element instanceof DartMethodDeclaration ? PsiTreeUtil.getParentOfType(name, DartClass.class) : null;\n\n      for (PsiElement caller : children) {\n        if (isInScope(baseClass, caller, myScopeType)) {\n          DartHierarchyNodeDescriptor callerDescriptor = callerToDescriptorMap.get(caller);\n          if (callerDescriptor == null) {\n            callerDescriptor = new DartHierarchyNodeDescriptor(descriptor, caller, false);\n            callerToDescriptorMap.put(caller, callerDescriptor);\n            descriptors.add(callerDescriptor);\n          }\n        }\n      }\n    }\n    return ArrayUtil.toObjectArray(descriptors);\n  }","commit_id":"2ecd57a139f1269df62b0d2cd0e2e31dcaef2fe4","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public static void collectDeclarations(@Nullable final PsiElement element, @NotNull final List<PsiElement> results) {\n    if (element != null) {\n      Condition<PsiElement> isExecutable = object -> {\n        if (object == null) return false;\n        ASTNode node = object.getNode();\n        if (node == null) return false;\n        IElementType type = node.getElementType();\n        return DartHierarchyUtil.isTypeExecutable(type);\n      };\n      PsiElement ref = PsiTreeUtil.findFirstParent(element, isExecutable);\n      if (ref != null) {\n        results.add(ref);\n      }\n    }\n  }","id":2918,"modified_method":"public static void collectDeclarations(@Nullable final PsiElement element, @NotNull final List<PsiElement> results) {\n    if (element != null) {\n      Condition<PsiElement> isExecutable = object -> {\n        if (object == null) return false;\n        return DartHierarchyUtil.isExecutable(object);\n      };\n      PsiElement ref = PsiTreeUtil.findFirstParent(element, isExecutable);\n      if (ref != null) {\n        results.add(ref);\n      }\n    }\n  }","commit_id":"2ecd57a139f1269df62b0d2cd0e2e31dcaef2fe4","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static PsiElement getDeclaration(DartNavigationTarget target, PsiElement reference) {\n    String name = target.getFile();\n    int offset = target.getOffset();\n    VirtualFile vFile = LocalFileSystem.getInstance().findFileByPath(name);\n    if (vFile != null) {\n      final PsiFile targetFile = reference.getManager().findFile(vFile);\n      if (targetFile != null) {\n        final PsiElement[] result = new PsiElement[1];\n        try {\n          targetFile.accept(new DartRecursiveVisitor() {\n            public void visitMethodDeclaration(@NotNull DartMethodDeclaration element) {\n              if (element.getTextOffset() == offset) {\n                result[0] = element;\n                throw new ExitVisitor();\n              }\n              super.visitMethodDeclaration(element);\n            }\n\n            public void visitFunctionDeclarationWithBodyOrNative(@NotNull DartFunctionDeclarationWithBodyOrNative element) {\n              if (element.getTextOffset() == offset) {\n                result[0] = element;\n                throw new ExitVisitor();\n              }\n              super.visitFunctionDeclarationWithBodyOrNative(element);\n            }\n\n            public void visitFunctionDeclarationWithBody(@NotNull DartFunctionDeclarationWithBody element) {\n              if (element.getTextOffset() == offset) {\n                result[0] = element;\n                throw new ExitVisitor();\n              }\n              super.visitFunctionDeclarationWithBody(element);\n            }\n\n            public void visitSetterDeclaration(@NotNull DartSetterDeclaration element) {\n              if (element.getTextOffset() == offset) {\n                result[0] = element;\n                throw new ExitVisitor();\n              }\n              super.visitSetterDeclaration(element);\n            }\n\n            public void visitGetterDeclaration(@NotNull DartGetterDeclaration element) {\n              if (element.getTextOffset() == offset) {\n                result[0] = element;\n                throw new ExitVisitor();\n              }\n              super.visitGetterDeclaration(element);\n            }\n\n            public void visitFactoryConstructorDeclaration(@NotNull DartFactoryConstructorDeclaration element) {\n              if (element.getTextOffset() == offset) {\n                result[0] = element;\n                throw new ExitVisitor();\n              }\n              super.visitFactoryConstructorDeclaration(element);\n            }\n\n            public void visitNamedConstructorDeclaration(@NotNull DartNamedConstructorDeclaration element) {\n              if (element.getTextOffset() == offset) {\n                result[0] = element;\n                throw new ExitVisitor();\n              }\n              super.visitNamedConstructorDeclaration(element);\n            }\n          });\n        }\n        catch (ExitVisitor ex) {\n          return result[0];\n        }\n      }\n    }\n    return null;\n  }","id":2919,"modified_method":"private static PsiElement getDeclaration(DartNavigationTarget target, PsiElement reference) {\n    PsiElement found = DartResolver.getElementForNavigationTarget(reference.getProject(), target);\n    return found == null ? null : found.getParent();\n  }","commit_id":"2ecd57a139f1269df62b0d2cd0e2e31dcaef2fe4","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public static boolean isTypeExecutable(IElementType type) {\n    return FUNCTION_DEFINITION.contains(type) || type == FACTORY_CONSTRUCTOR_DECLARATION || type == NAMED_CONSTRUCTOR_DECLARATION;\n  }","id":2920,"modified_method":"public static boolean isExecutable(@NotNull PsiElement component) {\n    if (component instanceof DartComponentName) return false;\n    final DartComponentType componentType = DartComponentType.typeOf(component);\n    if (componentType == null) return false;\n    switch (componentType) {\n      case CONSTRUCTOR:\n      case FUNCTION:\n      case METHOD:\n      case OPERATOR:\n        return true;\n      default:\n        return false;\n    }\n  }","commit_id":"2ecd57a139f1269df62b0d2cd0e2e31dcaef2fe4","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"@Nullable\n  private static PsiElement getElementForNavigationTarget(Project project, DartNavigationTarget target) {\n    String targetPath = target.getFile();\n    PsiFile file = findPsiFile(project, targetPath);\n    if (file != null) {\n      int targetOffset = target.getOffset();\n\n      PsiElement elementAt = PsiTreeUtil.findElementOfClassAtOffset(file, targetOffset, DartComponentName.class, false);\n      if (elementAt == null) elementAt = PsiTreeUtil.findElementOfClassAtOffset(file, targetOffset, DartLibraryNameElement.class, false);\n\n      return elementAt;\n    }\n\n    return null;\n  }","id":2921,"modified_method":"@Nullable\n  public static PsiElement getElementForNavigationTarget(Project project, DartNavigationTarget target) {\n    String targetPath = target.getFile();\n    PsiFile file = findPsiFile(project, targetPath);\n    if (file != null) {\n      int targetOffset = target.getOffset();\n\n      PsiElement elementAt = PsiTreeUtil.findElementOfClassAtOffset(file, targetOffset, DartComponentName.class, false);\n      if (elementAt == null) elementAt = PsiTreeUtil.findElementOfClassAtOffset(file, targetOffset, DartLibraryNameElement.class, false);\n\n      return elementAt;\n    }\n\n    return null;\n  }","commit_id":"2ecd57a139f1269df62b0d2cd0e2e31dcaef2fe4","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public HighlightUsagesHandlerBase createHighlightUsagesHandler(final Editor editor, final PsiFile file) {\n    int offset = TargetElementUtilBase.adjustOffset(editor.getDocument(), editor.getCaretModel().getOffset());\n    PsiElement target = file.findElementAt(offset);\n    if (target != null && PsiTreeUtil.getParentOfType(target, PyReturnStatement.class) != null) {\n      return new PyHighlightExitPointsHandler(editor, file, target);\n    }\n    return null;\n  }","id":2922,"modified_method":"public HighlightUsagesHandlerBase createHighlightUsagesHandler(final Editor editor, final PsiFile file) {\n    int offset = TargetElementUtilBase.adjustOffset(editor.getDocument(), editor.getCaretModel().getOffset());\n    PsiElement target = file.findElementAt(offset);\n    if (target != null) {\n      final PyReturnStatement returnStatement = PsiTreeUtil.getParentOfType(target, PyReturnStatement.class);\n      if (returnStatement != null) {\n        final PyExpression returnExpr = returnStatement.getExpression();\n        if (returnExpr == null || !PsiTreeUtil.isAncestor(returnExpr, target, false)) {\n          return new PyHighlightExitPointsHandler(editor, file, target);\n        }\n      }\n    }\n    return null;\n  }","commit_id":"5f8d5bd76f8fa450f30a8fa024e08861a0887bf2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public static PsiType getElementType(final PsiElement resolved) {\n    if (resolved instanceof PsiVariable) {\n      return ((PsiVariable)resolved).getType();\n    }\n    else {\n      if (resolved instanceof PsiMethod) {\n        return (((PsiMethod)resolved).getReturnType());\n      }\n      else if (resolved instanceof PsiExpression){\n        return (((PsiExpression)resolved).getType());\n      } else if (resolved instanceof PsiReferenceParameterList) {\n        final PsiElement parent = resolved.getParent();\n        LOG.assertTrue(parent instanceof PsiJavaCodeReferenceElement);\n        final PsiClass psiClass = (PsiClass)((PsiJavaCodeReferenceElement)parent).resolve();\n        return JavaPsiFacade.getElementFactory(parent.getProject()).createType(psiClass, TypeConversionUtil.getSuperClassSubstitutor(psiClass, PsiTreeUtil.getParentOfType(parent,\n                                                                                                                                     PsiClass.class),\n                                                                                                         PsiSubstitutor.EMPTY));\n      } else if (resolved instanceof PsiClass) {\n        return JavaPsiFacade.getElementFactory(resolved.getProject()).createType((PsiClass)resolved, PsiSubstitutor.EMPTY);\n      }\n    }\n    LOG.error(\"should not happen: \" + resolved.getClass());\n    return null;\n  }","id":2923,"modified_method":"@Nullable\n  public static PsiType getElementType(final PsiElement resolved) {\n    if (resolved instanceof PsiVariable) {\n      return ((PsiVariable)resolved).getType();\n    }\n    else {\n      if (resolved instanceof PsiMethod) {\n        return (((PsiMethod)resolved).getReturnType());\n      }\n      else if (resolved instanceof PsiExpression){\n        return (((PsiExpression)resolved).getType());\n      } else if (resolved instanceof PsiReferenceParameterList) {\n        PsiElement parent = resolved.getParent();\n        while (parent != null) {\n          LOG.assertTrue(parent instanceof PsiJavaCodeReferenceElement);\n          final PsiClass psiClass = (PsiClass)((PsiJavaCodeReferenceElement)parent).resolve();\n          final PsiClass containingClass = PsiTreeUtil.getParentOfType(parent, PsiClass.class);\n          if (psiClass != null && containingClass != null) {\n           final PsiSubstitutor classSubstitutor = TypeConversionUtil.getClassSubstitutor(psiClass, containingClass, PsiSubstitutor.EMPTY);\n           if (classSubstitutor != null) {\n             return JavaPsiFacade.getElementFactory(parent.getProject()).createType(psiClass, classSubstitutor);\n           }\n          }\n          parent = PsiTreeUtil.getParentOfType(parent, PsiJavaCodeReferenceElement.class, true);\n        }\n      } else if (resolved instanceof PsiClass) {\n        return JavaPsiFacade.getElementFactory(resolved.getProject()).createType((PsiClass)resolved, PsiSubstitutor.EMPTY);\n      }\n    }\n    LOG.error(\"should not happen: \" + resolved.getClass());\n    return null;\n  }","commit_id":"657cf240228e45e499169b96181c7619aaa505a6","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Test\n  public void getCapacityBytesOnTiersTest() throws Exception {\n    Random random = new Random();\n    WorkerStorageTierAssoc tierAssoc = new WorkerStorageTierAssoc();\n    int nTiers = tierAssoc.size();\n    // LinkedHashMap keeps keys in the serialized json object in the insertion order, the insertion\n    // order is from smaller tier ordinal to larger ones.\n    LinkedHashMap<String, Long> capacityBytesOnTiers = new LinkedHashMap<>();\n    for (int ordinal = 0; ordinal < nTiers; ordinal++) {\n      capacityBytesOnTiers.put(tierAssoc.getAlias(ordinal), random.nextLong());\n    }\n    Mockito.doReturn(capacityBytesOnTiers).when(mStoreMeta).getCapacityBytesOnTiers();\n\n    new TestCase(mHostname, mPort,\n        getEndpoint(AlluxioWorkerRestServiceHandler.GET_CAPACITY_BYTES_ON_TIERS), NO_PARAMS,\n        HttpMethod.GET, capacityBytesOnTiers).run();\n\n    Mockito.verify(mStoreMeta).getCapacityBytesOnTiers();\n  }","id":2924,"modified_method":"@Test\n  public void getCapacityBytesOnTiersTest() throws Exception {\n    Long memorySize = Configuration.getLong(Constants.WORKER_MEMORY_SIZE);\n    new TestCase(mHostname, mPort,\n        getEndpoint(AlluxioWorkerRestServiceHandler.GET_CAPACITY_BYTES_ON_TIERS), NO_PARAMS,\n        HttpMethod.GET, ImmutableMap.of(\"MEM\", memorySize)).run();\n  }","commit_id":"047984222ca95e7e206d7fe9a1c7cb4ca673b8c5","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void getMetricsTest() throws Exception {\n    // Mock worker metrics system.\n    MetricRegistry metricRegistry = PowerMockito.mock(MetricRegistry.class);\n    MetricsSystem metricsSystem = PowerMockito.mock(MetricsSystem.class);\n    Mockito.doReturn(metricRegistry).when(metricsSystem).getMetricRegistry();\n    Mockito.doReturn(metricsSystem).when(mWorker).getWorkerMetricsSystem();\n\n    // Generate random metrics.\n    Random random = new Random();\n    SortedMap<String, Long> metricsMap = new TreeMap<>();\n    metricsMap.put(IntegrationTestUtils.randomString(), random.nextLong());\n    metricsMap.put(IntegrationTestUtils.randomString(), random.nextLong());\n    String blocksCachedProperty = CommonUtils.argsToString(\".\",\n        WorkerContext.getWorkerSource().getName(), WorkerSource.BLOCKS_CACHED);\n    Integer blocksCached = random.nextInt();\n    metricsMap.put(blocksCachedProperty, blocksCached.longValue());\n\n    // Mock counters.\n    SortedMap<String, Counter> counters = new TreeMap<>();\n    for (Map.Entry<String, Long> entry : metricsMap.entrySet()) {\n      Counter counter = new Counter();\n      counter.inc(entry.getValue());\n      counters.put(entry.getKey(), counter);\n    }\n    Mockito.doReturn(counters).when(metricRegistry).getCounters();\n\n    // Mock gauges.\n    Gauge<?> blocksCachedGauge = PowerMockito.mock(Gauge.class);\n    Mockito.doReturn(blocksCached).when(blocksCachedGauge).getValue();\n    SortedMap<String, Gauge<?>> gauges = new TreeMap<>();\n    gauges.put(blocksCachedProperty, blocksCachedGauge);\n    Mockito.doReturn(gauges).when(metricRegistry).getGauges();\n\n    new TestCase(mHostname, mPort, getEndpoint(AlluxioWorkerRestServiceHandler.GET_METRICS),\n        NO_PARAMS, HttpMethod.GET, metricsMap).run();\n\n    Mockito.verify(metricRegistry).getCounters();\n    Mockito.verify(metricRegistry).getGauges();\n    Mockito.verify(blocksCachedGauge).getValue();\n  }","id":2925,"modified_method":"@Test\n  public void getMetricsTest() throws Exception {\n    String result =\n        new TestCase(mHostname, mPort, getEndpoint(AlluxioWorkerRestServiceHandler.GET_METRICS),\n            NO_PARAMS, HttpMethod.GET, null).call();\n    @SuppressWarnings(\"unchecked\")\n    Map<String, Long> metrics = (Map<String, Long>) new ObjectMapper().readValue(result,\n        new TypeReference<Map<String, Long>>() {});\n\n    Assert.assertEquals(Long.valueOf(0), metrics.get(\"worker.BlocksAccessed\"));\n  }","commit_id":"047984222ca95e7e206d7fe9a1c7cb4ca673b8c5","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void getDirectoryPathsOnTiersTest() throws Exception {\n    WorkerStorageTierAssoc tierAssoc = new WorkerStorageTierAssoc();\n    int nTiers = tierAssoc.size();\n    // LinkedHashMap keeps keys in the serialized json object in the insertion order, the insertion\n    // order is from smaller tier ordinal to larger ones.\n    LinkedHashMap<String, List<String>> pathsOnTiers = new LinkedHashMap<>();\n    for (int ordinal = 0; ordinal < nTiers; ordinal++) {\n      List<String> paths = new LinkedList<>();\n      paths.add(IntegrationTestUtils.randomString());\n      pathsOnTiers.put(tierAssoc.getAlias(ordinal), paths);\n    }\n    Mockito.doReturn(pathsOnTiers).when(mStoreMeta).getDirectoryPathsOnTiers();\n\n    new TestCase(mHostname, mPort,\n        getEndpoint(AlluxioWorkerRestServiceHandler.GET_DIRECTORY_PATHS_ON_TIERS), NO_PARAMS,\n        HttpMethod.GET, pathsOnTiers).run();\n\n    Mockito.verify(mStoreMeta).getDirectoryPathsOnTiers();\n  }","id":2926,"modified_method":"@Test\n  public void getDirectoryPathsOnTiersTest() throws Exception {\n    String result = new TestCase(mHostname, mPort,\n        getEndpoint(AlluxioWorkerRestServiceHandler.GET_DIRECTORY_PATHS_ON_TIERS), NO_PARAMS,\n        HttpMethod.GET, null).call();\n    @SuppressWarnings(\"unchecked\")\n    Map<String, List<String>> pathsOnTiers = (Map<String, List<String>>) new ObjectMapper()\n        .readValue(result, new TypeReference<Map<String, List<String>>>() {});\n    Entry<String, List<String>> entry = Iterables.getOnlyElement(pathsOnTiers.entrySet());\n    Assert.assertEquals(\"MEM\", entry.getKey());\n    String path = Iterables.getOnlyElement(entry.getValue());\n    Assert.assertTrue(path.contains(Configuration.get(Constants.WORKER_DATA_FOLDER)));\n  }","commit_id":"047984222ca95e7e206d7fe9a1c7cb4ca673b8c5","url":"https://github.com/amplab/tachyon"},{"original_method":"@Before\n  public void before() {\n    mWorker = PowerMockito.spy(mResource.get().getWorker());\n    Whitebox.setInternalState(AlluxioWorkerService.Factory.class, \"sAlluxioWorker\", mWorker);\n    BlockWorker blockWorker = PowerMockito.mock(BlockWorker.class);\n    Whitebox.setInternalState(mWorker, \"mBlockWorker\", blockWorker);\n    mStoreMeta = PowerMockito.mock(BlockStoreMeta.class);\n    Mockito.doReturn(mStoreMeta).when(blockWorker).getStoreMeta();\n    Mockito.doReturn(blockWorker).when(mWorker).getBlockWorker();\n    mHostname = mResource.get().getHostname();\n    mPort = mResource.get().getWorker().getWebLocalPort();\n    mServicePrefix = AlluxioWorkerRestServiceHandler.SERVICE_PREFIX;\n  }","id":2927,"modified_method":"@Before\n  public void before() {\n    mHostname = mResource.get().getHostname();\n    mPort = mResource.get().getWorker().getWebLocalPort();\n    mServicePrefix = AlluxioWorkerRestServiceHandler.SERVICE_PREFIX;\n  }","commit_id":"047984222ca95e7e206d7fe9a1c7cb4ca673b8c5","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void getCapacityBytesTest() throws Exception {\n    Random random = new Random();\n    long capacityBytes = random.nextLong();\n    Mockito.doReturn(capacityBytes).when(mStoreMeta).getCapacityBytes();\n\n    new TestCase(mHostname, mPort, getEndpoint(AlluxioWorkerRestServiceHandler.GET_CAPACITY_BYTES),\n        NO_PARAMS, HttpMethod.GET, capacityBytes).run();\n  }","id":2928,"modified_method":"@Test\n  public void getCapacityBytesTest() throws Exception {\n    long memorySize = Configuration.getBytes(Constants.WORKER_MEMORY_SIZE);\n    new TestCase(mHostname, mPort, getEndpoint(AlluxioWorkerRestServiceHandler.GET_CAPACITY_BYTES),\n        NO_PARAMS, HttpMethod.GET, memorySize).run();\n  }","commit_id":"047984222ca95e7e206d7fe9a1c7cb4ca673b8c5","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests worker's REST API for getting alluxio configuration.\n   *\n   * @throws Exception when any error happens\n   */\n  @Test\n  @Ignore // TODO(jiri): re-enable\n  public void getConfigurationTest() throws Exception {\n    SortedMap<String, String> propertyMap = new TreeMap<>();\n    propertyMap.put(ALLUXIO_CONF_PREFIX + CommonUtils.randomString(10),\n        CommonUtils.randomString(10));\n    propertyMap.put(ALLUXIO_CONF_PREFIX + CommonUtils.randomString(10),\n        CommonUtils.randomString(10));\n\n    Properties properties = new Properties();\n    for (Map.Entry<String, String> property : propertyMap.entrySet()) {\n      properties.put(property.getKey(), property.getValue());\n    }\n    properties.put(NOT_ALLUXIO_CONF_PREFIX + CommonUtils.randomString(10),\n        CommonUtils.randomString(10));\n\n    new TestCase(mHostname, mPort, getEndpoint(AlluxioWorkerRestServiceHandler.GET_CONFIGURATION),\n        NO_PARAMS, HttpMethod.GET, propertyMap).run();\n  }","id":2929,"modified_method":"/** Tests worker's REST API for getting alluxio configuration.\n   *\n   * @throws Exception when any error happens\n   */\n  @Test\n  public void getConfigurationTest() throws Exception {\n    Configuration.set(\"alluxio.testkey\", \"abc\");\n    String result = new TestCase(mHostname, mPort,\n        getEndpoint(AlluxioWorkerRestServiceHandler.GET_CONFIGURATION), NO_PARAMS, HttpMethod.GET,\n        null).call();\n    @SuppressWarnings(\"unchecked\")\n    Map<String, String> config =\n        (Map<String, String>) new ObjectMapper().readValue(result, Map.class);\n    Assert.assertEquals(\"abc\", config.get(\"alluxio.testkey\"));\n  }","commit_id":"047984222ca95e7e206d7fe9a1c7cb4ca673b8c5","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void getUptimeMsTest() throws Exception {\n    Random random = new Random();\n    long uptime = random.nextLong();\n    Mockito.doReturn(uptime).when(mWorker).getUptimeMs();\n\n    new TestCase(mHostname, mPort, getEndpoint(AlluxioWorkerRestServiceHandler.GET_UPTIME_MS),\n        NO_PARAMS, HttpMethod.GET, uptime).run();\n\n    Mockito.verify(mWorker).getUptimeMs();\n  }","id":2930,"modified_method":"@Test\n  public void getUptimeMsTest() throws Exception {\n    CommonUtils.sleepMs(1);\n    String uptimeString = new TestCase(mHostname, mPort, getEndpoint(AlluxioWorkerRestServiceHandler.GET_UPTIME_MS),\n        NO_PARAMS, HttpMethod.GET, null).call();\n    long uptime = Long.parseLong(uptimeString);\n    Assert.assertTrue(uptime > 0);\n    Assert.assertTrue(uptime < 20 * Constants.SECOND_MS);\n  }","commit_id":"047984222ca95e7e206d7fe9a1c7cb4ca673b8c5","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void getUsedBytesOnTiersTest() throws Exception {\n    Random random = new Random();\n    WorkerStorageTierAssoc tierAssoc = new WorkerStorageTierAssoc();\n    int nTiers = tierAssoc.size();\n    // LinkedHashMap keeps keys in the serialized json object in the insertion order, the insertion\n    // order is from smaller tier ordinal to larger ones.\n    LinkedHashMap<String, Long> usedBytesOnTiers = new LinkedHashMap<>();\n    for (int ordinal = 0; ordinal < nTiers; ordinal++) {\n      usedBytesOnTiers.put(tierAssoc.getAlias(ordinal), random.nextLong());\n    }\n    Mockito.doReturn(usedBytesOnTiers).when(mStoreMeta).getUsedBytesOnTiers();\n\n    new TestCase(mHostname, mPort,\n        getEndpoint(AlluxioWorkerRestServiceHandler.GET_USED_BYTES_ON_TIERS), NO_PARAMS,\n        HttpMethod.GET, usedBytesOnTiers).run();\n\n    Mockito.verify(mStoreMeta).getUsedBytesOnTiers();\n  }","id":2931,"modified_method":"@Test\n  public void getUsedBytesOnTiersTest() throws Exception {\n    new TestCase(mHostname, mPort,\n        getEndpoint(AlluxioWorkerRestServiceHandler.GET_USED_BYTES_ON_TIERS), NO_PARAMS,\n        HttpMethod.GET, ImmutableMap.of(\"MEM\", 0)).run();\n  }","commit_id":"047984222ca95e7e206d7fe9a1c7cb4ca673b8c5","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void getRpcAddressTest() throws Exception {\n    Random random = new Random();\n    InetSocketAddress address = new InetSocketAddress(IntegrationTestUtils.randomString(),\n        random.nextInt(8080) + 1);\n    Mockito.doReturn(address).when(mWorker).getRpcAddress();\n\n    new TestCase(mHostname, mPort, getEndpoint(AlluxioWorkerRestServiceHandler.GET_RPC_ADDRESS),\n        NO_PARAMS, HttpMethod.GET, address.toString()).run();\n\n    Mockito.verify(mWorker).getRpcAddress();\n  }","id":2932,"modified_method":"@Test\n  public void getRpcAddressTest() throws Exception {\n    // Don't check the exact value, which could differ between systems.\n    String result =\n        new TestCase(mHostname, mPort, getEndpoint(AlluxioWorkerRestServiceHandler.GET_RPC_ADDRESS),\n            NO_PARAMS, HttpMethod.GET, null).call();\n    Assert.assertTrue(\n        result.contains(String.valueOf(NetworkAddressUtils.getPort(ServiceType.WORKER_RPC))));\n  }","commit_id":"047984222ca95e7e206d7fe9a1c7cb4ca673b8c5","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void getStartTimeMsTest() throws Exception {\n    Random random = new Random();\n    long startTime = random.nextLong();\n    Mockito.doReturn(startTime).when(mWorker).getStartTimeMs();\n\n    new TestCase(mHostname, mPort, getEndpoint(AlluxioWorkerRestServiceHandler.GET_START_TIME_MS),\n        NO_PARAMS, HttpMethod.GET, startTime).run();\n  }","id":2933,"modified_method":"@Test\n  public void getStartTimeMsTest() throws Exception {\n    String startTimeString = new TestCase(mHostname, mPort, getEndpoint(AlluxioWorkerRestServiceHandler.GET_START_TIME_MS),\n        NO_PARAMS, HttpMethod.GET, null).call();\n    long startTime= Long.parseLong(startTimeString);\n    Assert.assertTrue(startTime > System.currentTimeMillis() - 20 * Constants.SECOND_MS);\n    Assert.assertTrue(startTime <= System.currentTimeMillis());\n  }","commit_id":"047984222ca95e7e206d7fe9a1c7cb4ca673b8c5","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void getUsedBytesTest() throws Exception {\n    Random random = new Random();\n    long usedBytes = random.nextLong();\n    Mockito.doReturn(usedBytes).when(mStoreMeta).getUsedBytes();\n\n    new TestCase(mHostname, mPort, getEndpoint(AlluxioWorkerRestServiceHandler.GET_USED_BYTES),\n        NO_PARAMS, HttpMethod.GET, usedBytes).run();\n  }","id":2934,"modified_method":"@Test\n  public void getUsedBytesTest() throws Exception {\n    new TestCase(mHostname, mPort, getEndpoint(AlluxioWorkerRestServiceHandler.GET_USED_BYTES),\n        NO_PARAMS, HttpMethod.GET, 0).run();\n  }","commit_id":"047984222ca95e7e206d7fe9a1c7cb4ca673b8c5","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  @Ignore // TODO(jiri): re-enable\n  public void getConfigurationTest() throws Exception {\n    SortedMap<String, String> propertyMap = new TreeMap<>();\n    propertyMap.put(ALLUXIO_CONF_PREFIX + CommonUtils.randomString(10),\n        CommonUtils.randomString(10));\n    propertyMap.put(ALLUXIO_CONF_PREFIX + CommonUtils.randomString(10),\n        CommonUtils.randomString(10));\n\n    Properties properties = new Properties();\n    for (Map.Entry<String, String> property : propertyMap.entrySet()) {\n      properties.put(property.getKey(), property.getValue());\n    }\n    properties.put(NOT_ALLUXIO_CONF_PREFIX + CommonUtils.randomString(10),\n        CommonUtils.randomString(10));\n\n    new TestCase(mHostname, mPort, getEndpoint(AlluxioMasterRestServiceHandler.GET_CONFIGURATION),\n        NO_PARAMS, HttpMethod.GET, propertyMap).run();\n  }","id":2935,"modified_method":"@Test\n  public void getConfigurationTest() throws Exception {\n    Configuration.set(\"alluxio.testkey\", \"abc\");\n    String result = new TestCase(mHostname, mPort,\n        getEndpoint(AlluxioMasterRestServiceHandler.GET_CONFIGURATION), NO_PARAMS, HttpMethod.GET,\n        null).call();\n    @SuppressWarnings(\"unchecked\")\n    Map<String, String> config =\n        (Map<String, String>) new ObjectMapper().readValue(result, Map.class);\n    Assert.assertEquals(\"abc\", config.get(\"alluxio.testkey\"));\n  }","commit_id":"f0a46ca74cdc8ed9e58cbf9035732c27973262f5","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void getStartTimeMsTest() throws Exception {\n    Random random = new Random();\n    long startTime = random.nextLong();\n    Mockito.doReturn(startTime).when(mAlluxioMaster).getStartTimeMs();\n\n    new TestCase(mHostname, mPort, getEndpoint(AlluxioMasterRestServiceHandler.GET_START_TIME_MS),\n        NO_PARAMS, HttpMethod.GET, startTime).run();\n  }","id":2936,"modified_method":"@Test\n  public void getStartTimeMsTest() throws Exception {\n    String startTime = new TestCase(mHostname, mPort,\n        getEndpoint(AlluxioMasterRestServiceHandler.GET_START_TIME_MS), NO_PARAMS, HttpMethod.GET,\n        null).call();\n    Assert.assertTrue(Long.valueOf(startTime) > 0);\n  }","commit_id":"f0a46ca74cdc8ed9e58cbf9035732c27973262f5","url":"https://github.com/amplab/tachyon"},{"original_method":"@Before\n  public void before() {\n    mAlluxioMaster = PowerMockito.spy(mResource.get().getMaster().getInternalMaster());\n    Whitebox.setInternalState(AlluxioMaster.class, \"sAlluxioMaster\", mAlluxioMaster);\n    mBlockMaster = PowerMockito.mock(BlockMaster.class);\n    Whitebox.setInternalState(mAlluxioMaster, \"mBlockMaster\", mBlockMaster);\n    mHostname = mResource.get().getHostname();\n    mPort = mResource.get().getMaster().getWebLocalPort();\n    mServicePrefix = AlluxioMasterRestServiceHandler.SERVICE_PREFIX;\n  }","id":2937,"modified_method":"@Before\n  public void before() {\n    mHostname = mResource.get().getHostname();\n    mPort = mResource.get().getMaster().getWebLocalPort();\n    mServicePrefix = AlluxioMasterRestServiceHandler.SERVICE_PREFIX;\n  }","commit_id":"f0a46ca74cdc8ed9e58cbf9035732c27973262f5","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void getWorkerInfoListTest() throws Exception {\n    Random random = new Random();\n    List<WorkerInfo> workerInfos = new ArrayList<>();\n    int numWorkerInfos = random.nextInt(10);\n    for (int i = 0; i < numWorkerInfos; i++) {\n      workerInfos.add(WorkerInfoTest.createRandom());\n    }\n    Mockito.doReturn(workerInfos).when(mBlockMaster).getWorkerInfoList();\n\n    new TestCase(mHostname, mPort,\n        getEndpoint(AlluxioMasterRestServiceHandler.GET_WORKER_INFO_LIST), NO_PARAMS,\n        HttpMethod.GET, workerInfos).run();\n\n    Mockito.verify(mBlockMaster).getWorkerInfoList();\n  }","id":2938,"modified_method":"@Test\n  public void getWorkerInfoListTest() throws Exception {\n    String result = new TestCase(mHostname, mPort,\n        getEndpoint(AlluxioMasterRestServiceHandler.GET_WORKER_INFO_LIST), NO_PARAMS,\n        HttpMethod.GET, null).call();\n    WorkerInfo[] workerInfos = new ObjectMapper().readValue(result, WorkerInfo[].class);\n    Assert.assertEquals(1, workerInfos.length);\n    WorkerInfo workerInfo = workerInfos[0];\n    Assert.assertEquals(0, workerInfo.getUsedBytes());\n    long bytes = Configuration.getBytes(Constants.WORKER_MEMORY_SIZE);\n    Assert.assertEquals(bytes, workerInfo.getCapacityBytes());\n  }","commit_id":"f0a46ca74cdc8ed9e58cbf9035732c27973262f5","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void getFreeBytesTest() throws Exception {\n    Random random = new Random();\n    long capacityBytes = random.nextLong();\n    long usedBytes = random.nextLong();\n    Mockito.doReturn(capacityBytes).when(mBlockMaster).getCapacityBytes();\n    Mockito.doReturn(usedBytes).when(mBlockMaster).getUsedBytes();\n\n    new TestCase(mHostname, mPort, getEndpoint(AlluxioMasterRestServiceHandler.GET_FREE_BYTES),\n        NO_PARAMS, HttpMethod.GET, capacityBytes - usedBytes).run();\n  }","id":2939,"modified_method":"@Test\n  public void getFreeBytesTest() throws Exception {\n    long freeBytes = Configuration.getBytes(Constants.WORKER_MEMORY_SIZE);\n    new TestCase(mHostname, mPort, getEndpoint(AlluxioMasterRestServiceHandler.GET_FREE_BYTES),\n        NO_PARAMS, HttpMethod.GET, freeBytes).run();\n  }","commit_id":"f0a46ca74cdc8ed9e58cbf9035732c27973262f5","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void getWorkerCountTest() throws Exception {\n    Random random = new Random();\n    int workerCount = random.nextInt();\n    Mockito.doReturn(workerCount).when(mBlockMaster).getWorkerCount();\n\n    new TestCase(mHostname, mPort, getEndpoint(AlluxioMasterRestServiceHandler.GET_WORKER_COUNT),\n        NO_PARAMS, HttpMethod.GET, workerCount).run();\n\n    Mockito.verify(mBlockMaster).getWorkerCount();\n  }","id":2940,"modified_method":"@Test\n  public void getWorkerCountTest() throws Exception {\n    new TestCase(mHostname, mPort, getEndpoint(AlluxioMasterRestServiceHandler.GET_WORKER_COUNT),\n        NO_PARAMS, HttpMethod.GET, 1).run();\n  }","commit_id":"f0a46ca74cdc8ed9e58cbf9035732c27973262f5","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void getMetricsTest() throws Exception {\n    // Mock master metrics system.\n    MetricRegistry metricRegistry = PowerMockito.mock(MetricRegistry.class);\n    MetricsSystem metricsSystem = PowerMockito.mock(MetricsSystem.class);\n    Mockito.doReturn(metricRegistry).when(metricsSystem).getMetricRegistry();\n    Mockito.doReturn(metricsSystem).when(mAlluxioMaster).getMasterMetricsSystem();\n\n    // Generate random metrics.\n    Random random = new Random();\n    SortedMap<String, Long> metricsMap = new TreeMap<>();\n    metricsMap.put(CommonUtils.randomString(10), random.nextLong());\n    metricsMap.put(CommonUtils.randomString(10), random.nextLong());\n    String filesPinnedProperty = CommonUtils.argsToString(\".\",\n        mAlluxioMaster.getMasterContext().getMasterSource().getName(), MasterSource.FILES_PINNED);\n    Integer filesPinned = random.nextInt();\n    metricsMap.put(filesPinnedProperty, filesPinned.longValue());\n\n    // Mock counters.\n    SortedMap<String, Counter> counters = new TreeMap<>();\n    for (Map.Entry<String, Long> entry : metricsMap.entrySet()) {\n      Counter counter = new Counter();\n      counter.inc(entry.getValue());\n      counters.put(entry.getKey(), counter);\n    }\n    Mockito.doReturn(counters).when(metricRegistry).getCounters();\n\n    // Mock gauges.\n    Gauge filesPinnedGauge = PowerMockito.mock(Gauge.class);\n    Mockito.doReturn(filesPinned).when(filesPinnedGauge).getValue();\n    SortedMap<String, Gauge<?>> gauges = new TreeMap<>();\n    gauges.put(filesPinnedProperty, filesPinnedGauge);\n    Mockito.doReturn(gauges).when(metricRegistry).getGauges();\n\n    new TestCase(mHostname, mPort, getEndpoint(AlluxioMasterRestServiceHandler.GET_METRICS),\n        NO_PARAMS, HttpMethod.GET, metricsMap).run();\n\n    Mockito.verify(metricRegistry).getCounters();\n    Mockito.verify(metricRegistry).getGauges();\n    Mockito.verify(filesPinnedGauge).getValue();\n  }","id":2941,"modified_method":"@Test\n  public void getMetricsTest() throws Exception {\n    String result =\n        new TestCase(mHostname, mPort, getEndpoint(AlluxioMasterRestServiceHandler.GET_METRICS),\n            NO_PARAMS, HttpMethod.GET, null).call();\n    @SuppressWarnings(\"unchecked\")\n    Map<String, Long> metrics = (Map<String, Long>) new ObjectMapper().readValue(result,\n        new TypeReference<Map<String, Long>>() {});\n\n    Assert.assertEquals(Long.valueOf(0), metrics.get(\"master.CompleteFileOps\"));\n  }","commit_id":"f0a46ca74cdc8ed9e58cbf9035732c27973262f5","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void getRpcAddressTest() throws Exception {\n    Random random = new Random();\n    InetSocketAddress address = new InetSocketAddress(CommonUtils.randomString(10),\n        random.nextInt(8080) + 1);\n    Mockito.doReturn(address).when(mAlluxioMaster).getMasterAddress();\n\n    new TestCase(mHostname, mPort, getEndpoint(AlluxioMasterRestServiceHandler.GET_RPC_ADDRESS),\n        NO_PARAMS, HttpMethod.GET, address.toString()).run();\n\n    Mockito.verify(mAlluxioMaster).getMasterAddress();\n  }","id":2942,"modified_method":"@Test\n  public void getRpcAddressTest() throws Exception {\n    // Don't check the exact value, which could differ between systems.\n    String result =\n        new TestCase(mHostname, mPort, getEndpoint(AlluxioMasterRestServiceHandler.GET_RPC_ADDRESS),\n            NO_PARAMS, HttpMethod.GET, null).call();\n    Assert.assertTrue(\n        result.contains(String.valueOf(NetworkAddressUtils.getPort(ServiceType.MASTER_RPC))));\n  }","commit_id":"f0a46ca74cdc8ed9e58cbf9035732c27973262f5","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void getCapacityBytesTest() throws Exception {\n    Random random = new Random();\n    long capacityBytes = random.nextLong();\n    Mockito.doReturn(capacityBytes).when(mBlockMaster).getCapacityBytes();\n\n    new TestCase(mHostname, mPort, getEndpoint(AlluxioMasterRestServiceHandler.GET_CAPACITY_BYTES),\n        NO_PARAMS, HttpMethod.GET, capacityBytes).run();\n  }","id":2943,"modified_method":"@Test\n  public void getCapacityBytesTest() throws Exception {\n    long memorySize = Configuration.getBytes(Constants.WORKER_MEMORY_SIZE);\n    new TestCase(mHostname, mPort, getEndpoint(AlluxioMasterRestServiceHandler.GET_CAPACITY_BYTES),\n        NO_PARAMS, HttpMethod.GET, memorySize).run();\n  }","commit_id":"f0a46ca74cdc8ed9e58cbf9035732c27973262f5","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n  public void getUsedBytesTest() throws Exception {\n    Random random = new Random();\n    long usedBytes = random.nextLong();\n    Mockito.doReturn(usedBytes).when(mBlockMaster).getUsedBytes();\n\n    new TestCase(mHostname, mPort, getEndpoint(AlluxioMasterRestServiceHandler.GET_USED_BYTES),\n            NO_PARAMS, HttpMethod.GET, usedBytes).run();\n  }","id":2944,"modified_method":"@Test\n  public void getUsedBytesTest() throws Exception {\n    new TestCase(mHostname, mPort, getEndpoint(AlluxioMasterRestServiceHandler.GET_USED_BYTES),\n        NO_PARAMS, HttpMethod.GET, 0).run();\n  }","commit_id":"f0a46ca74cdc8ed9e58cbf9035732c27973262f5","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Runs the test case.\n   */\n  public void run() throws Exception {\n    HttpURLConnection connection = (HttpURLConnection) createURL().openConnection();\n    connection.setRequestMethod(mMethod);\n    if (mJsonString != null) {\n      connection.setDoOutput(true);\n      connection.setRequestProperty(\"Content-Type\", \"application/json; charset=UTF-8\");\n      OutputStream os = connection.getOutputStream();\n      os.write(mJsonString.getBytes(\"UTF-8\"));\n      os.close();\n    }\n\n    connection.connect();\n    Assert.assertEquals(mEndpoint, Response.Status.OK.getStatusCode(),\n        connection.getResponseCode());\n    String expected = \"\";\n    if (mExpectedResult != null) {\n      ObjectMapper mapper = new ObjectMapper();\n      expected =\n          mPrettyPrint ? mapper.writerWithDefaultPrettyPrinter().writeValueAsString(mExpectedResult)\n              : mapper.writeValueAsString(mExpectedResult);\n    }\n    Assert.assertEquals(mEndpoint, expected, getResponse(connection));\n  }","id":2945,"modified_method":"/**\n   * Runs the test case.\n   */\n  public void run() throws Exception {\n    String expected = \"\";\n    if (mExpectedResult != null) {\n      ObjectMapper mapper = new ObjectMapper();\n      expected =\n          mPrettyPrint ? mapper.writerWithDefaultPrettyPrinter().writeValueAsString(mExpectedResult)\n              : mapper.writeValueAsString(mExpectedResult);\n    }\n\n    String result = call();\n    Assert.assertEquals(mEndpoint, expected, result);\n  }","commit_id":"f0a46ca74cdc8ed9e58cbf9035732c27973262f5","url":"https://github.com/amplab/tachyon"},{"original_method":"@Test\n    public void testHasChildAndHasParentFilter_withFilter() throws Exception {\n\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"child\")\n                .setSource(\n                        jsonBuilder().startObject().startObject(\"child\").startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                                .endObject().endObject()).execute().actionGet();\n\n        client().prepareIndex(\"test\", \"parent\", \"1\").setSource(\"p_field\", 1).execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"2\").setParent(\"1\").setSource(\"c_field\", 1).execute().actionGet();\n        client().admin().indices().prepareFlush(\"test\").execute().actionGet();\n\n        client().prepareIndex(\"test\", \"type1\", \"3\").setSource(\"p_field\", \"p_value1\").execute().actionGet();\n        client().admin().indices().prepareFlush(\"test\").execute().actionGet();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\")\n                .setQuery(filteredQuery(matchAllQuery(), hasChildFilter(\"child\", termFilter(\"c_field\", 1)))).execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().hits()[0].id(), equalTo(\"1\"));\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(filteredQuery(matchAllQuery(), hasParentFilter(\"parent\", termFilter(\"p_field\", 1)))).execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().hits()[0].id(), equalTo(\"2\"));\n    }","id":2946,"modified_method":"@Test\n    public void testHasChildAndHasParentFilter_withFilter() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n\n        client().prepareIndex(\"test\", \"parent\", \"1\").setSource(\"p_field\", 1).get();\n        client().prepareIndex(\"test\", \"child\", \"2\").setParent(\"1\").setSource(\"c_field\", 1).get();\n        client().admin().indices().prepareFlush(\"test\").get();\n\n        client().prepareIndex(\"test\", \"type1\", \"3\").setSource(\"p_field\", \"p_value1\").get();\n        client().admin().indices().prepareFlush(\"test\").get();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\")\n                .setQuery(filteredQuery(matchAllQuery(), hasChildFilter(\"child\", termFilter(\"c_field\", 1)))).get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().hits()[0].id(), equalTo(\"1\"));\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(filteredQuery(matchAllQuery(), hasParentFilter(\"parent\", termFilter(\"p_field\", 1)))).get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().hits()[0].id(), equalTo(\"2\"));\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testNamedFilters() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"child\")\n                .setSource(\"_parent\", \"type=parent\").execute().actionGet();\n\n        String parentId = \"p1\";\n        client().prepareIndex(\"test\", \"parent\", parentId).setSource(\"p_field\", \"1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"1\").setParent(parentId).execute().actionGet();\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"1\")).queryName(\"test\"))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 1l);\n        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries().length, equalTo(1));\n        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries()[0], equalTo(\"test\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")).scoreType(\"max\").queryName(\"test\"))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 1l);\n        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries().length, equalTo(1));\n        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries()[0], equalTo(\"test\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(hasParentQuery(\"parent\", termQuery(\"p_field\", \"1\")).scoreType(\"score\").queryName(\"test\"))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 1l);\n        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries().length, equalTo(1));\n        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries()[0], equalTo(\"test\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"1\")).filterName(\"test\")))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 1l);\n        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries().length, equalTo(1));\n        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries()[0], equalTo(\"test\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(constantScoreQuery(hasParentFilter(\"parent\", termQuery(\"p_field\", \"1\")).filterName(\"test\")))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 1l);\n        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries().length, equalTo(1));\n        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries()[0], equalTo(\"test\"));\n    }","id":2947,"modified_method":"@Test\n    public void testNamedFilters() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n\n        String parentId = \"p1\";\n        client().prepareIndex(\"test\", \"parent\", parentId).setSource(\"p_field\", \"1\").get();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"1\").setParent(parentId).get();\n        refresh();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"1\")).queryName(\"test\"))\n                .get();\n        assertHitCount(searchResponse, 1l);\n        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries().length, equalTo(1));\n        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries()[0], equalTo(\"test\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")).scoreType(\"max\").queryName(\"test\"))\n                .get();\n        assertHitCount(searchResponse, 1l);\n        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries().length, equalTo(1));\n        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries()[0], equalTo(\"test\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(hasParentQuery(\"parent\", termQuery(\"p_field\", \"1\")).scoreType(\"score\").queryName(\"test\"))\n                .get();\n        assertHitCount(searchResponse, 1l);\n        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries().length, equalTo(1));\n        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries()[0], equalTo(\"test\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"1\")).filterName(\"test\")))\n                .get();\n        assertHitCount(searchResponse, 1l);\n        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries().length, equalTo(1));\n        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries()[0], equalTo(\"test\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(constantScoreQuery(hasParentFilter(\"parent\", termQuery(\"p_field\", \"1\")).filterName(\"test\")))\n                .get();\n        assertHitCount(searchResponse, 1l);\n        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries().length, equalTo(1));\n        assertThat(searchResponse.getHits().getAt(0).getMatchedQueries()[0], equalTo(\"test\"));\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testDfsSearchType() throws Exception {\n\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 2).put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"child\")\n                .setSource(\n                        jsonBuilder().startObject().startObject(\"child\").startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                                .endObject().endObject()).execute().actionGet();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"red\").setParent(\"p1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setSource(\"c_field\", \"yellow\").setParent(\"p1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"blue\").setParent(\"p2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"red\").setParent(\"p2\").execute().actionGet();\n\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\").setSearchType(SearchType.DFS_QUERY_THEN_FETCH)\n                .setQuery(boolQuery().mustNot(hasChildQuery(\"child\", boolQuery().should(queryString(\"c_field:*\"))))).execute().actionGet();\n        assertNoFailures(searchResponse);\n\n        searchResponse = client().prepareSearch(\"test\").setSearchType(SearchType.DFS_QUERY_THEN_FETCH)\n                .setQuery(boolQuery().mustNot(hasParentQuery(\"parent\", boolQuery().should(queryString(\"p_field:*\"))))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n\n        searchResponse = client().prepareSearch(\"test\").setSearchType(SearchType.DFS_QUERY_THEN_FETCH)\n                .setQuery(boolQuery().mustNot(topChildrenQuery(\"child\", boolQuery().should(queryString(\"c_field:*\"))))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n    }","id":2948,"modified_method":"@Test\n    public void testDfsSearchType() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 2).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").get();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"red\").setParent(\"p1\").get();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setSource(\"c_field\", \"yellow\").setParent(\"p1\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").get();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"blue\").setParent(\"p2\").get();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"red\").setParent(\"p2\").get();\n\n        refresh();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\").setSearchType(SearchType.DFS_QUERY_THEN_FETCH)\n                .setQuery(boolQuery().mustNot(hasChildQuery(\"child\", boolQuery().should(queryString(\"c_field:*\"))))).get();\n        assertNoFailures(searchResponse);\n\n        searchResponse = client().prepareSearch(\"test\").setSearchType(SearchType.DFS_QUERY_THEN_FETCH)\n                .setQuery(boolQuery().mustNot(hasParentQuery(\"parent\", boolQuery().should(queryString(\"p_field:*\"))))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n\n        searchResponse = client().prepareSearch(\"test\").setSearchType(SearchType.DFS_QUERY_THEN_FETCH)\n                .setQuery(boolQuery().mustNot(topChildrenQuery(\"child\", boolQuery().should(queryString(\"c_field:*\"))))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void simpleChildQueryWithFlush() throws Exception {\n\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"child\")\n                .setSource(\n                        jsonBuilder().startObject().startObject(\"child\").startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                                .endObject().endObject()).execute().actionGet();\n\n        // index simple data with flushes, so we have many segments\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").execute().actionGet();\n        client().admin().indices().prepareFlush().execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"red\").setParent(\"p1\").execute().actionGet();\n        client().admin().indices().prepareFlush().execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setSource(\"c_field\", \"yellow\").setParent(\"p1\").execute().actionGet();\n        client().admin().indices().prepareFlush().execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").execute().actionGet();\n        client().admin().indices().prepareFlush().execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"blue\").setParent(\"p2\").execute().actionGet();\n        client().admin().indices().prepareFlush().execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"red\").setParent(\"p2\").execute().actionGet();\n        client().admin().indices().prepareFlush().execute().actionGet();\n\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        // TOP CHILDREN QUERY\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"yellow\")))\n                .execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"blue\"))).execute()\n                .actionGet();\n        if (searchResponse.getFailedShards() > 0) {\n            logger.warn(\"Failed shards:\");\n            for (ShardSearchFailure shardSearchFailure : searchResponse.getShardFailures()) {\n                logger.warn(\"-> {}\", shardSearchFailure);\n            }\n        }\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p2\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"red\"))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n        assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n\n        // HAS CHILD QUERY\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"yellow\"))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"blue\"))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p2\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"red\"))).execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n        assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n\n        // HAS CHILD FILTER\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"yellow\")))).execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"blue\"))))\n                .execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p2\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"red\"))))\n                .execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n        assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n    }","id":2949,"modified_method":"@Test\n    public void simpleChildQueryWithFlush() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n\n        // index simple data with flushes, so we have many segments\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").get();\n        client().admin().indices().prepareFlush().get();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"red\").setParent(\"p1\").get();\n        client().admin().indices().prepareFlush().get();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setSource(\"c_field\", \"yellow\").setParent(\"p1\").get();\n        client().admin().indices().prepareFlush().get();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").get();\n        client().admin().indices().prepareFlush().get();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"blue\").setParent(\"p2\").get();\n        client().admin().indices().prepareFlush().get();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"red\").setParent(\"p2\").get();\n        client().admin().indices().prepareFlush().get();\n        refresh();\n\n        // TOP CHILDREN QUERY\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"yellow\")))\n                .get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"blue\"))).execute()\n                .actionGet();\n        if (searchResponse.getFailedShards() > 0) {\n            logger.warn(\"Failed shards:\");\n            for (ShardSearchFailure shardSearchFailure : searchResponse.getShardFailures()) {\n                logger.warn(\"-> {}\", shardSearchFailure);\n            }\n        }\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p2\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"red\"))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n        assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n\n        // HAS CHILD QUERY\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"yellow\"))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"blue\"))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p2\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"red\"))).get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n        assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n\n        // HAS CHILD FILTER\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"yellow\")))).get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"blue\"))))\n                .get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p2\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"red\"))))\n                .get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n        assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testScoreForParentChildQueries_withFunctionScore() throws Exception {\n\n        client().admin()\n                .indices()\n                .prepareCreate(\"test\")\n                .addMapping(\n                        \"child\",\n                        jsonBuilder().startObject().startObject(\"child\").startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                                .endObject().endObject())\n                .addMapping(\n                        \"child1\",\n                        jsonBuilder().startObject().startObject(\"child1\").startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                                .endObject().endObject())\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 2).put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n\n        indexRandom(false, createDocBuilders().toArray(new IndexRequestBuilder[0]));\n        refresh();\n        SearchResponse response = client()\n                .prepareSearch(\"test\")\n                .setQuery(\n                        QueryBuilders.hasChildQuery(\n                                \"child\",\n                                QueryBuilders.functionScoreQuery(matchQuery(\"c_field2\", 0), scriptFunction(\"doc['c_field1'].value\"))\n                                        .boostMode(CombineFunction.REPLACE.getName())).scoreType(\"sum\")).execute().actionGet();\n\n        assertThat(response.getHits().totalHits(), equalTo(3l));\n        assertThat(response.getHits().hits()[0].id(), equalTo(\"1\"));\n        assertThat(response.getHits().hits()[0].score(), equalTo(6f));\n        assertThat(response.getHits().hits()[1].id(), equalTo(\"3\"));\n        assertThat(response.getHits().hits()[1].score(), equalTo(4f));\n        assertThat(response.getHits().hits()[2].id(), equalTo(\"2\"));\n        assertThat(response.getHits().hits()[2].score(), equalTo(3f));\n\n        response = client()\n                .prepareSearch(\"test\")\n                .setQuery(\n                        QueryBuilders.hasChildQuery(\n                                \"child\",\n                                QueryBuilders.functionScoreQuery(matchQuery(\"c_field2\", 0), scriptFunction(\"doc['c_field1'].value\"))\n                                        .boostMode(CombineFunction.REPLACE.getName())).scoreType(\"max\")).execute().actionGet();\n\n        assertThat(response.getHits().totalHits(), equalTo(3l));\n        assertThat(response.getHits().hits()[0].id(), equalTo(\"3\"));\n        assertThat(response.getHits().hits()[0].score(), equalTo(4f));\n        assertThat(response.getHits().hits()[1].id(), equalTo(\"2\"));\n        assertThat(response.getHits().hits()[1].score(), equalTo(3f));\n        assertThat(response.getHits().hits()[2].id(), equalTo(\"1\"));\n        assertThat(response.getHits().hits()[2].score(), equalTo(2f));\n\n        response = client()\n                .prepareSearch(\"test\")\n                .setQuery(\n                        QueryBuilders.hasChildQuery(\n                                \"child\",\n                                QueryBuilders.functionScoreQuery(matchQuery(\"c_field2\", 0), scriptFunction(\"doc['c_field1'].value\"))\n                                        .boostMode(CombineFunction.REPLACE.getName())).scoreType(\"avg\")).execute().actionGet();\n\n        assertThat(response.getHits().totalHits(), equalTo(3l));\n        assertThat(response.getHits().hits()[0].id(), equalTo(\"3\"));\n        assertThat(response.getHits().hits()[0].score(), equalTo(4f));\n        assertThat(response.getHits().hits()[1].id(), equalTo(\"2\"));\n        assertThat(response.getHits().hits()[1].score(), equalTo(3f));\n        assertThat(response.getHits().hits()[2].id(), equalTo(\"1\"));\n        assertThat(response.getHits().hits()[2].score(), equalTo(1.5f));\n\n        response = client()\n                .prepareSearch(\"test\")\n                .setQuery(\n                        QueryBuilders.hasParentQuery(\n                                \"parent\",\n                                QueryBuilders.functionScoreQuery(matchQuery(\"p_field1\", \"p_value3\"), scriptFunction(\"doc['p_field2'].value\"))\n                                        .boostMode(CombineFunction.REPLACE.getName())).scoreType(\"score\"))\n                .addSort(SortBuilders.fieldSort(\"c_field3\")).addSort(SortBuilders.scoreSort()).execute().actionGet();\n\n        assertThat(response.getHits().totalHits(), equalTo(7l));\n        assertThat(response.getHits().hits()[0].id(), equalTo(\"13\"));\n        assertThat(response.getHits().hits()[0].score(), equalTo(5f));\n        assertThat(response.getHits().hits()[1].id(), equalTo(\"14\"));\n        assertThat(response.getHits().hits()[1].score(), equalTo(5f));\n        assertThat(response.getHits().hits()[2].id(), equalTo(\"15\"));\n        assertThat(response.getHits().hits()[2].score(), equalTo(5f));\n        assertThat(response.getHits().hits()[3].id(), equalTo(\"16\"));\n        assertThat(response.getHits().hits()[3].score(), equalTo(5f));\n        assertThat(response.getHits().hits()[4].id(), equalTo(\"17\"));\n        assertThat(response.getHits().hits()[4].score(), equalTo(5f));\n        assertThat(response.getHits().hits()[5].id(), equalTo(\"18\"));\n        assertThat(response.getHits().hits()[5].score(), equalTo(5f));\n        assertThat(response.getHits().hits()[6].id(), equalTo(\"1\"));\n        assertThat(response.getHits().hits()[6].score(), equalTo(5f));\n    }","id":2950,"modified_method":"@Test\n    public void testScoreForParentChildQueries_withFunctionScore() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 2).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .addMapping(\"child1\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n\n        indexRandom(false, createDocBuilders().toArray(new IndexRequestBuilder[0]));\n        refresh();\n        SearchResponse response = client()\n                .prepareSearch(\"test\")\n                .setQuery(\n                        QueryBuilders.hasChildQuery(\n                                \"child\",\n                                QueryBuilders.functionScoreQuery(matchQuery(\"c_field2\", 0), scriptFunction(\"doc['c_field1'].value\"))\n                                        .boostMode(CombineFunction.REPLACE.getName())).scoreType(\"sum\")).get();\n\n        assertThat(response.getHits().totalHits(), equalTo(3l));\n        assertThat(response.getHits().hits()[0].id(), equalTo(\"1\"));\n        assertThat(response.getHits().hits()[0].score(), equalTo(6f));\n        assertThat(response.getHits().hits()[1].id(), equalTo(\"3\"));\n        assertThat(response.getHits().hits()[1].score(), equalTo(4f));\n        assertThat(response.getHits().hits()[2].id(), equalTo(\"2\"));\n        assertThat(response.getHits().hits()[2].score(), equalTo(3f));\n\n        response = client()\n                .prepareSearch(\"test\")\n                .setQuery(\n                        QueryBuilders.hasChildQuery(\n                                \"child\",\n                                QueryBuilders.functionScoreQuery(matchQuery(\"c_field2\", 0), scriptFunction(\"doc['c_field1'].value\"))\n                                        .boostMode(CombineFunction.REPLACE.getName())).scoreType(\"max\")).get();\n\n        assertThat(response.getHits().totalHits(), equalTo(3l));\n        assertThat(response.getHits().hits()[0].id(), equalTo(\"3\"));\n        assertThat(response.getHits().hits()[0].score(), equalTo(4f));\n        assertThat(response.getHits().hits()[1].id(), equalTo(\"2\"));\n        assertThat(response.getHits().hits()[1].score(), equalTo(3f));\n        assertThat(response.getHits().hits()[2].id(), equalTo(\"1\"));\n        assertThat(response.getHits().hits()[2].score(), equalTo(2f));\n\n        response = client()\n                .prepareSearch(\"test\")\n                .setQuery(\n                        QueryBuilders.hasChildQuery(\n                                \"child\",\n                                QueryBuilders.functionScoreQuery(matchQuery(\"c_field2\", 0), scriptFunction(\"doc['c_field1'].value\"))\n                                        .boostMode(CombineFunction.REPLACE.getName())).scoreType(\"avg\")).get();\n\n        assertThat(response.getHits().totalHits(), equalTo(3l));\n        assertThat(response.getHits().hits()[0].id(), equalTo(\"3\"));\n        assertThat(response.getHits().hits()[0].score(), equalTo(4f));\n        assertThat(response.getHits().hits()[1].id(), equalTo(\"2\"));\n        assertThat(response.getHits().hits()[1].score(), equalTo(3f));\n        assertThat(response.getHits().hits()[2].id(), equalTo(\"1\"));\n        assertThat(response.getHits().hits()[2].score(), equalTo(1.5f));\n\n        response = client()\n                .prepareSearch(\"test\")\n                .setQuery(\n                        QueryBuilders.hasParentQuery(\n                                \"parent\",\n                                QueryBuilders.functionScoreQuery(matchQuery(\"p_field1\", \"p_value3\"), scriptFunction(\"doc['p_field2'].value\"))\n                                        .boostMode(CombineFunction.REPLACE.getName())).scoreType(\"score\"))\n                .addSort(SortBuilders.fieldSort(\"c_field3\")).addSort(SortBuilders.scoreSort()).get();\n\n        assertThat(response.getHits().totalHits(), equalTo(7l));\n        assertThat(response.getHits().hits()[0].id(), equalTo(\"13\"));\n        assertThat(response.getHits().hits()[0].score(), equalTo(5f));\n        assertThat(response.getHits().hits()[1].id(), equalTo(\"14\"));\n        assertThat(response.getHits().hits()[1].score(), equalTo(5f));\n        assertThat(response.getHits().hits()[2].id(), equalTo(\"15\"));\n        assertThat(response.getHits().hits()[2].score(), equalTo(5f));\n        assertThat(response.getHits().hits()[3].id(), equalTo(\"16\"));\n        assertThat(response.getHits().hits()[3].score(), equalTo(5f));\n        assertThat(response.getHits().hits()[4].id(), equalTo(\"17\"));\n        assertThat(response.getHits().hits()[4].score(), equalTo(5f));\n        assertThat(response.getHits().hits()[5].id(), equalTo(\"18\"));\n        assertThat(response.getHits().hits()[5].score(), equalTo(5f));\n        assertThat(response.getHits().hits()[6].id(), equalTo(\"1\"));\n        assertThat(response.getHits().hits()[6].score(), equalTo(5f));\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    // See also issue:\n    // https://github.com/elasticsearch/elasticsearch/issues/3144\n    public void testReIndexingParentAndChildDocuments() throws Exception {\n\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"child\")\n                .setSource(\n                        jsonBuilder().startObject().startObject(\"child\").startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                                .endObject().endObject()).execute().actionGet();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"red\").setParent(\"p1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setSource(\"c_field\", \"yellow\").setParent(\"p1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"x\").setParent(\"p2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"x\").setParent(\"p2\").execute().actionGet();\n\n        client().admin().indices().prepareRefresh(\"test\").execute().actionGet();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\")\n                .setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"yellow\")).scoreType(\"sum\")).execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n        assertThat(searchResponse.getHits().getAt(0).sourceAsString(), containsString(\"\\\"p_value1\\\"\"));\n\n        searchResponse = client()\n                .prepareSearch(\"test\")\n                .setQuery(\n                        boolQuery().must(matchQuery(\"c_field\", \"x\")).must(\n                                hasParentQuery(\"parent\", termQuery(\"p_field\", \"p_value2\")).scoreType(\"score\"))).execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"c3\"));\n        assertThat(searchResponse.getHits().getAt(1).id(), equalTo(\"c4\"));\n\n        // re-index\n        for (int i = 0; i < 10; i++) {\n            client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").execute().actionGet();\n            client().prepareIndex(\"test\", \"child\", \"d\" + i).setSource(\"c_field\", \"red\").setParent(\"p1\").execute().actionGet();\n            client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").execute().actionGet();\n            client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"x\").setParent(\"p2\").execute().actionGet();\n            client().admin().indices().prepareRefresh(\"test\").execute().actionGet();\n        }\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"yellow\")).scoreType(\"sum\"))\n                .execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n        assertThat(searchResponse.getHits().getAt(0).sourceAsString(), containsString(\"\\\"p_value1\\\"\"));\n\n        searchResponse = client()\n                .prepareSearch(\"test\")\n                .setQuery(\n                        boolQuery().must(matchQuery(\"c_field\", \"x\")).must(\n                                hasParentQuery(\"parent\", termQuery(\"p_field\", \"p_value2\")).scoreType(\"score\"))).execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), Matchers.anyOf(equalTo(\"c3\"), equalTo(\"c4\")));\n        assertThat(searchResponse.getHits().getAt(1).id(), Matchers.anyOf(equalTo(\"c3\"), equalTo(\"c4\")));\n    }","id":2951,"modified_method":"@Test\n    // See also issue:\n    // https://github.com/elasticsearch/elasticsearch/issues/3144\n    public void testReIndexingParentAndChildDocuments() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").get();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"red\").setParent(\"p1\").get();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setSource(\"c_field\", \"yellow\").setParent(\"p1\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").get();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"x\").setParent(\"p2\").get();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"x\").setParent(\"p2\").get();\n\n        refresh();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\")\n                .setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"yellow\")).scoreType(\"sum\")).get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n        assertThat(searchResponse.getHits().getAt(0).sourceAsString(), containsString(\"\\\"p_value1\\\"\"));\n\n        searchResponse = client()\n                .prepareSearch(\"test\")\n                .setQuery(\n                        boolQuery().must(matchQuery(\"c_field\", \"x\")).must(\n                                hasParentQuery(\"parent\", termQuery(\"p_field\", \"p_value2\")).scoreType(\"score\"))).get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"c3\"));\n        assertThat(searchResponse.getHits().getAt(1).id(), equalTo(\"c4\"));\n\n        // re-index\n        for (int i = 0; i < 10; i++) {\n            client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").get();\n            client().prepareIndex(\"test\", \"child\", \"d\" + i).setSource(\"c_field\", \"red\").setParent(\"p1\").get();\n            client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").get();\n            client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"x\").setParent(\"p2\").get();\n            client().admin().indices().prepareRefresh(\"test\").get();\n        }\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"yellow\")).scoreType(\"sum\"))\n                .get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n        assertThat(searchResponse.getHits().getAt(0).sourceAsString(), containsString(\"\\\"p_value1\\\"\"));\n\n        searchResponse = client()\n                .prepareSearch(\"test\")\n                .setQuery(\n                        boolQuery().must(matchQuery(\"c_field\", \"x\")).must(\n                                hasParentQuery(\"parent\", termQuery(\"p_field\", \"p_value2\")).scoreType(\"score\"))).get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), Matchers.anyOf(equalTo(\"c3\"), equalTo(\"c4\")));\n        assertThat(searchResponse.getHits().getAt(1).id(), Matchers.anyOf(equalTo(\"c3\"), equalTo(\"c4\")));\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testHasParentFilter() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"child\")\n                .setSource(\n                        jsonBuilder().startObject().startObject(\"child\").startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                                .endObject().endObject()).execute().actionGet();\n\n        Map<String, Set<String>> parentToChildren = newHashMap();\n        // Childless parent\n        client().prepareIndex(\"test\", \"parent\", \"p0\").setSource(\"p_field\", \"p0\").execute().actionGet();\n        parentToChildren.put(\"p0\", new HashSet<String>());\n\n        String previousParentId = null;\n        int numChildDocs = 32;\n        int numChildDocsPerParent = 0;\n        List<IndexRequestBuilder> builders = new ArrayList<IndexRequestBuilder>();\n        for (int i = 1; i <= numChildDocs; i++) {\n\n            if (previousParentId == null || i % numChildDocsPerParent == 0) {\n                previousParentId = \"p\" + i;\n                builders.add(client().prepareIndex(\"test\", \"parent\", previousParentId).setSource(\"p_field\", previousParentId));\n                numChildDocsPerParent++;\n            }\n\n            String childId = \"c\" + i;\n            builders.add(client().prepareIndex(\"test\", \"child\", childId).setSource(\"c_field\", childId).setParent(previousParentId));\n\n            if (!parentToChildren.containsKey(previousParentId)) {\n                parentToChildren.put(previousParentId, new HashSet<String>());\n            }\n            assertThat(parentToChildren.get(previousParentId).add(childId), is(true));\n        }\n        indexRandom(true, builders.toArray(new IndexRequestBuilder[0]));\n\n        assertThat(parentToChildren.isEmpty(), equalTo(false));\n        for (Map.Entry<String, Set<String>> parentToChildrenEntry : parentToChildren.entrySet()) {\n            SearchResponse searchResponse = client().prepareSearch(\"test\")\n                    .setQuery(constantScoreQuery(hasParentFilter(\"parent\", termQuery(\"p_field\", parentToChildrenEntry.getKey()))))\n                    .setSize(numChildDocsPerParent).execute().actionGet();\n\n            assertNoFailures(searchResponse);\n            assertThat(searchResponse.getFailedShards(), equalTo(0));\n            Set<String> childIds = parentToChildrenEntry.getValue();\n            assertThat(searchResponse.getHits().totalHits(), equalTo((long) childIds.size()));\n            for (int i = 0; i < searchResponse.getHits().totalHits(); i++) {\n                assertThat(childIds.remove(searchResponse.getHits().getAt(i).id()), is(true));\n                assertThat(searchResponse.getHits().getAt(i).score(), is(1.0f));\n            }\n            assertThat(childIds.size(), is(0));\n        }\n    }","id":2952,"modified_method":"@Test\n    public void testHasParentFilter() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n        Map<String, Set<String>> parentToChildren = newHashMap();\n        // Childless parent\n        client().prepareIndex(\"test\", \"parent\", \"p0\").setSource(\"p_field\", \"p0\").get();\n        parentToChildren.put(\"p0\", new HashSet<String>());\n\n        String previousParentId = null;\n        int numChildDocs = 32;\n        int numChildDocsPerParent = 0;\n        List<IndexRequestBuilder> builders = new ArrayList<IndexRequestBuilder>();\n        for (int i = 1; i <= numChildDocs; i++) {\n\n            if (previousParentId == null || i % numChildDocsPerParent == 0) {\n                previousParentId = \"p\" + i;\n                builders.add(client().prepareIndex(\"test\", \"parent\", previousParentId).setSource(\"p_field\", previousParentId));\n                numChildDocsPerParent++;\n            }\n\n            String childId = \"c\" + i;\n            builders.add(client().prepareIndex(\"test\", \"child\", childId).setSource(\"c_field\", childId).setParent(previousParentId));\n\n            if (!parentToChildren.containsKey(previousParentId)) {\n                parentToChildren.put(previousParentId, new HashSet<String>());\n            }\n            assertThat(parentToChildren.get(previousParentId).add(childId), is(true));\n        }\n        indexRandom(true, builders.toArray(new IndexRequestBuilder[0]));\n\n        assertThat(parentToChildren.isEmpty(), equalTo(false));\n        for (Map.Entry<String, Set<String>> parentToChildrenEntry : parentToChildren.entrySet()) {\n            SearchResponse searchResponse = client().prepareSearch(\"test\")\n                    .setQuery(constantScoreQuery(hasParentFilter(\"parent\", termQuery(\"p_field\", parentToChildrenEntry.getKey()))))\n                    .setSize(numChildDocsPerParent).get();\n\n            assertNoFailures(searchResponse);\n            assertThat(searchResponse.getFailedShards(), equalTo(0));\n            Set<String> childIds = parentToChildrenEntry.getValue();\n            assertThat(searchResponse.getHits().totalHits(), equalTo((long) childIds.size()));\n            for (int i = 0; i < searchResponse.getHits().totalHits(); i++) {\n                assertThat(childIds.remove(searchResponse.getHits().getAt(i).id()), is(true));\n                assertThat(searchResponse.getHits().getAt(i).score(), is(1.0f));\n            }\n            assertThat(childIds.size(), is(0));\n        }\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void indexChildDocWithNoParentMapping() throws ElasticsearchException, IOException {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(\n                        ImmutableSettings.settingsBuilder()\n                                .put(\"index.number_of_shards\", 1)\n                                .put(\"index.number_of_replicas\", 0)\n                ).execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin().indices().preparePutMapping(\"test\").setType(\"child1\").setSource(\n                jsonBuilder().startObject().startObject(\"child1\").endObject().endObject()\n        ).execute().actionGet();\n\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\", \"_parent\", \"bla\").execute().actionGet();\n        try {\n            client().prepareIndex(\"test\", \"child1\", \"c1\").setParent(\"p1\").setSource(\"c_field\", \"blue\").execute().actionGet();\n            fail();\n        } catch (ElasticsearchIllegalArgumentException e) {\n            assertThat(e.getMessage(), equalTo(\"Can't specify parent if no parent field has been configured\"));\n        }\n        try {\n            client().prepareIndex(\"test\", \"child2\", \"c2\").setParent(\"p1\").setSource(\"c_field\", \"blue\").execute().actionGet();\n            fail();\n        } catch (ElasticsearchIllegalArgumentException e) {\n            assertThat(e.getMessage(), equalTo(\"Can't specify parent if no parent field has been configured\"));\n        }\n\n        refresh();\n    }","id":2953,"modified_method":"@Test\n    public void indexChildDocWithNoParentMapping() throws ElasticsearchException, IOException {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(\n                        ImmutableSettings.settingsBuilder()\n                                .put(\"index.number_of_shards\", 1)\n                                .put(\"index.number_of_replicas\", 0)\n                )\n                .addMapping(\"parent\")\n                .addMapping(\"child1\")\n                .get();\n        ensureGreen();\n\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\", \"_parent\", \"bla\").get();\n        try {\n            client().prepareIndex(\"test\", \"child1\", \"c1\").setParent(\"p1\").setSource(\"c_field\", \"blue\").get();\n            fail();\n        } catch (ElasticsearchIllegalArgumentException e) {\n            assertThat(e.getMessage(), equalTo(\"Can't specify parent if no parent field has been configured\"));\n        }\n        try {\n            client().prepareIndex(\"test\", \"child2\", \"c2\").setParent(\"p1\").setSource(\"c_field\", \"blue\").get();\n            fail();\n        } catch (ElasticsearchIllegalArgumentException e) {\n            assertThat(e.getMessage(), equalTo(\"Can't specify parent if no parent field has been configured\"));\n        }\n\n        refresh();\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testHasChildNotBeingCached() throws ElasticsearchException, IOException {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(\n                        ImmutableSettings.settingsBuilder()\n                                .put(\"index.number_of_shards\", 1)\n                                .put(\"index.number_of_replicas\", 0)\n                ).execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin().indices().preparePutMapping(\"test\").setType(\"child\").setSource(jsonBuilder().startObject().startObject(\"child\")\n                .startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                .endObject().endObject()).execute().actionGet();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p3\").setSource(\"p_field\", \"p_value3\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p4\").setSource(\"p_field\", \"p_value4\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p5\").setSource(\"p_field\", \"p_value5\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p6\").setSource(\"p_field\", \"p_value6\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p7\").setSource(\"p_field\", \"p_value7\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p8\").setSource(\"p_field\", \"p_value8\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p9\").setSource(\"p_field\", \"p_value9\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p10\").setSource(\"p_field\", \"p_value10\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setParent(\"p1\").setSource(\"c_field\", \"blue\").execute().actionGet();\n        client().admin().indices().prepareFlush(\"test\").execute().actionGet();\n        client().admin().indices().prepareRefresh(\"test\").execute().actionGet();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\")\n                .setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"blue\")).cache(true)))\n                .execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n\n        client().prepareIndex(\"test\", \"child\", \"c2\").setParent(\"p2\").setSource(\"c_field\", \"blue\").execute().actionGet();\n        client().admin().indices().prepareRefresh(\"test\").execute().actionGet();\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"blue\")).cache(true)))\n                .execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n    }","id":2954,"modified_method":"@Test\n    public void testHasChildNotBeingCached() throws ElasticsearchException, IOException {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(\n                        ImmutableSettings.settingsBuilder()\n                                .put(\"index.number_of_shards\", 1)\n                                .put(\"index.number_of_replicas\", 0)\n                )\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p3\").setSource(\"p_field\", \"p_value3\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p4\").setSource(\"p_field\", \"p_value4\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p5\").setSource(\"p_field\", \"p_value5\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p6\").setSource(\"p_field\", \"p_value6\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p7\").setSource(\"p_field\", \"p_value7\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p8\").setSource(\"p_field\", \"p_value8\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p9\").setSource(\"p_field\", \"p_value9\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p10\").setSource(\"p_field\", \"p_value10\").get();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setParent(\"p1\").setSource(\"c_field\", \"blue\").get();\n        client().admin().indices().prepareFlush(\"test\").get();\n        client().admin().indices().prepareRefresh(\"test\").get();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\")\n                .setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"blue\")).cache(true)))\n                .get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n\n        client().prepareIndex(\"test\", \"child\", \"c2\").setParent(\"p2\").setSource(\"c_field\", \"blue\").get();\n        client().admin().indices().prepareRefresh(\"test\").get();\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"blue\")).cache(true)))\n                .get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void simpleChildQueryWithFlushAnd3Shards() throws Exception {\n\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 3).put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"child\")\n                .setSource(\n                        jsonBuilder().startObject().startObject(\"child\").startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                                .endObject().endObject()).execute().actionGet();\n\n        // index simple data with flushes, so we have many segments\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").execute().actionGet();\n        client().admin().indices().prepareFlush().execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"red\").setParent(\"p1\").execute().actionGet();\n        client().admin().indices().prepareFlush().execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setSource(\"c_field\", \"yellow\").setParent(\"p1\").execute().actionGet();\n        client().admin().indices().prepareFlush().execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").execute().actionGet();\n        client().admin().indices().prepareFlush().execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"blue\").setParent(\"p2\").execute().actionGet();\n        client().admin().indices().prepareFlush().execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"red\").setParent(\"p2\").execute().actionGet();\n        client().admin().indices().prepareFlush().execute().actionGet();\n\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        // TOP CHILDREN QUERY\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"yellow\")))\n                .execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"blue\"))).execute()\n                .actionGet();\n        if (searchResponse.getFailedShards() > 0) {\n            logger.warn(\"Failed shards:\");\n            for (ShardSearchFailure shardSearchFailure : searchResponse.getShardFailures()) {\n                logger.warn(\"-> {}\", shardSearchFailure);\n            }\n        }\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p2\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"red\"))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n        assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n\n        // HAS CHILD QUERY\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"yellow\"))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"blue\"))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p2\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"red\"))).execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n        assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n\n        // HAS CHILD FILTER\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"yellow\")))).execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"blue\"))))\n                .execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p2\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"red\"))))\n                .execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n        assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n    }","id":2955,"modified_method":"@Test\n    public void simpleChildQueryWithFlushAnd3Shards() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 3).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n\n        // index simple data with flushes, so we have many segments\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").get();\n        client().admin().indices().prepareFlush().get();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"red\").setParent(\"p1\").get();\n        client().admin().indices().prepareFlush().get();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setSource(\"c_field\", \"yellow\").setParent(\"p1\").get();\n        client().admin().indices().prepareFlush().get();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").get();\n        client().admin().indices().prepareFlush().get();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"blue\").setParent(\"p2\").get();\n        client().admin().indices().prepareFlush().get();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"red\").setParent(\"p2\").get();\n        client().admin().indices().prepareFlush().get();\n\n        client().admin().indices().prepareRefresh().get();\n\n        // TOP CHILDREN QUERY\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"yellow\")))\n                .get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"blue\"))).execute()\n                .actionGet();\n        if (searchResponse.getFailedShards() > 0) {\n            logger.warn(\"Failed shards:\");\n            for (ShardSearchFailure shardSearchFailure : searchResponse.getShardFailures()) {\n                logger.warn(\"-> {}\", shardSearchFailure);\n            }\n        }\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p2\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"red\"))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n        assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n\n        // HAS CHILD QUERY\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"yellow\"))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"blue\"))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p2\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"red\"))).get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n        assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n\n        // HAS CHILD FILTER\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"yellow\")))).get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"blue\"))))\n                .get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p2\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"red\"))))\n                .get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n        assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    // See: https://github.com/elasticsearch/elasticsearch/issues/3290\n    public void testCachingBug_withFqueryFilter() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"child\")\n                .setSource(\n                        jsonBuilder().startObject().startObject(\"child\").startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                                .endObject().endObject()).execute().actionGet();\n\n        // index simple data\n        for (int i = 0; i < 10; i++) {\n            client().prepareIndex(\"test\", \"parent\", Integer.toString(i)).setSource(\"p_field\", i).execute().actionGet();\n        }\n        for (int i = 0; i < 10; i++) {\n            client().prepareIndex(\"test\", \"child\", Integer.toString(i)).setSource(\"c_field\", i).setParent(\"\" + 0).execute().actionGet();\n        }\n        for (int i = 0; i < 10; i++) {\n            client().prepareIndex(\"test\", \"child\", Integer.toString(i + 10)).setSource(\"c_field\", i + 10).setParent(Integer.toString(i))\n                    .execute().actionGet();\n        }\n        client().admin().indices().prepareFlush().execute().actionGet();\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        for (int i = 0; i < 10; i++) {\n            SearchResponse searchResponse = client().prepareSearch(\"test\")\n                    .setQuery(constantScoreQuery(queryFilter(topChildrenQuery(\"child\", matchAllQuery())).cache(true))).execute()\n                    .actionGet();\n            assertNoFailures(searchResponse);\n            searchResponse = client().prepareSearch(\"test\")\n                    .setQuery(constantScoreQuery(queryFilter(hasChildQuery(\"child\", matchAllQuery()).scoreType(\"max\")).cache(true)))\n                    .execute().actionGet();\n            assertNoFailures(searchResponse);\n            searchResponse = client().prepareSearch(\"test\")\n                    .setQuery(constantScoreQuery(queryFilter(hasParentQuery(\"parent\", matchAllQuery()).scoreType(\"score\")).cache(true)))\n                    .execute().actionGet();\n            assertNoFailures(searchResponse);\n        }\n    }","id":2956,"modified_method":"@Test\n    // See: https://github.com/elasticsearch/elasticsearch/issues/3290\n    public void testCachingBug_withFqueryFilter() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n\n        // index simple data\n        for (int i = 0; i < 10; i++) {\n            client().prepareIndex(\"test\", \"parent\", Integer.toString(i)).setSource(\"p_field\", i).get();\n        }\n        for (int i = 0; i < 10; i++) {\n            client().prepareIndex(\"test\", \"child\", Integer.toString(i)).setSource(\"c_field\", i).setParent(\"\" + 0).get();\n        }\n        for (int i = 0; i < 10; i++) {\n            client().prepareIndex(\"test\", \"child\", Integer.toString(i + 10)).setSource(\"c_field\", i + 10).setParent(Integer.toString(i))\n                    .get();\n        }\n        client().admin().indices().prepareFlush().get();\n        client().admin().indices().prepareRefresh().get();\n\n        for (int i = 0; i < 10; i++) {\n            SearchResponse searchResponse = client().prepareSearch(\"test\")\n                    .setQuery(constantScoreQuery(queryFilter(topChildrenQuery(\"child\", matchAllQuery())).cache(true))).execute()\n                    .actionGet();\n            assertNoFailures(searchResponse);\n            searchResponse = client().prepareSearch(\"test\")\n                    .setQuery(constantScoreQuery(queryFilter(hasChildQuery(\"child\", matchAllQuery()).scoreType(\"max\")).cache(true)))\n                    .get();\n            assertNoFailures(searchResponse);\n            searchResponse = client().prepareSearch(\"test\")\n                    .setQuery(constantScoreQuery(queryFilter(hasParentQuery(\"parent\", matchAllQuery()).scoreType(\"score\")).cache(true)))\n                    .get();\n            assertNoFailures(searchResponse);\n        }\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testDeleteByQuery_has_child() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(\n                        ImmutableSettings.settingsBuilder()\n                                .put(\"index.number_of_shards\", 1)\n                                .put(\"index.number_of_replicas\", 1)\n                                .put(\"index.refresh_interval\", \"-1\")\n                ).execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin().indices().preparePutMapping(\"test\").setType(\"child\").setSource(jsonBuilder().startObject().startObject(\"child\")\n                .startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                .endObject().endObject()).execute().actionGet();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"red\").setParent(\"p1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setSource(\"c_field\", \"yellow\").setParent(\"p1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").execute().actionGet();\n        client().admin().indices().prepareFlush(\"test\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"blue\").setParent(\"p2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"red\").setParent(\"p2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p3\").setSource(\"p_field\", \"p_value3\").execute().actionGet();\n        client().admin().indices().prepareFlush(\"test\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c5\").setSource(\"c_field\", \"blue\").setParent(\"p3\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c6\").setSource(\"c_field\", \"red\").setParent(\"p3\").execute().actionGet();\n        client().admin().indices().prepareRefresh().execute().actionGet();\n        // p4 will not be found via search api, but will be deleted via delete_by_query api!\n        client().prepareIndex(\"test\", \"parent\", \"p4\").setSource(\"p_field\", \"p_value4\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c7\").setSource(\"c_field\", \"blue\").setParent(\"p4\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c8\").setSource(\"c_field\", \"red\").setParent(\"p4\").execute().actionGet();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\")\n                .setQuery(randomHasChild(\"child\", \"c_field\", \"blue\"))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 2l);\n\n        client().prepareDeleteByQuery(\"test\").setQuery(randomHasChild(\"child\", \"c_field\", \"blue\")).execute().actionGet();\n        client().admin().indices().prepareRefresh(\"test\").execute().actionGet();\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(randomHasChild(\"child\", \"c_field\", \"blue\"))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 0l);\n    }","id":2957,"modified_method":"@Test\n    public void testDeleteByQuery_has_child() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(\n                        ImmutableSettings.settingsBuilder()\n                                .put(\"index.number_of_shards\", 1)\n                                .put(\"index.number_of_replicas\", 1)\n                                .put(\"index.refresh_interval\", \"-1\")\n                )\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").get();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"red\").setParent(\"p1\").get();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setSource(\"c_field\", \"yellow\").setParent(\"p1\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").get();\n        client().admin().indices().prepareFlush(\"test\").get();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"blue\").setParent(\"p2\").get();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"red\").setParent(\"p2\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p3\").setSource(\"p_field\", \"p_value3\").get();\n        client().admin().indices().prepareFlush(\"test\").get();\n        client().prepareIndex(\"test\", \"child\", \"c5\").setSource(\"c_field\", \"blue\").setParent(\"p3\").get();\n        client().prepareIndex(\"test\", \"child\", \"c6\").setSource(\"c_field\", \"red\").setParent(\"p3\").get();\n        client().admin().indices().prepareRefresh().get();\n        // p4 will not be found via search api, but will be deleted via delete_by_query api!\n        client().prepareIndex(\"test\", \"parent\", \"p4\").setSource(\"p_field\", \"p_value4\").get();\n        client().prepareIndex(\"test\", \"child\", \"c7\").setSource(\"c_field\", \"blue\").setParent(\"p4\").get();\n        client().prepareIndex(\"test\", \"child\", \"c8\").setSource(\"c_field\", \"red\").setParent(\"p4\").get();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\")\n                .setQuery(randomHasChild(\"child\", \"c_field\", \"blue\"))\n                .get();\n        assertHitCount(searchResponse, 2l);\n\n        client().prepareDeleteByQuery(\"test\").setQuery(randomHasChild(\"child\", \"c_field\", \"blue\")).get();\n        client().admin().indices().prepareRefresh(\"test\").get();\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(randomHasChild(\"child\", \"c_field\", \"blue\"))\n                .get();\n        assertHitCount(searchResponse, 0l);\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testClearIdCacheBug() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(\n                        ImmutableSettings.settingsBuilder()\n                                .put(\"index.number_of_shards\", 1)\n                                .put(\"index.number_of_replicas\", 0)\n                ).execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n\n        client().prepareIndex(\"test\", \"parent\", \"p0\").setSource(\"p_field\", \"p_value0\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").execute().actionGet();\n\n        client().admin().indices().prepareRefresh().execute().actionGet();\n        // No _parent field yet, there shouldn't be anything in the parent id cache\n        IndicesStatsResponse indicesStatsResponse = client().admin().indices()\n                .prepareStats(\"test\").setIdCache(true).execute().actionGet();\n        assertThat(indicesStatsResponse.getTotal().getIdCache().getMemorySizeInBytes(), equalTo(0l));\n\n        // Now add mapping + children\n        client().admin().indices().preparePutMapping(\"test\").setType(\"child\").setSource(jsonBuilder().startObject().startObject(\"child\")\n                .startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                .endObject().endObject()).execute().actionGet();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"red\").setParent(\"p1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setSource(\"c_field\", \"yellow\").setParent(\"p1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"blue\").setParent(\"p2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"red\").setParent(\"p2\").execute().actionGet();\n\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        indicesStatsResponse = client().admin().indices()\n                .prepareStats(\"test\").setIdCache(true).execute().actionGet();\n        // automatic warm-up has populated the cache since it found a parent field mapper\n        assertThat(indicesStatsResponse.getTotal().getIdCache().getMemorySizeInBytes(), greaterThan(0l));\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\")\n                .setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"blue\"))))\n                .execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n\n        indicesStatsResponse = client().admin().indices()\n                .prepareStats(\"test\").setIdCache(true).execute().actionGet();\n        assertThat(indicesStatsResponse.getTotal().getIdCache().getMemorySizeInBytes(), greaterThan(0l));\n\n        client().admin().indices().prepareClearCache(\"test\").setIdCache(true).execute().actionGet();\n        indicesStatsResponse = client().admin().indices()\n                .prepareStats(\"test\").setIdCache(true).execute().actionGet();\n        assertThat(indicesStatsResponse.getTotal().getIdCache().getMemorySizeInBytes(), equalTo(0l));\n    }","id":2958,"modified_method":"@Test\n    public void testClearIdCacheBug() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .addMapping(\"parent\")\n                .setSettings(\n                        ImmutableSettings.settingsBuilder()\n                                .put(\"index.number_of_shards\", 1)\n                                .put(\"index.number_of_replicas\", 0)\n                ).get();\n        ensureGreen();\n\n        client().prepareIndex(\"test\", \"parent\", \"p0\").setSource(\"p_field\", \"p_value0\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").get();\n\n        refresh();\n        // No _parent field yet, there shouldn't be anything in the parent id cache\n        IndicesStatsResponse indicesStatsResponse = client().admin().indices()\n                .prepareStats(\"test\").setIdCache(true).get();\n        assertThat(indicesStatsResponse.getTotal().getIdCache().getMemorySizeInBytes(), equalTo(0l));\n\n        // Now add mapping + children\n        client().admin().indices().preparePutMapping(\"test\").setType(\"child\")\n                .setSource(\"_parent\", \"type=parent\")\n                .get();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"red\").setParent(\"p1\").get();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setSource(\"c_field\", \"yellow\").setParent(\"p1\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").get();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"blue\").setParent(\"p2\").get();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"red\").setParent(\"p2\").get();\n\n        client().admin().indices().prepareRefresh().get();\n\n        indicesStatsResponse = client().admin().indices()\n                .prepareStats(\"test\").setIdCache(true).get();\n        // automatic warm-up has populated the cache since it found a parent field mapper\n        assertThat(indicesStatsResponse.getTotal().getIdCache().getMemorySizeInBytes(), greaterThan(0l));\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\")\n                .setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"blue\"))))\n                .get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n\n        indicesStatsResponse = client().admin().indices()\n                .prepareStats(\"test\").setIdCache(true).get();\n        assertThat(indicesStatsResponse.getTotal().getIdCache().getMemorySizeInBytes(), greaterThan(0l));\n\n        client().admin().indices().prepareClearCache(\"test\").setIdCache(true).get();\n        indicesStatsResponse = client().admin().indices()\n                .prepareStats(\"test\").setIdCache(true).get();\n        assertThat(indicesStatsResponse.getTotal().getIdCache().getMemorySizeInBytes(), equalTo(0l));\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testAddingParentToExistingMapping() throws ElasticsearchException, IOException {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(\n                        ImmutableSettings.settingsBuilder()\n                                .put(\"index.number_of_shards\", 1)\n                                .put(\"index.number_of_replicas\", 0)\n                ).execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n\n        PutMappingResponse putMappingResponse = client().admin().indices().preparePutMapping(\"test\").setType(\"child\").setSource(\"number\", \"type=integer\")\n                .execute().actionGet();\n        assertThat(putMappingResponse.isAcknowledged(), equalTo(true));\n\n        GetMappingsResponse getMappingsResponse = client().admin().indices().prepareGetMappings(\"test\").execute().actionGet();\n        Map<String, Object> mapping = getMappingsResponse.getMappings().get(\"test\").get(\"child\").getSourceAsMap();\n        assertThat(mapping.size(), equalTo(1));\n        assertThat(mapping.get(\"properties\"), notNullValue());\n\n        try {\n            // Adding _parent metadata field to existing mapping is prohibited:\n            client().admin().indices().preparePutMapping(\"test\").setType(\"child\").setSource(jsonBuilder().startObject().startObject(\"child\")\n                    .startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                    .endObject().endObject()).execute().actionGet();\n            fail();\n        } catch (MergeMappingException e) {\n            assertThat(e.getMessage(), equalTo(\"Merge failed with failures {[The _parent field can't be added or updated]}\"));\n        }\n    }","id":2959,"modified_method":"@Test\n    public void testAddingParentToExistingMapping() throws ElasticsearchException, IOException {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(\n                        ImmutableSettings.settingsBuilder()\n                                .put(\"index.number_of_shards\", 1)\n                                .put(\"index.number_of_replicas\", 0)\n                ).get();\n        ensureGreen();\n\n        PutMappingResponse putMappingResponse = client().admin().indices().preparePutMapping(\"test\").setType(\"child\").setSource(\"number\", \"type=integer\")\n                .get();\n        assertThat(putMappingResponse.isAcknowledged(), equalTo(true));\n\n        GetMappingsResponse getMappingsResponse = client().admin().indices().prepareGetMappings(\"test\").get();\n        Map<String, Object> mapping = getMappingsResponse.getMappings().get(\"test\").get(\"child\").getSourceAsMap();\n        assertThat(mapping.size(), equalTo(1));\n        assertThat(mapping.get(\"properties\"), notNullValue());\n\n        try {\n            // Adding _parent metadata field to existing mapping is prohibited:\n            client().admin().indices().preparePutMapping(\"test\").setType(\"child\").setSource(jsonBuilder().startObject().startObject(\"child\")\n                    .startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                    .endObject().endObject()).get();\n            fail();\n        } catch (MergeMappingException e) {\n            assertThat(e.getMessage(), equalTo(\"Merge failed with failures {[The _parent field can't be added or updated]}\"));\n        }\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testParentChildQueriesNoParentType() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder()\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.refresh_interval\", -1)\n                        .put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n\n        String parentId = \"p1\";\n        client().prepareIndex(\"test\", \"parent\", parentId).setSource(\"p_field\", \"1\").execute().actionGet();\n        client().admin().indices().prepareRefresh().get();\n\n        try {\n            client().prepareSearch(\"test\")\n                    .setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")))\n                    .execute().actionGet();\n            fail();\n        } catch (SearchPhaseExecutionException e) {\n            assertThat(e.status(), equalTo(RestStatus.BAD_REQUEST));\n        }\n\n        try {\n            client().prepareSearch(\"test\")\n                    .setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")).scoreType(\"max\"))\n                    .execute().actionGet();\n            fail();\n        } catch (SearchPhaseExecutionException e) {\n            assertThat(e.status(), equalTo(RestStatus.BAD_REQUEST));\n        }\n\n        try {\n            client().prepareSearch(\"test\")\n                    .setPostFilter(hasChildFilter(\"child\", termQuery(\"c_field\", \"1\")))\n                    .execute().actionGet();\n            fail();\n        } catch (SearchPhaseExecutionException e) {\n            assertThat(e.status(), equalTo(RestStatus.BAD_REQUEST));\n        }\n\n        try {\n            client().prepareSearch(\"test\")\n                    .setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"1\")).score(\"max\"))\n                    .execute().actionGet();\n            fail();\n        } catch (SearchPhaseExecutionException e) {\n            assertThat(e.status(), equalTo(RestStatus.BAD_REQUEST));\n        }\n\n        // can't fail, because there is no check, this b/c parent type can be refered by many child types.\n        client().prepareSearch(\"test\")\n                .setQuery(hasParentQuery(\"parent\", termQuery(\"p_field\", \"1\")).scoreType(\"score\"))\n                .execute().actionGet();\n        client().prepareSearch(\"test\")\n                .setPostFilter(hasParentFilter(\"parent\", termQuery(\"p_field\", \"1\")))\n                .execute().actionGet();\n    }","id":2960,"modified_method":"@Test\n    public void testParentChildQueriesNoParentType() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder()\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.refresh_interval\", -1)\n                        .put(\"index.number_of_replicas\", 0))\n                .get();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().get();\n\n        String parentId = \"p1\";\n        client().prepareIndex(\"test\", \"parent\", parentId).setSource(\"p_field\", \"1\").get();\n        client().admin().indices().prepareRefresh().get();\n\n        try {\n            client().prepareSearch(\"test\")\n                    .setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")))\n                    .get();\n            fail();\n        } catch (SearchPhaseExecutionException e) {\n            assertThat(e.status(), equalTo(RestStatus.BAD_REQUEST));\n        }\n\n        try {\n            client().prepareSearch(\"test\")\n                    .setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")).scoreType(\"max\"))\n                    .get();\n            fail();\n        } catch (SearchPhaseExecutionException e) {\n            assertThat(e.status(), equalTo(RestStatus.BAD_REQUEST));\n        }\n\n        try {\n            client().prepareSearch(\"test\")\n                    .setPostFilter(hasChildFilter(\"child\", termQuery(\"c_field\", \"1\")))\n                    .get();\n            fail();\n        } catch (SearchPhaseExecutionException e) {\n            assertThat(e.status(), equalTo(RestStatus.BAD_REQUEST));\n        }\n\n        try {\n            client().prepareSearch(\"test\")\n                    .setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"1\")).score(\"max\"))\n                    .get();\n            fail();\n        } catch (SearchPhaseExecutionException e) {\n            assertThat(e.status(), equalTo(RestStatus.BAD_REQUEST));\n        }\n\n        // can't fail, because there is no check, this b/c parent type can be refered by many child types.\n        client().prepareSearch(\"test\")\n                .setQuery(hasParentQuery(\"parent\", termQuery(\"p_field\", \"1\")).scoreType(\"score\"))\n                .get();\n        client().prepareSearch(\"test\")\n                .setPostFilter(hasParentFilter(\"parent\", termQuery(\"p_field\", \"1\")))\n                .get();\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    // https://github.com/elasticsearch/elasticsearch/issues/2536\n    public void testParentChildQueriesCanHandleNoRelevantTypesInIndex() throws Exception {\n\n        client().admin()\n                .indices()\n                .prepareCreate(\"test\")\n                .addMapping(\"parent\", jsonBuilder().startObject().startObject(\"parent\").endObject().endObject())\n                .addMapping(\n                        \"child\",\n                        jsonBuilder().startObject().startObject(\"child\").startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                                .endObject().endObject())\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n\n        SearchResponse response = client().prepareSearch(\"test\")\n                .setQuery(QueryBuilders.hasChildQuery(\"child\", matchQuery(\"text\", \"value\"))).execute().actionGet();\n        assertThat(response.getFailedShards(), equalTo(0));\n        assertThat(response.getHits().totalHits(), equalTo(0l));\n\n        client().prepareIndex(\"test\", \"child1\").setSource(jsonBuilder().startObject().field(\"text\", \"value\").endObject()).setRefresh(true)\n                .execute().actionGet();\n\n        response = client().prepareSearch(\"test\").setQuery(QueryBuilders.hasChildQuery(\"child\", matchQuery(\"text\", \"value\"))).execute().actionGet();\n        assertThat(response.getFailedShards(), equalTo(0));\n        assertThat(response.getHits().totalHits(), equalTo(0l));\n\n        response = client().prepareSearch(\"test\").setQuery(QueryBuilders.hasChildQuery(\"child\", matchQuery(\"text\", \"value\")).scoreType(\"max\"))\n                .execute().actionGet();\n        assertThat(response.getFailedShards(), equalTo(0));\n        assertThat(response.getHits().totalHits(), equalTo(0l));\n\n        response = client().prepareSearch(\"test\").setQuery(QueryBuilders.hasParentQuery(\"child\", matchQuery(\"text\", \"value\"))).execute().actionGet();\n        assertThat(response.getFailedShards(), equalTo(0));\n        assertThat(response.getHits().totalHits(), equalTo(0l));\n\n        response = client().prepareSearch(\"test\").setQuery(QueryBuilders.hasParentQuery(\"child\", matchQuery(\"text\", \"value\")).scoreType(\"score\"))\n                .execute().actionGet();\n        assertThat(response.getFailedShards(), equalTo(0));\n        assertThat(response.getHits().totalHits(), equalTo(0l));\n    }","id":2961,"modified_method":"@Test\n    // https://github.com/elasticsearch/elasticsearch/issues/2536\n    public void testParentChildQueriesCanHandleNoRelevantTypesInIndex() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n\n        SearchResponse response = client().prepareSearch(\"test\")\n                .setQuery(QueryBuilders.hasChildQuery(\"child\", matchQuery(\"text\", \"value\"))).get();\n        assertThat(response.getFailedShards(), equalTo(0));\n        assertThat(response.getHits().totalHits(), equalTo(0l));\n\n        client().prepareIndex(\"test\", \"child1\").setSource(jsonBuilder().startObject().field(\"text\", \"value\").endObject()).setRefresh(true)\n                .get();\n\n        response = client().prepareSearch(\"test\").setQuery(QueryBuilders.hasChildQuery(\"child\", matchQuery(\"text\", \"value\"))).get();\n        assertThat(response.getFailedShards(), equalTo(0));\n        assertThat(response.getHits().totalHits(), equalTo(0l));\n\n        response = client().prepareSearch(\"test\").setQuery(QueryBuilders.hasChildQuery(\"child\", matchQuery(\"text\", \"value\")).scoreType(\"max\"))\n                .get();\n        assertThat(response.getFailedShards(), equalTo(0));\n        assertThat(response.getHits().totalHits(), equalTo(0l));\n\n        response = client().prepareSearch(\"test\").setQuery(QueryBuilders.hasParentQuery(\"child\", matchQuery(\"text\", \"value\"))).get();\n        assertThat(response.getFailedShards(), equalTo(0));\n        assertThat(response.getHits().totalHits(), equalTo(0l));\n\n        response = client().prepareSearch(\"test\").setQuery(QueryBuilders.hasParentQuery(\"child\", matchQuery(\"text\", \"value\")).scoreType(\"score\"))\n                .get();\n        assertThat(response.getFailedShards(), equalTo(0));\n        assertThat(response.getHits().totalHits(), equalTo(0l));\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testDeleteByQuery_has_child_SingleRefresh() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(\n                        ImmutableSettings.settingsBuilder()\n                                .put(\"index.number_of_shards\", 1)\n                                .put(\"index.number_of_replicas\", 1)\n                                .put(\"index.refresh_interval\", \"-1\")\n                ).execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin().indices().preparePutMapping(\"test\").setType(\"child\").setSource(jsonBuilder().startObject().startObject(\"child\")\n                .startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                .endObject().endObject()).execute().actionGet();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"red\").setParent(\"p1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setSource(\"c_field\", \"yellow\").setParent(\"p1\").execute().actionGet();\n        client().admin().indices().prepareFlush().execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"blue\").setParent(\"p2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"red\").setParent(\"p2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p3\").setSource(\"p_field\", \"p_value3\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c5\").setSource(\"c_field\", \"blue\").setParent(\"p3\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c6\").setSource(\"c_field\", \"red\").setParent(\"p3\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p4\").setSource(\"p_field\", \"p_value4\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c7\").setSource(\"c_field\", \"blue\").setParent(\"p4\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c8\").setSource(\"c_field\", \"red\").setParent(\"p4\").execute().actionGet();\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\")\n                .setQuery(randomHasChild(\"child\", \"c_field\", \"blue\"))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 3l);\n\n        client().prepareDeleteByQuery(\"test\").setQuery(randomHasChild(\"child\", \"c_field\", \"blue\")).execute().actionGet();\n        client().admin().indices().prepareRefresh(\"test\").execute().actionGet();\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(randomHasChild(\"child\", \"c_field\", \"blue\"))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 0l);\n    }","id":2962,"modified_method":"@Test\n    public void testDeleteByQuery_has_child_SingleRefresh() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(\n                        ImmutableSettings.settingsBuilder()\n                                .put(\"index.number_of_shards\", 1)\n                                .put(\"index.number_of_replicas\", 1)\n                                .put(\"index.refresh_interval\", \"-1\")\n                )\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").get();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"red\").setParent(\"p1\").get();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setSource(\"c_field\", \"yellow\").setParent(\"p1\").get();\n        client().admin().indices().prepareFlush().get();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").get();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"blue\").setParent(\"p2\").get();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"red\").setParent(\"p2\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p3\").setSource(\"p_field\", \"p_value3\").get();\n        client().prepareIndex(\"test\", \"child\", \"c5\").setSource(\"c_field\", \"blue\").setParent(\"p3\").get();\n        client().prepareIndex(\"test\", \"child\", \"c6\").setSource(\"c_field\", \"red\").setParent(\"p3\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p4\").setSource(\"p_field\", \"p_value4\").get();\n        client().prepareIndex(\"test\", \"child\", \"c7\").setSource(\"c_field\", \"blue\").setParent(\"p4\").get();\n        client().prepareIndex(\"test\", \"child\", \"c8\").setSource(\"c_field\", \"red\").setParent(\"p4\").get();\n        client().admin().indices().prepareRefresh().get();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\")\n                .setQuery(randomHasChild(\"child\", \"c_field\", \"blue\"))\n                .get();\n        assertHitCount(searchResponse, 3l);\n\n        client().prepareDeleteByQuery(\"test\").setQuery(randomHasChild(\"child\", \"c_field\", \"blue\")).get();\n        client().admin().indices().prepareRefresh(\"test\").get();\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(randomHasChild(\"child\", \"c_field\", \"blue\"))\n                .get();\n        assertHitCount(searchResponse, 0l);\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testScopedFacet() throws Exception {\n\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"child\")\n                .setSource(\n                        jsonBuilder().startObject().startObject(\"child\").startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                                .endObject().endObject()).execute().actionGet();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"red\").setParent(\"p1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setSource(\"c_field\", \"yellow\").setParent(\"p1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"blue\").setParent(\"p2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"red\").setParent(\"p2\").execute().actionGet();\n\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        SearchResponse searchResponse = client()\n                .prepareSearch(\"test\")\n                .setQuery(topChildrenQuery(\"child\", boolQuery().should(termQuery(\"c_field\", \"red\")).should(termQuery(\"c_field\", \"yellow\"))))\n                .addFacet(\n                        termsFacet(\"facet1\")\n                                .facetFilter(boolFilter().should(termFilter(\"c_field\", \"red\")).should(termFilter(\"c_field\", \"yellow\")))\n                                .field(\"c_field\").global(true)).execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n        assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n\n        assertThat(searchResponse.getFacets().facets().size(), equalTo(1));\n        TermsFacet termsFacet = searchResponse.getFacets().facet(\"facet1\");\n        assertThat(termsFacet.getEntries().size(), equalTo(2));\n        assertThat(termsFacet.getEntries().get(0).getTerm().string(), equalTo(\"red\"));\n        assertThat(termsFacet.getEntries().get(0).getCount(), equalTo(2));\n        assertThat(termsFacet.getEntries().get(1).getTerm().string(), equalTo(\"yellow\"));\n        assertThat(termsFacet.getEntries().get(1).getCount(), equalTo(1));\n    }","id":2963,"modified_method":"@Test\n    public void testScopedFacet() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").get();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"red\").setParent(\"p1\").get();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setSource(\"c_field\", \"yellow\").setParent(\"p1\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").get();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"blue\").setParent(\"p2\").get();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"red\").setParent(\"p2\").get();\n\n        refresh();\n\n        SearchResponse searchResponse = client()\n                .prepareSearch(\"test\")\n                .setQuery(topChildrenQuery(\"child\", boolQuery().should(termQuery(\"c_field\", \"red\")).should(termQuery(\"c_field\", \"yellow\"))))\n                .addFacet(\n                        termsFacet(\"facet1\")\n                                .facetFilter(boolFilter().should(termFilter(\"c_field\", \"red\")).should(termFilter(\"c_field\", \"yellow\")))\n                                .field(\"c_field\").global(true)).get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n        assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n\n        assertThat(searchResponse.getFacets().facets().size(), equalTo(1));\n        TermsFacet termsFacet = searchResponse.getFacets().facet(\"facet1\");\n        assertThat(termsFacet.getEntries().size(), equalTo(2));\n        assertThat(termsFacet.getEntries().get(0).getTerm().string(), equalTo(\"red\"));\n        assertThat(termsFacet.getEntries().get(0).getCount(), equalTo(2));\n        assertThat(termsFacet.getEntries().get(1).getTerm().string(), equalTo(\"yellow\"));\n        assertThat(termsFacet.getEntries().get(1).getCount(), equalTo(1));\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    // Relates to bug: https://github.com/elasticsearch/elasticsearch/issues/3818\n    public void testHasChildQueryOnlyReturnsSingleChildType() {\n        client().admin().indices().prepareCreate(\"grandissue\")\n                .setSettings(\n                        ImmutableSettings.settingsBuilder()\n                                .put(\"index.number_of_shards\", 1)\n                                .put(\"index.number_of_replicas\", 0)\n                )\n                .addMapping(\"grandparent\", \"name\", \"type=string\")\n                .addMapping(\"parent\", \"_parent\", \"type=grandparent\")\n                .addMapping(\"child_type_one\", \"_parent\", \"type=parent\")\n                .addMapping(\"child_type_two\", \"_parent\", \"type=parent\")\n                .execute().actionGet();\n\n        client().prepareIndex(\"grandissue\", \"grandparent\", \"1\").setSource(\"name\", \"Grandpa\").execute().actionGet();\n        client().prepareIndex(\"grandissue\", \"parent\", \"2\").setParent(\"1\").setSource(\"name\", \"Dana\").execute().actionGet();\n        client().prepareIndex(\"grandissue\", \"child_type_one\", \"3\").setParent(\"2\").setRouting(\"1\")\n                .setSource(\"name\", \"William\")\n                .execute().actionGet();\n        client().prepareIndex(\"grandissue\", \"child_type_two\", \"4\").setParent(\"2\").setRouting(\"1\")\n                .setSource(\"name\", \"Kate\")\n                .execute().actionGet();\n        client().admin().indices().prepareRefresh(\"grandissue\").execute().actionGet();\n\n        SearchResponse searchResponse = client().prepareSearch(\"grandissue\").setQuery(\n                boolQuery().must(\n                        hasChildQuery(\n                                \"parent\",\n                                boolQuery().must(\n                                        hasChildQuery(\n                                                \"child_type_one\",\n                                                boolQuery().must(\n                                                        queryString(\"name:William*\").analyzeWildcard(true)\n                                                )\n                                        )\n                                )\n                        )\n                )\n        ).execute().actionGet();\n        assertHitCount(searchResponse, 1l);\n\n        searchResponse = client().prepareSearch(\"grandissue\").setQuery(\n                boolQuery().must(\n                        hasChildQuery(\n                                \"parent\",\n                                boolQuery().must(\n                                        hasChildQuery(\n                                                \"child_type_two\",\n                                                boolQuery().must(\n                                                        queryString(\"name:William*\").analyzeWildcard(true)\n                                                )\n                                        )\n                                )\n                        )\n                )\n        ).execute().actionGet();\n        assertHitCount(searchResponse, 0l);\n    }","id":2964,"modified_method":"@Test\n    // Relates to bug: https://github.com/elasticsearch/elasticsearch/issues/3818\n    public void testHasChildQueryOnlyReturnsSingleChildType() {\n        client().admin().indices().prepareCreate(\"grandissue\")\n                .setSettings(\n                        ImmutableSettings.settingsBuilder()\n                                .put(\"index.number_of_shards\", 1)\n                                .put(\"index.number_of_replicas\", 0)\n                )\n                .addMapping(\"grandparent\", \"name\", \"type=string\")\n                .addMapping(\"parent\", \"_parent\", \"type=grandparent\")\n                .addMapping(\"child_type_one\", \"_parent\", \"type=parent\")\n                .addMapping(\"child_type_two\", \"_parent\", \"type=parent\")\n                .get();\n\n        client().prepareIndex(\"grandissue\", \"grandparent\", \"1\").setSource(\"name\", \"Grandpa\").get();\n        client().prepareIndex(\"grandissue\", \"parent\", \"2\").setParent(\"1\").setSource(\"name\", \"Dana\").get();\n        client().prepareIndex(\"grandissue\", \"child_type_one\", \"3\").setParent(\"2\").setRouting(\"1\")\n                .setSource(\"name\", \"William\")\n                .get();\n        client().prepareIndex(\"grandissue\", \"child_type_two\", \"4\").setParent(\"2\").setRouting(\"1\")\n                .setSource(\"name\", \"Kate\")\n                .get();\n        client().admin().indices().prepareRefresh(\"grandissue\").get();\n\n        SearchResponse searchResponse = client().prepareSearch(\"grandissue\").setQuery(\n                boolQuery().must(\n                        hasChildQuery(\n                                \"parent\",\n                                boolQuery().must(\n                                        hasChildQuery(\n                                                \"child_type_one\",\n                                                boolQuery().must(\n                                                        queryString(\"name:William*\").analyzeWildcard(true)\n                                                )\n                                        )\n                                )\n                        )\n                )\n        ).get();\n        assertHitCount(searchResponse, 1l);\n\n        searchResponse = client().prepareSearch(\"grandissue\").setQuery(\n                boolQuery().must(\n                        hasChildQuery(\n                                \"parent\",\n                                boolQuery().must(\n                                        hasChildQuery(\n                                                \"child_type_two\",\n                                                boolQuery().must(\n                                                        queryString(\"name:William*\").analyzeWildcard(true)\n                                                )\n                                        )\n                                )\n                        )\n                )\n        ).get();\n        assertHitCount(searchResponse, 0l);\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void multiLevelChild() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"child\")\n                .setSource(\n                        jsonBuilder().startObject().startObject(\"child\").startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                                .endObject().endObject()).execute().actionGet();\n        client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"grandchild\")\n                .setSource(\n                        jsonBuilder().startObject().startObject(\"grandchild\").startObject(\"_parent\").field(\"type\", \"child\").endObject()\n                                .endObject().endObject()).execute().actionGet();\n\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"c_value1\").setParent(\"p1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"grandchild\", \"gc1\").setSource(\"gc_field\", \"gc_value1\").setParent(\"c1\").setRouting(\"gc1\").execute()\n                .actionGet();\n\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        SearchResponse searchResponse = client()\n                .prepareSearch(\"test\")\n                .setQuery(\n                        filteredQuery(\n                                matchAllQuery(),\n                                hasChildFilter(\n                                        \"child\",\n                                        filteredQuery(termQuery(\"c_field\", \"c_value1\"),\n                                                hasChildFilter(\"grandchild\", termQuery(\"gc_field\", \"gc_value1\")))))).execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(filteredQuery(matchAllQuery(), hasParentFilter(\"parent\", termFilter(\"p_field\", \"p_value1\")))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"c1\"));\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(filteredQuery(matchAllQuery(), hasParentFilter(\"child\", termFilter(\"c_field\", \"c_value1\")))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"gc1\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(hasParentQuery(\"parent\", termQuery(\"p_field\", \"p_value1\"))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"c1\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(hasParentQuery(\"child\", termQuery(\"c_field\", \"c_value1\"))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"gc1\"));\n    }","id":2965,"modified_method":"@Test\n    public void multiLevelChild() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .addMapping(\"grandchild\", \"_parent\", \"type=child\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .get();\n        ensureGreen();\n\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").get();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"c_value1\").setParent(\"p1\").get();\n        client().prepareIndex(\"test\", \"grandchild\", \"gc1\").setSource(\"gc_field\", \"gc_value1\")\n                .setParent(\"c1\").setRouting(\"gc1\").get();\n        refresh();\n\n        SearchResponse searchResponse = client()\n                .prepareSearch(\"test\")\n                .setQuery(\n                        filteredQuery(\n                                matchAllQuery(),\n                                hasChildFilter(\n                                        \"child\",\n                                        filteredQuery(termQuery(\"c_field\", \"c_value1\"),\n                                                hasChildFilter(\"grandchild\", termQuery(\"gc_field\", \"gc_value1\")))))).get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(filteredQuery(matchAllQuery(), hasParentFilter(\"parent\", termFilter(\"p_field\", \"p_value1\")))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"c1\"));\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(filteredQuery(matchAllQuery(), hasParentFilter(\"child\", termFilter(\"c_field\", \"c_value1\")))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"gc1\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(hasParentQuery(\"parent\", termQuery(\"p_field\", \"p_value1\"))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"c1\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(hasParentQuery(\"child\", termQuery(\"c_field\", \"c_value1\"))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"gc1\"));\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testParentChildCaching() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(\n                        ImmutableSettings.settingsBuilder()\n                                .put(\"index.number_of_shards\", 1)\n                                .put(\"index.number_of_replicas\", 0)\n                                .put(\"index.refresh_interval\", -1)\n                ).get();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin().indices().preparePutMapping(\"test\").setType(\"child\").setSource(jsonBuilder().startObject().startObject(\"child\")\n                .startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                .endObject().endObject()).get();\n\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").get();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setParent(\"p1\").setSource(\"c_field\", \"blue\").get();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setParent(\"p1\").setSource(\"c_field\", \"red\").get();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setParent(\"p2\").setSource(\"c_field\", \"red\").get();\n        client().admin().indices().prepareOptimize(\"test\").setFlush(true).setWaitForMerge(true).get();\n        client().prepareIndex(\"test\", \"parent\", \"p3\").setSource(\"p_field\", \"p_value3\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p4\").setSource(\"p_field\", \"p_value4\").get();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setParent(\"p3\").setSource(\"c_field\", \"green\").get();\n        client().prepareIndex(\"test\", \"child\", \"c5\").setParent(\"p3\").setSource(\"c_field\", \"blue\").get();\n        client().prepareIndex(\"test\", \"child\", \"c6\").setParent(\"p4\").setSource(\"c_field\", \"blue\").get();\n        client().admin().indices().prepareFlush(\"test\").get();\n        client().admin().indices().prepareRefresh(\"test\").get();\n\n        for (int i = 0; i < 2; i++) {\n            SearchResponse searchResponse = client().prepareSearch()\n                    .setQuery(filteredQuery(matchAllQuery(), boolFilter()\n                            .must(FilterBuilders.hasChildFilter(\"child\", matchQuery(\"c_field\", \"red\")))\n                            .must(matchAllFilter())\n                            .cache(true)))\n                    .get();\n            assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        }\n\n\n        client().prepareIndex(\"test\", \"child\", \"c3\").setParent(\"p2\").setSource(\"c_field\", \"blue\").get();\n        client().admin().indices().prepareRefresh(\"test\").get();\n\n        SearchResponse searchResponse = client().prepareSearch()\n                .setQuery(filteredQuery(matchAllQuery(), boolFilter()\n                        .must(FilterBuilders.hasChildFilter(\"child\", matchQuery(\"c_field\", \"red\")))\n                        .must(matchAllFilter())\n                        .cache(true)))\n                .get();\n\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n    }","id":2966,"modified_method":"@Test\n    public void testParentChildCaching() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(\n                        ImmutableSettings.settingsBuilder()\n                                .put(\"index.number_of_shards\", 1)\n                                .put(\"index.number_of_replicas\", 0)\n                                .put(\"index.refresh_interval\", -1)\n                )\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").get();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setParent(\"p1\").setSource(\"c_field\", \"blue\").get();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setParent(\"p1\").setSource(\"c_field\", \"red\").get();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setParent(\"p2\").setSource(\"c_field\", \"red\").get();\n        client().admin().indices().prepareOptimize(\"test\").setFlush(true).setWaitForMerge(true).get();\n        client().prepareIndex(\"test\", \"parent\", \"p3\").setSource(\"p_field\", \"p_value3\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p4\").setSource(\"p_field\", \"p_value4\").get();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setParent(\"p3\").setSource(\"c_field\", \"green\").get();\n        client().prepareIndex(\"test\", \"child\", \"c5\").setParent(\"p3\").setSource(\"c_field\", \"blue\").get();\n        client().prepareIndex(\"test\", \"child\", \"c6\").setParent(\"p4\").setSource(\"c_field\", \"blue\").get();\n        client().admin().indices().prepareFlush(\"test\").get();\n        client().admin().indices().prepareRefresh(\"test\").get();\n\n        for (int i = 0; i < 2; i++) {\n            SearchResponse searchResponse = client().prepareSearch()\n                    .setQuery(filteredQuery(matchAllQuery(), boolFilter()\n                            .must(FilterBuilders.hasChildFilter(\"child\", matchQuery(\"c_field\", \"red\")))\n                            .must(matchAllFilter())\n                            .cache(true)))\n                    .get();\n            assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        }\n\n\n        client().prepareIndex(\"test\", \"child\", \"c3\").setParent(\"p2\").setSource(\"c_field\", \"blue\").get();\n        client().admin().indices().prepareRefresh(\"test\").get();\n\n        SearchResponse searchResponse = client().prepareSearch()\n                .setQuery(filteredQuery(matchAllQuery(), boolFilter()\n                        .must(FilterBuilders.hasChildFilter(\"child\", matchQuery(\"c_field\", \"red\")))\n                        .must(matchAllFilter())\n                        .cache(true)))\n                .get();\n\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testSimpleQueryRewrite() throws Exception {\n\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 2).put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"child\")\n                .setSource(\n                        jsonBuilder().startObject().startObject(\"child\").startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                                .endObject().endObject()).execute().actionGet();\n\n        // index simple data\n        int childId = 0;\n        for (int i = 0; i < 10; i++) {\n            String parentId = String.format(Locale.ROOT, \"p%03d\", i);\n            client().prepareIndex(\"test\", \"parent\", parentId).setSource(\"p_field\", parentId).execute().actionGet();\n            int j = childId;\n            for (; j < childId + 50; j++) {\n                String childUid = String.format(Locale.ROOT, \"c%03d\", j);\n                client().prepareIndex(\"test\", \"child\", childUid).setSource(\"c_field\", childUid).setParent(parentId).execute().actionGet();\n            }\n            childId = j;\n        }\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        SearchType[] searchTypes = new SearchType[]{SearchType.QUERY_THEN_FETCH, SearchType.DFS_QUERY_THEN_FETCH};\n        for (SearchType searchType : searchTypes) {\n            SearchResponse searchResponse = client().prepareSearch(\"test\").setSearchType(searchType)\n                    .setQuery(hasChildQuery(\"child\", prefixQuery(\"c_field\", \"c\")).scoreType(\"max\")).addSort(\"p_field\", SortOrder.ASC)\n                    .setSize(5).execute().actionGet();\n            assertNoFailures(searchResponse);\n            assertThat(searchResponse.getHits().totalHits(), equalTo(10L));\n            assertThat(searchResponse.getHits().hits()[0].id(), equalTo(\"p000\"));\n            assertThat(searchResponse.getHits().hits()[1].id(), equalTo(\"p001\"));\n            assertThat(searchResponse.getHits().hits()[2].id(), equalTo(\"p002\"));\n            assertThat(searchResponse.getHits().hits()[3].id(), equalTo(\"p003\"));\n            assertThat(searchResponse.getHits().hits()[4].id(), equalTo(\"p004\"));\n\n            searchResponse = client().prepareSearch(\"test\").setSearchType(searchType)\n                    .setQuery(hasParentQuery(\"parent\", prefixQuery(\"p_field\", \"p\")).scoreType(\"score\")).addSort(\"c_field\", SortOrder.ASC)\n                    .setSize(5).execute().actionGet();\n            assertNoFailures(searchResponse);\n            assertThat(searchResponse.getHits().totalHits(), equalTo(500L));\n            assertThat(searchResponse.getHits().hits()[0].id(), equalTo(\"c000\"));\n            assertThat(searchResponse.getHits().hits()[1].id(), equalTo(\"c001\"));\n            assertThat(searchResponse.getHits().hits()[2].id(), equalTo(\"c002\"));\n            assertThat(searchResponse.getHits().hits()[3].id(), equalTo(\"c003\"));\n            assertThat(searchResponse.getHits().hits()[4].id(), equalTo(\"c004\"));\n\n            searchResponse = client().prepareSearch(\"test\").setSearchType(searchType)\n                    .setQuery(topChildrenQuery(\"child\", prefixQuery(\"c_field\", \"c\"))).addSort(\"p_field\", SortOrder.ASC).setSize(5)\n                    .execute().actionGet();\n            assertNoFailures(searchResponse);\n            assertThat(searchResponse.getHits().totalHits(), equalTo(10L));\n            assertThat(searchResponse.getHits().hits()[0].id(), equalTo(\"p000\"));\n            assertThat(searchResponse.getHits().hits()[1].id(), equalTo(\"p001\"));\n            assertThat(searchResponse.getHits().hits()[2].id(), equalTo(\"p002\"));\n            assertThat(searchResponse.getHits().hits()[3].id(), equalTo(\"p003\"));\n            assertThat(searchResponse.getHits().hits()[4].id(), equalTo(\"p004\"));\n        }\n    }","id":2967,"modified_method":"@Test\n    public void testSimpleQueryRewrite() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 2).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n\n        // index simple data\n        int childId = 0;\n        for (int i = 0; i < 10; i++) {\n            String parentId = String.format(Locale.ROOT, \"p%03d\", i);\n            client().prepareIndex(\"test\", \"parent\", parentId).setSource(\"p_field\", parentId).get();\n            int j = childId;\n            for (; j < childId + 50; j++) {\n                String childUid = String.format(Locale.ROOT, \"c%03d\", j);\n                client().prepareIndex(\"test\", \"child\", childUid).setSource(\"c_field\", childUid).setParent(parentId).get();\n            }\n            childId = j;\n        }\n        refresh();\n\n        SearchType[] searchTypes = new SearchType[]{SearchType.QUERY_THEN_FETCH, SearchType.DFS_QUERY_THEN_FETCH};\n        for (SearchType searchType : searchTypes) {\n            SearchResponse searchResponse = client().prepareSearch(\"test\").setSearchType(searchType)\n                    .setQuery(hasChildQuery(\"child\", prefixQuery(\"c_field\", \"c\")).scoreType(\"max\")).addSort(\"p_field\", SortOrder.ASC)\n                    .setSize(5).get();\n            assertNoFailures(searchResponse);\n            assertThat(searchResponse.getHits().totalHits(), equalTo(10L));\n            assertThat(searchResponse.getHits().hits()[0].id(), equalTo(\"p000\"));\n            assertThat(searchResponse.getHits().hits()[1].id(), equalTo(\"p001\"));\n            assertThat(searchResponse.getHits().hits()[2].id(), equalTo(\"p002\"));\n            assertThat(searchResponse.getHits().hits()[3].id(), equalTo(\"p003\"));\n            assertThat(searchResponse.getHits().hits()[4].id(), equalTo(\"p004\"));\n\n            searchResponse = client().prepareSearch(\"test\").setSearchType(searchType)\n                    .setQuery(hasParentQuery(\"parent\", prefixQuery(\"p_field\", \"p\")).scoreType(\"score\")).addSort(\"c_field\", SortOrder.ASC)\n                    .setSize(5).get();\n            assertNoFailures(searchResponse);\n            assertThat(searchResponse.getHits().totalHits(), equalTo(500L));\n            assertThat(searchResponse.getHits().hits()[0].id(), equalTo(\"c000\"));\n            assertThat(searchResponse.getHits().hits()[1].id(), equalTo(\"c001\"));\n            assertThat(searchResponse.getHits().hits()[2].id(), equalTo(\"c002\"));\n            assertThat(searchResponse.getHits().hits()[3].id(), equalTo(\"c003\"));\n            assertThat(searchResponse.getHits().hits()[4].id(), equalTo(\"c004\"));\n\n            searchResponse = client().prepareSearch(\"test\").setSearchType(searchType)\n                    .setQuery(topChildrenQuery(\"child\", prefixQuery(\"c_field\", \"c\"))).addSort(\"p_field\", SortOrder.ASC).setSize(5)\n                    .get();\n            assertNoFailures(searchResponse);\n            assertThat(searchResponse.getHits().totalHits(), equalTo(10L));\n            assertThat(searchResponse.getHits().hits()[0].id(), equalTo(\"p000\"));\n            assertThat(searchResponse.getHits().hits()[1].id(), equalTo(\"p001\"));\n            assertThat(searchResponse.getHits().hits()[2].id(), equalTo(\"p002\"));\n            assertThat(searchResponse.getHits().hits()[3].id(), equalTo(\"p003\"));\n            assertThat(searchResponse.getHits().hits()[4].id(), equalTo(\"p004\"));\n        }\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    // see #2744\n    public void test2744() throws ElasticsearchException, IOException {\n\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"test\")\n                .setSource(\n                        jsonBuilder().startObject().startObject(\"test\").startObject(\"_parent\").field(\"type\", \"foo\").endObject().endObject()\n                                .endObject()).execute().actionGet();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"foo\", \"1\").setSource(\"foo\", 1).execute().actionGet();\n        client().prepareIndex(\"test\", \"test\").setSource(\"foo\", 1).setParent(\"1\").execute().actionGet();\n        client().admin().indices().prepareRefresh().execute().actionGet();\n        SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"test\", matchQuery(\"foo\", 1))).execute()\n                .actionGet();\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"1\"));\n\n    }","id":2968,"modified_method":"@Test\n    // see #2744\n    public void test2744() throws ElasticsearchException, IOException {\n        client().admin().indices().prepareCreate(\"test\")\n                .addMapping(\"parent\")\n                .addMapping(\"test\", \"_parent\", \"type=foo\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .get();\n        ensureGreen();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"foo\", \"1\").setSource(\"foo\", 1).get();\n        client().prepareIndex(\"test\", \"test\").setSource(\"foo\", 1).setParent(\"1\").get();\n        client().admin().indices().prepareRefresh().get();\n        SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"test\", matchQuery(\"foo\", 1))).execute()\n                .actionGet();\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"1\"));\n\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testFixAOBEIfTopChildrenIsWrappedInMusNotClause() throws Exception {\n\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"child\")\n                .setSource(\n                        jsonBuilder().startObject().startObject(\"child\").startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                                .endObject().endObject()).execute().actionGet();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"red\").setParent(\"p1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setSource(\"c_field\", \"yellow\").setParent(\"p1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"blue\").setParent(\"p2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"red\").setParent(\"p2\").execute().actionGet();\n\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\").setSearchType(SearchType.QUERY_THEN_FETCH)\n                .setQuery(boolQuery().mustNot(topChildrenQuery(\"child\", boolQuery().should(queryString(\"c_field:*\"))))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n    }","id":2969,"modified_method":"@Test\n    public void testFixAOBEIfTopChildrenIsWrappedInMusNotClause() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").get();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"red\").setParent(\"p1\").get();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setSource(\"c_field\", \"yellow\").setParent(\"p1\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").get();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"blue\").setParent(\"p2\").get();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"red\").setParent(\"p2\").get();\n\n        refresh();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\").setSearchType(SearchType.QUERY_THEN_FETCH)\n                .setQuery(boolQuery().mustNot(topChildrenQuery(\"child\", boolQuery().should(queryString(\"c_field:*\"))))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testTopChildrenReSearchBug() throws Exception {\n\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"child\")\n                .setSource(\n                        jsonBuilder().startObject().startObject(\"child\").startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                                .endObject().endObject()).execute().actionGet();\n\n        int numberOfParents = 4;\n        int numberOfChildrenPerParent = 123;\n        for (int i = 1; i <= numberOfParents; i++) {\n            String parentId = String.format(Locale.ROOT, \"p%d\", i);\n            client().prepareIndex(\"test\", \"parent\", parentId).setSource(\"p_field\", String.format(Locale.ROOT, \"p_value%d\", i)).execute()\n                    .actionGet();\n            for (int j = 1; j <= numberOfChildrenPerParent; j++) {\n                client().prepareIndex(\"test\", \"child\", String.format(Locale.ROOT, \"%s_c%d\", parentId, j))\n                        .setSource(\"c_field1\", parentId, \"c_field2\", i % 2 == 0 ? \"even\" : \"not_even\").setParent(parentId).execute()\n                        .actionGet();\n            }\n        }\n\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field1\", \"p3\")))\n                .execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p3\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field2\", \"even\"))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p2\"));\n    }","id":2970,"modified_method":"@Test\n    public void testTopChildrenReSearchBug() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n        int numberOfParents = 4;\n        int numberOfChildrenPerParent = 123;\n        for (int i = 1; i <= numberOfParents; i++) {\n            String parentId = String.format(Locale.ROOT, \"p%d\", i);\n            client().prepareIndex(\"test\", \"parent\", parentId).setSource(\"p_field\", String.format(Locale.ROOT, \"p_value%d\", i)).execute()\n                    .actionGet();\n            for (int j = 1; j <= numberOfChildrenPerParent; j++) {\n                client().prepareIndex(\"test\", \"child\", String.format(Locale.ROOT, \"%s_c%d\", parentId, j))\n                        .setSource(\"c_field1\", parentId, \"c_field2\", i % 2 == 0 ? \"even\" : \"not_even\").setParent(parentId).execute()\n                        .actionGet();\n            }\n        }\n\n        refresh();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field1\", \"p3\")))\n                .get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p3\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field2\", \"even\"))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p2\"));\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testAdd_ParentFieldAfterIndexingParentDocButBeforeIndexingChildDoc() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder()\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.refresh_interval\", -1)\n                        .put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n\n        String parentId = \"p1\";\n        client().prepareIndex(\"test\", \"parent\", parentId).setSource(\"p_field\", \"1\").execute().actionGet();\n        client().admin().indices().prepareRefresh().get();\n        assertAcked(client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"child\")\n                .setSource(\"_parent\", \"type=parent\"));\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"1\").setParent(parentId).execute().actionGet();\n        client().admin().indices().prepareRefresh().get();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\")\n                .setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 1l);\n        assertSearchHits(searchResponse, parentId);\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")).scoreType(\"max\"))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 1l);\n        assertSearchHits(searchResponse, parentId);\n\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setPostFilter(hasChildFilter(\"child\", termQuery(\"c_field\", \"1\")))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 1l);\n        assertSearchHits(searchResponse, parentId);\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"1\")).score(\"max\"))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 1l);\n        assertSearchHits(searchResponse, parentId);\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setPostFilter(hasParentFilter(\"parent\", termQuery(\"p_field\", \"1\")))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 1l);\n        assertSearchHits(searchResponse, \"c1\");\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(hasParentQuery(\"parent\", termQuery(\"p_field\", \"1\")).scoreType(\"score\"))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 1l);\n        assertSearchHits(searchResponse, \"c1\");\n    }","id":2971,"modified_method":"@Test\n    public void testAdd_ParentFieldAfterIndexingParentDocButBeforeIndexingChildDoc() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder()\n                        .put(\"index.number_of_shards\", 1)\n                        .put(\"index.refresh_interval\", -1)\n                        .put(\"index.number_of_replicas\", 0))\n                .get();\n        ensureGreen();\n\n        String parentId = \"p1\";\n        client().prepareIndex(\"test\", \"parent\", parentId).setSource(\"p_field\", \"1\").get();\n        client().admin().indices().prepareRefresh().get();\n        assertAcked(client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"child\")\n                .setSource(\"_parent\", \"type=parent\"));\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"1\").setParent(parentId).get();\n        client().admin().indices().prepareRefresh().get();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\")\n                .setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")))\n                .get();\n        assertHitCount(searchResponse, 1l);\n        assertSearchHits(searchResponse, parentId);\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")).scoreType(\"max\"))\n                .get();\n        assertHitCount(searchResponse, 1l);\n        assertSearchHits(searchResponse, parentId);\n\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setPostFilter(hasChildFilter(\"child\", termQuery(\"c_field\", \"1\")))\n                .get();\n        assertHitCount(searchResponse, 1l);\n        assertSearchHits(searchResponse, parentId);\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"1\")).score(\"max\"))\n                .get();\n        assertHitCount(searchResponse, 1l);\n        assertSearchHits(searchResponse, parentId);\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setPostFilter(hasParentFilter(\"parent\", termQuery(\"p_field\", \"1\")))\n                .get();\n        assertHitCount(searchResponse, 1l);\n        assertSearchHits(searchResponse, \"c1\");\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(hasParentQuery(\"parent\", termQuery(\"p_field\", \"1\")).scoreType(\"score\"))\n                .get();\n        assertHitCount(searchResponse, 1l);\n        assertSearchHits(searchResponse, \"c1\");\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void simpleChildQuery() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"child\")\n                .setSource(\n                        jsonBuilder().startObject().startObject(\"child\").startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                                .endObject().endObject()).execute().actionGet();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"red\").setParent(\"p1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setSource(\"c_field\", \"yellow\").setParent(\"p1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"blue\").setParent(\"p2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"red\").setParent(\"p2\").execute().actionGet();\n\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        // TEST FETCHING _parent from child\n        SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(idsQuery(\"child\").ids(\"c1\")).addFields(\"_parent\").execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"c1\"));\n        assertThat(searchResponse.getHits().getAt(0).field(\"_parent\").value().toString(), equalTo(\"p1\"));\n\n        // TEST matching on parent\n        searchResponse = client().prepareSearch(\"test\").setQuery(termQuery(\"child._parent\", \"p1\")).addFields(\"_parent\").execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), anyOf(equalTo(\"c1\"), equalTo(\"c2\")));\n        assertThat(searchResponse.getHits().getAt(0).field(\"_parent\").value().toString(), equalTo(\"p1\"));\n        assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo(\"c1\"), equalTo(\"c2\")));\n        assertThat(searchResponse.getHits().getAt(1).field(\"_parent\").value().toString(), equalTo(\"p1\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(termQuery(\"_parent\", \"p1\")).addFields(\"_parent\").execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), anyOf(equalTo(\"c1\"), equalTo(\"c2\")));\n        assertThat(searchResponse.getHits().getAt(0).field(\"_parent\").value().toString(), equalTo(\"p1\"));\n        assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo(\"c1\"), equalTo(\"c2\")));\n        assertThat(searchResponse.getHits().getAt(1).field(\"_parent\").value().toString(), equalTo(\"p1\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(queryString(\"_parent:p1\")).addFields(\"_parent\").execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), anyOf(equalTo(\"c1\"), equalTo(\"c2\")));\n        assertThat(searchResponse.getHits().getAt(0).field(\"_parent\").value().toString(), equalTo(\"p1\"));\n        assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo(\"c1\"), equalTo(\"c2\")));\n        assertThat(searchResponse.getHits().getAt(1).field(\"_parent\").value().toString(), equalTo(\"p1\"));\n\n        // TOP CHILDREN QUERY\n        searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"yellow\"))).execute()\n                .actionGet();\n        assertHitCount(searchResponse, 1l);\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"blue\")))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 1l);\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p2\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"red\"))).execute()\n                .actionGet();\n        assertHitCount(searchResponse, 2l);\n        assertThat(searchResponse.getHits().getAt(0).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n        assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n\n        // HAS CHILD\n        searchResponse = client().prepareSearch(\"test\").setQuery(randomHasChild(\"child\", \"c_field\", \"yellow\"))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 1l);\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(randomHasChild(\"child\", \"c_field\", \"blue\")).execute()\n                .actionGet();\n        assertHitCount(searchResponse, 1l);\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p2\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(randomHasChild(\"child\", \"c_field\", \"red\")).execute().actionGet();\n        assertHitCount(searchResponse, 2l);\n        assertThat(searchResponse.getHits().getAt(0).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n        assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n\n        // HAS PARENT\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(randomHasParent(\"parent\", \"p_field\", \"p_value2\")).execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertHitCount(searchResponse, 2l);\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"c3\"));\n        assertThat(searchResponse.getHits().getAt(1).id(), equalTo(\"c4\"));\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(randomHasParent(\"parent\", \"p_field\", \"p_value1\")).execute().actionGet();\n        assertHitCount(searchResponse, 2l);\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"c1\"));\n        assertThat(searchResponse.getHits().getAt(1).id(), equalTo(\"c2\"));\n    }","id":2972,"modified_method":"@Test\n    public void simpleChildQuery() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .get();\n        ensureGreen();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").get();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"red\").setParent(\"p1\").get();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setSource(\"c_field\", \"yellow\").setParent(\"p1\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").get();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"blue\").setParent(\"p2\").get();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"red\").setParent(\"p2\").get();\n        refresh();\n\n        // TEST FETCHING _parent from child\n        SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(idsQuery(\"child\").ids(\"c1\")).addFields(\"_parent\").execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"c1\"));\n        assertThat(searchResponse.getHits().getAt(0).field(\"_parent\").value().toString(), equalTo(\"p1\"));\n\n        // TEST matching on parent\n        searchResponse = client().prepareSearch(\"test\").setQuery(termQuery(\"child._parent\", \"p1\")).addFields(\"_parent\").execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), anyOf(equalTo(\"c1\"), equalTo(\"c2\")));\n        assertThat(searchResponse.getHits().getAt(0).field(\"_parent\").value().toString(), equalTo(\"p1\"));\n        assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo(\"c1\"), equalTo(\"c2\")));\n        assertThat(searchResponse.getHits().getAt(1).field(\"_parent\").value().toString(), equalTo(\"p1\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(termQuery(\"_parent\", \"p1\")).addFields(\"_parent\").get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), anyOf(equalTo(\"c1\"), equalTo(\"c2\")));\n        assertThat(searchResponse.getHits().getAt(0).field(\"_parent\").value().toString(), equalTo(\"p1\"));\n        assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo(\"c1\"), equalTo(\"c2\")));\n        assertThat(searchResponse.getHits().getAt(1).field(\"_parent\").value().toString(), equalTo(\"p1\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(queryString(\"_parent:p1\")).addFields(\"_parent\").get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n        assertThat(searchResponse.getHits().getAt(0).id(), anyOf(equalTo(\"c1\"), equalTo(\"c2\")));\n        assertThat(searchResponse.getHits().getAt(0).field(\"_parent\").value().toString(), equalTo(\"p1\"));\n        assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo(\"c1\"), equalTo(\"c2\")));\n        assertThat(searchResponse.getHits().getAt(1).field(\"_parent\").value().toString(), equalTo(\"p1\"));\n\n        // TOP CHILDREN QUERY\n        searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"yellow\"))).execute()\n                .actionGet();\n        assertHitCount(searchResponse, 1l);\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"blue\")))\n                .get();\n        assertHitCount(searchResponse, 1l);\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p2\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"red\"))).execute()\n                .actionGet();\n        assertHitCount(searchResponse, 2l);\n        assertThat(searchResponse.getHits().getAt(0).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n        assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n\n        // HAS CHILD\n        searchResponse = client().prepareSearch(\"test\").setQuery(randomHasChild(\"child\", \"c_field\", \"yellow\"))\n                .get();\n        assertHitCount(searchResponse, 1l);\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(randomHasChild(\"child\", \"c_field\", \"blue\")).execute()\n                .actionGet();\n        assertHitCount(searchResponse, 1l);\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p2\"));\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(randomHasChild(\"child\", \"c_field\", \"red\")).get();\n        assertHitCount(searchResponse, 2l);\n        assertThat(searchResponse.getHits().getAt(0).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n        assertThat(searchResponse.getHits().getAt(1).id(), anyOf(equalTo(\"p2\"), equalTo(\"p1\")));\n\n        // HAS PARENT\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(randomHasParent(\"parent\", \"p_field\", \"p_value2\")).get();\n        assertNoFailures(searchResponse);\n        assertHitCount(searchResponse, 2l);\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"c3\"));\n        assertThat(searchResponse.getHits().getAt(1).id(), equalTo(\"c4\"));\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(randomHasParent(\"parent\", \"p_field\", \"p_value1\")).get();\n        assertHitCount(searchResponse, 2l);\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"c1\"));\n        assertThat(searchResponse.getHits().getAt(1).id(), equalTo(\"c2\"));\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testHasChildAndHasParentFailWhenSomeSegmentsDontContainAnyParentOrChildDocs() throws Exception {\n\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"child\")\n                .setSource(\n                        jsonBuilder().startObject().startObject(\"child\").startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                                .endObject().endObject()).execute().actionGet();\n\n        client().prepareIndex(\"test\", \"parent\", \"1\").setSource(\"p_field\", 1).execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"1\").setParent(\"1\").setSource(\"c_field\", 1).execute().actionGet();\n        client().admin().indices().prepareFlush(\"test\").execute().actionGet();\n\n        client().prepareIndex(\"test\", \"type1\", \"1\").setSource(\"p_field\", \"p_value1\").execute().actionGet();\n        client().admin().indices().prepareFlush(\"test\").execute().actionGet();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\")\n                .setQuery(filteredQuery(matchAllQuery(), hasChildFilter(\"child\", matchAllQuery()))).execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(filteredQuery(matchAllQuery(), hasParentFilter(\"parent\", matchAllQuery()))).execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n    }","id":2973,"modified_method":"@Test\n    public void testHasChildAndHasParentFailWhenSomeSegmentsDontContainAnyParentOrChildDocs() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n\n        client().prepareIndex(\"test\", \"parent\", \"1\").setSource(\"p_field\", 1).get();\n        client().prepareIndex(\"test\", \"child\", \"1\").setParent(\"1\").setSource(\"c_field\", 1).get();\n        client().admin().indices().prepareFlush(\"test\").get();\n\n        client().prepareIndex(\"test\", \"type1\", \"1\").setSource(\"p_field\", \"p_value1\").get();\n        client().admin().indices().prepareFlush(\"test\").get();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\")\n                .setQuery(filteredQuery(matchAllQuery(), hasChildFilter(\"child\", matchAllQuery()))).get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(filteredQuery(matchAllQuery(), hasParentFilter(\"parent\", matchAllQuery()))).get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testDeleteByQuery_has_parent() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(\n                        ImmutableSettings.settingsBuilder()\n                                .put(\"index.number_of_shards\", 1)\n                                .put(\"index.number_of_replicas\", 1)\n                                .put(\"index.refresh_interval\", \"-1\")\n                ).execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin().indices().preparePutMapping(\"test\").setType(\"child\").setSource(jsonBuilder().startObject().startObject(\"child\")\n                .startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                .endObject().endObject()).execute().actionGet();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"red\").setParent(\"p1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setSource(\"c_field\", \"yellow\").setParent(\"p1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").execute().actionGet();\n        client().admin().indices().prepareFlush(\"test\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"blue\").setParent(\"p2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"red\").setParent(\"p2\").execute().actionGet();\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\")\n                .setQuery(randomHasParent(\"parent\", \"p_field\", \"p_value2\"))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 2l);\n\n        client().prepareDeleteByQuery(\"test\")\n                .setQuery(randomHasParent(\"parent\", \"p_field\", \"p_value2\"))\n                .execute().actionGet();\n        client().admin().indices().prepareRefresh(\"test\").execute().actionGet();\n        client().admin().indices().prepareRefresh(\"test\").execute().actionGet();\n        client().admin().indices().prepareRefresh(\"test\").execute().actionGet();\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(randomHasParent(\"parent\", \"p_field\", \"p_value2\"))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 0l);\n    }","id":2974,"modified_method":"@Test\n    public void testDeleteByQuery_has_parent() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(\n                        ImmutableSettings.settingsBuilder()\n                                .put(\"index.number_of_shards\", 1)\n                                .put(\"index.number_of_replicas\", 1)\n                                .put(\"index.refresh_interval\", \"-1\")\n                )\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").get();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"red\").setParent(\"p1\").get();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setSource(\"c_field\", \"yellow\").setParent(\"p1\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").get();\n        client().admin().indices().prepareFlush(\"test\").get();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"blue\").setParent(\"p2\").get();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"red\").setParent(\"p2\").get();\n        client().admin().indices().prepareRefresh().get();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\")\n                .setQuery(randomHasParent(\"parent\", \"p_field\", \"p_value2\"))\n                .get();\n        assertHitCount(searchResponse, 2l);\n\n        client().prepareDeleteByQuery(\"test\")\n                .setQuery(randomHasParent(\"parent\", \"p_field\", \"p_value2\"))\n                .get();\n        client().admin().indices().prepareRefresh(\"test\").get();\n        client().admin().indices().prepareRefresh(\"test\").get();\n        client().admin().indices().prepareRefresh(\"test\").get();\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(randomHasParent(\"parent\", \"p_field\", \"p_value2\"))\n                .get();\n        assertHitCount(searchResponse, 0l);\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testParentFieldFilter() throws Exception {\n        client().admin()\n                .indices()\n                .prepareCreate(\"test\")\n                .setSettings(\n                        ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 1)\n                                .put(\"index.refresh_interval\", -1)).execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"child\")\n                .setSource(\n                        jsonBuilder().startObject().startObject(\"child\").startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                                .endObject().endObject()).execute().actionGet();\n        client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"child2\")\n                .setSource(\n                        jsonBuilder().startObject().startObject(\"child2\").startObject(\"_parent\").field(\"type\", \"parent2\").endObject()\n                                .endObject().endObject()).execute().actionGet();\n\n        // test term filter\n        SearchResponse response = client().prepareSearch(\"test\").setQuery(filteredQuery(matchAllQuery(), termFilter(\"_parent\", \"p1\")))\n                .execute().actionGet();\n        assertHitCount(response, 0l);\n\n        client().prepareIndex(\"test\", \"some_type\", \"1\").setSource(\"field\", \"value\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"value\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"value\").setParent(\"p1\").execute().actionGet();\n\n        response = client().prepareSearch(\"test\").setQuery(filteredQuery(matchAllQuery(), termFilter(\"_parent\", \"p1\"))).execute()\n                .actionGet();\n        assertHitCount(response, 0l);\n        refresh();\n\n        response = client().prepareSearch(\"test\").setQuery(filteredQuery(matchAllQuery(), termFilter(\"_parent\", \"p1\"))).execute()\n                .actionGet();\n        assertHitCount(response, 1l);\n\n        response = client().prepareSearch(\"test\").setQuery(filteredQuery(matchAllQuery(), termFilter(\"_parent\", \"parent#p1\"))).execute()\n                .actionGet();\n        assertHitCount(response, 1l);\n\n        client().prepareIndex(\"test\", \"parent2\", \"p1\").setSource(\"p_field\", \"value\").setRefresh(true).execute().actionGet();\n\n        response = client().prepareSearch(\"test\").setQuery(filteredQuery(matchAllQuery(), termFilter(\"_parent\", \"p1\"))).execute()\n                .actionGet();\n        assertHitCount(response, 1l);\n\n        response = client().prepareSearch(\"test\").setQuery(filteredQuery(matchAllQuery(), termFilter(\"_parent\", \"parent#p1\"))).execute()\n                .actionGet();\n        assertHitCount(response, 1l);\n\n        // test terms filter\n        client().prepareIndex(\"test\", \"child2\", \"c1\").setSource(\"c_field\", \"value\").setParent(\"p1\").execute().actionGet();\n        response = client().prepareSearch(\"test\").setQuery(filteredQuery(matchAllQuery(), termsFilter(\"_parent\", \"p1\"))).execute()\n                .actionGet();\n        assertHitCount(response, 1l);\n\n        response = client().prepareSearch(\"test\").setQuery(filteredQuery(matchAllQuery(), termsFilter(\"_parent\", \"parent#p1\"))).execute()\n                .actionGet();\n        assertHitCount(response, 1l);\n\n        refresh();\n        response = client().prepareSearch(\"test\").setQuery(filteredQuery(matchAllQuery(), termsFilter(\"_parent\", \"p1\"))).execute()\n                .actionGet();\n        assertHitCount(response, 2l);\n\n        refresh();\n        response = client().prepareSearch(\"test\").setQuery(filteredQuery(matchAllQuery(), termsFilter(\"_parent\", \"p1\", \"p1\"))).execute()\n                .actionGet();\n        assertHitCount(response, 2l);\n\n        response = client().prepareSearch(\"test\")\n                .setQuery(filteredQuery(matchAllQuery(), termsFilter(\"_parent\", \"parent#p1\", \"parent2#p1\"))).execute().actionGet();\n        assertHitCount(response, 2l);\n    }","id":2975,"modified_method":"@Test\n    public void testParentFieldFilter() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 1)\n                                .put(\"index.refresh_interval\", -1))\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .addMapping(\"child2\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n\n        // test term filter\n        SearchResponse response = client().prepareSearch(\"test\").setQuery(filteredQuery(matchAllQuery(), termFilter(\"_parent\", \"p1\")))\n                .get();\n        assertHitCount(response, 0l);\n\n        client().prepareIndex(\"test\", \"some_type\", \"1\").setSource(\"field\", \"value\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"value\").get();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"value\").setParent(\"p1\").get();\n\n        response = client().prepareSearch(\"test\").setQuery(filteredQuery(matchAllQuery(), termFilter(\"_parent\", \"p1\"))).execute()\n                .actionGet();\n        assertHitCount(response, 0l);\n        refresh();\n\n        response = client().prepareSearch(\"test\").setQuery(filteredQuery(matchAllQuery(), termFilter(\"_parent\", \"p1\"))).execute()\n                .actionGet();\n        assertHitCount(response, 1l);\n\n        response = client().prepareSearch(\"test\").setQuery(filteredQuery(matchAllQuery(), termFilter(\"_parent\", \"parent#p1\"))).execute()\n                .actionGet();\n        assertHitCount(response, 1l);\n\n        client().prepareIndex(\"test\", \"parent2\", \"p1\").setSource(\"p_field\", \"value\").setRefresh(true).get();\n\n        response = client().prepareSearch(\"test\").setQuery(filteredQuery(matchAllQuery(), termFilter(\"_parent\", \"p1\"))).execute()\n                .actionGet();\n        assertHitCount(response, 1l);\n\n        response = client().prepareSearch(\"test\").setQuery(filteredQuery(matchAllQuery(), termFilter(\"_parent\", \"parent#p1\"))).execute()\n                .actionGet();\n        assertHitCount(response, 1l);\n\n        // test terms filter\n        client().prepareIndex(\"test\", \"child2\", \"c1\").setSource(\"c_field\", \"value\").setParent(\"p1\").get();\n        response = client().prepareSearch(\"test\").setQuery(filteredQuery(matchAllQuery(), termsFilter(\"_parent\", \"p1\"))).execute()\n                .actionGet();\n        assertHitCount(response, 1l);\n\n        response = client().prepareSearch(\"test\").setQuery(filteredQuery(matchAllQuery(), termsFilter(\"_parent\", \"parent#p1\"))).execute()\n                .actionGet();\n        assertHitCount(response, 1l);\n\n        refresh();\n        response = client().prepareSearch(\"test\").setQuery(filteredQuery(matchAllQuery(), termsFilter(\"_parent\", \"p1\"))).execute()\n                .actionGet();\n        assertHitCount(response, 2l);\n\n        refresh();\n        response = client().prepareSearch(\"test\").setQuery(filteredQuery(matchAllQuery(), termsFilter(\"_parent\", \"p1\", \"p1\"))).execute()\n                .actionGet();\n        assertHitCount(response, 2l);\n\n        response = client().prepareSearch(\"test\")\n                .setQuery(filteredQuery(matchAllQuery(), termsFilter(\"_parent\", \"parent#p1\", \"parent2#p1\"))).get();\n        assertHitCount(response, 2l);\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testDeletedParent() throws Exception {\n\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"child\")\n                .setSource(\n                        jsonBuilder().startObject().startObject(\"child\").startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                                .endObject().endObject()).execute().actionGet();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"red\").setParent(\"p1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setSource(\"c_field\", \"yellow\").setParent(\"p1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"blue\").setParent(\"p2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"red\").setParent(\"p2\").execute().actionGet();\n\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        // TOP CHILDREN QUERY\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"yellow\")))\n                .execute().actionGet();\n        if (searchResponse.getFailedShards() > 0) {\n            logger.warn(\"Failed shards:\");\n            for (ShardSearchFailure shardSearchFailure : searchResponse.getShardFailures()) {\n                logger.warn(\"-> {}\", shardSearchFailure);\n            }\n        }\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n        assertThat(searchResponse.getHits().getAt(0).sourceAsString(), containsString(\"\\\"p_value1\\\"\"));\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"yellow\")))).execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n        assertThat(searchResponse.getHits().getAt(0).sourceAsString(), containsString(\"\\\"p_value1\\\"\"));\n\n        // update p1 and see what that we get updated values...\n\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1_updated\").execute().actionGet();\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"yellow\"))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n        assertThat(searchResponse.getHits().getAt(0).sourceAsString(), containsString(\"\\\"p_value1_updated\\\"\"));\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"yellow\")))).execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n        assertThat(searchResponse.getHits().getAt(0).sourceAsString(), containsString(\"\\\"p_value1_updated\\\"\"));\n    }","id":2976,"modified_method":"@Test\n    public void testDeletedParent() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").get();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"red\").setParent(\"p1\").get();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setSource(\"c_field\", \"yellow\").setParent(\"p1\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").get();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"blue\").setParent(\"p2\").get();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"red\").setParent(\"p2\").get();\n\n        refresh();\n\n        // TOP CHILDREN QUERY\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"yellow\")))\n                .get();\n        if (searchResponse.getFailedShards() > 0) {\n            logger.warn(\"Failed shards:\");\n            for (ShardSearchFailure shardSearchFailure : searchResponse.getShardFailures()) {\n                logger.warn(\"-> {}\", shardSearchFailure);\n            }\n        }\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n        assertThat(searchResponse.getHits().getAt(0).sourceAsString(), containsString(\"\\\"p_value1\\\"\"));\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"yellow\")))).get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n        assertThat(searchResponse.getHits().getAt(0).sourceAsString(), containsString(\"\\\"p_value1\\\"\"));\n\n        // update p1 and see what that we get updated values...\n\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1_updated\").get();\n        client().admin().indices().prepareRefresh().get();\n\n        searchResponse = client().prepareSearch(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"yellow\"))).execute()\n                .actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n        assertThat(searchResponse.getHits().getAt(0).sourceAsString(), containsString(\"\\\"p_value1_updated\\\"\"));\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"yellow\")))).get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p1\"));\n        assertThat(searchResponse.getHits().getAt(0).sourceAsString(), containsString(\"\\\"p_value1_updated\\\"\"));\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testHasChildQueryWithNestedInnerObjects() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(\n                        ImmutableSettings.settingsBuilder()\n                                .put(\"index.number_of_shards\", 1)\n                                .put(\"index.number_of_replicas\", 0)\n                )\n                .addMapping(\"parent\", \"objects\", \"type=nested\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n\n        client().prepareIndex(\"test\", \"parent\", \"p1\")\n                .setSource(jsonBuilder().startObject().field(\"p_field\", \"1\").startArray(\"objects\")\n                        .startObject().field(\"i_field\", \"1\").endObject()\n                        .startObject().field(\"i_field\", \"2\").endObject()\n                        .startObject().field(\"i_field\", \"3\").endObject()\n                        .startObject().field(\"i_field\", \"4\").endObject()\n                        .startObject().field(\"i_field\", \"5\").endObject()\n                        .startObject().field(\"i_field\", \"6\").endObject()\n                        .endArray().endObject())\n                .execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p2\")\n                .setSource(jsonBuilder().startObject().field(\"p_field\", \"2\").startArray(\"objects\")\n                        .startObject().field(\"i_field\", \"1\").endObject()\n                        .startObject().field(\"i_field\", \"2\").endObject()\n                        .endArray().endObject())\n                .execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setParent(\"p1\").setSource(\"c_field\", \"blue\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setParent(\"p1\").setSource(\"c_field\", \"red\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setParent(\"p2\").setSource(\"c_field\", \"red\").execute().actionGet();\n        client().admin().indices().prepareRefresh(\"test\").execute().actionGet();\n\n        String scoreMode = ScoreType.values()[getRandom().nextInt(ScoreType.values().length)].name().toLowerCase(Locale.ROOT);\n        SearchResponse searchResponse = client().prepareSearch(\"test\")\n                .setQuery(filteredQuery(QueryBuilders.hasChildQuery(\"child\", termQuery(\"c_field\", \"blue\")).scoreType(scoreMode), notFilter(termFilter(\"p_field\", \"3\"))))\n                .execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(filteredQuery(QueryBuilders.hasChildQuery(\"child\", termQuery(\"c_field\", \"red\")).scoreType(scoreMode), notFilter(termFilter(\"p_field\", \"3\"))))\n                .execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n    }","id":2977,"modified_method":"@Test\n    public void testHasChildQueryWithNestedInnerObjects() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(\n                        ImmutableSettings.settingsBuilder()\n                                .put(\"index.number_of_shards\", 1)\n                                .put(\"index.number_of_replicas\", 0)\n                )\n                .addMapping(\"parent\", \"objects\", \"type=nested\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n\n        client().prepareIndex(\"test\", \"parent\", \"p1\")\n                .setSource(jsonBuilder().startObject().field(\"p_field\", \"1\").startArray(\"objects\")\n                        .startObject().field(\"i_field\", \"1\").endObject()\n                        .startObject().field(\"i_field\", \"2\").endObject()\n                        .startObject().field(\"i_field\", \"3\").endObject()\n                        .startObject().field(\"i_field\", \"4\").endObject()\n                        .startObject().field(\"i_field\", \"5\").endObject()\n                        .startObject().field(\"i_field\", \"6\").endObject()\n                        .endArray().endObject())\n                .get();\n        client().prepareIndex(\"test\", \"parent\", \"p2\")\n                .setSource(jsonBuilder().startObject().field(\"p_field\", \"2\").startArray(\"objects\")\n                        .startObject().field(\"i_field\", \"1\").endObject()\n                        .startObject().field(\"i_field\", \"2\").endObject()\n                        .endArray().endObject())\n                .get();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setParent(\"p1\").setSource(\"c_field\", \"blue\").get();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setParent(\"p1\").setSource(\"c_field\", \"red\").get();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setParent(\"p2\").setSource(\"c_field\", \"red\").get();\n        refresh();\n\n        String scoreMode = ScoreType.values()[getRandom().nextInt(ScoreType.values().length)].name().toLowerCase(Locale.ROOT);\n        SearchResponse searchResponse = client().prepareSearch(\"test\")\n                .setQuery(filteredQuery(QueryBuilders.hasChildQuery(\"child\", termQuery(\"c_field\", \"blue\")).scoreType(scoreMode), notFilter(termFilter(\"p_field\", \"3\"))))\n                .get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setQuery(filteredQuery(QueryBuilders.hasChildQuery(\"child\", termQuery(\"c_field\", \"red\")).scoreType(scoreMode), notFilter(termFilter(\"p_field\", \"3\"))))\n                .get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    // The SimpleIdReaderTypeCache#docById method used lget, which can't be used if a map is shared.\n    public void testTopChildrenBug_concurrencyIssue() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(\n                        ImmutableSettings.settingsBuilder()\n                                .put(\"index.number_of_shards\", 1)\n                                .put(\"index.number_of_replicas\", 0)\n                ).execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin().indices().preparePutMapping(\"test\").setType(\"child\").setSource(jsonBuilder().startObject().startObject(\"child\")\n                .startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                .endObject().endObject()).execute().actionGet();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setParent(\"p1\").setSource(\"c_field\", \"blue\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setParent(\"p1\").setSource(\"c_field\", \"red\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setParent(\"p2\").setSource(\"c_field\", \"red\").execute().actionGet();\n        client().admin().indices().prepareRefresh(\"test\").execute().actionGet();\n\n        int numThreads = 10;\n        final CountDownLatch latch = new CountDownLatch(numThreads);\n        final AtomicReference<AssertionError> holder = new AtomicReference<AssertionError>();\n        Runnable r = new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    for (int i = 0; i < 100; i++) {\n                        SearchResponse searchResponse = client().prepareSearch(\"test\")\n                                .setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"blue\")))\n                                .execute().actionGet();\n                        assertNoFailures(searchResponse);\n                        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n\n                        searchResponse = client().prepareSearch(\"test\")\n                                .setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"red\")))\n                                .execute().actionGet();\n                        assertNoFailures(searchResponse);\n                        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n                    }\n                } catch (AssertionError error) {\n                    holder.set(error);\n                } finally {\n                    latch.countDown();\n                }\n            }\n        };\n\n        for (int i = 0; i < 10; i++) {\n            new Thread(r).start();\n        }\n        latch.await();\n        if (holder.get() != null) {\n            throw holder.get();\n        }\n    }","id":2978,"modified_method":"@Test\n    // The SimpleIdReaderTypeCache#docById method used lget, which can't be used if a map is shared.\n    public void testTopChildrenBug_concurrencyIssue() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(\n                        ImmutableSettings.settingsBuilder()\n                                .put(\"index.number_of_shards\", 1)\n                                .put(\"index.number_of_replicas\", 0)\n                )\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").get();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setParent(\"p1\").setSource(\"c_field\", \"blue\").get();\n        client().prepareIndex(\"test\", \"child\", \"c2\").setParent(\"p1\").setSource(\"c_field\", \"red\").get();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setParent(\"p2\").setSource(\"c_field\", \"red\").get();\n        client().admin().indices().prepareRefresh(\"test\").get();\n\n        int numThreads = 10;\n        final CountDownLatch latch = new CountDownLatch(numThreads);\n        final AtomicReference<AssertionError> holder = new AtomicReference<AssertionError>();\n        Runnable r = new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    for (int i = 0; i < 100; i++) {\n                        SearchResponse searchResponse = client().prepareSearch(\"test\")\n                                .setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"blue\")))\n                                .get();\n                        assertNoFailures(searchResponse);\n                        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n\n                        searchResponse = client().prepareSearch(\"test\")\n                                .setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"red\")))\n                                .get();\n                        assertNoFailures(searchResponse);\n                        assertThat(searchResponse.getHits().totalHits(), equalTo(2l));\n                    }\n                } catch (AssertionError error) {\n                    holder.set(error);\n                } finally {\n                    latch.countDown();\n                }\n            }\n        };\n\n        for (int i = 0; i < 10; i++) {\n            new Thread(r).start();\n        }\n        latch.await();\n        if (holder.get() != null) {\n            throw holder.get();\n        }\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    // See also issue:\n    // https://github.com/elasticsearch/elasticsearch/issues/3203\n    public void testHasChildQueryWithMinimumScore() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"child\")\n                .setSource(\n                        jsonBuilder().startObject().startObject(\"child\").startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                                .endObject().endObject()).execute().actionGet();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"x\").setParent(\"p1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"x\").setParent(\"p2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"x\").setParent(\"p2\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c5\").setSource(\"c_field\", \"x\").setParent(\"p2\").execute().actionGet();\n        refresh();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", matchAllQuery()).scoreType(\"sum\"))\n                .setMinScore(3) // Score needs to be 3 or above!\n                .execute().actionGet();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p2\"));\n        assertThat(searchResponse.getHits().getAt(0).score(), equalTo(3.0f));\n    }","id":2979,"modified_method":"@Test\n    // See also issue:\n    // https://github.com/elasticsearch/elasticsearch/issues/3203\n    public void testHasChildQueryWithMinimumScore() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n\n        // index simple data\n        client().prepareIndex(\"test\", \"parent\", \"p1\").setSource(\"p_field\", \"p_value1\").get();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"x\").setParent(\"p1\").get();\n        client().prepareIndex(\"test\", \"parent\", \"p2\").setSource(\"p_field\", \"p_value2\").get();\n        client().prepareIndex(\"test\", \"child\", \"c3\").setSource(\"c_field\", \"x\").setParent(\"p2\").get();\n        client().prepareIndex(\"test\", \"child\", \"c4\").setSource(\"c_field\", \"x\").setParent(\"p2\").get();\n        client().prepareIndex(\"test\", \"child\", \"c5\").setSource(\"c_field\", \"x\").setParent(\"p2\").get();\n        refresh();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", matchAllQuery()).scoreType(\"sum\"))\n                .setMinScore(3) // Score needs to be 3 or above!\n                .get();\n        assertNoFailures(searchResponse);\n        assertThat(searchResponse.getFailedShards(), equalTo(0));\n        assertThat(searchResponse.getHits().totalHits(), equalTo(1l));\n        assertThat(searchResponse.getHits().getAt(0).id(), equalTo(\"p2\"));\n        assertThat(searchResponse.getHits().getAt(0).score(), equalTo(3.0f));\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testExplainUsage() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"child\")\n                .setSource(\n                        jsonBuilder().startObject().startObject(\"child\").startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                                .endObject().endObject()).execute().actionGet();\n\n        String parentId = \"p1\";\n        client().prepareIndex(\"test\", \"parent\", parentId).setSource(\"p_field\", \"1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"1\").setParent(parentId).execute().actionGet();\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\")\n                .setExplain(true)\n                .setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"1\")))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 1l);\n        assertThat(searchResponse.getHits().getAt(0).explanation().getDescription(), equalTo(\"not implemented yet...\"));\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setExplain(true)\n                .setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")).scoreType(\"max\"))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 1l);\n        assertThat(searchResponse.getHits().getAt(0).explanation().getDescription(), equalTo(\"not implemented yet...\"));\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setExplain(true)\n                .setQuery(hasParentQuery(\"parent\", termQuery(\"p_field\", \"1\")).scoreType(\"score\"))\n                .execute().actionGet();\n        assertHitCount(searchResponse, 1l);\n        assertThat(searchResponse.getHits().getAt(0).explanation().getDescription(), equalTo(\"not implemented yet...\"));\n\n        ExplainResponse explainResponse = client().prepareExplain(\"test\", \"parent\", parentId)\n                .setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")).scoreType(\"max\"))\n                .execute().actionGet();\n        assertThat(explainResponse.isExists(), equalTo(true));\n        assertThat(explainResponse.getExplanation().getDescription(), equalTo(\"not implemented yet...\"));\n    }","id":2980,"modified_method":"@Test\n    public void testExplainUsage() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n\n        String parentId = \"p1\";\n        client().prepareIndex(\"test\", \"parent\", parentId).setSource(\"p_field\", \"1\").get();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"1\").setParent(parentId).get();\n        refresh();\n\n        SearchResponse searchResponse = client().prepareSearch(\"test\")\n                .setExplain(true)\n                .setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"1\")))\n                .get();\n        assertHitCount(searchResponse, 1l);\n        assertThat(searchResponse.getHits().getAt(0).explanation().getDescription(), equalTo(\"not implemented yet...\"));\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setExplain(true)\n                .setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")).scoreType(\"max\"))\n                .get();\n        assertHitCount(searchResponse, 1l);\n        assertThat(searchResponse.getHits().getAt(0).explanation().getDescription(), equalTo(\"not implemented yet...\"));\n\n        searchResponse = client().prepareSearch(\"test\")\n                .setExplain(true)\n                .setQuery(hasParentQuery(\"parent\", termQuery(\"p_field\", \"1\")).scoreType(\"score\"))\n                .get();\n        assertHitCount(searchResponse, 1l);\n        assertThat(searchResponse.getHits().getAt(0).explanation().getDescription(), equalTo(\"not implemented yet...\"));\n\n        ExplainResponse explainResponse = client().prepareExplain(\"test\", \"parent\", parentId)\n                .setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")).scoreType(\"max\"))\n                .get();\n        assertThat(explainResponse.isExists(), equalTo(true));\n        assertThat(explainResponse.getExplanation().getDescription(), equalTo(\"not implemented yet...\"));\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testCountApiUsage() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"child\")\n                .setSource(\n                        jsonBuilder().startObject().startObject(\"child\").startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                                .endObject().endObject()).execute().actionGet();\n\n        String parentId = \"p1\";\n        client().prepareIndex(\"test\", \"parent\", parentId).setSource(\"p_field\", \"1\").execute().actionGet();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"1\").setParent(parentId).execute().actionGet();\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        CountResponse countResponse = client().prepareCount(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"1\")))\n                .execute().actionGet();\n        assertHitCount(countResponse, 1l);\n\n        countResponse = client().prepareCount(\"test\").setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")).scoreType(\"max\"))\n                .execute().actionGet();\n        assertHitCount(countResponse, 1l);\n\n        countResponse = client().prepareCount(\"test\").setQuery(hasParentQuery(\"parent\", termQuery(\"p_field\", \"1\")).scoreType(\"score\"))\n                .execute().actionGet();\n        assertHitCount(countResponse, 1l);\n\n        countResponse = client().prepareCount(\"test\").setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"1\"))))\n                .execute().actionGet();\n        assertHitCount(countResponse, 1l);\n\n        countResponse = client().prepareCount(\"test\").setQuery(constantScoreQuery(hasParentFilter(\"parent\", termQuery(\"p_field\", \"1\"))))\n                .execute().actionGet();\n        assertHitCount(countResponse, 1l);\n    }","id":2981,"modified_method":"@Test\n    public void testCountApiUsage() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n\n        String parentId = \"p1\";\n        client().prepareIndex(\"test\", \"parent\", parentId).setSource(\"p_field\", \"1\").get();\n        client().prepareIndex(\"test\", \"child\", \"c1\").setSource(\"c_field\", \"1\").setParent(parentId).get();\n        refresh();\n\n        CountResponse countResponse = client().prepareCount(\"test\").setQuery(topChildrenQuery(\"child\", termQuery(\"c_field\", \"1\")))\n                .get();\n        assertHitCount(countResponse, 1l);\n\n        countResponse = client().prepareCount(\"test\").setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")).scoreType(\"max\"))\n                .get();\n        assertHitCount(countResponse, 1l);\n\n        countResponse = client().prepareCount(\"test\").setQuery(hasParentQuery(\"parent\", termQuery(\"p_field\", \"1\")).scoreType(\"score\"))\n                .get();\n        assertHitCount(countResponse, 1l);\n\n        countResponse = client().prepareCount(\"test\").setQuery(constantScoreQuery(hasChildFilter(\"child\", termQuery(\"c_field\", \"1\"))))\n                .get();\n        assertHitCount(countResponse, 1l);\n\n        countResponse = client().prepareCount(\"test\").setQuery(constantScoreQuery(hasParentFilter(\"parent\", termQuery(\"p_field\", \"1\"))))\n                .get();\n        assertHitCount(countResponse, 1l);\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testParentChildQueriesViaScrollApi() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForGreenStatus().execute().actionGet();\n        client().admin()\n                .indices()\n                .preparePutMapping(\"test\")\n                .setType(\"child\")\n                .setSource(\n                        jsonBuilder().startObject().startObject(\"child\").startObject(\"_parent\").field(\"type\", \"parent\").endObject()\n                                .endObject().endObject()).execute().actionGet();\n\n\n        for (int i = 0; i < 10; i++) {\n            client().prepareIndex(\"test\", \"parent\", \"p\" + i).setSource(\"{}\").execute().actionGet();\n            client().prepareIndex(\"test\", \"child\", \"c\" + i).setSource(\"{}\").setParent(\"p\" + i).execute().actionGet();\n        }\n\n        client().admin().indices().prepareRefresh().execute().actionGet();\n\n        QueryBuilder[] queries = new QueryBuilder[]{\n                hasChildQuery(\"child\", matchAllQuery()),\n                filteredQuery(matchAllQuery(), hasChildFilter(\"child\", matchAllQuery())),\n                hasParentQuery(\"parent\", matchAllQuery()),\n                filteredQuery(matchAllQuery(), hasParentFilter(\"parent\", matchAllQuery())),\n                topChildrenQuery(\"child\", matchAllQuery()).factor(10)\n        };\n\n        for (QueryBuilder query : queries) {\n            SearchResponse scrollResponse = client().prepareSearch(\"test\")\n                    .setScroll(TimeValue.timeValueSeconds(30))\n                    .setSize(1)\n                    .addField(\"_id\")\n                    .setQuery(query)\n                    .setSearchType(\"scan\")\n                    .execute()\n                    .actionGet();\n\n            assertThat(scrollResponse.getFailedShards(), equalTo(0));\n            assertThat(scrollResponse.getHits().totalHits(), equalTo(10l));\n\n            int scannedDocs = 0;\n            do {\n                scrollResponse = client()\n                        .prepareSearchScroll(scrollResponse.getScrollId())\n                        .setScroll(TimeValue.timeValueSeconds(30)).execute().actionGet();\n                assertThat(scrollResponse.getHits().totalHits(), equalTo(10l));\n                scannedDocs += scrollResponse.getHits().getHits().length;\n            } while (scrollResponse.getHits().getHits().length > 0);\n            assertThat(scannedDocs, equalTo(10));\n        }\n    }","id":2982,"modified_method":"@Test\n    public void testParentChildQueriesViaScrollApi() throws Exception {\n        client().admin().indices().prepareCreate(\"test\")\n                .setSettings(ImmutableSettings.settingsBuilder().put(\"index.number_of_shards\", 1).put(\"index.number_of_replicas\", 0))\n                .addMapping(\"parent\")\n                .addMapping(\"child\", \"_parent\", \"type=parent\")\n                .get();\n        ensureGreen();\n        for (int i = 0; i < 10; i++) {\n            client().prepareIndex(\"test\", \"parent\", \"p\" + i).setSource(\"{}\").get();\n            client().prepareIndex(\"test\", \"child\", \"c\" + i).setSource(\"{}\").setParent(\"p\" + i).get();\n        }\n\n        client().admin().indices().prepareRefresh().get();\n\n        QueryBuilder[] queries = new QueryBuilder[]{\n                hasChildQuery(\"child\", matchAllQuery()),\n                filteredQuery(matchAllQuery(), hasChildFilter(\"child\", matchAllQuery())),\n                hasParentQuery(\"parent\", matchAllQuery()),\n                filteredQuery(matchAllQuery(), hasParentFilter(\"parent\", matchAllQuery())),\n                topChildrenQuery(\"child\", matchAllQuery()).factor(10)\n        };\n\n        for (QueryBuilder query : queries) {\n            SearchResponse scrollResponse = client().prepareSearch(\"test\")\n                    .setScroll(TimeValue.timeValueSeconds(30))\n                    .setSize(1)\n                    .addField(\"_id\")\n                    .setQuery(query)\n                    .setSearchType(\"scan\")\n                    .execute()\n                    .actionGet();\n\n            assertThat(scrollResponse.getFailedShards(), equalTo(0));\n            assertThat(scrollResponse.getHits().totalHits(), equalTo(10l));\n\n            int scannedDocs = 0;\n            do {\n                scrollResponse = client()\n                        .prepareSearchScroll(scrollResponse.getScrollId())\n                        .setScroll(TimeValue.timeValueSeconds(30)).get();\n                assertThat(scrollResponse.getHits().totalHits(), equalTo(10l));\n                scannedDocs += scrollResponse.getHits().getHits().length;\n            } while (scrollResponse.getHits().getHits().length > 0);\n            assertThat(scannedDocs, equalTo(10));\n        }\n    }","commit_id":"b591d7fef71b53ec1e6123787a913bb1115e10f2","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public DefaultSyntaxValidator(String syntax)\n    {\n        this.syntax = syntax;\n\n        // add default validation rules\n        addValidationRule(new DefaultValidationRule(\"bold\", Command.BOLD));\n        addValidationRule(new DefaultValidationRule(\"italic\", Command.ITALIC));\n        addValidationRule(new DefaultValidationRule(\"underline\", Command.UNDERLINE));\n        addValidationRule(new DefaultValidationRule(\"strikethrough\", Command.STRIKE_THROUGH));\n        addValidationRule(new DefaultValidationRule(\"subscript\", Command.SUB_SCRIPT));\n        addValidationRule(new DefaultValidationRule(\"superscript\", Command.SUPER_SCRIPT));\n        addValidationRule(new DefaultValidationRule(\"justifyleft\", Command.JUSTIFY_LEFT));\n        addValidationRule(new DefaultValidationRule(\"justifycenter\", Command.JUSTIFY_CENTER));\n        addValidationRule(new DefaultValidationRule(\"justifyright\", Command.JUSTIFY_RIGHT));\n        addValidationRule(new DefaultValidationRule(\"justifyfull\", Command.JUSTIFY_FULL));\n        addValidationRule(new DefaultValidationRule(\"orderedlist\", Command.INSERT_ORDERED_LIST));\n        addValidationRule(new DefaultValidationRule(\"unorderedlist\", Command.INSERT_UNORDERED_LIST));\n        addValidationRule(new DefaultValidationRule(\"indent\", Command.INDENT));\n        addValidationRule(new DefaultValidationRule(\"outdent\", Command.OUTDENT));\n        addValidationRule(new DefaultValidationRule(\"undo\", Command.UNDO));\n        addValidationRule(new DefaultValidationRule(\"redo\", Command.REDO));\n        addValidationRule(new DefaultValidationRule(\"format\", Command.FORMAT_BLOCK));\n        addValidationRule(new DefaultValidationRule(\"fontname\", Command.FONT_NAME));\n        addValidationRule(new DefaultValidationRule(\"fontsize\", Command.FONT_SIZE));\n        addValidationRule(new DefaultValidationRule(\"forecolor\", Command.FORE_COLOR));\n        addValidationRule(new DefaultValidationRule(\"backcolor\", Command.BACK_COLOR));\n        \n        // FIXME : implement this in the table plugin when possible\n        addValidationRule(new DefaultValidationRule(\"deletecol\", new Command(\"deletecol\")));\n        addValidationRule(new DefaultValidationRule(\"deleterow\", new Command(\"deleterow\")));\n        addValidationRule(new DefaultValidationRule(\"insertcolafter\", new Command(\"insertcolafter\")));\n        addValidationRule(new DefaultValidationRule(\"insertcolbefore\", new Command(\"insertcolbefore\")));\n        addValidationRule(new DefaultValidationRule(\"insertrowafter\", new Command(\"insertrowafter\")));\n        addValidationRule(new DefaultValidationRule(\"insertrowbefore\", new Command(\"insertrowbefore\")));\n        addValidationRule(new DefaultValidationRule(\"inserttable\", new Command(\"inserttable\")));        \n    }","id":2983,"modified_method":"public DefaultSyntaxValidator(String syntax)\n    {\n        this.syntax = syntax;\n\n        // add default validation rules\n        addValidationRule(new DefaultValidationRule(\"bold\", Command.BOLD));\n        addValidationRule(new DefaultValidationRule(\"italic\", Command.ITALIC));\n        addValidationRule(new DefaultValidationRule(\"underline\", Command.UNDERLINE));\n        addValidationRule(new DefaultValidationRule(\"strikethrough\", Command.STRIKE_THROUGH));\n        addValidationRule(new DefaultValidationRule(\"subscript\", Command.SUB_SCRIPT));\n        addValidationRule(new DefaultValidationRule(\"superscript\", Command.SUPER_SCRIPT));\n        addValidationRule(new DefaultValidationRule(\"justifyleft\", Command.JUSTIFY_LEFT));\n        addValidationRule(new DefaultValidationRule(\"justifycenter\", Command.JUSTIFY_CENTER));\n        addValidationRule(new DefaultValidationRule(\"justifyright\", Command.JUSTIFY_RIGHT));\n        addValidationRule(new DefaultValidationRule(\"justifyfull\", Command.JUSTIFY_FULL));\n        addValidationRule(new DefaultValidationRule(\"orderedlist\", Command.INSERT_ORDERED_LIST));\n        addValidationRule(new DefaultValidationRule(\"unorderedlist\", Command.INSERT_UNORDERED_LIST));\n        addValidationRule(new DefaultValidationRule(\"indent\", Command.INDENT));\n        addValidationRule(new DefaultValidationRule(\"outdent\", Command.OUTDENT));\n        addValidationRule(new DefaultValidationRule(\"undo\", Command.UNDO));\n        addValidationRule(new DefaultValidationRule(\"redo\", Command.REDO));\n        addValidationRule(new DefaultValidationRule(\"format\", Command.FORMAT_BLOCK));\n        addValidationRule(new DefaultValidationRule(\"fontname\", Command.FONT_NAME));\n        addValidationRule(new DefaultValidationRule(\"fontsize\", Command.FONT_SIZE));\n        addValidationRule(new DefaultValidationRule(\"forecolor\", Command.FORE_COLOR));\n        addValidationRule(new DefaultValidationRule(\"backcolor\", Command.BACK_COLOR));\n        addValidationRule(new DefaultValidationRule(\"link\", Command.CREATE_LINK));\n        addValidationRule(new DefaultValidationRule(\"unlink\", Command.UNLINK));\n        // FIXME : implement this in the table plugin when possible\n        addValidationRule(new DefaultValidationRule(\"deletecol\", new Command(\"deletecol\")));\n        addValidationRule(new DefaultValidationRule(\"deleterow\", new Command(\"deleterow\")));\n        addValidationRule(new DefaultValidationRule(\"insertcolafter\", new Command(\"insertcolafter\")));\n        addValidationRule(new DefaultValidationRule(\"insertcolbefore\", new Command(\"insertcolbefore\")));\n        addValidationRule(new DefaultValidationRule(\"insertrowafter\", new Command(\"insertrowafter\")));\n        addValidationRule(new DefaultValidationRule(\"insertrowbefore\", new Command(\"insertrowbefore\")));\n        addValidationRule(new DefaultValidationRule(\"inserttable\", new Command(\"inserttable\")));        \n    }","commit_id":"1bbd46580d53c9109927b32979383531fb73eef3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see ClickListener#onClick(Widget)\n     */\n    public void onClick(Widget sender)\n    {\n        if (sender == link) {\n            onLink();\n        } else if (sender == unlink) {\n            onUnlink();\n        }\n    }","id":2984,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see ClickListener#onClick(Widget)\n     */\n    public void onClick(Widget sender)\n    {\n        if (sender == link) {\n            onLink(true);\n        } else if (sender == unlink) {\n            onUnlink();\n        }\n    }","commit_id":"1bbd46580d53c9109927b32979383531fb73eef3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractPlugin#destroy()\n     */\n    public void destroy()\n    {\n        link.removeFromParent();\n        link.removeClickListener(this);\n        link = null;\n\n        unlink.removeFromParent();\n        unlink.removeClickListener(this);\n        unlink = null;\n\n        toolBarExtension.clearFeatures();\n\n        super.destroy();\n    }","id":2985,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractPlugin#destroy()\n     */\n    public void destroy()\n    {\n        if (link != null) {\n            link.removeFromParent();\n            link.removeClickListener(this);\n            link = null;\n\n            if (linkDialog != null) {\n                linkDialog.hide();\n                linkDialog.removeFromParent();\n                linkDialog.removePopupListener(this);\n                linkDialog = null;\n            }\n        }\n\n        if (unlink != null) {\n            unlink.removeFromParent();\n            unlink.removeClickListener(this);\n            unlink = null;\n        }\n\n        if (toolBarExtension.getFeatures().length > 0) {\n            getTextArea().removeClickListener(this);\n            toolBarExtension.clearFeatures();\n        }\n        super.destroy();\n    }","commit_id":"1bbd46580d53c9109927b32979383531fb73eef3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public void onUnlink()\n    {\n        // TODO\n    }","id":2986,"modified_method":"/**\n     * Executed when the unlink button is clicked.\n     */\n    public void onUnlink()\n    {\n        getTextArea().getCommandManager().execute(Command.UNLINK);\n    }","commit_id":"1bbd46580d53c9109927b32979383531fb73eef3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractPlugin#init(Wysiwyg, RichTextArea, Config)\n     */\n    public void init(Wysiwyg wysiwyg, RichTextArea textArea, Config config)\n    {\n        super.init(wysiwyg, textArea, config);\n\n        link = new PushButton(Images.INSTANCE.link().createImage(), this);\n        link.setTitle(Strings.INSTANCE.link());\n        toolBarExtension.addFeature(\"link\", link);\n\n        unlink = new PushButton(Images.INSTANCE.unlink().createImage(), this);\n        unlink.setTitle(Strings.INSTANCE.unlink());\n        toolBarExtension.addFeature(\"unlink\", unlink);\n\n        getUIExtensionList().add(toolBarExtension);\n    }","id":2987,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractPlugin#init(Wysiwyg, RichTextArea, Config)\n     */\n    public void init(Wysiwyg wysiwyg, RichTextArea textArea, Config config)\n    {\n        super.init(wysiwyg, textArea, config);\n\n        if (getTextArea().getCommandManager().isSupported(Command.CREATE_LINK)) {\n            link = new PushButton(Images.INSTANCE.link().createImage(), this);\n            link.setTitle(Strings.INSTANCE.link());\n            toolBarExtension.addFeature(\"link\", link);\n        }\n\n        if (getTextArea().getCommandManager().isSupported(Command.UNLINK)) {\n            unlink = new PushButton(Images.INSTANCE.unlink().createImage(), this);\n            unlink.setTitle(Strings.INSTANCE.unlink());\n            toolBarExtension.addFeature(\"unlink\", unlink);\n        }\n\n        if (toolBarExtension.getFeatures().length > 0) {\n            getTextArea().addClickListener(this);\n            getUIExtensionList().add(toolBarExtension);\n            selectionPreserver = new SelectionPreserver(textArea);\n        }\n    }","commit_id":"1bbd46580d53c9109927b32979383531fb73eef3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private WysiwygEditorFactory()\n    {\n        svm = new DefaultSyntaxValidatorManager();\n        svm.addSyntaxValidator(new XHTMLSyntaxValidator());\n        svm.addSyntaxValidator(new XWikiSyntaxValidator());\n        // add additional SyntaxValidator for other syntaxes\n\n        pfm = new DefaultPluginFactoryManager();\n        pfm.addPluginFactory(SeparatorPluginFactory.getInstance());\n        pfm.addPluginFactory(TextPluginFactory.getInstance());\n        pfm.addPluginFactory(VerticalAlignPluginFactory.getInstance());\n        pfm.addPluginFactory(JustifyPluginFactory.getInstance());\n        pfm.addPluginFactory(ListPluginFactory.getInstance());\n        pfm.addPluginFactory(IndentPluginFactory.getInstance());\n        pfm.addPluginFactory(UndoPluginFactory.getInstance());\n        pfm.addPluginFactory(FormatPluginFactory.getInstance());\n        pfm.addPluginFactory(FontPluginFactory.getInstance());\n        pfm.addPluginFactory(ColorPluginFactory.getInstance());\n        pfm.addPluginFactory(SyncPluginFactory.getInstance());\n        pfm.addPluginFactory(SymbolPluginFactory.getInstance());\n        pfm.addPluginFactory(TablePluginFactory.getInstance());\n        // add additional PluginFactory for other plug-ins\n    }","id":2988,"modified_method":"private WysiwygEditorFactory()\n    {\n        svm = new DefaultSyntaxValidatorManager();\n        svm.addSyntaxValidator(new XHTMLSyntaxValidator());\n        svm.addSyntaxValidator(new XWikiSyntaxValidator());\n        // add additional SyntaxValidator for other syntaxes\n\n        pfm = new DefaultPluginFactoryManager();\n        pfm.addPluginFactory(SeparatorPluginFactory.getInstance());\n        pfm.addPluginFactory(TextPluginFactory.getInstance());\n        pfm.addPluginFactory(VerticalAlignPluginFactory.getInstance());\n        pfm.addPluginFactory(JustifyPluginFactory.getInstance());\n        pfm.addPluginFactory(ListPluginFactory.getInstance());\n        pfm.addPluginFactory(IndentPluginFactory.getInstance());\n        pfm.addPluginFactory(UndoPluginFactory.getInstance());\n        pfm.addPluginFactory(FormatPluginFactory.getInstance());\n        pfm.addPluginFactory(FontPluginFactory.getInstance());\n        pfm.addPluginFactory(ColorPluginFactory.getInstance());\n        pfm.addPluginFactory(SyncPluginFactory.getInstance());\n        pfm.addPluginFactory(SymbolPluginFactory.getInstance());\n        pfm.addPluginFactory(LinkPluginFactory.getInstance());\n        pfm.addPluginFactory(TablePluginFactory.getInstance());\n        // add additional PluginFactory for other plug-ins\n    }","commit_id":"1bbd46580d53c9109927b32979383531fb73eef3","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see WysiwygService#getImageAttachments(String, String, String)\n     */\n    public Map<String, String> getImageAttachments(String wikiName, String spaceName, String pageName)\n    {\n        XWikiContext context = getXWikiContext();\n        String database = context.getDatabase();\n        Map<String, String> imageAttachs = new HashMap<String, String>();\n        try {\n            if (wikiName != null) {\n                context.setDatabase(wikiName);\n            }\n            // get the document referred by the parameters\n            // TODO: handle missing space name or missing page name\n            XWikiDocument doc = context.getWiki().getDocument(spaceName + \".\" + pageName, context);\n            // TODO: handle attachment sort\n            for (XWikiAttachment attach : doc.getAttachmentList()) {\n                if (attach.getMimeType(getXWikiContext()).startsWith(\"image/\")) {\n                    // it's an image, add it to the list\n                    imageAttachs.put(doc.getAttachmentURL(attach.getFilename(), context), attach.getFilename());\n                }\n            }\n            return imageAttachs;\n        } catch (XWikiException e) {\n            LOG.error(\"Error while getting the image attachments list\", e);\n        } finally {\n            if (wikiName != null) {\n                getXWikiContext().setDatabase(database);\n            }\n        }\n        return null;\n    }","id":2989,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see WysiwygService#getImageAttachments(String, String, String)\n     */\n    public List<ImageConfig> getImageAttachments(String wikiName, String spaceName, String pageName)\n    {\n        XWikiContext context = getXWikiContext();\n        String database = context.getDatabase();\n        List<ImageConfig> imageAttachs = new ArrayList<ImageConfig>();\n        try {\n            if (wikiName != null) {\n                context.setDatabase(wikiName);\n            }\n            // get the document referred by the parameters\n            // TODO: handle missing space name or missing page name\n            XWikiDocument doc = context.getWiki().getDocument(spaceName + \".\" + pageName, context);\n            // TODO: handle attachment sort\n            for (XWikiAttachment attach : doc.getAttachmentList()) {\n                if (attach.getMimeType(getXWikiContext()).startsWith(\"image/\")) {\n                    ImageConfig img = new ImageConfig();\n                    img.setImageFileName(attach.getFilename());\n                    img.setImageURL(doc.getAttachmentURL(attach.getFilename(), context));\n                    img.setWiki(wikiName);\n                    img.setPage(doc.getName());\n                    img.setSpace(doc.getSpace());\n                    imageAttachs.add(img);\n                }\n            }\n            return imageAttachs;\n        } catch (XWikiException e) {\n            LOG.error(\"Error while getting the image attachments list\", e);\n        } finally {\n            if (wikiName != null) {\n                getXWikiContext().setDatabase(database);\n            }\n        }\n        return null;\n    }","commit_id":"caefd24ff7b830e33cf143f3d6d83d2e0677f07f","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see FormHandler#onSubmitComplete(FormSubmitCompleteEvent)\n     */\n    public void onSubmitComplete(FormSubmitCompleteEvent event)\n    {\n        updateImagesPanel();\n        resetSelectors();\n    }","id":2990,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see FormHandler#onSubmitComplete(FormSubmitCompleteEvent)\n     */\n    public void onSubmitComplete(FormSubmitCompleteEvent event)\n    {\n        imageSelector.setSelection(currentWiki, currentSpace, currentPage);\n    }","commit_id":"caefd24ff7b830e33cf143f3d6d83d2e0677f07f","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see ClickListener#onClick(Widget)\n     */\n    public void onClick(Widget sender)\n    {\n        if (sender instanceof HasImage) {\n            String parsedCurrentSpace = (currentSpace == null) ? \"Main\" : currentSpace;\n            String parsedCurrentPage = (currentPage == null) ? \"WebHome\" : currentPage;\n            imageHTMLBlock =\n                ImageHTMLGenerator.getInstance().getAttachedImageHTML((HasImage) sender, parsedCurrentSpace,\n                    parsedCurrentPage);\n            this.hide();\n        }\n    }","id":2991,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see ClickListener#onClick(Widget)\n     */\n    public void onClick(Widget sender)\n    {\n        if (sender == insertImageButton) {\n            if (validateUserInput()) {\n                insertImage();\n            }\n        }\n    }","commit_id":"caefd24ff7b830e33cf143f3d6d83d2e0677f07f","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Creates an image insertion dialog, for the referred page, and the default file upload url.\n     * \n     * @param currentWiki the wiki of the document we are currently editing.\n     * @param currentSpace the space of the document we are currently editing.\n     * @param currentPage the page of the document we are currently editing.\n     */\n    public ImageDialog(String currentWiki, String currentSpace, String currentPage)\n    {\n        super(false, true);\n        getDialog().setText(Strings.INSTANCE.image());\n        FlowPanel mainPanel = new FlowPanel();\n\n        this.currentWiki = currentWiki;\n        this.currentSpace = currentSpace;\n        this.currentPage = currentPage;\n\n        mainPanel.add(getImagesPanel());\n        mainPanel.add(getFileUploadForm(getUploadURL(), \"filepath\"));\n        mainPanel.addStyleName(\"xImageDialogMain\");\n\n        initWidget(mainPanel);\n    }","id":2992,"modified_method":"/**\n     * Creates an image insertion dialog, for the referred page, and the default file upload url.\n     * \n     * @param currentWiki the wiki of the document we are currently editing.\n     * @param currentSpace the space of the document we are currently editing.\n     * @param currentPage the page of the document we are currently editing.\n     */\n    public ImageDialog(String currentWiki, String currentSpace, String currentPage)\n    {\n        super(false, true);\n        this.currentWiki = currentWiki;\n        this.currentSpace = currentSpace;\n        this.currentPage = currentPage;\n\n        getDialog().setText(Strings.INSTANCE.image());\n\n        FlowPanel mainPanel = new FlowPanel();\n        tabsPanel = new TabPanel();\n        imageSelector = new ImageSelector(currentWiki, currentSpace, currentPage);\n        String uploadUrl = \"../../upload/\" + currentSpace + \"/\" + currentPage;\n        fileUploadForm = new FileUploadForm(uploadUrl, \"filepath\");\n        fileUploadForm.addFormHandler(this);\n        FlowPanel imageSelectionPanel = new FlowPanel();\n        imageSelectionPanel.add(imageSelector);\n        imageSelectionPanel.add(fileUploadForm);\n        tabsPanel.add(imageSelectionPanel, Strings.INSTANCE.imageSelectTabTitle());\n\n        imageParameters = new ImageParametersPanel();\n        tabsPanel.add(imageParameters, Strings.INSTANCE.imageSettingsTabTitle());\n        tabsPanel.selectTab(0);\n        tabsPanel.addTabListener(this);\n\n        mainPanel.add(tabsPanel);\n\n        insertImageButton = new Button(Strings.INSTANCE.imageInsertButton());\n        insertImageButton.addStyleName(\"xInsertButton\");\n        insertImageButton.addClickListener(this);\n        mainPanel.add(insertImageButton);\n\n        mainPanel.addStyleName(\"xImageDialogMain\");\n        initWidget(mainPanel);\n    }","commit_id":"caefd24ff7b830e33cf143f3d6d83d2e0677f07f","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see FormHandler#onSubmit(FormSubmitEvent)\n     */\n    public void onSubmit(FormSubmitEvent event)\n    {\n        if (fileUploadInput.getFilename().trim().length() == 0) {\n            Window.alert(Strings.INSTANCE.fileUploadNoPathError());\n            event.setCancelled(true);\n        }\n    }","id":2993,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see FormHandler#onSubmit(FormSubmitEvent)\n     */\n    public void onSubmit(FormSubmitEvent event)\n    {\n        // nothing\n    }","commit_id":"caefd24ff7b830e33cf143f3d6d83d2e0677f07f","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see CompositeDialogBox#center()\n     */\n    public void center()\n    {\n        super.center();\n        // reset the value of the block each time we show this dialog.\n        imageHTMLBlock = null;\n    }","id":2994,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see CompositeDialogBox#center()\n     */\n    public void center()\n    {\n        super.center();\n        // reset the value of the block each time we show this dialog.\n        imageHTMLBlock = null;\n        if (this.tabsPanel != null) {\n            tabsPanel.selectTab(0);\n        }\n    }","commit_id":"caefd24ff7b830e33cf143f3d6d83d2e0677f07f","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Get an HTML image block for an image attached to the current document, that is, referred only through its\n     * filename.\n     * \n     * @param image the image description, through its filename and url.\n     * @param spaceName name of the space of the page where the image is attached\n     * @param pageName name of the page where the image is attached\n     * @return the HTML block for the passed image.\n     */\n    public String getAttachedImageHTML(HasImage image, String spaceName, String pageName)\n    {\n        // TODO: allow to skip space and page if the block is for an image attached to the current document.\n        String imageReference = spaceName + \".\" + pageName + \"@\" + image.getImageFileName();\n        return \"<!--startimage:\" + imageReference + \"--><img src=\\\"\" + image.getImageURL() + \"\\\" alt=\\\"\"\n            + imageReference + \"\\\"/><!--stopimage-->\";\n    }","id":2995,"modified_method":"/**\n     * Get an HTML image block for an image attached to the current document, that is, referred only through its\n     * filename.\n     * \n     * @param imageConfig the image description, through its filename and url.\n     * @param currentWiki name of the wiki of the edited document\n     * @param currentSpace name of the space of the edited document\n     * @param currentPage name of the page of the edited document\n     * @return the HTML block for the passed image.\n     */\n    public String getAttachedImageHTML(ImageConfig imageConfig, String currentWiki, String currentSpace,\n        String currentPage)\n    {\n        String imageReference = getImageReference(imageConfig, currentWiki, currentSpace, currentPage);\n        String styleAttribute = imageConfig.getAlignment() != null ? getAlignmentStyle(imageConfig.getAlignment()) : \"\";\n        return \"<!--startimage:\" + imageReference + \"--><img src=\\\"\" + imageConfig.getImageURL() + \"\\\" alt=\\\"\"\n            + ((imageConfig.getTooltip() != null) ? imageConfig.getTooltip() : imageReference) + \"\\\" \"\n            + ((styleAttribute.length() > 0) ? \"style=\\\"\" + styleAttribute + \"\\\" \" : \"\")\n            + ((imageConfig.getWidth() != null) ? \"width=\\\"\" + imageConfig.getWidth() + \"\\\" \" : \"\")\n            + ((imageConfig.getHeight() != null) ? \"height=\\\"\" + imageConfig.getHeight() + \"\\\" \" : \"\")\n            + \"/><!--stopimage-->\";\n    }","commit_id":"caefd24ff7b830e33cf143f3d6d83d2e0677f07f","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Function to handle the image event, either the image inserting start (when the button is clicked), either on the\n     * image inserting finish, when the image dialog is closed.\n     * \n     * @param show whether the image dialog needs to be shown or not.\n     */\n    public void onImage(boolean show)\n    {\n        if (show) {\n            getImageDialog().center();\n        } else {\n            String url = getImageDialog().getImageHTMLBlock();\n            if (url != null) {\n                getTextArea().getCommandManager().execute(Command.INSERT_IMAGE, url);\n            }\n        }\n    }","id":2996,"modified_method":"/**\n     * Function to handle the image event, either the image inserting start (when the button is clicked), either on the\n     * image inserting finish, when the image dialog is closed.\n     * \n     * @param show whether the image dialog needs to be shown or not.\n     */\n    public void onImage(boolean show)\n    {\n        if (show) {\n            // store current selection, we'll need it after to add the image in the right place\n            selectionPreserver.saveSelection();\n            // get selection, textify and set as the default alternative text\n            getImageDialog()\n                .setDefaultImageAltText(getTextArea().getDocument().getSelection().getRangeAt(0).toString());\n            getImageDialog().center();\n        } else {\n            // restore selection, dialog has closed\n            selectionPreserver.restoreSelection();\n            String imageHTML = getImageDialog().getImageHTMLBlock();\n            if (imageHTML != null) {\n                getTextArea().getCommandManager().execute(Command.INSERT_IMAGE, imageHTML);\n                // restore selection, command has been executed\n                selectionPreserver.restoreSelection();\n            } else {\n                getTextArea().setFocus(true);\n            }\n        }\n    }","commit_id":"caefd24ff7b830e33cf143f3d6d83d2e0677f07f","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractPlugin#init(Wysiwyg, XRichTextArea, Config)\n     */\n    public void init(Wysiwyg wysiwyg, RichTextArea textArea, Config config)\n    {\n        super.init(wysiwyg, textArea, config);\n\n        image = new PushButton(Images.INSTANCE.image().createImage(), this);\n        image.setTitle(Strings.INSTANCE.image());\n\n        getTextArea().addClickListener(this);\n        toolBarExtension.addFeature(\"image\", image);\n        getUIExtensionList().add(toolBarExtension);\n\n        textArea.getCommandManager().registerCommand(Command.INSERT_IMAGE, new InsertImageExecutable());\n    }","id":2997,"modified_method":"/**\n     * {@inheritDoc}\n     * \n     * @see AbstractPlugin#init(Wysiwyg, XRichTextArea, Config)\n     */\n    public void init(Wysiwyg wysiwyg, RichTextArea textArea, Config config)\n    {\n        super.init(wysiwyg, textArea, config);\n\n        textArea.getCommandManager().registerCommand(Command.INSERT_IMAGE, new InsertImageExecutable());\n        if (getTextArea().getCommandManager().isSupported(Command.INSERT_IMAGE)) {\n            image = new PushButton(Images.INSTANCE.image().createImage(), this);\n            image.setTitle(Strings.INSTANCE.image());\n            toolBarExtension.addFeature(\"image\", image);\n        }\n        \n        if (toolBarExtension.getFeatures().length > 0) {\n            getTextArea().addClickListener(this);\n            getUIExtensionList().add(toolBarExtension);\n            selectionPreserver = new SelectionPreserver(textArea);\n        }\n    }","commit_id":"caefd24ff7b830e33cf143f3d6d83d2e0677f07f","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see HasImage#getImageURL()\n     */\n    public String getImageURL()\n    {\n        return imageURL;\n    }","id":2998,"modified_method":"/**\n     * @return the image for which the preview is generated.\n     */\n    public ImageConfig getImage()\n    {\n        return image;\n    }","commit_id":"caefd24ff7b830e33cf143f3d6d83d2e0677f07f","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Builds an image preview for the passed image.\n     * \n     * @param url the URL of the image to preview.\n     * @param filename the filename of the image to preview.\n     */\n    public ImagePreviewWidget(String url, String filename)\n    {\n        this.imageURL = url;\n        this.imageName = filename;\n        clickListeners = new ClickListenerCollection();\n        Image image = new Image(url + \"?\" + resizeParameters);\n\n        Button insertImageButton = new Button(Strings.INSTANCE.fileInsertImageButton());\n        insertImageButton.setStyleName(\"xInsertImageButton\");\n        insertImageButton.addClickListener(new ClickListener()\n        {\n            public void onClick(Widget sender)\n            {\n                clickListeners.fireClick(ImagePreviewWidget.this);\n            }\n        });\n        Panel mainPanel = new FlowPanel();\n        mainPanel.addStyleName(\"xImagePreview\");\n        mainPanel.add(image);\n        mainPanel.add(insertImageButton);\n\n        initWidget(mainPanel);\n    }","id":2999,"modified_method":"/**\n     * Builds an image preview for the passed image.\n     * \n     * @param img the image to build a preview for\n     */\n    public ImagePreviewWidget(ImageConfig img)\n    {\n        this.image = img;\n        clickListeners = new ClickListenerCollection();\n        Image htmlImage = new Image(img.getImageURL() + \"?\" + resizeParameters);\n        htmlImage.setTitle(image.getImageFileName());\n        htmlImage.addClickListener(new ClickListener()\n        {\n            public void onClick(Widget sender)\n            {\n                clickListeners.fireClick(ImagePreviewWidget.this);\n            }\n        });\n        Panel mainPanel = new FlowPanel();\n        mainPanel.addStyleName(\"xImagePreview\");\n        mainPanel.add(htmlImage);\n\n        initWidget(mainPanel);\n    }","commit_id":"caefd24ff7b830e33cf143f3d6d83d2e0677f07f","url":"https://github.com/xwiki/xwiki-platform"}]